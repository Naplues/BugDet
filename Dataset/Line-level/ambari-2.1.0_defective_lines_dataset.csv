File,Line_number,SRC
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,121,new HashSet<String>(Arrays.asList("fs.defaultFS", "hbase.rootdir", "instance.volumes"));
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterConfigEntity.java,203,if (configJson != null ? !configJson.equals(that.configJson) : that.configJson != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterConfigEntity.java,207,if (configAttributesJson != null ? !configAttributesJson
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterConfigEntity.java,208,.equals(that.configAttributesJson) : that.configAttributesJson != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterConfigEntity.java,221,int result = clusterId != null ? clusterId.intValue() : 0;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterConfigEntity.java,222,result = 31 * result + (configJson != null ? configJson.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterConfigEntity.java,223,result = 31 * result + (configAttributesJson != null ? configAttributesJson.hashCode() : 0);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/client/Connection.java,306,TExecuteStatementResp execResp = new HiveCall<TExecuteStatementResp>(this) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/client/DDLDelegator.java,121,TGetColumnsResp resp = new HiveCall<TGetColumnsResp>(connection) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,803,getManagementController().getAuthName(), "Configuration created for Upgrade");
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/Aggregator.java,85,TezDagId atsTezDag;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/Aggregator.java,86,if (atsHiveQuery.dagNames != null && atsHiveQuery.dagNames.size() > 0) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/Aggregator.java,87,String dagName = atsHiveQuery.dagNames.get(0);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/Aggregator.java,89,atsTezDag = ats.getTezDAGByName(dagName);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/Aggregator.java,91,atsTezDag = new TezDagId();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/Aggregator.java,139,if (atsHiveQuery.dagNames != null && atsHiveQuery.dagNames.size() > 0) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/Aggregator.java,147,saveJobInfoIfNeeded(atsHiveQuery, atsTezDag, viewJob);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/Aggregator.java,148,return mergeAtsJobWithViewJob(atsHiveQuery, atsTezDag, viewJob);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,20,import java.text.MessageFormat;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,21,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,22,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,23,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,24,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,25,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,26,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,27,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,28,import java.util.concurrent.ConcurrentMap;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,52,import com.google.gson.Gson;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,53,import com.google.gson.reflect.TypeToken;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,54,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,55,import com.google.inject.Provider;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,326,newValues.put(keeper, base.get(keeper));
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,329,outputBuffer.append(MessageFormat.format("Preserved {0}/{1} after delete\n",
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,377,SortedSet<Integer> hostsForComponentsHost = hostRolesInfo.get(roleName);
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,381,hostRolesInfo.put(roleName, hostsForComponentsHost);
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,581,public static String getHostName() {
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,582,return server_hostname;
contrib/fast-hdfs-resource/src/main/java/org/apache/ambari/fast_hdfs_resource/Resource.java,217,FsPermission permission = new FsPermission(resource.getMode());
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,178,if (internalGroupsMap.containsKey(groupName)) {
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,179,final Group group = internalGroupsMap.get(groupName);
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,180,if (!group.isLdapGroup()) {
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,181,batchInfo.getGroupsToBecomeLdap().add(groupName);
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,183,internalGroupsMap.remove(groupName);
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,185,batchInfo.getGroupsToBeCreated().add(groupName);
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,187,refreshGroupMembers(batchInfo, groupDto, internalUsersMap, null);
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,252,if (internalGroupsMap.containsKey(groupName)) {
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,253,final Group group = internalGroupsMap.get(groupName);
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,254,if (!group.isLdapGroup()) {
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,255,batchInfo.getGroupsToBecomeLdap().add(groupName);
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,257,internalGroupsMap.remove(groupName);
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,259,batchInfo.getGroupsToBeCreated().add(groupName);
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,261,refreshGroupMembers(batchInfo, groupDto, internalUsersMap, null);
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,319,refreshGroupMembers(batchInfo, groupDto, internalUsersMap, null);
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,375,refreshGroupMembers(batchInfo, subGroup, internalUsers, groupMemberAttributes);
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,421,return getFilteredLdapGroups(groupObjectFilter, groupNameFilter);
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,434,return getFilteredLdapUsers(userObjectFilter, userNameFilter);
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,445,Set<LdapUserDto> filteredLdapUsers = getFilteredLdapUsers(
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,446,new EqualsFilter(OBJECT_CLASS_ATTRIBUTE, ldapServerProperties.getUserObjectClass()),
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,447,getMemberFilter(memberAttributeValue));
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,460,Set<LdapGroupDto> filteredLdapUsers = getFilteredLdapGroups(
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,464,return (filteredLdapUsers.isEmpty()) ? null : filteredLdapUsers.iterator().next();
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,491,return getFilteredLdapGroups(groupObjectFilter);
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,502,private Set<LdapGroupDto> getFilteredLdapGroups(Filter...filters) {
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,507,return getFilteredLdapGroups(andFilter);
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,510,private Set<LdapGroupDto> getFilteredLdapGroups(Filter filter) {
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,513,String baseDn = ldapServerProperties.getBaseDN();
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,526,return getFilteredLdapUsers(userObjectFilter);
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,529,private Set<LdapUserDto> getFilteredLdapUsers(Filter...filters) {
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,534,return getFilteredLdapUsers(andFilter);
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,537,private Set<LdapUserDto> getFilteredLdapUsers(Filter filter) {
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,540,String baseDn = ldapServerProperties.getBaseDN();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1324,isConfigurationCreationNeeded =true;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,268,String value = properties.get(property).toString();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,269,propertiesMap.put(propertyName, value);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/LdapServerProperties.java,56,private static final String userSearchFilter = "({attribute}={0})";
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/LdapServerProperties.java,138,return userSearchFilter.replace("{attribute}", usernameAttribute);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java,287,return hostId == that.hostId && hostName.equals(that.hostName);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostEntity.java,292,return (null == hostId ? 0 : hostId.hashCode());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,111,import org.apache.ambari.server.state.State;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1606,if (hostHasReportables(existingClusterVersion.getRepositoryVersion(),
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1607,hostEntity)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,764,clusterDAO.merge(clusterEntity);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/ResultsPaginationController.java,152,private ArrayList<Object[]> rows;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/ResultsPaginationController.java,167,this.rows = rows;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/ResultsPaginationController.java,170,public ArrayList<Object[]> getRows() {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/CrudDAO.java,81,public void create(E entity) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostVersionEntity.java,154,result = prime * result + ((hostEntity == null) ? 0 : hostEntity.hashCode());
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,20,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,102,private Collection<ClusterVersionEntity> clusterVersionEntities;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,105,private Collection<HostVersionEntity> hostVersionEntities;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1220,if (stateToHosts.containsKey(RepositoryVersionState.INSTALL_FAILED) && !stateToHosts.get(RepositoryVersionState.INSTALL_FAILED).isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1221,return RepositoryVersionState.INSTALL_FAILED;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1226,if (totalINSTALLING + totalINSTALLED == totalHosts) {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,20,import org.apache.commons.httpclient.HttpClient;
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,21,import org.apache.commons.httpclient.methods.PostMethod;
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,22,import org.apache.commons.httpclient.methods.StringRequestEntity;
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,31,import java.net.ConnectException;
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,43,private HttpClient httpClient = new HttpClient();
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,57,httpClient.getParams().setSoTimeout(getTimeoutSeconds() * 1000);
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,58,httpClient.getParams().setConnectionManagerTimeout(getTimeoutSeconds() * 1000);
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,61,protected void emitMetrics(TimelineMetrics metrics) throws IOException {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,66,StringRequestEntity requestEntity = new StringRequestEntity(jsonData, "application/json", "UTF-8");
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,68,PostMethod postMethod = new PostMethod(connectUrl);
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,69,postMethod.setRequestEntity(requestEntity);
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,70,int statusCode = httpClient.executeMethod(postMethod);
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,83,public void setHttpClient(HttpClient httpClient) {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,84,this.httpClient = httpClient;
ambari-metrics/ambari-metrics-hadoop-sink/src/main/java/org/apache/hadoop/metrics2/sink/timeline/HadoopTimelineMetricsSink.java,20,import java.io.IOException;
ambari-metrics/ambari-metrics-hadoop-sink/src/main/java/org/apache/hadoop/metrics2/sink/timeline/HadoopTimelineMetricsSink.java,38,import org.apache.hadoop.metrics2.MetricsException;
ambari-metrics/ambari-metrics-hadoop-sink/src/main/java/org/apache/hadoop/metrics2/sink/timeline/HadoopTimelineMetricsSink.java,216,throw new MetricsException("Failed to putMetrics", io);
ambari-metrics/ambari-metrics-kafka-sink/src/main/java/org/apache/hadoop/metrics2/sink/kafka/KafkaTimelineMetricsReporter.java,45,import java.io.IOException;
ambari-metrics/ambari-metrics-kafka-sink/src/main/java/org/apache/hadoop/metrics2/sink/kafka/KafkaTimelineMetricsReporter.java,211,LOG.error("Unexpected error", e);
ambari-metrics/ambari-metrics-storm-sink/src/main/java/org/apache/hadoop/metrics2/sink/storm/StormTimelineMetricsSink.java,34,import java.io.IOException;
ambari-metrics/ambari-metrics-storm-sink/src/main/java/org/apache/hadoop/metrics2/sink/storm/StormTimelineMetricsSink.java,107,LOG.error("Unexpected error", e);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,102,import org.eclipse.jetty.server.Connector;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,236,factory.registerSingleton("guiceInjector",
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,237,injector);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,344,sslConnectorOneWay.setAcceptors(2);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,345,sslConnectorTwoWay.setAcceptors(2);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,346,serverForAgent.setConnectors(new Connector[]{sslConnectorOneWay, sslConnectorTwoWay});
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,356,sh.setInitParameter("com.sun.jersey.api.json.POJOMappingFeature",
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,374,agent.setInitParameter("com.sun.jersey.api.json.POJOMappingFeature",
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,384,cert.setInitParameter("com.sun.jersey.api.json.POJOMappingFeature",
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,390,ServletHolder proxy = new ServletHolder(ServletContainer.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,391,proxy.setInitParameter("com.sun.jersey.config.property.resourceConfigClass",
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,393,proxy.setInitParameter("com.sun.jersey.config.property.packages",
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,395,proxy.setInitParameter("com.sun.jersey.api.json.POJOMappingFeature", "true");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,396,root.addServlet(proxy, "/proxy/*");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,397,proxy.setInitOrder(5);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,416,QueuedThreadPool qtp = new QueuedThreadPool(configs.getAgentThreadPoolSize());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,417,qtp.setName("qtp-ambari-agent");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,418,serverForAgent.setThreadPool(qtp);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,420,qtp = new QueuedThreadPool(configs.getClientThreadPoolSize());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,421,qtp.setName("qtp-client");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,422,server.setThreadPool(qtp);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,550,String newVersion = structuredOutput == null ? null : structuredOutput.getVersion();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,1176,public String getVersion() {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,1177,return version;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,1180,public void setVersion(String version) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,1181,this.version = version;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1323,if (!property.getValue().equals(clusterConfigProperties.get(property.getKey()))) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4166,private void createWidgetsAndLayouts(Cluster cluster, List<WidgetLayout> widgetLayouts) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1016,private RequestStageContainer handle(Cluster cluster,
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,517,private void saveIfPersisted() {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,479,private void saveIfPersisted() {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,175,private void loadClustersAndHosts() {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,574,private void mapHostClusterEntities(String hostName, Long clusterId) {
ambari-server/src/main/java/org/apache/ambari/server/state/configgroup/ConfigGroupImpl.java,460,private void save(ClusterEntity clusterEntity) {
ambari-server/src/main/java/org/apache/ambari/server/state/scheduler/RequestExecutionImpl.java,250,private void persistEntities() {
ambari-server/src/main/java/org/apache/ambari/server/state/scheduler/RequestExecutionImpl.java,261,private void persistRequestMapping() {
ambari-server/src/main/java/org/apache/ambari/server/state/scheduler/RequestExecutionImpl.java,296,private void saveIfPersisted() {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1282,private void saveIfPersisted() {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1507,private RepositoryVersionEntity createRepositoryVersion(String version, final StackId stackId, final StackInfo stackInfo) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/StackUpgradeHelper.java,74,private void updateMetaInfo(Map<String, String> data) throws SQLException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,829,private Long populateHostsId(ResultSet resultSet) throws SQLException {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1358,private ViewInstanceEntity mergeViewInstance(ViewInstanceEntity instanceEntity, ResourceTypeEntity resourceTypeEntity) {
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1613,private void persistView(ViewEntity viewDefinition, Set<ViewInstanceEntity> instanceDefinitions) throws Exception {
contrib/ambari-scom/ambari-scom-server/src/main/java/org/apache/ambari/scom/AmbariServer.java,308,private void addInMemoryUsers() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ConfigGroupResourceProvider.java,387,if (configGroup.getHosts().containsKey(host.getHostName())) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,711,public void unmapHostFromClusters(String hostname, Set<Cluster> clusters) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,756,private void unmapHostClusterEntities(String hostName, long clusterId) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,768,private void deleteConfigGroupHostMapping(Long hostId) throws AmbariException {
contrib/views/capacity-scheduler/src/main/java/org/apache/ambari/view/capacityscheduler/PropertyValidator.java,26,import java.net.URISyntaxException;
contrib/views/capacity-scheduler/src/main/java/org/apache/ambari/view/capacityscheduler/PropertyValidator.java,47,if (!ambariServerUrl.matches("^https?://[\\w\\d\\.]+:\\d+/api/v1/clusters/\\w+$")) {
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSReportPropertyProvider.java,32,import org.apache.ambari.server.controller.utilities.StreamProvider;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/UserDAO.java,134,user.setUserName(user.getUserName().toLowerCase());
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/UserDAO.java,141,user.setUserName(user.getUserName().toLowerCase());
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/UserDAO.java,148,user.setUserName(user.getUserName().toLowerCase());
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLocalUserDetailsService.java,76,if (user == null) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,449,executor.execute(new ConfigureClusterTask(topology, configurationRequest));
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,452,private class ConfigureClusterTask implements Runnable {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,463,public void run() {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,466,boolean completed = false;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,467,boolean interrupted = false;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,471,try {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,472,Thread.sleep(100);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,474,interrupted = true;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,476,Thread.interrupted();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,478,completed = areRequiredHostGroupsResolved(requiredHostGroups);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,482,try {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,483,LOG.info("TopologyManager.ConfigureClusterTask: Setting Configuration on cluster");
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,490,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,508,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessor.java,168,public List<HostRoleCommand> getTasksByRequestAndTaskIds(Collection<Long> requestIds, Collection<Long> taskIds);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,532,public List<HostRoleCommand> getTasksByRequestAndTaskIds(Collection<Long> requestIds, Collection<Long> taskIds) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,533,if (!requestIds.isEmpty() && !taskIds.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,534,return getTasks(hostRoleCommandDAO.findTaskIdsByRequestAndTaskIds(requestIds, taskIds));
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,537,return getTasks(taskIds);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,539,return getAllTasksByRequestIds(requestIds);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,205,public List<HostRoleCommand> getTasksByRequestAndTaskIds(Collection<Long> requestIds, Collection<Long> taskIds) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,207,List<HostRoleCommand> tasks = new ArrayList<HostRoleCommand>(db.getTasksByRequestAndTaskIds(requestIds, taskIds));
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,208,tasks.addAll(topologyManager.getTasks(requestIds));
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,210,return tasks;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,138,stageId = hostRoleCommandEntity.getStage().getStageId();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,139,requestId = hostRoleCommandEntity.getStage().getRequestId();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java,47,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java,48,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java,49,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java,50,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java,51,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java,176,throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2880,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2882,Collection<Long> requestIds = new ArrayList<Long>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2883,Collection<Long> taskIds = new ArrayList<Long>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2885,for (TaskStatusRequest request : requests) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2886,if (request.getTaskId() != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2887,taskIds.add(request.getTaskId());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2889,if (request.getRequestId() != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2890,requestIds.add(request.getRequestId());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2894,Set<TaskStatusResponse> responses = new HashSet<TaskStatusResponse>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2895,for (HostRoleCommand command : actionManager.getTasksByRequestAndTaskIds(requestIds, taskIds)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2896,TaskStatusResponse taskStatusResponse = new TaskStatusResponse(command);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2897,responses.add(taskStatusResponse);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2900,if (responses.size() == 0) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2901,throw new ObjectNotFoundException("Task resource doesn't exist.");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2904,return responses;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusRequest.java,19,package org.apache.ambari.server.controller;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusRequest.java,21,public class TaskStatusRequest {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusRequest.java,22,protected Long requestId;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusRequest.java,23,protected Long taskId;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusRequest.java,25,public TaskStatusRequest() {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusRequest.java,28,public TaskStatusRequest(Long requestId, Long taskId) {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusRequest.java,29,this.requestId = requestId;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusRequest.java,30,this.taskId = taskId;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusRequest.java,33,public Long getRequestId() {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusRequest.java,34,return requestId;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusRequest.java,37,public void setRequestId(Long requestId) {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusRequest.java,38,this.requestId = requestId;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusRequest.java,41,public Long getTaskId() {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusRequest.java,42,return taskId;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusRequest.java,45,public void setTaskId(Long taskId) {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusRequest.java,46,this.taskId = taskId;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,19,package org.apache.ambari.server.controller;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,21,import org.apache.ambari.server.actionmanager.HostRoleCommand;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,23,public class TaskStatusResponse extends ShortTaskStatus {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,24,private long requestId;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,25,private int exitCode;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,26,private String stderr;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,27,private String stdout;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,28,private String structuredOut;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,29,private String commandDetail;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,30,private long startTime;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,31,private Long endTime;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,32,private short attemptCount;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,34,public TaskStatusResponse() {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,37,public TaskStatusResponse(long requestId,
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,38,int taskId, long stageId, String hostName, String role, String command, String status,
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,39,int exitCode, String stderr, String stdout, long startTime, short attemptCount,
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,40,String commandDetail, String customCommandName, String outputLog, String errorLog) {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,41,super(taskId, stageId, hostName, role, command, status, customCommandName, outputLog, errorLog);
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,42,this.requestId = requestId;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,43,this.exitCode = exitCode;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,44,this.stderr = stderr;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,45,this.stdout = stdout;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,46,this.startTime = startTime;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,47,this.attemptCount = attemptCount;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,48,this.commandDetail = commandDetail;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,51,public TaskStatusResponse(HostRoleCommand hostRoleCommand) {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,52,super(hostRoleCommand);
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,53,this.requestId = hostRoleCommand.getRequestId();
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,54,this.exitCode = hostRoleCommand.getExitCode();
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,55,this.stderr = hostRoleCommand.getStderr();
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,56,this.stdout = hostRoleCommand.getStdout();
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,57,this.startTime = hostRoleCommand.getStartTime();
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,58,this.attemptCount = hostRoleCommand.getAttemptCount();
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,59,this.structuredOut = hostRoleCommand.getStructuredOut();
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,60,this.endTime = hostRoleCommand.getEndTime();
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,61,this.commandDetail = hostRoleCommand.getCommandDetail();
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,64,public long getRequestId() {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,65,return requestId;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,68,public void setRequestId(long requestId) {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,69,this.requestId = requestId;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,72,public int getExitCode() {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,73,return exitCode;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,76,public void setExitCode(int exitCode) {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,77,this.exitCode = exitCode;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,80,public String getStderr() {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,81,return stderr;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,84,public void setStderr(String stderr) {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,85,this.stderr = stderr;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,88,public String getStdout() {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,89,return stdout;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,92,public void setStdout(String stdout) {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,93,this.stdout = stdout;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,96,public long getStartTime() {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,97,return startTime;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,100,public void setStartTime(long startTime) {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,101,this.startTime = startTime;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,104,public short getAttemptCount() {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,105,return attemptCount;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,108,public void setAttemptCount(short attemptCount) {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,109,this.attemptCount = attemptCount;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,112,public String getStructuredOut() {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,113,return structuredOut;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,116,public void setStructuredOut(String structuredOut) {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,117,this.structuredOut = structuredOut;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,120,public Long getEndTime() {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,121,return endTime;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,124,public void setEndTime(Long endTime) {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,125,this.endTime = endTime;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,128,public String getCommandDetail() {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,129,return commandDetail;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,132,public void setCommandDetail(String commandDetail) {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,133,this.commandDetail = commandDetail;
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,137,public String toString() {
ambari-server/src/main/java/org/apache/ambari/server/controller/TaskStatusResponse.java,138,return super.toString();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,21,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,26,import org.apache.ambari.server.AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,28,import org.apache.ambari.server.controller.TaskStatusRequest;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,29,import org.apache.ambari.server.controller.TaskStatusResponse;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,44,class TaskResourceProvider extends AbstractControllerResourceProvider {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,49,protected static final String TASK_CLUSTER_NAME_PROPERTY_ID = PropertyHelper.getPropertyId("Tasks", "cluster_name");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,50,protected static final String TASK_REQUEST_ID_PROPERTY_ID   = PropertyHelper.getPropertyId("Tasks", "request_id");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,51,protected static final String TASK_ID_PROPERTY_ID           = PropertyHelper.getPropertyId("Tasks", "id");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,52,protected static final String TASK_STAGE_ID_PROPERTY_ID     = PropertyHelper.getPropertyId("Tasks", "stage_id");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,53,protected static final String TASK_HOST_NAME_PROPERTY_ID    = PropertyHelper.getPropertyId("Tasks", "host_name");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,54,protected static final String TASK_ROLE_PROPERTY_ID         = PropertyHelper.getPropertyId("Tasks", "role");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,55,protected static final String TASK_COMMAND_PROPERTY_ID      = PropertyHelper.getPropertyId("Tasks", "command");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,56,protected static final String TASK_STATUS_PROPERTY_ID       = PropertyHelper.getPropertyId("Tasks", "status");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,57,protected static final String TASK_EXIT_CODE_PROPERTY_ID    = PropertyHelper.getPropertyId("Tasks", "exit_code");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,58,protected static final String TASK_STDERR_PROPERTY_ID       = PropertyHelper.getPropertyId("Tasks", "stderr");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,59,protected static final String TASK_STOUT_PROPERTY_ID        = PropertyHelper.getPropertyId("Tasks", "stdout");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,60,protected static final String TASK_OUTPUTLOG_PROPERTY_ID    = PropertyHelper.getPropertyId("Tasks", "output_log");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,61,protected static final String TASK_ERRORLOG_PROPERTY_ID     = PropertyHelper.getPropertyId("Tasks", "error_log");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,62,protected static final String TASK_STRUCT_OUT_PROPERTY_ID   = PropertyHelper.getPropertyId("Tasks", "structured_out");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,63,protected static final String TASK_START_TIME_PROPERTY_ID   = PropertyHelper.getPropertyId("Tasks", "start_time");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,64,protected static final String TASK_END_TIME_PROPERTY_ID     = PropertyHelper.getPropertyId("Tasks", "end_time");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,65,protected static final String TASK_ATTEMPT_CNT_PROPERTY_ID  = PropertyHelper.getPropertyId("Tasks", "attempt_cnt");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,66,protected static final String TASK_COMMAND_DET_PROPERTY_ID  = PropertyHelper.getPropertyId("Tasks", "command_detail");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,67,protected static final String TASK_CUST_CMD_NAME_PROPERTY_ID  = PropertyHelper.getPropertyId("Tasks", "custom_command_name");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,106,Map<String, Set<TaskStatusRequest>> requestsMap = new HashMap<String, Set<TaskStatusRequest>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,109,String clusterName = (String) propertyMap.get(TASK_CLUSTER_NAME_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,111,Set<TaskStatusRequest> requests = requestsMap.get(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,112,if (requests == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,113,requests = new HashSet<TaskStatusRequest>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,114,requestsMap.put(clusterName, requests);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,116,requests.add(getRequest(propertyMap));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,119,Set<Resource> resources = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,121,for (Map.Entry<String, Set<TaskStatusRequest>> entry : requestsMap.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,123,final Set<TaskStatusRequest> requests = entry.getValue();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,125,Set<TaskStatusResponse> responses = getResources(new Command<Set<TaskStatusResponse>>() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,127,public Set<TaskStatusResponse> invoke() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,128,return getManagementController().getTaskStatus(requests);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,132,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,133,LOG.debug("Printing size of responses " + responses.size());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,134,for (TaskStatusResponse response : responses) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,135,LOG.debug("Printing response from management controller "
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,136,+ response.toString());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,140,resources = new HashSet<Resource>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,141,for (TaskStatusResponse response : responses) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,142,Resource resource = new ResourceImpl(Resource.Type.Task);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,146,setResourceProperty(resource, TASK_CLUSTER_NAME_PROPERTY_ID, entry.getKey(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,148,setResourceProperty(resource, TASK_REQUEST_ID_PROPERTY_ID, response.getRequestId(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,149,setResourceProperty(resource, TASK_ID_PROPERTY_ID, response.getTaskId(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,150,setResourceProperty(resource, TASK_STAGE_ID_PROPERTY_ID, response.getStageId(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,151,setResourceProperty(resource, TASK_HOST_NAME_PROPERTY_ID, response.getHostName(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,152,setResourceProperty(resource, TASK_ROLE_PROPERTY_ID, response.getRole(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,153,setResourceProperty(resource, TASK_COMMAND_PROPERTY_ID, response.getCommand(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,154,setResourceProperty(resource, TASK_STATUS_PROPERTY_ID, response.getStatus(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,155,setResourceProperty(resource, TASK_EXIT_CODE_PROPERTY_ID, response.getExitCode(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,156,setResourceProperty(resource, TASK_STDERR_PROPERTY_ID, response.getStderr(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,157,setResourceProperty(resource, TASK_STOUT_PROPERTY_ID, response.getStdout(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,158,setResourceProperty(resource, TASK_OUTPUTLOG_PROPERTY_ID, response.getOutputLog(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,159,setResourceProperty(resource, TASK_ERRORLOG_PROPERTY_ID, response.getErrorLog(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,160,setResourceProperty(resource, TASK_STRUCT_OUT_PROPERTY_ID, parseStructuredOutput(response.getStructuredOut()), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,161,setResourceProperty(resource, TASK_START_TIME_PROPERTY_ID, response.getStartTime(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,162,setResourceProperty(resource, TASK_END_TIME_PROPERTY_ID, response.getEndTime(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,163,setResourceProperty(resource, TASK_ATTEMPT_CNT_PROPERTY_ID, response.getAttemptCount(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,165,if (response.getCustomCommandName() != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,166,setResourceProperty(resource, TASK_CUST_CMD_NAME_PROPERTY_ID, response.getCustomCommandName(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,169,if (response.getCommandDetail() == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,170,setResourceProperty(resource, TASK_COMMAND_DET_PROPERTY_ID,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,171,String.format("%s %s", response.getRole(), response.getCommand()), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,173,setResourceProperty(resource, TASK_COMMAND_DET_PROPERTY_ID, response.getCommandDetail(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,176,resources.add(resource);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,179,return resources;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,232,private TaskStatusRequest getRequest(Map<String, Object> properties) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,233,String taskId = (String) properties.get(TASK_ID_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,234,Long task_id = (taskId == null? null: Long.valueOf(taskId));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,235,return new TaskStatusRequest(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,236,Long.valueOf((String) properties.get(TASK_REQUEST_ID_PROPERTY_ID)),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,237,task_id);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostRoleCommandEntity_.java,33,public static volatile SingularAttribute<HostRoleCommandEntity, String> hostName;
ambari-server/src/main/java/org/apache/ambari/server/api/handlers/CreateHandler.java,57,LOG.error("Caught a system exception while attempting to create a resource", e.getMessage());
ambari-server/src/main/java/org/apache/ambari/server/api/handlers/CreateHandler.java,66,LOG.error("Caught a runtime exception while attempting to create a resource", e);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1982,for (ClusterConfigMappingEntity e : clusterEntity.getConfigMappingEntities()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2269,for (ClusterConfigMappingEntity entity : clusterEntity.getConfigMappingEntities()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2274,clusterEntity = clusterDAO.merge(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2331,Collection<ClusterConfigMappingEntity> entities = clusterEntity.getConfigMappingEntities();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2348,entities.add(entity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2350,clusterEntity = clusterDAO.merge(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2400,for (ClusterConfigMappingEntity mappingEntity : clusterEntity.getConfigMappingEntities()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2419,for (ClusterConfigMappingEntity e : clusterEntity.getConfigMappingEntities()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2765,Collection<ClusterConfigMappingEntity> configMappingEntities = clusterEntity.getConfigMappingEntities();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2787,clusterEntity = clusterDAO.merge(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2381,LOG.error("No service found for config type '{}', service config version not created");
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/client/Connection.java,301,String[] commands = cmd.split(";");
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,28,import org.apache.ambari.server.Role;
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,29,import org.apache.ambari.server.state.Service;
ambari-server/src/main/java/org/apache/ambari/server/metadata/ActionMetadata.java,31,import com.google.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,20,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,21,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,22,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,23,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,24,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,26,import javax.xml.bind.annotation.XmlAttribute;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,27,import javax.xml.bind.annotation.XmlElement;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,28,import javax.xml.bind.annotation.XmlSeeAlso;
ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionHash.java,599,LOG.warn("Unable to get alert definitions for the missing cluster {}",
ambari-server/src/main/java/org/apache/ambari/server/state/alert/AlertDefinitionHash.java,600,clusterName);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,48,import org.apache.ambari.server.state.stack.upgrade.ConfigureTask;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,404,if (newValues.containsKey(replacement.key)) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,405,String toReplace = newValues.get(replacement.key);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,415,outputBuffer.append(MessageFormat.format("Replaced {0}/{1} containing \"{2}\" with \"{3}\"\n",
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,416,configType, replacement.key, replacement.find, replacement.replaceWith));
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,419,outputBuffer.append(MessageFormat.format("Property \"{0}\" was not found in {1} to replace content\n",
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/ConfigureAction.java,420,replacement.key, configType));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,403,throw new IllegalArgumentException("The time range query for " +
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,879,private PropertyProvider createMetricsReportPropertyProvider(Resource.Type type, StreamProvider streamProvider,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,894,StreamProvider streamProvider,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,910,StreamProvider streamProvider,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,927,StreamProvider streamProvider,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackDefinedPropertyProvider.java,76,private StreamProvider streamProvider = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackDefinedPropertyProvider.java,102,StreamProvider streamProvider,
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsPropertyProvider.java,43,protected final StreamProvider streamProvider;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsPropertyProvider.java,62,StreamProvider streamProvider,
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsPropertyProvider.java,82,StreamProvider streamProvider,
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsPropertyProviderProxy.java,53,StreamProvider streamProvider,
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsPropertyProviderProxy.java,102,StreamProvider streamProvider,
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsPropertyProviderProxy.java,124,StreamProvider streamProvider,
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsPropertyProviderProxy.java,151,StreamProvider streamProvider,
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsReportPropertyProvider.java,64,StreamProvider streamProvider,
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsReportPropertyProviderProxy.java,45,StreamProvider streamProvider,
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsReportPropertyProviderProxy.java,63,StreamProvider streamProvider,
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ganglia/GangliaComponentPropertyProvider.java,42,StreamProvider streamProvider,
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ganglia/GangliaHostComponentPropertyProvider.java,39,StreamProvider streamProvider,
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ganglia/GangliaHostPropertyProvider.java,57,StreamProvider streamProvider,
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ganglia/GangliaPropertyProvider.java,83,StreamProvider streamProvider,
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSComponentPropertyProvider.java,31,StreamProvider streamProvider,
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSHostComponentPropertyProvider.java,30,StreamProvider streamProvider,
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSHostPropertyProvider.java,31,StreamProvider streamProvider,
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,81,StreamProvider streamProvider,
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSReportPropertyProvider.java,72,StreamProvider streamProvider,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapper.java,89,Map<String, DesiredConfig> desiredConfigs = cluster.getDesiredConfigs();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapper.java,97,for (final Entry<String, DesiredConfig> desiredConfig : desiredConfigs.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapper.java,98,configurationTags.put(desiredConfig.getKey(), new HashMap<String, String>() {{
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapper.java,99,put("tag", desiredConfig.getValue().getTag());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapper.java,104,configurationTags.get(refreshConfigTag).put("tag", desiredConfigs.get(refreshConfigTag).getTag());
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java,48,import static org.apache.hadoop.yarn.server.applicationhistoryservice.metrics.timeline.TimelineMetricConfiguration.*;
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,41,protected static final int DEFAULT_POST_TIMEOUT_SECONDS = 10;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/TimelineWebServices.java,326,throw new WebApplicationException(io,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/TimelineWebServices.java,327,Response.Status.INTERNAL_SERVER_ERROR);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigureTask.java,441,if (StringUtils.isNotBlank(transfer.ifKey) &&
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigureTask.java,442,StringUtils.isNotBlank(transfer.ifType) &&
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigureTask.java,443,transfer.ifValue != null) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,687,properties.putAll(oldConfig.getProperties());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,182,return !(!componentInfo.isCustomCommand(commandName) &&
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,183,!actionMetadata.isDefaultHostComponentCommand(commandName));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,20,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.HOOKS_FOLDER;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,21,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.SERVICE_PACKAGE_FOLDER;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,22,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.VERSION;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,24,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,25,import java.util.Arrays;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,27,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,28,import java.util.EnumSet;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,29,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,30,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,31,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,32,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,33,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,34,import java.util.regex.Matcher;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,35,import java.util.regex.Pattern;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,103,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,104,import com.google.inject.Provider;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/StageWrapper.java,26,import com.google.gson.Gson;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,91,desiredStateEntity = new ServiceComponentDesiredStateEntity();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,151,getName());
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,174,return desiredStateEntity.getComponentName();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,266,public ServiceComponentHost addServiceComponentHost(
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,267,String hostName) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,330,return desiredStateEntity.getDesiredState();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,348,desiredStateEntity.setDesiredState(state);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,349,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,359,StackEntity stackEntity = desiredStateEntity.getDesiredStack();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,385,stack.getStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,387,desiredStateEntity.setDesiredStack(stackEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,388,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,470,service.refresh();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,508,desiredStateEntity = serviceComponentDesiredStateDAO.findByPK(pk);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,509,serviceComponentDesiredStateDAO.refresh(desiredStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,577,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,613,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,669,ServiceComponentDesiredStateEntityPK pk = new ServiceComponentDesiredStateEntityPK();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,670,pk.setClusterId(getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,671,pk.setComponentName(getName());
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,672,pk.setServiceName(getServiceName());
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,674,serviceComponentDesiredStateDAO.removeByPK(pk);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,21,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,22,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,23,import java.util.concurrent.locks.ReadWriteLock;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,24,import java.util.concurrent.locks.ReentrantReadWriteLock;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,47,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,48,import com.google.inject.Injector;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,49,import com.google.inject.ProvisionException;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,50,import com.google.inject.assistedinject.Assisted;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,51,import com.google.inject.assistedinject.AssistedInject;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,52,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,62,private static final Logger LOG =
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,63,LoggerFactory.getLogger(ServiceImpl.class);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,206,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,236,public ServiceComponent addServiceComponent(
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,237,String serviceComponentName) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,286,return serviceDesiredStateEntity.getDesiredState();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,301,+ state);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,303,serviceDesiredStateEntity.setDesiredState(state);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,314,return serviceDesiredStateEntity.getSecurityState();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,335,serviceDesiredStateEntity.setSecurityState(securityState);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,346,StackEntity desiredStackEntity = serviceDesiredStateEntity.getDesiredStack();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,370,serviceDesiredStateEntity.setDesiredStack(stackEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,442,cluster.refresh();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,648,serviceDesiredStateEntity.setMaintenanceState(state);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,661,return serviceDesiredStateEntity.getMaintenanceState();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,791,getStateEntity().setCurrentState(state);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,792,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,802,return stateEntity.getVersion();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,812,getStateEntity().setVersion(version);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,813,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,823,return stateEntity.getSecurityState();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,833,getStateEntity().setSecurityState(securityState);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,834,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,844,return desiredStateEntity.getSecurityState();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,878,getStateEntity().setUpgradeState(upgradeState);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,879,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,908,+ ", currentState=" + oldState
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1059,getStateEntity().setCurrentStack(stackEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1060,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1070,return desiredStateEntity.getDesiredState();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1080,getDesiredStateEntity().setDesiredState(state);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1081,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1091,StackEntity desiredStackEntity = desiredStateEntity.getDesiredStack();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1092,return new StackId(desiredStackEntity.getStackName(),
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1103,StackEntity stackEntity = stackDAO.find(stackId.getStackName(),
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1106,getDesiredStateEntity().setDesiredStack(stackEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1107,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1117,HostComponentAdminState adminState = desiredStateEntity.getAdminState();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1120,adminState = HostComponentAdminState.INSERVICE;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1122,return adminState;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1132,getDesiredStateEntity().setAdminState(attribute);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1133,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1219,host.refresh();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1220,serviceComponent.refresh();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1361,HostComponentDesiredStateEntityPK desiredPK = new HostComponentDesiredStateEntityPK();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1362,desiredPK.setClusterId(desiredStateEntity.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1363,desiredPK.setComponentName(desiredStateEntity.getComponentName());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1364,desiredPK.setServiceName(desiredStateEntity.getServiceName());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1365,desiredPK.setHostId(desiredStateEntity.getHostId());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1367,hostComponentDesiredStateDAO.removeByPK(desiredPK);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1370,stateEntity.getHostEntity().removeHostComponentStateEntity(stateEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1371,desiredStateEntity.getHostEntity().removeHostComponentDesiredStateEntity(desiredStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1442,getDesiredStateEntity().setMaintenanceState(state);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1443,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1446,MaintenanceModeEvent event = new MaintenanceModeEvent(state, this);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1447,eventPublisher.publish(event);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1458,return desiredStateEntity.getMaintenanceState();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1488,return desiredStateEntity.isRestartRequired();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1498,getDesiredStateEntity().setRestartRequired(restartRequired);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1499,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1500,helper.invalidateStaleConfigsCache(this);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1512,stackId.getStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,674,private void persistComponentEntities(HostComponentStateEntity stateEntity, HostComponentDesiredStateEntity desiredStateEntity, ServiceComponentDesiredStateEntity serviceComponentDesiredStateEntity) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,681,hostEntity.addHostComponentStateEntity(stateEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,682,hostEntity.addHostComponentDesiredStateEntity(desiredStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,686,desiredStateEntity.setServiceComponentDesiredStateEntity(serviceComponentDesiredStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,687,desiredStateEntity.setHostEntity(hostEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,688,stateEntity.setServiceComponentDesiredStateEntity(serviceComponentDesiredStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,692,hostComponentDesiredStateDAO.create(desiredStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog150.java,694,serviceComponentDesiredStateDAO.create(serviceComponentDesiredStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1014,ServiceComponentDesiredStateDAO dao = injector.getInstance(ServiceComponentDesiredStateDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1015,ServiceComponentDesiredStateEntityPK entityPK = new ServiceComponentDesiredStateEntityPK();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1016,entityPK.setClusterId(cluster.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1017,entityPK.setServiceName("STORM");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1018,entityPK.setComponentName("STORM_REST_API");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1019,ServiceComponentDesiredStateEntity entity = dao.findByPK(entityPK);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1020,if (entity != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1021,EntityManager em = getEntityManagerProvider().get();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1022,CriteriaBuilder cb = em.getCriteriaBuilder();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1024,try {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1025,LOG.info("Deleting STORM_REST_API service component.");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1026,CriteriaDelete<HostComponentStateEntity> hcsDelete = cb.createCriteriaDelete(HostComponentStateEntity.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1027,CriteriaDelete<HostComponentDesiredStateEntity> hcdDelete = cb.createCriteriaDelete(HostComponentDesiredStateEntity.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1028,CriteriaDelete<ServiceComponentDesiredStateEntity> scdDelete = cb.createCriteriaDelete(ServiceComponentDesiredStateEntity.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1030,Root<HostComponentStateEntity> hcsRoot = hcsDelete.from(HostComponentStateEntity.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1031,Root<HostComponentDesiredStateEntity> hcdRoot = hcdDelete.from(HostComponentDesiredStateEntity.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1032,Root<ServiceComponentDesiredStateEntity> scdRoot = scdDelete.from(ServiceComponentDesiredStateEntity.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1034,hcsDelete.where(cb.equal(hcsRoot.get("componentName"), "STORM_REST_API"));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1035,hcdDelete.where(cb.equal(hcdRoot.get("componentName"), "STORM_REST_API"));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1036,scdDelete.where(cb.equal(scdRoot.get("componentName"), "STORM_REST_API"));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1038,em.createQuery(hcsDelete).executeUpdate();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1039,em.createQuery(hcdDelete).executeUpdate();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1040,em.createQuery(scdDelete).executeUpdate();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1042,LOG.warn("Error deleting STORM_REST_API service component. " +
ambari-server/src/main/java/org/apache/ambari/server/checks/HiveDynamicServiceDiscoveryCheck.java,101,if ("HDP".equals(request.getSourceStackId().getStackName())) {
ambari-server/src/main/java/org/apache/ambari/server/checks/HiveDynamicServiceDiscoveryCheck.java,102,if (VersionUtils.compareVersions(request.getSourceStackId().getStackVersion(), "2.3.0.0") < 0
ambari-server/src/main/java/org/apache/ambari/server/checks/HiveDynamicServiceDiscoveryCheck.java,103,&& VersionUtils.compareVersions(request.getTargetStackId().getStackVersion(), "2.3.0.0") < 0
ambari-server/src/main/java/org/apache/ambari/server/checks/HiveDynamicServiceDiscoveryCheck.java,104,&& VersionUtils.compareVersions(request.getSourceStackId().getStackVersion(), request.getTargetStackId().getStackVersion()) < 0) {
ambari-server/src/main/java/org/apache/ambari/server/checks/HiveDynamicServiceDiscoveryCheck.java,105,checkStatus = PrereqCheckStatus.WARNING;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesMapReduceDistributedCacheCheck.java,109,if (!frameworkPath.matches("^[^:]*dfs:.*") && (defaultFS == null || !defaultFS.matches("^[^:]*dfs:.*"))) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesNamenodeTruncateCheck.java,21,import org.apache.ambari.server.ServiceNotFoundException;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesNamenodeTruncateCheck.java,27,import org.apache.ambari.server.utils.VersionUtils;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesNamenodeTruncateCheck.java,77,if ("HDP".equals(request.getSourceStackId().getStackName())) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesNamenodeTruncateCheck.java,78,if (VersionUtils.compareVersions(request.getSourceStackId().getStackVersion(), "2.3.0.0") >= 0
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesNamenodeTruncateCheck.java,79,&& VersionUtils.compareVersions(request.getTargetStackId().getStackVersion(), "2.3.0.0") >= 0
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesNamenodeTruncateCheck.java,80,&& VersionUtils.compareVersions(request.getSourceStackId().getStackVersion(), request.getTargetStackId().getStackVersion()) < 0) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesNamenodeTruncateCheck.java,81,checkStatus = PrereqCheckStatus.PASS;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesTezDistributedCacheCheck.java,109,if (!libUris.matches("^[^:]*dfs:.*") && (defaultFS == null || !defaultFS.matches("^[^:]*dfs:.*"))) {
ambari-server/src/main/java/org/apache/ambari/server/checks/YarnTimelineServerStatePreservingCheck.java,52,private enum MinimumApplicableStackVersion {
ambari-server/src/main/java/org/apache/ambari/server/checks/YarnTimelineServerStatePreservingCheck.java,53,HDP_STACK("HDP", "2.2.4.2");
ambari-server/src/main/java/org/apache/ambari/server/checks/YarnTimelineServerStatePreservingCheck.java,55,private String stackName;
ambari-server/src/main/java/org/apache/ambari/server/checks/YarnTimelineServerStatePreservingCheck.java,56,private String stackVersion;
ambari-server/src/main/java/org/apache/ambari/server/checks/YarnTimelineServerStatePreservingCheck.java,58,private MinimumApplicableStackVersion(String stackName, String stackVersion) {
ambari-server/src/main/java/org/apache/ambari/server/checks/YarnTimelineServerStatePreservingCheck.java,59,this.stackName = stackName;
ambari-server/src/main/java/org/apache/ambari/server/checks/YarnTimelineServerStatePreservingCheck.java,60,this.stackVersion = stackVersion;
ambari-server/src/main/java/org/apache/ambari/server/checks/YarnTimelineServerStatePreservingCheck.java,63,public String getStackName() {
ambari-server/src/main/java/org/apache/ambari/server/checks/YarnTimelineServerStatePreservingCheck.java,64,return stackName;
ambari-server/src/main/java/org/apache/ambari/server/checks/YarnTimelineServerStatePreservingCheck.java,67,public String getStackVersion() {
ambari-server/src/main/java/org/apache/ambari/server/checks/YarnTimelineServerStatePreservingCheck.java,68,return stackVersion;
ambari-server/src/main/java/org/apache/ambari/server/checks/YarnTimelineServerStatePreservingCheck.java,96,for (MinimumApplicableStackVersion minimumStackVersion : MinimumApplicableStackVersion.values()) {
ambari-server/src/main/java/org/apache/ambari/server/checks/YarnTimelineServerStatePreservingCheck.java,97,String stackName = cluster.getCurrentStackVersion().getStackName();
ambari-server/src/main/java/org/apache/ambari/server/checks/YarnTimelineServerStatePreservingCheck.java,98,if (minimumStackVersion.getStackName().equals(stackName)){
ambari-server/src/main/java/org/apache/ambari/server/checks/YarnTimelineServerStatePreservingCheck.java,99,String currentClusterRepositoryVersion = cluster.getCurrentClusterVersion().getRepositoryVersion().getVersion();
ambari-server/src/main/java/org/apache/ambari/server/checks/YarnTimelineServerStatePreservingCheck.java,100,return VersionUtils.compareVersions(currentClusterRepositoryVersion, minimumStackVersion.getStackVersion()) >= 0;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,293,return new CalculatedStatus(status, progressPercent);
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeContext.java,170,public Map<String, List<String>> getUnhealthy() {
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeContext.java,171,Map<String, List<String>> results = new HashMap<String, List<String>>();
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeContext.java,173,for (ServiceComponentHost sch : m_unhealthy) {
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeContext.java,174,if (!results.containsKey(sch.getHostName())) {
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeContext.java,175,results.put(sch.getHostName(), new ArrayList<String>());
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeContext.java,177,results.get(sch.getHostName()).add(sch.getServiceComponentName());
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeContext.java,180,return results;
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,142,DIRECTION_VERB_PROPER("direction.verb.proper"),
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,146,UNHEALTHY_HOSTS("hosts.unhealthy");
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,396,case UNHEALTHY_HOSTS:
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,397,value = StringUtils.join(ctx.getUnhealthy().keySet(), ", ");
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeHelper.java,398,break;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,161,String id        = execution.id;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,167,if (ctx.getUnhealthy().isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,168,return null;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,170,ManualTask mt = (ManualTask) task;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,172,fillHostDetails(mt, ctx.getUnhealthy());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,633,createStage(ctx, req, itemEntity, wrapper, skippable, allowRetry);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,826,makeActionStage(context, request, entity, wrapper, skippable, allowRetry);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,829,makeServiceCheckStage(context, request, entity, wrapper, skippable, allowRetry);
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,78,private static PersistedState persistedState = new PersistedStateImpl();
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,21,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,22,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,23,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,24,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,25,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,26,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,31,import org.apache.ambari.server.StaticallyInject;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,61,private static TopologyRequestDAO topologyRequestDAO;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,64,private static TopologyHostGroupDAO hostGroupDAO;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,67,private static TopologyHostRequestDAO hostRequestDAO;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,70,private static TopologyLogicalTaskDAO topologyLogicalTaskDAO;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,73,private static HostRoleCommandDAO hostRoleCommandDAO;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,76,private static HostRoleCommandDAO physicalTaskDAO;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,79,private static BlueprintFactory blueprintFactory;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,82,private static LogicalRequestFactory logicalRequestFactory;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,85,private static AmbariContext ambariContext;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,136,TopologyRequest replayedRequest = new ReplayedTopologyRequest(entity);
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,309,public ReplayedTopologyRequest(TopologyRequestEntity entity) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,68,private static LogicalRequestFactory logicalRequestFactory = new LogicalRequestFactory();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,69,private static AmbariContext ambariContext = new AmbariContext();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,71,private final Object initializationLock = new Object();
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/UploadService.java,54,FSDataOutputStream out = getApi(context).create(filePath, false);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/UploadService.java,55,while (uploadedInputStream.read(chunk) != -1) {
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/UploadService.java,56,out.write(chunk);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/UploadService.java,58,out.close();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,716,clusterMetricCollectorMap.put(clusterName, hostName);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,326,if (cmd.getRole().equals(Role.HIVE_CLIENT.toString()) &&
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2425,if (ec.getRole().equals(Role.HIVE_CLIENT.toString()) &&
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1858,service.delete();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1882,service.delete();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,132,new SimplePropertyNameExportFilter("kdc_host", "kerberos-env")};
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,150,getController().createCluster(clusterRequest);
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,226,Set<ServiceComponentHostRequest> requests = new HashSet<ServiceComponentHostRequest>();
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,237,getController().createHostComponents(requests);
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,283,public void registerHostWithConfigGroup(String hostName, ClusterTopology topology, String groupName) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,285,if (!addHostToExistingConfigGroups(hostName, topology, groupName)) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,322,ClusterRequest clusterRequest = new ClusterRequest(null, clusterName, "INSTALLED", null, stackInfo, null);
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,325,getController().updateClusters(Collections.singleton(clusterRequest), null);
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,336,public void setConfigurationOnCluster(ClusterRequest clusterRequest) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,338,getController().updateClusters(Collections.singleton(clusterRequest), null);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,344,LogicalRequest logicalRequest = logicalRequestFactory.createRequest(
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,347,persistedState.persistLogicalRequest(logicalRequest, request.getId());
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,358,private void processAcceptedHostOffer(ClusterTopology topology, HostOfferResponse response, HostImpl host) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,359,String hostName = host.getHostName();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,371,persistedState.registerHostName(response.getHostRequestId(), hostName);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,86,private Clusters clusters;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,202,checkHostComponentVersions(cluster, version, clusterDesiredStackId);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,371,class InfoTuple {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,372,public final String serviceName;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,373,public final String componentName;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,374,public final String hostName;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,376,public InfoTuple(String serviceName, String componentName, String hostName) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,377,this.serviceName = serviceName;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,378,this.componentName = componentName;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,379,this.hostName = hostName;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,399,service.getName(), serviceComponent.getName(), serviceComponentHost.getHostName()));
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,405,if (! errors.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,406,StrBuilder messageBuff = new StrBuilder(
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,407,String.format(
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,409,+ "have not been upgraded to version %s. Please install and upgrade "
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,410,+ "the Stack Version on those hosts and try again.\nHost components:\n",
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,411,errors.size(), desiredVersion));
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,413,for (InfoTuple error : errors) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,414,messageBuff.append(String.format("%s on host %s\n", error.componentName, error.hostName));
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,417,throw new AmbariException(messageBuff.toString());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractResourceProvider.java,273,return command.invoke();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractResourceProvider.java,331,return command.invoke();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,151,private Map<String, Map<String, Config>> allConfigs;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ambari/Services.java,67,if (httpPolicy.equals(HTTPS_ONLY)) {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ambari/Services.java,68,protocol = "https";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,228,public static final String EXECUTION_SCHEDULER_CLUSTERED = "server.execution.scheduler.isClustered";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,229,public static final String EXECUTION_SCHEDULER_THREADS = "server.execution.scheduler.maxThreads";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,230,public static final String EXECUTION_SCHEDULER_CONNECTIONS = "server.execution.scheduler.maxDbConnections";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,231,public static final String EXECUTION_SCHEDULER_MISFIRE_TOLERATION = "server.execution.scheduler.misfire.toleration.minutes";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,232,public static final String EXECUTION_SCHEDULER_START_DELAY = "server.execution.scheduler.start.delay.seconds";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,953,AGENT_API_GZIP_COMPRESSION_ENABLED_KEY,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,954,API_GZIP_COMPRESSION_ENABLED_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1324,return properties.getProperty(EXECUTION_SCHEDULER_CLUSTERED, "false");
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1328,return properties.getProperty(EXECUTION_SCHEDULER_THREADS,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1343,return properties.getProperty(EXECUTION_SCHEDULER_CONNECTIONS,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1349,(EXECUTION_SCHEDULER_MISFIRE_TOLERATION,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1355,String delay = properties.getProperty(EXECUTION_SCHEDULER_START_DELAY,
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,309,bindConstant().annotatedWith(Names.named("schedulerSleeptime")).to(1000L);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,165,public static final String GET_LATEST_METRIC_SQL = "SELECT " +
contrib/views/tez/src/main/java/org/apache/ambari/view/tez/ViewControllerImpl.java,51,status.setParameters(parameters);
contrib/views/tez/src/main/java/org/apache/ambari/view/tez/ViewControllerImpl.java,52,return status;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,234,UpgradeResourceProvider(AmbariManagementController controller) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,66,import org.apache.ambari.server.orm.entities.HostEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,532,Map<String, String> args = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,533,if (newStateStr.equals(RepositoryVersionState.CURRENT.toString())) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,535,args.put(FinalizeUpgradeAction.UPGRADE_DIRECTION_KEY, "upgrade");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,538,args.put(FinalizeUpgradeAction.UPGRADE_DIRECTION_KEY, "downgrade");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,540,throw new IllegalArgumentException(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,541,String.format("Invalid desired state %s. Should be either CURRENT or INSTALLED",
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,542,newStateStr));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,547,String defaultHostName = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,549,if (hosts != null && !hosts.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,550,Collections.sort(hosts);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,551,defaultHostName = hosts.get(0).getHostName();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,553,if (defaultHostName == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,554,throw new AmbariException("Could not find at least one host to set the command for");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,557,args.put(FinalizeUpgradeAction.VERSION_KEY, desiredRepoVersion);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,558,args.put(FinalizeUpgradeAction.CLUSTER_NAME_KEY, clName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,560,ExecutionCommand command = new ExecutionCommand();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,561,command.setCommandParams(args);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,562,command.setClusterName(clName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,563,finalizeUpgradeAction.setExecutionCommand(command);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,565,HostRoleCommand hostRoleCommand = hostRoleCommandFactory.create(defaultHostName,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,566,Role.AMBARI_SERVER_ACTION, null, null);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,567,finalizeUpgradeAction.setHostRoleCommand(hostRoleCommand);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,569,CommandReport report = finalizeUpgradeAction.execute(null);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,571,LOG.info("Finalize output:");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,572,LOG.info("STDOUT: {}", report.getStdOut());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,573,LOG.info("STDERR: {}", report.getStdErr());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,575,if (report.getStatus().equals(HostRoleStatus.COMPLETED.toString())) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,576,return getRequestStatus(null);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,578,String detailedOutput = "Finalization failed. More details: \n" +
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,581,throw new SystemException(detailedOutput);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentDesiredStateDAO.java,21,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentDesiredStateDAO.java,22,import com.google.inject.Provider;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentDesiredStateDAO.java,23,import com.google.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentDesiredStateDAO.java,24,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentDesiredStateDAO.java,30,import javax.persistence.EntityManager;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentDesiredStateDAO.java,31,import javax.persistence.NoResultException;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentDesiredStateDAO.java,32,import javax.persistence.TypedQuery;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentDesiredStateDAO.java,33,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,551,: new MasterHostResolver(configHelper, cluster, version);
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/persistence/DataStoreStorage.java,21,import com.google.gson.Gson;
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/persistence/DataStoreStorage.java,26,import org.apache.commons.configuration.Configuration;
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/persistence/DataStoreStorage.java,31,import java.util.ArrayList;
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/persistence/DataStoreStorage.java,41,protected final Gson gson = new Gson();
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/persistence/DataStoreStorage.java,154,public static class SmokeTestEntity implements Indexed {
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/persistence/DataStoreStorage.java,155,private String id = null;
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/persistence/DataStoreStorage.java,156,private String data = null;
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/persistence/DataStoreStorage.java,158,public String getId() {
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/persistence/DataStoreStorage.java,159,return id;
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/persistence/DataStoreStorage.java,162,public void setId(String id) {
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/persistence/DataStoreStorage.java,163,this.id = id;
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/persistence/DataStoreStorage.java,166,public String getData() {
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/persistence/DataStoreStorage.java,167,return data;
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/persistence/DataStoreStorage.java,170,public void setData(String data) {
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/persistence/DataStoreStorage.java,171,this.data = data;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,164,import com.google.common.cache.Cache;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,165,import com.google.common.cache.CacheBuilder;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,166,import com.google.gson.Gson;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,167,import com.google.gson.reflect.TypeToken;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,168,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,169,import com.google.inject.Injector;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,170,import com.google.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,171,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,404,clusters.addCluster(request.getClusterName(), stackId);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,22,import java.io.File;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,23,import java.net.Authenticator;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,24,import java.net.BindException;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,25,import java.net.PasswordAuthentication;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,26,import java.util.EnumSet;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,27,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,29,import javax.crypto.BadPaddingException;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,30,import javax.servlet.DispatcherType;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,111,import org.eclipse.jetty.servlets.GzipFilter;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,126,import com.google.common.util.concurrent.ServiceManager;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,127,import com.google.gson.Gson;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,128,import com.google.inject.Guice;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,129,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,130,import com.google.inject.Injector;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,131,import com.google.inject.Scopes;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,132,import com.google.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,133,import com.google.inject.name.Named;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,134,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,135,import com.sun.jersey.spi.container.servlet.ServletContainer;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,429,File.separator + configsMap.get(Configuration.CLIENT_API_SSL_KSTR_NAME_KEY);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,448,else  {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,485,.getInstance(ExecutionScheduleManager.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,491,StateRecoveryManager.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,529,if (! configs.getSrvrDisabledCiphers().isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,530,String [] masks = configs.getSrvrDisabledCiphers().split(DISABLED_ENTRIES_SPLITTER);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,533,if (! configs.getSrvrDisabledProtocols().isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,534,String [] masks = configs.getSrvrDisabledProtocols().split(DISABLED_ENTRIES_SPLITTER);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,566,gzipFilter.setInitParameter("methods","GET,POST,PUT,DELETE");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,656,injector.getInstance(TopologyRequestFactoryImpl.class));
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,325,AmbariManagementControllerImpl.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BaseClusterRequest.java,21,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BaseClusterRequest.java,22,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BaseClusterRequest.java,23,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BaseClusterRequest.java,24,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,21,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,22,import java.util.Arrays;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,23,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,24,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,25,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,26,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,27,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,28,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,29,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,56,import com.google.gson.Gson;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,280,populateConfigurationList(entity.getConfigurations()), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,402,blueprint = blueprintFactory.createBlueprint(properties);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterResourceProvider.java,28,import java.util.Arrays;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterResourceProvider.java,29,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterResourceProvider.java,30,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterResourceProvider.java,31,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterResourceProvider.java,32,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterResourceProvider.java,33,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterResourceProvider.java,34,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterResourceProvider.java,35,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterResourceProvider.java,48,import org.apache.ambari.server.topology.*;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterResourceProvider.java,59,public static final String CLUSTER_ID_PROPERTY_ID      = PropertyHelper.getPropertyId("Clusters", "cluster_id");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterResourceProvider.java,60,public static final String CLUSTER_NAME_PROPERTY_ID    = PropertyHelper.getPropertyId("Clusters", "cluster_name");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterResourceProvider.java,150,createResponse = processBlueprintCreate(properties);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterResourceProvider.java,334,public static void init(TopologyManager manager, TopologyRequestFactory requestFactory) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterResourceProvider.java,468,createClusterRequest = topologyRequestFactory.createProvisionClusterRequest(properties);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ExportBlueprintRequest.java,129,blueprint = new BlueprintImpl(bpName, hostGroups, stack, configuration);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ProvisionClusterRequest.java,95,public ProvisionClusterRequest(Map<String, Object> properties) throws InvalidTopologyTemplateException {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/BlueprintEntity.java,21,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/BlueprintEntity.java,22,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/BlueprintEntity.java,23,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/BlueprintEntity.java,24,import com.google.gson.Gson;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/BlueprintEntity.java,35,import javax.persistence.Transient;
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,25,import org.apache.ambari.server.AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,21,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,22,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,23,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,24,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,25,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,26,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,27,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,28,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,29,import java.util.concurrent.ConcurrentHashMap;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,30,import java.util.concurrent.locks.Lock;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,31,import java.util.concurrent.locks.ReentrantReadWriteLock;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,33,import javax.persistence.RollbackException;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,82,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,83,import com.google.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,84,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,21,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,22,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,23,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,24,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,25,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,26,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,27,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,28,import java.util.concurrent.atomic.AtomicLong;
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,142,createAmbariClusterResource(clusterName, stack.getName(), stack.getVersion());
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,146,public void createAmbariClusterResource(String clusterName, String stackName, String stackVersion) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,148,ClusterRequest clusterRequest = new ClusterRequest(null, clusterName, stackInfo, null);
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintFactory.java,25,import org.apache.ambari.server.StackAccessException;
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintFactory.java,94,public Blueprint createBlueprint(Map<String, Object> properties) throws NoSuchStackException {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintFactory.java,107,return new BlueprintImpl(name, hostGroups, stack, configuration);
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintImpl.java,22,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintImpl.java,23,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintImpl.java,24,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintImpl.java,25,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintImpl.java,26,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintImpl.java,66,public BlueprintImpl(String name, Collection<HostGroup> groups, Stack stack, Configuration configuration) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,21,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,22,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,23,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,24,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,25,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,26,import java.util.Iterator;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,27,import java.util.LinkedList;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,28,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,29,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,30,import java.util.concurrent.ExecutorService;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,31,import java.util.concurrent.Executors;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,44,import com.google.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,116,Stack stack = topology.getBlueprint().getStack();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,298,synchronized(availableHosts) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,300,while (! requestHostComplete && hostIterator.hasNext()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,304,if (reservedHosts.containsKey(hostname))  {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,333,if (! requestHostComplete) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,387,if (! logicalRequest.hasCompleted()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,408,if (! configChecked) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,419,addKerberosClientIfNecessary(topology);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,431,private void addKerberosClientIfNecessary(ClusterTopology topology) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,432,if (topology.isClusterKerberosEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,433,for (HostGroup group : topology.getBlueprint().getHostGroups().values()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,434,group.addComponent("KERBEROS_CLIENT");
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,470,while (! completed && ! interrupted) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,481,if (! interrupted) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyRequestFactoryImpl.java,32,return new ProvisionClusterRequest(properties);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,129,break;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,133,wrapper = new StageWrapper(
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,134,StageWrapper.Type.SERVER_SIDE_ACTION,
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,135,execution.title,
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,136,new TaskWrapper(null, null, Collections.<String>emptySet(), task));
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,137,break;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,157,private StageWrapper getManualStageWrapper(UpgradeContext ctx, ExecuteStage execution) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,164,if (null != id && id.equals("unhealthy-hosts")) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,182,if (null == hosts) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3253,Map<String, String> commandParamsStage = gson.fromJson(commandParamsForStage,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3254,new TypeToken<Map<String, String>>() {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3264,commandParamsForStage = gson.toJson(commandParamsStage);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3296,Map<String, String> commandParamsStage = gson.fromJson(commandParamsForStage,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,653,injector.getInstance(BlueprintDAO.class), injector.getInstance(Gson.class));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,134,public static void init(BlueprintFactory factory, BlueprintDAO dao, Gson gson) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,164,NoSuchResourceException, NoSuchParentResourceException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,231,blueprintDAO.removeByName(blueprintName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,232,return null;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,252,protected Resource toResource(BlueprintEntity entity, Set<String> requestedIds) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,293,Collection<? extends BlueprintConfiguration> configurations) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,300,Map<String, Object> properties = jsonSerializer.<Map<String, Object>>fromJson(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,301,config.getConfigData(), Map.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,302,configTypeDefinition.put(PROPERTIES_PROPERTY_ID, properties);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,436,for(Stage s : stages){
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,438,if (!affectedHosts.contains(host)) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,439,if(!isStageHasBackgroundCommandsOnly(s, host)){
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,442,retVal.add(s);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2377,kerberosHelper.ensureIdentities(cluster, serviceFilter, null, hostsToForceKerberosOperations, requestStages,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelper.java,153,Collection<String> identityFilter, Set<String> hostsToForceKerberosOperations,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelper.java,191,Collection<String> identityFilter, RequestStageContainer requestStageContainer,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelper.java,267,Collection<String> identityFilter,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,206,requestStageContainer = handle(cluster, kerberosDetails, null, null, null, requestStageContainer, new EnableKerberosHandler());
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,209,requestStageContainer = handle(cluster, kerberosDetails, null, null, null, requestStageContainer, new DisableKerberosHandler());
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,261,Collection<String> identityFilter, Set<String> hostsToForceKerberosOperations,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,264,return handle(cluster, getKerberosDetails(cluster, manageIdentities), serviceComponentFilter, identityFilter,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,270,Collection<String> identityFilter, RequestStageContainer requestStageContainer,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,273,return handle(cluster, getKerberosDetails(cluster, manageIdentities), serviceComponentFilter, identityFilter, null,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,274,requestStageContainer, new DeletePrincipalsAndKeytabsHandler());
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,451,Collection<String> identityFilter,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,468,List<ServiceComponentHost> serviceComponentHosts = cluster.getServiceComponentHosts(hostname);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,470,if ((serviceComponentHosts != null) && !serviceComponentHosts.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,475,for (ServiceComponentHost sch : serviceComponentHosts) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,476,String serviceName = sch.getServiceName();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,477,String componentName = sch.getServiceComponentName();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,480,if ((serviceComponentFilter == null) || serviceComponentFilter.containsKey(serviceName)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,481,Collection<String> componentFilter = (serviceComponentFilter == null) ? null : serviceComponentFilter.get(serviceName);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,482,KerberosServiceDescriptor serviceDescriptor = kerberosDescriptor.getService(serviceName);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,484,if (serviceDescriptor != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,487,if (((componentFilter == null) || componentFilter.contains(componentName)) && shouldProcessCommand.invoke(sch)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,488,serviceComponentHostsToProcess.add(sch);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1019,Collection<String> identityFilter,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1098,requestStageContainer, schToProcess, serviceComponentFilter, identityFilter,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1367,Collections.<String, Collection<String>>emptyMap(), null, hostsWithValidKerberosClient);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2019,throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2500,Map<String, ? extends Collection<String>> serviceComponentFilter, Collection<String> identityFilter, Set<String> hostsWithValidKerberosClient) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,94,identityFilter,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/HBaseTimelineMetricStore.java,182,Double rate = currVal / step;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,20,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,21,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,22,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,23,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,24,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,25,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,26,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,30,import org.apache.ambari.server.api.resources.RepositoryResourceDefinition;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,47,import com.google.common.collect.Sets;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,48,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,49,import com.google.inject.Provider;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,59,public static final String REPOSITORY_VERSION_ID_PROPERTY_ID                 = "CompatibleRepositoryVersions/id";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,60,public static final String REPOSITORY_VERSION_STACK_NAME_PROPERTY_ID         = "CompatibleRepositoryVersions/stack_name";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,61,public static final String REPOSITORY_VERSION_STACK_VERSION_PROPERTY_ID      = "CompatibleRepositoryVersions/stack_version";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,63,public static final String REPOSITORY_VERSION_DISPLAY_NAME_PROPERTY_ID       = "CompatibleRepositoryVersions/display_name";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,65,public static final String SUBRESOURCE_OPERATING_SYSTEMS_PROPERTY_ID         = new OperatingSystemResourceDefinition().getPluralName();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,66,public static final String SUBRESOURCE_REPOSITORIES_PROPERTY_ID              = new RepositoryResourceDefinition().getPluralName();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,71,REPOSITORY_VERSION_ID_PROPERTY_ID,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,72,REPOSITORY_VERSION_REPOSITORY_VERSION_PROPERTY_ID,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,73,REPOSITORY_VERSION_DISPLAY_NAME_PROPERTY_ID,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,74,REPOSITORY_VERSION_STACK_NAME_PROPERTY_ID,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,75,REPOSITORY_VERSION_STACK_VERSION_PROPERTY_ID,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,77,SUBRESOURCE_OPERATING_SYSTEMS_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,106,throws SystemException, UnsupportedPropertyException, NoSuchResourceException, NoSuchParentResourceException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,112,List<RepositoryVersionEntity> requestedEntities = new ArrayList<RepositoryVersionEntity>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,113,for (Map<String, Object> propertyMap: propertyMaps) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,117,if (stackId != null && propertyMaps.size() == 1 && propertyMap.get(REPOSITORY_VERSION_ID_PROPERTY_ID) == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,118,requestedEntities.addAll(s_repositoryVersionDAO.findByStack(stackId));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,120,Map<String, UpgradePack> packs = s_ambariMetaInfo.get().getUpgradePacks(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,123,for (UpgradePack up : packs.values()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,124,if (null != up.getTargetStack()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,125,StackId targetStackId = new StackId(up.getTargetStack());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,126,requestedEntities.addAll(s_repositoryVersionDAO.findByStack(targetStackId));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,131,final Long id;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,132,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,133,id = Long.parseLong(propertyMap.get(REPOSITORY_VERSION_ID_PROPERTY_ID).toString());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,135,throw new SystemException("Repository version should have numerical id");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,137,final RepositoryVersionEntity entity = s_repositoryVersionDAO.findByPK(id);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,138,if (entity == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,139,throw new NoSuchResourceException("There is no repository version with id " + id);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,141,requestedEntities.add(entity);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,146,for (RepositoryVersionEntity entity: requestedEntities) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,150,setResourceProperty(resource, REPOSITORY_VERSION_ID_PROPERTY_ID, entity.getId(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,151,setResourceProperty(resource, REPOSITORY_VERSION_STACK_NAME_PROPERTY_ID, entity.getStackName(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,152,setResourceProperty(resource, REPOSITORY_VERSION_STACK_VERSION_PROPERTY_ID, entity.getStackVersion(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,153,setResourceProperty(resource, REPOSITORY_VERSION_DISPLAY_NAME_PROPERTY_ID, entity.getDisplayName(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CompatibleRepositoryVersionResourceProvider.java,155,setResourceProperty(resource, REPOSITORY_VERSION_REPOSITORY_VERSION_PROPERTY_ID, entity.getVersion(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/notifications/dispatchers/EmailDispatcher.java,103,properties.put(entry.getKey(), entry.getValue());
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,467,readViewArchives(false, true, ALL_VIEWS_REG_EXP);
ambari-server/src/main/java/org/apache/ambari/server/state/PropertyInfo.java,235,ADDITIONAL_USER_PROPERTY
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,70,protected Map<String,List<String>> hiveAuthPropertyValueDependencies = new HashMap<String, List<String>>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,71,protected List<String> allHiveAuthPropertyValueDependecies = new ArrayList<String>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,101,hiveAuthPropertyValueDependencies.put("ldap", Arrays.asList("hive.server2.authentication.ldap.url",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,103,hiveAuthPropertyValueDependencies.put("kerberos", Arrays.asList("hive.server2.authentication.kerberos.keytab",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,105,hiveAuthPropertyValueDependencies.put("pam", Arrays.asList("hive.server2.authentication.pam.services"));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,106,hiveAuthPropertyValueDependencies.put("custom", Arrays.asList("hive.server2.custom.authentication.class"));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,108,for (List<String> dependencies : hiveAuthPropertyValueDependencies.values()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,109,allHiveAuthPropertyValueDependecies.addAll(dependencies);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,309,protected boolean checkAccordingToStackAdvisor(PropertyInfo property, Cluster cluster) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,310,if (allHiveAuthPropertyValueDependecies.contains(property.getName())) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,311,Config hiveSite = cluster.getDesiredConfigByType(CONFIGURATION_TYPE_HIVE_SITE);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,312,if (hiveSite != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,313,String hiveAuthValue = hiveSite.getProperties().get(PROPERTY_HIVE_SERVER2_AUTHENTICATION);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,314,if (hiveAuthValue != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,315,List<String> dependencies = hiveAuthPropertyValueDependencies.get(hiveAuthValue.toLowerCase());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,316,if (dependencies != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,317,return dependencies.contains(property.getName());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,321,return false;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,323,return true;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/Precision.java,18,package org.apache.hadoop.yarn.server.applicationhistoryservice.metrics.timeline;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,97,private static final int METRICS_PER_MINUTE = 4;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,118,RESULTSET_LIMIT = metricsConf.getInt(GLOBAL_RESULT_LIMIT, 5760);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,441,|| condition.getPrecision() == Precision.MINUTES) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/Condition.java,3,import org.apache.hadoop.yarn.server.applicationhistoryservice.metrics.timeline.Precision;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/DefaultCondition.java,20,import org.apache.hadoop.yarn.server.applicationhistoryservice.metrics.timeline.Precision;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,23,import org.apache.hadoop.yarn.server.applicationhistoryservice.metrics.timeline.Precision;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,261,Long timeRange = endTime - startTime;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,265,condition.setPrecision(Precision.DAYS);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,269,condition.setPrecision(Precision.HOURS);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,273,condition.setPrecision(Precision.MINUTES);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,277,condition.setPrecision(Precision.SECONDS);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,280,switch (condition.getPrecision()) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,281,case DAYS:
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,282,metricsTable = METRICS_AGGREGATE_DAILY_TABLE_NAME;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,283,query = GET_METRIC_AGGREGATE_ONLY_SQL;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,284,break;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,285,case HOURS:
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,286,metricsTable = METRICS_AGGREGATE_HOURLY_TABLE_NAME;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,287,query = GET_METRIC_AGGREGATE_ONLY_SQL;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,288,break;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,289,case MINUTES:
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,290,metricsTable = METRICS_AGGREGATE_MINUTE_TABLE_NAME;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,291,query = GET_METRIC_AGGREGATE_ONLY_SQL;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,292,break;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,293,default:
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,294,metricsTable = METRICS_RECORD_TABLE_NAME;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,295,query = GET_METRIC_SQL;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,392,long rowsPerMetric = TimeUnit.MILLISECONDS.toHours(range) + 1;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,397,if (precision != null && precision == Precision.HOURS) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,398,rowsPerMetric = TimeUnit.MILLISECONDS.toHours(range) + 1;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,410,Connection connection, Condition condition) throws SQLException {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,498,Connection connection, Condition condition) throws SQLException {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,507,Long timeRange = endTime - startTime;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,511,condition.setPrecision(Precision.DAYS);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,515,condition.setPrecision(Precision.HOURS);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,519,condition.setPrecision(Precision.SECONDS);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,522,switch (condition.getPrecision()) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,523,case DAYS:
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,524,metricsAggregateTable = METRICS_CLUSTER_AGGREGATE_DAILY_TABLE_NAME;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,525,queryStmt = GET_CLUSTER_AGGREGATE_TIME_SQL;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,526,break;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,527,case HOURS:
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,528,metricsAggregateTable = METRICS_CLUSTER_AGGREGATE_HOURLY_TABLE_NAME;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,529,queryStmt = GET_CLUSTER_AGGREGATE_TIME_SQL;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,530,break;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,531,default:
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,532,metricsAggregateTable = METRICS_CLUSTER_AGGREGATE_TABLE_NAME;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,533,queryStmt = GET_CLUSTER_AGGREGATE_SQL;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,538,getNaiveTimeRangeHint(condition.getStartTime(), NATIVE_TIME_RANGE_DELTA),
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,539,metricsAggregateTable);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,596,METRICS_CLUSTER_AGGREGATE_TABLE_NAME);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,618,stmt = connection.prepareStatement(query);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,619,int pos = 1;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,620,if (condition.getMetricNames() != null) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,621,for (; pos <= condition.getMetricNames().size(); pos++) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,622,stmt.setString(pos, condition.getMetricNames().get(pos - 1));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,625,if (condition.getAppId() != null) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,626,if (LOG.isDebugEnabled()) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,627,LOG.debug("Setting pos: " + pos + ", value: " + condition.getAppId());
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,629,stmt.setString(pos++, condition.getAppId());
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,631,if (condition.getInstanceId() != null) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,632,stmt.setString(pos, condition.getInstanceId());
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/SplitByMetricNamesCondition.java,20,import org.apache.hadoop.yarn.server.applicationhistoryservice.metrics.timeline.Precision;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/TimelineWebServices.java,33,import org.apache.hadoop.yarn.server.applicationhistoryservice.metrics.timeline.Precision;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,89,private static final Map<Service.Type, String> serviceConfigVersions = new ConcurrentHashMap<Service.Type, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,263,public String getCollectorHostName(String clusterName, MetricsService service) throws SystemException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,268,return clusterMetricCollectorMap.get(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,274,public String getCollectorPortName(String clusterName, MetricsService service) throws SystemException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,280,String configType = serviceConfigTypes.get(Service.Type.AMBARI_METRICS);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,281,String currentConfigVersion = getDesiredConfigVersion(clusterName, configType);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,282,String oldConfigVersion = serviceConfigVersions.get(Service.Type.AMBARI_METRICS);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,284,if (!currentConfigVersion.equals(oldConfigVersion)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,285,serviceConfigVersions.put(Service.Type.AMBARI_METRICS, currentConfigVersion);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,287,Map<String, String> configProperties = getDesiredConfigMap
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,288,(clusterName, currentConfigVersion, configType,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,290,new String[] { "timeline.metrics.service.webapp.address" }));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,292,if (!configProperties.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,293,clusterMetricServerPort = getPortString(configProperties.get("METRICS_COLLECTOR"));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,295,clusterMetricServerPort = COLLECTOR_DEFAULT_PORT;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,300,LOG.warn("Failed to retrieve collector port.", e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,305,return clusterMetricServerPort;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,311,final String collectorHostName = getCollectorHostName(clusterName, service);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,313,return isHostLive(clusterName, collectorHostName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,344,return isHostComponentLive(clusterName, collectorHostName, "AMBARI_METRICS",
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,345,Role.METRICS_COLLECTOR.name());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,422,String currVersion = getDesiredConfigVersion(clusterName, serviceConfigTypes.get(service));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,423,String oldVersion = serviceConfigVersions.get(service);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,432,serviceConfigVersions.put(service, currVersion);
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricHostProvider.java,56,public String getCollectorPortName(String clusterName, MetricsService service) throws SystemException;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,542,collectorPort = hostProvider.getCollectorPortName(clusterName, TIMELINE_METRICS);
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSReportPropertyProvider.java,169,String port = hostProvider.getCollectorPortName(clusterName, TIMELINE_METRICS);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,189,upgradeCatalog2.getTargetVersion(), 3);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,140,upgradeCatalog.getTargetVersion(), 3) < 0) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,143,targetVersion, 3) <= 0) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,353,String requestId = (String) propertyMap.get(UPGRADE_REQUEST_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,354,if (null == requestId) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,358,String requestStatus = (String) propertyMap.get(UPGRADE_REQUEST_STATUS);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,359,if (null == requestStatus) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,360,throw new IllegalArgumentException(String.format("%s is required", UPGRADE_REQUEST_STATUS));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,363,HostRoleStatus status = HostRoleStatus.valueOf(requestStatus);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,364,if (status != HostRoleStatus.ABORTED && status != HostRoleStatus.PENDING) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,365,throw new IllegalArgumentException(String.format("Cannot set status %s, only %s is allowed",
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,366,status, EnumSet.of(HostRoleStatus.ABORTED, HostRoleStatus.PENDING)));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,369,String reason = (String) propertyMap.get(UPGRADE_ABORT_REASON);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,370,if (null == reason) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,371,reason = String.format(DEFAULT_REASON_TEMPLATE, requestId);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,374,ActionManager actionManager = getManagementController().getActionManager();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,375,List<org.apache.ambari.server.actionmanager.Request> requests = actionManager.getRequests(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,376,Collections.singletonList(Long.valueOf(requestId)));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,378,org.apache.ambari.server.actionmanager.Request internalRequest = requests.get(0);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,380,HostRoleStatus internalStatus = CalculatedStatus.statusFromStages(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,381,internalRequest.getStages()).getStatus();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,383,if (HostRoleStatus.PENDING == status && internalStatus != HostRoleStatus.ABORTED) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,384,throw new IllegalArgumentException(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,385,String.format("Can only set status to %s when the upgrade is %s (currently %s)", status,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,386,HostRoleStatus.ABORTED, internalStatus));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,389,if (HostRoleStatus.ABORTED == status) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,390,if (!internalStatus.isCompletedState()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,391,actionManager.cancelRequest(internalRequest.getRequestId(), reason);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,394,List<Long> taskIds = new ArrayList<Long>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,396,for (HostRoleCommand hrc : internalRequest.getCommands()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,398,|| HostRoleStatus.TIMEDOUT == hrc.getStatus()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,399,taskIds.add(hrc.getTaskId());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,403,actionManager.resubmitTasks(taskIds);
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/TimelineMetric.java,44,private Map<Long, Double> metricValues = new TreeMap<Long, Double>();
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/TimelineMetric.java,110,public Map<Long, Double> getMetricValues() {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/TimelineMetric.java,114,public void setMetricValues(Map<Long, Double> metricValues) {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/cache/TimelineMetricsCache.java,164,Map<Long, Double>   newMetricValues = new TreeMap<Long, Double>();
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/HBaseTimelineMetricStore.java,267,Map<Long, Double> metricRecords = new TreeMap<Long, Double>();
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,178,throws IOException {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,179,Map<Long, Double> values = readMetricFromJSON(json);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,180,Long lastTimeStamp = Collections.max(values.keySet());
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,182,HashMap<Long, Double> valueMap = new HashMap<Long, Double>(1);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,188,public static Map<Long, Double>  readMetricFromJSON(String json) throws IOException {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,189,return (Map<Long, Double>) mapper.readValue(json, metricValuesTypeRef);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricReadHelper.java,43,Map<Long, Double> sortedByTimeMetrics = new TreeMap<Long, Double>(
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,744,if (tableHasForeignKey(convertObjectName(tableName), constraintName)) {
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,745,String query = dbmsHelper.getDropFKConstraintStatement(tableName, constraintName);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,722,Config config = createConfig(cluster, request.getType(), request.getProperties(),
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1187,includeProps ? config.getPropertiesAttributes() : new HashMap<String, Map<String,String>>());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1200,includeProps ? config.getPropertiesAttributes() : new HashMap<String, Map<String,String>>());
ambari-server/src/main/java/org/apache/ambari/server/controller/ConfigurationResponse.java,72,config.getPropertiesAttributes());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2176,config.getProperties(), config.getPropertiesAttributes()));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,445,packages.add(aPackage);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,383,packages.add(aPackage);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,265,HostEntity hostEntity = hostDAO.findById(hostRoleCommandEntity.getHostId());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,266,if (hostEntity == null) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,267,String msg = String.format("Host %s doesn't exist in database", hostRoleCommandEntity.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,268,LOG.error(msg);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,269,throw new AmbariException(msg);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,271,hostRoleCommandEntity.setHostEntity(hostEntity);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,274,assert hostRoleCommandEntity.getTaskId() != null;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,277,try {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,279,Host hostObject = clusters.getHost(hostRoleCommandEntity.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,280,String prefix = hostObject.getPrefix();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,281,if (null != prefix && !prefix.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,282,if (!prefix.endsWith("/")) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,283,prefix = prefix + "/";
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,285,hostRoleCommand.setOutputLog(prefix + "output-" + hostRoleCommandEntity.getTaskId() + ".txt");
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,286,hostRoleCommand.setErrorLog(prefix + "errors-" + hostRoleCommandEntity.getTaskId() + ".txt");
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,287,hostRoleCommandEntity.setOutputLog(hostRoleCommand.getOutputLog());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,288,hostRoleCommandEntity.setErrorLog(hostRoleCommand.getErrorLog());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,291,LOG.warn("Exception in getting prefix for host and setting output and error log files.");
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,302,hostDAO.merge(hostEntity);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,92,private final Clusters fsmObject;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,129,ActionDBAccessor db, ActionQueue actionQueue, Clusters fsmObject,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,138,this.fsmObject = fsmObject;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,341,Cluster cluster = fsmObject.getCluster(stage.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,527,cluster = fsmObject.getCluster(s.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,532,Host hostObj = fsmObject.getHost(host);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,686,Cluster cluster = fsmObject.getCluster(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,760,if (host.getState().equals(HostState.HEARTBEAT_LOST)) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,776,private boolean hasCommandInProgress(Stage stage, String host) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,777,List<ExecutionCommandWrapper> commandWrappers = stage.getExecutionCommands(host);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,781,HostRoleStatus status = stage.getHostRoleStatus(host, roleStr);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,948,fsmObject.getCluster(clusterName).getClusterId() : null;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,140,hostId = hostRoleCommandEntity.getHostId();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,90,private HostRoleCommandDAO hostRoleCommandDAO;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,93,private ActionDBAccessor dbAccessor;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,122,this.hostRoleCommandDAO = hostRoleCommandDAO;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,123,this.dbAccessor = dbAccessor;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,149,String hostname = command.getHostName();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,379,public synchronized void addServerActionCommand(String actionName, Role role, RoleCommand command,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,460,HostRoleCommand hostRoleCommand = getHostRoleCommand(hostName, role.toString());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,537,public long getLastAttemptTime(String host, String role) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,538,return hostRoleCommands.get(host).get(role).getLastAttemptTime();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,541,public short getAttemptCount(String host, String role) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,542,return hostRoleCommands.get(host).get(role).getAttemptCount();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,546,hostRoleCommands.get(hostname).get(role).incrementAttemptCount();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,549,public void setLastAttemptTime(String host, String role, long t) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,550,hostRoleCommands.get(host).get(role).setLastAttemptTime(t);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,555,HostRoleCommand hrc = hostRoleCommands.get(hostname).get(role);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,565,return commandsToSend.get(hostname);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,569,return hostRoleCommands.get(hostname).get(role).getStartTime();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,573,hostRoleCommands.get(hostname).get(role).setStartTime(startTime);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,577,return hostRoleCommands.get(hostname).get(role).getStatus();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,580,public void setHostRoleStatus(String host, String role,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,582,hostRoleCommands.get(host).get(role).setStatus(status);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,586,return hostRoleCommands.get(hostname).get(roleStr).getEvent();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,591,hostRoleCommands.get(hostname).get(role).setExitCode(exitCode);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,595,return hostRoleCommands.get(hostname).get(role).getExitCode();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,599,hostRoleCommands.get(hostname).get(role).setStderr(stdErr);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,603,hostRoleCommands.get(hostname).get(role).setStdout(stdOut);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,677,return hostRoleCommands.get(hostname).get(role);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,26,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,71,import org.apache.ambari.server.orm.entities.HostEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1033,String hostName = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1034,Collection<Long> hostIds = cluster.getAllHostsDesiredConfigs().keySet();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1035,if (!hostIds.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1036,Long hostId = hostIds.iterator().next();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1037,HostEntity hostEntity = s_hostDAO.findById(hostId);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1038,if (hostEntity != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1039,hostName = hostEntity.getHostName();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1043,if (StringUtils.isBlank(hostName)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1044,throw new AmbariException(
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,35,import org.apache.ambari.server.actionmanager.HostRoleCommand;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,242,TypedQuery<HostRoleCommandEntity> query = entityManagerProvider.get().createQuery("SELECT command " +
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,248,return daoUtils.selectList(query, hostName, requestId, stageId, role);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,307,db.updateHostRoleState(executionCommand.getHostname(), hostRoleCommand.getRequestId(),
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/client/Connection.java,81,transport = getTransport();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/client/ConnectionFactory.java,75,return context.getProperties().get("hive.port");
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,968,LOG.debug("Recovery configuration set to " + response.getRecoveryConfig().toString());
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1339,REQUEST_CONNECT_TIMEOUT_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/controller/ShortTaskStatus.java,42,this.hostName = hostName;
ambari-server/src/main/java/org/apache/ambari/server/controller/ShortTaskStatus.java,55,this.hostName = hostRoleCommand.getHostName();
ambari-server/src/main/java/org/apache/ambari/server/controller/ShortTaskStatus.java,100,this.hostName = hostName;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2363,return (desiredSecurityState == SecurityState.SECURED_KERBEROS) &&
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2364,(sch.getSecurityState() != SecurityState.SECURED_KERBEROS) &&
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2365,(sch.getSecurityState() != SecurityState.SECURING);
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,21,import static org.eclipse.persistence.config.PersistenceUnitProperties.CREATE_JDBC_DDL_FILE;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,22,import static org.eclipse.persistence.config.PersistenceUnitProperties.CREATE_ONLY;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,23,import static org.eclipse.persistence.config.PersistenceUnitProperties.CREATE_OR_EXTEND;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,24,import static org.eclipse.persistence.config.PersistenceUnitProperties.DDL_BOTH_GENERATION;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,25,import static org.eclipse.persistence.config.PersistenceUnitProperties.DDL_GENERATION;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,26,import static org.eclipse.persistence.config.PersistenceUnitProperties.DDL_GENERATION_MODE;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,27,import static org.eclipse.persistence.config.PersistenceUnitProperties.DROP_AND_CREATE;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,28,import static org.eclipse.persistence.config.PersistenceUnitProperties.DROP_JDBC_DDL_FILE;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,29,import static org.eclipse.persistence.config.PersistenceUnitProperties.JDBC_DRIVER;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,30,import static org.eclipse.persistence.config.PersistenceUnitProperties.JDBC_PASSWORD;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,31,import static org.eclipse.persistence.config.PersistenceUnitProperties.JDBC_URL;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,32,import static org.eclipse.persistence.config.PersistenceUnitProperties.JDBC_USER;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,33,import static org.eclipse.persistence.config.PersistenceUnitProperties.NON_JTA_DATASOURCE;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,34,import static org.eclipse.persistence.config.PersistenceUnitProperties.THROW_EXCEPTIONS;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,36,import java.beans.PropertyVetoException;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,37,import java.lang.annotation.Annotation;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,38,import java.security.SecureRandom;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,39,import java.text.MessageFormat;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,40,import java.util.Arrays;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,41,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,42,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,43,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,44,import java.util.Map.Entry;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,45,import java.util.Properties;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,46,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,132,import com.google.common.util.concurrent.AbstractScheduledService;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,133,import com.google.common.util.concurrent.ServiceManager;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,134,import com.google.gson.Gson;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,135,import com.google.gson.GsonBuilder;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,136,import com.google.inject.AbstractModule;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,137,import com.google.inject.Scopes;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,138,import com.google.inject.assistedinject.FactoryModuleBuilder;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,139,import com.google.inject.name.Names;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,140,import com.google.inject.persist.PersistModule;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,141,import com.google.inject.persist.jpa.AmbariJpaPersistModule;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,142,import com.mchange.v2.c3p0.ComboPooledDataSource;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1302,if (cluster.getDesiredConfigByType("hdfs-site") != null && !cluster.getHosts("HDFS","NAMENODE").isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1311,String nn1RpcAddress = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1312,Config hdfsSiteConfig = cluster.getDesiredConfigByType("hdfs-site");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1313,Map<String, String> properties = hdfsSiteConfig.getProperties();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1314,String nameServices = properties.get("dfs.nameservices");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1315,if (!StringUtils.isEmpty(nameServices)) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1316,String namenodes = properties.get(String.format("dfs.ha.namenodes.%s",nameServices));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1317,if (!StringUtils.isEmpty(namenodes) && namenodes.split(",").length > 1) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1318,nn1RpcAddress = properties.get(String.format("dfs.namenode.rpc-address.%s.%s", nameServices,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1319,namenodes.split(",")[0]));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1322,if (!StringUtils.isEmpty(nn1RpcAddress)) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1323,if (!nn1RpcAddress.startsWith("http")) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1324,nn1RpcAddress = "http://" + nn1RpcAddress;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1326,nameNodeRpc= new URI(nn1RpcAddress);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1329,nameNodeRpc= new URI("http://localhost:8020");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1334,Map<String, String> hdfsProp = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1335,hdfsProp.put("dfs.namenode.rpc-address", hostName + ":" + nameNodeRpc.getPort());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1336,updateConfigurationPropertiesForCluster(cluster, "hdfs-site",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1337,hdfsProp, true, false);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,458,StackId stack = cluster.getCurrentStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,460,String repoVersion = version;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,462,if (direction.isDowngrade() && null != versionForUpgradePack) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,463,repoVersion = versionForUpgradePack;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,468,if (null == versionEntity) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,469,throw new AmbariException(String.format("Repository version %s was not found", repoVersion));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,472,Map<String, UpgradePack> packs = s_metaProvider.get().getUpgradePacks(stack.getStackName(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,479,String repoStackId = versionEntity.getStackId().getStackId();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,480,for (UpgradePack upgradePack : packs.values()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,490,throw new AmbariException(
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,116,return executeDowngrade(clusterName, originalStackId, targetStackId,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,119,return executeUpgrade(clusterName, version);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,159,boolean atLeastOneHostInInstalledState = false;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,164,boolean isStateCorrect = false;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,166,if (RepositoryVersionState.UPGRADED == hostVersion.getState()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,167,isStateCorrect = true;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,169,if (hostVersion.getState() == RepositoryVersionState.INSTALLED) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,174,ServiceComponentHostSummary hostSummary = new ServiceComponentHostSummary(
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,175,ambariMetaInfo, host, clusterDesiredStackId);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,177,if (hostSummary.haveAllComponentsFinishedAdvertisingVersion()){
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,178,isStateCorrect = true;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,179,atLeastOneHostInInstalledState = true;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,184,if (isStateCorrect) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,188,hostsWithoutCorrectVersionState.add(hostVersion.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,205,if (atLeastOneHostInInstalledState) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/FinalizeUpgradeAction.java,260,private CommandReport executeDowngrade(String clusterName,
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,90,if (!hasPort(defaultFS)) {
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,107,public static final String METADETA_DIR_PATH = "metadata.path";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,873,return properties.getProperty(METADETA_DIR_PATH);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackDefinedPropertyProvider.java,83,private MetricsService metricsService = MetricsService.GANGLIA;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackDefinedPropertyProvider.java,132,public StackDefinedPropertyProvider(Resource.Type type,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackDefinedPropertyProvider.java,133,MetricsService metricsService,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackDefinedPropertyProvider.java,134,JMXHostProvider jmxHostProvider,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackDefinedPropertyProvider.java,135,MetricHostProvider metricHostProvider,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackDefinedPropertyProvider.java,136,MetricsServiceProvider serviceProvider,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackDefinedPropertyProvider.java,137,StreamProvider streamProvider,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackDefinedPropertyProvider.java,138,String clusterPropertyId,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackDefinedPropertyProvider.java,139,String hostPropertyId,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackDefinedPropertyProvider.java,140,String componentPropertyId,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackDefinedPropertyProvider.java,141,String jmxStatePropertyId,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackDefinedPropertyProvider.java,142,PropertyProvider defaultJmxPropertyProvider,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackDefinedPropertyProvider.java,143,PropertyProvider defaultGangliaPropertyProvider) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackDefinedPropertyProvider.java,145,this(type, jmxHostProvider, metricHostProvider, serviceProvider,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackDefinedPropertyProvider.java,146,streamProvider, clusterPropertyId, hostPropertyId, componentPropertyId,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackDefinedPropertyProvider.java,147,jmxStatePropertyId, defaultJmxPropertyProvider, defaultGangliaPropertyProvider);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackDefinedPropertyProvider.java,149,this.metricsService = metricsService;
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,64,DEFAULT_JMX_PORTS.put("JOBTRACKER",         "50030");
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,65,DEFAULT_JMX_PORTS.put("TASKTRACKER",        "50060");
ambari-server/src/main/java/org/apache/ambari/server/stack/StackManager.java,276,throw new AmbariException("" + Configuration.METADETA_DIR_PATH
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/cache/TimelineMetricsCache.java,81,class TimelineMetricHolder extends LinkedHashMap<String, TimelineMetricWrapper> {
ambari-metrics/ambari-metrics-flume-sink/src/main/java/org/apache/hadoop/metrics2/sink/flume/FlumeTimelineMetricsSink.java,49,private TimelineMetricsCache metricsCache;
ambari-metrics/ambari-metrics-flume-sink/src/main/java/org/apache/hadoop/metrics2/sink/flume/FlumeTimelineMetricsSink.java,86,int maxRowCacheSize = Integer.parseInt(configuration.getProperty(MAX_METRIC_ROW_CACHE_SIZE,
ambari-metrics/ambari-metrics-flume-sink/src/main/java/org/apache/hadoop/metrics2/sink/flume/FlumeTimelineMetricsSink.java,88,int metricsSendInterval = Integer.parseInt(configuration.getProperty(METRICS_SEND_INTERVAL,
ambari-metrics/ambari-metrics-flume-sink/src/main/java/org/apache/hadoop/metrics2/sink/flume/FlumeTimelineMetricsSink.java,90,metricsCache = new TimelineMetricsCache(maxRowCacheSize, metricsSendInterval);
ambari-metrics/ambari-metrics-flume-sink/src/main/java/org/apache/hadoop/metrics2/sink/flume/FlumeTimelineMetricsSink.java,114,public void setMetricsCache(TimelineMetricsCache metricsCache) {
ambari-metrics/ambari-metrics-flume-sink/src/main/java/org/apache/hadoop/metrics2/sink/flume/FlumeTimelineMetricsSink.java,115,this.metricsCache = metricsCache;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractPropertyProvider.java,214,val = invokeArgumentMethod(val, methodName, argList, paramTypes);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractPropertyProvider.java,222,return propertyId.replace(argName, val);
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,421,for (String param : parameterList) {
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,422,propertyId = substituteArgument(propertyId, "$" + i, param);
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,423,++i;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,427,if (value != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,21,import java.net.URI;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,22,import java.net.URISyntaxException;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,23,import java.sql.ResultSet;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,24,import java.sql.SQLException;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,25,import java.sql.Statement;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,26,import java.text.MessageFormat;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,27,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,28,import java.util.Arrays;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,29,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,30,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,31,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,32,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,33,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,34,import java.util.UUID;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,35,import java.util.regex.Matcher;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,37,import javax.persistence.EntityManager;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,38,import javax.persistence.Query;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,39,import javax.persistence.criteria.CriteriaBuilder;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,40,import javax.persistence.criteria.CriteriaDelete;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,41,import javax.persistence.criteria.Root;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,61,import org.apache.ambari.server.state.Host;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,71,import com.google.gson.Gson;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,72,import com.google.gson.JsonElement;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,73,import com.google.gson.JsonObject;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,74,import com.google.gson.JsonParser;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,75,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,76,import com.google.inject.Injector;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,77,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1348,private int getHbaseRamRecomendations(int totalMem) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1349,if (totalMem <= 4) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1350,return 1;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1352,if (4 < totalMem && totalMem <= 8) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1353,return 1;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1355,if (8 < totalMem && totalMem <= 16) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1356,return 2;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1358,if (16 < totalMem && totalMem <= 24) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1359,return 4;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1361,if (24 < totalMem && totalMem <= 48) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1362,return 8;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1364,if (48 < totalMem && totalMem <= 64) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1365,return 8;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1367,if (64 < totalMem && totalMem <= 72) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1368,return 8;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1370,if (72 < totalMem && totalMem <= 96) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1371,return 16;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1373,if (96 < totalMem && totalMem <= 128) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1374,return 24;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1376,if (128 < totalMem && totalMem <= 256) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1377,return 32;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1379,if (256 < totalMem) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1380,return 64;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1382,return -1;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1465,int threshold = 23;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1466,int totalMem = 0;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1468,for (Host host : cluster.getHosts()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1469,if(host.getHostName().equalsIgnoreCase(hostName)) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1470,totalMem = (int)(host.getTotalMemBytes() / (1024 * 1024));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1471,break;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1475,if (totalMem == 0) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1476,LOG.error("UpgradeCatalog210 could not retrieve total memory size from the hosts.");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1478,else {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1479,if (getHbaseRamRecomendations(totalMem) > threshold) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1480,final int mb = 1024;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1481,final int block_cache_heap = 8192;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1482,final int regionserver_heap_size = 20480;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1483,final int reserved_offheap_memory = 2048;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1484,final int regionserver_total_ram = getHbaseRamRecomendations(totalMem) * mb;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1485,final int regionserver_max_direct_memory_size = regionserver_total_ram - regionserver_heap_size;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1486,final int bucketcache_offheap_memory = regionserver_max_direct_memory_size - reserved_offheap_memory;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1489,hbaseSiteProps.put("hbase.bucketcache.ioengine", "offheap");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1490,hbaseEnvProps.put("hbase_max_direct_memory_size", String.valueOf(regionserver_max_direct_memory_size));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1492,hbaseSiteRemoveProps.add("hbase.bucketcache.ioengine");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1493,hbaseSiteRemoveProps.add("hbase.bucketcache.size");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1494,hbaseSiteRemoveProps.add("hbase.bucketcache.percentage.in.combinedcache");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1495,hbaseEnvRemoveProps.add("hbase_max_direct_memory_size");
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,57,import org.apache.ambari.server.serveraction.kerberos.KerberosCredential;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,191,private static ClusterController clusterController = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,414,if(m.matches()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,419,if(configType == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,762,if(clusterHostInfo != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,929,operationHandler.open(kerberosCredentials, kerberosDetails.getDefaultRealm(), kerberosDetails.getKerberosEnvProperties());
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1136,private int filteredIdentitiesCount(List<KerberosIdentityDescriptor> identities, Collection<String> identityFilter) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1138,if ((identities == null) || identities.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1139,return 0;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1141,return identities.size();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1143,int count = 0;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1145,for (KerberosIdentityDescriptor identity : identities) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1146,if (identityFilter.contains(identity.getName())) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1147,count++;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1151,return count;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1688,private String getEncryptedAdministratorCredentials(Cluster cluster) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1689,String encryptedAdministratorCredentials = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1691,Map<String, Object> sessionAttributes = cluster.getSessionAttributes();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1692,if (sessionAttributes != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1693,KerberosCredential credential = KerberosCredential.fromMap(sessionAttributes, "kerberos_admin/");
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1694,if (credential != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1695,byte[] key = Integer.toHexString(cluster.hashCode()).getBytes();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1696,encryptedAdministratorCredentials = credential.encrypt(key);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1700,return encryptedAdministratorCredentials;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,129,public void open(KerberosCredential administratorCredentials, String realm,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,136,if (administratorCredentials == null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,137,throw new KerberosAdminAuthenticationException("administrator credentials not provided");
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,162,setAdministratorCredentials(administratorCredentials);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,425,KerberosCredential administratorCredentials = getAdministratorCredentials();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,430,properties.put(Context.SECURITY_PRINCIPAL, administratorCredentials.getPrincipal());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,431,properties.put(Context.SECURITY_CREDENTIALS, administratorCredentials.getPassword());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,449,if ((error != null) && !error.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,514,if ((createTemplate == null) || createTemplate.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,18,package org.apache.ambari.server.serveraction.kerberos;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,20,import com.google.gson.Gson;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,21,import com.google.gson.JsonSyntaxException;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,22,import org.apache.ambari.server.AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,23,import org.apache.commons.codec.binary.Base64;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,25,import javax.crypto.BadPaddingException;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,26,import javax.crypto.Cipher;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,27,import javax.crypto.IllegalBlockSizeException;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,28,import javax.crypto.NoSuchPaddingException;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,29,import javax.crypto.spec.SecretKeySpec;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,30,import java.security.InvalidKeyException;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,31,import java.security.NoSuchAlgorithmException;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,32,import java.util.Arrays;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,33,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,40,public class KerberosCredential {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,45,public static final String KEY_NAME_PRINCIPAL = "principal";
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,49,public static final String KEY_NAME_PASSWORD = "password";
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,54,public static final String KEY_NAME_KEYTAB = "keytab";
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,59,private String principal = null;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,69,private String keytab = null;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,91,public static KerberosCredential fromMap(Map<String, Object> map, String prefix) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,92,KerberosCredential credential = null;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,94,if (map != null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,95,Object attribute;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,96,String principal;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,98,String keytab;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,100,if (prefix == null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,101,prefix = "";
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,104,attribute = map.get(prefix + KEY_NAME_PRINCIPAL);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,105,principal = (attribute == null) ? null : attribute.toString();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,107,attribute = map.get(prefix + KEY_NAME_PASSWORD);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,110,attribute = map.get(prefix + KEY_NAME_KEYTAB);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,111,keytab = (attribute == null) ? null : attribute.toString();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,113,if (((principal != null) && !principal.isEmpty()) ||
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,115,((keytab != null) && !keytab.isEmpty())) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,116,credential = new KerberosCredential(principal, password, keytab);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,120,return credential;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,135,public static KerberosCredential decrypt(String cipherText, byte[] key) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,136,if (cipherText == null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,137,return null;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,139,try {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,140,SecretKeySpec secretKey = new SecretKeySpec(Arrays.copyOf(key, 16), "AES");
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,141,Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,142,cipher.init(Cipher.DECRYPT_MODE, secretKey);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,143,byte[] plaintext = cipher.doFinal(Base64.decodeBase64(cipherText));
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,146,throw new AmbariException("Failed to decrypt cipher text due to invalid encryption algorithm", e);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,148,throw new AmbariException("Failed to decrypt cipher text due to invalid padding scheme algorithm", e);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,150,throw new AmbariException("Failed to decrypt cipher text due to invalid block size", e);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,152,throw new AmbariException("Failed to decrypt cipher text due to invalid padding", e);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,154,throw new AmbariException("Failed to decrypt cipher text due to invalid key", e);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,156,throw new AmbariException("Failed to decrypt cipher, cannot parse data into a KerberosCredential", e);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,172,public static String encrypt(KerberosCredential kerberosCredential, byte[] key) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,173,if (kerberosCredential == null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,174,return null;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,176,try {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,177,SecretKeySpec secretKey = new SecretKeySpec(Arrays.copyOf(key, 16), "AES");
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,178,Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,179,cipher.init(Cipher.ENCRYPT_MODE, secretKey);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,180,String plaintext = new Gson().toJson(kerberosCredential);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,181,return Base64.encodeBase64String(cipher.doFinal(plaintext.getBytes()));
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,183,throw new AmbariException("Failed to encrypt plaintext due to invalid encryption algorithm", e);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,185,throw new AmbariException("Failed to encrypt plaintext due to invalid padding scheme algorithm", e);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,189,throw new AmbariException("Failed to encrypt plaintext due to unexpected reasons", e);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,191,throw new AmbariException("Failed to encrypt plaintext due to invalid key", e);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,199,public KerberosCredential() {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,200,principal = null;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,201,password = null;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,202,keytab = null;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,213,this.principal = principal;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,214,this.password = password;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,215,this.keytab = keytab;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,221,public String getPrincipal() {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,222,return principal;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,228,public void setPrincipal(String principal) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,229,this.principal = principal;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,236,return password;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,243,this.password = password;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,249,public String getKeytab() {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,250,return keytab;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,256,public void setKeytab(String keytab) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,257,this.keytab = keytab;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,270,public String encrypt(byte[] key) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,271,return encrypt(this, key);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosOperationHandler.java,187,private KerberosCredential administratorCredentials = null;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosOperationHandler.java,287,KerberosCredential credentials = getAdministratorCredentials();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosOperationHandler.java,288,if (credentials == null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosOperationHandler.java,289,throw new KerberosOperationException("Missing KDC administrator credentials");
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosOperationHandler.java,291,return principalExists(credentials.getPrincipal());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosOperationHandler.java,307,if ((principal == null) || principal.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosOperationHandler.java,477,public KerberosCredential getAdministratorCredentials() {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosOperationHandler.java,478,return administratorCredentials;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosOperationHandler.java,498,if (administratorCredentials == null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosOperationHandler.java,516,throw new KerberosAdminAuthenticationException("Must specify either a password or a keytab but both are null or empty");
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosOperationHandler.java,520,this.administratorCredentials = administratorCredentials;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosOperationHandler.java,750,if ((name != null) && !name.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosOperationHandler.java,768,if ((names != null) && !names.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosOperationHandler.java,786,if ((string == null) || string.isEmpty() || (charactersToEscape == null) || charactersToEscape.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,25,import java.io.File;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,81,public void open(KerberosCredential administratorCredentials, String realm,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,85,setAdministratorCredentials(administratorCredentials);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,168,if ((principal == null) || principal.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,208,if ((principal == null) || principal.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,238,if ((principal == null) || principal.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,265,if ((principal == null) || principal.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,315,ShellCommandUtil.Result result = null;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,317,if ((query == null) || query.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,320,KerberosCredential administratorCredentials = getAdministratorCredentials();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,324,File tempKeytabFile = null;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,326,try {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,328,? null
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,329,: administratorCredentials.getPrincipal();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,331,if ((adminPrincipal == null) || adminPrincipal.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,333,if((executableKadminLocal == null) || executableKadminLocal.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,334,throw new KerberosOperationException("No path for kadmin.local is available - this KerberosOperationHandler may not have been opened.");
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,337,command.add(executableKadminLocal);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,339,if((executableKadmin == null) || executableKadmin.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,340,throw new KerberosOperationException("No path for kadmin is available - this KerberosOperationHandler may not have been opened.");
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,343,String adminKeyTab = administratorCredentials.getKeytab();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,346,command.add(executableKadmin);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,349,if (getAdminServerHost() != null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,350,command.add("-s");
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,351,command.add(getAdminServerHost());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,355,command.add("-p");
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,356,command.add(adminPrincipal);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,358,if ((adminKeyTab != null) && !adminKeyTab.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,359,tempKeytabFile = createKeytabFile(adminKeyTab);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,361,if (tempKeytabFile != null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,363,command.add("-k");
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,364,command.add("-t");
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,365,command.add(tempKeytabFile.getAbsolutePath());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,369,command.add("-w");
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,374,if ((defaultRealm != null) && !defaultRealm.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,376,command.add("-r");
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,377,command.add(defaultRealm);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,381,command.add("-q");
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,382,command.add(query);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,384,result = executeCommand(command.toArray(new String[command.size()]));
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,386,if (!result.isSuccessful()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,416,String message = String.format("Failed to execute kadmin:\n\tCommand: %s\n\tExitCode: %s\n\tSTDOUT: %s\n\tSTDERR: %s",
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,418,LOG.warn(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,421,String stdErr = result.getStderr();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,423,if (stdErr.contains("Client not found in Kerberos database")) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,424,throw new KerberosAdminAuthenticationException(stdErr);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,426,throw new KerberosAdminAuthenticationException(stdErr);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,429,else if (stdErr.contains("Cannot contact any KDC")) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,430,throw new KerberosKDCConnectionException(stdErr);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,432,throw new KerberosKDCConnectionException(stdErr);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,435,else if (stdErr.contains("Missing parameters in krb5.conf required for kadmin client")) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,436,throw new KerberosRealmException(stdErr);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,438,throw new KerberosRealmException(stdErr);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,440,throw new KerberosOperationException("Unexpected error condition executing the kadmin command");
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,445,if (tempKeytabFile != null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,446,if (!tempKeytabFile.delete()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,447,tempKeytabFile.deleteOnExit();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,93,LOG.error("Could not load the URI for stack " + stack.getName() + "-" +
ambari-server/src/main/java/org/apache/ambari/server/state/stack/LatestRepoCallable.java,94,stack.getVersion() + " from " + sourceUri + " (" + e.getMessage() + ")");
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,678,getMasterKeyLocation(), isMasterKeyPersisted());
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1214,String masterKeyLocation = getMasterKeyLocation();
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1215,File f = new File(masterKeyLocation);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1216,return f.exists();
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1219,public String getMasterKeyLocation() {
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1220,String defaultDir = properties.getProperty(MASTER_KEY_LOCATION,
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1221,properties.getProperty(SRVR_KSTR_DIR_KEY, SRVR_KSTR_DIR_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1222,return defaultDir + File.separator + MASTER_KEY_FILENAME_DEFAULT;
ambari-server/src/main/java/org/apache/ambari/server/controller/spi/Resource.java,147,HostKerberosIdentity;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariAuthorizationFilter.java,123,if (requestURI.matches(API_CLUSTERS_ALL_PATTERN)) {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialProvider.java,43,private CredentialStoreService keystoreService;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialProvider.java,46,public CredentialProvider(String masterKey, String masterKeyLocation,
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialProvider.java,58,String storeDir = masterKeyLocation.substring(0,
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialProvider.java,66,return keystoreService.getCredential(getAliasFromString(alias));
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialProvider.java,67,return keystoreService.getCredential(alias);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialProvider.java,106,protected CredentialStoreService getKeystoreService() {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,24,import javax.crypto.spec.SecretKeySpec;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,29,import java.io.IOException;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,30,import java.security.Key;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,31,import java.security.KeyStore;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,32,import java.security.KeyStoreException;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,33,import java.security.NoSuchAlgorithmException;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,34,import java.security.UnrecoverableKeyException;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,35,import java.security.cert.CertificateException;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,74,try {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,94,char[] credential = null;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,97,try {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,113,return credential;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,119,try {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,161,try {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,211,List<StageEntity> stageEntities = stageDAO.findByCommandStatuses(HostRoleStatus.IN_PROGRESS_STATUSES);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,20,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,21,import com.google.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,36,import java.io.File;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,37,import java.io.FileNotFoundException;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,38,import java.io.IOException;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,39,import java.io.InputStream;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,40,import java.util.EnumSet;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,41,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,42,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,43,import java.util.Map.Entry;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,44,import java.util.Properties;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,641,public List<Request> getRequests(Collection<Long> requestIds){
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Request.java,25,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Request.java,399,this.exclusive = isExclusive;
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/DistributeRepositoriesActionListener.java,102,LOG.error("Command report is null, will set all INSTALLING versions for host {} to INSTALL_FAILED.", event.getHostname());
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/DistributeRepositoriesActionListener.java,112,if (event.getCommandReport().getStatus().equals(HostRoleStatus.COMPLETED.toString())) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/DistributeRepositoriesActionListener.java,113,newHostState = RepositoryVersionState.INSTALLED;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/client/Connection.java,63,public Connection(String host, int port, Map<String, String> authParams, String username) throws HiveClientException {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/client/Connection.java,79,public synchronized void openConnection() throws HiveClientException {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/client/Connection.java,97,protected TTransport getTransport() throws HiveClientException, TTransportException {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/client/Connection.java,136,String passwd = getAuthParamDefault(Utils.HiveAuthenticationParams.AUTH_PASSWD, Utils.HiveAuthenticationParams.ANONYMOUS_USER);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/client/ConnectionFactory.java,34,public class ConnectionFactory implements IConnectionFactory {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/client/ConnectionFactory.java,40,public ConnectionFactory(ViewContext context) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/client/ConnectionFactory.java,46,public Connection getHiveConnection() {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/client/ConnectionFactory.java,49,getHiveAuthParams(), context.getUsername());
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/browser/HiveBrowserService.java,25,import org.apache.ambari.view.hive.client.IConnectionFactory;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/browser/HiveBrowserService.java,59,private IConnectionFactory connectionFactory;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/browser/HiveBrowserService.java,70,private IConnectionFactory getConnectionFactory() {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/browser/HiveBrowserService.java,72,connectionFactory = new SharedObjectsFactory(context);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/browser/HiveBrowserService.java,73,return new SharedObjectsFactory(context);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/browser/HiveBrowserService.java,93,TSessionHandle session = getConnectionFactory().getHiveConnection().getOrCreateSessionByTag("DDL");
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/browser/HiveBrowserService.java,94,List<String> tables = getConnectionFactory().getHiveConnection().ddl().getDBList(session, like);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/browser/HiveBrowserService.java,160,TSessionHandle session = getConnectionFactory().getHiveConnection().getOrCreateSessionByTag("DDL");
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/browser/HiveBrowserService.java,161,List<String> tables = getConnectionFactory().getHiveConnection().ddl().getTableList(session, db, like);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/browser/HiveBrowserService.java,228,TSessionHandle session = getConnectionFactory().getHiveConnection().getOrCreateSessionByTag("DDL");
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/browser/HiveBrowserService.java,264,TSessionHandle session = getConnectionFactory().getHiveConnection().getOrCreateSessionByTag("DDL");
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/browser/HiveBrowserService.java,265,Cursor cursor = getConnectionFactory().getHiveConnection().ddl().
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/JobService.java,24,import org.apache.ambari.view.hive.client.Connection;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/JobService.java,25,import org.apache.ambari.view.hive.client.Cursor;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/JobService.java,26,import org.apache.ambari.view.hive.client.HiveClientException;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/JobService.java,63,protected JobResourceManager resourceManager;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/JobService.java,430,Connection connection = getSharedObjectsFactory().getHiveConnection();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/JobService.java,448,Connection connection = getSharedObjectsFactory().getHiveConnection();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/OperationHandleController.java,24,import org.apache.ambari.view.hive.client.IConnectionFactory;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/OperationHandleController.java,25,import org.apache.ambari.view.hive.persistence.utils.ItemNotFound;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/OperationHandleController.java,36,private final IConnectionFactory connectionsFabric;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/OperationHandleController.java,42,public OperationHandleController(IConnectionFactory connectionsFabric, StoredOperationHandle storedOperationHandle, IOperationHandleResourceManager operationHandlesStorage) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/OperationHandleController.java,43,this.connectionsFabric = connectionsFabric;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/OperationHandleController.java,54,TGetOperationStatusResp statusResp = connectionsFabric.getHiveConnection().getOperationStatus(operationHandle);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/OperationHandleController.java,98,connectionsFabric.getHiveConnection().cancelOperation(operationHandle);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/OperationHandleController.java,111,logs = connectionsFabric.getHiveConnection().getLogs(operationHandle);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/OperationHandleController.java,121,return connectionsFabric.getHiveConnection().getResults(operationHandle);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/OperationHandleControllerFactory.java,24,import org.apache.hive.service.cli.thrift.TOperationHandle;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/OperationHandleControllerFactory.java,27,private SharedObjectsFactory connectionsFabric;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/OperationHandleControllerFactory.java,30,public OperationHandleControllerFactory(SharedObjectsFactory connectionsFabric) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/OperationHandleControllerFactory.java,31,this.connectionsFabric = connectionsFabric;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/OperationHandleControllerFactory.java,32,operationHandlesStorage = new OperationHandleResourceManager(connectionsFabric);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/OperationHandleControllerFactory.java,36,return new OperationHandleController(connectionsFabric, storedOperationHandle, operationHandlesStorage);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/viewJobs/JobControllerFactory.java,36,sharedObjectsFactory.getHiveConnectionController(),
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/viewJobs/JobControllerImpl.java,61,ConnectionController hiveConnection,
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/viewJobs/JobControllerImpl.java,69,this.hiveConnection = hiveConnection;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/SharedObjectsFactory.java,23,import org.apache.ambari.view.hive.client.ConnectionFactory;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/SharedObjectsFactory.java,24,import org.apache.ambari.view.hive.client.IConnectionFactory;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/SharedObjectsFactory.java,28,import org.apache.ambari.view.hive.resources.jobs.ConnectionController;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/SharedObjectsFactory.java,51,public class SharedObjectsFactory implements IStorageFactory, IConnectionFactory {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/SharedObjectsFactory.java,56,private final IConnectionFactory hiveConnectionFactory;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/SharedObjectsFactory.java,65,this.hiveConnectionFactory = new ConnectionFactory(context);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/SharedObjectsFactory.java,72,localObjects.put(Connection.class, new HashMap<String, Object>());
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/SharedObjectsFactory.java,89,public Connection getHiveConnection() {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/SharedObjectsFactory.java,90,if (!localObjects.get(Connection.class).containsKey(getTagName())) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/SharedObjectsFactory.java,91,Connection newConnection = hiveConnectionFactory.getHiveConnection();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/SharedObjectsFactory.java,92,localObjects.get(Connection.class).put(getTagName(), newConnection);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/SharedObjectsFactory.java,94,return (Connection) localObjects.get(Connection.class).get(getTagName());
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/SharedObjectsFactory.java,97,public ConnectionController getHiveConnectionController() {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/SharedObjectsFactory.java,98,return new ConnectionController(getOperationHandleControllerFactory(), getHiveConnection());
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/SharedObjectsFactory.java,105,localObjects.get(OperationHandleControllerFactory.class).put(getTagName(), new OperationHandleControllerFactory(this));
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/client/IConnectionFactory.java,19,package org.apache.ambari.view.hive.client;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/client/IConnectionFactory.java,22,public interface IConnectionFactory {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/client/IConnectionFactory.java,23,Connection getHiveConnection();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,73,private static final String HOST_COUNT_SQL_TEMPLATE = "SELECT MAX("
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,74,+ "CASE "
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,75,+ "  WHEN history.alertState = :criticalState AND alert.maintenanceState = :maintenanceStateOff THEN 3 "
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,76,+ "  WHEN history.alertState = :warningState AND alert.maintenanceState = :maintenanceStateOff THEN 2 "
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,77,+ "  WHEN history.alertState = :unknownState AND alert.maintenanceState = :maintenanceStateOff THEN 1 ELSE 0 END) "
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,78,+ "FROM AlertCurrentEntity alert JOIN alert.alertHistory history "
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,79,+ "WHERE history.clusterId = :clusterId AND history.hostName IS NOT NULL GROUP BY history.hostName";
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,477,if (null == hostStateValue) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,483,switch (integerValue) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,484,case 0:
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,485,okCount++;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,486,break;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,487,case 1:
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,488,unknownCount++;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,489,break;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,490,case 2:
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,491,warningCount++;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,492,break;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,493,case 3:
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,494,criticalCount++;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,495,break;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,500,unknownCount, warningCount, criticalCount);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,262,if (timeRange > 7 * DAY) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,508,if (timeRange > 7 * DAY) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigMergeHelper.java,131,if (!newStackVal.equals(savedVal) &&
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,136,List<Stage> stages = new ArrayList<Stage>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,137,for (StageEntity stageEntity : stageDAO.findByRequestId(requestId)) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,138,stages.add(stageFactory.createExisting(stageEntity));
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,140,return stages;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,209,List<Stage> stages = new ArrayList<Stage>();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,213,for (StageEntity stageEntity : stageEntities) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,214,stages.add(stageFactory.createExisting(stageEntity));
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,217,return stages;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,643,List<Request> requests = new ArrayList<Request>(requestEntities.size());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,644,for (RequestEntity requestEntity : requestEntities) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,645,requests.add(requestFactory.createExisting(requestEntity));
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,647,return requests;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,466,List<Stage> allStages = db.getAllStages(stage.getRequestId());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,467,Stage prevStage = null;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,468,for (Stage s : allStages) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,469,if (s.getStageId() == prevStageId) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,470,prevStage = s;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,471,break;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Request.java,161,public Request(@Assisted RequestEntity entity, StageFactory stageFactory, Clusters clusters){
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Request.java,192,for (StageEntity stageEntity : entity.getStages()) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Request.java,193,Stage stage = stageFactory.createExisting(stageEntity);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Request.java,194,stages.add(stage);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,291,for (Map.Entry<String, RoleStats>entry : roleStats.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,293,String    role  = entry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,297,LOG.debug("Stats for role:" + role + ", stats=" + stats);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,299,if (stats.isRoleFailed()) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,305,if(!failed) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,311,LOG.warn("Operation completely failed, aborting request id:"
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,312,+ stage.getRequestId());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,960,case COMPLETED:
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,961,rs.numSucceeded++;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,962,break;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,963,case FAILED:
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,964,rs.numFailed++;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,965,break;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,966,case QUEUED:
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,967,rs.numQueued++;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,968,break;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,969,case PENDING:
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,970,rs.numPending++;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,971,break;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,972,case TIMEDOUT:
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,973,rs.numTimedOut++;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,974,break;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,975,case ABORTED:
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,976,rs.numAborted++;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,977,break;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,978,case IN_PROGRESS:
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,979,rs.numInProgress++;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,980,break;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,981,case HOLDING:
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,982,case HOLDING_FAILED:
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,983,case HOLDING_TIMEDOUT:
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,984,rs.numHolding++;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,985,break;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,986,default:
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionScheduler.java,987,LOG.error("Unknown status " + status.name());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,217,public void addExecutionCommandsToStage(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,345,int maxTaskTimeout = Integer.parseInt(configs.getDefaultAgentTaskTimeout(false));
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,346,if(maxTaskTimeout < actionContext.getTimeout()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,347,commandParams.put(COMMAND_TIMEOUT, Integer.toString(maxTaskTimeout));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,285,if (!checkAccordingToStackAdvisor(property, cluster)) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapper.java,34,import org.apache.commons.logging.Log;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapper.java,35,import org.apache.commons.logging.LogFactory;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractResourceProvider.java,386,parseProperties(config, absCategory, propName, entry.getValue().toString());
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,72,this.caseInsensitiveUser = false;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,75,public AuthToLocalBuilder(boolean caseInsensitiveUserSupport) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,373,AuthToLocalBuilder authToLocalBuilder = new AuthToLocalBuilder(caseInsensitiveUser);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,461,TypedQuery<Number> query = m_entityManagerProvider.get().createQuery(
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,462,HOST_COUNT_SQL_TEMPLATE, Number.class);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,475,List<Number> hostStateValues = m_daoUtils.selectList(query);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,476,for (Number hostStateValue : hostStateValues) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,481,int integerValue = hostStateValue.intValue();
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsDataTransferMethodFactory.java,69,return new Double(data / 100);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintResourceProvider.java,153,createResources(getCreateCommand(properties, request.getRequestInfoProperties()));
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,1349,hostConfig.setDefaultVersionTag(cluster.getDesiredConfigByType(configType).getTag());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,912,MessageFormat.format("DELETE from {0} WHERE {1} = {2}", HOST_STATE_TABLE, HOST_ID_COL, hostToDeleteId));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,914,MessageFormat.format("DELETE from {0} WHERE {1} = {2}", HOSTS_TABLE, HOST_ID_COL, hostToDeleteId));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractResourceProvider.java,154,throws UnsupportedPropertyException, SystemException, NoSuchResourceException, NoSuchParentResourceException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,31,import org.apache.ambari.server.controller.spi.NoSuchParentResourceException;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,37,import org.apache.ambari.server.controller.spi.SystemException;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,38,import org.apache.ambari.server.controller.spi.UnsupportedPropertyException;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,113,public Set<Resource> getResources(Request request, Predicate predicate) throws SystemException, UnsupportedPropertyException,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,114,NoSuchResourceException, NoSuchParentResourceException {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,401,stmt = PhoenixTransactSQL.prepareGetMetricsSqlStmt(conn, condition);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,402,rs = stmt.executeQuery();
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,403,while (rs.next()) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,404,appendMetricFromResultSet(metrics, condition, metricFunctions, rs);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertSummaryPropertyProvider.java,97,populateResource(res, propertyIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertSummaryPropertyProvider.java,107,private void populateResource(Resource resource, Set<String> requestedIds) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertSummaryPropertyProvider.java,133,hostSummary = s_dao.findCurrentHostCounts(clusterId);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BaseClusterRequest.java,51,protected String clusterName;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BaseClusterRequest.java,89,public String getClusterName() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BaseClusterRequest.java,90,return clusterName;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BaseClusterRequest.java,145,protected void setClusterName(String clusterName) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BaseClusterRequest.java,146,this.clusterName = clusterName;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterResourceProvider.java,466,TopologyRequest createClusterRequest;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,834,TopologyRequest requestRequest;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/TopologyRequestDAO.java,44,public List<TopologyRequestEntity> findByCluster(String clusterName) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/TopologyRequestDAO.java,46,.createNamedQuery("TopologyRequestEntity.findByCluster", TopologyRequestEntity.class);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/TopologyRequestDAO.java,48,query.setParameter("clusterName", clusterName);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/TopologyRequestEntity.java,55,private String clusterName;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/TopologyRequestEntity.java,95,public String getClusterName() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/TopologyRequestEntity.java,96,return clusterName;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/TopologyRequestEntity.java,99,public void setClusterName(String clusterName) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/TopologyRequestEntity.java,100,this.clusterName = clusterName;
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,92,public boolean isClusterKerberosEnabled(String clusterName) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,95,cluster = getController().getClusters().getCluster(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,97,throw new RuntimeException("Parent Cluster resource doesn't exist.  clusterName= " + clusterName);
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,139,public void createAmbariResources(ClusterTopology topology) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,140,String clusterName = topology.getClusterName();
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,143,createAmbariServiceAndComponentResources(topology);
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,157,public void createAmbariServiceAndComponentResources(ClusterTopology topology) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,158,String clusterName = topology.getClusterName();
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,203,public void createAmbariHostResources(String clusterName, String hostName, Map<String, Collection<String>> components) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,253,Map<String, Map<String, String>> blueprintConfigurations) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,258,stackId, blueprintConfigurations, topology.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,345,public boolean doesConfigurationWithTagExist(String clusterName, String tag) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,348,Cluster cluster = getController().getClusters().getCluster(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,358,clusterName);
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,371,public boolean isHostRegisteredWithCluster(String cluster, String host) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,374,Collection<Host> hosts = getController().getClusters().getCluster(cluster).getHosts();
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,382,throw new RuntimeException(String.format("Unable to get hosts for cluster '%s': %s", cluster, e), e);
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,396,cluster = clusters.getCluster(topology.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,430,private void createConfigGroupsAndRegisterHost(ClusterTopology topology, String groupName) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,473,null, topology.getClusterName(), absoluteGroupName, service, "Host Group Configuration",
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,145,clusterProperties.put(ClusterResourceProvider.CLUSTER_NAME_PROPERTY_ID, clusterTopology.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,22,import org.apache.ambari.server.state.SecurityType;
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,38,public String getClusterName();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,38,private String clusterName;
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,51,this.clusterName = topologyRequest.getClusterName();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,64,String clusterName,
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,70,this.clusterName = clusterName;
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,84,public String getClusterName() {
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,85,return clusterName;
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,200,return ambariContext.isClusterKerberosEnabled(getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,205,return ambariContext.installHost(hostName, getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,210,return ambariContext.startHost(hostName, getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,59,private String cluster;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,77,public HostRequest(long requestId, long id, String cluster, String hostname, String blueprintName,
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,81,this.cluster = cluster;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,108,cluster = topology.getClusterName();
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,121,isHostRegisteredWithCluster(cluster, hostname);
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,150,public String getClusterName() {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,151,return cluster;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,431,ambariContext.createAmbariHostResources(getClusterName(), getHostName(), serviceComponents);
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,68,super(id, getController().getClusters().getCluster(
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,69,request.getClusterName()).getClusterId(), getController().getClusters());
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,81,super(id, getController().getClusters().getCluster(
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,82,request.getClusterName()).getClusterId(), getController().getClusters());
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,289,HostRequest hostRequest = new HostRequest(getRequestId(), hostIdCounter.getAndIncrement(), getClusterName(),
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,296,HostRequest hostRequest = new HostRequest(getRequestId(), hostIdCounter.getAndIncrement(), getClusterName(),
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,134,Map<String, ClusterTopology> topologyRequests = new HashMap<String, ClusterTopology>();
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,137,ClusterTopology clusterTopology = topologyRequests.get(replayedRequest.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,141,topologyRequests.put(replayedRequest.getClusterName(), clusterTopology);
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,186,entity.setClusterName(request.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,302,private final String clusterName;
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,310,clusterName = entity.getClusterName();
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,326,public String getClusterName() {
ambari-server/src/main/java/org/apache/ambari/server/topology/PersistedStateImpl.java,327,return clusterName;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,65,private Map<String, ClusterTopology> clusterTopologyMap = new HashMap<String, ClusterTopology>();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,98,public RequestStatusResponse provisionCluster(TopologyRequest request) throws InvalidTopologyException, AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,102,PersistedTopologyRequest persistedRequest = persistedState.persistTopologyRequest(request);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,106,ambariContext.createAmbariResources(topology);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,108,String clusterName = topology.getClusterName();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,109,clusterTopologyMap.put(clusterName, topology);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,126,ClusterTopology topology = clusterTopologyMap.get(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,266,public ClusterTopology getClusterTopology(String clusterName) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,268,return clusterTopologyMap.get(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,323,processAcceptedHostOffer(getClusterTopology(logicalRequest.getClusterName()), response, host);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,383,clusterTopologyMap.put(topology.getClusterName(), topology);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,410,if (! ambariContext.doesConfigurationWithTagExist(topology.getClusterName(), TOPOLOGY_RESOLVED_TAG)) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyRequest.java,38,public String getClusterName();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyRequestFactory.java,28,public TopologyRequest createProvisionClusterRequest(Map<String, Object> properties) throws InvalidTopologyTemplateException;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyRequestFactoryImpl.java,31,public TopologyRequest createProvisionClusterRequest(Map<String, Object> properties) throws InvalidTopologyTemplateException {
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorRequest.java,47,private List<PropertyDependencyInfo> changedConfigurations = new LinkedList<PropertyDependencyInfo>();
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorRequest.java,94,public List<PropertyDependencyInfo> getChangedConfigurations() {
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorRequest.java,98,public void setChangedConfigurations(List<PropertyDependencyInfo> changedConfigurations) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorRequest.java,165,List<PropertyDependencyInfo> changedConfigurations) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,112,List<PropertyDependencyInfo> changedConfigurations =
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,114,calculateChangedConfigurations(request) : Collections.<PropertyDependencyInfo>emptyList();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,196,protected List<PropertyDependencyInfo> calculateChangedConfigurations(Request request) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,197,List<PropertyDependencyInfo> configs =
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,198,new LinkedList<PropertyDependencyInfo>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,202,configs.add(new PropertyDependencyInfo(props.get("type"), props.get("name")));
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,381,if (commandEntity.getStatus() != HostRoleStatus.ABORTED) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,384,HostRoleStatus status = HostRoleStatus.valueOf(report.getStatus());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,386,if (status == HostRoleStatus.FAILED && commandEntity.isRetryAllowed()) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,387,status = HostRoleStatus.HOLDING_FAILED;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,389,commandEntity.setStatus(status);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,391,abortedCommandUpdates.add(commandEntity.getTaskId());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,87,this(hostName, role, event, command, false, hostDAO, executionCommandDAO);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,100,public HostRoleCommand(String hostName, Role role,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,101,ServiceComponentHostEvent event, RoleCommand roleCommand, boolean retryAllowed, HostDAO hostDAO, ExecutionCommandDAO executionCommandDAO) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,119,RoleCommand roleCommand,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommand.java,120,boolean retryAllowed, HostDAO hostDAO, ExecutionCommandDAO executionCommandDAO) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommandFactory.java,37,HostRoleCommand create(String hostName, Role role, ServiceComponentHostEvent event, RoleCommand command);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommandFactory.java,48,HostRoleCommand create(String hostName, Role role, ServiceComponentHostEvent event, RoleCommand command, boolean retryAllowed);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommandFactory.java,59,HostRoleCommand create(Host host, Role role, ServiceComponentHostEvent event, RoleCommand command, boolean
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommandFactory.java,60,retryAllowed);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommandFactoryImpl.java,21,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommandFactoryImpl.java,22,import com.google.inject.Injector;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommandFactoryImpl.java,23,import com.google.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommandFactoryImpl.java,54,this.injector.getInstance(HostDAO.class),
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommandFactoryImpl.java,55,this.injector.getInstance(ExecutionCommandDAO.class));
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommandFactoryImpl.java,68,public HostRoleCommand create(String hostName, Role role,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommandFactoryImpl.java,69,ServiceComponentHostEvent event, RoleCommand command, boolean retryAllowed) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommandFactoryImpl.java,70,return new HostRoleCommand(hostName, role, event, command, retryAllowed,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommandFactoryImpl.java,71,this.injector.getInstance(HostDAO.class),
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommandFactoryImpl.java,72,this.injector.getInstance(ExecutionCommandDAO.class));
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommandFactoryImpl.java,85,public HostRoleCommand create(Host host, Role role, ServiceComponentHostEvent event, RoleCommand command, boolean retryAllowed) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommandFactoryImpl.java,86,return new HostRoleCommand(host, role, event, command, retryAllowed,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommandFactoryImpl.java,87,this.injector.getInstance(HostDAO.class),
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommandFactoryImpl.java,88,this.injector.getInstance(ExecutionCommandDAO.class));
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommandFactoryImpl.java,99,this.injector.getInstance(HostDAO.class),
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleCommandFactoryImpl.java,100,this.injector.getInstance(ExecutionCommandDAO.class));
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleStatus.java,65,ABORTED;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleStatus.java,67,private static List<HostRoleStatus> COMPLETED_STATES = Arrays.asList(FAILED, TIMEDOUT, ABORTED, COMPLETED);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleStatus.java,68,private static List<HostRoleStatus> HOLDING_STATES = Arrays.asList(HOLDING, HOLDING_FAILED, HOLDING_TIMEDOUT);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleStatus.java,74,public static EnumSet<HostRoleStatus> FAILED_STATUSES = EnumSet.of(FAILED,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/HostRoleStatus.java,75,TIMEDOUT, ABORTED);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,269,private synchronized ExecutionCommandWrapper addGenericExecutionCommand(
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,270,String clusterName, String hostName, Role role,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,271,RoleCommand command, ServiceComponentHostEvent event, boolean retryAllowed){
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,274,HostRoleCommand hrc = hostRoleCommandFactory.create(hostName, role, event, command, retryAllowed);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,278,private ExecutionCommandWrapper addGenericExecutionCommand(
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,279,Cluster cluster, Host host, Role role,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,280,RoleCommand command, ServiceComponentHostEvent event, boolean retryAllowed) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,281,HostRoleCommand hrc = hostRoleCommandFactory.create(host, role, event, command, retryAllowed);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,282,return addGenericExecutionCommand(cluster.getClusterName(), host.getHostName(), role, command, event, hrc);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,333,ServiceComponentHostEvent event, String clusterName,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,334,String serviceName, boolean retryAllowed) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,336,ExecutionCommandWrapper commandWrapper =
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,337,addGenericExecutionCommand(clusterName, host, role, command, event, retryAllowed);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,349,ServiceComponentHostEvent event, Cluster cluster,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,350,String serviceName, boolean retryAllowed) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,352,ExecutionCommandWrapper commandWrapper =
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,353,addGenericExecutionCommand(cluster, host, role, command, event, retryAllowed);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,380,String clusterName, ServiceComponentHostServerActionEvent event,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,385,boolean retryAllowed) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,387,addServerActionCommand(actionName, null, role, command, clusterName, StageUtils.getHostName(), event,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,388,commandParams, commandDetail, configTags, timeout, retryAllowed);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,418,public synchronized void addServerActionCommand(String actionName,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,420,Role role, RoleCommand command,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,421,String clusterName, String hostName,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,422,ServiceComponentHostServerActionEvent event,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,427,ExecutionCommandWrapper commandWrapper =
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,428,addGenericExecutionCommand(clusterName, hostName, role, command, event, retryAllowed);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,474,Role.AMBARI_SERVER_ACTION, RoleCommand.ABORT, null, false);
ambari-server/src/main/java/org/apache/ambari/server/controller/ActionExecutionContext.java,74,this.actionName = commandName;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,338,stage.addHostRoleExecutionCommand(hostName,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,339,Role.valueOf(actionContext.getActionName()), RoleCommand.ACTIONEXECUTE,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,340,new ServiceComponentHostOpInProgressEvent(actionContext.getActionName(),
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,341,hostName, System.currentTimeMillis()), clusterName,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,342,serviceName, retryAllowed);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,36,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.HOST_SYS_PREPPED;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,235,final RequestResourceFilter resourceFilter,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,236,Stage stage,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,237,Map<String, String> additionalCommandParams,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,238,String commandDetail,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,240,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,301,new ServiceComponentHostOpInProgressEvent(componentName,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,302,hostName, nowTimestamp), cluster.getClusterName(), serviceName, retryAllowed);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,426,private void findHostAndAddServiceCheckAction(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,427,final ActionExecutionContext actionExecutionContext,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,428,final RequestResourceFilter resourceFilter,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,429,Stage stage,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,431,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,503,addServiceCheckAction(stage, hostName, smokeTestRole, nowTimestamp,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,504,serviceName, componentName, actionParameters, retryAllowed);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,512,public void addServiceCheckAction(Stage stage,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,513,String hostname, String smokeTestRole,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,514,long nowTimestamp,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,515,String serviceName,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,516,String componentName,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,517,Map<String, String> actionParameters,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,519,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,525,ServiceInfo serviceInfo =
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,526,ambariMetaInfo.getService(stackId.getStackName(),
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,527,stackId.getStackVersion(), serviceName);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,532,stage.addHostRoleExecutionCommand(hostname,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,533,Role.valueOf(smokeTestRole),
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,535,new ServiceComponentHostOpInProgressEvent(componentName, hostname,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,536,nowTimestamp), cluster.getClusterName(), serviceName, retryAllowed);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,618,final RequestResourceFilter resourceFilter,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,619,Stage stage,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,621,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,831,commandParams, commandDetail.toString(), retryAllowed);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,898,Stage stage,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,899,Map<String, String> requestParams,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,901,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,914,findHostAndAddServiceCheckAction(actionExecutionContext,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,915,resourceFilter, stage, retryAllowed);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,917,addDecommissionAction(actionExecutionContext, resourceFilter, stage, retryAllowed);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,948,addCustomCommandAction(actionExecutionContext, resourceFilter, stage,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,949,extraParams, commandDetail, retryAllowed);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,38,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.MAX_DURATION_OF_RETRIES;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,39,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.COMMAND_RETRY_ENABLED;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1301,break;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1516,|| (requestConfigAttributes != null && clusterConfigAttributes != null
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1525,|| (requestMapAttributes != null && clusterMapAttributes != null
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1534,|| (requestPropertyValue != null && clusterPropertyValue != null
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1781,stage.addHostRoleExecutionCommand(scHost.getHost(), Role.valueOf(scHost
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1782,.getServiceComponentName()), roleCommand,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1783,event, cluster,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1784,serviceName, false);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2350,customCommandExecutionHelper.addServiceCheckAction(stage, clientHost,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2351,smokeTestRole, nowTimestamp, serviceName,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2352,componentName, null, false);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3271,customCommandExecutionHelper.addExecutionCommandsToStage(actionExecContext, stage, requestProperties, false);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,3273,actionExecutionHelper.addExecutionCommandsToStage(actionExecContext, stage, false);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,21,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,22,import com.google.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,23,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,55,import org.apache.ambari.server.serveraction.kerberos.KerberosIdentityDataFileWriter;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,72,import org.apache.ambari.server.serveraction.kerberos.CleanupServerAction;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,84,import org.apache.ambari.server.state.ServiceComponent;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,104,import java.io.File;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,105,import java.io.IOException;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,106,import java.text.SimpleDateFormat;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,107,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,108,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,109,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,110,import java.util.Date;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,111,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,112,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,113,import java.util.Iterator;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,114,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,115,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,117,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,118,import java.util.regex.Matcher;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,119,import java.util.regex.Pattern;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1656,stage.addServerActionCommand(actionClass.getName(),
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1657,Role.AMBARI_SERVER_ACTION,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1658,RoleCommand.EXECUTE,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1659,cluster.getClusterName(),
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1660,event,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1661,commandParameters,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1662,commandDetail,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1663,ambariManagementController.findConfigurationTagsWithOverrides(cluster, null),
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1664,timeout, false);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2191,customCommandExecutionHelper.addExecutionCommandsToStage(actionExecContext, stage, requestParams, false);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2258,customCommandExecutionHelper.addExecutionCommandsToStage(actionExecContext, stage, requestParams, false);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,470,actionExecutionHelper.get().addExecutionCommandsToStage(actionContext, stage, false);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,430,actionExecutionHelper.get().addExecutionCommandsToStage(actionContext, stage, false);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,98,import org.apache.ambari.server.utils.StageUtils;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,901,s_actionExecutionHelper.get().addExecutionCommandsToStage(actionContext, stage, allowRetry);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,960,s_commandExecutionHelper.get().addExecutionCommandsToStage(actionContext, stage, requestParams,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,961,allowRetry);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1010,s_commandExecutionHelper.get().addExecutionCommandsToStage(actionContext, stage, requestParams,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1011,allowRetry);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1117,stage.addServerActionCommand(task.getImplementationClass(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1118,getManagementController().getAuthName(), Role.AMBARI_SERVER_ACTION, RoleCommand.EXECUTE,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1119,cluster.getClusterName(), hostName,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1120,new ServiceComponentHostServerActionEvent(StageUtils.getHostName(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1121,System.currentTimeMillis()),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1122,commandParams, itemDetail, null, Integer.valueOf(1200), allowRetry);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandStatusSummaryDTO.java,56,Number timedout) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandStatusSummaryDTO.java,161,0L);  // timedout
ambari-server/src/main/java/org/apache/ambari/server/state/UpgradeContext.java,239,this.m_downgradeFromVersion = downgradeFromVersion;
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,37,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,38,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,39,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,40,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,41,import java.util.Iterator;
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,42,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,43,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,44,import java.util.TreeSet;
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,45,import java.util.concurrent.atomic.AtomicLong;
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,270,HostRoleCommandStatusSummaryDTO stageSummary = new HostRoleCommandStatusSummaryDTO(stage.isSkippable() ? 1 : 0, 0, 0,
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,271,stage.getStageId(), aborted, completed, failed, holding, holdingFailed, holdingTimedout, inProgress, pending, queued, timedout);
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,204,new ServiceComponentHostInstallEvent("NAMENODE", hostname, now, "HDP-1.2.0"),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,20,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.JDK_LOCATION;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,22,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,24,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,25,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,26,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,27,import java.util.Iterator;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,28,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,29,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,30,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,82,import com.google.gson.Gson;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,83,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,84,import com.google.inject.Injector;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,85,import com.google.inject.Provider;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,584,throw new SystemException("Can not perform request", e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,586,throw new SystemException("Can not perform request", e);
contrib/views/tez/src/main/java/org/apache/ambari/view/tez/ViewControllerImpl.java,36,private ViewContext viewContext;
contrib/views/tez/src/main/java/org/apache/ambari/view/tez/ViewControllerImpl.java,49,parameters.put(ViewController.PARAM_YARN_ATS_URL, getViewParameterValue(ViewController.PARAM_YARN_ATS_URL));
contrib/views/tez/src/main/java/org/apache/ambari/view/tez/ViewControllerImpl.java,50,parameters.put(ViewController.PARAM_YARN_RESOURCEMANAGER_URL, getViewParameterValue(ViewController.PARAM_YARN_RESOURCEMANAGER_URL));
contrib/views/tez/src/main/java/org/apache/ambari/view/tez/ViewControllerImpl.java,59,private String getViewParameterValue(String parameterName) {
contrib/views/tez/src/main/java/org/apache/ambari/view/tez/ViewControllerImpl.java,61,if ("null".equals(value)) {
contrib/views/tez/src/main/java/org/apache/ambari/view/tez/ViewControllerImpl.java,62,return null;
contrib/views/tez/src/main/java/org/apache/ambari/view/tez/ViewControllerImpl.java,64,return value;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/SliderAppTypesResourceProvider.java,34,import org.apache.log4j.Logger;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/SliderAppTypesResourceProvider.java,41,private static final Logger logger = Logger
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/SliderAppsAlerts.java,22,import org.apache.log4j.Logger;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/SliderAppsAlerts.java,29,private static final Logger logger = Logger
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/SliderAppsConfiguration.java,23,import org.apache.log4j.Logger;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/SliderAppsConfiguration.java,28,private static final Logger logger = Logger
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/SliderAppsResourceProvider.java,34,import org.apache.log4j.Logger;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/SliderAppsResourceProvider.java,40,private static final Logger logger = Logger
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/SliderAppsViewControllerImpl.java,67,import org.apache.log4j.Logger;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/SliderAppsViewControllerImpl.java,98,private static final Logger logger = Logger
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/SliderAppsResource.java,48,import org.apache.log4j.Logger;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/SliderAppsResource.java,57,private static final Logger logger = Logger
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/AmbariHttpClient.java,39,import org.apache.log4j.Logger;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/AmbariHttpClient.java,49,private static final Logger logger = Logger.getLogger(AmbariHttpClient.class);
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/BaseHttpClient.java,33,import org.apache.log4j.Logger;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/BaseHttpClient.java,40,private static final Logger logger = Logger.getLogger(BaseHttpClient.class);
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/Metric.java,21,import org.apache.log4j.Logger;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/Metric.java,35,private static final Logger logger = Logger
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/SliderAppJmxHelper.java,22,import org.apache.log4j.Logger;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/SliderAppJmxHelper.java,45,private static final Logger logger = Logger
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/SliderAppMasterClient.java,39,import org.apache.log4j.Logger;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/SliderAppMasterClient.java,46,private static final Logger logger = Logger
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/SliderAppMetricsHelper.java,33,import org.apache.log4j.Logger;
contrib/views/slider/src/main/java/org/apache/ambari/view/slider/rest/client/SliderAppMetricsHelper.java,41,private static final Logger logger = Logger
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1236,cluster.addSessionAttributes(request.getSessionAttributes());
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,116,import java.util.Random;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,132,private static final String SERVICE_CHECK_IDENTIFIER = "_kerberos_internal_service_check_identifier";
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,344,setKerberosServiceCheckIdentifier(cluster, null);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,906,String credentials = getEncryptedAdministratorCredentials(cluster);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,907,if (credentials == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,924,byte[] key = Integer.toHexString(cluster.hashCode()).getBytes();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,925,KerberosCredential kerberosCredentials = KerberosCredential.decrypt(credentials, key);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1242,String serviceCheckId = getKerberosServiceCheckIdentifier(cluster, true);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1260,configurations.get("").put("service_check_id", serviceCheckId);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1714,private String getKerberosServiceCheckIdentifier(Cluster cluster, boolean createIfNull) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1715,Map<String, Object> sessionAttributes = cluster.getSessionAttributes();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1716,Object value = (sessionAttributes == null) ? null : sessionAttributes.get(SERVICE_CHECK_IDENTIFIER);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1717,String serviceCheckIdentifier = (value instanceof String) ? (String) value : null;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1719,if ((serviceCheckIdentifier == null) && createIfNull) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1721,Random random = new Random(System.currentTimeMillis());
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1722,char[] chars = new char[8];
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1724,for (int i = 0; i < 8; i++) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1725,chars[i] = (char) ((int) 'a' + random.nextInt(26));
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1728,serviceCheckIdentifier = String.valueOf(chars);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1729,setKerberosServiceCheckIdentifier(cluster, serviceCheckIdentifier);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1732,return serviceCheckIdentifier;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1745,private void setKerberosServiceCheckIdentifier(Cluster cluster, String value) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1746,if (value == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1747,cluster.removeSessionAttribute(SERVICE_CHECK_IDENTIFIER);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1749,cluster.setSessionAttribute(SERVICE_CHECK_IDENTIFIER, value);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2427,commandParameters.put(KerberosServerAction.ADMINISTRATOR_CREDENTIAL, getEncryptedAdministratorCredentials(cluster));
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2537,commandParameters.put(KerberosServerAction.ADMINISTRATOR_CREDENTIAL, getEncryptedAdministratorCredentials(cluster));
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2651,commandParameters.put(KerberosServerAction.ADMINISTRATOR_CREDENTIAL, getEncryptedAdministratorCredentials(cluster));
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2749,commandParameters.put(KerberosServerAction.ADMINISTRATOR_CREDENTIAL, getEncryptedAdministratorCredentials(cluster));
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialProvider.java,28,import java.util.Arrays;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialProvider.java,34,public static final Pattern PASSWORD_ALIAS_PATTERN =
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialProvider.java,35,Pattern.compile("\\$\\{alias=[\\w\\.]+\\}");
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialProvider.java,37,protected char[] chars = { 'a', 'b', 'c', 'd', 'e', 'f', 'g',
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialProvider.java,47,boolean isMasterKeyPersisted) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialProvider.java,52,masterKeyService = new MasterKeyServiceImpl(masterKeyLocation,
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialProvider.java,53,isMasterKeyPersisted);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialProvider.java,59,masterKeyLocation.indexOf(Configuration.MASTER_KEY_FILENAME_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialProvider.java,60,this.keystoreService = new CredentialStoreServiceImpl(storeDir);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialProvider.java,76,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialProvider.java,80,throw new IllegalArgumentException("Empty or null password not allowed" +
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialProvider.java,82,keystoreService.addCredential(alias, passwordString);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialProvider.java,102,return strPasswd.substring(strPasswd.indexOf("=") + 1,
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialProvider.java,103,strPasswd.length() - 1);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialProvider.java,133,if (args.length > 3 && !args[3].isEmpty() && !args[3].equalsIgnoreCase
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialProvider.java,134,("None")) {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialProvider.java,140,configuration.getMasterKeyLocation(),
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialProvider.java,141,configuration.isMasterKeyPersisted());
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialProvider.java,153,&& password != null && !password.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialProvider.java,169,!writeFilePath.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreService.java,23,import java.security.KeyStore;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreService.java,26,public void addCredential(String alias, String key) throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreService.java,27,public char[] getCredential(String alias) throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreService.java,28,public void setMasterKeyService(MasterKeyService masterService);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,21,import org.slf4j.Logger;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,22,import org.slf4j.LoggerFactory;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,25,import java.io.File;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,26,import java.io.FileInputStream;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,27,import java.io.FileNotFoundException;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,28,import java.io.FileOutputStream;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,37,public class CredentialStoreServiceImpl implements CredentialStoreService {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,38,private static final String CREDENTIALS_SUFFIX = "credentials.jceks";
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,39,private static final String DEFAULT_STORE_TYPE = "JCEKS";
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,40,private MasterKeyService masterService;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,41,private String keyStoreDir;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,42,private static volatile boolean isCredentialStoreCreated = false;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,43,static final Logger LOG = LoggerFactory.getLogger
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,44,(CredentialStoreServiceImpl.class);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,46,public CredentialStoreServiceImpl(String keyStoreDir) {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,47,this.keyStoreDir = keyStoreDir;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,48,final File keyStoreFile = new File(keyStoreDir + File.separator +
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,49,CREDENTIALS_SUFFIX);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,50,if (keyStoreFile.exists()) {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,51,isCredentialStoreCreated = true;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,55,protected KeyStore loadCredentialStore() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,57,throw new AmbariException("Master Key Service is not set for this " +
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,60,final File keyStoreFile = new File(keyStoreDir + File.separator +
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,61,CREDENTIALS_SUFFIX);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,62,LOG.debug("keystoreFile => " + keyStoreFile.getAbsolutePath());
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,63,if (!isCredentialStoreCreated) {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,64,createCredentialStore();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,66,return getKeystore(keyStoreFile, DEFAULT_STORE_TYPE);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,70,public void addCredential(String alias, String value) throws
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,71,AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,72,KeyStore ks = loadCredentialStore();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,73,if (ks != null) {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,75,final Key key = new SecretKeySpec(value.getBytes("UTF8"), "AES");
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,76,ks.setKeyEntry( alias, key, masterService.getMasterSecret(), null);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,77,final File  keyStoreFile = new File(keyStoreDir + File.separator +
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,78,CREDENTIALS_SUFFIX);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,79,writeKeystoreToFile(ks, keyStoreFile);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,81,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,83,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,85,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,87,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,93,public char[] getCredential(String alias) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,95,KeyStore ks = loadCredentialStore();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,96,if (ks != null && alias != null && !alias.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,98,LOG.debug("keystore = " + ks.aliases());
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,99,Key key = ks.getKey(alias, masterService.getMasterSecret());
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,100,if (key == null) {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,101,throw new AmbariException("Credential not found for alias: " +
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,102,alias);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,104,credential = new String(key.getEncoded()).toCharArray();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,106,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,108,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,110,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,117,throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,118,final FileOutputStream  out = new FileOutputStream(file);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,120,keyStore.store(out, masterService.getMasterSecret());
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,122,finally {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,123,out.close();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,127,private synchronized void createCredentialStore() {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,128,String filename = keyStoreDir + File.separator + CREDENTIALS_SUFFIX;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,129,createKeystore(filename, DEFAULT_STORE_TYPE);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,130,isCredentialStoreCreated = true;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,133,private void createKeystore(String filename, String keystoreType) {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,134,FileOutputStream out = null;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,136,out = new FileOutputStream(filename);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,137,KeyStore ks = KeyStore.getInstance(keystoreType);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,138,ks.load(null, null);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,139,ks.store(out, masterService.getMasterSecret());
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,141,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,143,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,145,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,147,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,149,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,151,try {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,152,out.close();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,154,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,159,private KeyStore getKeystore(final File keyStoreFile, String storeType) {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,160,KeyStore credStore = null;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,162,credStore = loadKeyStore(keyStoreFile, masterService.getMasterSecret(), storeType);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,164,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,166,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,168,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,170,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,172,return credStore;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,175,private static KeyStore loadKeyStore(final File keyStoreFile,
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,177,throws CertificateException, IOException,
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,178,KeyStoreException, NoSuchAlgorithmException {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,179,final KeyStore  keyStore = KeyStore.getInstance(storeType);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,180,if (keyStoreFile.exists()) {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,181,final FileInputStream input   = new FileInputStream(keyStoreFile);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,182,try {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,183,keyStore.load(input, masterPassword);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,185,finally {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,186,input.close();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,189,else {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,190,keyStore.load(null, masterPassword);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,193,return keyStore;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,197,public void setMasterKeyService(MasterKeyService masterService) {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CredentialStoreServiceImpl.java,198,this.masterService = masterService;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,30,import java.io.PrintWriter;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,35,import java.util.Random;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,38,private static Log LOG = LogFactory.getLog(MasterKeyServiceImpl.class);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,39,private static final String MASTER_PERSISTENCE_TAG = "#1.0# " +
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,40,TimeStamp.getCurrentTime().toDateString();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,41,private char[] master = null;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,42,private String MASTER_PASSPHRASE = "masterpassphrase";
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,43,private AESEncryptor aes = new AESEncryptor(MASTER_PASSPHRASE);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,53,public MasterKeyServiceImpl(String masterKey, String masterFileLocation,
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,54,boolean persistMaster) {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,55,this.master = masterKey.toCharArray();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,56,if (masterFileLocation != null) {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,57,if (persistMaster) {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,58,LOG.debug("Persisting master key file.");
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,59,File masterFile = new File(masterFileLocation);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,60,if (masterFile.exists()) {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,61,LOG.info("Resetting master key before persist.");
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,62,try {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,63,PrintWriter pw = new PrintWriter(masterFile);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,64,pw.print("");
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,65,pw.close();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,67,LOG.error("Cannot reset master key file located at: " +
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,68,masterFileLocation);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,69,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,72,persistMaster(masterFile);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,75,if (persistMaster) {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,76,LOG.error("Cannot persist master key without specifying master key " +
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,87,public MasterKeyServiceImpl(String masterFileLocation, boolean isPersisted) {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,89,throw new IllegalArgumentException("Master Key location not provided.");
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,90,if (isPersisted) {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,91,File masterFile = new File(masterFileLocation);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,92,if (masterFile.exists()) {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,94,initializeFromFile(masterFile);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,96,LOG.error("Cannot intitialize master key from file: " +
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,97,masterFileLocation + "\n" + ex);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,100,LOG.error("Cannot find master key at specified location " +
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,101,masterFileLocation);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,105,String key = readMasterKey();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,106,if (key != null) {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,107,this.master = key.toCharArray();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,109,LOG.debug("Master key is not provided as a System property or an " +
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,134,throw new IllegalStateException("Cannot read master key from " +
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,169,public boolean isMasterKeyInitialized() {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,170,return this.master != null;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,173,private EncryptionResult encryptMaster(char[] master) {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,174,try {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,175,return aes.encrypt(new String(master));
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,179,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,181,return null;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,184,private void persistMaster(File masterFile) {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,185,EncryptionResult atom = encryptMaster(master);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,186,try {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,187,ArrayList<String> lines = new ArrayList<String>();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,188,lines.add(MASTER_PERSISTENCE_TAG);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,190,String line = Base64.encodeBase64String((
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,191,Base64.encodeBase64String(atom.salt) + "::" +
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,192,Base64.encodeBase64String(atom.iv) + "::" +
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,193,Base64.encodeBase64String(atom.cipher)).getBytes("UTF8"));
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,194,lines.add(line);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,195,FileUtils.writeLines(masterFile, "UTF8", lines);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,198,chmod("600", masterFile);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,200,LOG.error("Failed to persist master. " + e.getLocalizedMessage());
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,201,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,213,Base64.decodeBase64(parts[1]), Base64.decodeBase64(parts[2])),
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,225,public char[] getMasterSecret() {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,226,return this.master;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,229,private void chmod(String args, File file) throws IOException {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,230,if (isUnixEnv()) {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,233,throw new IOException("nullArg");
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,235,throw new IOException("fileNotFound");
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,238,final String[] argsString = args.split(" +");
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,239,List<String> cmdList = new ArrayList<String>();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,240,cmdList.add("/bin/chmod");
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,241,cmdList.addAll(Arrays.asList(argsString));
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,242,cmdList.add(file.getAbsolutePath());
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,243,new ProcessBuilder(cmdList).start();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,247,private boolean isUnixEnv() {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,248,return (File.separatorChar == '/');
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,251,private String generateMasterKey() {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,252,char[] chars = { 'a', 'b', 'c', 'd', 'e', 'f', 'g',
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,258,StringBuffer sb = new StringBuffer();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,259,Random r = new Random();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,260,for (int i = 0; i < chars.length; i++) {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,261,sb.append(chars[r.nextInt(chars.length)]);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,263,return sb.toString();
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,266,public static void main(String args[]) {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,267,String masterKey = "ThisissomeSecretPassPhrasse";
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,268,String masterKeyLocation = "/var/lib/ambari-server/keys/master";
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,269,boolean persistMasterKey = false;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,270,if (args != null && args.length > 0) {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,271,masterKey = args[0];
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,273,masterKeyLocation = args[1];
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,275,persistMasterKey = args[2].toLowerCase().equals("true");
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,277,MasterKeyService masterKeyService = new MasterKeyServiceImpl
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,278,(masterKey, masterKeyLocation, persistMasterKey);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,279,if (!masterKeyService.isMasterKeyInitialized()) {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,280,System.exit(1);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,282,System.exit(0);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,64,private String password = null;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,97,String password;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,108,password = (attribute == null) ? null : attribute.toString();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,114,((password != null) && !password.isEmpty()) ||
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,144,return new Gson().fromJson(new String(plaintext), KerberosCredential.class);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,187,throw new AmbariException("Failed to encrypt plaintext due to invalid key", e);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,212,public KerberosCredential(String principal, String password, String keytab) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,235,public String getPassword() {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosCredential.java,242,public void setPassword(String password) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosOperationHandler.java,502,String value;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosOperationHandler.java,505,value = administratorCredentials.getPrincipal();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosOperationHandler.java,506,if ((value == null) || value.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosOperationHandler.java,511,value = administratorCredentials.getPassword();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosOperationHandler.java,512,if ((value == null) || value.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosOperationHandler.java,513,value = administratorCredentials.getKeytab();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosOperationHandler.java,515,if ((value == null) || value.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java,65,public static final String ADMINISTRATOR_CREDENTIAL = "kerberos_admin_credential";
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java,302,protected KerberosCredential getAdministratorCredential(Map<String, String> commandParameters) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java,303,Cluster cluster = getCluster();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java,306,byte[] key = Integer.toHexString(cluster.hashCode()).getBytes();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java,307,return KerberosCredential.decrypt(getCommandParameterValue(commandParameters, ADMINISTRATOR_CREDENTIAL), key);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java,345,KerberosCredential administratorCredential = getAdministratorCredential(commandParameters);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,342,String adminPassword = administratorCredentials.getPassword();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,370,command.add(adminPassword);
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,97,throw new IllegalArgumentException("Incorrect configuration: MYSQL_SERVER component is available but hive" +
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetLayoutService.java,52,createResource(getUserName(headers), widgetLayoutId));
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetLayoutService.java,69,createResource(getUserName(headers), null));
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetLayoutService.java,78,createResource(getUserName(headers), widgetLayoutId));
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetLayoutService.java,86,createResource(getUserName(headers), null));
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetLayoutService.java,95,return handleRequest(headers, body, ui, Request.Type.PUT, createResource(getUserName(headers), widgetLayoutId));
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetLayoutService.java,102,return handleRequest(headers, body, ui, Request.Type.PUT, createResource(getUserName(headers), null));
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetLayoutService.java,111,return handleRequest(headers, null, ui, Request.Type.DELETE, createResource(getUserName(headers), widgetLayoutId));
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetLayoutService.java,114,private ResourceInstance createResource(String userName, String widgetLayoutId) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetLayoutService.java,116,mapIds.put(Resource.Type.User, userName);
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetLayoutService.java,122,private String getUserName(HttpHeaders headers) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetLayoutService.java,123,List<String> authorizationHeaders = headers.getRequestHeaders().get("Authorization");
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetLayoutService.java,124,if (authorizationHeaders != null && !authorizationHeaders.isEmpty()){
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetLayoutService.java,125,String authorizationString = authorizationHeaders.get(0);
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetLayoutService.java,126,if (authorizationString != null && authorizationString.startsWith("Basic")) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetLayoutService.java,127,String base64Credentials = authorizationString.substring("Basic".length()).trim();
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetLayoutService.java,128,String clearCredentials = new String(Base64.decode(base64Credentials),Charset.forName("UTF-8"));
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetLayoutService.java,129,return clearCredentials.split(":", 2)[0];
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetLayoutService.java,132,return null;
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetService.java,52,createResource(getUserName(headers), widgetId));
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetService.java,69,createResource(getUserName(headers), null));
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetService.java,78,createResource(getUserName(headers), widgetId));
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetService.java,86,createResource(getUserName(headers), null));
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetService.java,95,return handleRequest(headers, body, ui, Request.Type.PUT, createResource(getUserName(headers), widgetId));
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetService.java,102,return handleRequest(headers, body, ui, Request.Type.PUT, createResource(getUserName(headers), null));
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetService.java,111,return handleRequest(headers, null, ui, Request.Type.DELETE, createResource(getUserName(headers), widgetId));
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetService.java,114,private ResourceInstance createResource(String userName, String widgetId) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetService.java,118,mapIds.put(Resource.Type.User, userName);
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetService.java,122,private String getUserName(HttpHeaders headers) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetService.java,123,List<String> authorizationHeaders = headers.getRequestHeaders().get("Authorization");
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetService.java,124,if (authorizationHeaders != null && !authorizationHeaders.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetService.java,125,String authorizationString = authorizationHeaders.get(0);
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetService.java,126,if (authorizationString != null && authorizationString.startsWith("Basic")) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetService.java,127,String base64Credentials = authorizationString.substring("Basic".length()).trim();
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetService.java,128,String clearCredentials = new String(Base64.decode(base64Credentials), Charset.forName("UTF-8"));
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetService.java,129,return clearCredentials.split(":", 2)[0];
ambari-server/src/main/java/org/apache/ambari/server/api/services/WidgetService.java,132,return null;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/WidgetResourceProvider.java,156,throw new AmbariException("Only cluster operator can create widgets with cluster scope");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/WidgetResourceProvider.java,226,requestedEntities.addAll(widgetDAO.findAll());
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,325,LOG.error("Unable to process alert {} for an invalid cluster named {}",
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,326,alert.getName(), clusterName, ambariException);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ambari/Services.java,27,import java.net.HttpURLConnection;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ambari/Services.java,30,import java.util.regex.Matcher;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ambari/Services.java,31,import java.util.regex.Pattern;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ambari/Services.java,63,String protocol;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ambari/Services.java,65,String haEnabled = ambariApi.getCluster().getConfigurationValue(YARN_SITE, YARN_RESOURCEMANAGER_HA_ENABLED);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ambari/Services.java,66,String httpPolicy = ambariApi.getCluster().getConfigurationValue(YARN_SITE, YARN_HTTP_POLICY);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ambari/Services.java,69,url = ambariApi.getCluster().getConfigurationValue(YARN_SITE, "yarn.resourcemanager.webapp.https.address");
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ambari/Services.java,73,url = ambariApi.getCluster().getConfigurationValue(YARN_SITE, "yarn.resourcemanager.webapp.address");
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ambari/Services.java,75,LOG.error(String.format("RA030 Unknown value %s of yarn-site/yarn.http.policy. HTTP_ONLY assumed.", httpPolicy));
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ambari/Services.java,80,if (haEnabled != null && haEnabled.equals("true")) {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ambari/Services.java,81,url = getActiveRMUrl(url);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ambari/Services.java,84,url = context.getProperties().get("yarn.resourcemanager.url");
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ambari/Services.java,85,if (!hasProtocol(url)) {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ambari/Services.java,90,return removeTrailingSlash(url);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ambari/Services.java,100,public final Pattern refreshHeaderUrlPattern = Pattern.compile("^\\d+;\\s*url=(.*)$");
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ambari/Services.java,108,private String getActiveRMUrl(String url) {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ambari/Services.java,109,String activeRMUrl = url;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ambari/Services.java,111,HttpURLConnection httpURLConnection = context.getURLConnectionProvider().
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ambari/Services.java,112,getConnection(url, "GET", (String) null, new HashMap<String, String>());
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ambari/Services.java,113,String refreshHeader = httpURLConnection.getHeaderField("Refresh");
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ambari/Services.java,114,if (refreshHeader != null) { // we hit standby RM
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ambari/Services.java,115,Matcher matcher = refreshHeaderUrlPattern.matcher(refreshHeader);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ambari/Services.java,116,if (matcher.find()) {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ambari/Services.java,117,activeRMUrl = matcher.group(1);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ambari/Services.java,121,throw new AmbariApiException("RA110 ResourceManager is not accessible");
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ambari/Services.java,123,return activeRMUrl;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,200,.header("Content-Disposition", "inline; filename=\"hdfs.zip\"").build();
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,34,import org.apache.ambari.server.state.HostState;
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,137,return filterSameVersion(hostsType, serviceName, componentName);
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,166,hostsType = filterSameVersion(hostsType, serviceName, componentName);
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,181,private HostsType filterSameVersion(HostsType hostsType, String service, String component) {
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,188,List<ServiceComponentHost> unhealthy = new ArrayList<ServiceComponentHost>();
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,189,LinkedHashSet<String> toUpgrade = new LinkedHashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,191,for (String host : hostsType.hosts) {
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,192,ServiceComponentHost sch = sc.getServiceComponentHost(host);
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,194,if (HostState.HEALTHY != sch.getHostState() && !sc.isMasterComponent()) {
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,195,unhealthy.add(sch);
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,197,toUpgrade.add(host);
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,201,hostsType.unhealthy = unhealthy;
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,202,hostsType.hosts = toUpgrade;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,232,hostNames.add(host.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/controller/StackVersionResponse.java,60,Set<String> upgradePacks, boolean valid, Collection errorSet) {
ambari-server/src/main/java/org/apache/ambari/server/state/StackInfo.java,260,isValid(), getErrors());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1488,hbaseSiteProps.put("hbase.bucketcache.size", block_cache_heap + bucketcache_offheap_memory + "m");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,23,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,95,protected static final String CLUSTER_STACK_VERSION_ID_PROPERTY_ID                   = PropertyHelper.getPropertyId("ClusterStackVersions", "id");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,96,protected static final String CLUSTER_STACK_VERSION_CLUSTER_NAME_PROPERTY_ID         = PropertyHelper.getPropertyId("ClusterStackVersions", "cluster_name");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,97,protected static final String CLUSTER_STACK_VERSION_STACK_PROPERTY_ID                = PropertyHelper.getPropertyId("ClusterStackVersions", "stack");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,98,protected static final String CLUSTER_STACK_VERSION_VERSION_PROPERTY_ID              = PropertyHelper.getPropertyId("ClusterStackVersions", "version");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,99,protected static final String CLUSTER_STACK_VERSION_STATE_PROPERTY_ID                = PropertyHelper.getPropertyId("ClusterStackVersions", "state");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,100,protected static final String CLUSTER_STACK_VERSION_HOST_STATES_PROPERTY_ID          = PropertyHelper.getPropertyId("ClusterStackVersions", "host_states");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,101,protected static final String CLUSTER_STACK_VERSION_REPOSITORY_VERSION_PROPERTY_ID   = PropertyHelper.getPropertyId("ClusterStackVersions", "repository_version");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,270,Set<String> requiredProperties = new HashSet<String>(){{
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,271,add(CLUSTER_STACK_VERSION_CLUSTER_NAME_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,272,add(CLUSTER_STACK_VERSION_REPOSITORY_VERSION_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,273,add(CLUSTER_STACK_VERSION_STACK_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,274,add(CLUSTER_STACK_VERSION_VERSION_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,347,for (int batchId = 1; batchId <= batchCount ; batchId++) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,353,stageName = String.format(INSTALL_PACKAGES_FULL_NAME +
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,356,Stage stage = stageFactory.createNew(req.getId(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,358,cluster.getClusterName(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,359,cluster.getClusterId(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,360,stageName,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,363,hostParamsJson
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,364,);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,366,stages.add(stage);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,452,Map<String, String> params = new HashMap<String, String>() {{
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,453,put("stack_id", stackId.getStackId());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,454,put("repository_version", desiredRepoVersion);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,455,put("base_urls", repoList);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,456,put("package_list", packageList);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,504,Set<String> requiredProperties = new HashSet<String>() {{
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,505,add(CLUSTER_STACK_VERSION_CLUSTER_NAME_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,506,add(CLUSTER_STACK_VERSION_REPOSITORY_VERSION_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,507,add(CLUSTER_STACK_VERSION_STATE_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ServiceCheckGrouping.java,55,private Set<String> priorityServices = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,423,SQL_SERVER("sqlserver");
ambari-server/src/main/java/org/apache/ambari/server/DBConnectionVerification.java,21,import org.apache.commons.lang.StringUtils;
ambari-server/src/main/java/org/apache/ambari/server/DBConnectionVerification.java,23,import java.sql.*;
ambari-server/src/main/java/org/apache/ambari/server/api/services/UpgradeGroupService.java,68,public UpgradeItemService getUpgradeItems(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,22,import java.util.EnumSet;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,48,import org.apache.ambari.server.controller.utilities.PredicateBuilder;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,49,import org.apache.ambari.server.controller.utilities.PropertyHelper;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,53,import org.apache.ambari.server.orm.entities.HostRoleCommandEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,136,private static Map<HostRoleStatus, EnumSet<HostRoleStatus>> manualTransitionMap = new HashMap<HostRoleStatus, EnumSet<HostRoleStatus>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,138,static {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,139,manualTransitionMap.put(HostRoleStatus.HOLDING, EnumSet.of(HostRoleStatus.COMPLETED, HostRoleStatus.ABORTED));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,140,manualTransitionMap.put(HostRoleStatus.HOLDING_FAILED, EnumSet.of(HostRoleStatus.PENDING, HostRoleStatus.FAILED, HostRoleStatus.ABORTED));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,141,manualTransitionMap.put(HostRoleStatus.HOLDING_TIMEDOUT, EnumSet.of(HostRoleStatus.PENDING, HostRoleStatus.TIMEDOUT, HostRoleStatus.ABORTED));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,192,updateStageStatus(entity, desiredStatus, getManagementController());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,262,public static void updateStageStatus(long requestId, long stageId, HostRoleStatus desiredStatus,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,263,AmbariManagementController controller) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,264,Predicate predicate = new PredicateBuilder().property(STAGE_STAGE_ID).equals(stageId).and().
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,265,property(STAGE_REQUEST_ID).equals(requestId).toPredicate();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,267,List<StageEntity> entityList = dao.findAll(PropertyHelper.getReadRequest(), predicate);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,268,for (StageEntity stageEntity : entityList) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,269,updateStageStatus(stageEntity, desiredStatus, controller);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,286,private static void updateStageStatus(StageEntity stage, HostRoleStatus desiredStatus,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,287,AmbariManagementController controller) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,288,Collection<HostRoleCommandEntity> tasks = stage.getHostRoleCommands();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,290,HostRoleStatus currentStatus = CalculatedStatus.statusFromTaskEntities(tasks, stage.isSkippable()).getStatus();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,292,if (!isValidManualTransition(currentStatus, desiredStatus)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,293,throw new IllegalArgumentException("Can not transition a stage from " +
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,294,currentStatus + " to " + desiredStatus);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,296,if (desiredStatus == HostRoleStatus.ABORTED) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,297,controller.getActionManager().cancelRequest(stage.getRequestId(), "User aborted.");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,299,for (HostRoleCommandEntity hostRoleCommand : tasks) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,300,HostRoleStatus hostRoleStatus = hostRoleCommand.getStatus();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,301,if (hostRoleStatus.equals(currentStatus)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,302,hostRoleCommand.setStatus(desiredStatus);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,304,if (desiredStatus == HostRoleStatus.PENDING) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,305,hostRoleCommand.setStartTime(-1L);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,307,hostRoleCommandDAO.merge(hostRoleCommand);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,458,private static boolean isValidManualTransition(HostRoleStatus status, HostRoleStatus desiredStatus) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,459,EnumSet<HostRoleStatus> stageStatusSet = manualTransitionMap.get(status);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,460,return stageStatusSet != null && stageStatusSet.contains(desiredStatus);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeGroupResourceProvider.java,162,throw new SystemException("Upgrade Items cannot be modified at this time");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeGroupResourceProvider.java,169,throw new SystemException("Cannot delete upgrade items");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,70,private static UpgradeDAO m_dao = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,120,String stageStatus      = (String) updateProperties.get(statusPropertyId);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,122,if (stageStatus != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,124,HostRoleStatus desiredStatus = HostRoleStatus.valueOf(stageStatus);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,125,Set<Resource>  resources     = getResources(PropertyHelper.getReadRequest(), predicate);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,127,for (Resource resource : resources) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,129,Long requestId = (Long) resource.getPropertyValue(UPGRADE_REQUEST_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,130,Long stageId   = (Long) resource.getPropertyValue(UPGRADE_ITEM_STAGE_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,132,StageResourceProvider.updateStageStatus(requestId, stageId, desiredStatus, getManagementController());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,136,notifyUpdate(Resource.Type.UpgradeItem, request, predicate);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,172,UpgradeGroupEntity group = m_dao.findUpgradeGroup(groupId);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,181,UpgradeItemEntity entity = m_dao.findUpgradeItemByRequestAndStage(requestId, stageId);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,176,.addTransition(State.INIT,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,177,State.INSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,178,ServiceComponentHostEventType.HOST_SVCCOMP_INSTALL,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,181,.addTransition(State.INSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,182,State.INSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,183,ServiceComponentHostEventType.HOST_SVCCOMP_OP_SUCCEEDED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,186,.addTransition(State.INSTALLING, State.INSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,190,.addTransition(State.INSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,191,State.INSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,192,ServiceComponentHostEventType.HOST_SVCCOMP_OP_SUCCEEDED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,195,.addTransition(State.INSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,196,State.INSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,197,ServiceComponentHostEventType.HOST_SVCCOMP_OP_IN_PROGRESS,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,199,.addTransition(State.INSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,200,State.INSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,201,ServiceComponentHostEventType.HOST_SVCCOMP_INSTALL,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,204,.addTransition(State.INSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,205,State.INSTALL_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,206,ServiceComponentHostEventType.HOST_SVCCOMP_OP_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,209,.addTransition(State.INSTALL_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,210,State.INSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,211,ServiceComponentHostEventType.HOST_SVCCOMP_OP_RESTART,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,213,.addTransition(State.INSTALL_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,214,State.INSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,215,ServiceComponentHostEventType.HOST_SVCCOMP_INSTALL,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,219,.addTransition(State.INSTALL_FAILED, State.INSTALL_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,220,ServiceComponentHostEventType.HOST_SVCCOMP_OP_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,223,.addTransition(State.INSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,224,State.STARTING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,225,ServiceComponentHostEventType.HOST_SVCCOMP_START,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,227,.addTransition(State.INSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,228,State.UNINSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,229,ServiceComponentHostEventType.HOST_SVCCOMP_UNINSTALL,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,231,.addTransition(State.INSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,232,State.INSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,233,ServiceComponentHostEventType.HOST_SVCCOMP_INSTALL,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,235,.addTransition(State.INSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,236,State.STOPPING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,237,ServiceComponentHostEventType.HOST_SVCCOMP_STOP,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,239,.addTransition(State.INSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,240,State.UPGRADING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,241,ServiceComponentHostEventType.HOST_SVCCOMP_UPGRADE,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,243,.addTransition(State.INSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,244,State.INSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,245,ServiceComponentHostEventType.HOST_SVCCOMP_OP_IN_PROGRESS,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,247,.addTransition(State.INSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,248,State.STARTED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,249,ServiceComponentHostEventType.HOST_SVCCOMP_STARTED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,251,.addTransition(State.INSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,252,State.INSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,253,ServiceComponentHostEventType.HOST_SVCCOMP_STOPPED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,256,.addTransition(State.STARTING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,257,State.STARTING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,258,ServiceComponentHostEventType.HOST_SVCCOMP_OP_IN_PROGRESS,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,261,.addTransition(State.STARTING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,262,State.STARTING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,263,ServiceComponentHostEventType.HOST_SVCCOMP_START,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,265,.addTransition(State.STARTING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,266,State.STARTED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,267,ServiceComponentHostEventType.HOST_SVCCOMP_STARTED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,270,.addTransition(State.STARTING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,271,State.INSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,272,ServiceComponentHostEventType.HOST_SVCCOMP_OP_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,275,.addTransition(State.INSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,276,State.STARTING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,277,ServiceComponentHostEventType.HOST_SVCCOMP_OP_RESTART,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,280,.addTransition(State.STARTED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,281,State.STARTED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,282,ServiceComponentHostEventType.HOST_SVCCOMP_STARTED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,284,.addTransition(State.STARTED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,285,State.STOPPING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,286,ServiceComponentHostEventType.HOST_SVCCOMP_STOP,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,288,.addTransition(State.STARTED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,289,State.STARTED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,290,ServiceComponentHostEventType.HOST_SVCCOMP_OP_IN_PROGRESS,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,292,.addTransition(State.STARTED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,293,State.INSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,294,ServiceComponentHostEventType.HOST_SVCCOMP_STOPPED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,297,.addTransition(State.STOPPING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,298,State.STOPPING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,299,ServiceComponentHostEventType.HOST_SVCCOMP_OP_IN_PROGRESS,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,301,.addTransition(State.STOPPING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,302,State.INSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,303,ServiceComponentHostEventType.HOST_SVCCOMP_STOPPED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,305,.addTransition(State.STOPPING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,306,State.STARTED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,307,ServiceComponentHostEventType.HOST_SVCCOMP_OP_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,310,.addTransition(State.STARTED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,311,State.STOPPING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,312,ServiceComponentHostEventType.HOST_SVCCOMP_OP_RESTART,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,315,.addTransition(State.UNINSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,316,State.UNINSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,317,ServiceComponentHostEventType.HOST_SVCCOMP_OP_IN_PROGRESS,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,319,.addTransition(State.UNINSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,320,State.UNINSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,321,ServiceComponentHostEventType.HOST_SVCCOMP_OP_SUCCEEDED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,323,.addTransition(State.UNINSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,324,State.UNINSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,325,ServiceComponentHostEventType.HOST_SVCCOMP_OP_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,328,.addTransition(State.UPGRADING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,329,State.UPGRADING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,330,ServiceComponentHostEventType.HOST_SVCCOMP_OP_IN_PROGRESS,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,332,.addTransition(State.UPGRADING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,333,State.INSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,334,ServiceComponentHostEventType.HOST_SVCCOMP_OP_SUCCEEDED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,336,.addTransition(State.UPGRADING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,337,State.UPGRADING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,338,ServiceComponentHostEventType.HOST_SVCCOMP_OP_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,340,.addTransition(State.UPGRADING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,341,State.UPGRADING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,342,ServiceComponentHostEventType.HOST_SVCCOMP_UPGRADE,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,344,.addTransition(State.UPGRADING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,345,State.UPGRADING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,346,ServiceComponentHostEventType.HOST_SVCCOMP_UPGRADE,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,349,.addTransition(State.UNINSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,350,State.UNINSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,351,ServiceComponentHostEventType.HOST_SVCCOMP_OP_RESTART,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,353,.addTransition(State.UNINSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,354,State.UNINSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,355,ServiceComponentHostEventType.HOST_SVCCOMP_UNINSTALL,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,358,.addTransition(State.UNINSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,359,State.INSTALLING,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,360,ServiceComponentHostEventType.HOST_SVCCOMP_INSTALL,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,363,.addTransition(State.UNINSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,364,State.WIPING_OUT,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,365,ServiceComponentHostEventType.HOST_SVCCOMP_WIPEOUT,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,368,.addTransition(State.WIPING_OUT,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,369,State.WIPING_OUT,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,370,ServiceComponentHostEventType.HOST_SVCCOMP_OP_IN_PROGRESS,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,372,.addTransition(State.WIPING_OUT,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,373,State.INIT,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,374,ServiceComponentHostEventType.HOST_SVCCOMP_OP_SUCCEEDED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,376,.addTransition(State.WIPING_OUT,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,377,State.WIPING_OUT,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,378,ServiceComponentHostEventType.HOST_SVCCOMP_OP_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,381,.addTransition(State.WIPING_OUT,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,382,State.WIPING_OUT,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,383,ServiceComponentHostEventType.HOST_SVCCOMP_OP_RESTART,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,385,.addTransition(State.WIPING_OUT,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,386,State.WIPING_OUT,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,387,ServiceComponentHostEventType.HOST_SVCCOMP_WIPEOUT,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,390,.addTransition(State.INSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,391,State.DISABLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,392,ServiceComponentHostEventType.HOST_SVCCOMP_DISABLE,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,394,.addTransition(State.DISABLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,395,State.DISABLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,396,ServiceComponentHostEventType.HOST_SVCCOMP_DISABLE,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,398,.addTransition(State.UNKNOWN,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,399,State.DISABLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,400,ServiceComponentHostEventType.HOST_SVCCOMP_DISABLE,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,402,.addTransition(State.INSTALL_FAILED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,403,State.DISABLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,404,ServiceComponentHostEventType.HOST_SVCCOMP_DISABLE,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,407,.addTransition(State.DISABLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,408,State.INSTALLED,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,409,ServiceComponentHostEventType.HOST_SVCCOMP_RESTORE,
ambari-server/src/main/java/org/apache/ambari/server/orm/helpers/dbms/PostgresHelper.java,51,String nullStatement = nullable ? " SET NULL" : " SET NOT NULL";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,20,import com.google.inject.Guice;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,21,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,22,import com.google.inject.Injector;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,23,import com.google.inject.multibindings.Multibinder;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,24,import com.google.inject.persist.PersistService;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,25,import org.apache.ambari.server.AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,26,import org.apache.ambari.server.configuration.Configuration;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,27,import org.apache.ambari.server.controller.ControllerModule;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,28,import org.apache.ambari.server.orm.DBAccessor;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,29,import org.apache.ambari.server.utils.VersionUtils;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,30,import org.slf4j.Logger;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,31,import org.slf4j.LoggerFactory;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,33,import java.sql.Connection;
ambari-server/src/main/java/org/apache/ambari/server/checks/AbstractCheckDescriptor.java,50,protected static final StackId STACK_HDP_22 = new StackId("HDP", "2.2");
ambari-server/src/main/java/org/apache/ambari/server/checks/AbstractCheckDescriptor.java,51,protected static final StackId STACK_HDP_23 = new StackId("HDP", "2.3");
ambari-server/src/main/java/org/apache/ambari/server/checks/AbstractCheckDescriptor.java,126,return STACK_HDP_22;
ambari-server/src/main/java/org/apache/ambari/server/checks/AbstractCheckDescriptor.java,139,return null;
ambari-server/src/main/java/org/apache/ambari/server/api/resources/StackLevelConfigurationResourceDefinition.java,30,super(Resource.Type.StackLevelConfiguration);
ambari-server/src/main/java/org/apache/ambari/server/api/resources/StackLevelConfigurationResourceDefinition.java,49,Set<SubResourceDefinition> setChildren = new HashSet<SubResourceDefinition>();
ambari-server/src/main/java/org/apache/ambari/server/api/resources/StackLevelConfigurationResourceDefinition.java,50,return setChildren;
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,634,Set<PropertyInfo> properties = getServiceProperties(stackName, version, serviceName);
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,593,Map<PropertyDependencyInfo, Set<PropertyDependencyInfo>> dependedByMap = new HashMap<PropertyDependencyInfo, Set<PropertyDependencyInfo>>();
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,619,for (PropertyInfo pi : serviceModule.getModuleInfo().getProperties()) {
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,620,String type = ConfigHelper.fileNameToConfigType(pi.getFilename());
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,621,String name = pi.getName();
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,622,Set<PropertyDependencyInfo> set =
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,623,dependedByMap.remove(new PropertyDependencyInfo(type, name));
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,624,if (set != null) {
ambari-server/src/main/java/org/apache/ambari/server/stack/StackModule.java,625,pi.getDependedByProperties().addAll(set);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,150,synchronized(reservedHosts) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,151,if (reservedHosts.containsKey(hostName)) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,152,LogicalRequest request = reservedHosts.remove(hostName);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,153,HostOfferResponse response = request.offer(host);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,154,if (response.getAnswer() != HostOfferResponse.Answer.ACCEPTED) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,155,throw new RuntimeException("LogicalRequest declined host offer of explicitly requested host: " + hostName);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,157,processAcceptedHostOffer(getClusterTopology(request.getClusterName()), response, host);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,158,matchedToRequest = true;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,163,if (! matchedToRequest) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,164,synchronized (outstandingRequests) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,165,Iterator<LogicalRequest> outstandingRequestIterator = outstandingRequests.iterator();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,166,while (! matchedToRequest && outstandingRequestIterator.hasNext()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,167,LogicalRequest request = outstandingRequestIterator.next();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,168,HostOfferResponse hostOfferResponse = request.offer(host);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,169,switch (hostOfferResponse.getAnswer()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,170,case ACCEPTED:
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,171,matchedToRequest = true;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,172,processAcceptedHostOffer(getClusterTopology(request.getClusterName()), hostOfferResponse, host);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,173,break;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,174,case DECLINED_DONE:
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,175,outstandingRequestIterator.remove();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,176,break;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,177,case DECLINED_PREDICATE:
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,178,break;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,185,synchronized (availableHosts) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,335,outstandingRequests.add(logicalRequest);
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,21,import java.io.IOException;
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,22,import java.net.InetSocketAddress;
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,23,import java.net.Socket;
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,24,import java.net.UnknownHostException;
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,69,private int udpTimeout = 10;
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,91,if (kdcDetails.length == 1)  {
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,114,return isKdcReachableViaTCP(server, port) || isKdcReachableViaUDP(server, port);
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,124,public boolean isKdcReachableViaTCP(String server, int port) {
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,125,Socket socket = null;
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,126,try {
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,127,socket = new Socket();
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,128,socket.connect(new InetSocketAddress(server, port), config.getKdcConnectionCheckTimeout());
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,130,LOG.error("Unable to resolve Kerberos Server hostname");
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,131,return false;
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,133,LOG.error("Unable to connect to Kerberos Server");
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,134,return false;
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,136,if (socket != null) {
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,137,try {
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,138,socket.close();
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,140,LOG.debug("Error while closing socket connection to Kerberos Server. Can be ignored.");
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,145,return true;
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,154,public boolean isKdcReachableViaUDP(final String server, final int port) {
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,155,int timeoutMillis = udpTimeout * 1000;
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,159,config.setUseUdp(true);
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,162,final KdcConnection connection = getKdcUdpConnection(config);
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,172,return ! (e.getErrorCode() == ErrorType.KRB_ERR_GENERIC.getValue() &&
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,173,e.getMessage().contains("TimeOut"));
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,190,LOG.error("Interrupted while trying to communicate with KDC server over UDP");
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,194,LOG.error("An unexpected exception occurred while attempting to communicate with the KDC server over UDP", e);
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,197,LOG.error("Timeout occurred while attempting to to communicate with KDC server over UDP");
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,213,protected KdcConnection getKdcUdpConnection(KdcConfig config) {
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,223,public void setUdpTimeout(int timeoutSeconds) {
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,224,udpTimeout = (timeoutSeconds < 1) ? 1 : timeoutSeconds;
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,232,public int getUdpTimeout() {
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,233,return udpTimeout;
ambari-server/src/main/java/org/apache/ambari/server/KdcServerConnectionVerification.java,243,private int parsePort(String port) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertServiceStateListener.java,131,try {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertServiceStateListener.java,132,m_alertDispatchDao.createDefaultGroup(clusterId, serviceName);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertServiceStateListener.java,134,LOG.error("Unable to create a default alert group for {}", event.getServiceName(),
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertServiceStateListener.java,135,ambariException);
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,161,public Map<String, Collection<String>> getProjectedTopology() {
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,165,for (HostRequest hostRequest : allHostRequests) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,271,public Map<String, Collection<String>> getProjectedTopology() {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,276,Map<String, Collection<String>> requestTopology = logicalRequest.getProjectedTopology();
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,280,Map<String, Collection<String>> pendingHostComponents = topologyManager.getProjectedTopology();
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,425,if (condition.getHostnames().size() > 1
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,427,stmtStr = String.format(GET_LATEST_METRIC_SQL,
ambari-server/src/main/java/org/apache/ambari/server/controller/predicate/ComparisonPredicate.java,104,Number        parsedNumber  = numberFormat.parse((String) value, parsePosition);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,415,|| condition.getMetricNames().isEmpty()) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,417,+ "metric names not supported ");
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,426,&& condition.getMetricNames().size() > 1) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,428,METRICS_RECORD_TABLE_NAME,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,429,METRICS_RECORD_TABLE_NAME,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,430,condition.getConditionClause());
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,432,StringBuilder sb = new StringBuilder(String.format(GET_METRIC_SQL,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,434,METRICS_RECORD_TABLE_NAME));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,435,sb.append(" WHERE ");
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,436,sb.append(condition.getConditionClause());
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,437,String orderByClause = condition.getOrderByClause(false);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,438,if (orderByClause != null) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,439,sb.append(orderByClause);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,441,sb.append(" ORDER BY METRIC_NAME DESC, HOSTNAME DESC, SERVER_TIME DESC ");
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,443,stmtStr = sb.toString();
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,453,int pos = 1;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,456,for (; pos <= condition.getMetricNames().size(); pos++) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,458,LOG.debug("Setting pos: " + pos + ", value = " + condition.getMetricNames().get(pos - 1));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,460,stmt.setString(pos, condition.getMetricNames().get(pos - 1));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,479,LOG.debug("Setting pos: " + pos + ", value: " + condition.getInstanceId());
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,481,stmt.setString(pos, condition.getInstanceId());
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,488,if (stmt != null) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,489,stmt.close();
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,491,throw e;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,21,import java.util.EnumSet;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,35,import org.apache.ambari.server.actionmanager.RequestStatus;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,126,this.serverHostName = StageUtils.getHostName();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,238,for (RequestStatus status : EnumSet.of(RequestStatus.FAILED, RequestStatus.COMPLETED)) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,239,List<Long> requests = db.getRequestsByStatus(status, 100, true);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,241,if (requests != null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,242,synchronized (requestSharedDataMap) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,243,for (Long requestId : requests) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,244,requestSharedDataMap.remove(requestId);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,554,this.taskId = hostRoleCommand.getTaskId();
contrib/views/tez/src/main/java/org/apache/ambari/view/tez/ViewControllerImpl.java,60,String value = viewContext.getProperties().get(parameterName);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,81,private static final String COMPLETED_REQUESTS_SQL = "SELECT DISTINCT task.requestId FROM HostRoleCommandEntity task WHERE NOT EXISTS (SELECT task.requestId FROM HostRoleCommandEntity task WHERE task.status IN :notCompletedStatuses) ORDER BY task.requestId {0}";
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,379,Collection<HostRoleCommandEntity> commands = this.findByHostId(hostId);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,381,this.remove(cmd);
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessor.java,22,import java.sql.ResultSet;
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,20,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,45,import java.io.BufferedReader;
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,46,import java.io.FileReader;
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,47,import java.io.IOException;
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,48,import java.io.InputStreamReader;
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,49,import java.nio.charset.Charset;
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,50,import java.sql.Blob;
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,51,import java.sql.Connection;
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,52,import java.sql.DatabaseMetaData;
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,53,import java.sql.DriverManager;
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,54,import java.sql.ResultSet;
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,55,import java.sql.ResultSetMetaData;
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,56,import java.sql.SQLException;
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,57,import java.sql.Statement;
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,58,import java.sql.Types;
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,59,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,60,import java.util.Arrays;
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,61,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,62,import java.util.regex.Pattern;
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,96,this.databasePlatform = (DatabasePlatform) Class.forName(dbPlatform).newInstance();
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,97,this.dbmsHelper = loadHelper(databasePlatform);
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,544,ResultSet.CONCUR_UPDATABLE);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentStateDAO.java,27,import org.apache.ambari.server.orm.entities.HostComponentStateEntityPK;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentStateDAO.java,46,public HostComponentStateEntity findByPK(HostComponentStateEntityPK primaryKey) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentStateDAO.java,47,return entityManagerProvider.get().find(HostComponentStateEntity.class, primaryKey);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentStateDAO.java,149,public void removeByPK(HostComponentStateEntityPK primaryKey) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentStateDAO.java,150,remove(findByPK(primaryKey));
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntity.java,27,import javax.persistence.IdClass;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntity.java,195,if (componentName != null ? !componentName.equals(that.componentName) : that.componentName != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntity.java,202,if (currentState != null ? !currentState.equals(that.currentState) : that.currentState != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntity.java,205,if (upgradeState != null ? !upgradeState.equals(that.upgradeState) : that.upgradeState != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntity.java,223,int result = clusterId != null ? clusterId.intValue() : 0;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntity.java,238,public void setServiceComponentDesiredStateEntity(ServiceComponentDesiredStateEntity serviceComponentDesiredStateEntity) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,19,package org.apache.ambari.server.orm.entities;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,21,import javax.persistence.Column;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,22,import javax.persistence.Id;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,23,import java.io.Serializable;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,26,public class HostComponentStateEntityPK implements Serializable {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,27,private Long clusterId;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,31,public Long getClusterId() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,32,return clusterId;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,35,public void setClusterId(Long clusterId) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,36,this.clusterId = clusterId;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,39,private String serviceName;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,43,public String getServiceName() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,44,return serviceName;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,47,public void setServiceName(String serviceName) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,48,this.serviceName = serviceName;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,51,private Long hostId;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,55,public Long getHostId() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,56,return hostId;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,59,public void setHostId(Long hostId) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,60,this.hostId = hostId;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,63,private String componentName;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,67,public String getComponentName() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,68,return componentName;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,71,public void setComponentName(String componentName) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,72,this.componentName = componentName;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,76,public boolean equals(Object o) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,77,if (this == o) return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,78,if (o == null || getClass() != o.getClass()) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,80,HostComponentStateEntityPK that = (HostComponentStateEntityPK) o;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,82,if (clusterId != null ? !clusterId.equals(that.clusterId) : that.clusterId != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,83,if (componentName != null ? !componentName.equals(that.componentName) : that.componentName != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,84,if (hostId != null ? !hostId.equals(that.hostId) : that.hostId != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,86,return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,90,public int hashCode() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,91,int result = clusterId !=null ? clusterId.intValue() : 0;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,92,result = 31 * result + (hostId != null ? hostId.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,93,result = 31 * result + (componentName != null ? componentName.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntityPK.java,94,return result;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,50,import org.apache.ambari.server.orm.entities.HostComponentStateEntityPK;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,150,private final HostComponentStateEntityPK stateEntityPK;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,724,stateEntityPK = getHostComponentStateEntityPK(stateEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,758,stateEntityPK = getHostComponentStateEntityPK(stateEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1353,HostComponentStateEntityPK pk = new HostComponentStateEntityPK();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1354,pk.setClusterId(stateEntity.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1355,pk.setComponentName(stateEntity.getComponentName());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1356,pk.setServiceName(stateEntity.getServiceName());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1357,pk.setHostId(stateEntity.getHostId());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1359,hostComponentStateDAO.removeByPK(pk);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1573,stateEntity = hostComponentStateDAO.findByPK(stateEntityPK);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1591,private static HostComponentStateEntityPK getHostComponentStateEntityPK(HostComponentStateEntity stateEntity) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1592,HostComponentStateEntityPK pk = new HostComponentStateEntityPK();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1593,pk.setClusterId(stateEntity.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1594,pk.setComponentName(stateEntity.getComponentName());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1595,pk.setServiceName(stateEntity.getServiceName());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1596,pk.setHostId(stateEntity.getHostId());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1597,return pk;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,20,import com.google.common.collect.Maps;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,21,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,22,import com.google.inject.Injector;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,23,import com.google.inject.Provider;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,24,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,44,import javax.persistence.EntityManager;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,45,import java.sql.ResultSet;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,46,import java.sql.SQLException;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,47,import java.sql.Statement;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,48,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,49,import java.util.Arrays;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,50,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,51,import java.util.Comparator;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,52,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,53,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,54,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,55,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,56,import java.util.Map.Entry;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,57,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,237,requestStageContainer = handle(cluster, getKerberosDetails(cluster, manageIdentities), null, null, null,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,238,requestStageContainer, new CreatePrincipalsAndKeytabsHandler(true));
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,240,requestStageContainer = handle(cluster, getKerberosDetails(cluster, manageIdentities), null, null, null,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,241,requestStageContainer, new CreatePrincipalsAndKeytabsHandler(false));
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,265,hostsToForceKerberosOperations, requestStageContainer, new CreatePrincipalsAndKeytabsHandler(false));
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,334,return handleTestIdentity(cluster, getKerberosDetails(cluster, null), commandParamsStage, requestStageContainer, new CreatePrincipalsAndKeytabsHandler(false));
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2587,public CreatePrincipalsAndKeytabsHandler(boolean regenerateAllKeytabs) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2630,if (kerberosDetails.manageIdentities()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2637,Map<String, String> commandParameters = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2638,commandParameters.put(KerberosServerAction.AUTHENTICATED_USER_NAME, ambariManagementController.getAuthName());
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2639,commandParameters.put(KerberosServerAction.DEFAULT_REALM, kerberosDetails.getDefaultRealm());
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2640,if (dataDirectory != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2641,commandParameters.put(KerberosServerAction.DATA_DIRECTORY, dataDirectory.getAbsolutePath());
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2643,if (serviceComponentFilter != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2644,commandParameters.put(KerberosServerAction.SERVICE_COMPONENT_FILTER, StageUtils.getGson().toJson(serviceComponentFilter));
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2646,if (identityFilter != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2647,commandParameters.put(KerberosServerAction.IDENTITY_FILTER, StageUtils.getGson().toJson(identityFilter));
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2652,commandParameters.put(KerberosServerAction.REGENERATE_ALL, (regenerateAllKeytabs) ? "true" : "false");
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2656,addPrepareKerberosIdentitiesStage(cluster, clusterHostInfoJson, hostParamsJson, event,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2657,commandParameters, roleCommandOrder, requestStageContainer);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,21,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,27,import org.apache.ambari.server.state.SecurityState;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,30,import org.slf4j.Logger;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,31,import org.slf4j.LoggerFactory;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,33,import java.io.File;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,34,import java.io.IOException;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,45,public class PrepareEnableKerberosServerAction extends AbstractPrepareKerberosServerAction {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,46,private final static Logger LOG = LoggerFactory.getLogger(PrepareEnableKerberosServerAction.class);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,52,private KerberosHelper kerberosHelper;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,55,private KerberosConfigDataFileWriterFactory kerberosConfigDataFileWriterFactory;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,81,KerberosDescriptor kerberosDescriptor = kerberosHelper.getKerberosDescriptor(cluster);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,83,List<ServiceComponentHost> schToProcess = kerberosHelper.getServiceComponentHostsToProcess(cluster,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,84,kerberosDescriptor,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,85,getServiceComponentFilter(),
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,86,identityFilter,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,87,new KerberosHelper.Command<Boolean, ServiceComponentHost>() {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,89,public Boolean invoke(ServiceComponentHost sch) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,90,return (sch.getDesiredSecurityState() == SecurityState.SECURED_KERBEROS) && (sch.getSecurityState() != SecurityState.SECURED_KERBEROS);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,109,if (!schToProcess.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,110,actionLog.writeStdOut("Creating auth-to-local rules");
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,111,kerberosHelper.setAuthToLocalRules(kerberosDescriptor, cluster, getDefaultRealm(commandParameters),
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,112,kerberosHelper.calculateConfigurations(cluster, null, kerberosDescriptor.getProperties()),
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,113,kerberosConfigurations);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,117,actionLog.writeStdOut("Determining configuration changes");
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,128,if (!kerberosConfigurations.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,129,if(dataDirectory == null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,130,String message = "The data directory has not been set.  Generated data can not be stored.";
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,131,LOG.error(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,132,throw new AmbariException(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,135,File configFile = new File(dataDirectory, KerberosConfigDataFileWriter.DATA_FILE_NAME);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,136,KerberosConfigDataFileWriter kerberosConfDataFileWriter = null;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,138,actionLog.writeStdOut(String.format("Writing configuration changes metadata file to %s", configFile.getAbsolutePath()));
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,139,try {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,140,kerberosConfDataFileWriter = kerberosConfigDataFileWriterFactory.createKerberosConfigDataFileWriter(configFile);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,142,for (Map.Entry<String, Map<String, String>> entry : kerberosConfigurations.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,143,String type = entry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,144,Map<String, String> properties = entry.getValue();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,146,if (properties != null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,147,for (Map.Entry<String, String> configTypeEntry : properties.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,148,kerberosConfDataFileWriter.addRecord(type,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,149,configTypeEntry.getKey(),
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,150,configTypeEntry.getValue(),
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,151,KerberosConfigDataFileWriter.OPERATION_TYPE_SET);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,156,String message = String.format("Failed to write kerberos configurations file - %s", configFile.getAbsolutePath());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,157,LOG.error(message, e);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,158,actionLog.writeStdOut(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,159,actionLog.writeStdErr(message + "\n" + e.getLocalizedMessage());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,160,throw new AmbariException(message, e);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,162,if (kerberosConfDataFileWriter != null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,163,try {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,164,kerberosConfDataFileWriter.close();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,166,String message = "Failed to close the kerberos configurations file writer";
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,167,LOG.warn(message, e);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,168,actionLog.writeStdOut(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,169,actionLog.writeStdErr(message + "\n" + e.getLocalizedMessage());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,74,KerberosDescriptor kerberosDescriptor = kerberosHelper.getKerberosDescriptor(cluster);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,76,List<ServiceComponentHost> schToProcess = kerberosHelper.getServiceComponentHostsToProcess(cluster,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,77,kerberosDescriptor,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,78,getServiceComponentFilter(),
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,79,identityFilter,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,80,new KerberosHelper.Command<Boolean, ServiceComponentHost>() {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,82,public Boolean invoke(ServiceComponentHost sch) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,83,return true;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,107,protected CommandReport processIdentity(Map<String, String> identityRecord, String evaluatedPrincipal, KerberosOperationHandler operationHandler, Map<String, String> kerberosConfiguration, Map<String, Object> requestSharedDataContext) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/UpdateKerberosConfigsServerAction.java,123,String configNote = cluster.getSecurityType() == SecurityType.KERBEROS
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/UpdateKerberosConfigsServerAction.java,124,? "Enabling Kerberos"
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/UpdateKerberosConfigsServerAction.java,125,: "Disabling Kerberos";
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1122,ldapServerProperties.setUserBase(properties.getProperty(LDAP_USER_BASE_KEY, LDAP_USER_BASE_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1123,ldapServerProperties.setUserObjectClass(properties.getProperty(LDAP_USER_OBJECT_CLASS_KEY, LDAP_USER_OBJECT_CLASS_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1124,ldapServerProperties.setDnAttribute(properties.getProperty(LDAP_DN_ATTRIBUTE_KEY, LDAP_DN_ATTRIBUTE_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,1138,ldapServerProperties.setReferralMethod(properties.getProperty(LDAP_REFERRAL_KEY, LDAP_REFERRAL_DEFAULT));
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,548,for (Object dto : ldapTemplate.search(baseDn, encodedFilter, searchControls, ldapUserContextMapper, processor)) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapper.java,43,private static Log LOG = LogFactory.getLog(ExecutionCommandWrapper.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1798,scHost.getServiceComponentName()).getExecutionCommand();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1428,if (cluster.getDesiredConfigByType("hbase-site") != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1467,String hostName = cluster.getHosts("HBASE", "HBASE_MASTER").iterator().next();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,321,sslConnectorTwoWay.setTruststore(keystore);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,325,sslConnectorTwoWay.setKeystoreType("PKCS12");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,326,sslConnectorTwoWay.setTruststoreType("PKCS12");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,332,contextFactoryOneWay.setTrustStore(keystore);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,336,contextFactoryOneWay.setKeyStoreType("PKCS12");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,337,contextFactoryOneWay.setTrustStoreType("PKCS12");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,439,sapiConnector.setTruststore(httpsKeystore);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,443,sapiConnector.setKeystoreType("PKCS12");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,444,sapiConnector.setTruststoreType("PKCS12");
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,90,private final static Logger LOG = LoggerFactory.getLogger(TopologyManager.class);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,507,LOG.error("An exception occurred while attempting to determine required host groups for config update " + e);
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessor.java,331,void dropPKConstraint(String tableName, String constraintName, boolean ignoreFailure) throws SQLException;
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessor.java,339,void dropPKConstraint(String tableName, String constraintName) throws SQLException;
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessor.java,348,void dropPKConstraint(String tableName, String constraintName, String columnName) throws SQLException;
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,768,public void dropPKConstraint(String tableName, String constraintName, String columnName) throws SQLException {
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,770,String query = dbmsHelper.getDropPrimaryKeyStatement(convertObjectName(tableName), constraintName);
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,778,public void dropPKConstraint(String tableName, String constraintName, boolean ignoreFailure) throws SQLException {
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,785,String query = dbmsHelper.getDropPrimaryKeyStatement(convertObjectName(tableName), constraintName);
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,793,public void dropPKConstraint(String tableName, String constraintName) throws SQLException {
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,794,dropPKConstraint(tableName, constraintName, false);
ambari-server/src/main/java/org/apache/ambari/server/orm/helpers/dbms/DbmsHelper.java,101,String getDropPrimaryKeyStatement(String tableName, String constraintName);
ambari-server/src/main/java/org/apache/ambari/server/orm/helpers/dbms/GenericDbmsHelper.java,140,public  StringBuilder writeDropPrimaryKeyStatement(StringBuilder builder, String constraintName){
ambari-server/src/main/java/org/apache/ambari/server/orm/helpers/dbms/GenericDbmsHelper.java,146,public String getDropPrimaryKeyStatement(String tableName, String constraintName){
ambari-server/src/main/java/org/apache/ambari/server/orm/helpers/dbms/GenericDbmsHelper.java,148,return writeDropPrimaryKeyStatement(builder, constraintName).toString();
ambari-server/src/main/java/org/apache/ambari/server/orm/helpers/dbms/PostgresHelper.java,77,public  StringBuilder writeDropPrimaryKeyStatement(StringBuilder builder, String constraintName){
ambari-server/src/main/java/org/apache/ambari/server/orm/helpers/dbms/PostgresHelper.java,78,return builder.append("DROP CONSTRAINT ").append(constraintName);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,417,dbAccessor.dropPKConstraint(HOSTS_TABLE, "hosts_pkey", "host_name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,492,dbAccessor.dropPKConstraint(CONFIG_GROUP_HOST_MAPPING_TABLE, "configgrouphostmapping_pkey", HOST_NAME_COL);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,493,dbAccessor.dropPKConstraint(CLUSTER_HOST_MAPPING_TABLE, "clusterhostmapping_pkey",HOST_NAME_COL);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,494,dbAccessor.dropPKConstraint(HOST_CONFIG_MAPPING_TABLE, "hostconfigmapping_pkey", HOST_NAME_COL);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,495,dbAccessor.dropPKConstraint(HOST_COMPONENT_STATE_TABLE, "hostcomponentstate_pkey", HOST_NAME_COL);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,496,dbAccessor.dropPKConstraint(HOST_COMPONENT_DESIRED_STATE_TABLE, "hostcomponentdesiredstate_pkey", HOST_NAME_COL);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,497,dbAccessor.dropPKConstraint(HOST_STATE_TABLE, "hoststate_pkey", HOST_NAME_COL);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,498,dbAccessor.dropPKConstraint(KERBEROS_PRINCIPAL_HOST_TABLE, "kerberos_principal_host_pkey", HOST_NAME_COL);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,499,dbAccessor.dropPKConstraint(SERVICE_CONFIG_HOSTS_TABLE, "serviceconfighosts_pkey", "hostname");
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,309,LOG.info(componentName + " is at " + sch.getState() + " adding more payload per agent ask");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1347,LOG.info(MessageFormat.format("Applying configuration with tag ''{0}'' to cluster ''{1}''",
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1349,request.getClusterName()));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,198,public void doUpdateForClusterCreate() throws ConfigurationTopologyException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,204,doFilterPriorToClusterUpdate(clusterConfig);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,221,clusterConfig.setProperty(type, propertyName, updater.updateForClusterCreate(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,222,propertyName, typeMap.get(propertyName), clusterProps, clusterTopology));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,231,hgConfig.setProperty(type, propertyName, updater.updateForClusterCreate(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,232,propertyName, hgTypeMap.get(propertyName), hgConfigProps, clusterTopology));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,256,setMissingConfigurations(clusterConfig);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,326,private void doFilterPriorToClusterUpdate(Configuration configuration) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2022,void setMissingConfigurations(Configuration configuration) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2026,setRetryConfiguration(configuration);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2058,ensureProperty(configuration, "core-site", String.format(proxyUserHosts, user), "*");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2059,ensureProperty(configuration, "core-site", String.format(proxyUserGroups, user), "users");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2080,private static void setRetryConfiguration(Configuration configuration) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2105,private void ensureProperty(Configuration configuration, String type, String property, String defaultValue) {
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,60,setConfigurationsOnCluster(clusterTopology, TopologyManager.INITIAL_CONFIG_TAG);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,72,configurationProcessor.doUpdateForClusterCreate();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,77,setConfigurationsOnCluster(clusterTopology, TopologyManager.TOPOLOGY_RESOLVED_TAG);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,85,public void setConfigurationsOnCluster(ClusterTopology clusterTopology, String tag)  {
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,123,setConfigurationsOnCluster(configurationRequests, tag);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,137,String tag)  {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,90,System.out.println("HostRequest: Created request for host: " +
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,123,System.out.println("HostRequest: Successfully recovered host request for host: " +
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,190,System.out.printf("Skipping component %s when creating request\n", component);
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,472,System.out.println("HostRequest.InstallHostTask: Executing INSTALL task for host: " + hostname);
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,511,System.out.println("HostRequest.StartHostTask: Executing START task for host: " + hostname);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/HostVersionOutOfSyncListener.java,181,StackId stackId = new StackId(repositoryVersion.getStackName(), repositoryVersion.getStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/HostVersionOutOfSyncListener.java,208,StackId stackId = new StackId(repositoryVersion.getStackName(), repositoryVersion.getStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentStateDAO.java,21,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentStateDAO.java,22,import com.google.inject.Provider;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentStateDAO.java,23,import com.google.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentStateDAO.java,24,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentStateDAO.java,30,import javax.persistence.EntityManager;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentStateDAO.java,31,import javax.persistence.NoResultException;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentStateDAO.java,32,import javax.persistence.TypedQuery;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentStateDAO.java,33,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentStateDAO.java,134,return entityManagerProvider.get().merge(hostComponentStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,38,public String getHostName();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,48,public void setHostName(String hostName);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,53,public Integer getCurrentPingPort();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,58,public void setCurrentPingPort(Integer currentPingPort);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,63,public void setPublicHostName(String hostName);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,68,public String getPublicHostName();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,74,public String getIPv4();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,79,public void setIPv4(String ip);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,85,public String getIPv6();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,90,public void setIPv6(String ip);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,95,public int getCpuCount();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,100,public void setCpuCount(int cpuCount);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,105,public int getPhCpuCount();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,110,public void setPhCpuCount(int phCpuCount);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,116,public long getTotalMemBytes();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,122,public void setTotalMemBytes(long totalMemBytes);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,131,public long getAvailableMemBytes();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,137,public void setAvailableMemBytes(long availableMemBytes);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,144,public String getOsArch();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,149,public void setOsArch(String osArch);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,156,public String getOsInfo();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,161,public void setOsInfo(String osInfo);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,168,public String getOsType();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,178,public String getOsFamily();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,183,public void setOsType(String osType);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,189,public List<DiskInfo> getDisksInfo();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,194,public void setDisksInfo(List<DiskInfo> disksInfo);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,199,public HostHealthStatus getHealthStatus();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,205,public RecoveryReport getRecoveryReport();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,210,public void setRecoveryReport(RecoveryReport recoveryReport);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,215,public void setHealthStatus(HostHealthStatus healthStatus);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,222,public Map<String, String> getHostAttributes();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,227,public void setHostAttributes(Map<String, String> hostAttributes);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,231,public String getRackInfo();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,236,public void setRackInfo(String rackInfo);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,243,public long getLastRegistrationTime();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,248,public void setLastRegistrationTime(long lastRegistrationTime);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,255,public long getLastHeartbeatTime();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,260,public void setLastHeartbeatTime(long lastHeartbeatTime);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,265,public void setLastAgentEnv(AgentEnv env);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,270,public AgentEnv getLastAgentEnv();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,276,public AgentVersion getAgentVersion();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,281,public void setAgentVersion(AgentVersion agentVersion);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,287,public HostState getState();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,293,public void setState(HostState state);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,299,public String getPrefix();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,305,public void setPrefix(String prefix);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,319,public long getTimeInState();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,324,public void setTimeInState(long timeInState);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,330,public String getStatus();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,335,public void setStatus(String status);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,337,public HostResponse convertToResponse();
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,357,public boolean addDesiredConfig(long clusterId, boolean selected, String user, Config config);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,363,public Map<String, DesiredConfig> getDesiredConfigs(long clusterId);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,371,public Map<String, HostConfig> getDesiredHostConfigs(Cluster cluster) throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,378,public void setMaintenanceState(long clusterId, MaintenanceState state);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,384,public MaintenanceState getMaintenanceState(long clusterId);
ambari-server/src/main/java/org/apache/ambari/server/state/Host.java,390,public List<HostVersionEntity> getAllHostVersions();
ambari-server/src/main/java/org/apache/ambari/server/state/Service.java,27,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/state/Service.java,31,public String getName();
ambari-server/src/main/java/org/apache/ambari/server/state/Service.java,33,public long getClusterId();
ambari-server/src/main/java/org/apache/ambari/server/state/Service.java,35,public Cluster getCluster();
ambari-server/src/main/java/org/apache/ambari/server/state/Service.java,40,public Map<String, ServiceComponent> getServiceComponents();
ambari-server/src/main/java/org/apache/ambari/server/state/Service.java,48,public State getDesiredState();
ambari-server/src/main/java/org/apache/ambari/server/state/Service.java,50,public void setDesiredState(State state);
ambari-server/src/main/java/org/apache/ambari/server/state/Service.java,57,public SecurityState getSecurityState();
ambari-server/src/main/java/org/apache/ambari/server/state/Service.java,68,public void setSecurityState(SecurityState securityState) throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/state/Service.java,70,public StackId getDesiredStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/state/Service.java,72,public void setDesiredStackVersion(StackId stackVersion);
ambari-server/src/main/java/org/apache/ambari/server/state/Service.java,74,public ServiceResponse convertToResponse();
ambari-server/src/main/java/org/apache/ambari/server/state/Service.java,76,public void debugDump(StringBuilder sb);
ambari-server/src/main/java/org/apache/ambari/server/state/Service.java,93,public boolean canBeRemoved();
ambari-server/src/main/java/org/apache/ambari/server/state/Service.java,95,public void deleteAllComponents() throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/state/Service.java,100,public boolean isClientOnlyService();
ambari-server/src/main/java/org/apache/ambari/server/state/Service.java,102,public void delete() throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/state/Service.java,114,public void setMaintenanceState(MaintenanceState state);
ambari-server/src/main/java/org/apache/ambari/server/state/Service.java,119,public MaintenanceState getMaintenanceState();
ambari-server/src/main/java/org/apache/ambari/server/state/Service.java,121,public enum Type {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,27,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,31,public String getName();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,33,public String getServiceName();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,35,public long getClusterId();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,37,public String getClusterName();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,39,public State getDesiredState();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,41,public void setDesiredState(State state);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,43,public StackId getDesiredStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,45,public void setDesiredStackVersion(StackId stackVersion);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,47,public Map<String, ServiceComponentHost> getServiceComponentHosts();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,52,public void addServiceComponentHosts(Map<String, ServiceComponentHost>
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,58,public ServiceComponentResponse convertToResponse();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,60,public void refresh();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,67,public void debugDump(StringBuilder sb);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,69,public boolean isClientComponent();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,71,public boolean isMasterComponent();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,73,public boolean isVersionAdvertised();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,75,public boolean canBeRemoved();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,77,public void deleteAllServiceComponentHosts() throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponent.java,85,public void delete() throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentHost.java,28,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,518,readWriteLock.writeLock().lock();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,519,try {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,520,if (isPersisted()) {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,521,serviceComponentDesiredStateDAO.merge(desiredStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,524,readWriteLock.writeLock().unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2483,Map<ServiceComponentHostEvent, String> failedEvents = new HashMap<ServiceComponentHostEvent, String>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2487,for (Entry<String, ServiceComponentHostEvent> entry : eventMap.entries()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2488,String serviceName = entry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2489,ServiceComponentHostEvent event = entry.getValue();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2490,String serviceComponentName = event.getServiceComponentName();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2495,if (StringUtils.isBlank(serviceName) || Services.AMBARI.name().equals(serviceName)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2496,continue;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2499,if (StringUtils.isBlank(serviceComponentName)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2500,continue;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2503,try {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2504,Service service = getService(serviceName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2505,ServiceComponent serviceComponent = service.getServiceComponent(serviceComponentName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2506,ServiceComponentHost serviceComponentHost = serviceComponent.getServiceComponentHost(event.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2507,serviceComponentHost.handleEvent(event);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2509,String message = String.format("ServiceComponentHost lookup exception. Service not found for Service: %s. Error: %s",
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2510,serviceName, e.getMessage());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2511,LOG.error(message);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2512,failedEvents.put(event, message);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2514,String message = String.format("ServiceComponentHost lookup exception. Service Component not found for Service: %s, Component: %s. Error: %s",
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2515,serviceName, serviceComponentName, e.getMessage());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2516,LOG.error(message);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2517,failedEvents.put(event, message);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2519,String message = String.format("ServiceComponentHost lookup exception. Service Component Host not found for Service: %s, Component: %s, Host: %s. Error: %s",
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2520,serviceName, serviceComponentName, event.getHostName(), e.getMessage());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2521,LOG.error(message);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2522,failedEvents.put(event, message);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2524,String message = String.format("ServiceComponentHost lookup exception %s", e.getMessage());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2525,LOG.error(message);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2526,failedEvents.put(event, message);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2528,LOG.error("Invalid transition ", e);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2529,if ((e.getEvent() == ServiceComponentHostEventType.HOST_SVCCOMP_START) &&
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2530,(e.getCurrentState() == State.STARTED)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2531,LOG.warn("Component request for component = "
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2532,+ serviceComponentName
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2533,+ " to start is invalid, since component is already started. Ignoring this request.");
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2536,failedEvents.put(event, String.format("Invalid transition. %s", e.getMessage()));
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2541,clusterGlobalLock.readLock().unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,708,this.unmapHostFromClusters(hostname, new HashSet<Cluster>() {{ add(cluster); }});
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,803,this.unmapHostFromClusters(hostname, clusters);
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,1128,return this.getHostName().equals(that.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,1184,readLock.lock();
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,1431,return hostVersionDAO.findByHost(this.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1056,StackEntity stackEntity = stackDAO.find(stackId.getStackName(),
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1057,stackId.getStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1221,persisted = true;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ADKerberosOperationHandler.java,169,this.createTemplate = kerberosConfiguration.get(KERBEROS_ENV_CREATE_ATTRIBUTES_TEMPLATE);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosOperationHandler.java,21,import org.apache.ambari.server.security.SecurePasswordHelper;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosOperationHandler.java,69,public final static String KERBEROS_ENV_CREATE_ATTRIBUTES_TEMPLATE = "create_attributes_template";
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,174,ShellCommandUtil.Result result = invokeKAdmin(String.format("add_principal -pw \"%s\" %s", password, principal));
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,388,StringBuilder cleanCommand = new StringBuilder();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,389,Iterator<String> iterator = command.iterator();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,391,if (iterator.hasNext()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,392,cleanCommand.append(iterator.next());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,395,while (iterator.hasNext()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,396,String part = iterator.next();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,398,cleanCommand.append(' ');
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,400,if (part.contains(" ")) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,401,cleanCommand.append('"');
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,402,cleanCommand.append(part);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,403,cleanCommand.append('"');
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,405,cleanCommand.append(part);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,408,if ("-w".equals(part)) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,410,if (iterator.hasNext()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,411,iterator.next();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,413,cleanCommand.append(" ********");
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,417,cleanCommand.toString(), result.getExitCode(), result.getStdout(), result.getStderr());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,460,public void setAdminServerHost(String adminServerHost) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,461,this.adminServerHost = adminServerHost;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,469,public String getAdminServerHost() {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,470,return adminServerHost;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,184,if (! matchedToRequest) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,186,LOG.info("TopologyManager: Queueing available host {}", hostName);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,187,availableHosts.add(host);
ambari-server/src/main/java/org/apache/ambari/server/stageplanner/RoleGraph.java,20,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/stageplanner/RoleGraph.java,21,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/stageplanner/RoleGraph.java,22,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/stageplanner/RoleGraph.java,23,import java.util.TreeMap;
ambari-server/src/main/java/org/apache/ambari/server/stageplanner/RoleGraph.java,26,import com.google.inject.Injector;
ambari-server/src/main/java/org/apache/ambari/server/stageplanner/RoleGraph.java,75,hostRoleCommand.getRoleCommand());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,601,sc.addServiceComponentHost(sch);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,602,sch.persist();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BaseProvider.java,387,private static boolean isPropertyEntryRequested(String propertyId, Set<String> requestedIds) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BaseProvider.java,406,private static boolean isPropertyCategoryRequested(String propertyId, Set<String> requestedIds) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java,203,response.getClusterName(), response.getServiceName());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java,1391,private Map<String, Object> getServiceSpecificProperties(String clusterName, String serviceName) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java,1394,Map<String, String> kerberosAttributes = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java,1395,String kdcValidationResult = "OK";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java,1396,String failureDetails = "";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java,1397,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java,1398,kerberosHelper.validateKDCCredentials(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java,1399,getManagementController().getClusters().getCluster(clusterName));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java,1402,kdcValidationResult = "INVALID_CONFIGURATION";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java,1403,failureDetails = e.getMessage();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java,1405,kdcValidationResult = "INVALID_CREDENTIALS";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java,1406,failureDetails = e.getMessage();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java,1408,kdcValidationResult = "MISSING_CREDENTIALS";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java,1409,failureDetails = e.getMessage();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java,1411,kdcValidationResult = "VALIDATION_ERROR";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java,1412,failureDetails = e.getMessage();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java,1415,kerberosAttributes.put("kdc_validation_result", kdcValidationResult);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java,1416,kerberosAttributes.put("kdc_validation_failure_details", failureDetails);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ServiceResourceProvider.java,1417,serviceSpecificProperties.put(PropertyHelper.getPropertyId(
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,92,private static final Log LOG = LogFactory.getLog(PhoenixHBaseAccessor.class);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,93,private static final TimelineMetricReadHelper TIMELINE_METRIC_READ_HELPER = new TimelineMetricReadHelper();
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,98,public static int RESULTSET_LIMIT = (int)TimeUnit.DAYS.toMinutes(1) *
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,99,METRICS_PER_MINUTE;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,101,private static TypeReference<Map<Long, Double>> metricValuesTypeRef =
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,102,new TypeReference<Map<Long, Double>>() {};
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,323,stmt = connection.prepareStatement(sb.toString());
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,324,int pos = 1;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,325,if (condition.getMetricNames() != null) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,326,for (; pos <= condition.getMetricNames().size(); pos++) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,327,if (LOG.isDebugEnabled()) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,328,LOG.debug("Setting pos: " + pos + ", value = " + condition.getMetricNames().get(pos - 1));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,330,stmt.setString(pos, condition.getMetricNames().get(pos - 1));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,333,if (condition.getHostnames() != null) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,334,for (String hostname: condition.getHostnames()) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,336,LOG.debug("Setting pos: " + pos + ", value: " + hostname);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,338,stmt.setString(pos++, hostname);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,341,if (condition.getAppId() != null) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,342,if (LOG.isDebugEnabled()) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,343,LOG.debug("Setting pos: " + pos + ", value: " + condition.getAppId());
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,345,stmt.setString(pos++, condition.getAppId());
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,347,if (condition.getInstanceId() != null) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,348,if (LOG.isDebugEnabled()) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,349,LOG.debug("Setting pos: " + pos + ", value: " + condition.getInstanceId());
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,351,stmt.setString(pos++, condition.getInstanceId());
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,353,if (condition.getStartTime() != null) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,354,if (LOG.isDebugEnabled()) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,355,LOG.debug("Setting pos: " + pos + ", value: " + condition.getStartTime());
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,357,stmt.setLong(pos++, condition.getStartTime());
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,359,if (condition.getEndTime() != null) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,360,if (LOG.isDebugEnabled()) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,361,LOG.debug("Setting pos: " + pos + ", value: " + condition.getEndTime());
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,363,stmt.setLong(pos, condition.getEndTime());
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,365,if (condition.getFetchSize() != null) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/query/PhoenixTransactSQL.java,366,stmt.setFetchSize(condition.getFetchSize());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractPropertyProvider.java,360,private static Number[][] getGangliaLikeDatapoints(TimelineMetric metric) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractPropertyProvider.java,364,return rpt.reportMetricData(metric);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractPropertyProvider.java,375,protected static Object getValue(TimelineMetric metric, boolean isTemporal) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractPropertyProvider.java,376,Number[][] dataPoints = getGangliaLikeDatapoints(metric);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractPropertyProvider.java,379,if (isTemporal) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TemporalInfoImpl.java,27,private long m_startTime;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TemporalInfoImpl.java,28,private long m_endTime;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TemporalInfoImpl.java,29,private long m_step;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricReportingAdapter.java,31,public Number[][] reportMetricData(TimelineMetric metricData) {
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricReportingAdapter.java,32,return downsamplingMethod.reportMetricData(metricData, dataTransferMethod);
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsDownsamplingMethod.java,23,public abstract Number[][] reportMetricData(TimelineMetric metricData, MetricsDataTransferMethod dataTransferMethod);
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsDownsamplingMethodFactory.java,50,public Number[][] reportMetricData(TimelineMetric metricData, MetricsDataTransferMethod dataTransferMethod) {
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsDownsamplingMethodFactory.java,55,datapointsArray[cnt][0] = dataTransferMethod.getData(metricEntry.getValue());
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsDownsamplingMethodFactory.java,56,datapointsArray[cnt][1] = metricEntry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsDownsamplingMethodFactory.java,57,cnt++;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsDownsamplingMethodFactory.java,75,public Number[][] reportMetricData(TimelineMetric metricData, MetricsDataTransferMethod dataTransferMethod) {
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsDownsamplingMethodFactory.java,76,ArrayList<Accumulo> cache = new ArrayList<Accumulo>();
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,262,populateResource(resource, metric);
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,392,private void populateResource(Resource resource, TimelineMetric metric) {
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,426,Object value = getValue(metric, temporalInfo != null);
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSReportPropertyProvider.java,210,resource.setProperty(propertyId, getValue(metric, true));
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1080,if (filterBasedConfigStaleness && r.isStaleConfig() != staleConfig) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1126,if (filterBasedConfigStaleness && r.isStaleConfig() != staleConfig) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,779,Cluster cluster = clusters.getCluster(hostRequest.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,783,if (0 != list.size()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,788,.append(".  The following roles exist: ");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,790,int i = 0;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,792,if ((i++) > 0) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,793,reason.append(", ");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,795,reason.append(sch.getServiceComponentName());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,798,throw new AmbariException(reason.toString());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestOperationLevel.java,51,public static final String OPERATION_HOST_ID = "operation_level/host_name";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestOperationLevel.java,120,this.hostName = requestInfoProperties.get(OPERATION_HOST_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,102,protected static final String HOSTS_ID = "hosts";
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RequestOperationLevelEntity.java,25,import javax.persistence.EnumType;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RequestOperationLevelEntity.java,26,import javax.persistence.Enumerated;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RequestOperationLevelEntity.java,31,import javax.persistence.ManyToOne;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1144,serviceComponent.getClusterName(), serviceComponent.getServiceName(),
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1145,serviceComponent.getName(), getHostName(), getState().toString(),
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1146,getStackVersion().getStackId(), getDesiredState().toString(),
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1147,getDesiredStackVersion().getStackId(), getComponentAdminState());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1150,r.setUpgradeState(getStateEntity().getUpgradeState());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,64,import org.apache.ambari.server.orm.entities.ClusterEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,548,List<HostEntity> hosts = new ArrayList(cluster.getHostEntities());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,546,ClusterEntity cluster = clusterDAO.findByName(clName);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,700,if ((oldConfigProperties == null) || !Maps.difference(oldConfigProperties, properties).areEqual()) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,701,createConfigType(cluster, controller, configType, properties, authenticatedUserName, serviceVersionNote);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,724,public void createConfigType(Cluster cluster,
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,725,AmbariManagementController controller, String configType,
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,726,Map<String, String> properties, String authenticatedUserName,
ambari-server/src/main/java/org/apache/ambari/server/checks/ConfigurationMergeCheck.java,63,RepositoryVersionEntity rve = repositoryVersionDaoProvider.get().findMaxByVersion(repoVersion);
ambari-server/src/main/java/org/apache/ambari/server/checks/ConfigurationMergeCheck.java,90,RepositoryVersionEntity rve = repositoryVersionDaoProvider.get().findMaxByVersion(request.getRepositoryVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,440,cluster.recalculateClusterVersionState(desiredStackId, desiredRepoVersion);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/PreUpgradeCheckResourceProvider.java,135,RepositoryVersionEntity repositoryVersionEntity = repositoryVersionDAO.findMaxByVersion(repositoryVersionId);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,466,RepositoryVersionEntity versionEntity = s_repoVersionDAO.findMaxByVersion(repoVersion);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,560,RepositoryVersionEntity targetRepositoryVersion = s_repoVersionDAO.findMaxByVersion(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,561,version);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,689,RepositoryVersionEntity targetRve = s_repoVersionDAO.findMaxByVersion(version);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/DistributeRepositoriesActionListener.java,178,cluster.recalculateClusterVersionState(
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/DistributeRepositoriesActionListener.java,179,hostVersion.getRepositoryVersion().getStackId(),
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/DistributeRepositoriesActionListener.java,180,hostVersion.getRepositoryVersion().getVersion());
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/HostVersionOutOfSyncListener.java,120,cluster.recalculateClusterVersionState(hostStackId,
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/HostVersionOutOfSyncListener.java,121,hostVersionEntity.getRepositoryVersion().getVersion());
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/HostVersionOutOfSyncListener.java,182,cluster.recalculateClusterVersionState(stackId, repositoryVersion.getVersion());
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/HostVersionOutOfSyncListener.java,209,cluster.recalculateClusterVersionState(stackId, repositoryVersion.getVersion());
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,75,StackId desiredStackId = cluster.getDesiredStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,82,String repoVersion = sch.recalculateHostVersionState();
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/StackVersionListener.java,83,cluster.recalculateClusterVersionState(desiredStackId, repoVersion);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/RepositoryVersionDAO.java,74,return findByStackAndVersion(stackId.getStackName(),
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/RepositoryVersionDAO.java,75,stackId.getStackVersion(), version);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/RepositoryVersionDAO.java,88,return findByStackAndVersion(stackEntity.getStackName(),
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/RepositoryVersionDAO.java,89,stackEntity.getStackVersion(), version);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/RepositoryVersionDAO.java,104,private RepositoryVersionEntity findByStackAndVersion(String stackName,
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/RepositoryVersionDAO.java,105,String stackVersion, String version) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/RepositoryVersionDAO.java,106,final TypedQuery<RepositoryVersionEntity> query = entityManagerProvider.get().createNamedQuery(
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/RepositoryVersionDAO.java,109,query.setParameter("stackVersion", stackVersion);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/RepositoryVersionDAO.java,121,public List<RepositoryVersionEntity> findByVersion(String version) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/RepositoryVersionDAO.java,122,final TypedQuery<RepositoryVersionEntity> query = entityManagerProvider.get().createNamedQuery("repositoryVersionByVersion", RepositoryVersionEntity.class);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/RepositoryVersionDAO.java,123,query.setParameter("version", version);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/RepositoryVersionDAO.java,124,return daoUtils.selectList(query);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/RepositoryVersionDAO.java,168,RepositoryVersionEntity existingByStackAndVersion = findByStackAndVersion(
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/RepositoryVersionDAO.java,169,stackEntity, version);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/RepositoryVersionDAO.java,171,if (existingByStackAndVersion != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/RepositoryVersionDAO.java,172,throw new AmbariException("Repository version for stack " + stackEntity
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/RepositoryVersionDAO.java,173,+ " and version " + version + " already exists");
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/RepositoryVersionDAO.java,189,public RepositoryVersionEntity findMaxByVersion(String version) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/RepositoryVersionDAO.java,190,List<RepositoryVersionEntity> list = findByVersion(version);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/RepositoryVersionDAO.java,191,if (null == list || 0 == list.size()) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/RepositoryVersionDAO.java,192,return null;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/RepositoryVersionDAO.java,194,return list.get(0);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/RepositoryVersionDAO.java,196,Collections.sort(list, new Comparator<RepositoryVersionEntity>() {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/RepositoryVersionDAO.java,198,public int compare(RepositoryVersionEntity o1, RepositoryVersionEntity o2) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/RepositoryVersionDAO.java,199,return VersionUtils.compareVersions(o1.getVersion(), o2.getVersion());
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/RepositoryVersionDAO.java,203,Collections.reverse(list);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/RepositoryVersionDAO.java,205,return list.get(0);
ambari-server/src/main/java/org/apache/ambari/server/state/Cluster.java,206,void recalculateClusterVersionState(StackId stackId, String repositoryVersion) throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentHost.java,215,public String recalculateHostVersionState() throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1238,public void recalculateClusterVersionState(StackId stackId, String repositoryVersion) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1250,getClusterName(), stackId, repositoryVersion);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1263,repositoryVersion,
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1267,getClusterName(), stackId, repositoryVersion);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1301,hostVersionDAO.findByClusterStackAndVersion(getClusterName(), stackId, repositoryVersion);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1361,transitionClusterVersion(stackId, repositoryVersion,
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1444,recalculateClusterVersionState(
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1445,clusterVersionEntity.getRepositoryVersion().getStackId(),
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1446,clusterVersionEntity.getRepositoryVersion().getVersion());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1530,public String recalculateHostVersionState() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1548,RepositoryVersionEntity repositoryVersion = repositoryVersionDAO.findByStackAndVersion(
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1549,stackId, version);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1550,if (repositoryVersion == null) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1559,return version;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,743,return true;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,285,Pattern.compile("RULE:\\s*\\[\\s*(\\d)\\s*:\\s*(.+?)(?:@(.+?))??\\s*\\]\\s*\\((.+?)\\)\\s*(.*)");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ArtifactResourceProvider.java,368,Map<String, Object> keyProperties = new HashMap<String, Object>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ArtifactResourceProvider.java,376,final ArtifactEntity entity = new ArtifactEntity();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ArtifactResourceProvider.java,377,entity.setArtifactName(String.valueOf(resource.getPropertyValue(ARTIFACT_NAME_PROPERTY)));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ArtifactResourceProvider.java,378,entity.setForeignKeys(createForeignKeyMap(keyProperties));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ArtifactResourceProvider.java,380,LOG.info("Deleting Artifact, name = {}, foreign keys = {}",
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ArtifactResourceProvider.java,381,entity.getArtifactName(), entity.getForeignKeys());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ArtifactResourceProvider.java,383,artifactDAO.remove(entity);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ArtifactEntity.java,43,query = "SELECT artifact FROM ArtifactEntity artifact " +
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ArtifactEntity.java,46,query = "SELECT artifact FROM ArtifactEntity artifact " +
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ClusterGrouping.java,131,case CONFIGURE:
ambari-server/src/main/java/org/apache/ambari/server/topology/Configuration.java,118,return new HashMap<String, Map<String, String>>(properties);
ambari-server/src/main/java/org/apache/ambari/server/topology/Configuration.java,162,Map<String, Map<String, String>> typeAttributes =
ambari-server/src/main/java/org/apache/ambari/server/topology/Configuration.java,163,new HashMap<String, Map<String, String>>(typeEntry.getValue());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,593,processConfigurations(cluster, version, direction);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/PropertyValidator.java,25,import java.net.MalformedURLException;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/PropertyValidator.java,26,import java.net.URI;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/PropertyValidator.java,27,import java.net.URISyntaxException;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/PropertyValidator.java,28,import java.net.URL;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/PropertyValidator.java,44,try {
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/PropertyValidator.java,45,new URI(webhdfsUrl);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/PropertyValidator.java,24,import org.apache.commons.validator.routines.RegexValidator;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/PropertyValidator.java,25,import org.apache.commons.validator.routines.UrlValidator;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/PropertyValidator.java,64,if (!validateHdfsURL(webhdfsUrl)) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/PropertyValidator.java,85,if (!validateHttpURL(atsUrl)) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/PropertyValidator.java,98,private boolean validateHdfsURL(String webhdfsUrl) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/PropertyValidator.java,99,String[] schemes = {"webhdfs", "hdfs", "s3", "file"};
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/PropertyValidator.java,100,return validateURL(webhdfsUrl, schemes);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/PropertyValidator.java,103,private boolean validateHttpURL(String webhdfsUrl) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/PropertyValidator.java,104,String[] schemes = {"http", "https"};
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/PropertyValidator.java,105,return validateURL(webhdfsUrl, schemes);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/PropertyValidator.java,108,private boolean validateURL(String webhdfsUrl, String[] schemes) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/PropertyValidator.java,109,RegexValidator authority = new RegexValidator(".*");
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/PropertyValidator.java,110,UrlValidator urlValidator = new UrlValidator(schemes, authority, UrlValidator.ALLOW_LOCAL_URLS);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/PropertyValidator.java,111,return urlValidator.isValid(webhdfsUrl);
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/PropertyValidator.java,24,import org.apache.commons.validator.routines.RegexValidator;
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/PropertyValidator.java,25,import org.apache.commons.validator.routines.UrlValidator;
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/PropertyValidator.java,51,if (!validateHdfsURL(webhdfsUrl)) {
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/PropertyValidator.java,78,private boolean validateHdfsURL(String webhdfsUrl) {
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/PropertyValidator.java,79,String[] schemes = {"webhdfs", "hdfs", "s3", "file"};
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/PropertyValidator.java,80,return validateURL(webhdfsUrl, schemes);
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/PropertyValidator.java,83,private boolean validateHttpURL(String webhdfsUrl) {
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/PropertyValidator.java,84,String[] schemes = {"http", "https"};
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/PropertyValidator.java,85,return validateURL(webhdfsUrl, schemes);
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/PropertyValidator.java,88,private boolean validateURL(String webhdfsUrl, String[] schemes) {
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/PropertyValidator.java,89,RegexValidator authority = new RegexValidator(".*");
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/PropertyValidator.java,90,UrlValidator urlValidator = new UrlValidator(schemes, authority, UrlValidator.ALLOW_LOCAL_URLS);
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/PropertyValidator.java,91,return urlValidator.isValid(webhdfsUrl);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/ServiceFormattedException.java,95,if(message != null) LOG.error(message);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/ServiceFormattedException.java,96,if(trace != null) LOG.error(trace);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/atsJobs/ATSRequestsDelegateImpl.java,108,InputStream responseInputStream = context.getURLStreamProvider().readFrom(atsUrl, "GET",
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,20,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,21,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,22,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,23,import java.util.Comparator;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,24,import java.util.EnumSet;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,25,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,26,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,27,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,28,import java.util.concurrent.TimeUnit;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,55,import com.google.common.cache.Cache;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,56,import com.google.common.cache.CacheBuilder;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,57,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,58,import com.google.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,59,import com.google.inject.name.Named;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,60,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,108,public ActionDBAccessorImpl(@Named("executionCommandCacheSize") long cacheLimit) {
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,627,ascOrder);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,72,requestCounter = new AtomicLong(
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionManager.java,73,db.getLastPersistedRequestIdWhenInitialized());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,202,if(heartbeat.getAgentEnv() != null && heartbeat.getAgentEnv().getHostHealth() != null) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,232,Host hostObject = clusterFsm.getHost(hostname);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,765,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,508,CalculatedStatus status = CalculatedStatus.statusFromStageSummary(summary, summary.keySet());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,376,CalculatedStatus status = CalculatedStatus.statusFromStageSummary(summary, Collections.singleton(entity.getStageId()));
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,122,HostRoleCommandEntity.class);
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,474,new HashSet<String>(groupHosts), serviceConfigs);
ambari-server/src/main/java/org/apache/ambari/server/utils/VersionUtils.java,20,import org.apache.ambari.server.bootstrap.BootStrapImpl;
ambari-server/src/main/java/org/apache/ambari/server/utils/VersionUtils.java,21,import org.apache.commons.lang.StringUtils;
ambari-server/src/main/java/org/apache/ambari/server/utils/VersionUtils.java,68,if(BootStrapImpl.DEV_VERSION.equals(version1.trim())) return 0;
ambari-server/src/main/java/org/apache/ambari/server/utils/VersionUtils.java,101,if (version1 != null && version1.equals(BootStrapImpl.DEV_VERSION)) return 0;
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1573,return checkViewVersion(view, config.getMinAmbariVersion(), serverVersion, "minimum", 1, "less than") &&
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1574,checkViewVersion(view, config.getMaxAmbariVersion(), serverVersion, "maximum", -1, "greater than");
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1596,int compVal = index == -1 ? VersionUtils.compareVersions(version, serverVersion) :
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1597,index > 0 ? VersionUtils.compareVersions(version.substring(0, index), serverVersion, index) : 0;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,66,private final int STALE_CONFIGS_CACHE_EXPIRATION_TIME = 300;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,109,Map<String, HostConfig> desiredHostConfigs = (host == null) ? null : host.getDesiredHostConfigs(cluster);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,110,return getEffectiveDesiredTags(cluster, desiredHostConfigs);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,121,Cluster cluster, Map<String, HostConfig> hostConfigOverrides) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,945,Map<String, Map<String, String>> desired = getEffectiveDesiredTags(cluster,
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,946,sch.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,1324,Map<String, DesiredConfig> clusterDesiredConfigs = (cluster == null) ? new HashMap<String, DesiredConfig>() : cluster.getDesiredConfigs();
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,1328,: clusterDesiredConfigs.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,1340,.getConfigurations().entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,1354,config.getTag());
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,908,throw new KerberosMissingAdminCredentialsException(
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,917,);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,969,throw new KerberosMissingAdminCredentialsException(
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,978,);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1186,Map<String, Service> services = cluster.getServices();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1188,if ((services != null) && !services.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1189,String clusterName = cluster.getClusterName();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1190,Map<String, Host> hosts = clusters.getHostsForCluster(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1192,if ((hosts != null) && !hosts.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1193,List<ServiceComponentHost> serviceComponentHostsToProcess = new ArrayList<ServiceComponentHost>();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1194,KerberosDescriptor kerberosDescriptor = getKerberosDescriptor(cluster);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1195,KerberosIdentityDataFileWriter kerberosIdentityDataFileWriter = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1196,Map<String, String> kerberosDescriptorProperties = kerberosDescriptor.getProperties();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1199,Set<String> hostsWithValidKerberosClient = getHostsWithValidKerberosClient(cluster);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1205,File dataDirectory = createTemporaryDirectory();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1208,File identityDataFile = new File(dataDirectory, KerberosIdentityDataFileWriter.DATA_FILE_NAME);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1211,KerberosIdentityDescriptor identity = new KerberosIdentityDescriptor(new HashMap<String, Object>() {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1213,put("principal",
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1214,new HashMap<String, Object>() {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1216,put("value", "${kerberos-env/service_check_principal_name}@${realm}");
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1217,put("type", "user");
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1220,put("keytab",
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1221,new HashMap<String, Object>() {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1223,put("file", "${keytab_dir}/kerberos.service_check.${short_date}.keytab");
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1225,put("owner", new HashMap<String, Object>() {{
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1226,put("name", "${cluster-env/smokeuser}");
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1227,put("access", "rw");
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1230,put("group", new HashMap<String, Object>() {{
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1231,put("name", "${cluster-env/user_group}");
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1232,put("access", "r");
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1235,put("cachable", "false");
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1244,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1248,for (Host host : hosts.values()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1249,String hostname = host.getHostName();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1252,List<ServiceComponentHost> serviceComponentHosts = cluster.getServiceComponentHosts(hostname);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1254,if ((serviceComponentHosts != null) && !serviceComponentHosts.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1257,Map<String, Map<String, String>> configurations = calculateConfigurations(cluster, hostname, kerberosDescriptorProperties);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1263,configurations.get("").put("short_date", new SimpleDateFormat("MMddyy").format(new Date()));
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1268,for (ServiceComponentHost sch : serviceComponentHosts) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1269,String serviceName = sch.getServiceName();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1270,String componentName = sch.getServiceComponentName();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1275,if (Service.Type.KERBEROS.name().equals(serviceName) &&
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1276,Role.KERBEROS_CLIENT.name().equals(componentName) &&
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1277,(sch.getState() == State.INSTALLED)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1278,hostsWithValidKerberosClient.add(hostname);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1280,int identitiesAdded = 0;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1283,if (kerberosIdentityDataFileWriter == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1284,kerberosIdentityDataFileWriter = kerberosIdentityDataFileWriterFactory.createKerberosIdentityDataFileWriter(identityDataFile);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1288,identitiesAdded += addIdentities(kerberosIdentityDataFileWriter, Collections.singleton(identity),
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1289,null, hostname, serviceName, componentName, null, configurations);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1291,if (identitiesAdded > 0) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1293,if (!commandParameters.containsKey("principal_name") || !commandParameters.containsKey("keytab_file")) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1294,commandParameters.put("principal_name",
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1295,variableReplacementHelper.replaceVariables(identity.getPrincipalDescriptor().getValue(), configurations));
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1296,commandParameters.put("keytab_file",
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1297,variableReplacementHelper.replaceVariables(identity.getKeytabDescriptor().getFile(), configurations));
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1300,serviceComponentHostsToProcess.add(sch);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1307,String message = String.format("Failed to write index file - %s", identityDataFile.getAbsolutePath());
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1308,LOG.error(message);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1309,throw new AmbariException(message, e);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1311,if (kerberosIdentityDataFileWriter != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1313,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1314,kerberosIdentityDataFileWriter.close();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1316,LOG.warn("Failed to close the index file writer", e);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1323,if (!serviceComponentHostsToProcess.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1324,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1325,validateKDCCredentials(kerberosDetails, cluster);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1327,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1328,FileUtils.deleteDirectory(dataDirectory);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1330,LOG.warn(String.format("The data directory (%s) was not deleted due to an error condition - {%s}",
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1331,dataDirectory.getAbsolutePath(), t.getMessage()), t);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1334,throw e;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1341,Map<String, Set<String>> clusterHostInfo = StageUtils.getClusterHostInfo(cluster);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1342,String clusterHostInfoJson = StageUtils.getGson().toJson(clusterHostInfo);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1343,Map<String, String> hostParams = customCommandExecutionHelper.createDefaultHostParams(cluster);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1344,String hostParamsJson = StageUtils.getGson().toJson(hostParams);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1345,String ambariServerHostname = StageUtils.getHostName();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1346,ServiceComponentHostServerActionEvent event = new ServiceComponentHostServerActionEvent(
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1348,ambariServerHostname, // TODO: Choose a random hostname from the cluster. All tasks for the AMBARI_SERVER service will be executed on this Ambari server
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1349,System.currentTimeMillis());
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1350,RoleCommandOrder roleCommandOrder = ambariManagementController.getRoleCommandOrder(cluster);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1353,if (requestStageContainer == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1354,requestStageContainer = new RequestStageContainer(
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1355,actionManager.getNextRequestId(),
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1356,null,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1357,requestFactory,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1358,actionManager);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1364,handler.createStages(cluster,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1365,clusterHostInfoJson, hostParamsJson, event, roleCommandOrder, kerberosDetails,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1366,dataDirectory, requestStageContainer, serviceComponentHostsToProcess,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1370,handler.addFinalizeOperationStage(cluster, clusterHostInfoJson, hostParamsJson, event,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1371,dataDirectory, roleCommandOrder, requestStageContainer);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java,113,boolean regenerateKeytabs = "true".equalsIgnoreCase(getCommandParameterValue(getCommandParameters(), REGENERATE_ALL));
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java,119,String password = principalPasswordMap.get(evaluatedPrincipal);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java,121,if (password == null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,89,String message = String.format("Destroying identity, %s", evaluatedPrincipal);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,90,LOG.info(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,91,actionLog.writeStdOut(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,93,try {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,94,operationHandler.removePrincipal(evaluatedPrincipal);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,96,message = String.format("Failed to remove identity for %s from the KDC - %s", evaluatedPrincipal, e.getMessage());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,97,LOG.warn(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,98,actionLog.writeStdErr(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,101,try {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,102,KerberosPrincipalEntity principalEntity = kerberosPrincipalDAO.find(evaluatedPrincipal);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,104,if(principalEntity != null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,105,String cachedKeytabPath = principalEntity.getCachedKeytabPath();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,107,kerberosPrincipalDAO.remove(principalEntity);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,110,if (cachedKeytabPath != null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,111,if (!new File(cachedKeytabPath).delete()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,112,LOG.debug(String.format("Failed to remove cached keytab for %s", evaluatedPrincipal));
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,117,catch (Throwable t) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,118,message = String.format("Failed to remove identity for %s from the Ambari database - %s", evaluatedPrincipal, t.getMessage());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,119,LOG.warn(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,120,actionLog.writeStdErr(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,214,invokeKAdmin(String.format("change_password -pw \"%s\" %s", password, principal));
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,216,return getKeyNumber(principal);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,374,String duplicateMessage = "Duplicate entry for Host"
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,375,+ ", hostName= " + hostname;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,378,throw new AmbariException(duplicateMessage);
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,60,public void perform(PrerequisiteCheck prerequisiteCheck, PrereqCheckRequest request) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,72,if (!service.isClientOnlyService()) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,73,Map<String, ServiceComponent> serviceComponents = service.getServiceComponents();
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,75,for (Map.Entry<String, ServiceComponent> component : serviceComponents.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,77,boolean ignoreComponent = false;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,78,boolean checkThreshold = false;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,80,ServiceComponent serviceComponent = component.getValue();
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,82,if (serviceComponent.isClientComponent()) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,83,ignoreComponent = true;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,87,if (!ignoreComponent && !serviceComponent.isMasterComponent()) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,88,ComponentInfo componentInfo = ambariMetaInfo.get().getComponent(
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,89,stackId.getStackName(), stackId.getStackVersion(),
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,90,serviceComponent.getServiceName(), serviceComponent.getName());
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,92,String cardinality = componentInfo.getCardinality();
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,94,if (null != cardinality &&
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,95,(cardinality.equals("ALL") || cardinality.matches("[1-9].*"))) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,96,checkThreshold = true;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,100,if (!serviceComponent.isVersionAdvertised()) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,101,ignoreComponent = true;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,109,if (!ignoreComponent) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,110,List<HostComponentSummary> hostComponentSummaries = HostComponentSummary.getHostComponentSummaries(service.getName(), serviceComponent.getName());
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,112,if (checkThreshold && !hostComponentSummaries.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,113,int total = hostComponentSummaries.size();
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,114,int up = 0;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,115,int down = 0;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,117,for(HostComponentSummary s : hostComponentSummaries) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,118,if ((s.getDesiredState() == State.INSTALLED || s.getDesiredState() == State.STARTED) && State.STARTED != s.getCurrentState()) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,119,down++;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,121,up++;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,125,if ((float) down/total > SLAVE_THRESHOLD) { // arbitrary
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,126,failedServiceNames.add(service.getName());
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,127,String message = MessageFormat.format("{0}: {1} out of {2} {3} are started; there should be {4,number,percent} started before upgrading.",
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,128,service.getName(), up, total, serviceComponent.getName(), SLAVE_THRESHOLD);
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,129,errorMessages.add(message);
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,132,for(HostComponentSummary s : hostComponentSummaries) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,133,if ((s.getDesiredState() == State.INSTALLED || s.getDesiredState() == State.STARTED) && State.STARTED != s.getCurrentState()) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,134,failedServiceNames.add(service.getName());
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,135,String message = MessageFormat.format("{0}: {1} (in {2} on host {3})", service.getName(), serviceComponent.getName(), s.getCurrentState(), s.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,136,errorMessages.add(message);
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,137,break;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,149,prerequisiteCheck.setFailReason("The following Service Components should be in a started state.  Please invoke a service Stop and full Start and try again. " + StringUtils.join(errorMessages, ", "));
ambari-server/src/main/java/org/apache/ambari/server/orm/models/HostComponentSummary.java,21,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/orm/models/HostComponentSummary.java,31,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/orm/models/HostComponentSummary.java,32,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/orm/models/HostComponentSummary.java,59,this.hostName = host.getHostName();
ambari-server/src/main/java/org/apache/ambari/server/orm/models/HostComponentSummary.java,67,return (this.hostName == null || this.hostName.isEmpty()) ? "" : this.hostName;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,357,if (!hosts.containsKey(hostId)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,361,return hosts.get(hostId);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1258,newHiveEnvProperties.put("hive_security_authorization", "None");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1263,updateConfigurationPropertiesForCluster(cluster, "ranger-hive-plugin-properties", new HashMap<String, String>(),
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1264,removeRangerHiveProperties, false, true);
ambari-server/src/main/java/org/apache/ambari/server/view/persistence/DataStoreImpl.java,121,protected static final int MAX_ENTITY_STRING_FIELD_LENGTH = 3200;
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,258,persist();
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,318,String reservedHostName = hostGroupEntity.
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,319,getTopologyHostInfoEntities().iterator().next().getFqdn();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/PropertyHelper.java,59,Arrays.asList("._sum", "._max", "._min", "._avg");
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDefinitionDAO.java,375,AlertDefinitionEntity entity = entityManagerProvider.get().merge(
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDefinitionDAO.java,376,alertDefinition);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,20,import java.text.MessageFormat;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,21,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,22,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,23,import java.util.concurrent.locks.Lock;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,24,import java.util.concurrent.locks.ReentrantLock;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,26,import javax.persistence.EntityManager;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,27,import javax.persistence.TypedQuery;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,28,import javax.persistence.criteria.CriteriaQuery;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,29,import javax.persistence.criteria.Order;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,30,import javax.persistence.metamodel.SingularAttribute;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,52,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,53,import com.google.inject.Provider;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,54,import com.google.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,55,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,414,AlertSummaryDTO.class.getName());
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,427,sb.toString(), AlertSummaryDTO.class);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,613,int removedItems = query.executeUpdate();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,638,int removedItems = query.executeUpdate();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,686,int removedItems = query.executeUpdate();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,296,hostLevelParams.putAll(managementController.getRcaParameters());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,356,resource.setProperty(STAGE_COMMAND_PARAMS, entity.getCommandParamsStage());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,361,resource.setProperty(STAGE_HOST_PARAMS, entity.getHostParamsStage());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,207,setResourceProperty(r, STAGE_MAPPED_IDS.get(propertyId),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,208,stage.getPropertyValue(propertyId), requestPropertyIds);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/Aggregator.java,180,if ((tezDagId.status.compareToIgnoreCase(Job.JOB_STATE_UNKNOWN) != 0) &&
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/Stack.java,480,if (typeMap.containsKey(config)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/Stack.java,481,return entry.getKey();
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/AggregatorUtils.java,48,metricCount = metricValues.values().size();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,389,commandParams.put(SERVICE_PACKAGE_FOLDER,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,390,serviceInfo.getServicePackageFolder());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,394,ClusterVersionEntity currentClusterVersion = cluster.getCurrentClusterVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,395,if (currentClusterVersion != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,396,commandParams.put(KeyNames.VERSION, currentClusterVersion.getRepositoryVersion().getVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,589,commandParams.put(SERVICE_PACKAGE_FOLDER,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,590,serviceInfo.getServicePackageFolder());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1871,ClusterVersionEntity currentClusterVersion = cluster.getCurrentClusterVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1872,if (currentClusterVersion != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1873,commandParams.put(VERSION, currentClusterVersion.getRepositoryVersion().getVersion());
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UpgradeEntity.java,52,query = "SELECT u FROM UpgradeEntity u WHERE u.clusterId = :clusterId AND u.direction = :direction ORDER BY u.upgradeId DESC"),
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,173,current.setLatestText(alert.getText());
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,174,toMerge.put(alert, current);
ambari-server/src/main/java/org/apache/ambari/server/state/AlertState.java,40,UNKNOWN
ambari-server/src/main/java/org/apache/ambari/server/alerts/StaleAlertRunnable.java,21,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/alerts/StaleAlertRunnable.java,76,private static final String STALE_ALERTS_MSG = "There are {0} stale alerts from {1} host(s): {2}";
ambari-server/src/main/java/org/apache/ambari/server/alerts/StaleAlertRunnable.java,132,Set<String> staleAlerts = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/alerts/StaleAlertRunnable.java,133,Set<String> hostsWithStaleAlerts = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/alerts/StaleAlertRunnable.java,190,StringUtils.join(staleAlerts, ", "));
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,305,if( null == clusterName ){
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,310,String ambariServiceName = Services.AMBARI.name();
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,311,if (ambariServiceName.equals(serviceName)) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,334,LOG.error("Unable to process alert {} for an invalid host named {}",
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,339,LOG.error("Unable to process alert {} for an invalid service named {}",
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,348,LOG.error(
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java,21,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java,22,import com.google.inject.Provider;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java,23,import com.google.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java,24,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java,25,import org.apache.ambari.server.orm.RequiresSession;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java,26,import org.apache.ambari.server.orm.entities.HostEntity;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java,27,import org.apache.ambari.server.orm.entities.StageEntity;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java,32,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java,33,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java,34,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java,117,public void removeByName(String hostName) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java,118,remove(findByName(hostName));
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,56,public Map<String, Cluster> getClusters();
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,62,public List<Host> getHosts();
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,80,public Host getHost(String hostname) throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,87,public boolean hostExists(String hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,95,public Host getHostById(Long hostId) throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,102,public void addHost(String hostname) throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,129,public void updateClusterName(String oldName, String newName);
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,137,public Cluster getClusterById(long id) throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,143,public void debugDump(StringBuilder sb);
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,186,public void updateHostWithClusterAndAttributes(
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,215,public boolean checkPermission(String clusterName, boolean readOnly);
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,223,public void addSessionAttributes(String name, Map<String, Object> attributes);
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,232,public Map<String, Object> getSessionAttributes(String name);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/AbstractTimelineAggregator.java,166,if (isLastCheckPointTooOld(lastCheckPointTime)) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/AbstractTimelineAggregator.java,167,LOG.warn("Last Checkpoint is too old, discarding last checkpoint. " +
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/AbstractTimelineAggregator.java,169,lastCheckPointTime = -1;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/AbstractTimelineAggregator.java,171,if (lastCheckPointTime == -1) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/AbstractTimelineAggregator.java,175,LOG.info("Saving checkpoint time on first run. " +
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/AbstractTimelineAggregator.java,185,private boolean isLastCheckPointTooOld(long checkpoint) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,105,serviceConfigTypes.put(Service.Type.MAPREDUCE, "mapred-site");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,113,componentServiceMap.put("JOBTRACKER", Service.Type.MAPREDUCE);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,114,componentServiceMap.put("TASKTRACKER", Service.Type.MAPREDUCE);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,126,initPropMap = new HashMap<String, String[]>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,127,initPropMap.put("JOBTRACKER", new String[]{"mapred.job.tracker.http.address"});
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,128,initPropMap.put("TASKTRACKER", new String[]{"mapred.task.tracker.http.address"});
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,129,serviceDesiredProperties.put(Service.Type.MAPREDUCE, initPropMap);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,249,String category = getCategory(bean);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,368,private String getCategory(Map<String, Object> bean) {
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,374,name = name.replace("ForPort" + port, "");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,104,HostRoleStatus status = calculateSummaryStatus(taskStatusCounts, size, skippable);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,130,calculateSummaryStatus(calculateTaskEntityStatusCounts(stageTasks), stageTasks.size(), stage.isSkippable());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,139,HostRoleStatus status = calculateSummaryStatus(calculateStatusCounts(stageStatuses), stageStatuses.size(), false);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,166,calculateSummaryStatus(calculateTaskStatusCounts(stageTasks), stageTasks.size(), stage.isSkippable());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,175,HostRoleStatus status = calculateSummaryStatus(calculateStatusCounts(stageStatuses), stageStatuses.size(), false);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,281,HostRoleStatus stageStatus = calculateSummaryStatus(counts, total, skip);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,339,private static HostRoleStatus calculateSummaryStatus(Map<HostRoleStatus, Integer> counters,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,341,return counters.get(HostRoleStatus.PENDING) == total ? HostRoleStatus.PENDING :
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,342,counters.get(HostRoleStatus.HOLDING) > 0 ? HostRoleStatus.HOLDING :
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,343,counters.get(HostRoleStatus.HOLDING_FAILED) > 0 ? HostRoleStatus.HOLDING_FAILED :
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,344,counters.get(HostRoleStatus.HOLDING_TIMEDOUT) > 0 ? HostRoleStatus.HOLDING_TIMEDOUT :
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,345,counters.get(HostRoleStatus.FAILED) > 0 && !skippable ? HostRoleStatus.FAILED :
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,346,counters.get(HostRoleStatus.ABORTED) > 0 ? HostRoleStatus.ABORTED:
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,347,counters.get(HostRoleStatus.TIMEDOUT) > 0 && !skippable ? HostRoleStatus.TIMEDOUT :
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,348,counters.get(HostRoleStatus.COMPLETED) == total ? HostRoleStatus.COMPLETED : HostRoleStatus.IN_PROGRESS;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java,224,protected static String logException(Throwable throwable) {
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java,225,String msg = "Caught exception getting JMX metrics : " + throwable.getLocalizedMessage();
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java,227,LOG.debug(msg, throwable);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,139,StackId stackId = service.getCluster().getCurrentStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,141,stackId.getStackName(), stackId.getStackVersion(),
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,147,StackId stackId = service.getDesiredStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,148,try {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,149,ComponentInfo compInfo = ambariMetaInfo.getComponent(
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,150,stackId.getStackName(), stackId.getStackVersion(), service.getName(),
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,152,isClientComponent = compInfo.isClient();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,153,isMasterComponent = compInfo.isMaster();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,154,isVersionAdvertised = compInfo.isVersionAdvertised();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,156,throw new AmbariException("Trying to create a ServiceComponent"
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,157,+ " not recognized in stack info"
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,161,+ ", stackInfo=" + stackId.getStackId());
contrib/fast-hdfs-resource/src/main/java/org/apache/ambari/fast_hdfs_resource/Resource.java,206,dfs.copyFromLocalFile(new Path(resource.getSource()), pathHadoop);// copy
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ambari/RemoteCluster.java,80,return (String) properties.get(key);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapper.java,22,import java.util.Map.Entry;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapper.java,32,import org.apache.ambari.server.state.DesiredConfig;
ambari-server/src/main/java/org/apache/ambari/server/controller/StackServiceResponse.java,111,public String getServiceDisplayName() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,396,LOG.error("Failed to run generate client configs script for a component " + componentName, e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,397,throw new SystemException("Failed to run generate client configs script for a component " + componentName, e);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java,257,public String getVersion() {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2364,String error = "Updating configs for multiple services by a " +
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2367,LOG.error(error + ", config version not created");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,830,return propertyValue.contains("0.0.0.0");
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,45,public Blueprint getBlueprint();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,54,public Configuration getConfiguration();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,61,public Map<String, HostGroupInfo> getHostGroupInfo();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,70,public Collection<String> getHostGroupsForComponent(String component);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,80,public String getHostGroupForHost(String hostname);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,90,public Collection<String> getHostAssignmentsForComponent(String component);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,100,public void update(TopologyRequest topologyRequest) throws InvalidTopologyException;
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,111,public void addHostToTopology(String hostGroupName, String host) throws InvalidTopologyException, NoSuchHostGroupException;
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,118,public boolean isNameNodeHAEnabled();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,125,public boolean isYarnResourceManagerHAEnabled();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,132,public boolean isClusterKerberosEnabled();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,140,public RequestStatusResponse installHost(String hostName);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,148,public RequestStatusResponse startHost(String hostName);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,151,public AmbariContext getAmbariContext();
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/recommendations/RecommendationResponse.java,131,private Map<String, String> properties;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/recommendations/RecommendationResponse.java,135,private Map<String, ValueAttributesInfo> propertyAttributes;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/recommendations/RecommendationResponse.java,146,this.properties = properties;
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1717,DEFAULT_REQUEST_CONNECT_TIMEOUT,
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1718,DEFAULT_REQUEST_READ_TIMEOUT,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,267,Collection<HostRoleStatus> stageStatuses = new HashSet<HostRoleStatus>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,268,Collection<HostRoleStatus> taskStatuses = new ArrayList<HostRoleStatus>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,289,HostRoleStatus status = calculateSummaryStatus(calculateStatusCounts(stageStatuses), stageStatuses.size(), false);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,24,import com.rits.cloning.Cloner;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,61,import java.util.Iterator;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,601,private Map<String, Map<String, List<MetricDefinition>>> removeAggregateFunctions(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,605,Cloner cloner = new Cloner();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,606,filteredServiceMetrics = cloner.deepClone(serviceMetrics);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,608,for (Map<String, List<MetricDefinition>> componentMetricDef :  filteredServiceMetrics.values()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,610,for (Map.Entry<String, List<MetricDefinition>> metricDefEntry : componentMetricDef.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,612,for (MetricDefinition metricDefinition : metricDefEntry.getValue()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,614,if (metricDefinition.getType().equals("ganglia")) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,616,for (Map<String, Metric> metricByCategory : metricDefinition.getMetricsByCategory().values()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,617,Iterator<Map.Entry<String, Metric>> iterator = metricByCategory.entrySet().iterator();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,618,while (iterator.hasNext()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,619,Map.Entry<String, Metric> entry = iterator.next();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,620,String metricName = entry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,621,if (PropertyHelper.hasAggregateFunctionSuffix(metricName)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,622,iterator.remove();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,634,private List<MetricDefinition> removeAggregateFunctions(List<MetricDefinition> componentMetrics) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,636,if (componentMetrics != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,637,Cloner cloner = new Cloner();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,638,filteredComponentMetrics = cloner.deepClone(componentMetrics);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,640,for (MetricDefinition metricDefinition : filteredComponentMetrics) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,642,if (metricDefinition.getType().equals("ganglia")) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,644,for (Map<String, Metric> metricByCategory : metricDefinition.getMetricsByCategory().values()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,645,Iterator<Map.Entry<String, Metric>> iterator = metricByCategory.entrySet().iterator();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,646,while (iterator.hasNext()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,647,Map.Entry<String, Metric> entry = iterator.next();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,648,String metricName = entry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,649,if (PropertyHelper.hasAggregateFunctionSuffix(metricName)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,650,iterator.remove();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,657,return  filteredComponentMetrics;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,502,setRestartRequiredServices(s, request.getHostname());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,640,Service service, String hostName) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,651,if (serviceComponent.isMasterComponent()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,652,Map<String, ServiceComponentHost> schMap = serviceComponent.getServiceComponentHosts();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,654,if(schMap.containsKey(hostName)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,655,for (Entry<String, ServiceComponentHost> sch : schMap.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,656,ServiceComponentHost serviceComponentHost = sch.getValue();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,657,serviceComponentHost.setRestartRequired(true);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2748,setRestartRequiredServices(service, request.getHostname());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,458,LOG.error("Exception initializing jmx port maps. " + e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackDefinedPropertyProvider.java,229,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,1090,Map<String, String> createDefaultHostParams(Cluster cluster) {
contrib/fast-hdfs-resource/src/main/java/org/apache/ambari/fast_hdfs_resource/Resource.java,137,+ ", changePermissionforParents=" + changePermissionforParents + "]";
ambari-server/src/main/java/org/apache/ambari/server/api/query/JpaPredicateVisitor.java,58,private Root<T> m_root;
ambari-server/src/main/java/org/apache/ambari/server/api/query/JpaPredicateVisitor.java,63,private CriteriaQuery<T> m_query;
ambari-server/src/main/java/org/apache/ambari/server/api/query/JpaSortBuilder.java,88,path = query.from(visitor.getEntityClass()).get(
ambari-server/src/main/java/org/apache/ambari/server/api/query/JpaSortBuilder.java,89,singularAttribute.getName());
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,40,import org.apache.phoenix.exception.SQLExceptionCode;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,67,import static org.apache.hadoop.yarn.server.applicationhistoryservice.metrics.timeline.query.PhoenixTransactSQL.ALTER_SQL;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,260,stmt.executeUpdate(String.format(ALTER_SQL,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,261,METRICS_RECORD_TABLE_NAME,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,262,precisionTtl));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,263,stmt.executeUpdate(String.format(ALTER_SQL,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,264,METRICS_AGGREGATE_MINUTE_TABLE_NAME,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,265,hostMinTtl));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,266,stmt.executeUpdate(String.format(ALTER_SQL,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,267,METRICS_AGGREGATE_HOURLY_TABLE_NAME,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,268,hostHourTtl));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,269,stmt.executeUpdate(String.format(ALTER_SQL,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,270,METRICS_AGGREGATE_DAILY_TABLE_NAME,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,271,hostDailyTtl));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,272,stmt.executeUpdate(String.format(ALTER_SQL,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,273,METRICS_CLUSTER_AGGREGATE_TABLE_NAME,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,274,clusterMinTtl));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,275,stmt.executeUpdate(String.format(ALTER_SQL,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,276,METRICS_CLUSTER_AGGREGATE_HOURLY_TABLE_NAME,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,277,clusterHourTtl));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,278,stmt.executeUpdate(String.format(ALTER_SQL,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,279,METRICS_CLUSTER_AGGREGATE_DAILY_TABLE_NAME,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,280,clusterDailyTtl));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,286,if (sql.getErrorCode() ==
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,287,SQLExceptionCode.SET_UNSUPPORTED_PROP_ON_ALTER_TABLE.getErrorCode()) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,288,LOG.warn("Cannot update TTL on tables. " + sql.getMessage());
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,290,LOG.error("Error creating Metrics Schema in HBase using Phoenix.", sql);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,291,throw new MetricsSystemInitializationException(
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,295,LOG.error("Error creating Metrics Schema in HBase using Phoenix.", e);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,164,current.setMaintenanceState(MaintenanceState.OFF);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,677,if((configType != null) && (updates != null) && !updates.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,678,Config oldConfig = cluster.getDesiredConfigByType(configType);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,679,Map<String, String> oldConfigProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,680,Map<String, String> properties = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,682,if (oldConfig == null) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,683,oldConfigProperties = null;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,685,oldConfigProperties = oldConfig.getProperties();
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,686,if (oldConfigProperties != null) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,694,if(removals != null) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,695,for (String propertyName : removals) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,696,properties.remove(propertyName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2246,groupName = "deleted";
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2249,groupName = "default";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/Stack.java,171,parseConfigurations(serviceName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/Stack.java,653,private void parseConfigurations(String service) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,123,Map<String, DesiredConfig> clusterDesired = (cluster == null) ? new HashMap<String, DesiredConfig>() : cluster.getDesiredConfigs();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,319,r.lock();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,320,try {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,321,if(!hostClusterMap.containsKey(hostname)){
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,322,throw new HostNotFoundException(hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,324,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,325,LOG.debug("Looking up clusters for hostname"
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,326,+ ", hostname=" + hostname
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,327,+ ", mappedClusters=" + hostClusterMap.get(hostname).size());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,329,return Collections.unmodifiableSet(hostClusterMap.get(hostname));
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,331,r.unlock();
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,32,import org.apache.commons.io.IOUtils;
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,229,String[] env = new String[envVariables.size()];
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,230,int iVar = 0;
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,233,env[iVar++] = pair.getKey() + "=" + pair.getValue();
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,243,Process process = Runtime.getRuntime().exec(command, env);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,245,PrintWriter stdOutWriter = null;
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,246,PrintWriter stdErrWriter = null;
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,248,try {
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,249,stdOutWriter = new PrintWriter(bootStrapOutputFilePath);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,250,stdErrWriter = new PrintWriter(bootStrapErrorFilePath);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,251,IOUtils.copy(process.getInputStream(), stdOutWriter);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,252,IOUtils.copy(process.getErrorStream(), stdErrWriter);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,255,stdOutWriter.close();
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,258,stdErrWriter.close();
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,265,int exitCode = process.waitFor();
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,377,PrintWriter setupAgentLogWriter  = null;
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,380,for (String host : sshHostInfo.getHosts()) {
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,381,setupAgentDoneWriter = new PrintWriter(new File(requestIdDir, host + BSHostStatusCollector.doneFileFilter));
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,382,setupAgentLogWriter = new PrintWriter(new File(requestIdDir, host + BSHostStatusCollector.logFileFilter));
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,383,setupAgentLogWriter.print("Error while bootstrapping:\n" + errMesg);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,386,setupAgentLogWriter.close();
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,267,String json = context.getInstanceData(requestId);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,268,if (json == null) {
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,269,throw new NotFoundFormattedException("Request is old", null);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,271,DownloadRequest request = gson.fromJson(json, DownloadRequest.class);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,272,context.removeInstanceData(requestId);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,292,try {
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,293,String requestId = generateUniqueIdentifer(request);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,294,JSONObject json = new JSONObject();
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,295,json.put("requestId", requestId);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,296,return Response.ok(json).build();
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,298,throw ex;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,300,throw new ServiceFormattedException(ex.getMessage(), ex);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,315,String json = context.getInstanceData(requestId);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,316,DownloadRequest request = gson.fromJson(json, DownloadRequest.class);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,317,context.removeInstanceData(requestId);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,354,context.putInstanceData(uuid, json);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,283,throw new InvalidTopologyException("The following hosts are mapped to multiple host groups: " + duplicates);
ambari-server/src/main/java/org/apache/ambari/server/topology/HostGroupInfo.java,120,hostNames.add(hostName);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,652,hostRoleCommandCache.invalidateAll(taskIds);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,36,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,53,import org.apache.ambari.server.utils.StageUtils;
ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceConfigVersionResponse.java,24,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2075,String configGroupName = configGroup != null ? configGroup.getName() : null;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessor.java,29,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,63,final EntityTransaction txn = em.getTransaction();
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,64,txn.begin();
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,67,try {
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,68,result = methodInvocation.proceed();
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,72,if (rollbackIfNecessary(transactional, e, txn)) {
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,76,detailedLogForPersistenceError(e);
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,79,throw e;
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,82,if (null != didWeStartWork.get() && !txn.isActive()) {
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,83,didWeStartWork.remove();
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,84,unitOfWork.end();
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,90,try {
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,91,txn.commit();
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,93,detailedLogForPersistenceError(e);
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,94,throw e;
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,97,if (null != didWeStartWork.get()) {
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,98,didWeStartWork.remove();
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,99,unitOfWork.end();
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,104,return result;
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/cache/TimelineMetricsCache.java,27,import java.util.LinkedHashMap;
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/cache/TimelineMetricsCache.java,66,public void putMetric(TimelineMetric metric) {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/cache/TimelineMetricsCache.java,71,public long getTimeDiff() {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/cache/TimelineMetricsCache.java,75,public TimelineMetric getTimelineMetric() {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/cache/TimelineMetricsCache.java,82,private static final long serialVersionUID = 1L;
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/cache/TimelineMetricsCache.java,83,private boolean gotOverflow = false;
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/cache/TimelineMetricsCache.java,89,protected boolean removeEldestEntry(Map.Entry<String, TimelineMetricWrapper> eldest) {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/cache/TimelineMetricsCache.java,90,boolean overflow = size() > maxRecsPerName;
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/cache/TimelineMetricsCache.java,91,if (overflow && !gotOverflow) {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/cache/TimelineMetricsCache.java,92,LOG.warn("Metrics cache overflow at "+ size() +" for "+ eldest);
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/cache/TimelineMetricsCache.java,93,gotOverflow = true;
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/cache/TimelineMetricsCache.java,95,return overflow;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,94,private static Set<String> pkPropertyIds = new HashSet<String>() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,96,add(HOST_STACK_VERSION_CLUSTER_NAME_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,97,add(HOST_STACK_VERSION_HOST_NAME_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,98,add(HOST_STACK_VERSION_ID_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,99,add(HOST_STACK_VERSION_STACK_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,100,add(HOST_STACK_VERSION_VERSION_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,101,add(HOST_STACK_VERSION_REPO_VERSION_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,106,private static Set<String> propertyIds = new HashSet<String>() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,108,add(HOST_STACK_VERSION_ID_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,109,add(HOST_STACK_VERSION_CLUSTER_NAME_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,110,add(HOST_STACK_VERSION_HOST_NAME_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,111,add(HOST_STACK_VERSION_STACK_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,112,add(HOST_STACK_VERSION_VERSION_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,113,add(HOST_STACK_VERSION_STATE_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,114,add(HOST_STACK_VERSION_REPOSITORIES_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,115,add(HOST_STACK_VERSION_REPO_VERSION_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,163,final Set<Resource> resources = new HashSet<Resource>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,174,List<HostVersionEntity> requestedEntities = new ArrayList<HostVersionEntity>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,175,if (propertyMap.get(HOST_STACK_VERSION_ID_PROPERTY_ID) == null && propertyMaps.size() == 1) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,191,requestedEntities.add(entity);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,195,addRequestedEntities(resources, requestedEntities, requestedIds, clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,257,Set<String> requiredProperties = new HashSet<String>(){{
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,258,add(HOST_STACK_VERSION_HOST_NAME_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,259,add(HOST_STACK_VERSION_REPO_VERSION_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,260,add(HOST_STACK_VERSION_STACK_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,261,add(HOST_STACK_VERSION_VERSION_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,265,if (! propertyMap.containsKey(requiredProperty)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,266,throw new IllegalArgumentException(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,267,String.format("The required property %s is not defined",
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,268,requiredProperty));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,351,Map<String, List<RepositoryEntity>> perOsRepos = new HashMap<String, List<RepositoryEntity>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,364,List<ServiceOsSpecific.Package> packages = new ArrayList<ServiceOsSpecific.Package>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,365,Set<String> servicesOnHost = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,410,Map<String, String> hostLevelParams = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,439,StackId desiredStackId = cluster.getDesiredStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,454,requestStages.setRequestContext(String.format(caption));
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,20,import com.google.common.collect.Lists;
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,21,import com.google.inject.Inject;
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,22,import com.google.inject.Singleton;
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,23,import com.google.inject.persist.PersistModule;
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,24,import com.google.inject.persist.PersistService;
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,25,import com.google.inject.persist.UnitOfWork;
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,26,import com.google.inject.persist.finder.DynamicFinder;
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,27,import com.google.inject.persist.finder.Finder;
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,28,import com.google.inject.util.Providers;
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,29,import org.aopalliance.intercept.MethodInterceptor;
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,30,import org.aopalliance.intercept.MethodInvocation;
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,31,import org.apache.ambari.server.orm.AmbariJpaLocalTxnInterceptor;
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,32,import org.apache.ambari.server.orm.AmbariLocalSessionInterceptor;
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,33,import org.apache.ambari.server.orm.RequiresSession;
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,38,import javax.persistence.EntityManager;
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,39,import javax.persistence.EntityManagerFactory;
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,63,private MethodInterceptor sessionInterceptor;
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,72,.toProvider(Providers.<Properties>of(null));
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,81,.toProvider(JpaPersistService.EntityManagerFactoryProvider.class);
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,87,sessionInterceptor = new AmbariLocalSessionInterceptor();
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,88,requestInjection(sessionInterceptor);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,184,hostRoleCommandDAO.mergeAll(commands);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,200,hostRoleCommandDAO.mergeAll(commands);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,412,hostRoleCommandDAO.mergeAll(commandEntities);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,452,hostRoleCommandDAO.mergeAll(commands);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,661,hostRoleCommandDAO.mergeAll(tasks);
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,21,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,22,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,23,import com.google.inject.persist.UnitOfWork;
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,24,import com.google.inject.persist.jpa.AmbariJpaPersistService;
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,31,import javax.persistence.EntityManager;
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,32,import javax.persistence.EntityTransaction;
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,33,import javax.persistence.PersistenceException;
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,34,import java.lang.reflect.Method;
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,35,import java.sql.SQLException;
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,56,EntityManager em = this.emProvider.get();
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,66,Object result;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,367,public void create(HostRoleCommandEntity stageEntity) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,368,entityManagerProvider.get().persist(stageEntity);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,372,public HostRoleCommandEntity merge(HostRoleCommandEntity stageEntity) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,373,HostRoleCommandEntity entity = entityManagerProvider.get().merge(stageEntity);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,389,managedList.add(entityManagerProvider.get().merge(entity));
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,395,public void remove(HostRoleCommandEntity stageEntity) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,396,entityManagerProvider.get().remove(merge(stageEntity));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,184,public static final String JDBC_IN_MEMORY_URL = "jdbc:derby:memory:myDB/ambari;create=true";
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,183,ResultSet res = metaData.getTables(null, null, convertObjectName(tableName), new String[]{"TABLE"});
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,188,return res.getString("TABLE_NAME") != null && res.getString("TABLE_NAME").equalsIgnoreCase(tableName);
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,232,ResultSet rs = metaData.getColumns(null, null, convertObjectName(tableName), convertObjectName(columnName));
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,237,return rs.getString("COLUMN_NAME") != null && rs.getString("COLUMN_NAME").equalsIgnoreCase(columnName);
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,244,return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,253,ResultSet rs = metaData.getColumns(null, null, convertObjectName(tableName), null);
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,258,if (rs.getString("COLUMN_NAME") != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,259,columnsList.remove(rs.getString("COLUMN_NAME").toUpperCase());
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,274,ResultSet rs = metaData.getImportedKeys(null, null, convertObjectName(tableName));
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,305,ResultSet rs = metaData.getCrossReference(null, null, convertObjectName(referenceTableName),
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,306,null, null, convertObjectName(tableName));
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,828,ResultSet rs = getDatabaseMetaData().getPrimaryKeys(null, null, convertObjectName(tableName));
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,968,ResultSet rs = getDatabaseMetaData().getIndexInfo(null, null, convertObjectName(tableName), unique, false);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,94,expireAfterWrite(STALE_CONFIGS_CACHE_EXPIRATION_TIME, TimeUnit.SECONDS).build();
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,52,for (AbstractCheckDescriptor checkDescriptor : checksRegistry) {
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,53,final PrerequisiteCheck prerequisiteCheck = new PrerequisiteCheck(
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,54,checkDescriptor.getDescription(), clusterName);
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,57,if (!checkDescriptor.isApplicable(request)) {
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,58,continue;
ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceComponentHostResponse.java,46,String componentName, String hostname,
ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceComponentResponse.java,51,int installedCount) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java,166,setResourceProperty(resource, COMPONENT_STATE_PROPERTY_ID,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java,167,response.getDesiredState(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,402,getTotalCount(), getStartedCount(), getInstalledCount());
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,93,result = Response.ok(new BoolResult(false, "Can't move '" + request.src + "' to '" + request.dst + "'")).status(422);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,120,result = Response.ok(new BoolResult(false, "Can't chmod '" + request.path + "'")).status(422);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,139,public Response copy(final SrcDstFileRequest request,
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,144,try {
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,145,api.copy(request.src, request.dst);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,147,result = Response.ok(getApi(context).fileStatusToJSON(api
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,148,.getFileStatus(request.dst)));
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,150,result = Response.ok(new BoolResult(false, "Can't copy '" + request.src + "' to '" + request.dst + "'")).
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,151,status(422);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,155,throw ex;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,176,result = Response.ok(new BoolResult(false, "Can't create dir '" + request.path + "'")).status(422);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,197,return Response.ok(new BoolResult(true)).build();
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,214,public Response moveToTrash(RemoveRequest request) {
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,221,if (!api.exists(trash)) {
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,222,if (!api.mkdir(trash)) {
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,223,result = Response.ok(new BoolResult(false, "Trash dir does not exists. Can't create dir for trash '" + trash + "'")).status(422);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,224,return result.build();
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,228,String trashFilePath = api.getTrashDirPath(request.path);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,230,if (api.rename(request.path, trashFilePath)) {
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,231,result = Response.ok(getApi(context).fileStatusToJSON(api
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,232,.getFileStatus(trashFilePath)));
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,234,result = Response.ok(new BoolResult(false, "Can't move file to '" + trashFilePath + "'")).status(422);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,238,throw ex;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,253,public Response remove(RemoveRequest request, @Context HttpHeaders headers,
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,258,if (api.delete(request.path, request.recursive)) {
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,259,result = Response.ok(new BoolResult(true)).status(204);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,261,result = Response.ok(new BoolResult(false, "Can't remove '" + request.path + "'")).status(422);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,265,throw ex;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,307,public static class RemoveRequest {
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,309,public String path;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,310,public boolean recursive;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/HdfsService.java,56,public static class BoolResult{
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/HdfsService.java,59,public BoolResult(boolean success){
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/HdfsService.java,63,public BoolResult(boolean success, String message){
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/HdfsService.java,64,this.success = success;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/HelpService.java,112,return Response.ok(new BoolResult(api.trashEnabled())).build();
ambari-server/src/main/java/org/apache/ambari/server/api/services/ActiveWidgetLayoutService.java,20,import com.sun.jersey.core.util.Base64;
ambari-server/src/main/java/org/apache/ambari/server/api/services/ActiveWidgetLayoutService.java,24,import javax.ws.rs.DELETE;
ambari-server/src/main/java/org/apache/ambari/server/api/services/ActiveWidgetLayoutService.java,26,import javax.ws.rs.POST;
ambari-server/src/main/java/org/apache/ambari/server/api/services/ActiveWidgetLayoutService.java,28,import javax.ws.rs.Path;
ambari-server/src/main/java/org/apache/ambari/server/api/services/ActiveWidgetLayoutService.java,29,import javax.ws.rs.PathParam;
ambari-server/src/main/java/org/apache/ambari/server/api/services/ActiveWidgetLayoutService.java,35,import java.nio.charset.Charset;
ambari-server/src/main/java/org/apache/ambari/server/api/services/ActiveWidgetLayoutService.java,76,mapIds.put(Resource.Type.User, userName);
ambari-server/src/main/java/org/apache/ambari/server/api/services/UserPrivilegeService.java,75,mapIds.put(Resource.Type.User, userName);
ambari-server/src/main/java/org/apache/ambari/server/api/services/UserService.java,160,Collections.singletonMap(Resource.Type.User, userName));
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,138,private ActionMetadata actionMetadata;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,141,private Gson gson;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,147,private HostDAO hostDAO;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,156,private AlertEventPublisher alertEventPublisher;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,159,private AmbariEventPublisher ambariEventPublisher;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,162,private VersionEventPublisher versionEventPublisher;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,169,private KerberosPrincipalHostDAO kerberosPrincipalHostDAO;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,274,processCommandReports(heartbeat, hostname, clusterFsm, now);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,277,processStatusReports(heartbeat, hostname, clusterFsm);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,281,processHostStatus(heartbeat, hostname);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,284,processAlerts(heartbeat, hostname);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,305,protected void processAlerts(HeartBeat heartbeat, String hostname) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,307,if (null == hostname || null == heartbeat) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,308,return;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,311,if (null != heartbeat.getAlerts()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,312,AlertEvent event = new AlertReceivedEvent(heartbeat.getAlerts());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,313,for (Alert alert : event.getAlerts()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,314,if (alert.getHostName() == null) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,315,alert.setHostName(hostname);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,318,alertEventPublisher.publish(event);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,329,protected void processHostStatus(HeartBeat heartbeat, String hostname) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,331,Host host = clusterFsm.getHost(hostname);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,332,HealthStatus healthStatus = host.getHealthStatus().getHealthStatus();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,334,if (!healthStatus.equals(HostHealthStatus.HealthStatus.UNKNOWN)) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,336,List<ComponentStatus> componentStatuses = heartbeat.getComponentStatus();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,339,boolean calculateHostStatus = false;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,340,String clusterName = null;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,341,if (componentStatuses.size() > 0) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,342,calculateHostStatus = true;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,343,for (ComponentStatus componentStatus : componentStatuses) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,344,clusterName = componentStatus.getClusterName();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,345,break;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,349,if (!calculateHostStatus) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,350,List<CommandReport> reports = heartbeat.getReports();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,351,for (CommandReport report : reports) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,352,if (RoleCommand.ACTIONEXECUTE.toString().equals(report.getRoleCommand())) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,353,continue;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,356,String service = report.getServiceName();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,357,if (actionMetadata.getActions(service.toLowerCase()).contains(report.getRole())) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,358,continue;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,360,if (report.getStatus().equals("COMPLETED")) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,361,calculateHostStatus = true;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,362,clusterName = report.getClusterName();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,363,break;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,368,if (calculateHostStatus) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,370,int masterCount = 0;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,371,int mastersRunning = 0;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,372,int slaveCount = 0;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,373,int slavesRunning = 0;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,375,StackId stackId;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,376,Cluster cluster = clusterFsm.getCluster(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,377,stackId = cluster.getDesiredStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,379,MaintenanceStateHelper psh = injector.getInstance(MaintenanceStateHelper.class);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,381,List<ServiceComponentHost> scHosts = cluster.getServiceComponentHosts(heartbeat.getHostname());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,382,for (ServiceComponentHost scHost : scHosts) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,383,ComponentInfo componentInfo =
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,384,ambariMetaInfo.getComponent(stackId.getStackName(),
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,385,stackId.getStackVersion(), scHost.getServiceName(),
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,386,scHost.getServiceComponentName());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,388,String status = scHost.getState().name();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,390,String category = componentInfo.getCategory();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,392,if (MaintenanceState.OFF == psh.getEffectiveState(scHost, host)) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,393,if (category.equals("MASTER")) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,394,++masterCount;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,395,if (status.equals("STARTED")) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,396,++mastersRunning;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,399,++slaveCount;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,400,if (status.equals("STARTED")) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,401,++slavesRunning;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,407,if (masterCount == mastersRunning && slaveCount == slavesRunning) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,408,healthStatus = HealthStatus.HEALTHY;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,410,healthStatus = HealthStatus.UNHEALTHY;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,412,healthStatus = HealthStatus.ALERT;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,415,host.setStatus(healthStatus.name());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,416,host.persist();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,420,if ((clusterFsm.getClustersForHost(host.getHostName())).size() == 0) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,421,healthStatus = HealthStatus.HEALTHY;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,422,host.setStatus(healthStatus.name());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,423,host.persist();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,428,protected void processCommandReports(
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,430,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,431,List<CommandReport> reports = heartbeat.getReports();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,434,List<Long> taskIds = new ArrayList<Long>();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,435,for (CommandReport report : reports) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,436,taskIds.add(report.getTaskId());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,438,Collection<HostRoleCommand> commands = actionManager.getTasks(taskIds);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,440,Iterator<HostRoleCommand> hostRoleCommandIterator = commands.iterator();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,441,for (CommandReport report : reports) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,443,Long clusterId = null;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,444,if (report.getClusterName() != null) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,445,try {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,446,Cluster cluster = clusterFsm.getCluster(report.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,447,clusterId = Long.valueOf(cluster.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,452,LOG.debug("Received command report: " + report);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,454,HostRoleCommand hostRoleCommand = hostRoleCommandIterator.next();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,455,HostEntity hostEntity = hostDAO.findByName(hostname);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,456,if (hostEntity == null) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,457,LOG.error("Received a command report and was unable to retrieve HostEntity for hostname = " + hostname);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,458,continue;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,462,if (RoleCommand.valueOf(report.getRoleCommand()) == RoleCommand.ACTIONEXECUTE &&
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,463,HostRoleStatus.valueOf(report.getStatus()).isCompletedState()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,464,ActionFinalReportReceivedEvent event = new ActionFinalReportReceivedEvent(
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,465,clusterId, hostname, report, report.getRole());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,466,ambariEventPublisher.publish(event);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,470,if (hostRoleCommand.getStatus() == HostRoleStatus.ABORTED) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,471,continue;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,473,if (hostRoleCommand.getStatus() == HostRoleStatus.QUEUED &&
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,474,report.getStatus().equals("IN_PROGRESS")) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,475,hostRoleCommand.setStartTime(now);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,480,if (Service.Type.KERBEROS.name().equalsIgnoreCase(report.getServiceName()) &&
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,481,Role.KERBEROS_CLIENT.name().equalsIgnoreCase(report.getRole()) &&
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,482,RoleCommand.CUSTOM_COMMAND.name().equalsIgnoreCase(report.getRoleCommand()) &&
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,483,RequestExecution.Status.COMPLETED.name().equalsIgnoreCase(report.getStatus())) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,485,String customCommand = report.getCustomCommand();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,487,boolean adding = "SET_KEYTAB".equalsIgnoreCase(customCommand);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,488,if (adding || "REMOVE_KEYTAB".equalsIgnoreCase(customCommand)) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,489,WriteKeytabsStructuredOut writeKeytabsStructuredOut;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,490,try {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,491,writeKeytabsStructuredOut = gson.fromJson(report.getStructuredOut(), WriteKeytabsStructuredOut.class);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,494,writeKeytabsStructuredOut = null;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,497,if (writeKeytabsStructuredOut != null) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,498,Map<String, String> keytabs = writeKeytabsStructuredOut.getKeytabs();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,499,if (keytabs != null) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,500,for (Map.Entry<String, String> entry : keytabs.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,501,String principal = entry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,502,if (!kerberosPrincipalHostDAO.exists(principal, hostEntity.getHostId())) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,503,if (adding) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,504,kerberosPrincipalHostDAO.create(principal, hostEntity.getHostId());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,506,kerberosPrincipalHostDAO.remove(principal, hostEntity.getHostId());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,516,if (RoleCommand.ACTIONEXECUTE.toString().equals(report.getRoleCommand()) ||
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,517,(RoleCommand.CUSTOM_COMMAND.toString().equals(report.getRoleCommand()) &&
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,518,!("RESTART".equals(report.getCustomCommand()) ||
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,521,continue;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,524,Cluster cl = clusterFsm.getCluster(report.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,525,String service = report.getServiceName();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,526,if (service == null || service.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,527,throw new AmbariException("Invalid command report, service: " + service);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,529,if (actionMetadata.getActions(service.toLowerCase()).contains(report.getRole())) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,530,LOG.debug(report.getRole() + " is an action - skip component lookup");
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,532,try {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,533,Service svc = cl.getService(service);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,534,ServiceComponent svcComp = svc.getServiceComponent(report.getRole());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,535,ServiceComponentHost scHost = svcComp.getServiceComponentHost(hostname);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,536,String schName = scHost.getServiceComponentName();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,538,if (report.getStatus().equals(HostRoleStatus.COMPLETED.toString())) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,541,if (StringUtils.isNotBlank(report.getStructuredOut())) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,542,ComponentVersionStructuredOut structuredOutput = null;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,543,try {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,544,structuredOutput = gson.fromJson(report.getStructuredOut(), ComponentVersionStructuredOut.class);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,555,handleComponentVersionReceived(cl, scHost, newVersion, true);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,559,if (scHost.getState().equals(State.UPGRADING)) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,560,scHost.setStackVersion(scHost.getDesiredStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,562,(report.getRoleCommand().equals(RoleCommand.CUSTOM_COMMAND.toString()) &&
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,563,("START".equals(report.getCustomCommand()) ||
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,566,&& !report.getConfigurationTags().isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,567,LOG.info("Updating applied config on service " + scHost.getServiceName() +
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,569,scHost.updateActualConfigs(report.getConfigurationTags());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,570,scHost.setRestartRequired(false);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,573,if ((RoleCommand.INSTALL.toString().equals(report.getRoleCommand()) ||
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,574,(RoleCommand.CUSTOM_COMMAND.toString().equals(report.getRoleCommand()) &&
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,576,scHost.updateActualConfigs(report.getConfigurationTags());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,577,scHost.setRestartRequired(false);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,579,if (RoleCommand.CUSTOM_COMMAND.toString().equals(report.getRoleCommand()) &&
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,580,!("START".equals(report.getCustomCommand()) ||
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,584,continue;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,587,if (RoleCommand.START.toString().equals(report.getRoleCommand()) ||
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,588,(RoleCommand.CUSTOM_COMMAND.toString().equals(report.getRoleCommand()) &&
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,590,scHost.handleEvent(new ServiceComponentHostStartedEvent(schName,
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,591,hostname, now));
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,592,scHost.setRestartRequired(false);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,594,(RoleCommand.CUSTOM_COMMAND.toString().equals(report.getRoleCommand()) &&
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,596,scHost.handleEvent(new ServiceComponentHostStoppedEvent(schName,
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,597,hostname, now));
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,599,scHost.handleEvent(new ServiceComponentHostOpSucceededEvent(schName,
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,600,hostname, now));
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,603,LOG.warn("Operation failed - may be retried. Service component host: "
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,604,+ schName + ", host: " + hostname + " Action id" + report.getActionId());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,605,if (actionManager.isInProgressCommand(report)) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,606,scHost.handleEvent(new ServiceComponentHostOpFailedEvent
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,607,(schName, hostname, now));
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,609,LOG.info("Received report for a command that is no longer active. " + report);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,612,scHost.handleEvent(new ServiceComponentHostOpInProgressEvent(schName,
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,613,hostname, now));
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,616,LOG.warn("Service component not found ", scnex);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,618,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,619,LOG.warn("State machine exception.", ex);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,621,LOG.warn("State machine exception. " + ex.getMessage());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,628,actionManager.processTaskResponse(hostname, reports, commands);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,631,protected void processStatusReports(HeartBeat heartbeat,
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,632,String hostname,
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,634,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,635,Set<Cluster> clusters = clusterFsm.getClustersForHost(hostname);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,636,for (Cluster cl : clusters) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,637,for (ComponentStatus status : heartbeat.componentStatus) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,638,if (status.getClusterName().equals(cl.getClusterName())) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,639,try {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,640,Service svc = cl.getService(status.getServiceName());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,642,String componentName = status.getComponentName();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,643,if (svc.getServiceComponents().containsKey(componentName)) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,644,ServiceComponent svcComp = svc.getServiceComponent(
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,645,componentName);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,646,ServiceComponentHost scHost = svcComp.getServiceComponentHost(
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,647,hostname);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,648,State prevState = scHost.getState();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,649,State liveState = State.valueOf(State.class, status.getStatus());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,654,|| prevState.equals(State.UNKNOWN)) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,655,scHost.setState(liveState); //TODO direct status set breaks state machine sometimes !!!
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,656,if (!prevState.equals(liveState)) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,657,LOG.info("State of service component " + componentName
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,660,+ " has changed from " + prevState + " to " + liveState
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,661,+ " at host " + hostname);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,665,SecurityState prevSecurityState = scHost.getSecurityState();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,666,SecurityState currentSecurityState = SecurityState.valueOf(status.getSecurityState());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,667,if((prevSecurityState != currentSecurityState)) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,668,if(prevSecurityState.isEndpoint()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,669,scHost.setSecurityState(currentSecurityState);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,670,LOG.info(String.format("Security of service component %s of service %s of cluster %s " +
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,672,componentName, status.getServiceName(), status.getClusterName(), prevSecurityState,
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,673,currentSecurityState, hostname));
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,675,else {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,676,LOG.debug(String.format("Security of service component %s of service %s of cluster %s " +
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,679,componentName, status.getServiceName(), status.getClusterName(),
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,680,prevSecurityState, currentSecurityState, hostname, prevSecurityState));
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,684,if (null != status.getStackVersion() && !status.getStackVersion().isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,685,scHost.setStackVersion(gson.fromJson(status.getStackVersion(), StackId.class));
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,688,if (null != status.getConfigTags()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,689,scHost.updateActualConfigs(status.getConfigTags());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,692,Map<String, Object> extra = status.getExtra();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,693,if (null != extra && !extra.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,694,try {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,695,if (extra.containsKey("processes")) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,697,List<Map<String, String>> list = (List<Map<String, String>>) extra.get("processes");
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,698,scHost.setProcesses(list);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,700,if (extra.containsKey("version")) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,701,String version = extra.get("version").toString();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,703,handleComponentVersionReceived(cl, scHost, version, false);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,707,LOG.error("Could not access extra JSON for " +
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,708,scHost.getServiceComponentName() + " from " +
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,709,scHost.getHostName() + ": " + status.getExtra() +
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,715,.setExecutionDetailsRequest(hostname, componentName, status.getSendExecCmdDet());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,720,LOG.warn("Received a live status update for a non-initialized"
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,721,+ " service"
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,723,+ ", serviceName=" + status.getServiceName());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,725,continue;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,727,LOG.warn("Received a live status update for a non-initialized"
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,728,+ " servicecomponent"
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,731,+ ", componentName=" + status.getComponentName());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,733,continue;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,735,LOG.warn("Received a live status update for a non-initialized"
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,736,+ " service"
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,740,+ ", hostname=" + hostname);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,742,continue;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,744,LOG.warn("Received a live status with invalid payload"
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,745,+ " service"
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,749,+ ", hostname=" + hostname
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,750,+ ", error=" + e.getMessage());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,751,continue;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,768,private void handleComponentVersionReceived(Cluster cluster, ServiceComponentHost scHost,
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,769,String newVersion, boolean alwaysPublish) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,771,boolean updated = false;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,773,if (StringUtils.isNotBlank(newVersion)) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,774,final String previousVersion = scHost.getVersion();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,775,if (!StringUtils.equals(previousVersion, newVersion)) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,776,scHost.setVersion(newVersion);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,777,scHost.setStackVersion(cluster.getDesiredStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,778,if (previousVersion != null && !previousVersion.equalsIgnoreCase(State.UNKNOWN.toString())) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,779,scHost.setUpgradeState(UpgradeState.COMPLETE);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,781,updated = true;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,785,if (updated || alwaysPublish) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,786,HostComponentVersionEvent event = new HostComponentVersionEvent(cluster, scHost);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,787,versionEventPublisher.publish(event);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,1172,private static class ComponentVersionStructuredOut {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,1174,private String version;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,1188,private static class WriteKeytabsStructuredOut {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,1190,private Map<String,String> keytabs;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,1192,public Map<String, String> getKeytabs() {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,1193,return keytabs;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,1196,public void setKeytabs(Map<String, String> keytabs) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,1197,this.keytabs = keytabs;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1402,HostVersionEntity currentVersionEntity = hostVersionDAO.findByHostAndStateCurrent(getClusterName(), host.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1141,readLock.lock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1143,ServiceComponentHostResponse r = new ServiceComponentHostResponse(
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1149,r.setActualConfigs(actualConfigs);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1152,try {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1153,r.setStaleConfig(helper.isStaleConfigs(this));
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1155,LOG.error("Could not determine stale config", e);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1158,return r;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1160,readLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1554,final HostEntity host = hostDAO.findByName(hostName);
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,79,throw new UnableToConnectException(e).setConnectUrl(connectUrl);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java,57,private static final Log LOG = LogFactory
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java,58,.getLog(ApplicationHistoryServer.class);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/loadsimulator/net/RestMetricsSender.java,68,LOG.info("http response time: " + timer.elapsedMillis() + " ms");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,613,schemaVersion.setMetainfoValue(ambariMetaInfo.getServerVersion());
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,21,import java.lang.reflect.Type;
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,39,import org.apache.ambari.server.utils.StageUtils;
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,43,import com.google.common.reflect.TypeToken;
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,76,public MasterHostResolver(ConfigHelper configHelper, Cluster cluster) {
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,77,this(configHelper, cluster, null);
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,89,public MasterHostResolver(ConfigHelper configHelper, Cluster cluster, String version) {
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,252,String state = queryJmxBeanValue(hp.host, hp.port, "Hadoop:service=NameNode,name=NameNodeStatus", "State", true, encrypted);
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,256,stateToHost.put(status, hp.host);
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,280,String value = queryJmxBeanValue(hostname, hp.port,
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,285,hostType.master = hostname;
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,289,orderedHosts.remove(hostname);
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,290,orderedHosts.add(hostname);
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,307,String value = queryJmxBeanValue(hostname, hbaseMasterInfoPort,
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,313,hostsType.master = hostname;
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,315,hostsType.secondary = hostname;
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,322,private String queryJmxBeanValue(String hostname, int port, String beanName, String attributeName,
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,323,boolean asQuery) {
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,324,return queryJmxBeanValue(hostname, port, beanName, attributeName, asQuery, false);
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,327,private String queryJmxBeanValue(String hostname, int port, String beanName, String attributeName,
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,328,boolean asQuery, boolean encrypted) {
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,330,String protocol = encrypted ? "https://" : "http://";
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,331,String endPoint = protocol + (asQuery ?
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,332,String.format("%s:%s/jmx?qry=%s", hostname, port, beanName) :
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,333,String.format("%s:%s/jmx?get=%s::%s", hostname, port, beanName, attributeName));
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,335,String response = HTTPUtils.requestURL(endPoint);
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,337,if (null == response || response.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,338,return null;
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,341,Type type = new TypeToken<Map<String, ArrayList<HashMap<String, String>>>>() {}.getType();
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,343,try {
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,344,Map<String, ArrayList<HashMap<String, String>>> jmxBeans =
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,345,StageUtils.getGson().fromJson(response, type);
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,347,return jmxBeans.get("beans").get(0).get(attributeName);
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,349,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,350,LOG.info("Could not load JMX from {}/{} from {}", beanName, attributeName, hostname, e);
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,352,LOG.info("Could not load JMX from {}/{} from {}", beanName, attributeName, hostname);
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,356,return null;
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,312,for (Group group : internalGroupsMap.values()) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/TaskWrapperBuilder.java,67,LOG.error(MessageFormat.format("Found an Execute task for {0} and {1} meant to run on a any host but could not find host to run on. Skipping this task.", service, component));
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/RangerConfigCalculation.java,127,Config config = cluster.getDesiredConfigByType("ranger-admin-site");
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1988,c.setVersion(allConfigs.get(e.getType()).get(e.getTag()).getVersion());
ambari-server/src/main/java/org/apache/ambari/server/state/stack/OsFamily.java,80,Type type = new TypeToken<Map<String, JsonOsFamilyEntry>>() {}.getType();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/OsFamily.java,82,osMap = gson.fromJson(new InputStreamReader(inputStream), type);
ambari-server/src/main/java/org/apache/ambari/server/notifications/dispatchers/AlertScriptDispatcher.java,245,String alertLabel = "\"" + definition.getLabel() + "\"";
ambari-server/src/main/java/org/apache/ambari/server/notifications/dispatchers/AlertScriptDispatcher.java,246,String alertText = "\"" + alertInfo.getAlertText() + "\"";
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,715,protected AlertInfo(AlertHistoryEntity history) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,363,if (kerberosDescriptor != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,54,public class AuthToLocalBuilder {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,66,private boolean caseInsensitiveUser;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,71,public AuthToLocalBuilder() {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,86,if (authToLocalRules != null && ! authToLocalRules.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,90,if (! r.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,94,addDefaultRealmRule(rule.getPrincipal());
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,119,if ((principal != null) && (localUsername != null) &&
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,120,!principal.isEmpty() && !localUsername.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,143,public String generate(String realm) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,144,return generate(realm, null);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,159,public String generate(String realm, ConcatenationType concatenationType) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,162,setRules.add(createDefaultRealmRule(realm));
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,212,if (realm != null && ! realm.equals(".*")) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,245,1, 1, String.format("RULE:[1:$1@$0](.*@%s)s/@.*//" + caseSensitivityRule, realm));
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,263,public AuthToLocalBuilder copy() {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,264,AuthToLocalBuilder copy = new AuthToLocalBuilder();
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,268,for(Rule rule:setRules) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,269,copy.setRules.add(rule);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,271,copy.caseInsensitiveUser = this.caseInsensitiveUser;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,273,return copy;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,330,if (! m.matches()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,339,split("\\$").length;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,342,String replacementRule = m.group(5);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,344,this.rule = String.format("RULE:[%d:%s@%s](%s)%s",
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,346,principal.toString(), replacementRule);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,348,this.rule = String.format("RULE:[%d:%s](%s)%s",
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,350,principal.toString(), replacementRule);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,411,Principal thatPrincipal = other.getPrincipal();
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,413,if (expectedComponentCount != other.getExpectedComponentCount()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,414,return rule.compareTo(other.rule);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,416,if (matchComponentCount != other.getMatchComponentCount()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,417,return other.getMatchComponentCount() - matchComponentCount;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,419,if (principal.equals(thatPrincipal)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,420,return rule.compareTo(other.rule);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,424,String thatRealm = thatPrincipal.getRealm();
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,425,if (realm == null ? thatRealm != null : ! realm.equals(thatRealm)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,426,if (realm != null && realm.equals(".*")) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,427,return 1;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,429,return -1;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,433,String component1 = principal.getComponent(1);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,434,String thatComponent1 = thatPrincipal.getComponent(1);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,435,if (component1 != null && component1.equals(".*")) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,436,return 1;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,438,return -1;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,440,return rule.compareTo(other.rule);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,548,if (this == o) return true;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,549,if (o == null || getClass() != o.getClass()) return false;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,554,principal.equals(principal1.principal) &&
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,555,!(realm != null ?
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,556,!realm.equals(principal1.realm) :
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,557,principal1.realm != null);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,596,if(value != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,599,if(!value.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,415,AuthToLocalBuilder builder = authToLocalBuilder.copy();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,438,kerberosConfiguration.put(propertyName, builder.generate(realm,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,439,AuthToLocalBuilder.ConcatenationType.translate(m.group(3))));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,449,if (condition.isGrouped()) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,450,metrics.addOrMergeTimelineMetric(metric);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,452,metrics.getMetrics().add(metric.getTimelineMetric());
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/TimelineWebServices.java,387,throw new WebApplicationException(sql,
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,261,if (clusterConfig != null) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,263,Map<String, String> props = new HashMap<String, String>(clusterConfig.getProperties());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,265,Map<String, Map<String, String>> configTags = new HashMap<String,
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,266,Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,268,for (Map.Entry<String, Map<String, String>> entry : allConfigTags.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,269,if (entry.getKey().equals(clusterConfig.getType())) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,270,configTags.put(clusterConfig.getType(), entry.getValue());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,274,Map<String, Map<String, String>> properties = configHelper
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,275,.getEffectiveConfigProperties(cluster, configTags);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,277,if (!properties.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,278,for (Map<String, String> propertyMap : properties.values()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,279,props.putAll(propertyMap);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,283,configurations.put(clusterConfig.getType(), props);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,285,Map<String, Map<String, String>> attrs = new TreeMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,286,configHelper.cloneAttributesMap(clusterConfig.getPropertiesAttributes(), attrs);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,288,Map<String, Map<String, Map<String, String>>> attributes = configHelper
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,289,.getEffectiveConfigAttributes(cluster, configTags);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,290,for (Map<String, Map<String, String>> attributesMap : attributes.values()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,291,configHelper.cloneAttributesMap(attributesMap, attrs);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,293,configurationAttributes.put(clusterConfig.getType(), attrs);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1372,private final Set<String> setOfKnownURLSchemes = Collections.singleton("thrift://");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1380,this(component, DEFAULT_SEPARATOR, false);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1390,public MultipleHostTopologyUpdater(String component, Character separator, boolean userPrefixForEachHost) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1393,this.usePrefixForEachHost = userPrefixForEachHost;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1414,if (!origValue.contains("%HOSTGROUP") &&
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1415,(!origValue.contains("localhost"))) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1421,String prefix = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1422,Collection<String> hostStrings = getHostStrings(origValue, topology);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1423,if (hostStrings.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1425,String port;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1426,for (String urlScheme : setOfKnownURLSchemes) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1427,if (origValue.startsWith(urlScheme)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1428,prefix = urlScheme;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1432,if (prefix != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1433,String valueWithoutPrefix = origValue.substring(prefix.length());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1434,port = calculatePort(valueWithoutPrefix);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1435,sb.append(prefix);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1437,port = calculatePort(origValue);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1448,String suffix = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1451,if (matcher.find()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1452,int indexOfStart = matcher.start();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1457,sb.append(prefix);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1463,indexOfEnd = matcher.end();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1472,boolean firstHost = true;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1473,for (String host : hostStrings) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1474,if (!firstHost) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1475,sb.append(separator);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1477,if (usePrefixForEachHost && (prefix != null)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1478,sb.append(prefix);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1481,firstHost = false;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1483,sb.append(host);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1487,sb.append(suffix);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1489,return sb.toString();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1740,mapOfKeysToUpdaters.put("hive.metastore.uris", new MultipleHostTopologyUpdater("HIVE_METASTORE", ',', true));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1907,multiHdfsSiteMap.put("dfs.namenode.shared.edits.dir", new MultipleHostTopologyUpdater("JOURNALNODE", ';', false));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1940,multiHiveSiteMap.put("hive.metastore.uris", new MultipleHostTopologyUpdater("HIVE_METASTORE", ',', true));
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2038,1200);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2061,1200);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2084,1200);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2107,1200);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2130,1200);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2153,1200);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2283,1200);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2336,1200);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,57,private final static Long EXECUTION_TIMEOUT_MS = 1000L * 60 * 5;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,330,: (Long.parseLong(paramsTimeout) * 1000); // Convert seconds to milliseconds
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,336,? EXECUTION_TIMEOUT_MS
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,122,initPropMap.put("DATANODE", new String[]{"dfs.datanode.http.address"});
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,185,private final Map<String, Map<String, String>> jmxPortMap =
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,186,new HashMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,401,public String getPort(String clusterName, String componentName) throws SystemException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,402,return getPort(clusterName, componentName, false);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,406,public String getPort(String clusterName, String componentName, boolean httpsEnabled) throws SystemException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,408,Map<String, String> clusterJmxPorts = jmxPortMap.get(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,413,clusterJmxPorts = new ConcurrentHashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,430,!clusterJmxPorts.containsKey(componentName)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,434,Map<String, String[]> componentPorts = new HashMap<String, String[]>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,435,String[] componentsHttpsPorts;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,437,if (httpsEnabled) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,438,componentsHttpsPorts = serviceDesiredProperties.get(service).get(componentName + "-HTTPS");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,440,componentsHttpsPorts = serviceDesiredProperties.get(service).get(componentName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,442,componentPorts.put(componentName, componentsHttpsPorts);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,446,componentPorts);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,453,clusterJmxPorts.put(entry.getKey(), portString);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,463,return clusterJmxPorts.get(componentName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,788,private Map<String, String> getDesiredConfigMap(String clusterName, String versionTag,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,789,String configType, Map<String, String[]> keys) throws NoSuchParentResourceException,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,809,if (configResources != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,810,for (Resource res : configResources) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,811,Map<String, String> evaluatedProperties = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,812,for (Entry<String, String[]> entry : keys.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,813,String propName = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,814,String value = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,816,for (String pname : entry.getValue()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,817,propName = pname;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,819,Map<String, Object> properties = res.getPropertiesMap().get(PROPERTIES_CATEGORY);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,820,if (properties != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,821,for (Map.Entry<String, Object> propertyEntry : properties.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,822,if (propertyEntry.getKey().startsWith(pname)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,823,value = (String) propertyEntry.getValue();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,824,break;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,828,if (null != value) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,833,if (value != null && value.contains("${")) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,834,if (evaluatedProperties == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,835,evaluatedProperties = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,836,Map<String, Object> properties = res.getPropertiesMap().get(PROPERTIES_CATEGORY);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,837,for (Map.Entry<String, Object> subentry : properties.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,838,String keyString = subentry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,839,Object object = subentry.getValue();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,840,String valueString;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,841,if (object != null && object instanceof String) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,842,valueString = (String) object;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,843,evaluatedProperties.put(keyString, valueString);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,844,postProcessPropertyValue(keyString, valueString, evaluatedProperties, null);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,849,value = postProcessPropertyValue(propName, value, evaluatedProperties, null);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,850,LOG.debug("PROPERTY -> key: " + propName + ", " + "value: " + value);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,852,mConfigs.put(entry.getKey(), value);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,194,String port = getPort(clusterName, componentName, httpsEnabled);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,195,if (port == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,196,LOG.warn("Unable to get JMX metrics.  No port value for " + componentName);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,197,return resource;
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,353,private String getPort(String clusterName, String componentName, boolean httpsEnabled) throws SystemException {
ambari-server/src/main/java/org/apache/ambari/server/stack/ServiceDirectory.java,218,metaInfoXml.setErrors(String.format("Unable to parse service metainfo.xml file '%s' ", f.getAbsolutePath()));
ambari-server/src/main/java/org/apache/ambari/server/stack/StackDirectory.java,325,repoFile.setErrors("Unable to parse repo file at location: " +
ambari-server/src/main/java/org/apache/ambari/server/stack/StackDirectory.java,326,repositoryFile.getAbsolutePath());
ambari-server/src/main/java/org/apache/ambari/server/stack/StackDirectory.java,359,metaInfoXml.setErrors("Unable to parse stack metainfo.xml file at location: " +
ambari-server/src/main/java/org/apache/ambari/server/stack/StackDirectory.java,360,stackMetaInfoFile.getAbsolutePath());
ambari-server/src/main/java/org/apache/ambari/server/utils/VersionUtils.java,76,int stack1Part = i < version1Parts.length ?
ambari-server/src/main/java/org/apache/ambari/server/utils/VersionUtils.java,77,Integer.parseInt(version1Parts[i]) : 0;
ambari-server/src/main/java/org/apache/ambari/server/utils/VersionUtils.java,78,int stack2Part = i < version2Parts.length ?
ambari-server/src/main/java/org/apache/ambari/server/utils/VersionUtils.java,79,Integer.parseInt(version2Parts[i]) : 0;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1556,newStormProps.put("storm.zookeeper.superACL", "sasl:{{storm_base_jaas_principal}}");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertDefinitionResourceProvider.java,225,Set<Resource> results = new HashSet<Resource>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertResourceProvider.java,147,Set<Resource> results = new HashSet<Resource>();
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricReadHelper.java,44,PhoenixHBaseAccessor.readMetricFromJSON(rs.getString("METRICS")));
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,143,private static final Pattern AUTH_TO_LOCAL_PROPERTY_SPECIFICATION_PATTERN = Pattern.compile("^(?:(.+?)/)?(.+?)(?:\\|(.+?))?$");
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,412,Matcher m = AUTH_TO_LOCAL_PROPERTY_SPECIFICATION_PATTERN.matcher(authToLocalProperty);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,354,String port = jmxHostProvider.getPort(clusterName, componentName, httpsEnabled);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,355,return port == null ? DEFAULT_JMX_PORTS.get(componentName) : port;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java,35,import java.util.concurrent.ExecutorCompletionService;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java,36,import java.util.concurrent.ExecutorService;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java,38,import java.util.concurrent.LinkedBlockingQueue;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java,58,private static final ExecutorService EXECUTOR_SERVICE = initExecutorService();
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java,59,private static final int THREAD_POOL_CORE_SIZE = 20;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java,60,private static final int THREAD_POOL_MAX_SIZE = 100;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java,94,private static ExecutorService initExecutorService() {
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java,95,LinkedBlockingQueue<Runnable> queue = new LinkedBlockingQueue<Runnable>(); // unlimited Queue
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java,98,new ThreadPoolExecutor(
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java,102,TimeUnit.MILLISECONDS,
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java,103,queue);
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java,110,public static ExecutorService getExecutorService() {
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java,111,return EXECUTOR_SERVICE;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java,124,new ExecutorCompletionService<Resource>(EXECUTOR_SERVICE);
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,518,if (!hostProvider.isCollectorHostLive(clusterName, TIMELINE_METRICS)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,525,if (!hostProvider.isCollectorComponentLive(clusterName, TIMELINE_METRICS)) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,98,Set<String> preTasksEffectiveHosts = TaskWrapperBuilder.getEffectiveHosts(preTasks);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,99,if (!preTasksEffectiveHosts.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,100,StageWrapper stage = new StageWrapper(
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,101,bucket.type,
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,102,getStageText("Preparing", ctx.getComponentDisplay(service, pc.name), preTasksEffectiveHosts),
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,103,preTasks
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,104,);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,105,m_stages.add(stage);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,126,Set<String> postTasksEffectiveHosts = TaskWrapperBuilder.getEffectiveHosts(postTasks);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,127,if (!postTasksEffectiveHosts.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,128,StageWrapper stage = new StageWrapper(
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,129,bucket.type,
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,130,getStageText("Completing", ctx.getComponentDisplay(service, pc.name), postTasksEffectiveHosts),
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,131,postTasks
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,132,);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,133,m_stages.add(stage);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,159,hosts.addAll(getHostGroupInfo().get(group).getHostNames());
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,315,StackId stackId;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,316,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,317,AmbariManagementController managementController = AmbariServer.getController();
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,318,stackId = managementController.getClusters().getCluster(clusterName).getCurrentStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,319,if (stackId != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,320,String stackName = stackId.getStackName();
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,321,String version = stackId.getStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,322,AmbariMetaInfo ambariMetaInfo = managementController.getAmbariMetaInfo();
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,323,String serviceName = ambariMetaInfo.getComponentToService(stackName,version,componentName);
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,324,String timeLineAppId = ambariMetaInfo.getComponent(stackName, version, serviceName, componentName).getTimelineAppid();
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,325,if (timeLineAppId != null){
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,326,componentName = timeLineAppId;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,330,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1827,private Map<String, Map<String, String>> getConfigurations(List<KerberosIdentityDescriptor> identityDescriptors) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,39,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,64,Map<String, Map<String, String>> kerberosConfigurations) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,80,Map<String, List<ServiceComponentHost>> hostServiceComponentHosts = new HashMap<String, List<ServiceComponentHost>>();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,81,for (ServiceComponentHost sch : schToProcess) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,82,String hostName = sch.getHostName();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,83,List<ServiceComponentHost> serviceComponentHosts = hostServiceComponentHosts.get(hostName);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,85,if (serviceComponentHosts == null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,86,serviceComponentHosts = new ArrayList<ServiceComponentHost>();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,87,hostServiceComponentHosts.put(hostName, serviceComponentHosts);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,90,serviceComponentHosts.add(sch);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,93,Map<String, String> kerberosDescriptorProperties = kerberosDescriptor.getProperties();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,94,KerberosIdentityDataFileWriter kerberosIdentityDataFileWriter = null;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,97,for (Map.Entry<String, List<ServiceComponentHost>> entry : hostServiceComponentHosts.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,98,String hostName = entry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,99,List<ServiceComponentHost> serviceComponentHosts = entry.getValue();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,103,Map<String, Map<String, String>> configurations = kerberosHelper.calculateConfigurations(cluster, hostName, kerberosDescriptorProperties);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,109,for (ServiceComponentHost sch : serviceComponentHosts) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,119,if (kerberosIdentityDataFileWriter == null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,120,actionLog.writeStdOut(String.format("Writing Kerberos identity data metadata file to %s", identityDataFile.getAbsolutePath()));
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,121,kerberosIdentityDataFileWriter = kerberosIdentityDataFileWriterFactory.createKerberosIdentityDataFileWriter(identityDataFile);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,115,processServiceComponentHosts(cluster, kerberosDescriptor, schToProcess, identityFilter, dataDirectory, kerberosConfigurations);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,107,processServiceComponentHosts(cluster, kerberosDescriptor, schToProcess, identityFilter, dataDirectory, kerberosConfigurations);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,100,processServiceComponentHosts(cluster, kerberosDescriptor, schToProcess, identityFilter, dataDirectory, kerberosConfigurations);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,859,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,901,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1232,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,1109,if (!actualTags.get(CLUSTER_DEFAULT_TAG).equals(desiredTags.get(CLUSTER_DEFAULT_TAG)) && !groupSpecificConfigs) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1093,hostVersionDAO.merge(hostVersionEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1104,hostVersionDAO.merge(currentHostVersionEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1411,hostVersionDAO.merge(hostVersionEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1420,hostVersionDAO.merge(hostVersionEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1425,hostVersionDAO.merge(hostVersionEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2775,for( ClusterConfigEntity clusterConfigToMakeSelected : clusterConfigsToMakeSelected ){
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2776,for (ClusterConfigMappingEntity configMappingEntity : configMappingEntities) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2777,String tag = configMappingEntity.getTag();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2778,String type = configMappingEntity.getType();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2781,&& clusterConfigToMakeSelected.getType().equals(type)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2782,configMappingEntity.setSelected(1);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,21,import com.google.common.reflect.TypeToken;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,22,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,23,import com.google.inject.Injector;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,85,import javax.persistence.EntityManager;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,86,import javax.persistence.TypedQuery;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,87,import javax.persistence.criteria.CriteriaBuilder;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,88,import javax.persistence.criteria.CriteriaQuery;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,89,import javax.persistence.criteria.Expression;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,90,import javax.persistence.criteria.Predicate;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,91,import javax.persistence.criteria.Root;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,92,import java.lang.reflect.Type;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,93,import java.sql.Connection;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,94,import java.sql.PreparedStatement;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,95,import java.sql.ResultSet;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,96,import java.sql.SQLException;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,97,import java.sql.Statement;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,98,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,99,import java.util.Arrays;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,100,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,101,import java.util.Date;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,102,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,103,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,104,import java.util.Iterator;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,105,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,106,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,107,import java.util.Map.Entry;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,108,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,946,if (componentName.equals("NAMENODE") || componentName.equals("RESOURCEMANAGER")) {
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,66,return configurationProcessor.getRequiredHostGroups();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1075,itemDetail = "Skipping Configuration Task";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1080,if (null != ct.summary) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1081,stageText = ct.summary;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigureTask.java,34,import org.apache.commons.lang.StringUtils;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigureTask.java,40,import com.google.gson.Gson;
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/resources/jobs/JobResourceManager.java,171,context.getProperties().get("webhdfs.url") + newSourceFilePath);
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/resources/jobs/JobResourceManager.java,186,throw new ServiceFormattedException("Can't create/copy pig script file: " + e.toString(), e);
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/resources/jobs/JobResourceManager.java,188,throw new ServiceFormattedException("Can't create/copy pig script file: " + e.toString(), e);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1802,String jobtrackerHost = getJobTrackerHost(cluster);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1803,if (!scHost.getHostName().equals(jobtrackerHost)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1804,if (configTags.get(Configuration.GLOBAL_CONFIG_TAG) != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1805,configHelper.applyCustomConfig(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1806,configurations, Configuration.GLOBAL_CONFIG_TAG,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1807,Configuration.RCA_ENABLED_PROPERTY, "false", false);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2101,String jobtrackerHost = getJobTrackerHost(cluster);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2318,if (!scHost.getHostName().equals(jobtrackerHost)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2319,if (configTags.get(Configuration.GLOBAL_CONFIG_TAG) != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2320,configHelper.applyCustomConfig(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2321,configurations, Configuration.GLOBAL_CONFIG_TAG,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2322,Configuration.RCA_ENABLED_PROPERTY, "false", false);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2507,Lock clusterWriteLock = cluster.getClusterGlobalLock().writeLock();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2509,clusterWriteLock.lock();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2510,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2511,if (changedServices != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2512,for (Entry<State, List<Service>> entry : changedServices.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2513,State newState = entry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2514,for (Service s : entry.getValue()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2516,&& newState == State.STARTED) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2517,continue;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2519,s.setDesiredState(newState);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2524,if (changedComps != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2525,for (Entry<State, List<ServiceComponent>> entry :
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2526,changedComps.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2527,State newState = entry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2528,for (ServiceComponent sc : entry.getValue()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2529,sc.setDesiredState(newState);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2534,for (Map<State, List<ServiceComponentHost>> stateScHostMap :
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2535,changedScHosts.values()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2536,for (Entry<State, List<ServiceComponentHost>> entry :
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2537,stateScHostMap.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2538,State newState = entry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2539,for (ServiceComponentHost sch : entry.getValue()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2540,sch.setDesiredState(newState);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2545,if (ignoredScHosts != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2546,for (ServiceComponentHost scHost : ignoredScHosts) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2547,scHost.setDesiredState(scHost.getState());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2551,clusterWriteLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2587,updateServiceStates(cluster, changedServices, changedComponents, changedHosts, ignoredHosts);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1024,return clusterVersionDAO.findByClusterAndStateCurrent(getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/controller/ActionExecutionContext.java,42,private boolean ignoreMaintenance = false;
ambari-server/src/main/java/org/apache/ambari/server/controller/ActionExecutionContext.java,142,return ignoreMaintenance;
ambari-server/src/main/java/org/apache/ambari/server/controller/ActionExecutionContext.java,149,ignoreMaintenance = ignore;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,114,private final static Logger LOG =
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,115,LoggerFactory.getLogger(AmbariCustomCommandExecutionHelper.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,445,Map<String, ServiceComponentHost> components =
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,447,.getServiceComponent(componentName).getServiceComponentHosts();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,448,if (components.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,457,candidateHosts = components.keySet();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,460,Map<String, ServiceComponent> components =
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,462,if (components.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,466,ServiceComponent serviceComponent = components.values().iterator().next();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,472,candidateHosts = serviceComponent.getServiceComponentHosts().keySet();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,476,Set<String> ignoredHosts = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,479,ignoredHosts.addAll(maintenanceStateHelper.filterHostsInMaintenanceState(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,480,candidateHosts, new MaintenanceStateHelper.HostPredicate() {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,484,return !maintenanceStateHelper.isOperationAllowed(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,485,cluster, actionExecutionContext.getOperationLevel(),
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,486,resourceFilter, serviceName, componentName, hostname);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,489,));
ambari-server/src/main/java/org/apache/ambari/server/controller/MaintenanceStateHelper.java,350,public static interface HostPredicate {
ambari-server/src/main/java/org/apache/ambari/server/controller/MaintenanceStateHelper.java,351,public boolean shouldHostBeRemoved(String hostname) throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,277,for (Map.Entry<String, Collection<String>> entry : requestTopology.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,278,String host = entry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,279,Collection<String> hostComponents = hostComponentMap.get(host);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,280,if (hostComponents == null) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,281,hostComponents = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,282,hostComponentMap.put(host, hostComponents);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,284,hostComponents.addAll(entry.getValue());
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,353,tmpStatus.setLog(scriptlog);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,354,tmpStatus.setStatus(stat);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,355,bsImpl.updateStatus(requestId, tmpStatus);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,356,bsImpl.reset();
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BootStrapStatus.java,57,public void setStatus(BSStat status) {
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BootStrapStatus.java,61,public BSStat getStatus() {
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BootStrapStatus.java,65,public void setHostsStatus(List<BSHostStatus> hostsStatus) {
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BootStrapStatus.java,69,public List<BSHostStatus> getHostsStatus() {
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BootStrapStatus.java,73,public void setLog(String log) {
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BootStrapStatus.java,77,public String getLog() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HttpProxyPropertyProvider.java,69,URL_TEMPLATES.put(COMPONENT_RESOURCEMANAGER, "http://%s:8088/ws/v1/cluster/info");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HttpProxyPropertyProvider.java,128,String template = getTemplate(componentName.toString(), clusterName.toString());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HttpProxyPropertyProvider.java,139,private String getTemplate(String componentName, String clusterName) throws SystemException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HttpProxyPropertyProvider.java,149,if ((yarnHttpPolicy != null && yarnHttpPolicy.equals(PROPERTY_YARN_HTTP_POLICY_VALUE_HTTPS_ONLY)) ||
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HttpProxyPropertyProvider.java,150,hadoopSslEnabled != null && hadoopSslEnabled.equals(PROPERTY_HADOOP_SSL_ENABLED_VALUE_TRUE)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,57,import org.apache.ambari.server.topology.TopologyManager;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,192,public Request getRequest(long requestId) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/render/ClusterBlueprintRenderer.java,254,for (String component : group.getComponents()) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/render/ClusterBlueprintRenderer.java,257,mapComponentProperties.put("name", component);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ExportBlueprintRequest.java,126,hostGroups.add(new HostGroupImpl(exportedHostGroup.getName(), bpName, stack, exportedHostGroup.getComponents(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,413,Predicate startPredicate = new AndPredicate(clusterAndClientPredicate, hostAndStatePredicate);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,415,LOG.info("Starting all non-client components on host: " + hostName);
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,303,public RequestStatusResponse startHost(String hostName, String clusterName) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,305,return getHostComponentResourceProvider().start(clusterName, hostName);
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintFactory.java,147,Collection<String> components = processHostGroupComponents(stack, hostGroupName, componentProps);
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintFactory.java,158,private Collection<String> processHostGroupComponents(Stack stack, String groupName, HashSet<HashMap<String, String>>  componentProps) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintFactory.java,164,Collection<String> components = new ArrayList<String>();
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintFactory.java,177,components.add(componentName);
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintImpl.java,151,if (group.getComponents().contains(component)) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintImpl.java,344,private void createComponentEntities(HostGroupEntity group, Collection<String> components) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintImpl.java,348,for (String component : components) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintImpl.java,352,componentEntity.setName(component);
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,91,for (String component : hostGroup.getComponents()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,181,Collection<String> groupComponents = group.getComponents();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,108,if (group.getComponents().contains(component)) {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostGroup.java,60,public Collection<String> getComponents();
ambari-server/src/main/java/org/apache/ambari/server/topology/HostGroupImpl.java,53,private Collection<String> components = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/topology/HostGroupImpl.java,81,public HostGroupImpl(String name, String bpName, Stack stack, Collection<String> components, Configuration configuration, String cardinality) {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostGroupImpl.java,87,for (String component : components) {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostGroupImpl.java,88,addComponent(component);
ambari-server/src/main/java/org/apache/ambari/server/topology/HostGroupImpl.java,113,public Collection<String> getComponents() {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostGroupImpl.java,114,return components;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostGroupImpl.java,136,boolean added = components.add(component);
ambari-server/src/main/java/org/apache/ambari/server/topology/HostGroupImpl.java,210,addComponent(componentEntity.getName());
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,188,for (String component : hostGroup.getComponents()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,173,hostComponents.addAll(hostGroup.getComponents());
ambari-server/src/main/java/org/apache/ambari/server/topology/RequiredPasswordValidator.java,84,for (String component : hostGroup.getComponents()) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/SharedObjectsFactory.java,43,import java.util.HashMap;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/SharedObjectsFactory.java,61,private static final Map<Class, Map<String, Object>> localObjects = new HashMap<Class, Map<String, Object>>();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/SharedObjectsFactory.java,73,localObjects.put(OperationHandleControllerFactory.class, new HashMap<String, Object>());
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/SharedObjectsFactory.java,74,localObjects.put(Storage.class, new HashMap<String, Object>());
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/SharedObjectsFactory.java,75,localObjects.put(IJobControllerFactory.class, new HashMap<String, Object>());
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/SharedObjectsFactory.java,76,localObjects.put(ATSParser.class, new HashMap<String, Object>());
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/SharedObjectsFactory.java,77,localObjects.put(SavedQueryResourceManager.class, new HashMap<String, Object>());
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/SharedObjectsFactory.java,78,localObjects.put(HdfsApi.class, new HashMap<String, Object>());
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/SharedObjectsFactory.java,79,localObjects.put(RMParser.class, new HashMap<String, Object>());
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/savedQueries/SavedQueryResourceManager.java,135,fillShortQueryField(savedQuery);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/savedQueries/SavedQueryResourceManager.java,141,return super.readAll(filteringStrategy);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,181,private ClusterEntity clusterEntity;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,260,this.clusterEntity = clusterEntity;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,262,serviceComponentHosts = new HashMap<String,
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,263,Map<String, Map<String, ServiceComponentHost>>>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,265,serviceComponentHostsByHost = new HashMap<String,
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,266,List<ServiceComponentHost>>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,385,services = new TreeMap<String, Service>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,386,if (!clusterEntity.getClusterServiceEntities().isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,387,for (ClusterServiceEntity serviceEntity : clusterEntity.getClusterServiceEntities()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,388,StackId stackId = getCurrentStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,389,try {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,390,if (ambariMetaInfo.getService(stackId.getStackName(),
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,392,services.put(serviceEntity.getServiceName(),
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,396,LOG.error(String.format(
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,416,clusterConfigGroups = new HashMap<Long, ConfigGroup>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,417,if (!clusterEntity.getConfigGroupEntities().isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,418,for (ConfigGroupEntity configGroupEntity : clusterEntity.getConfigGroupEntities()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,419,clusterConfigGroups.put(configGroupEntity.getGroupId(),
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,435,requestExecutions = new HashMap<Long, RequestExecution>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,436,if (!clusterEntity.getRequestScheduleEntities().isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,437,for (RequestScheduleEntity scheduleEntity : clusterEntity.getRequestScheduleEntities()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,438,requestExecutions.put(scheduleEntity.getScheduleId(),
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,456,+ ", tag = " + configGroup.getTag());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,516,+ ", description = " + requestExecution.getDescription());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,553,+ ", description = " + requestExecution.getDescription());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,597,hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,605,return clusterEntity.getClusterName();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,612,String oldName = clusterEntity.getClusterName();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,613,clusterEntity.setClusterName(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,616,clusterEntity = clusterDAO.merge(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,617,clusters.updateClusterName(oldName, clusterName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,677,new ArrayList<ServiceComponentHost>());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,688,svcCompHost);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,780,return clusterEntity.getClusterId();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,831,+ ", clusterId=" + getClusterId() + ", serviceName="
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,832,+ service.getName());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,852,+ ", clusterId=" + getClusterId() + ", serviceName=" + serviceName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,869,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,920,StackEntity stackEntity = stackDAO.find(stackId.getStackName(),
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,921,stackId.getStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,923,clusterEntity.setDesiredStack(stackEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,924,clusterEntity = clusterDAO.merge(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,926,if (cascade) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,927,for (Service service : getServices().values()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,928,service.setDesiredStackVersion(stackId);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,930,for (ServiceComponent sc : service.getServiceComponents().values()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,931,sc.setDesiredStackVersion(stackId);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,933,for (ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,934,sch.setDesiredStackVersion(stackId);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,940,loadServiceConfigTypes();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,951,ClusterStateEntity clusterStateEntity = clusterEntity.getClusterStateEntity();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,952,if (clusterStateEntity != null) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,953,StackEntity currentStackEntity = clusterStateEntity.getCurrentStack();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,954,return new StackId(currentStackEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,967,provisioningState = clusterEntity.getProvisioningState();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,969,if (null == provisioningState) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,970,provisioningState = State.INIT;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,983,clusterEntity.setProvisioningState(provisioningState);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,984,clusterEntity = clusterDAO.merge(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,995,securityType = clusterEntity.getSecurityType();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,997,if (null == securityType) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,998,securityType = SecurityType.NONE;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1011,clusterEntity.setSecurityType(securityType);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1012,clusterEntity = clusterDAO.merge(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1064,getClusterName(), repoVersionStackId,
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1065,currentClusterVersion.getRepositoryVersion().getVersion());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1074,existingHostToHostVersionEntity.keySet(), hostNames);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1485,getClusterName(), stackId, version);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1494,stackId, version);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1501,ClusterVersionEntity clusterVersionEntity = new ClusterVersionEntity(clusterEntity, repositoryVersionEntity, state, System.currentTimeMillis(), System.currentTimeMillis(), userName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1531,ClusterVersionEntity existingClusterVersion = clusterVersionDAO.findByClusterAndStackAndVersion(
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1534,if (existingClusterVersion == null) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1535,throw new AmbariException(
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1537,+ getClusterName() + ", stack=" + stackId + ", version="
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1538,+ version);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1542,if (existingClusterVersion.getState() == state) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1543,return;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1546,switch (existingClusterVersion.getState()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1547,case CURRENT:
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1553,break;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1554,case INSTALLING:
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1555,allowedStates.add(RepositoryVersionState.INSTALLED);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1556,allowedStates.add(RepositoryVersionState.INSTALL_FAILED);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1557,allowedStates.add(RepositoryVersionState.OUT_OF_SYNC);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1558,break;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1559,case INSTALL_FAILED:
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1560,allowedStates.add(RepositoryVersionState.INSTALLING);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1561,break;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1562,case INSTALLED:
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1563,allowedStates.add(RepositoryVersionState.INSTALLING);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1564,allowedStates.add(RepositoryVersionState.UPGRADING);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1565,allowedStates.add(RepositoryVersionState.OUT_OF_SYNC);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1566,break;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1567,case OUT_OF_SYNC:
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1568,allowedStates.add(RepositoryVersionState.INSTALLING);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1569,break;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1570,case UPGRADING:
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1571,allowedStates.add(RepositoryVersionState.UPGRADED);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1572,allowedStates.add(RepositoryVersionState.UPGRADE_FAILED);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1573,if (clusterVersionDAO.findByClusterAndStateCurrent(getClusterName()) == null) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1576,break;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1577,case UPGRADED:
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1578,allowedStates.add(RepositoryVersionState.CURRENT);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1579,break;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1580,case UPGRADE_FAILED:
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1581,allowedStates.add(RepositoryVersionState.UPGRADING);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1582,break;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1585,if (!allowedStates.contains(state)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1586,throw new AmbariException("Invalid cluster version transition from "
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1592,if (state == RepositoryVersionState.CURRENT) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1593,ClusterVersionEntity currentVersion = clusterVersionDAO.findByClusterAndStateCurrent(getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1594,if (currentVersion != null) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1595,currentVersion.setState(RepositoryVersionState.INSTALLED);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1596,clusterVersionDAO.merge(currentVersion);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1600,existingClusterVersion.setState(state);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1601,existingClusterVersion.setEndTime(System.currentTimeMillis());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1602,clusterVersionDAO.merge(existingClusterVersion);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1604,if (state == RepositoryVersionState.CURRENT) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1605,for (HostEntity hostEntity : clusterEntity.getHostEntities()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1608,continue;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1611,Collection<HostVersionEntity> versions = hostVersionDAO.findByHost(hostEntity.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1613,HostVersionEntity target = null;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1614,if (null != versions) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1617,for (HostVersionEntity entity : versions) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1618,if (entity.getRepositoryVersion().getId().equals(
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1620,target = entity;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1621,target.setState(state);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1622,hostVersionDAO.merge(target);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1624,entity.setState(RepositoryVersionState.INSTALLED);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1625,hostVersionDAO.merge(entity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1630,if (null == target) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1633,HostVersionEntity hve = new HostVersionEntity(hostEntity,
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1636,hostVersionDAO.create(hve);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1642,StackEntity desiredStackEntity = clusterEntity.getDesiredStack();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1643,StackId desiredStackId = new StackId(desiredStackEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1647,if (!desiredStackId.equals(stackId)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1648,String message = MessageFormat.format(
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1652,throw new AmbariException(message);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1655,setCurrentStackVersion(stackId);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1660,stackId, version, getClusterName(), state);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1695,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1699,stackId.getStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1701,ClusterStateEntity clusterStateEntity = clusterStateDAO.findByPK(clusterEntity.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1702,if (clusterStateEntity == null) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1703,clusterStateEntity = new ClusterStateEntity();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1704,clusterStateEntity.setClusterId(clusterEntity.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1705,clusterStateEntity.setCurrentStack(stackEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1706,clusterStateEntity.setClusterEntity(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1707,clusterStateDAO.create(clusterStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1708,clusterStateEntity = clusterStateDAO.merge(clusterStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1709,clusterEntity.setClusterStateEntity(clusterStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1710,clusterEntity = clusterDAO.merge(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1712,clusterStateEntity.setCurrentStack(stackEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1713,clusterStateDAO.merge(clusterStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1714,clusterEntity = clusterDAO.merge(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1833,clusterEntity = clusterDAO.findById(clusterEntity.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1847,+ getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1999,Map<String, List<HostConfigMapping>> hostMappingsByType = hostConfigMappingDAO.findSelectedHostsByTypes(
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2000,clusterEntity.getClusterId(), types);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2035,if (configGroup != null) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2036,serviceConfigEntity.setGroupId(configGroup.getId());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2037,Collection<Config> configs = configGroup.getConfigurations().values();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2038,List<ClusterConfigEntity> configEntities = new ArrayList<ClusterConfigEntity>(configs.size());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2039,for (Config config : configs) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2040,configEntities.add(clusterDAO.findConfig(getClusterId(), config.getType(), config.getTag()));
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2043,serviceConfigEntity.setClusterConfigEntities(configEntities);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2045,List<ClusterConfigEntity> configEntities = getClusterConfigEntitiesByService(serviceName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2046,serviceConfigEntity.setClusterConfigEntities(configEntities);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2050,long nextServiceConfigVersion = serviceConfigDAO.findNextServiceConfigVersion(
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2051,clusterEntity.getClusterId(), serviceName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2053,serviceConfigEntity.setServiceName(serviceName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2054,serviceConfigEntity.setClusterEntity(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2055,serviceConfigEntity.setVersion(nextServiceConfigVersion);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2056,serviceConfigEntity.setUser(user);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2057,serviceConfigEntity.setNote(note);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2058,serviceConfigEntity.setStack(clusterEntity.getDesiredStack());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2060,serviceConfigDAO.create(serviceConfigEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2061,if (configGroup != null) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2062,serviceConfigEntity.setHostIds(new ArrayList<Long>(configGroup.getHosts().keySet()));
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2063,serviceConfigDAO.merge(serviceConfigEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2464,hostIds = clusters.getHostIdsForCluster(clusterEntity.getClusterName()).keySet();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2477,return clusterDAO.findNextConfigVersion(clusterEntity.getClusterId(), type);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2574,String clusterName = clusterEntity.getClusterName();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2678,ResourceEntity resourceEntity = clusterEntity.getResource();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2679,if (resourceEntity != null) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2680,Integer permissionId = privilegeEntity.getPermission().getId();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2682,if (privilegeEntity.getResource().equals(resourceEntity)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2683,if ((readOnly && permissionId.equals(PermissionEntity.CLUSTER_READ_PERMISSION)) ||
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2685,return true;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2772,List<ClusterConfigEntity> clusterConfigsToMakeSelected = clusterDAO.getLatestConfigurations(
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2773,clusterEntity.getClusterId(), stackId);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2869,if (null == allConfigs) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2870,allConfigs = new HashMap<String, Map<String, Config>>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2873,allConfigs.clear();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2875,if (!clusterEntity.getClusterConfigEntities().isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2876,for (ClusterConfigEntity entity : clusterEntity.getClusterConfigEntities()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2878,if (!allConfigs.containsKey(entity.getType())) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2879,allConfigs.put(entity.getType(), new HashMap<String, Config>());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2882,Config config = configFactory.createExisting(this, entity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2884,allConfigs.get(entity.getType()).put(entity.getTag(), config);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1176,clusterGlobalLock.writeLock().unlock();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,403,if (null != cluster) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,404,execCmd.setClusterHostInfo(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,405,StageUtils.getClusterHostInfo(cluster));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,418,final List<RepositoryEntity> repoInfo = perOsRepos.get(host.getOsFamily());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,422,host.getOsFamily(), desiredRepoVersion, stackId));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,442,host.getOsFamily());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,357,final List<RepositoryEntity> repoInfo = perOsRepos.get(host.getOsFamily());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,361,host.getOsFamily(), desiredRepoVersion, stackId));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,380,host.getOsFamily());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1160,for (String hostname : hosts.keySet()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1161,if (hostsMissingRepoVersion.contains(hostname)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1163,HostEntity hostEntity = hostDAO.findByName(hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1164,HostVersionEntity hostVersionEntity = new HostVersionEntity(hostEntity,
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1165,sourceClusterVersion.getRepositoryVersion(),
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1166,RepositoryVersionState.INSTALLING);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1167,hostVersionDAO.create(hostVersionEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1170,HostVersionEntity hostVersionEntity = existingHostStackVersions.get(hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1172,hostVersionDAO.merge(hostVersionEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,863,String majorVersion = getHostAttributes().get(OS_RELEASE_VERSION).split("\\.")[0];
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,864,return getHostAttributes().get(OSFAMILY) + majorVersion;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,648,principalType = principalDescriptor.getType().name().toLowerCase();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,850,principalDescriptor.getType(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostKerberosIdentityResourceProvider.java,186,setResourceProperty(resource, KERBEROS_IDENTITY_PRINCIPAL_TYPE_PROPERTY_ID, principalDescriptor.getType(), requestPropertyIds);
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosPrincipalDescriptor.java,76,private KerberosPrincipalType type = KerberosPrincipalType.SERVICE;
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosPrincipalDescriptor.java,112,setType((type == null) ? KerberosPrincipalType.SERVICE : type);
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosPrincipalDescriptor.java,273,map.put("type", getType().name().toLowerCase());
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosPrincipalDescriptor.java,329,return KerberosPrincipalType.SERVICE;
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosPrincipalType.java,38,SERVICE
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,216,for (StageEntity stage : getStageEntities()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,231,for (HostRoleCommandEntity task : stage.getHostRoleCommands()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,272,summaryMap.put(stage.getStageId(), stageSummary);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,21,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.AMBARI_DB_RCA_DRIVER;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,22,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.AMBARI_DB_RCA_PASSWORD;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,23,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.AMBARI_DB_RCA_URL;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,24,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.AMBARI_DB_RCA_USERNAME;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,25,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.CLIENTS_TO_UPDATE_CONFIGS;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,26,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.COMMAND_TIMEOUT;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,27,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.DB_DRIVER_FILENAME;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,28,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.GROUP_LIST;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,29,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.HOOKS_FOLDER;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,30,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.PACKAGE_LIST;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,31,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.REPO_INFO;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,32,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.SCRIPT;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,33,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.SCRIPT_TYPE;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,34,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.SERVICE_PACKAGE_FOLDER;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,35,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.SERVICE_REPO_INFO;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,36,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.USER_LIST;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,37,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.VERSION;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,41,import java.io.File;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,42,import java.io.FileReader;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,43,import java.io.IOException;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,44,import java.lang.reflect.Type;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,45,import java.net.InetAddress;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,46,import java.text.MessageFormat;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,47,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,48,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,49,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,50,import java.util.EnumMap;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,51,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,52,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,53,import java.util.LinkedHashSet;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,54,import java.util.LinkedList;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,55,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,56,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,57,import java.util.Map.Entry;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,58,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,59,import java.util.TreeMap;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,60,import java.util.concurrent.TimeUnit;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,61,import java.util.concurrent.locks.Lock;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2148,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2149,kerberosHelper.configureService(cluster, scHost);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2151,throw new AmbariException(e.getMessage(), e);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,152,if (ambariMetaInfo == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,153,ambariMetaInfo = injector.getInstance(AmbariMetaInfo.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,161,String serverVersion = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,165,serverVersion = ambariMetaInfo.getServerVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,168,if (schemaVersionEntity==null || VersionUtils.compareVersions(schemaVersion, serverVersion, 3) != 0) {
ambari-server/src/main/java/org/apache/ambari/server/stack/StackDirectory.java,449,InputStream rcoInputStream = ClassLoader.getSystemResourceAsStream(ROLE_COMMAND_ORDER_FILE);
ambari-server/src/main/java/org/apache/ambari/server/stack/StackDirectory.java,450,result = mapper.readValue(rcoInputStream, rcoElementTypeReference);
ambari-server/src/main/java/org/apache/ambari/server/stack/StackDirectory.java,451,LOG.info("Role command order info was loaded from classpath: " +
ambari-server/src/main/java/org/apache/ambari/server/stack/StackDirectory.java,452,ClassLoader.getSystemResource(ROLE_COMMAND_ORDER_FILE));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,283,stageStatuses.add(stageStatus);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,379,setResourceProperty(resource, STAGE_STATUS, status.getStatus().toString(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,446,setResourceProperty(resource, STAGE_STATUS, status.getStatus().toString(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java,115,if (regenerateKeytabs || !kerberosPrincipalHostDAO.exists(evaluatedPrincipal)) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java,141,else {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/MasterKeyServiceImpl.java,133,if (key == null) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertHostListener.java,26,import org.apache.ambari.server.AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertHostListener.java,151,definition.getDefinitionName(), definition.getClusterId(),
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertHostListener.java,152,ambariException);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1351,private static class MultipleHostTopologyUpdater implements PropertyUpdater {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1450,Matcher matcher = HOSTGROUP_PORT_REGEX.matcher(origValue);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1454,if ((indexOfStart > 0) && (!origValue.substring(0, indexOfStart).equals("['"))) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1456,prefix = origValue.substring(0, indexOfStart);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1467,suffix = origValue.substring(indexOfEnd);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1486,if ((suffix != null) && (!suffix.equals("']"))) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/LogoutService.java,35,public Response performLogout() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1638,private static class YamlMultiValuePropertyDecorator extends AbstractPropertyValueDecorator {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,686,TypedQuery<AlertNoticeEntity> currentQuery = entityManager.createNamedQuery(
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,690,currentQuery.executeUpdate();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,691,entityManager.clear();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,553,currentQuery.executeUpdate();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,555,TypedQuery<AlertHistoryEntity> historyQuery = entityManager.createNamedQuery(
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,559,historyQuery.executeUpdate();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,561,entityManager.clear();
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,20,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,21,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,22,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,23,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,24,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,25,import java.util.Iterator;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,26,import java.util.LinkedHashMap;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,27,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,28,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,29,import java.util.Map.Entry;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,30,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,31,import java.util.TreeMap;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,32,import java.util.concurrent.TimeUnit;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,47,import com.google.common.cache.Cache;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,48,import com.google.common.cache.CacheBuilder;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,49,import com.google.common.collect.Maps;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,50,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,51,import com.google.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,52,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,466,StackInfo stack = ambariMetaInfo.getStack(stackId.getStackName(),
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,467,stackId.getStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,477,result.add(cluster.getDesiredConfigByType(stackPropertyConfigType).getProperties().get(serviceProperty.getName()));
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,489,result.add(cluster.getDesiredConfigByType(stackPropertyConfigType).getProperties().get(stackProperty.getName()));
ambari-server/src/main/java/org/apache/ambari/server/state/DesiredConfig.java,122,public static class HostOverride {
ambari-server/src/main/java/org/apache/ambari/server/state/DesiredConfig.java,123,private String hostName;
ambari-server/src/main/java/org/apache/ambari/server/state/DesiredConfig.java,124,private String versionOverrideTag;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1979,Map<String, DesiredConfig> map = new HashMap<String, DesiredConfig>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1980,Collection<String> types = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1983,if (e.isSelected() > 0) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1990,map.put(e.getType(), c);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2002,for (Entry<String, DesiredConfig> entry : map.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2014,entry.getValue().setHostOverrides(hostOverrides);
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,349,Collection<DesiredConfig> desiredConfigs = cluster.getDesiredConfigs().values();
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,350,for (DesiredConfig config : desiredConfigs) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,351,if (config.getTag().equals(tag)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,398,addIdentities(authToLocalBuilder, component.getIdentities(true), null, existingConfigurations);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,400,authToLocalProperties = component.getAuthToLocalProperties();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,401,if (authToLocalProperties != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,402,authToLocalPropertiesToSet.addAll(authToLocalProperties);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,225,in = getApi(context).open(path);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,341,hostLevelParams.put(REPO_INFO, getRepoInfo
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,342,(cluster, host));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1461,int indexOfEnd = -1;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1462,while (matcher.find()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1466,if ((indexOfEnd > -1) && (indexOfEnd < (origValue.length() - 1))) {
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/utils/UserLocalObjects.java,24,import org.apache.ambari.view.utils.ViewUserLocal;
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/utils/UserLocalObjects.java,38,private static ViewUserLocal<HdfsApi> hdfsApi;
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/utils/UserLocalObjects.java,43,private static ViewUserLocal<TempletonApi> templetonApi;
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/utils/UserLocalObjects.java,46,templetonApi = new ViewUserLocal<TempletonApi>(TempletonApi.class) {
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/utils/UserLocalObjects.java,54,hdfsApi = new ViewUserLocal<HdfsApi>(HdfsApi.class) {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ViewUserLocal.java,19,package org.apache.ambari.view.utils;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ViewUserLocal.java,21,import org.apache.ambari.view.ViewContext;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ViewUserLocal.java,23,import java.util.HashMap;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ViewUserLocal.java,24,import java.util.Map;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ViewUserLocal.java,32,public class ViewUserLocal<T> {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ViewUserLocal.java,33,private static Map<Class, Map<String, Object>> viewSingletonObjects = new HashMap<Class, Map<String, Object>>();
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ViewUserLocal.java,34,private final Class<T> tClass;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ViewUserLocal.java,36,public ViewUserLocal(Class<T> tClass) {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ViewUserLocal.java,37,this.tClass = tClass;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ViewUserLocal.java,47,protected synchronized T initialValue(ViewContext context) {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ViewUserLocal.java,48,return null;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ViewUserLocal.java,57,public T get(ViewContext context) {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ViewUserLocal.java,58,if (!viewSingletonObjects.containsKey(tClass)) {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ViewUserLocal.java,59,viewSingletonObjects.put(tClass, new HashMap<String, Object>());
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ViewUserLocal.java,62,Map<String, Object> instances = viewSingletonObjects.get(tClass);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ViewUserLocal.java,64,if (!instances.containsKey(getTagName(context))) {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ViewUserLocal.java,65,instances.put(getTagName(context), initialValue(context));
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ViewUserLocal.java,67,return (T) instances.get(getTagName(context));
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ViewUserLocal.java,75,public void set(T obj, ViewContext context) {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ViewUserLocal.java,76,if (!viewSingletonObjects.containsKey(tClass)) {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ViewUserLocal.java,77,viewSingletonObjects.put(tClass, new HashMap<String, Object>());
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ViewUserLocal.java,80,Map<String, Object> instances = viewSingletonObjects.get(tClass);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ViewUserLocal.java,81,instances.put(getTagName(context), obj);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ViewUserLocal.java,89,private String getTagName(ViewContext context) {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ViewUserLocal.java,90,if (context == null) {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ViewUserLocal.java,91,return "<null>";
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ViewUserLocal.java,93,return String.format("%s:%s", context.getInstanceName(), context.getUsername());
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ViewUserLocal.java,101,public static void dropAllConnections(Class tClass) {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ViewUserLocal.java,102,Map<String, Object> instances = viewSingletonObjects.get(tClass);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ViewUserLocal.java,103,if (instances != null) {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ViewUserLocal.java,104,viewSingletonObjects.get(tClass).clear();
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ViewUserLocal.java,113,public static void dropAllConnections() {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ViewUserLocal.java,114,viewSingletonObjects.clear();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,281,KerberosDetails kerberosDetails = getKerberosDetails(cluster, null);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,286,KerberosServiceDescriptor serviceDescriptor = kerberosDescriptor.getService(serviceName);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,288,if (serviceDescriptor != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,289,Map<String, String> kerberosDescriptorProperties = kerberosDescriptor.getProperties();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,290,Map<String, Map<String, String>> kerberosConfigurations = new HashMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,291,Map<String, Map<String, String>> configurations = calculateConfigurations(cluster,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,292,serviceComponentHost.getHostName(), kerberosDescriptorProperties);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,294,Map<String, KerberosComponentDescriptor> componentDescriptors = serviceDescriptor.getComponents();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,295,for (KerberosComponentDescriptor componentDescriptor : componentDescriptors.values()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,296,if (componentDescriptor != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,297,Map<String, Map<String, String>> identityConfigurations;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,298,List<KerberosIdentityDescriptor> identities;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,300,identities = serviceDescriptor.getIdentities(true);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,301,identityConfigurations = getConfigurations(identities);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,302,if (identityConfigurations != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,303,for (Map.Entry<String, Map<String, String>> entry : identityConfigurations.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,304,mergeConfigurations(kerberosConfigurations, entry.getKey(), entry.getValue(), configurations);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,308,identities = componentDescriptor.getIdentities(true);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,309,identityConfigurations = getConfigurations(identities);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,310,if (identityConfigurations != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,311,for (Map.Entry<String, Map<String, String>> entry : identityConfigurations.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,312,mergeConfigurations(kerberosConfigurations, entry.getKey(), entry.getValue(), configurations);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,316,mergeConfigurations(kerberosConfigurations,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,317,componentDescriptor.getConfigurations(true), configurations);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,321,setAuthToLocalRules(kerberosDescriptor, cluster, kerberosDetails.getDefaultRealm(), configurations, kerberosConfigurations);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,323,for (Map.Entry<String, Map<String, String>> entry : kerberosConfigurations.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,324,configHelper.updateConfigType(cluster, ambariManagementController, entry.getKey(), entry.getValue(), null,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,325,ambariManagementController.getAuthName(), String.format("Enabling Kerberos for %s", serviceName));
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,709,Map<String, Map<String, String>> configurations = new HashMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,710,Map<String, Map<String, String>> configurationTags = ambariManagementController.findConfigurationTagsWithOverrides(cluster, hostname);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,712,if (configurationTags.get(Configuration.GLOBAL_CONFIG_TAG) != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,713,configHelper.applyCustomConfig(
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,714,configurations, Configuration.GLOBAL_CONFIG_TAG,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,715,Configuration.RCA_ENABLED_PROPERTY, "false", false);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,718,Map<String, Map<String, String>> configProperties = configHelper.getEffectiveConfigProperties(cluster, configurationTags);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,722,for (Map.Entry<String, Map<String, String>> entry : configProperties.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,723,String type = entry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,724,Map<String, String> allLevelMergedConfig = entry.getValue();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,725,Map<String, String> configuration = configurations.get(type);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,727,if (configuration == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,728,configuration = new HashMap<String, String>(allLevelMergedConfig);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,730,Map<String, String> mergedConfig = configHelper.getMergedConfig(allLevelMergedConfig, configuration);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,731,configuration.clear();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,732,configuration.putAll(mergedConfig);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,735,configurations.put(type, configuration);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,740,Map<String, String> generalProperties = configurations.get("");
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,741,if (generalProperties == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,742,generalProperties = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,743,configurations.put("", generalProperties);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,748,if (kerberosDescriptorProperties != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,749,generalProperties.putAll(kerberosDescriptorProperties);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,753,generalProperties.put("host", hostname);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,754,generalProperties.put("hostname", hostname);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,757,generalProperties.put("cluster_name", cluster.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,760,Map<String, Set<String>> clusterHostInfo = StageUtils.getClusterHostInfo(cluster);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,763,Map<String, String> componentHosts = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,765,clusterHostInfo = StageUtils.substituteHostIndexes(clusterHostInfo);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,767,for (Map.Entry<String, Set<String>> entry : clusterHostInfo.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,768,componentHosts.put(entry.getKey(), StringUtils.join(entry.getValue(), ","));
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,771,configurations.put("clusterHostInfo", componentHosts);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,774,return configurations;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1017,KerberosDetails kerberosDetails,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1018,Map<String, ? extends Collection<String>> serviceComponentFilter,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1020,Set<String> hostsToForceKerberosOperations,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1021,RequestStageContainer requestStageContainer,
ambari-server/src/main/java/org/apache/ambari/server/controller/ActionExecutionContext.java,141,public boolean isIgnoreMaintenance() {
ambari-server/src/main/java/org/apache/ambari/server/controller/ActionExecutionContext.java,148,public void setIgnoreMaintenance(boolean ignore) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,263,Set<String> filteredHosts = filterUnhealthHosts(candidateHosts, actionExecutionContext, resourceFilter);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,266,String message = String.format("Some hosts (%s) have been ignored " +
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,268,ignoredHosts);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,269,LOG.debug(message);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,271,String message = String.format("Some hosts (%s) have been ignored " +
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,273,filteredHosts);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,274,LOG.warn(message);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,276,String message = "Invalid request : No hosts specified.";
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,478,if (!actionExecutionContext.isIgnoreMaintenance()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,483,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,494,String msg = String.format("Unable to find a healthy host " +
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,499,candidateHosts, ignoredHosts);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,500,LOG.info(msg);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,1213,private Set<String> filterUnhealthHosts(Set<String> hosts,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,880,actionContext.setIgnoreMaintenance(true);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,938,actionContext.setIgnoreMaintenance(true);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,989,actionContext.setIgnoreMaintenance(true);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1097,actionContext.setIgnoreMaintenance(true);
