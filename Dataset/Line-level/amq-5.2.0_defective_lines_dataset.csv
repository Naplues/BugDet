File,Line_number,SRC
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,188,username
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,265,doRFC2254Encoding(dn), username
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,58,ObjectName[] queues = broker.getTopics();
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,59,return getManagedObjects(queues, TopicViewMBean.class);
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,67,ObjectName[] queues = broker.getDurableTopicSubscribers();
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,68,return getManagedObjects(queues, DurableSubscriptionViewMBean.class);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionFactory.java,101,throw new JMSException(e.getMessage());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,205,cleanup();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,208,physicalConnection.close();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,22,import javax.jms.Connection;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,24,import javax.jms.XAConnection;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,25,import javax.jms.XASession;
activemq-ra/src/main/java/org/apache/activemq/ra/LocalAndXATransaction.java,33,private final TransactionContext transactionContext;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,171,log.debug("JMS Session is no longer running (maybe due to loss of connection?), marking ServerSesison as stale");
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,177,log.info("Endpoint failed to process message. Reason: " + e.getMessage());
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,258,return "ServerSessionImpl:" + serverSessionId;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,224,for (Iterator i = l.iterator(); i.hasNext();) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,225,dispatchToSession((MessageDispatch)i.next());
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,228,LOG.error("Error redispatching unconsumed messages from stale session", t);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,116,serverSessionPool.closeIdleSessions();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,169,session.run();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,265,int activeCount = closeIdleSessions();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,281,activeCount = closeIdleSessions();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,286,protected int closeIdleSessions() {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,190,Continuation continuation = null;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,191,Listener listener = null;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,196,listener = (Listener)consumer.getAvailableListener();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,197,if (listener == null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,198,listener = new Listener(consumer);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,199,consumer.setAvailableListener(listener);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,387,TextMessage textMsg = (TextMessage)message;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,394,ObjectMessage objectMsg = (ObjectMessage)message;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,447,protected long getReadTimeout(HttpServletRequest request) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,448,long answer = defaultReadTimeout;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,450,String name = request.getParameter(readTimeoutParameter);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,451,if (name != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,452,answer = asLong(name);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,454,if (answer < 0 || answer > maximumReadTimeout) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,455,answer = maximumReadTimeout;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,457,return answer;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,83,Set brokers = findBrokers(connection);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,87,ObjectName name = (ObjectName)brokers.iterator().next();
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,88,BrokerViewMBean mbean = (BrokerViewMBean)MBeanServerInvocationHandler.newProxyInstance(connection, name, BrokerViewMBean.class, true);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,217,NameParser parser = context.getNameParser("");
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,218,Name contextName = parser.parse(context.getNameInNamespace());
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,220,Name entryName = parser.parse(result.getName());
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,221,Name name = contextName.addAll(baseName);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,222,name = name.addAll(entryName);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,223,String dn = name.toString();
activemq-camel/src/main/java/org/apache/activemq/camel/component/CamelEndpointLoader.java,22,import javax.jms.Connection;
activemq-camel/src/main/java/org/apache/activemq/camel/component/CamelEndpointLoader.java,23,import javax.jms.ConnectionFactory;
activemq-camel/src/main/java/org/apache/activemq/camel/component/CamelEndpointLoader.java,25,import org.apache.activemq.EnhancedConnection;
activemq-camel/src/main/java/org/apache/activemq/camel/component/CamelEndpointLoader.java,35,import org.apache.camel.util.ObjectHelper;
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnectionFactory.java,50,public class PooledConnectionFactory implements ConnectionFactory, Service {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,226,throw new RuntimeException("Endpoint after delivery notification failure", e);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,65,private String readTimeoutParameter = "readTimeout";
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,70,private HashMap<String, WebClient> clients = new HashMap<String, WebClient>();
assembly/src/release/example/src/ProducerTool.java,133,if (transacted) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,70,private String readTimeoutParameter = "timeout";
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,231,Connection connection = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,233,connection = makeConnection();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,234,if (connection instanceof XAConnection) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,235,XASession session = ((XAConnection)connection).createXASession();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,236,XAResource xaResource = session.getXAResource();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,237,return new XAResource[] {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,238,xaResource
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,241,return new XAResource[] {};
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,245,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,246,connection.close();
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,159,return true;
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,166,return true;
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,168,return false;
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,59,this.pool.incrementReferenceCount();
activemq-web/src/main/java/org/apache/activemq/web/PortfolioPublishServlet.java,71,out.print(refreshRate);
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionKey.java,51,return equals((ConnectionKey)that);
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,144,expiredCheck();
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,155,if (hasExpired) {
activemq-web/src/main/java/org/apache/activemq/web/SessionPool.java,35,private LinkedList<Session> sessions = new LinkedList<Session>();
activemq-web/src/main/java/org/apache/activemq/web/SessionPool.java,43,connection = getConnectionFactory().createConnection();
activemq-web/src/main/java/org/apache/activemq/web/SessionPool.java,44,connection.start();
activemq-web/src/main/java/org/apache/activemq/web/SessionPool.java,45,return connection;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,60,public static List queryMBeans(MBeanServerConnection jmxConnection, List queryList) throws Exception {
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,112,return new WildcardToRegExTransformFilter(new MBeansRegExQueryFilter(new MBeansObjectNameQueryFilter(jmxConnection)));
activemq-xmpp/src/main/java/org/apache/activemq/transport/xmpp/XmppTransport.java,54,import org.jabber.etherx.streams.Features;
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,22,import java.util.Enumeration;
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,25,import java.util.Properties;
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,60,private Set<Principal> principals = new HashSet<Principal>();
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,111,user = ((NameCallback)callbacks[0]).getName();
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,112,char[] tmpPassword = ((PasswordCallback)callbacks[1]).getPassword();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,76,private ConnectionConsumer consumer;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,130,consumer = connection.createDurableConnectionConsumer(
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,138,consumer = connection.createConnectionConsumer(
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,179,throw new NotSupportedException("That type of ActicationSpec not supported: " + activationSpec.getClass());
activemq-web-console/src/main/java/org/apache/activemq/web/handler/BindingBeanNameUrlHandlerMapping.java,24,import org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping;
activemq-console/src/main/java/org/apache/activemq/console/command/BstatCommand.java,67,queryTokens.add("--vuew");
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,113,bridge.start();
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,109,final SimpleDiscoveryEvent event = (SimpleDiscoveryEvent)devent;
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,110,if (event.failed.compareAndSet(false, true)) {
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,112,listener.onServiceRemove(event);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,70,if (info.getDestination().isTemporary() || broker == null || broker.getTempDataStore()==null ) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,71,private BrokerService brokerService;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,85,if (!isFull() && matched.isEmpty()  && !isSlave()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,403,md.setDestination(node.getRegionDestination().getActiveMQDestination());
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,404,dispatchedCounter.incrementAndGet();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,407,if (singleDestination) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,408,if (destination == null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,409,destination = node.getRegionDestination();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,411,if (destination != node.getRegionDestination()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,412,singleDestination = false;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,417,md.setTransmitCallback(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,419,public void run() {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,420,node.getRegionDestination().getDestinationStatistics().getDispatched().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,421,node.getRegionDestination().getDestinationStatistics().getInflight().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,422,node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,428,node.getRegionDestination().getDestinationStatistics().getDispatched().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,429,node.getRegionDestination().getDestinationStatistics().getInflight().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,430,node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,77,SslTransportServer server = new SslTransportServer(this, location, (SSLServerSocketFactory)serverSocketFactory);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportServer.java,59,public SslTransportServer(
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportServer.java,60,SslTransportFactory transportFactory,
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportServer.java,61,URI location,
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportServer.java,62,SSLServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,424,public int getSoTimeout() {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,425,return soTimeout;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,428,public void setSoTimeout(int soTimeout) {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,429,this.soTimeout = soTimeout;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,432,public int getSocketBufferSize() {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,433,return socketBufferSize;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,436,public void setSocketBufferSize(int socketBufferSize) {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,437,this.socketBufferSize = socketBufferSize;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,440,public int getConnectionTimeout() {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,441,return connectionTimeout;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,444,public void setConnectionTimeout(int connectionTimeout) {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,445,this.connectionTimeout = connectionTimeout;
activemq-core/src/main/java/org/apache/activemq/transport/udp/UdpTransportServer.java,37,import org.apache.activemq.transport.reliable.Replayer;
activemq-web/src/main/java/org/apache/activemq/web/PortfolioPublishServlet.java,73,out.println("<body>Published <b>" + count + "</b> of " + total + " price messages.  Refresh = " + refreshRate + "s");
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,527,checkConnected();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,529,connected.set(false);
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,84,cs.removeTransactionState(info.getTransactionId());
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,71,throw new SecurityException("User " + securityContext.getUserName() + " is not authorized to create: " + destination);
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,83,if (securityContext == null) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,84,throw new SecurityException("User is not authenticated.");
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,86,Set<?> allowedACLs = null;
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,87,if (!destination.isTemporary()) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,88,allowedACLs = authorizationMap.getAdminACLs(destination);
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,90,allowedACLs = authorizationMap.getTempDestinationAdminACLs();
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,99,public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,102,if (subject == null) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,103,throw new SecurityException("User is not authenticated.");
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,113,throw new SecurityException("User " + subject.getUserName() + " is not authorized to read from: " + info.getDestination());
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,115,subject.getAuthorizedReadDests().put(info.getDestination(), info.getDestination());
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,144,if (subject == null) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,145,throw new SecurityException("User is not authenticated.");
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,155,if (allowedACLs != null && !subject.isInOneOf(allowedACLs)) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,156,throw new SecurityException("User " + subject.getUserName() + " is not authorized to write to: " + info.getDestination());
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,158,subject.getAuthorizedWriteDests().put(info.getDestination(), info.getDestination());
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,166,if (subject == null) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,167,throw new SecurityException("User is not authenticated.");
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,178,if (allowedACLs != null && !subject.isInOneOf(allowedACLs)) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,179,throw new SecurityException("User " + subject.getUserName() + " is not authorized to write to: " + messageSend.getDestination());
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,181,subject.getAuthorizedWriteDests().put(messageSend.getDestination(), messageSend.getDestination());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,896,MessageAck ack = new MessageAck(md,MessageAck.INDIVIDUAL_ACK_TYPE,1);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,882,session.sendAck(ack);
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,20,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,53,throws JMSException {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,54,super(broker,usageManager, context, info);
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,55,this.pending = new StoreDurableSubscriberCursor(broker,context.getClientId(), info.getSubscriptionName(), info.getPrefetchSize(), this);
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,77,TopicMessageStore store = (TopicMessageStore)destination.getMessageStore();
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,79,this.enqueueCounter+=store.getMessageCount(subscriptionKey.getClientId(),subscriptionKey.getSubscriptionName());
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,96,public void activate(SystemUsage memoryManager, ConnectionContext context,
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,97,ConsumerInfo info) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,111,.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,112,Topic topic = (Topic) iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,124,.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,125,Topic topic = (Topic) iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,201,synchronized(pending) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,283,return false;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,105,sub.activate(usageManager, context, info);
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,37,return load(classDesc.getName(), cl);
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,56,try {
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,57,return Class.forName(className, false, cl);
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,60,if (clazz != null) {
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,61,return clazz;
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,63,return Class.forName(className, false, FALLBACK_CLASS_LOADER);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1866,for (Iterator<ActiveMQSession> i = this.sessions.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1867,ActiveMQSession s = i.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1868,if (s.isInUse(destination)) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2139,for (Iterator<ActiveMQSession> i = this.sessions.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2140,ActiveMQSession s = i.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2141,s.close(command.getConsumerId());
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2144,for (Iterator<ActiveMQSession> i = this.sessions.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2145,ActiveMQSession s = i.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2146,s.setPrefetchSize(command.getConsumerId(), command.getPrefetch());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,163,throw new InvalidDestinationException(
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,168,throw new InvalidDestinationException(
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,361,throw new JMSException(
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,59,return new HttpClientTransport(textWireFormat, location);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportFactory.java,40,return new HttpsClientTransport(asTextWireFormat(wf), location);
activemq-core/src/main/java/org/apache/activemq/blob/BlobUploader.java,35,private BlobTransferPolicy blobTransferPolicy;
activemq-core/src/main/java/org/apache/activemq/blob/BlobUploader.java,40,this.blobTransferPolicy = blobTransferPolicy;
activemq-core/src/main/java/org/apache/activemq/blob/BlobUploader.java,45,this.blobTransferPolicy = blobTransferPolicy;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,267,beanServer.unregisterMBean(name);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageProducer.java,201,if (destination == info.getDestination()) {
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,20,import java.io.File;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,33,import org.springframework.core.io.ClassPathResource;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,34,import org.springframework.core.io.FileSystemResource;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,36,import org.springframework.core.io.UrlResource;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,37,import org.springframework.util.ResourceUtils;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,165,this.messageAuthorizationPolicy = connector.getMessageAuthorizationPolicy();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,942,protected void doStop() throws Exception, InterruptedException {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,943,LOG.debug("Stopping connection: " + transport.getRemoteAddress());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,956,LOG.trace("Exception caught stopping", ignore);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,963,LOG.debug("Could not stop transport: " + e, e);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,999,LOG.debug("Cleaning up connection resources: " + getRemoteAddress());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1010,LOG.debug("Connection Stopped: " + getRemoteAddress());
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,55,super(connector, transport, broker, factory);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,39,import org.apache.activemq.thread.DefaultThreadPools;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,108,reconnectTask = DefaultThreadPools.getDefaultTaskRunnerFactory().createTaskRunner(new Task() {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,246,synchronized (reconnectMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,248,if (!started) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,249,return;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,251,started = false;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,252,disposed = true;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,253,connected = false;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,259,if (connectedTransport.get() != null) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,260,transportToStop = connectedTransport.getAndSet(null);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,262,reconnectMutex.notifyAll();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,264,synchronized (sleepMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,265,sleepMutex.notifyAll();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,267,reconnectTask.shutdown();
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,32,import org.apache.activemq.thread.DefaultThreadPools;
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,156,reconnectTask = DefaultThreadPools.getDefaultTaskRunnerFactory().createTaskRunner(new Task() {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,290,synchronized (reconnectMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,291,ServiceStopper ss = new ServiceStopper();
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,293,if (!started) {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,294,return;
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,296,started = false;
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,297,disposed = true;
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,298,connected=false;
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,300,for (Iterator<FanoutTransportHandler> iter = transports.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,301,FanoutTransportHandler th = iter.next();
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,302,if (th.transport != null) {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,303,ss.stop(th.transport);
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,307,LOG.debug("Stopped: " + this);
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,308,ss.throwFirstException();
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,310,reconnectTask.shutdown();
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,487,LOG.debug("Caught exception closing socket",e);
activemq-core/src/main/java/org/apache/activemq/thread/DefaultThreadPools.java,19,import java.util.concurrent.Executor;
activemq-core/src/main/java/org/apache/activemq/thread/DefaultThreadPools.java,20,import java.util.concurrent.ScheduledThreadPoolExecutor;
activemq-core/src/main/java/org/apache/activemq/thread/DefaultThreadPools.java,21,import java.util.concurrent.ThreadFactory;
activemq-core/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,43,this("ActiveMQ Task", Thread.NORM_PRIORITY, true, 1000);
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,66,Object value = method.invoke(target, new Object[] {});
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,169,setter.invoke(target, new Object[] {value});
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,172,setter.invoke(target, new Object[] {convert(value, setter.getParameterTypes()[0])});
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,31,import java.util.Set;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,697,checkClosed();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,43,protected boolean batchResetNeeded = true;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,54,clear();
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,52,public class PooledConnection implements TopicConnection, QueueConnection, EnhancedConnection {
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,55,private boolean stopped;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,147,enqueueCounter++;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,412,waitStarted();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,981,protected void waitStarted() throws InterruptedException {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,982,startedLatch.await();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,985,protected void clearDownSubscriptions() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,986,subscriptionMapByLocalId.clear();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,987,subscriptionMapByRemoteId.clear();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,852,if ((0.5 * info.getPrefetchSize()) <= (deliveredCounter - additionalWindowSize)) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,257,backups.clear();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,269,transportToStop.stop();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,255,t.setDisposed(true);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,38,if (rc == null) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,39,return null;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,41,return OpenTypeSupport.convert(rc);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,25,import org.apache.activemq.transport.tcp.SslTransportFactory;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,66,if (!brokerURL.getScheme().equals("ssl")) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,67,return super.createTransport();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,71,SslTransportFactory sslFactory = new SslTransportFactory();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,73,return sslFactory.doConnect(brokerURL);
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,319,public void fastProducer(ConnectionContext context,ProducerInfo producerInfo) {
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,320,super.fastProducer(context, producerInfo);
activemq-core/src/main/java/org/apache/activemq/broker/Broker.java,359,void fastProducer(ConnectionContext context,ProducerInfo producerInfo);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerFilter.java,270,public void fastProducer(ConnectionContext context,ProducerInfo producerInfo) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerFilter.java,271,next.fastProducer(context, producerInfo);
activemq-core/src/main/java/org/apache/activemq/broker/EmptyBroker.java,261,public void fastProducer(ConnectionContext context,ProducerInfo producerInfo) {
activemq-core/src/main/java/org/apache/activemq/broker/ErrorBroker.java,272,public void fastProducer(ConnectionContext context,ProducerInfo producerInfo) {
activemq-core/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java,282,public void fastProducer(ConnectionContext context,ProducerInfo producerInfo) {
activemq-core/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java,283,getNext().fastProducer(context, producerInfo);
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,57,private boolean advisdoryForFastProducers;
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,302,public boolean isAdvisdoryForFastProducers() {
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,303,return advisdoryForFastProducers;
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,309,public void setAdvisdoryForFastProducers(boolean advisdoryForFastProducers) {
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,310,this.advisdoryForFastProducers = advisdoryForFastProducers;
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,379,broker.fastProducer(context, producerInfo);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,69,private boolean advisdoryForFastProducers;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,130,destination.setAdvisdoryForFastProducers(isAdvisdoryForFastProducers());
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,516,public boolean isAdvisdoryForFastProducers() {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,517,return advisdoryForFastProducers;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,523,public void setAdvisdoryForFastProducers(boolean advisdoryForFastProducers) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,524,this.advisdoryForFastProducers = advisdoryForFastProducers;
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQInitialContextFactory.java,50,private static final String[] DEFAULT_CONNECTION_FACTORY_NAMES = {"ConnectionFactory", "QueueConnectionFactory", "TopicConnectionFactory"};
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,174,((TopicRegion)topicRegion).setKeepDurableSubsActive(keepDurableSubsActive);
activemq-core/src/main/java/org/apache/activemq/network/jms/DestinationBridge.java,115,if (attempt > 0) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,124,oldMessages = messageEvictionStrategy.evictMessages(list);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,128,messagesToEvict = oldMessages.length;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,129,for (int i = 0; i < messagesToEvict; i++) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,130,MessageReference oldMessage = oldMessages[i];
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,131,discard(oldMessage);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,300,return getDispatchedQueueSize()  >= info.getPrefetchSize();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,371,private void dispatchMatched() throws IOException {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,374,ConsumerId id = new ConsumerId(sessionId, consumerIdGenerator.getNextSequenceId());
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,310,ActiveMQTopic topic = AdvisorySupport.getSlowConsumerAdvisoryTopic(destination.getActiveMQDestination());
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,311,ActiveMQMessage advisoryMessage = new ActiveMQMessage();
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,312,advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_CONSUMER_ID, subs.getConsumerInfo().getConsumerId().toString());
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,313,fireAdvisory(context, topic, subs.getConsumerInfo(), null, advisoryMessage);
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,322,ActiveMQTopic topic = AdvisorySupport.getFastProducerAdvisoryTopic(producerInfo.getDestination());
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,323,ActiveMQMessage advisoryMessage = new ActiveMQMessage();
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,324,advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_PRODUCER_ID, producerInfo.getProducerId().toString());
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,325,fireAdvisory(context, topic, producerInfo, null, advisoryMessage);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DatabaseLocker.java,32,boolean keepAlive();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,112,public boolean keepAlive() {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,486,LOG.error("Failed to get database when trying keepalive: " + e, e);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,495,LOG.info("No longer able to keep the exclusive lock so giving up being a master");
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,86,+ "( ID " + longDataType + " NOT NULL, TIME " + longDataType
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,178,int intialParen = ssp.indexOf("(");
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,179,if (intialParen == 0) {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,180,rc.host = ssp.substring(0, intialParen);
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,186,p = ssp.lastIndexOf(")");
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,187,componentString = ssp.substring(intialParen + 1, p);
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,330,public int indexOfParenthesisMatch(String str) {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,331,int result = -1;
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,333,return result;
activemq-core/src/main/java/org/apache/activemq/command/XATransactionId.java,21,import org.apache.activemq.util.HexSupport;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,45,void doRemoveMessage(TransactionContext c, long seq) throws SQLException, IOException;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,138,adapter.doRemoveMessage(c, seq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,138,transactionStore = new MemoryTransactionStore(this);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,326,+ " WHERE CONTAINER=?";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,21,import java.io.OutputStream;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,28,import javax.jms.JMSException;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,55,ResultSet rs = null;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,280,public void doRemoveMessage(TransactionContext c, long seq) throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,289,s.setLong(1, seq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,667,s.setString(1, destination.getQualifiedName());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,668,s.setString(2, clientId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,669,s.setString(3, subscriberName);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,671,if (!rs.next()) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,672,return null;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,674,return getBinaryData(rs, 1);
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,47,ConcurrentHashMap<Object, Tx> inflightTransactions = new ConcurrentHashMap<Object, Tx>();
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,48,ConcurrentHashMap<TransactionId, Tx> preparedTransactions = new ConcurrentHashMap<TransactionId, Tx>();
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,49,final PersistenceAdapter persistenceAdapter;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,142,return new ProxyTopicMessageStore(messageStore) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,156,public void prepare(TransactionId txid) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,196,public void rollback(TransactionId txid) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,186,if (tx == null) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,187,return;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,19,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,20,import java.util.ArrayList;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,21,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,22,import java.util.concurrent.ConcurrentHashMap;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,134,throw new ProtocolException("Illegal destination name: [" + name + "] -- ActiveMQ STOMP destinations "
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,84,requestTimeout = asLong(name);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,117,String point = "activemq:"
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,119,+ "?requestTimeout=" + requestTimeout;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,121,String body = (String)client.getProducerTemplate().requestBody(point, text);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,124,writeMessageResponse(response.getWriter(), answer);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,126,IOException ex = new IOException();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,127,ex.initCause(e);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,128,throw ex;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,134,long timeToLive = getSendTimeToLive(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,389,if (txt.startsWith("<?")) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,390,txt = txt.substring(txt.indexOf("?>") + 2);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,392,writer.print(txt);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,396,writer.print(object.toString());
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,406,String clientId = request.getParameter("clientId");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,407,if (clientId != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,408,synchronized(this) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,409,LOG.debug("Getting local client [" + clientId + "]");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,410,WebClient client = clients.get(clientId);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,411,if (client == null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,412,LOG.debug("Creating new client [" + clientId + "]");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,413,client = new WebClient();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,414,clients.put(clientId, client);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,416,return client;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,420,return WebClient.getWebClient(request);
activemq-pool/src/main/java/org/apache/activemq/pool/XaConnectionPool.java,27,import org.apache.activemq.ActiveMQConnection;
activemq-pool/src/main/java/org/apache/activemq/pool/XaConnectionPool.java,28,import org.apache.commons.pool.ObjectPoolFactory;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,378,if (txt.startsWith("<?")) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,379,txt = txt.substring(txt.indexOf("?>") + 2);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,381,writer.print(txt);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,385,writer.print(object.toString());
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,137,consumers.add(sub);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,139,subscriptionRecoveryPolicy.recover(context, this, sub);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,147,consumers.add(sub);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,45,if (keyPassword == null) {
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,48,if (keyStoreType != null) {
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,51,if (secureRandomCertficateAlgorithm != null) {
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,54,if (keyCertificateAlgorithm != null) {
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,57,if (trustCertificateAlgorithm != null) {
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,60,if (protocol != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,294,dispatched.remove(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,138,synchronized (pending) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,144,topic.deactivate(context, this);
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,147,for (final MessageReference node : dispatched) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,149,Integer count = redeliveredMessages.get(node.getMessageId());
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,150,if (count != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,151,redeliveredMessages.put(node.getMessageId(), Integer.valueOf(count.intValue() + 1));
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,153,redeliveredMessages.put(node.getMessageId(), Integer.valueOf(1));
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,156,synchronized (pending) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,157,pending.addMessageFirst(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,160,node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,163,synchronized(dispatched) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,164,dispatched.clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,166,if (!keepDurableSubsActive && pending.isTransient()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,167,synchronized (pending) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,242,synchronized (pending) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,256,synchronized(dispatched) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,23,import java.util.concurrent.CopyOnWriteArrayList;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,57,protected final List<MessageReference> dispatched = new CopyOnWriteArrayList<MessageReference>();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,66,private final Object dispatchLock = new Object();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,206,thread.setDaemon(true);
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopicInterceptor.java,50,return new ActiveMQQueue(prefix + original.getPhysicalName() + postfix);
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,25,public class JmDNS
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,46,protected boolean closed = false;
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,168,public JmDNS() throws IOException
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,171,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,186,public JmDNS(InetAddress addr) throws IOException
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,188,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,204,private void init(InetAddress address, String name) throws IOException
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,246,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,257,private void openMulticastSocket(HostInfo hostInfo) throws IOException
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,282,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,363,public InetAddress getInterface() throws IOException
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,401,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,451,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,489,public void addServiceTypeListener(ServiceTypeListener listener) throws IOException
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,586,public void registerService(ServiceInfo info) throws IOException
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,601,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,637,new Canceler(info, lock).start();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,640,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,644,lock.wait();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,676,Object lock = new Object();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,677,new Canceler(list, lock).start();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,680,synchronized (lock) {
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,681,if (!closed) {
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,682,lock.wait();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,730,do
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,752,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,770,do
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,806,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,814,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,912,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,929,private void handleResponse(DNSIncoming msg) throws IOException
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,951,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,957,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,986,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1008,private void handleQuery(DNSIncoming in, InetAddress addr, int port) throws IOException
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1021,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1031,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1051,DNSOutgoing addAnswer(DNSIncoming in, InetAddress addr, int port, DNSOutgoing out, DNSRecord rec) throws IOException
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1057,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1078,private void send(DNSOutgoing out) throws IOException
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1085,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1101,class SocketListener implements Runnable
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1105,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1117,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1137,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1164,private class RecordReaper extends TimerTask
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1223,private class Prober extends TimerTask
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1259,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1269,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1304,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1359,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1392,private class Announcer extends TimerTask
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1452,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1506,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1532,private class Renewer extends TimerTask
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1592,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1646,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1672,private class Responder extends TimerTask
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1706,|| q.type == DNSConstants.TYPE_TXT
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1707,|| q.type == DNSConstants.TYPE_A
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1708,|| q.type == DNSConstants.TYPE_AAAA
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1710,|| services.containsKey(q.name.toLowerCase()));
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1743,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1783,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1794,case DNSConstants.TYPE_A:
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1798,DNSRecord answer = localHost.getDNS4AddressRecord();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1801,answers.add(answer);
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1803,break;
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1805,case DNSConstants.TYPE_AAAA:
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1808,DNSRecord answer = localHost.getDNS6AddressRecord();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1811,answers.add(answer);
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1813,break;
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1815,case DNSConstants.TYPE_PTR:
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1822,ServiceInfo info = (ServiceInfo) serviceIterator.next();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1827,DNSRecord answer = localHost.getDNS4AddressRecord();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1830,answers.add(answer);
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1832,answer = localHost.getDNS6AddressRecord();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1835,answers.add(answer);
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1837,answers.add(new DNSRecord.Pointer(info.type, DNSConstants.TYPE_PTR, DNSConstants.CLASS_IN, DNSConstants.DNS_TTL, info.getQualifiedName()));
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1838,answers.add(new DNSRecord.Service(info.getQualifiedName(), DNSConstants.TYPE_SRV, DNSConstants.CLASS_IN | DNSConstants.CLASS_UNIQUE, DNSConstants.DNS_TTL, info.priority, info.weight, info.port, localHost.getName()));
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1839,answers.add(new DNSRecord.Text(info.getQualifiedName(), DNSConstants.TYPE_TXT, DNSConstants.CLASS_IN | DNSConstants.CLASS_UNIQUE, DNSConstants.DNS_TTL, info.text));
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1847,answers.add(new DNSRecord.Pointer("_services._mdns._udp.local.", DNSConstants.TYPE_PTR, DNSConstants.CLASS_IN, DNSConstants.DNS_TTL, (String) serviceTypeIterator.next()));
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1850,break;
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1854,case DNSConstants.TYPE_TXT:
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1856,ServiceInfo info = (ServiceInfo) services.get(q.name.toLowerCase());
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1859,DNSRecord answer = localHost.getDNS4AddressRecord();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1862,answers.add(answer);
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1864,answer = localHost.getDNS6AddressRecord();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1867,answers.add(answer);
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1869,answers.add(new DNSRecord.Pointer(info.type, DNSConstants.TYPE_PTR, DNSConstants.CLASS_IN, DNSConstants.DNS_TTL, info.getQualifiedName()));
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1870,answers.add(new DNSRecord.Service(info.getQualifiedName(), DNSConstants.TYPE_SRV, DNSConstants.CLASS_IN | DNSConstants.CLASS_UNIQUE, DNSConstants.DNS_TTL, info.priority, info.weight, info.port, localHost.getName()));
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1871,answers.add(new DNSRecord.Text(info.getQualifiedName(), DNSConstants.TYPE_TXT, DNSConstants.CLASS_IN | DNSConstants.CLASS_UNIQUE, DNSConstants.DNS_TTL, info.text));
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1873,break;
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1875,default :
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1878,break;
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1937,private class TypeResolver extends TimerTask
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1951,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1966,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1973,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1997,private class ServiceResolver extends TimerTask
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2017,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2030,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2041,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2048,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2072,private class ServiceInfoResolver extends TimerTask
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2094,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2116,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2124,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2144,private class Canceler extends TimerTask
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2196,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2223,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2228,closed=true;
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2246,private class Shutdown implements Runnable
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2287,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2422,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2433,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2471,private static class ServiceCollector implements ServiceListener
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2553,else
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,69,String key = (String)entry.getKey();
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,70,String value = (String)entry.getValue();
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,72,if (key.startsWith("java.naming.queue")) {
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,73,String key1 = key.substring("java.naming.queue.".length());
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,74,key1 = key1.replace('.', '/');
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,75,environment1.put("queue." + key1, value);
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,77,String key1 = key.substring("java.naming.topic.".length());
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,78,key1 = key1.replace('.', '/');
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,79,environment1.put("topic." + key1, value);
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,81,String key1 = key.substring("java.naming.".length());
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,82,environment1.put(key1, value);
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,84,String key1 = key.substring("java.naming.".length());
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,85,environment1.put(key1, value);
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,90,value = value.replace(';', ',');
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,91,environment1.put(Context.PROVIDER_URL, value);
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,93,environment1.put(key, value);
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,85,public ConnectionConsumer createConnectionConsumer(Destination destination, String selector,
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,87,throws JMSException {
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,89,.createConnectionConsumer(destination, selector, serverSessionPool, maxMessages);
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,92,public ConnectionConsumer createConnectionConsumer(Topic topic, String s,
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,94,throws JMSException {
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,98,public ConnectionConsumer createDurableConnectionConsumer(Topic topic, String selector, String s1,
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,100,throws JMSException {
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,124,public ConnectionConsumer createConnectionConsumer(Queue queue, String selector,
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,126,throws JMSException {
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,133,return (QueueSession)createSession(transacted, ackMode);
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,137,return (TopicSession)createSession(transacted, ackMode);
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,141,return pool.createSession(transacted, ackMode);
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,166,return (ActiveMQSession)getConnection().createSession(key.isTransacted(), key.getAckMode());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,166,if (messages.isRecoveryRequired()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,155,if (keepDurableSubsActive&& pending.isTransient()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,57,audit=null;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,60,PreparedStatement statement = null;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,66,statement = connection.prepareStatement(sql);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,87,if (null != statement) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,89,statement.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,93,statement = null;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,113,PreparedStatement statement = null;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,116,statement = connection.prepareStatement(statements.getLockUpdateStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,117,statement.setLong(1, System.currentTimeMillis());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,118,int rows = statement.executeUpdate();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,125,if (statement != null) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,127,statement.close();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,81,nonPersistent.stop();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,82,nonPersistent.gc();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,63,public void doStop() throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,64,if (isStarting()) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,65,setPendingStop(true);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,66,return;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,68,synchronized (this) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,69,unregisterMBean(byClientIdName);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,70,unregisterMBean(byAddressName);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,71,byClientIdName = null;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,72,byAddressName = null;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,74,super.doStop();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,158,pendingCount = persistent.size() + nonPersistent.size();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,96,for (Destination dest: destinations) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,97,dest.slowConsumer(getContext(), this);
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,180,prefetchExtension = 0;
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,231,+ getPendingQueueSize() + ", dispatched=" + dispatchCounter + ", inflight=" + dispatched.size() + ", prefetchExtension=" + this.prefetchExtension;
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,257,for (Iterator iter = dispatched.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,258,MessageReference node = (MessageReference) iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,58,protected int prefetchExtension;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,90,final long dispatchCounterBeforePull;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,91,synchronized(this) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,92,prefetchExtension++;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,93,dispatchCounterBeforePull = dispatchCounter;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,97,for (Destination dest : destinations) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,98,dest.iterate();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,100,dispatchPending();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,104,if (dispatchCounterBeforePull == dispatchCounter) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,106,if (pull.getTimeout() == -1) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,108,add(QueueMessageReference.NULL_MESSAGE);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,109,dispatchPending();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,111,if (pull.getTimeout() > 0) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,114,public void run() {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,115,pullTimeout(dispatchCounterBeforePull);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,148,pending.addMessageLast(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,188,assertAckMatchesDispatched(ack);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,369,prefetchExtension = Math.max(0, prefetchExtension
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,370,- (index + 1));
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,414,protected void assertAckMatchesDispatched(MessageAck ack) throws JMSException {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,473,return dispatched.size() - prefetchExtension >= info.getPrefetchSize();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,480,return (dispatched.size() - prefetchExtension) <= (info.getPrefetchSize() * .4);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,487,return (dispatched.size() - prefetchExtension) >= (info.getPrefetchSize() * .9);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,491,return info.getPrefetchSize() + prefetchExtension - dispatched.size();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,542,for (MessageReference r : dispatched) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,543,if( r.getRegionDestination() == destination) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,625,prefetchExtension = Math.max(0, prefetchExtension - 1);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,686,MessageDispatch md = new MessageDispatch();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,688,md.setConsumerId(info.getConsumerId());
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,690,return md;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,692,MessageDispatch md = new MessageDispatch();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,693,md.setConsumerId(info.getConsumerId());
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,697,return md;
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,121,getConnection().setClientID(clientID);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,97,public synchronized void run() {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,91,if (peer.async) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,93,peer.wakeup();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,95,transportListener = peer.transportListener;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,113,transportListener.onCommand(command);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,118,public void start() throws Exception {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,125,Object command;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,201,if (command != null) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,207,return !mq.isEmpty();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,315,protected void wakeup() {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,316,if (async) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,322,try {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,323,taskRunner.wakeup();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,325,Thread.currentThread().interrupt();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,27,import org.apache.activemq.thread.TaskRunnerFactory;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,28,import org.apache.activemq.thread.Valve;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,34,import org.apache.activemq.util.IOExceptionSupport;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,49,protected boolean disposed;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,54,protected LinkedBlockingQueue<Object> messageQueue;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,55,protected boolean started;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,58,private TaskRunner taskRunner;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,59,private final Object lazyInitMutext = new Object();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,60,private final Valve enqueueValve = new Valve(true);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,73,if (disposed) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,81,TransportListener transportListener=null;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,84,peer.enqueueValve.increment();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,86,if (peer.disposed || peer.stopping.get()) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,90,if (peer.started) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,92,peer.getMessageQueue().put(command);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,99,peer.getMessageQueue().put(command);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,106,peer.enqueueValve.decrement();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,109,if( transportListener!=null ) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,110,if( command == DISCONNECT ) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,111,transportListener.onException(new TransportDisposedIOException("Peer (" + peer.toString() + ") disposed."));
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,119,if (transportListener == null) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,120,throw new IOException("TransportListener not set.");
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,122,try {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,123,enqueueValve.turnOff();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,124,if (messageQueue != null && !async) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,126,while ((command = messageQueue.poll()) != null && !stopping.get() ) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,130,started = true;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,131,wakeup();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,133,enqueueValve.turnOn();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,137,if( stopping.get() ) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,138,stop();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,143,stopping.set(true);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,146,if( enqueueValve.isOn() ) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,154,TaskRunner tr = null;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,155,try {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,156,enqueueValve.turnOff();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,157,if (!disposed) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,158,started = false;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,159,disposed = true;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,160,if (taskRunner != null) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,161,tr = taskRunner;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,162,taskRunner = null;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,166,stopping.set(false);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,167,enqueueValve.turnOn();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,169,if (tr != null) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,170,tr.shutdown(1000);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,180,final TransportListener tl;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,181,try {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,183,enqueueValve.increment();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,184,tl = transportListener;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,185,if (!started || disposed || tl == null || stopping.get()) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,186,if( stopping.get() ) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,189,getMessageQueue().clear();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,191,return false;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,196,enqueueValve.decrement();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,199,LinkedBlockingQueue<Object> mq = getMessageQueue();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,202,if( command == DISCONNECT ) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,203,tl.onException(new TransportDisposedIOException("Peer (" + peer.toString() + ") disposed."));
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,205,tl.onCommand(command);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,215,try {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,218,this.transportListener = commandListener;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,219,wakeup();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,224,throw new RuntimeException(e);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,228,private LinkedBlockingQueue<Object> getMessageQueue() {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,229,synchronized (lazyInitMutext) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,230,if (messageQueue == null) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,231,messageQueue = new LinkedBlockingQueue<Object>(this.asyncQueueDepth);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,233,return messageQueue;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,317,synchronized (lazyInitMutext) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,318,if (taskRunner == null) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,334,public boolean isDisposed() {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,335,return disposed;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,338,public boolean isConnected() {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,339,return started;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,342,public void reconnect(URI uri) throws IOException {
activemq-web/src/main/java/org/apache/activemq/web/DestinationFacade.java,108,if (jmsDestination == null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1145,if (optimizedDispatch || isSlave()) {
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,45,public abstract class ActiveMQDestination extends JNDIBaseStorable implements DataStructure, Destination, Externalizable, Comparable {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1932,protected void startDestinationsInPersistenceStore(Broker broker) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1933,Set destinations = destinationFactory.getDestinations();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1934,if (destinations != null) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1935,Iterator iter = destinations.iterator();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1937,ConnectionContext adminConnectionContext = broker.getAdminConnectionContext();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1938,if (adminConnectionContext == null) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1939,ConnectionContext context = new ConnectionContext();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1940,context.setBroker(broker);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1941,adminConnectionContext = context;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1942,broker.setAdminConnectionContext(adminConnectionContext);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,415,demandConsumerDispatched++;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,416,if (demandConsumerDispatched > (demandConsumerInfo.getPrefetchSize() * .75)) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,417,remoteBroker.oneway(new MessageAck(md, MessageAck.STANDARD_ACK_TYPE, demandConsumerDispatched));
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,418,demandConsumerDispatched = 0;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,19,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,20,import java.net.URI;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,21,import java.util.HashMap;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,22,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,23,import java.util.LinkedList;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,24,import java.util.List;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,25,import java.util.Map;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,26,import java.util.Properties;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,27,import java.util.concurrent.ConcurrentHashMap;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,28,import java.util.concurrent.CountDownLatch;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,29,import java.util.concurrent.TimeUnit;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,30,import java.util.concurrent.atomic.AtomicBoolean;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,31,import java.util.concurrent.atomic.AtomicInteger;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,32,import java.util.concurrent.atomic.AtomicReference;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,33,import java.util.concurrent.locks.ReentrantReadWriteLock;
activemq-core/src/main/java/org/apache/activemq/transport/failover/BackupTransport.java,21,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/transport/failover/BackupTransport.java,22,import java.net.URI;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,20,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,21,import java.io.InterruptedIOException;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,22,import java.net.URI;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,23,import java.util.ArrayList;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,24,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,25,import java.util.LinkedHashMap;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,26,import java.util.List;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,27,import java.util.Map;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,29,import java.util.concurrent.CopyOnWriteArrayList;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,30,import java.util.concurrent.atomic.AtomicReference;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,216,try {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,217,enqueueValve.turnOff();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,221,enqueueValve.turnOn();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,57,return broker.getBrokerId().toString();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,61,return broker.getBrokerName();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,77,return broker.getDestinationStatistics().getEnqueues().getCount();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,81,return broker.getDestinationStatistics().getDequeues().getCount();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,85,return broker.getDestinationStatistics().getConsumers().getCount();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,89,return broker.getDestinationStatistics().getMessages().getCount();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,93,return broker.getDestinationStatistics().getMessagesCached().getCount();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,135,broker.getDestinationStatistics().reset();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,139,broker.getDestinationStatistics().setEnabled(true);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,143,broker.getDestinationStatistics().setEnabled(false);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,147,return broker.getDestinationStatistics().isEnabled();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,163,return broker.getTopics();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,167,return broker.getQueues();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,171,return broker.getTemporaryTopics();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,175,return broker.getTemporaryQueues();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,179,return broker.getTopicSubscribers();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,183,return broker.getDurableTopicSubscribers();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,187,return broker.getQueueSubscribers();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,191,return broker.getTemporaryTopicSubscribers();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,195,return broker.getTemporaryQueueSubscribers();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,199,return broker.getInactiveDurableTopicSubscribers();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,236,1000);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,241,1000);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,247,context.setBroker(broker);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,258,Subscription subscription = broker.addConsumer(context, info);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,259,broker.removeConsumer(context, info);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,271,context.setBroker(broker);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,273,broker.removeSubscription(context, info);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,25,import javax.jms.JMSException;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,27,import org.apache.activemq.command.ActiveMQDestination;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,28,import org.apache.activemq.command.ActiveMQMessage;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,29,import org.apache.activemq.command.ConsumerInfo;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,30,import org.apache.activemq.command.MessageAck;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,31,import org.apache.activemq.command.MessageDispatch;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,32,import org.apache.activemq.command.MessageId;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,19,import java.io.DataInput;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,20,import java.io.DataInputStream;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,21,import java.io.DataOutput;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,22,import java.io.DataOutputStream;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,23,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,24,import java.util.HashMap;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,26,import java.util.Map;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,131,if (contentLength != null) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,305,response = command.visit(this);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,293,dispatchAsync(ce);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,307,if (responseRequired) {
activemq-console/src/main/java/org/apache/activemq/console/filter/MessagesQueryFilter.java,80,CompositeData[] messages = (CompositeData[]) jmxConnection.invoke(destName, "browse", new Object[] {}, new String[] {});
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,167,store.recover(new MessageRecoveryListener() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,169,public boolean recoverMessage(Message message) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,174,return true;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,176,if (hasSpace()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,177,message.setRegionDestination(Queue.this);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,179,try {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,180,messages.addMessageLast(message);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,185,destinationStatistics.getMessages().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,186,return true;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,188,return false;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,191,public boolean recoverMessageReference(MessageId messageReference) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,192,throw new RuntimeException("Should not be called.");
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,195,public boolean hasSpace() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,196,return true;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,200,int messageCount = store.getMessageCount();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,456,broker.acknowledge(consumerExchange, ack);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,809,if (stopping.get()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1244,jmsEx = JMSExceptionSupport.create(er.getException());
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/LastImageSubscriptionRecoveryPolicy.java,61,DestinationFilter filter = DestinationFilter.parseFilter(destination);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/LastImageSubscriptionRecoveryPolicy.java,62,if (filter.matches(lastImage.getMessage().getDestination())) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/LastImageSubscriptionRecoveryPolicy.java,63,result.add(lastImage.getMessage());
activemq-core/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,59,private DataStructure marshallCache[] = new DataStructure[MARSHAL_CACHE_SIZE];
activemq-core/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,60,private DataStructure unmarshallCache[] = new DataStructure[MARSHAL_CACHE_SIZE];
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2120,if (text.equals("shutdown")) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,37,import org.apache.activemq.command.BrokerInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,38,import org.apache.activemq.command.Command;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,39,import org.apache.activemq.command.CommandTypes;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,40,import org.apache.activemq.command.ConnectionControl;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,41,import org.apache.activemq.command.ConnectionError;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,42,import org.apache.activemq.command.ConnectionId;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,43,import org.apache.activemq.command.ConnectionInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,44,import org.apache.activemq.command.ConsumerControl;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,45,import org.apache.activemq.command.ConsumerId;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,46,import org.apache.activemq.command.ConsumerInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,47,import org.apache.activemq.command.ControlCommand;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,48,import org.apache.activemq.command.DataArrayResponse;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,49,import org.apache.activemq.command.DestinationInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,50,import org.apache.activemq.command.ExceptionResponse;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,51,import org.apache.activemq.command.FlushCommand;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,52,import org.apache.activemq.command.IntegerResponse;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,53,import org.apache.activemq.command.KeepAliveInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,54,import org.apache.activemq.command.Message;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,55,import org.apache.activemq.command.MessageAck;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,56,import org.apache.activemq.command.MessageDispatch;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,57,import org.apache.activemq.command.MessageDispatchNotification;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,58,import org.apache.activemq.command.MessagePull;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,59,import org.apache.activemq.command.ProducerAck;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,60,import org.apache.activemq.command.ProducerId;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,61,import org.apache.activemq.command.ProducerInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,62,import org.apache.activemq.command.RemoveSubscriptionInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,63,import org.apache.activemq.command.Response;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,64,import org.apache.activemq.command.SessionId;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,65,import org.apache.activemq.command.SessionInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,66,import org.apache.activemq.command.ShutdownInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,67,import org.apache.activemq.command.TransactionId;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,68,import org.apache.activemq.command.TransactionInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,69,import org.apache.activemq.command.WireFormatInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,597,for (Iterator iter = session.getConsumerIds().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,605,for (Iterator iter = session.getProducerIds().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,702,for (Iterator iter = cs.getSessionIds().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,975,for (Iterator<Command> iter = dispatchQueue.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,210,return new HashMap<ActiveMQDestination, Destination>(destinations);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,114,Map<ActiveMQDestination, Destination> answer = getQueueRegion().getDestinationMap();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,262,server = null;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,54,private LinkedList<MessageReference> memoryList = new LinkedList<MessageReference>();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,177,memoryList.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,186,memoryList.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,218,memoryList.addFirst(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,227,memoryList.addFirst(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,286,if (memoryList.remove(node)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,351,LinkedList<MessageReference> tmpList = new LinkedList<MessageReference>(this.memoryList);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,352,this.memoryList = new LinkedList<MessageReference>();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,353,while (!tmpList.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,354,MessageReference node = tmpList.removeFirst();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,358,memoryList.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,368,while (!memoryList.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,369,MessageReference node = memoryList.removeFirst();
activemq-web/src/main/java/org/apache/activemq/web/MessageServletSupport.java,128,if (correlationID != null) {
activemq-pool/src/main/java/org/apache/activemq/pool/PooledSession.java,311,return consumer;
activemq-pool/src/main/java/org/apache/activemq/pool/PooledSession.java,324,public String toString() {
activemq-pool/src/main/java/org/apache/activemq/pool/PooledSession.java,325,return "PooledSession { " + session + " }";
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1235,result.setConnectionContext(context);
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,28,private static final ClassLoader FALLBACK_CLASS_LOADER = ClassLoadingAwareObjectInputStream.class.getClassLoader();
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,35,protected Class resolveClass(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException {
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,40,protected Class resolveProxyClass(String[] interfaces) throws IOException, ClassNotFoundException {
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,48,return Proxy.getProxyClass(cinterfaces[0].getClassLoader(), cinterfaces);
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,55,throws ClassNotFoundException {
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,59,final Class clazz = (Class) primClasses.get(className);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1850,public List getUnconsumedMessages() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,197,List getUnconsumedMessages() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,108,private static final IdGenerator CONNECTION_ID_GENERATOR = new IdGenerator();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,628,ServiceSupport.dispose(this.transport);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,647,LOG.error("Error shutting down thread pool " + e,e);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,475,LOG.debug("Caught exception closing socket",e);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,482,latch.await(1,TimeUnit.SECONDS);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,79,connector = new SocketConnector();
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,84,server.setConnectors(new Connector[] {
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,85,connector
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,88,ContextHandler contextHandler = new ContextHandler();
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,89,contextHandler.setContextPath("/");
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,90,contextHandler.setServer(server);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,91,server.setHandler(contextHandler);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,93,SessionHandler sessionHandler = new SessionHandler();
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,94,contextHandler.setHandler(sessionHandler);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,96,ServletHandler servletHandler = new ServletHandler();
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,97,sessionHandler.setHandler(servletHandler);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,99,ServletHolder holder = new ServletHolder();
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,100,holder.setName("httpTunnel");
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,101,holder.setClassName(HttpTunnelServlet.class.getName());
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,102,servletHandler.setServlets(new ServletHolder[] {
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,103,holder
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,106,ServletMapping mapping = new ServletMapping();
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,107,mapping.setServletName("httpTunnel");
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,108,mapping.setPathSpec("/*");
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,109,servletHandler.setServletMappings(new ServletMapping[] {
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,110,mapping
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,41,sslConnector.setKeystore(keyStore);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,42,sslConnector.setPassword(keyStorePassword);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,46,sslConnector.setKeyPassword(keyStorePassword);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,49,sslConnector.setKeystoreType(keyStoreType);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,52,sslConnector.setSecureRandomAlgorithm(secureRandomCertficateAlgorithm);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,55,sslConnector.setSslKeyManagerFactoryAlgorithm(keyCertificateAlgorithm);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,58,sslConnector.setSslTrustManagerFactoryAlgorithm(trustCertificateAlgorithm);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,61,sslConnector.setProtocol(protocol);
activemq-optional/src/main/java/org/apache/activemq/transport/util/TextWireFormat.java,37,public abstract Object unmarshalText(String text);
activemq-optional/src/main/java/org/apache/activemq/transport/util/TextWireFormat.java,39,public abstract Object unmarshalText(Reader reader);
activemq-optional/src/main/java/org/apache/activemq/transport/util/TextWireFormat.java,41,public abstract String marshalText(Object command);
activemq-optional/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java,58,public String marshalText(Object command) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,341,Map map = URISupport.parseQuery(this.brokerURL.getQuery());
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,342,if (buildFromMap(IntrospectionSupport.extractProperties(map, "jms."))) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,354,if (buildFromMap(IntrospectionSupport.extractProperties(data.getParameters(), "jms."))) {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,27,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,107,if (uri != null) {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,265,public static String createQueryString(Map options) throws URISyntaxException {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,270,for (Iterator iter = options.keySet().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,276,String key = (String)iter.next();
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,296,public static URI createRemainingURI(URI originalURI, Map params) throws URISyntaxException {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,638,if (!message.isResponseRequired()) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,491,LOG.error("Failed to start ActiveMQ JMS Message Broker. Reason: " + e, e);
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,21,import org.apache.activemq.command.BrokerId;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,22,import org.apache.activemq.command.BrokerInfo;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,24,import org.apache.activemq.command.ConsumerInfo;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,25,import org.apache.activemq.command.Endpoint;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,26,import org.apache.activemq.command.NetworkBridgeFilter;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,28,import org.apache.activemq.util.ServiceSupport;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,43,protected final BrokerId remoteBrokerPath[] = new BrokerId[] {null};
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,44,protected Object brokerInfoMutex = new Object();
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,50,remoteBrokerNameKnownLatch.countDown();
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,53,protected void serviceRemoteBrokerInfo(Command command) throws IOException {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,54,synchronized (brokerInfoMutex) {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,55,BrokerInfo remoteBrokerInfo = (BrokerInfo)command;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,56,BrokerId remoteBrokerId = remoteBrokerInfo.getBrokerId();
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,60,Endpoint from = command.getFrom();
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,61,if (from == null) {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,62,LOG.warn("Incoming command does not have a from endpoint: " + command);
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,64,from.setBrokerInfo(remoteBrokerInfo);
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,66,if (localBrokerId != null) {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,67,if (localBrokerId.equals(remoteBrokerId)) {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,68,LOG.info("Disconnecting loop back connection.");
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,70,ServiceSupport.dispose(this);
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,74,triggerLocalStartBridge();
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,79,protected void addRemoteBrokerToBrokerPath(ConsumerInfo info) throws IOException {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,80,info.setBrokerPath(appendToBrokerPath(info.getBrokerPath(), getFromBrokerId(info)));
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,86,protected BrokerId getFromBrokerId(Command command) throws IOException {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,87,BrokerId answer = null;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,88,Endpoint from = command.getFrom();
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,89,if (from == null) {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,90,LOG.warn("Incoming command does not have a from endpoint: " + command);
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,92,answer = from.getBrokerId();
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,94,if (answer != null) {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,95,return answer;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,97,throw new IOException("No broker ID is available for endpoint: " + from + " from command: "
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,98,+ command);
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,110,protected BrokerId[] getRemoteBrokerPath() {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,111,return remoteBrokerPath;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,19,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,21,import org.apache.activemq.command.BrokerId;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,22,import org.apache.activemq.command.BrokerInfo;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,23,import org.apache.activemq.command.Command;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,24,import org.apache.activemq.command.ConsumerInfo;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,25,import org.apache.activemq.command.NetworkBridgeFilter;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,27,import org.apache.activemq.util.ServiceSupport;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,41,protected final BrokerId remoteBrokerPath[] = new BrokerId[] {null};
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,42,protected Object brokerInfoMutex = new Object();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,43,protected BrokerId remoteBrokerId;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,50,protected void serviceRemoteBrokerInfo(Command command) throws IOException {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,51,synchronized (brokerInfoMutex) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,52,BrokerInfo remoteBrokerInfo = (BrokerInfo)command;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,53,remoteBrokerId = remoteBrokerInfo.getBrokerId();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,54,remoteBrokerPath[0] = remoteBrokerId;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,55,remoteBrokerName = remoteBrokerInfo.getBrokerName();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,56,if (localBrokerId != null) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,57,if (localBrokerId.equals(remoteBrokerId)) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,60,ServiceSupport.dispose(this);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,64,remoteBrokerNameKnownLatch.countDown();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,68,protected void addRemoteBrokerToBrokerPath(ConsumerInfo info) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,69,info.setBrokerPath(appendToBrokerPath(info.getBrokerPath(), getRemoteBrokerPath()));
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,72,protected void serviceLocalBrokerInfo(Command command) throws InterruptedException {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,73,synchronized (brokerInfoMutex) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,74,localBrokerId = ((BrokerInfo)command).getBrokerId();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,75,localBrokerPath[0] = localBrokerId;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,76,if (remoteBrokerId != null) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,77,if (remoteBrokerId.equals(localBrokerId)) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,79,waitStarted();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,80,ServiceSupport.dispose(this);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,90,protected BrokerId[] getRemoteBrokerPath() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,91,return remoteBrokerPath;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,66,import org.apache.activemq.transport.TransportListener;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,110,protected CountDownLatch remoteBrokerNameKnownLatch = new CountDownLatch(1);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,269,remoteBrokerNameKnownLatch.await();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,336,triggerLocalStartBridge();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,992,protected abstract void serviceLocalBrokerInfo(Command command) throws InterruptedException;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,994,protected abstract void addRemoteBrokerToBrokerPath(ConsumerInfo info) throws IOException;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,996,protected abstract void serviceRemoteBrokerInfo(Command command) throws IOException;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,999,protected abstract BrokerId[] getRemoteBrokerPath();
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,81,if ( localURI.equals(uri) || (connectionFilter != null && !connectionFilter.connectTo(uri))) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,130,return converter.createTempQueue(name);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,132,return converter.createTempTopic(name);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,593,rc = new ActiveMQTempQueue(connectionId, tempDestinationGenerator.getNextSequenceId());
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,595,tempDestinations.put(name, rc);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,597,return rc;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,601,ActiveMQDestination rc = tempDestinations.get(name);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,602,if( rc == null ) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,603,rc = new ActiveMQTempTopic(connectionId, tempDestinationGenerator.getNextSequenceId());
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,111,protected final AtomicBoolean remoteInterupted = new AtomicBoolean(false);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,154,remoteBroker.setTransportListener(new TransportListener() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,165,public void transportInterupted() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,168,if (remoteInterupted.compareAndSet(false, true)) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,169,LOG.info("Outbound transport to " + remoteBrokerName + " interrupted.");
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,170,if (localBridgeStarted.get()) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,171,clearDownSubscriptions();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,172,synchronized (DemandForwardingBridgeSupport.this) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,173,try {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,174,localBroker.oneway(localConnectionInfo.createRemoveCommand());
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,176,LOG.debug("local broker is now disposed", td);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,178,LOG.warn("Caught exception from local start", e);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,182,localBridgeStarted.set(false);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,183,remoteBridgeStarted.set(false);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,184,startedLatch = new CountDownLatch(2);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,185,localStartedLatch = new CountDownLatch(1);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,189,public void transportResumed() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,190,if (remoteInterupted.compareAndSet(true, false)) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,194,if (!lastConnectSucceeded.get()) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,195,try {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,196,LOG.debug("Previous connection was never fully established. Sleeping for second to avoid busy loop.");
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,197,Thread.sleep(1000);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,199,Thread.currentThread().interrupt();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,202,lastConnectSucceeded.set(false);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,203,try {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,204,startLocalBridge();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,205,remoteBridgeStarted.set(true);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,206,startedLatch.countDown();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,207,LOG.info("Outbound transport to " + remoteBrokerName + " resumed");
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,209,LOG.error("Caught exception  from local start in resume transport", e);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,253,Thread.currentThread().setName("StartRemotelBridge: localBroker=" + localBroker);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,696,if (!remoteInterupted.get()) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,697,stop();
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,77,if( bridges.containsKey(uri) ) {
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,78,LOG.debug("Discovery agent generated a duplicate onServiceAdd event for: "+uri );
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,79,return;
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,140,NetworkBridge bridge = bridges.remove(uri);
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,141,if (bridge == null) {
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,142,return;
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,145,ServiceSupport.dispose(bridge);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,88,private int maxReconnectAttempts;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,207,LOG.debug("Transport failed with the following exception:", e);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,229,LOG.debug("Started.");
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,247,LOG.debug("Stopped.");
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,651,reconnectDelay = initialReconnectDelay;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,686,if (started) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,690,LOG.debug("Connection established");
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,710,LOG.debug("transport resumed by transport listener not set");
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,729,LOG.error("Failed to connect to transport after: " + connectFailures + " attempt(s)");
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,744,if (connectionFailure instanceof IOException) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,750,reconnectMutex.notifyAll();
activemq-core/src/main/java/org/apache/activemq/transport/MutexTransport.java,26,private final Object writeMutex = new Object();
activemq-core/src/main/java/org/apache/activemq/transport/MutexTransport.java,33,synchronized (writeMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/MutexTransport.java,39,synchronized (writeMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/MutexTransport.java,45,synchronized (writeMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/MutexTransport.java,51,synchronized (writeMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,246,sendToActiveMQ(message, createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,315,sendToActiveMQ(tx, createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,339,sendToActiveMQ(tx, createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,361,sendToActiveMQ(tx, createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,426,sendToActiveMQ(info, createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,438,sendToActiveMQ(sub.getConsumerInfo().createRemoveCommand(), createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,528,sendToActiveMQ(new ShutdownInfo(), createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,594,sendToActiveMQ(new DestinationInfo(connectionId, DestinationInfo.ADD_OPERATION_TYPE, rc), null);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,604,sendToActiveMQ(new DestinationInfo(connectionId, DestinationInfo.ADD_OPERATION_TYPE, rc), null);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,179,size--;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,55,final Command command = (Command)o;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,77,if (l!=null) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,87,if (n!=null) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,23,import java.util.concurrent.ConcurrentHashMap;
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,418,List<TransactionContext> l = ENDED_XA_TRANSACTION_CONTEXTS.remove(x);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,419,if (l != null && !l.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,422,ctx.afterRollback();
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,458,List<TransactionContext> l = ENDED_XA_TRANSACTION_CONTEXTS.remove(x);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,459,if (l != null && !l.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,596,List<TransactionContext> l = ENDED_XA_TRANSACTION_CONTEXTS.get(transactionId);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,597,if (l == null) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,598,l = new ArrayList<TransactionContext>(3);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,599,ENDED_XA_TRANSACTION_CONTEXTS.put(transactionId, l);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,600,l.add(this);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,602,l.add(this);
activemq-web/src/main/java/org/apache/activemq/web/MessageServletSupport.java,340,if (answer == null && "text/xml".equals(request.getContentType())) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,411,LOG.debug("Interupted: " + e, e);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,656,Transport t = bt.getTransport();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,657,URI uri = bt.getUri();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,658,t.setTransportListener(myTransportListener);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,659,try {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,663,reconnectDelay = initialReconnectDelay;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,665,connectedTransportURI = uri;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,666,connectedTransport.set(t);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,667,reconnectMutex.notifyAll();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,668,connectFailures = 0;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,669,LOG.info("Successfully reconnected to backup " + uri);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,670,return false;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,679,URI uri = iter.next();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,683,t.setTransportListener(myTransportListener);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,684,t.start();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,687,restoreTransport(t);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,693,connectedTransport.set(t);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,722,LOG.debug("Connect fail to: " + uri + ", reason: " + e);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,371,private boolean isShutdownCommand(Command command) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,384,if (isShutdownCommand(command) && connectedTransport.get() == null) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,391,Response response = new Response();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,392,response.setCorrelationId(command.getCommandId());
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,393,myTransportListener.onCommand(response);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,503,for (int i = 0; i < u.length; i++) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,512,for (int i = 0; i < u.length; i++) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,513,uris.remove(u[i]);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,600,Map tmpMap = null;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,604,for (Iterator<Command> iter2 = tmpMap.values().iterator(); iter2.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,605,Command command = iter2.next();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,636,Exception failure = null;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,637,synchronized (reconnectMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,681,LOG.debug("Attempting connect to: " + uri);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,756,LOG.debug("Waiting " + reconnectDelay + " ms before attempting connection. ");
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,757,synchronized (sleepMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,758,try {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,759,sleepMutex.wait(reconnectDelay);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,761,Thread.currentThread().interrupt();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransportFactory.java,60,Map options = compositData.getParameters();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransportFactory.java,69,public FailoverTransport createTransport(Map parameters) throws IOException {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,40,import org.apache.activemq.MessageAvailableListener;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,275,List consumers = client.getConsumers();
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,37,TimerTask timerTask = new SchedulerTimerTask(task);
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,51,TimerTask timerTask = new SchedulerTimerTask(task);
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,21,import java.util.HashMap;
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,23,import java.util.Map;
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,46,private Map<SessionKey, SessionPool> cache;
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,56,this(connection, new HashMap<SessionKey, SessionPool>(), poolFactory);
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,85,public ConnectionPool(ActiveMQConnection connection, Map<SessionKey, SessionPool> cache, ObjectPoolFactory poolFactory) {
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,103,SessionPool pool = cache.get(key);
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,105,pool = createSessionPool(key);
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,106,cache.put(key, pool);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,80,OutputStream stream = blob.setBinaryStream(data.length);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,81,stream.write(data);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,82,stream.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,83,s.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,87,s.setBlob(1, blob);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,203,discard(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,245,discard(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,356,discard(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,394,protected void discard(MessageReference message) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,395,message.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,397,LOG.debug("Discarding message " + message);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,118,if (ack.getFirstMessageId() == null) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,123,count++;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,399,sendToActiveMQ(consumerInfo, createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,224,public void isFull(ConnectionContext context, Usage usage) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,65,protected final Object destinationsMutex = new Object();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,96,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,106,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,117,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,173,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,203,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,209,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,268,for (Iterator iter = destinationMap.get(info.getDestination()).iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,300,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,315,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,318,Destination dest = (Destination) iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,385,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,419,for (Iterator<Subscription> iter = subscriptions.values().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,420,Subscription sub = iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,423,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,424,for (Iterator<Destination> iter = destinations.values().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,425,Destination dest = iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,446,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,447,for (Iterator iter = destinationMap.get(info.getDestination()).iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,448,Destination dest = (Destination) iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,460,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,461,for (Iterator iter = destinationMap.get(info.getDestination()).iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,81,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,82,for (Iterator<Destination> iter = destinations.values().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,137,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,138,for (Iterator<Destination> iter = destinations.values().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,190,for (Iterator<DurableTopicSubscription> iterator = durableSubscriptions.values().iterator(); iterator.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,191,DurableTopicSubscription sub = iterator.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/VirtualDestinationInterceptor.java,43,public synchronized Destination intercept(Destination destination) {
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/VirtualDestinationInterceptor.java,44,Set virtualDestinations = destinationMap.get(destination.getActiveMQDestination());
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/VirtualDestinationInterceptor.java,46,for (Iterator iter = virtualDestinations.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,354,if (lc == Byte.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,355,if (rc == Short.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,356,lv = Short.valueOf(((Number)lv).shortValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,358,lv = Integer.valueOf(((Number)lv).intValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,360,lv = Long.valueOf(((Number)lv).longValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,362,lv = new Float(((Number)lv).floatValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,364,lv = new Double(((Number)lv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,366,return Boolean.FALSE;
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,369,if (rc == Integer.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,370,lv = Integer.valueOf(((Number)lv).intValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,372,lv = Long.valueOf(((Number)lv).longValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,374,lv = new Float(((Number)lv).floatValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,376,lv = new Double(((Number)lv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,378,return Boolean.FALSE;
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,381,if (rc == Long.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,382,lv = Long.valueOf(((Number)lv).longValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,384,lv = new Float(((Number)lv).floatValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,386,lv = new Double(((Number)lv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,388,return Boolean.FALSE;
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,391,if (rc == Integer.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,392,rv = Long.valueOf(((Number)rv).longValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,394,lv = new Float(((Number)lv).floatValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,396,lv = new Double(((Number)lv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,398,return Boolean.FALSE;
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,401,if (rc == Integer.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,402,rv = new Float(((Number)rv).floatValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,404,rv = new Float(((Number)rv).floatValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,406,lv = new Double(((Number)lv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,408,return Boolean.FALSE;
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,411,if (rc == Integer.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,412,rv = new Double(((Number)rv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,414,rv = new Double(((Number)rv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,416,rv = new Float(((Number)rv).doubleValue());
activemq-fileserver/src/main/java/org/apache/activemq/util/RestFilter.java,181,out.close();
activemq-core/src/main/java/org/apache/activemq/kaha/MapContainer.java,85,boolean containsKey(K key);
activemq-core/src/main/java/org/apache/activemq/kaha/MapContainer.java,93,V get(K key);
activemq-core/src/main/java/org/apache/activemq/kaha/MapContainer.java,99,boolean containsValue(K o);
activemq-core/src/main/java/org/apache/activemq/kaha/MapContainer.java,106,void putAll(Map<K, V> map);
activemq-core/src/main/java/org/apache/activemq/kaha/MapContainer.java,140,V remove(K key);
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,53,private String name;
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,319,private void addChild(T child) {
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,326,private void removeChild(T child) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,367,if (!memoryList.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,881,stop();
activemq-core/src/main/java/org/apache/activemq/util/IdGenerator.java,125,result = id.substring(0, index + 1);
activemq-web/src/main/java/org/apache/activemq/web/SessionPool.java,90,if (session != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,78,if (broker == null) {
activemq-core/src/main/java/org/apache/activemq/util/BitArray.java,125,dataOut.writeByte((int)bits);
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,272,WRITE_CHECK_TIMER.scheduleAtFixedRate(writeCheckerTask, initialDelayTime,writeCheckTime);
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,273,READ_CHECK_TIMER.scheduleAtFixedRate(readCheckerTask, initialDelayTime,readCheckTime);
activemq-console/src/main/java/org/apache/activemq/console/command/PurgeCommand.java,86,List messages = JmxMBeansUtil.createMessageQueryFilter(createJmxConnection(), queueName).query(queryAddObjects);
activemq-console/src/main/java/org/apache/activemq/console/command/PurgeCommand.java,87,purgeMessages(queueName, messages);
activemq-console/src/main/java/org/apache/activemq/console/command/PurgeCommand.java,115,public void purgeMessages(ObjectName queue, List messages) throws Exception {
activemq-console/src/main/java/org/apache/activemq/console/command/PurgeCommand.java,116,Object[] param = new Object[1];
activemq-console/src/main/java/org/apache/activemq/console/command/PurgeCommand.java,117,for (Iterator i = messages.iterator(); i.hasNext();) {
activemq-console/src/main/java/org/apache/activemq/console/command/PurgeCommand.java,118,CompositeData msg = (CompositeData)i.next();
activemq-console/src/main/java/org/apache/activemq/console/command/PurgeCommand.java,119,param[0] = "" + msg.get("JMSMessageID");
activemq-console/src/main/java/org/apache/activemq/console/command/PurgeCommand.java,120,context.printInfo("Removing message: " + param[0] + " from queue: " + queue.getKeyProperty("Destination"));
activemq-console/src/main/java/org/apache/activemq/console/command/PurgeCommand.java,121,createJmxConnection().invoke(queue, "removeMessage", param, new String[] {
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,92,this.jmxUser = jmxUser;
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,108,this.jmxPassword = jmxPassword;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,195,answer.add(OpenTypeSupport.convert(message));
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,864,starting = true;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,887,starting = false;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,888,if (pendingStop) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,889,LOG.debug("Calling the delayed stop()");
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,895,synchronized (this) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,896,pendingStop = true;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,897,if (starting) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,898,LOG.debug("stop() called in the middle of start(). Delaying...");
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,899,return;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1212,private void doAsyncSendPacket(Command command) throws JMSException {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1213,try {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1214,this.transport.oneway(command);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1216,throw JMSExceptionSupport.create(e);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1276,throws JMSException {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1277,try {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1279,if (response != null && response.isException()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1280,ExceptionResponse er = (ExceptionResponse)response;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1281,if (er.getException() instanceof JMSException) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1282,throw (JMSException)er.getException();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1284,throw JMSExceptionSupport.create(er.getException());
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1287,return response;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1289,throw JMSExceptionSupport.create(e);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1758,LOG.debug("Async client internal exception occurred with no exception listener registered: "
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1790,onAsyncException(error);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1791,if (!closing.get() && !closed.get()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1793,public void run() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1794,transportFailed(error);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1795,ServiceSupport.dispose(ActiveMQConnection.this.transport);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1796,brokerInfoReceived.countDown();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1798,for (Iterator<TransportListener> iter = transportListeners
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1799,.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1800,TransportListener listener = iter.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1801,listener.onException(error);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,934,return null;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,841,ActiveMQDestination[] dests = excludedDestinations;
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,201,if (context.isFaultTolerant() || context.isNetworkConnection()){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,203,try{
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,204,removeConnection(oldContext, info, new Exception("remove stale client"));
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,206,LOG.warn("Failed to remove stale connection ",e);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,672,try{
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,673,if(node!=null){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,674,Message message=node.getMessage();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,676,DeadLetterStrategy deadLetterStrategy=node
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,677,.getRegionDestination().getDeadLetterStrategy();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,678,if(deadLetterStrategy!=null){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,679,if(deadLetterStrategy.isSendToDeadLetterQueue(message)){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,694,ActiveMQDestination deadLetterDestination=deadLetterStrategy
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,697,if (context.getBroker()==null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,698,context.setBroker(getRoot());
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,701,deadLetterDestination);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,707,LOG.warn("Caught an exception sending to DLQ: "+node,e);
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,33,import org.apache.activemq.command.MessageId;
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,356,messageCache.put(send.getMessageId(), send.copy());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,764,Set<MessageReference> set = new CopyOnWriteArraySet<MessageReference>();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,823,Set<MessageReference> set = new CopyOnWriteArraySet<MessageReference>();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,53,throws SQLException, JMSException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,59,s = c.prepareStatement(statements.getAddMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,60,s.setLong(1, seq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,61,s.setString(2, destinationName);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,62,s.setString(3, messageID);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,63,s.setString(4, " ");
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,66,throw new JMSException("Failed to broker message: " + messageID + " in container.");
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,71,s = c.prepareStatement(statements.getFindMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,72,s.setLong(1, seq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,75,throw new JMSException("Failed to broker message: " + messageID + " in container.");
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,86,s = c.prepareStatement(statements.getUpdateMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,88,s.setLong(2, seq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,91,throw (SQLException)new SQLException("BLOB could not be updated: " + e).initCause(e);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,93,try {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,94,rs.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,97,try {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,98,s.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,104,public byte[] doGetMessage(TransactionContext c, long seq) throws SQLException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,110,s.setLong(1, seq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,130,throw (SQLException)new SQLException("BLOB could not be updated: " + e).initCause(e);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,132,try {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,133,rs.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,136,try {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,137,s.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,608,private static void close(PreparedStatement s) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,615,private static void close(ResultSet rs) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,186,Integer count = redeliveredMessages.get(node.getMessageId());
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,187,if (count != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,188,md.setRedeliveryCounter(count.intValue());
activemq-core/src/main/java/org/apache/activemq/broker/region/NullMessageReference.java,119,throw new RuntimeException("not implemented");
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,97,public final void reset() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,261,last = message;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,264,message.setRegionDestination(regionDestination);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,265,message.setMemoryUsage(this.getSystemUsage().getMemoryUsage());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,268,return message;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,57,private String deleteOldMessagesStatement;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,299,return deleteOldMessagesStatement;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,508,public void setDeleteOldMessagesStatement(String deleteOldMessagesStatment) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,509,this.deleteOldMessagesStatement = deleteOldMessagesStatment;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/AxionJDBCAdapter.java,57,statements.setDeleteOldMessagesStatement("DELETE FROM " + statements.getFullMessageTableName() + " WHERE ( EXPIRATION<>0 AND EXPIRATION<?)");
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,574,s.setLong(1, System.currentTimeMillis());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,576,LOG.debug("Deleted " + i + " old message(s).");
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,124,return;
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,21,import java.util.concurrent.SynchronousQueue;
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,22,import java.util.concurrent.ThreadFactory;
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,23,import java.util.concurrent.ThreadPoolExecutor;
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,24,import java.util.concurrent.TimeUnit;
activemq-pool/src/main/java/org/apache/activemq/pool/PooledSession.java,106,if (transactional) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,73,private final String shutdownMutex = "shutdownMutex";
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1398,protected void stopAllConnectors(ServiceStopper stopper) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1836,protected void startAllConnectors() throws Exception {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,499,LOG.warn("Failure occured while stopping broker");
activemq-core/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,47,public TransactionContext(DataSource dataSource) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,48,this.dataSource = dataSource;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,61,throw IOExceptionSupport.create(e);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/TxCommand.java,70,return command != null && command.getDataStructureType() == CommandTypes.MESSAGE_ACK;
activemq-core/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,86,Thread thread = new Thread(runnable, name);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,846,DestinationFilter newFilter = DestinationFilter.parseFilter(match);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,847,if (!(newFilter instanceof org.apache.activemq.filter.SimpleDestinationFilter)) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,849,match = destination;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,862,DestinationFilter newFilter = DestinationFilter.parseFilter(match);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,863,if (!(newFilter instanceof org.apache.activemq.filter.SimpleDestinationFilter)) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,865,match = destination;
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,550,Object value = getObjectProperty(name);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,551,if (value == null) {
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,552,if (name.equals("JMSXUserID")) {
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,553,value = getUserID();
activemq-core/src/main/java/org/apache/activemq/ActiveMQQueueSession.java,301,return next.equals(arg0);
activemq-core/src/main/java/org/apache/activemq/ActiveMQTopicSession.java,301,return next.equals(arg0);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,37,Message rc = ((Queue)destination).getMessage(messageId);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,101,Message rc = queue.getMessage(messageId);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,103,rc = rc.copy();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,104,rc.getMessage().setRedeliveryCounter(0);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,108,return queue.moveMessageTo(context, rc, originalDestination);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,670,public Message getMessage(String id) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,863,QueueMessageReference r = createMessageReference(m);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,864,BrokerSupport.resend(context, m, dest);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,865,removeMessage(context, r);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,901,Set<MessageReference> set = new CopyOnWriteArraySet<MessageReference>();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,907,List<MessageReference> list = new ArrayList<MessageReference>(set);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,908,for (MessageReference ref : list) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,909,IndirectMessageReference r = (IndirectMessageReference) ref;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,910,if (filter.evaluate(context, r)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,915,set.remove(r);
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,99,LOG.debug(""+(now-lastRunTime)+" ms elapsed since last write check.");
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,126,LOG.trace("No message sent since last write check, sending a KeepAliveInfo");
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,144,LOG.trace("Message sent since last write check, resetting flag");
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1161,private List<QueueMessageReference> doPageIn(boolean force) throws Exception {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportFactory.java,129,LOG.warn("path isn't a valid local location for TcpTransport to use", e);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,155,text = text.substring(0, 45) + "..." + text.substring(text.length() - 12);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,156,HashMap<String, Object> overrideFields = new HashMap<String, Object>();
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,157,overrideFields.put("text", text);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,158,return super.toString(overrideFields);
activemq-tooling/maven-activemq-perf-plugin/src/main/java/org/apache/activemq/tool/JmsConsumerClient.java,163,recvCount.notify();
activemq-tooling/maven-activemq-perf-plugin/src/main/java/org/apache/activemq/tool/JmsConsumerClient.java,172,recvCount.wait();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,61,private final AtomicBoolean stopping = new AtomicBoolean();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportServer.java,78,if (disposed) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportServer.java,79,return;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportServer.java,81,super.stop();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportServer.java,82,if (connectionCount.decrementAndGet() == 0 && disposeOnDisconnect) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportServer.java,83,VMTransportServer.this.stop();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,272,Message message = null;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1673,broker = new UserIDBroker(broker);
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,129,return true;
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,133,principals.add(new UserPrincipal(user));
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,135,for (Enumeration enumeration = groups.keys(); enumeration.hasMoreElements();) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,136,String name = (String)enumeration.nextElement();
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,137,String[] userList = ((String)groups.getProperty(name) + "").split(",");
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,138,for (int i = 0; i < userList.length; i++) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,139,if (user.equals(userList[i])) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,140,principals.add(new GroupPrincipal(name));
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,141,break;
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,146,subject.getPrincipals().addAll(principals);
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,151,LOG.debug("commit");
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,153,return true;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,292,rc.put(BODY_PREVIEW, new byte[] {});
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1158,Properties properties = MarshallingSupport.stringToProperties(info.getNetworkProperties());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1159,Map<String, String> props = createMap(properties);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1160,NetworkBridgeConfiguration config = new NetworkBridgeConfiguration();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1161,IntrospectionSupport.setProperties(config, props, "");
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1162,config.setBrokerName(broker.getBrokerName());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1177,LOG.info("Created Duplex Bridge back to " + info.getBrokerName());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1180,LOG.error("Creating duplex network bridge", e);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,265,protected void startLocalBridge() throws Exception {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,313,remoteConnectionInfo.setClientId("NC_" + configuration.getBrokerName() + "_outbound");
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,749,public ActiveMQDestination[] getStaticallyIncludedDestinations() {
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,212,public String getName() {
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,213,String name = super.getName();
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,214,if (name == null) {
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,215,name = discoveryAgent.toString();
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,217,super.setName(name);
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,219,return name;
activemq-core/src/main/java/org/apache/activemq/network/LdapNetworkConnector.java,277,public String getName() {
activemq-core/src/main/java/org/apache/activemq/network/LdapNetworkConnector.java,279,String name = super.getName();
activemq-core/src/main/java/org/apache/activemq/network/LdapNetworkConnector.java,280,if (name == null) {
activemq-core/src/main/java/org/apache/activemq/network/LdapNetworkConnector.java,281,name = this.getClass().getName() + " [" + ldapURI.toString() + "]";
activemq-core/src/main/java/org/apache/activemq/network/LdapNetworkConnector.java,282,super.setName(name);
activemq-core/src/main/java/org/apache/activemq/network/LdapNetworkConnector.java,284,return name;
activemq-core/src/main/java/org/apache/activemq/network/MulticastNetworkConnector.java,144,public String getName() {
activemq-core/src/main/java/org/apache/activemq/network/MulticastNetworkConnector.java,145,String name = super.getName();
activemq-core/src/main/java/org/apache/activemq/network/MulticastNetworkConnector.java,146,if(name == null) {
activemq-core/src/main/java/org/apache/activemq/network/MulticastNetworkConnector.java,147,name = remoteTransport.toString();
activemq-core/src/main/java/org/apache/activemq/network/MulticastNetworkConnector.java,148,super.setName(name);
activemq-core/src/main/java/org/apache/activemq/network/MulticastNetworkConnector.java,150,return name;
activemq-core/src/main/java/org/apache/activemq/network/NetworkBridgeConfiguration.java,38,private String name = null;
activemq-core/src/main/java/org/apache/activemq/network/NetworkBridgeConfiguration.java,213,if(this.name == null) {
activemq-core/src/main/java/org/apache/activemq/network/NetworkBridgeConfiguration.java,214,this.name = "localhost";
activemq-core/src/main/java/org/apache/activemq/network/NetworkConnector.java,208,LOG.info("Network Connector " + getName() + " Started");
activemq-core/src/main/java/org/apache/activemq/network/NetworkConnector.java,212,LOG.info("Network Connector " + getName() + " Stopped");
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,225,throw new InactivityIOException("Channel was inactive for too long: "+next.getRemoteAddress());
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,87,return transactionId != null && transactionId.isXATransaction();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,155,if (cacheEnabled && hasSpace()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,156,recoverMessage(node.getMessage(),true);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQTempDestination.java,51,connection.deleteTempDestination(this);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,58,if (!this.storeHasMessages&&useCache) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,59,cacheEnabled=true;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,711,for (Iterator iter = cs.getTempDesinations().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionState.java,114,public List<DestinationInfo> getTempDesinations() {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,200,for (Iterator iter2 = connectionState.getTempDesinations().iterator(); iter2.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1006,if (brokerInfo != null) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1007,broker.removeBroker(this, brokerInfo);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1188,broker.addBroker(this, info);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,89,private final CopyOnWriteArrayList<BrokerInfo> brokerInfos = new CopyOnWriteArrayList<BrokerInfo>();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,551,brokerInfos.add(info);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,556,brokerInfos.remove(info);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,562,result = brokerInfos.toArray(result);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,217,if (configuration.isDuplex() && duplexInitiatingConnection == null) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,219,remoteBrokerNameKnownLatch.await();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,643,if (connectedTransport.get() != null || disposed || connectionFailure != null) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,574,if (!cs.getSessionIds().contains(info.getSessionId())) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,328,if (!memoryUsage.notifyCallbackWhenNotFull(sendMessagesWaitingForSpaceTask)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,330,sendMessagesWaitingForSpaceTask.run();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,23,import java.util.HashMap;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,24,import java.util.List;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,25,import java.util.Map;
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,414,if (producerExchange.isMutable() || producerExchange.getRegion() == null) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,24,import java.util.concurrent.SynchronousQueue;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,25,import java.util.concurrent.ThreadFactory;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,26,import java.util.concurrent.ThreadPoolExecutor;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,84,private static final ThreadPoolExecutor ASYNC_TASKS;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,234,ASYNC_TASKS.execute(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,250,ASYNC_TASKS.execute(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,355,ASYNC_TASKS.execute(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,399,ASYNC_TASKS.execute(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,569,ASYNC_TASKS.execute(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1040,static {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1042,public Thread newThread(Runnable runnable) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1043,Thread thread = new Thread(runnable, "NetworkBridge");
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1044,thread.setDaemon(true);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1045,return thread;
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,41,private final static Log LOG = LogFactory.getLog(SimpleDiscoveryAgent.class);
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,42,private static final ThreadPoolExecutor ASYNC_TASKS;
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,113,ASYNC_TASKS.execute(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,120,LOG.debug("Failure occured soon after the discovery event was generated.  It will be clasified as a connection failure: "+event);
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,135,LOG.debug("Waiting "+event.reconnectDelay+" ms before attepting to reconnect.");
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,219,static {
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,220,ASYNC_TASKS =   new ThreadPoolExecutor(0, Integer.MAX_VALUE, 30, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(), new ThreadFactory() {
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,221,public Thread newThread(Runnable runnable) {
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,222,Thread thread = new Thread(runnable, "Simple Discovery Agent: "+runnable);
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,223,thread.setDaemon(true);
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,224,return thread;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,319,taskRunner = TASK_RUNNER_FACTORY.createTaskRunner(this, "VMTransport: " + toString());
activemq-core/src/main/java/org/apache/activemq/broker/jmx/SubscriptionView.java,247,public long getDispachedCounter() {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/SubscriptionViewMBean.java,102,long getDispachedCounter();
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,42,private static final ThreadPoolExecutor ASYNC_TASKS;
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,300,static {
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,301,ASYNC_TASKS =   new ThreadPoolExecutor(0, Integer.MAX_VALUE, 10, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(), new ThreadFactory() {
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,302,public Thread newThread(Runnable runnable) {
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,303,Thread thread = new Thread(runnable, "InactivityMonitor Async Task: "+runnable);
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,304,thread.setDaemon(true);
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,305,return thread;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,59,private static final ThreadPoolExecutor SOCKET_CLOSE;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,469,SOCKET_CLOSE.execute(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,544,static {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,545,SOCKET_CLOSE =   new ThreadPoolExecutor(0, Integer.MAX_VALUE, 10, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(), new ThreadFactory() {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,546,public Thread newThread(Runnable runnable) {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,547,Thread thread = new Thread(runnable, "TcpSocketClose: "+runnable);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,548,thread.setPriority(Thread.MAX_PRIORITY);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,549,thread.setDaemon(true);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,550,return thread;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,82,private long initialReconnectDelay = 10;
activemq-core/src/main/java/org/apache/activemq/security/SimpleAuthenticationBroker.java,65,super.addConnection(context, info);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,90,private long reconnectDelay = this.initialReconnectDelay;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,650,if (!useExponentialBackOff) {
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,19,import java.util.ArrayList;
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,20,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,21,import java.util.LinkedHashMap;
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,22,import java.util.List;
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,23,import java.util.Map;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,53,super.start();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,252,public void setMaxBatchSize(int maxBatchSize) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,257,super.setMaxBatchSize(maxBatchSize);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,57,void doSetSubscriberEntry(TransactionContext c, SubscriptionInfo subscriptionInfo, boolean retroactive) throws SQLException, IOException;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,67,void doDeleteOldMessages(TransactionContext c) throws SQLException, IOException;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,77,int doGetDurableSubscriberMessageCount(TransactionContext c, ActiveMQDestination destination, String clientId, String subscriptionName) throws SQLException, IOException;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,225,getAdapter().doDeleteOldMessages(c);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,139,adapter.doSetSubscriberEntry(c, subscriptionInfo, retroactive);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,193,result = adapter.doGetDurableSubscriberMessageCount(c, destination, clientId, subscriberName);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,569,public void doDeleteOldMessages(TransactionContext c) throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,50,private boolean active;
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,63,return active;
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,67,return !active || super.isFull();
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,86,if (active || keepDurableSubsActive) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,99,if (!active) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,100,this.active = true;
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,136,active = false;
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,194,if (!active && !keepDurableSubsActive) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,207,if (active || keepDurableSubsActive) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,219,return active;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,41,private Map<String, AtomicLong> subscriberLastMessageMap = new ConcurrentHashMap<String, AtomicLong>();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,91,String subcriberId = getSubscriptionKey(clientId, subscriptionName);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,92,AtomicLong last = subscriberLastMessageMap.get(subcriberId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,93,if (last == null) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,96,subscriberLastMessageMap.put(subcriberId, last);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,98,final AtomicLong finalLast = last;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,127,String subcriberId = getSubscriptionKey(clientId, subscriptionName);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,128,subscriberLastMessageMap.remove(subcriberId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,50,private String updateLastAckOfDurableSubStatement;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,189,public String getUpdateLastAckOfDurableSubStatement() {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,190,if (updateLastAckOfDurableSubStatement == null) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,194,return updateLastAckOfDurableSubStatement;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,211,+ " ORDER BY M.ID";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,221,+ " AND M.CONTAINER=D.CONTAINER AND M.ID > ?"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,290,public String getDeleteOldMessagesStatement() {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,291,if (deleteOldMessagesStatement == null) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,568,public void setUpdateLastAckOfDurableSubStatement(String updateLastAckOfDurableSub) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,569,this.updateLastAckOfDurableSubStatement = updateLastAckOfDurableSub;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,329,public void doSetLastAck(TransactionContext c, ActiveMQDestination destination, String clientId,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,350,s.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,398,s.setLong(4, seq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,471,s.setString(1, info.getDestination().getQualifiedName());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,472,s.setString(2, info.getClientId());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,473,s.setString(3, info.getSubscriptionName());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,474,s.setString(4, info.getSelector());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,475,s.setLong(5, lastMessageId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,476,s.setString(6, info.getSubscribedDestination().getQualifiedName());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,477,if (s.executeUpdate() != 1) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,478,throw new IOException("Could not create durable subscription for: " + info.getClientId());
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,23,import java.util.Map;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,148,synchronized (this) {
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,149,BlockingQueueTransport answer = clients.get(clientID);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,150,if (answer == null) {
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,151,LOG.warn("The clientID header specified is invalid. Client sesion has not yet been established for it: " + clientID);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,152,return null;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,154,return answer;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,159,String clientID = request.getHeader("clientID");
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,167,synchronized (this) {
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,168,BlockingQueueTransport answer = clients.get(clientID);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,169,if (answer != null) {
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,172,return null;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,175,answer = createTransportChannel();
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,176,clients.put(clientID, answer);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,178,return answer;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,176,+ " WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,184,+ getFullAckTableName() + " WHERE CONTAINER=?";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,192,+ " WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,263,+ " WHERE D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=?"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,346,throw new SQLException("Failed add a message");
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,599,rs.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,600,s.close();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,128,DurableTopicSubscription sub = durableSubscriptions.get(key);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,179,if (sub.getConsumerInfo().isDurable()) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,180,view = new DurableSubscriptionView(this, context.getClientId(), sub);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,182,if (sub instanceof TopicSubscription) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,183,view = new TopicSubscriptionView(context.getClientId(), (TopicSubscription)sub);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,185,view = new SubscriptionView(context.getClientId(), sub);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,188,registerSubscription(objectName, sub.getConsumerInfo(), key, view);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,226,unregisterSubscription(name);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,312,protected void unregisterSubscription(ObjectName key) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,315,inactiveDurableTopicSubscribers.remove(key);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,330,SubscriptionInfo info = new SubscriptionInfo();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,331,info.setClientId(subscriptionKey.getClientId());
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,332,info.setSubscriptionName(subscriptionKey.getSubscriptionName());
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,333,info.setDestination(new ActiveMQTopic(view.getDestinationName()));
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,334,addInactiveSubscription(subscriptionKey, info);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,136,durableSubscriptions.remove(key);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,143,super.removeConsumer(context, sub.getConsumerInfo());
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,188,localHostName = java.net.InetAddress.getLocalHost().getHostName();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,530,brokerName = java.net.InetAddress.getLocalHost().getHostName().toLowerCase();
activemq-core/src/main/java/org/apache/activemq/transport/udp/UdpTransport.java,343,String localName = InetAddress.getLocalHost().getHostName();
activemq-core/src/main/java/org/apache/activemq/util/IdGenerator.java,19,import java.net.InetAddress;
activemq-core/src/main/java/org/apache/activemq/util/IdGenerator.java,51,hostName = InetAddress.getLocalHost().getHostName();
activemq-core/src/main/java/org/apache/activemq/transport/peer/PeerTransportFactory.java,94,TransportConnector c = service.addConnector("tcp://localhost:0");
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,78,import org.apache.activemq.security.SecurityContext;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,89,import org.apache.activemq.util.IOExceptionSupport;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,90,import org.apache.activemq.util.IOHelper;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,91,import org.apache.activemq.util.JMXSupport;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,92,import org.apache.activemq.util.ServiceStopper;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,93,import org.apache.activemq.util.URISupport;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1797,ConnectionContext adminConnectionContext = getBroker().getAdminConnectionContext();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1798,if (adminConnectionContext == null) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1799,adminConnectionContext = createAdminConnectionContext();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1800,getBroker().setAdminConnectionContext(adminConnectionContext);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1802,return adminConnectionContext;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1811,protected ConnectionContext createAdminConnectionContext() throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1812,ConnectionContext context = new ConnectionContext();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1813,context.setBroker(getBroker());
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1814,context.setSecurityContext(SecurityContext.BROKER_SECURITY_CONTEXT);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1815,return context;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,26,import org.apache.activemq.broker.Broker;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,280,public static ConnectionContext getConnectionContext(Broker broker) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,281,ConnectionContext adminConnectionContext = broker.getAdminConnectionContext();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,282,if (adminConnectionContext == null) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,283,adminConnectionContext = createAdminConnectionContext(broker);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,284,broker.setAdminConnectionContext(adminConnectionContext);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,286,return adminConnectionContext;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,295,protected static ConnectionContext createAdminConnectionContext(Broker broker) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,296,ConnectionContext context = new ConnectionContext();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,297,context.setBroker(broker);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,298,return context;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,61,ConnectionContext context = BrokerView.getConnectionContext(broker.getContextBroker());
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,67,ConnectionContext context = BrokerView.getConnectionContext(broker.getContextBroker());
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,73,ConnectionContext context = BrokerView.getConnectionContext(broker.getContextBroker());
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,79,ConnectionContext context = BrokerView.getConnectionContext(broker.getContextBroker());
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,85,ConnectionContext context = BrokerView.getConnectionContext(broker.getContextBroker());
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,91,ConnectionContext context = BrokerView.getConnectionContext(broker.getContextBroker());
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,107,ConnectionContext context = BrokerView.getConnectionContext(broker.getContextBroker());
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,98,LOG.debug("Activating " + this);
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,105,prefetch += prefetch/2;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,447,topicStore.acknowledge(context, key.getClientId(), key.getSubscriptionName(), node.getMessageId());
activemq-core/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,78,MessageId messageId) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,79,delegate.acknowledge(context, clientId, subscriptionName, messageId);
activemq-core/src/main/java/org/apache/activemq/store/TopicMessageStore.java,44,void acknowledge(ConnectionContext context, String clientId, String subscriptionName, MessageId messageId) throws IOException;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTopicMessageStore.java,76,public void acknowledge(final ConnectionContext context, final String clientId, final String subscriptionName, final MessageId messageId) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTopicMessageStore.java,137,topicReferenceStore.acknowledge(context, clientId, subscritionName, messageId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,81,void doRecoverNextMessages(TransactionContext c, ActiveMQDestination destination, long nextSeq, int maxReturned, JDBCMessageRecoveryListener listener) throws Exception;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,83,long doGetLastAckedDurableSubscriberMessageId(TransactionContext c, ActiveMQDestination destination, String clientId, String subscriberName) throws SQLException, IOException;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,47,public void acknowledge(ConnectionContext context, String clientId, String subscriptionName, MessageId messageId) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,94,long lastAcked = adapter.doGetLastAckedDurableSubscriberMessageId(c, destination, clientId, subscriptionName);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,95,last = new AtomicLong(lastAcked);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,264,+ " AND M.CONTAINER=D.CONTAINER AND M.ID > D.LAST_ACKED_ID";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,294,+ "( SELECT min(" + getFullAckTableName() + ".LAST_ACKED_ID) "
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,295,+ "FROM " + getFullAckTableName() + " WHERE "
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,297,+ ".CONTAINER)";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,347,lastAckedDurableSubscriberMessageStatement = "SELECT MAX(LAST_ACKED_ID) FROM "
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,349,+ " WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,588,long result = -1;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,597,result = rs.getLong(1);
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalTopicMessageStore.java,85,final MessageId messageId) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalTopicMessageStore.java,141,longTermStore.acknowledge(context, clientId, subscritionName, messageId);
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalTopicMessageStore.java,180,subscriptionKey.subscriptionName, identity);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicMessageStore.java,82,MessageId messageId) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,173,String clientId, String subscriptionName, MessageId messageId) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,69,public synchronized void acknowledge(ConnectionContext context, String clientId, String subscriptionName, MessageId messageId) throws IOException {
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopicInterceptor.java,44,ActiveMQDestination queueConsumers = getQueueConsumersWildcard(message.getDestination());
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopicInterceptor.java,45,send(context, message, queueConsumers);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,114,WebClient client = WebClient.getWebClient(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,120,LOG.debug("POST client=" + client + " session=" + request.getSession().getId() + " info=" + request.getPathInfo() + " contentType=" + request.getContentType());
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,154,Listener listener = getListener(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,155,Map<MessageAvailableConsumer, String> consumerIdMap = getConsumerIdMap(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,156,Map<MessageAvailableConsumer, String> consumerDestinationMap = getConsumerDestinationNameMap(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,163,consumerDestinationMap.put(consumer, destinationName);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,168,Map<MessageAvailableConsumer, String> consumerIdMap = getConsumerIdMap(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,169,Map consumerDestinationMap = getConsumerDestinationNameMap(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,174,consumerDestinationMap.remove(consumer);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,236,WebClient client = WebClient.getWebClient(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,238,LOG.debug("GET client=" + client + " session=" + request.getSession().getId() + " uri=" + request.getRequestURI() + " query=" + request.getQueryString());
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,256,protected void doMessages(WebClient client, HttpServletRequest request, HttpServletResponse response) throws JMSException, IOException {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,306,response.setContentType("text/xml");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,307,response.setHeader("Cache-Control", "no-cache");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,312,Map<MessageAvailableConsumer, String> consumerIdMap = getConsumerIdMap(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,313,Map<MessageAvailableConsumer, String> consumerDestinationNameMap = getConsumerDestinationNameMap(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,389,protected Listener getListener(HttpServletRequest request) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,390,HttpSession session = request.getSession();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,391,Listener listener = (Listener)session.getAttribute("mls.listener");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,392,if (listener == null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,393,listener = new Listener(WebClient.getWebClient(request));
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,394,session.setAttribute("mls.listener", listener);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,396,return listener;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,399,protected Map<MessageAvailableConsumer, String> getConsumerIdMap(HttpServletRequest request) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,401,Map<MessageAvailableConsumer, String> map = (Map<MessageAvailableConsumer, String>)session.getAttribute("mls.consumerIdMap");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,402,if (map == null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,403,map = new HashMap<MessageAvailableConsumer, String>();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,404,session.setAttribute("mls.consumerIdMap", map);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,406,return map;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,409,protected Map<MessageAvailableConsumer, String> getConsumerDestinationNameMap(HttpServletRequest request) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,410,HttpSession session = request.getSession(true);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,411,Map<MessageAvailableConsumer, String> map = (Map<MessageAvailableConsumer, String>)session.getAttribute("mls.consumerDestinationNameMap");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,412,if (map == null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,413,map = new HashMap<MessageAvailableConsumer, String>();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,414,session.setAttribute("mls.consumerDestinationNameMap", map);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,416,return map;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,419,protected boolean isRicoAjax(HttpServletRequest request) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,420,String rico = request.getParameter("rico");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,421,return rico != null && rico.equals("true");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,444,private class Listener implements MessageAvailableListener {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,445,WebClient client;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,446,long lastAccess;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,447,Continuation continuation;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,449,Listener(WebClient client) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,450,this.client = client;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,453,public void access() {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,454,lastAccess = System.currentTimeMillis();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,457,public synchronized void setContinuation(Continuation continuation) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,458,this.continuation = continuation;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,461,public synchronized void onMessageAvailable(MessageConsumer consumer) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,462,if (LOG.isDebugEnabled()) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,463,LOG.debug("message for " + consumer + "continuation=" + continuation);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,465,if (continuation != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,468,new Thread() {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,469,public void run() {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,470,client.closeConsumers();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,235,broker.removeDestination(getConnectionContext(broker.getContextBroker()), new ActiveMQTopic(name),
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,240,broker.removeDestination(getConnectionContext(broker.getContextBroker()), new ActiveMQQueue(name),
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,61,private Map<TransactionId, Transaction> xaTransactions = new LinkedHashMap<TransactionId, Transaction>();
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,128,for (Iterator<Transaction> iter = xaTransactions.values().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,143,Transaction transaction = null;
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,149,transaction = new XATransaction(transactionStore, (XATransactionId)xid, this);
activemq-core/src/main/java/org/apache/activemq/transaction/XATransaction.java,42,public XATransaction(TransactionStore transactionStore, XATransactionId xid, TransactionBroker broker) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,48,import org.apache.activemq.command.ActiveMQDestination;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,49,import org.apache.activemq.command.ConsumerId;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,50,import org.apache.activemq.command.ExceptionResponse;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,51,import org.apache.activemq.command.Message;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,52,import org.apache.activemq.command.MessageAck;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,53,import org.apache.activemq.command.MessageId;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,54,import org.apache.activemq.command.ProducerAck;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,55,import org.apache.activemq.command.ProducerInfo;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,56,import org.apache.activemq.command.Response;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1266,s.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1268,break;
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,71,result = exclusiveConsumer == null
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,72,|| exclusiveConsumer == subscription;
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,74,QueueMessageReference node = (QueueMessageReference) m;
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,76,String groupId = node.getGroupID();
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,77,int sequence = node.getGroupSequence();
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,78,if (groupId != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,79,MessageGroupMap messageGroupOwners = ((Queue) node
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,80,.getRegionDestination()).getMessageGroupOwners();
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,84,if (sequence == 1) {
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,85,assignGroup(subscription, messageGroupOwners, node,groupId);
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,90,ConsumerId groupOwner;
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,92,groupOwner = messageGroupOwners.get(groupId);
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,93,if (groupOwner == null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,94,assignGroup(subscription, messageGroupOwners, node,groupId);
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,96,if (groupOwner.equals(subscription.getConsumerInfo().getConsumerId())) {
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,98,if (sequence < 0) {
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,99,messageGroupOwners.removeGroup(groupId);
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,102,result = false;
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,112,protected void assignGroup(Subscription subs,MessageGroupMap messageGroupOwners, MessageReference n, String groupId) throws IOException {
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,113,messageGroupOwners.put(groupId, subs.getConsumerInfo().getConsumerId());
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,114,Message message = n.getMessage();
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,115,if (message instanceof ActiveMQMessage) {
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,116,ActiveMQMessage activeMessage = (ActiveMQMessage)message;
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,117,try {
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,118,activeMessage.setBooleanProperty("JMSXGroupFirstForConsumer", true, false);
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,120,LOG.warn("Failed to set boolean header: " + e, e);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,788,Deflater deflater = new Deflater(Deflater.BEST_SPEED);
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,51,if (start) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,176,if ( log.isInfoEnabled() ) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,179,log.debug("Endpoint failed to process message.", e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionRequestInfo.java,216,public void setRedeliveryBackOffMultiplier(Short value) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionRequestInfo.java,218,redeliveryPolicy().setBackOffMultiplier(value.shortValue());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,316,public void setRedeliveryBackOffMultiplier(Short value) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,83,private static final Log LOG = LogFactory.getLog(DemandForwardingBridge.class);
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,61,private long readCheckTime;
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,62,private long writeCheckTime;
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,63,private long initialDelayTime;
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,252,if (localWireFormatInfo == null) {
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,253,return;
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,255,if (remoteWireFormatInfo == null) {
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,256,return;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,108,protected Map<String, Object> transportOptions;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,377,public void setTransportOption(Map<String, Object> transportOptions) {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,378,this.transportOptions = transportOptions;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpEmbeddedTunnelServlet.java,46,transportConnector = new HttpTransportServer(new URI(url));
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,42,return new HttpTransportServer(location);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,63,HttpClientTransport httpTransport = (HttpClientTransport) super.compositeConfigure(transport, format, options);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,64,transport = httpTransport;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,65,if( httpTransport.isTrace() ) {
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,45,public HttpTransportServer(URI uri) {
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,170,response.sendError(HttpServletResponse.SC_BAD_REQUEST, "A session for clientID '" + clientID + "' has allready been established");
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,171,LOG.warn("A session for clientID '" + clientID + "' has allready been established");
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,177,listener.onAccept(answer);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportFactory.java,36,return new HttpsTransportServer(location);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,35,public HttpsTransportServer(URI uri) {
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,36,super(uri);
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,63,private Map<MessageId,Message> messageCache = new LinkedHashMap<MessageId,Message>(){
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,64,protected boolean removeEldestEntry(Map.Entry<MessageId,Message> eldest) {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,67,currentCacheSize -= eldest.getValue().getSize();
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,106,if (trackMessages && command != null && command.isMessage()) {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,107,Message message = (Message) command;
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,108,if (message.getTransactionId()==null) {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,109,currentCacheSize = currentCacheSize +  message.getSize();
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,130,for (Message msg:messageCache.values()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,196,connection.addSession(this);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,167,messages.put(message.getMessageId(), data);
activemq-core/src/main/java/org/apache/activemq/transport/FutureResponse.java,52,return responseSlot.poll(timeout, TimeUnit.MILLISECONDS);
activemq-console/src/main/java/org/apache/activemq/console/Main.java,278,urls.add(dir.toURL());
activemq-console/src/main/java/org/apache/activemq/console/Main.java,306,urls.add(files[j].toURL());
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,189,tx.commit();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,313,Map<String, String> map = new HashMap<String, String>(URISupport.parseParamters(uri));
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1854,Map<String, String> map = new HashMap<String, String>(URISupport.parseParamters(uri));
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1164,HashMap<String, String> map = new HashMap<String, String>(URISupport.parseParamters(uri));
activemq-core/src/main/java/org/apache/activemq/transport/TransportFactory.java,139,Map<String, String> options = new HashMap<String, String>(URISupport.parseParamters(location));
activemq-core/src/main/java/org/apache/activemq/transport/TransportFactory.java,154,Map<String, String> options = new HashMap<String, String>(URISupport.parseParamters(location));
activemq-core/src/main/java/org/apache/activemq/transport/discovery/multicast/MulticastDiscoveryAgentFactory.java,49,Map options = URISupport.parseParamters(uri);
activemq-core/src/main/java/org/apache/activemq/transport/discovery/rendezvous/RendezvousDiscoveryAgentFactory.java,33,Map options = URISupport.parseParamters(uri);
activemq-core/src/main/java/org/apache/activemq/transport/peer/PeerTransportFactory.java,72,final Map<String, String> brokerOptions = new HashMap<String, String>(URISupport.parseParamters(location));
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,74,Map<String, String> options = new HashMap<String, String>(URISupport.parseParamters(location));
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportFactory.java,52,Map<String, String> options = new HashMap<String, String>(URISupport.parseParamters(location));
activemq-core/src/main/java/org/apache/activemq/transport/udp/UdpTransportFactory.java,56,Map<String, String> options = new HashMap<String, String>(URISupport.parseParamters(location));
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,80,options = URISupport.parseParamters(location);
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,126,public static Map<String, String> parseParamters(URI uri) throws URISyntaxException {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,127,return uri.getQuery() == null ? emptyMap() : parseQuery(stripPrefix(uri.getQuery(), "?"));
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,228,if (TRANSPORTLOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,229,TRANSPORTLOG.debug("Transport failed: " + e, e);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,363,String localName = InetAddress.getLocalHost().getHostName();
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,364,if (localName != null && isUseLocalHost()) {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,365,if (localName.equals(host)) {
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,272,return this.getProperties().containsKey(name);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,280,return new Vector<String>(this.getProperties().keySet()).elements();
activemq-core/src/main/java/org/apache/activemq/ActiveMQXASession.java,72,return true;
activemq-core/src/main/java/org/apache/activemq/ActiveMQXASession.java,108,if (!getTransactionContext().isInXATransaction()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQXASession.java,109,throw new JMSException("Session's XAResource has not been enlisted in a distributed transaction.");
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,933,redeliveryDelay = redeliveryPolicy.getRedeliveryDelay(redeliveryDelay);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,778,long redeliveryDelay = 0;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,780,redeliveryDelay = redeliveryPolicy.getRedeliveryDelay(redeliveryDelay);
activemq-core/src/main/java/org/apache/activemq/RedeliveryPolicy.java,85,public long getRedeliveryDelay(long previousDelay) {
activemq-core/src/main/java/org/apache/activemq/RedeliveryPolicy.java,86,long redeliveryDelay;
activemq-core/src/main/java/org/apache/activemq/RedeliveryPolicy.java,89,redeliveryDelay = initialRedeliveryDelay;
activemq-core/src/main/java/org/apache/activemq/RedeliveryPolicy.java,93,redeliveryDelay = previousDelay;
activemq-core/src/main/java/org/apache/activemq/RedeliveryPolicy.java,103,redeliveryDelay += redeliveryDelay * variance;
activemq-core/src/main/java/org/apache/activemq/RedeliveryPolicy.java,106,return redeliveryDelay;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,221,try {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,222,triggerRemoteStartBridge();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,224,LOG.warn("Caught exception from remote start", e);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,226,NetworkBridgeListener l = this.networkBridgeListener;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,227,if (l != null) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,228,l.onStart(this);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,271,localConnectionInfo = new ConnectionInfo();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,272,localConnectionInfo.setConnectionId(new ConnectionId(idGenerator.generateId()));
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,274,localConnectionInfo.setClientId(localClientId);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,275,localConnectionInfo.setUserName(configuration.getUserName());
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,276,localConnectionInfo.setPassword(configuration.getPassword());
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,277,localBroker.oneway(localConnectionInfo);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,279,localSessionInfo = new SessionInfo(localConnectionInfo, 1);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,280,localBroker.oneway(localSessionInfo);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,282,LOG.info("Network connection between " + localBroker + " and " + remoteBroker + "(" + remoteBrokerName + ") has been established.");
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,286,setupStaticDestinations();
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,23,import java.util.concurrent.ConcurrentHashMap;
activemq-core/src/main/java/org/apache/activemq/store/amq/RecoveryListenerAdapter.java,45,listener.recoverMessage(message);
activemq-core/src/main/java/org/apache/activemq/store/amq/RecoveryListenerAdapter.java,46,lastRecovered = message.getMessageId();
activemq-core/src/main/java/org/apache/activemq/store/amq/RecoveryListenerAdapter.java,47,count++;
activemq-core/src/main/java/org/apache/activemq/store/amq/RecoveryListenerAdapter.java,48,return true;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,106,listener.recoverMessage(msg);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,107,finalLast.set(sequenceId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,108,return true;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,394,s.setMaxRows(maxReturned);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,406,break;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,414,break;
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,261,break;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,78,private List<MessageAck> messageAcks = new ArrayList<MessageAck>();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,263,messageAcks.add(ack);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,358,final List<MessageAck> cpRemovedMessageLocations;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,369,this.messageAcks = new ArrayList<MessageAck>();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,404,for (MessageAck ack : cpRemovedMessageLocations) {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,170,removeMessage(ack.getLastMessageId());
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,173,public void removeMessage(MessageId msgId) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,198,removeMessage(id);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStoreAdapter.java,238,return new HashSet<Integer>(recordReferences.keySet());
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,413,LOG.debug("Batch update done.");
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,293,for (MessageReference ref : sub.remove(context, this)) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,90,String action = null;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,93,while (true) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,94,action = readLine(in, MAX_COMMAND_LENGTH, "The maximum command length was exceeded");
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,95,if (action == null) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,96,throw new IOException("connection was closed");
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,98,action = action.trim();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,99,if (action.length() > 0) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,100,break;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,106,HashMap<String, String> headers = new HashMap<String, String>(25);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,107,while (true) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,108,String line = readLine(in, MAX_HEADER_LENGTH, "The maximum header length was exceeded");
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,109,if (line != null && line.trim().length() > 0) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,111,if (headers.size() > MAX_HEADERS) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,112,throw new ProtocolException("The maximum number of headers was exceeded", true);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,115,try {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,116,int seperatorIndex = line.indexOf(Stomp.Headers.SEPERATOR);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,117,String name = line.substring(0, seperatorIndex).trim();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,118,String value = line.substring(seperatorIndex + 1, line.length()).trim();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,119,headers.put(name, value);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,121,throw new ProtocolException("Unable to parser header line [" + line + "]", true);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,124,break;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,134,int length;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,135,try {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,136,length = Integer.parseInt(contentLength.trim());
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,138,throw new ProtocolException("Specified content-length is not a valid integer", true);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,141,if (length > MAX_DATA_LENGTH) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,142,throw new ProtocolException("The maximum data length was exceeded", true);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/Stomp.java,65,Object PERSISTENT = "persistent";
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,19,import javax.jms.JMSException;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,20,import javax.jms.Message;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,22,import org.apache.activemq.broker.region.MessageReference;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,24,import org.apache.activemq.command.ProducerId;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,25,import org.apache.activemq.util.BitArrayBin;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,26,import org.apache.activemq.util.IdGenerator;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,27,import org.apache.activemq.util.LRUCache;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,34,public class ActiveMQMessageAudit {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,38,private int auditDepth;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,39,private int maximumNumberOfProducersToTrack;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,40,private LRUCache<Object, BitArrayBin> map;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,47,this(DEFAULT_WINDOW_SIZE, MAXIMUM_PRODUCER_COUNT);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,58,this.auditDepth = auditDepth;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,59,this.maximumNumberOfProducersToTrack=maximumNumberOfProducersToTrack;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,60,this.map = new LRUCache<Object, BitArrayBin>(0, maximumNumberOfProducersToTrack, 0.75f, true);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,66,public int getAuditDepth() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,67,return auditDepth;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,73,public void setAuditDepth(int auditDepth) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,74,this.auditDepth = auditDepth;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,80,public int getMaximumNumberOfProducersToTrack() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,81,return maximumNumberOfProducersToTrack;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,87,public void setMaximumNumberOfProducersToTrack(
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,88,int maximumNumberOfProducersToTrack) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,89,this.maximumNumberOfProducersToTrack = maximumNumberOfProducersToTrack;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,90,this.map.setMaxCacheSize(maximumNumberOfProducersToTrack);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,100,public boolean isDuplicate(Message message) throws JMSException {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,101,return isDuplicate(message.getJMSMessageID());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,111,public synchronized boolean isDuplicate(String id) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,112,boolean answer = false;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,113,String seed = IdGenerator.getSeedFromId(id);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,114,if (seed != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,115,BitArrayBin bab = map.get(seed);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,116,if (bab == null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,117,bab = new BitArrayBin(auditDepth);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,118,map.put(seed, bab);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,120,long index = IdGenerator.getSequenceFromId(id);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,121,if (index >= 0) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,122,answer = bab.setBit(index, true);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,125,return answer;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,134,public boolean isDuplicate(final MessageReference message) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,135,MessageId id = message.getMessageId();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,136,return isDuplicate(id);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,145,public synchronized boolean isDuplicate(final MessageId id) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,146,boolean answer = false;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,148,if (id != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,149,ProducerId pid = id.getProducerId();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,150,if (pid != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,151,BitArrayBin bab = map.get(pid);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,152,if (bab == null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,153,bab = new BitArrayBin(auditDepth);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,154,map.put(pid, bab);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,156,answer = bab.setBit(id.getProducerSequenceId(), true);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,159,return answer;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,167,public void rollback(final MessageReference message) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,168,MessageId id = message.getMessageId();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,169,rollback(id);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,177,public synchronized void rollback(final  MessageId id) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,178,if (id != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,179,ProducerId pid = id.getProducerId();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,180,if (pid != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,181,BitArrayBin bab = map.get(pid);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,182,if (bab != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,183,bab.setBit(id.getProducerSequenceId(), false);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,195,public boolean isInOrder(Message msg) throws JMSException {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,196,return isInOrder(msg.getJMSMessageID());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,204,public synchronized boolean isInOrder(final String id) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,205,boolean answer = true;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,207,if (id != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,208,String seed = IdGenerator.getSeedFromId(id);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,209,if (seed != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,210,BitArrayBin bab = map.get(seed);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,211,if (bab != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,212,long index = IdGenerator.getSequenceFromId(id);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,213,answer = bab.isInOrder(index);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,218,return answer;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,226,public synchronized boolean isInOrder(final MessageReference message) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,227,return isInOrder(message.getMessageId());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,235,public synchronized boolean isInOrder(final MessageId id) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,236,boolean answer = false;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,238,if (id != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,239,ProducerId pid = id.getProducerId();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,240,if (pid != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,241,BitArrayBin bab = map.get(pid);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,242,if (bab == null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,243,bab = new BitArrayBin(auditDepth);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,244,map.put(pid, bab);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,246,answer = bab.isInOrder(id.getProducerSequenceId());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageAudit.java,250,return answer;
activemq-core/src/main/java/org/apache/activemq/broker/ConnectionContext.java,50,private boolean haAware;
activemq-core/src/main/java/org/apache/activemq/broker/ConnectionContext.java,189,public boolean isHaAware() {
activemq-core/src/main/java/org/apache/activemq/broker/ConnectionContext.java,190,return haAware;
activemq-core/src/main/java/org/apache/activemq/broker/ConnectionContext.java,193,public void setHaAware(boolean haAware) {
activemq-core/src/main/java/org/apache/activemq/broker/ConnectionContext.java,194,this.haAware = haAware;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,450,broker.send(producerExchange, messageSend);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1228,private ProducerBrokerExchange getProducerBrokerExchange(ProducerId id) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1233,TransportConnectionState state = lookupConnectionState(id);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,129,+ " WHERE MSGID_PROD=? AND MSGID_SEQ=?";
activemq-core/src/main/java/org/apache/activemq/util/BitArray.java,30,public class BitArray {
activemq-core/src/main/java/org/apache/activemq/util/BitArrayBin.java,26,public class BitArrayBin {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,267,Listener listener = getListener(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,269,listener.access();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,276,MessageAvailableConsumer consumer = null;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,279,for (int i = 0; message == null && i < consumers.size(); i++) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,280,consumer = (MessageAvailableConsumer)consumers.get(i);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,281,if (consumer.getAvailableListener() == null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,282,continue;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,286,message = consumer.receiveNoWait();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,287,if (LOG.isDebugEnabled()) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,288,LOG.debug("received " + message + " from " + consumer);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,321,writer.print("<response id='");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,322,writer.print(id);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,323,writer.print("'");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,324,if (destinationName != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,325,writer.print(" destination='" + destinationName + "' ");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,327,writer.print(">");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,328,writeMessageResponse(writer, message);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,329,writer.println("</response>");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,349,writer.print("<response id='");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,350,writer.print(id);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,351,writer.print("'");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,352,if (destinationName != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,353,writer.print(" destination='" + destinationName + "' ");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,355,writer.print(">");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,356,writeMessageResponse(writer, message);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,357,writer.println("</response>");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,374,protected void writeMessageResponse(PrintWriter writer, Message message) throws JMSException, IOException {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,466,continuation.resume();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,474,continuation = null;
activemq-web/src/main/java/org/apache/activemq/web/MessageServletSupport.java,303,destinationName = destinationName.substring(8);
activemq-web/src/main/java/org/apache/activemq/web/MessageServletSupport.java,306,destinationName = destinationName.substring(10);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,105,ActiveMQObjectMessage msg = (ActiveMQObjectMessage) message.copy();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,123,return command;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,26,import org.apache.activemq.command.ActiveMQBytesMessage;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,27,import org.apache.activemq.command.ActiveMQDestination;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,28,import org.apache.activemq.command.ActiveMQMessage;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,29,import org.apache.activemq.command.ActiveMQTextMessage;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/Stomp.java,121,JMS_BYTE, JMS_OBJECT_XML, JMS_OBJECT_JSON, JMS_MAP_XML, JMS_MAP_JSON;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,81,if (transformation != null) {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTopicMessageStore.java,192,return topicReferenceStore.getMessageCount(clientId, subscriberName);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,283,ReferenceRecord msg = messageContainer.get(ref.getMessageEntry());
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,229,if (!dest.isTemporary() || destinations.contains(dest)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,467,return (int)info.getPrefetchSize();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,36,public class AbstractPendingMessageCursor implements PendingMessageCursor {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,171,public synchronized void addMessageLast(MessageReference node) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,179,return;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,188,return;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,194,systemUsage.getTempUsage().waitForSpace();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,19,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,166,public void deleteSubscription(ConnectionContext context, SubscriptionKey key) throws IOException {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,169,Object removed = durableSubcribers.remove(key);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,81,return store.getMessageCount(clientId, subscriberName);
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,74,super.add(context, destination);
activemq-core/src/main/java/org/apache/activemq/broker/util/TimeStampingBrokerPlugin.java,40,&& (message.getBrokerPath() == null || message.getBrokerPath().length == 0)) {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,131,if (transport == null) {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,435,if (command.getDataStructureType() == ConsumerInfo.DATA_STRUCTURE_TYPE) {
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterBroker.java,331,sendSyncToSlave(message);
activemq-core/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,36,public class DefaultBlobUploadStrategy implements BlobUploadStrategy {
activemq-core/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,37,private BlobTransferPolicy transferPolicy;
activemq-core/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,40,this.transferPolicy = transferPolicy;
activemq-core/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,48,URL url = createUploadURL(message);
activemq-core/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,77,public void deleteFile(ActiveMQBlobMessage message) throws IOException, JMSException {
activemq-core/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,78,URL url = createUploadURL(message);
activemq-core/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,80,HttpURLConnection connection = (HttpURLConnection)url.openConnection();
activemq-core/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,81,connection.setRequestMethod("DELETE");
activemq-core/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,82,connection.connect();
activemq-core/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,83,connection.disconnect();
activemq-core/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,85,if (!isSuccessfulCode(connection.getResponseCode())) {
activemq-core/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,86,throw new IOException("DELETE was not successful: " + connection.getResponseCode() + " "
activemq-core/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,87,+ connection.getResponseMessage());
activemq-core/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,91,private boolean isSuccessfulCode(int responseCode) {
activemq-core/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,92,return responseCode >= 200 && responseCode < 300; // 2xx => successful
activemq-core/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,95,protected URL createUploadURL(ActiveMQBlobMessage message) throws JMSException, MalformedURLException {
activemq-core/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,96,return new URL(transferPolicy.getUploadUrl() + message.getMessageId().toString());
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,23,import java.util.LinkedList;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,24,import java.util.List;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,151,doMessages(request, response, 1);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,159,doMessages(request, response, -1);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,170,protected void doMessages(HttpServletRequest request, HttpServletResponse response, int maxMessages) throws ServletException, IOException {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,276,if (LOG.isDebugEnabled()) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,277,LOG.debug("Received " + messages + " message(s)");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,290,protected void doMessagesWithoutContinuation(HttpServletRequest request, HttpServletResponse response, int maxMessages) throws ServletException, IOException {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,292,int messages = 0;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,293,try {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,294,WebClient client = getWebClient(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,295,Destination destination = getDestination(client, request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,296,long timeout = getReadTimeout(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,297,boolean ajax = isRicoAjax(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,298,if (!ajax) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,299,maxMessages = 1;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,301,if (LOG.isDebugEnabled()) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,302,LOG.debug("Receiving message(s) from: " + destination + " with timeout: " + timeout);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,306,Message message = null;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,309,response.setContentType("text/xml");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,310,PrintWriter writer = response.getWriter();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,312,if (ajax) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,313,writer.println("<ajax-response>");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,317,if (client.getSemaphore().tryAcquire()) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,318,try {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,320,message = consumer.receive(timeout);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,323,if (message == null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,326,response.setStatus(ajax ? HttpServletResponse.SC_OK : HttpServletResponse.SC_NO_CONTENT);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,330,response.setStatus(HttpServletResponse.SC_OK);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,331,String type = getContentType(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,332,if (type != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,333,response.setContentType(type);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,339,while ((maxMessages < 0 || messages < maxMessages) && message != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,340,if (ajax) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,341,writer.print("<response type='object' id='");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,342,writer.print(request.getParameter("id"));
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,343,writer.println("'>");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,346,setResponseHeaders(response, message);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,349,writeMessageResponse(writer, message);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,351,if (ajax) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,352,writer.println("</response>");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,356,messages++;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,357,if(maxMessages < 0 || messages < maxMessages) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,358,message = consumer.receiveNoWait();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,364,client.getSemaphore().release();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,368,response.setStatus(ajax ? HttpServletResponse.SC_OK : HttpServletResponse.SC_NO_CONTENT);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,371,if (ajax) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,372,writer.println("<response type='object' id='poll'><ok/></response>");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,373,writer.println("</ajax-response>");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,377,throw new ServletException("Could not post JMS message: " + e, e);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,466,List queue = new LinkedList();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,172,int messages = 0;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,179,long timeout = getReadTimeout(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,180,boolean ajax = isRicoAjax(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,181,if (!ajax) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,182,maxMessages = 1;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,192,Message message = null;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,194,synchronized (consumer) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,202,message = consumer.receiveNoWait();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,206,if (message == null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,210,listener.setContinuation(continuation);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,218,if (message == null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,219,message = consumer.receiveNoWait();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,223,response.setContentType("text/xml");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,224,PrintWriter writer = response.getWriter();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,226,if (ajax) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,227,writer.println("<ajax-response>");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,231,if (message == null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,233,response.setStatus(ajax ? HttpServletResponse.SC_OK : HttpServletResponse.SC_NO_CONTENT);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,236,response.setStatus(HttpServletResponse.SC_OK);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,237,String type = getContentType(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,238,if (type != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,239,response.setContentType(type);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,244,while ((maxMessages < 0 || messages < maxMessages) && message != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,245,if (ajax) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,246,writer.print("<response type='object' id='");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,247,writer.print(request.getParameter("id"));
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,248,writer.println("'>");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,251,setResponseHeaders(response, message);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,254,writeMessageResponse(writer, message);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,256,if (ajax) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,257,writer.println("</response>");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,261,messages++;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,262,if(maxMessages < 0 || messages < maxMessages) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,263,message = consumer.receiveNoWait();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,268,if (ajax) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,269,writer.println("<response type='object' id='poll'><ok/></response>");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,270,writer.println("</ajax-response>");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,274,throw new ServletException("Could not post JMS message: " + e, e);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,483,continuation.resume();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,485,continuation = null;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,433,if (AdvisorySupport.isConsumerAdvisoryTopic(message.getDestination())) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,292,List<QueueMessageReference> list = new ArrayList<QueueMessageReference>();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,299,list.add(qmr);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,303,doDispatch(list);
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,62,String localURIName = localURI.getScheme() + "://" + localURI.getHost();
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,103,LOG.warn("Could not connect to local URI: " + localURIName + ": " + e.getMessage());
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,117,LOG.warn("Could not start network bridge between: " + localURIName + " and: " + uri + " due to: " + e);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,79,host = location.getHost();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,196,String host = location.getHost();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,208,String host = server.getBindURI().getHost();
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,146,return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), uri.getPath(),
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,147,query, uri.getFragment());
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,241,List<String> l = new ArrayList<String>();
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,250,if (l.size() > 1) {
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,251,compositeDestinations = new ActiveMQDestination[l.size()];
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,252,int counter = 0;
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,253,for (String dest : l) {
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,254,compositeDestinations[counter++] = createDestination(dest);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,297,prefetchExtension = Math.max(prefetchExtension, index + 1);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,293,+ " WHERE ( EXPIRATION<>0 AND EXPIRATION<?) OR ID <= "
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,161,return Math.max(seq1, seq2);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,598,void clearMessagesInProgress() {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,127,transportListener.onCommand(command);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,209,SERVERS.remove(host);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,210,TransportConnector connector = CONNECTORS.remove(host);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,211,if (connector != null) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,212,LOG.debug("Shutting down VM connectors for broker: " + host);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,213,ServiceSupport.dispose(connector);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,214,BrokerService broker = BROKERS.remove(host);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,215,if (broker != null) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,216,ServiceSupport.dispose(broker);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,344,if (dest.isTopic()) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,349,LOG.debug("Restoring durable subscription: " + info);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,351,subscriptions.put(key, info);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,163,LOG.debug("Restoring durable subscription: " + infos);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,968,sub.getLocalInfo().setAdditionalPredicate(createNetworkBridgeFilter(info));
activemq-core/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,57,ActiveMQDestination[] dests = durableDestinations;
activemq-core/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,102,String subscriberName = configuration.getBrokerName() + "_" + dest.getPhysicalName();
activemq-core/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,58,if (configuration.isDynamicOnly()) {
activemq-core/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,59,result = new ConduitBridge(configuration, localTransport, remoteTransport);
activemq-core/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,61,result = new DurableConduitBridge(configuration, localTransport, remoteTransport);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompFrame.java,166,buffer.append(new String(getContent()));
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,41,private String removeMessageStatment;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,119,public String getRemoveMessageStatment() {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,120,if (removeMessageStatment == null) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,121,removeMessageStatment = "DELETE FROM " + getFullMessageTableName() + " WHERE ID=?";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,123,return removeMessageStatment;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,564,public void setRemoveMessageStatment(String removeMessageStatment) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,565,this.removeMessageStatment = removeMessageStatment;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,393,throw new IllegalStateException("Cannot prepare a transaction that had not been started: "
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,74,private class RemoveTransactionAction implements Runnable {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,81,public void run() {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,407,return TRACKED_RESPONSE_MARKER;
activemq-core/src/main/java/org/apache/activemq/state/Tracked.java,23,private Runnable runnable;
activemq-core/src/main/java/org/apache/activemq/state/Tracked.java,25,public Tracked(Runnable runnable) {
activemq-core/src/main/java/org/apache/activemq/state/Tracked.java,26,this.runnable = runnable;
activemq-core/src/main/java/org/apache/activemq/state/Tracked.java,29,public void onResponses() {
activemq-core/src/main/java/org/apache/activemq/state/Tracked.java,30,if (runnable != null) {
activemq-core/src/main/java/org/apache/activemq/state/Tracked.java,31,runnable.run();
activemq-core/src/main/java/org/apache/activemq/state/Tracked.java,32,runnable = null;
activemq-core/src/main/java/org/apache/activemq/state/Tracked.java,37,return runnable != null;
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,93,connection.start();
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQObjectMessage.java,80,storeContent();
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQObjectMessage.java,82,copy.object = null;
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQInitialContextFactory.java,201,ActiveMQConnectionFactory answer = new ActiveMQConnectionFactory();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,207,persistentMode += "Durable, subscriptionID=" + JMXSupport.encodeObjectNamePart(sub.getConsumerInfo().getSubscriptionName());
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,103,throw IOExceptionSupport.create(e);
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,48,private int maxChannelsPerWorker = 64;
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,85,freeWorkers.add(worker);
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,71,int count = selector.select(10);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1032,LOG.error(getConsumerId() + " Exception while processing message: " + e, e);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1092,try {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1093,ActiveMQMessage message = createActiveMQMessage(md);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1094,beforeMessageIsConsumed(md);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1095,listener.onMessage(message);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1096,afterMessageIsConsumed(md, false);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1098,session.connection.onClientInternalException(e);
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,64,SelectorWorker worker = null;
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,65,if (freeWorkers.size() > 0) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,66,worker = freeWorkers.getFirst();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,68,worker = new SelectorWorker(this);
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,69,freeWorkers.addFirst(worker);
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,72,SelectorSelection selection = new SelectorSelection(worker, socketChannel, listener);
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,31,private final SelectionKey key;
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,35,public SelectorSelection(SelectorWorker worker, SocketChannel socketChannel, Listener listener) throws ClosedChannelException {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,47,key.interestOps(interest);
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,48,worker.selector.wakeup();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,56,worker.decrementUseCounter();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,33,final AtomicInteger useCounter = new AtomicInteger();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,42,void incrementUseCounter() {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,43,int use = useCounter.getAndIncrement();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,44,if (use == 0) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,45,manager.getSelectorExecutor().execute(this);
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,51,void decrementUseCounter() {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,52,int use = useCounter.getAndDecrement();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,53,if (use == 1) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,60,boolean isRunning() {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,61,return useCounter.get() != 0;
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,69,while (isRunning()) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,76,if (!isRunning()) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,77,return;
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,90,s.disable();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,116,manager.onWorkerEmptyEvent(this);
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,293,public void messageDiscarded(ConnectionContext context, MessageReference messageReference) {
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,294,super.messageDiscarded(context, messageReference);
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,300,fireAdvisory(context, topic,payload);
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,378,advisoryMessage.setIntProperty("consumerCount", count);
activemq-core/src/main/java/org/apache/activemq/broker/Broker.java,344,void messageDiscarded(ConnectionContext context, MessageReference messageReference);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerFilter.java,286,public void messageDiscarded(ConnectionContext context,MessageReference messageReference) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerFilter.java,287,next.messageDiscarded(context, messageReference);
activemq-core/src/main/java/org/apache/activemq/broker/EmptyBroker.java,273,public void messageDiscarded(ConnectionContext context,MessageReference messageReference) {
activemq-core/src/main/java/org/apache/activemq/broker/ErrorBroker.java,288,public void messageDiscarded(ConnectionContext context,MessageReference messageReference) {
activemq-core/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java,298,public void messageDiscarded(ConnectionContext context,MessageReference messageReference) {
activemq-core/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java,299,getNext().messageDiscarded(context, messageReference);
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,355,public void messageDiscarded(ConnectionContext context, MessageReference messageReference) {
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,357,broker.messageDiscarded(context, messageReference);
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,240,next.messageDiscarded(context, messageReference);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,446,dest.messageDiscarded(getContext(), message);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,20,import java.util.ArrayList;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,22,import java.util.List;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/VMPendingMessageCursor.java,167,return list;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,123,list = matched.pageInList(pageInSize);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,474,public synchronized List<MessageReference> getInFlightMessages(){
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,475,List<MessageReference> result = new ArrayList<MessageReference>();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,476,synchronized(matched) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,477,result.addAll(matched.pageInList(1000));
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,479,return result;
activemq-web/src/main/java/org/apache/activemq/web/SessionFilter.java,42,((HttpServletRequest)request).getSession(true);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/VMPendingMessageCursor.java,36,private LinkedList<MessageReference> list = new LinkedList<MessageReference>();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/VMPendingMessageCursor.java,40,public VMPendingMessageCursor(){
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/VMPendingMessageCursor.java,41,this.useCache=false;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/VMPendingMessageCursor.java,50,if( r.getRegionDestination()==destination ) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/VMPendingMessageCursor.java,56,return rc ;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/VMPendingMessageCursor.java,68,if (node== QueueMessageReference.NULL_MESSAGE){
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/VMPendingMessageCursor.java,69,continue;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/VMPendingMessageCursor.java,121,last = (MessageReference)iter.next();
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,331,public void isFull(ConnectionContext context,Destination destination,Usage usage) {
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,332,super.isFull(context,destination, usage);
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,333,try {
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,334,ActiveMQTopic topic = AdvisorySupport.getFullAdvisoryTopic(destination.getActiveMQDestination());
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,335,ActiveMQMessage advisoryMessage = new ActiveMQMessage();
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,336,advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_USAGE_NAME, usage.getName());
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,337,fireAdvisory(context, topic,null,null,advisoryMessage);
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,339,LOG.warn("Failed to fire message is full advisory");
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,620,List<Message> l = new ArrayList<Message>();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1182,node.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,378,MessageReference message = (MessageReference) matched
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,379,.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,266,message.incrementReferenceCount();
activemq-camel/src/main/java/org/apache/activemq/camel/component/ActiveMQComponent.java,134,return new ActiveMQConfiguration();
activemq-camel/src/main/java/org/apache/activemq/camel/component/ActiveMQConfiguration.java,151,return new SingleConnectionFactory(answer);
activemq-camel/src/main/java/org/apache/activemq/camel/component/ActiveMQConfiguration.java,154,return createPooledConnectionFactory(answer);
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,206,name = "set" + name.substring(0, 1).toUpperCase() + name.substring(1);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,71,host = data.getPath();
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,88,private final Journal journal;
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,89,private final PersistenceAdapter longTermPersistence;
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,119,checkpointTask = taskRunnerFactory.createTaskRunner(new Task() {
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,120,public boolean iterate() {
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,121,return doCheckpoint();
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,21,import org.springframework.beans.factory.DisposableBean;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,22,import org.springframework.beans.factory.InitializingBean;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,55,addShutdownHook(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,56,public void run() {
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,57,if (applicationContext instanceof ConfigurableApplicationContext) {
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,58,((ConfigurableApplicationContext) applicationContext).close();
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,69,public boolean isStart() {
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,70,return start;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,528,md = dequeue(-1); // We let the broker let us know when we
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,170,for (int i = 0; i < size; i++) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,264,if (localTransactionEventListener != null) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,265,localTransactionEventListener.commitEvent();
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,267,afterCommit();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,143,FrameTranslator translator = frameTranslator;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,144,try {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,145,if (header != null) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,146,translator = (FrameTranslator) FRAME_TRANSLATOR_FINDER
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,147,.newInstance(header);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,148,if (translator instanceof ApplicationContextAware) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,149,((ApplicationContextAware)translator).setApplicationContext(applicationContext);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,156,return translator;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,214,final String receiptId = command.getHeaders().get(Stomp.Headers.RECEIPT_REQUESTED);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,215,if (receiptId != null) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,216,headers.put(Stomp.Headers.Response.RECEIPT_ID, receiptId);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,420,String durable = command.getHeaders().get("activemq.subscriptionName");
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,579,if (ignoreTransformation == true) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,580,return frameTranslator.convertMessage(this, message);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,582,return findTranslator(message.getStringProperty(Stomp.Headers.TRANSFORMATION)).convertMessage(this, message);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,590,public ActiveMQDestination createTempQueue(String name) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,600,public ActiveMQDestination createTempTopic(String name) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,611,public String getCreatedTempDestinationName(ActiveMQDestination destination) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,612,return tempDestinationAmqToStompMap.get(destination.getQualifiedName());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,236,listener.recoverMessage(msg);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,237,lastMessageId.set(sequenceId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,337,+ " WHERE CONTAINER=? AND ID > ? ORDER BY ID";
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,53,private Map<String, BlockingQueueTransport> clients = new HashMap<String, BlockingQueueTransport>();
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,54,private long requestTimeout = 30000L;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,99,protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,102,Command command = (Command)wireFormat.unmarshalText(request.getReader());
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,105,WireFormatInfo info = (WireFormatInfo)command;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,107,response.sendError(HttpServletResponse.SC_NOT_FOUND, "Cannot process wire format of version: " + info.getVersion());
activemq-optional/src/main/java/org/apache/activemq/transport/util/TextWireFormat.java,44,out.writeUTF(marshalText(command));
activemq-optional/src/main/java/org/apache/activemq/transport/util/TextWireFormat.java,48,String text = in.readUTF();
activemq-core/src/main/java/org/apache/activemq/jndi/ReadOnlyContext.java,99,treeBindings = new HashMap<String, Object>();
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,154,String ssp = stripPrefix(uri.getSchemeSpecificPart().trim(), "//").trim();
activemq-core/src/main/java/org/apache/activemq/jndi/ReadOnlyContext.java,98,this.bindings = bindings;
activemq-core/src/main/java/org/apache/activemq/jndi/ReadOnlyContext.java,376,private Iterator i = bindings.entrySet().iterator();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,97,import org.apache.activemq.advisory.DestinationSource;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,182,private AtomicInteger protocolVersion = new AtomicInteger(CommandTypes.PROTOCOL_VERSION);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,183,private long timeCreated;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,184,private ConnectionAudit connectionAudit = new ConnectionAudit();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1875,DestinationInfo info = new DestinationInfo();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1876,info.setConnectionId(this.info.getConnectionId());
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1877,info.setOperationType(DestinationInfo.REMOVE_OPERATION_TYPE);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1878,info.setDestination(destination);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1879,info.setTimeout(0);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1880,syncSendPacket(info);
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,146,public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,147,Destination answer = super.addDestination(context, destination);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerBroadcaster.java,161,public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerBroadcaster.java,162,Destination result = next.addDestination(context, destination);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerBroadcaster.java,165,brokers[i].addDestination(context, destination);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerFilter.java,141,public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerFilter.java,142,return next.addDestination(context, destination);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1275,return getBroker().addDestination(getAdminConnectionContext(), destination);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1787,getBroker().addDestination(adminConnectionContext, destination);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1947,broker.addDestination(adminConnectionContext, destination);
activemq-core/src/main/java/org/apache/activemq/broker/EmptyBroker.java,136,public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/ErrorBroker.java,139,public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java,148,public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java,149,return getNext().addDestination(context, destination);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,227,broker.addDestination(getConnectionContext(broker.getContextBroker()), new ActiveMQTopic(name));
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,231,broker.addDestination(getConnectionContext(broker.getContextBroker()), new ActiveMQQueue(name));
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,69,public AbstractRegion(RegionBroker broker, DestinationStatistics destinationStatistics, SystemUsage memoryManager, TaskRunnerFactory taskRunnerFactory,
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,70,DestinationFactory destinationFactory) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,84,public final  void start() throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,94,context.getBroker().addDestination(context, dest);
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,115,public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,120,dest = createDestination(context, destination);
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,122,DestinationInterceptor destinationInterceptor = broker.getDestinationInterceptor();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,123,if (destinationInterceptor != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,124,dest = destinationInterceptor.intercept(dest);
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,126,dest.start();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,127,destinations.put(destination, dest);
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,128,destinationMap.put(destination, dest);
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,129,addSubscriptionsForDestination(context, dest);
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,135,protected List<Subscription> addSubscriptionsForDestination(ConnectionContext context, Destination dest) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,150,public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,185,dispose(context,dest);
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,219,lookup(context, destination);
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,233,LOG.warn("A duplicate subscription was detected. Clients may be misbehaving. Later warnings you may see about subscription removal are a consequence of this.");
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,266,List<Destination>addList = new ArrayList<Destination>();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,267,synchronized(destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,269,Destination dest = (Destination)iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,274,for (Destination dest:addList) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,279,((QueueBrowserSubscription)sub).destinationsAdded();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,317,.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,323,for(Destination dest:removeList) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,346,final Destination regionDestination = lookup(context, messageSend.getDestination());
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,384,protected Destination lookup(ConnectionContext context, ActiveMQDestination destination) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,433,protected Destination createDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,445,public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception{
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,459,public void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception{
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,462,Destination dest = (Destination)iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,468,protected void dispose(ConnectionContext context,Destination dest) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/Region.java,54,Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception;
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,250,public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,261,answer = queueRegion.addDestination(context, destination);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,264,answer = topicRegion.addDestination(context, destination);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,267,answer = tempQueueRegion.addDestination(context, destination);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,270,answer = tempTopicRegion.addDestination(context, destination);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,305,addDestination(context, info.getDestination());
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,330,context.getBroker().addDestination(context, destination);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,417,producerExchange.getConnectionContext().getBroker().addDestination(producerExchange.getConnectionContext(), destination);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,67,lookup(context, destination);
activemq-core/src/main/java/org/apache/activemq/broker/view/DestinationDotFileInterceptor.java,41,public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/view/DestinationDotFileInterceptor.java,42,Destination answer = super.addDestination(context, destination);
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,49,public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,50,final SecurityContext securityContext = (SecurityContext)context.getSecurityContext();
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,77,return super.addDestination(context, destination);
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,82,final SecurityContext securityContext = (SecurityContext)context.getSecurityContext();
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,101,final SecurityContext subject = (SecurityContext)context.getSecurityContext();
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,143,SecurityContext subject = (SecurityContext)context.getSecurityContext();
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,165,SecurityContext subject = (SecurityContext)producerExchange.getConnectionContext().getSecurityContext();
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,102,lastRunTime = now;
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,112,stopMonitorThreads();
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,162,ASYNC_TASKS.execute(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,259,readCheckTime = Math.min(localWireFormatInfo.getMaxInactivityDuration(), remoteWireFormatInfo.getMaxInactivityDuration());
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,260,initialDelayTime =  Math.min(localWireFormatInfo.getMaxInactivityDurationInitalDelay(), remoteWireFormatInfo.getMaxInactivityDurationInitalDelay());
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,267,if( CHECKER_COUNTER == 0 ) {
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,268,READ_CHECK_TIMER = new Timer("InactivityMonitor ReadCheck",true);
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,269,WRITE_CHECK_TIMER = new Timer("InactivityMonitor WriteCheck",true);
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,271,CHECKER_COUNTER++;
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,286,WRITE_CHECK_TIMER.purge();
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,287,READ_CHECK_TIMER.purge();
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,288,CHECKER_COUNTER--;
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,289,if(CHECKER_COUNTER==0) {
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,290,WRITE_CHECK_TIMER.cancel();
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,291,READ_CHECK_TIMER.cancel();
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,292,WRITE_CHECK_TIMER = null;
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,293,READ_CHECK_TIMER = null;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1042,if (LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,463,return (acknowledgementMode == Session.SESSION_TRANSACTED) || (transactionContext.isInXATransaction());
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1692,return this.acknowledgementMode == Session.SESSION_TRANSACTED;
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,256,beforeEnd();
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,146,size = text.length() * 2;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,198,if( transport!=null ) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,104,int messageCount = store.getMessageCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,105,destinationStatistics.getMessages().setCount(messageCount);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,563,destinationStatistics.getMessages().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,594,destinationStatistics.getMessages().decrement();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,502,if (!started.compareAndSet(true, false)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/QueueStorePrefetch.java,36,private MessageStore store;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/QueueStorePrefetch.java,44,this.store = (MessageStore)queue.getMessageStore();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/QueueStorePrefetch.java,63,return this.store.getMessageCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,41,private TopicMessageStore store;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,43,private String clientId;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,44,private String subscriberName;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,45,private Subscription subscription;
activemq-core/src/main/java/org/apache/activemq/store/MessageStore.java,28,import org.apache.activemq.usage.SystemUsage;
activemq-core/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,28,import org.apache.activemq.usage.SystemUsage;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,101,private final MessageDispatchChannel unconsumedMessages = new MessageDispatchChannel();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,21,import org.apache.activemq.command.*;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,33,import javax.jms.*;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,34,import javax.jms.IllegalStateException;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,35,import javax.jms.Message;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,36,import java.io.File;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,37,import java.io.InputStream;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,38,import java.io.Serializable;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,39,import java.net.URL;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,40,import java.util.Collections;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,41,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,42,import java.util.List;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,43,import java.util.concurrent.CopyOnWriteArrayList;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,44,import java.util.concurrent.atomic.AtomicBoolean;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,561,executor.clearMessagesInProgress();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,562,for (Iterator<ActiveMQMessageConsumer> iter = consumers.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,563,ActiveMQMessageConsumer consumer = iter.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,564,consumer.clearMessagesInProgress();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,239,if (ack.getLastMessageId().equals(messageId)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,240,if (context.isInTransaction()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,243,if (getPrefetchSize() != 0) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,244,prefetchExtension = Math.max(
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,689,unconsumedMessages.close();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,690,this.session.removeConsumer(this);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,232,node.getRegionDestination().getDestinationStatistics().getInflight().decrement();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,362,.getInflight().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,248,prefetchExtension = Math.max(0,
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,204,boolean reconnectOk = false;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,215,if(reconnectOk) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,220,if (transportListener != null) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,221,transportListener.transportInterupted();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,389,if(command instanceof RemoveInfo) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,406,LOG.trace("Waiting for transport to reconnect.");
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,661,restoreTransport(t);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1001,if (clearDispatchList) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1004,clearDispatchList = false;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1005,List<MessageDispatch> list = unconsumedMessages.removeAll();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1006,if (!this.info.isBrowser()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1007,for (MessageDispatch old : list) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1009,session.connection.rollbackDuplicate(this, old.getMessage());
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,438,throw new JMSException("Unmatched acknowledege: " + ack
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,442,throw new JMSException("Unmatched acknowledege: " + ack
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,446,throw new JMSException("Unmatched acknowledege: " + ack
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,455,LOG.debug(s, e);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,658,LOG.debug("Setting up new connection: " + getRemoteAddress());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,89,if (LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,32,import org.apache.activemq.command.MessageAck;
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,136,for (Iterator iter = connectionState.getTransactionStates().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,137,TransactionState transactionState = (TransactionState)iter.next();
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,138,for (Iterator iterator = transactionState.getCommands().iterator(); iterator.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,139,Command command = (Command)iterator.next();
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,344,ConnectionId connectionId = send.getProducerId().getParentId().getParentId();
activemq-core/src/main/java/org/apache/activemq/state/SessionState.java,53,return producers.remove(id);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,48,public JDBCMessageStore(JDBCPersistenceAdapter persistenceAdapter, JDBCAdapter adapter, WireFormat wireFormat, ActiveMQDestination destination) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,121,MessageStore rc = new JDBCMessageStore(this, getAdapter(), wireFormat, destination);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,129,TopicMessageStore rc = new JDBCTopicMessageStore(this, getAdapter(), wireFormat, destination);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,43,public JDBCTopicMessageStore(JDBCPersistenceAdapter persistenceAdapter, JDBCAdapter adapter, WireFormat wireFormat, ActiveMQTopic topic) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,44,super(persistenceAdapter, adapter, wireFormat, topic);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,88,server.start();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,108,server.stop();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,28,import org.apache.activemq.store.MessageRecoveryListener;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,29,import org.apache.activemq.store.MessageStore;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,30,import org.apache.activemq.usage.MemoryUsage;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,63,throw IOExceptionSupport.create("Failed to broker message: " + message.getMessageId() + " in container: " + e, e);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,69,adapter.doAddMessage(c, message.getMessageId(), destination, data, message.getExpiration());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,72,throw IOExceptionSupport.create("Failed to broker message: " + message.getMessageId() + " in container: " + e, e);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/AMQTxMarshaller.java,58,dataOut.writeInt(list.size());
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpBufferedInputStream.java,46,private void fill() throws IOException {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,507,TcpBufferedInputStream buffIn = new TcpBufferedInputStream(socket.getInputStream(), ioBufferSize);
activemq-core/src/main/java/org/apache/activemq/transport/udp/CommandDatagramSocket.java,73,DataInputStream dataIn = new DataInputStream(new ByteArrayInputStream(datagram.getData()));
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,784,ackLater(md, MessageAck.DELIVERED_ACK_TYPE);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,146,Message result = null;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,149,result.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,61,private MessageReference last = null;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/VMPendingMessageCursor.java,38,private MessageReference last;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,102,matched.addMessageLast(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,120,LinkedList list = null;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,312,public synchronized boolean isFull() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,314,return false;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,115,private TaskRunnerFactory sessionTaskRunner = new TaskRunnerFactory("ActiveMQ Session Task", ThreadPriorities.INBOUND_CLIENT_SESSION, false, 1000);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,636,sessionTaskRunner.shutdown();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,110,private int sendTimeout =0;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,140,messageQueue.stop();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,141,if (taskRunner != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,142,taskRunner.shutdown();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,922,public void run() {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,923,serviceLock.writeLock().lock();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,924,try {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,925,doStop();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,929,stopped.countDown();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,930,serviceLock.writeLock().unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,63,import org.apache.activemq.thread.DeterministicTaskRunner;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,81,protected TaskRunnerFactory taskFactory;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,101,wakeup();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,139,if( messages instanceof VMPendingMessageCursor ) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,144,if (isOptimizedDispatch()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,145,this.taskRunner = taskFactory.createTaskRunner(this, "TempQueue:  " + destination.getPhysicalName());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,147,this.executor =  Executors.newSingleThreadExecutor(new ThreadFactory() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,148,public Thread newThread(Runnable runnable) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,150,thread.setDaemon(true);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,151,thread.setPriority(Thread.NORM_PRIORITY);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,152,return thread;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,156,this.taskRunner = new DeterministicTaskRunner(this.executor,this);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapterFactory.java,118,true, 1000);
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapterFactory.java,116,true, 1000);
activemq-core/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,46,public TaskRunnerFactory(String name, int priority, boolean daemon, int maxIterationsPerRun) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,46,private static final TaskRunnerFactory TASK_RUNNER_FACTORY = new TaskRunnerFactory("VMTransport", Thread.NORM_PRIORITY, true, 1000);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,442,public void run() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,107,protected final BrokerId localBrokerPath[] = new BrokerId[] {null};
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,146,Command command = (Command)o;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,157,Command command = (Command)o;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,408,protected void serviceRemoteCommand(Command command) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,413,MessageDispatch md = (MessageDispatch)command;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,422,remoteBrokerInfo = (BrokerInfo)command;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,427,ConnectionError ce = (ConnectionError)command;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,432,ActiveMQMessage message = (ActiveMQMessage)command;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,453,localStartedLatch.await();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,457,LOG.debug("Ignoring ConsumerInfo: "+ command);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,461,LOG.trace("Adding ConsumerInfo: "+ command);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,466,LOG.warn("Stopping - ignoring ConsumerInfo: "+ command);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,499,ConsumerInfo info = (ConsumerInfo)data;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,534,DestinationInfo destInfo = (DestinationInfo)data;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,553,ActiveMQTempDestination tempDest = (ActiveMQTempDestination)destInfo.getDestination();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,560,ConsumerId id = (ConsumerId)((RemoveInfo)data).getObjectId();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,621,if (sub != null && md.getMessage()!=null) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,628,Object consumerInfo = md.getMessage().getDataStructure();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,630,cameFromRemote = contains( ((ConsumerInfo)consumerInfo).getBrokerPath(),remoteBrokerInfo.getBrokerId());
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,646,if( !cameFromRemote ) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,647,remoteBroker.oneway(message);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,652,localBroker.oneway(new MessageAck(md, MessageAck.INDIVIDUAL_ACK_TYPE, 1));
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,666,ExceptionResponse er = (ExceptionResponse)response;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,687,localBrokerInfo = (BrokerInfo)command;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,700,ConnectionError ce = (ConnectionError)command;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,711,LOG.warn("Caught an exception processing local command",e);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,826,return new BrokerId[] {idToAppend};
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,923,ActiveMQTempDestination dest = (ActiveMQTempDestination)result.getLocalInfo().getDestination();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,940,final protected DemandSubscription createDemandSubscription(ActiveMQDestination destination){
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,952,LOG.error("Failed to create DemandSubscription ",e);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1041,ASYNC_TASKS =   new ThreadPoolExecutor(0, Integer.MAX_VALUE, 30, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(), new ThreadFactory() {
activemq-core/src/main/java/org/apache/activemq/network/DemandSubscription.java,43,remoteSubsIds.add(info.getConsumerId());
activemq-core/src/main/java/org/apache/activemq/transport/ResponseCorrelator.java,64,Command command = (Command)o;
activemq-core/src/main/java/org/apache/activemq/transport/ResponseCorrelator.java,69,if( this.error !=null ) {
activemq-core/src/main/java/org/apache/activemq/transport/ResponseCorrelator.java,70,throw error;
activemq-core/src/main/java/org/apache/activemq/transport/ResponseCorrelator.java,72,requestMap.put(new Integer(command.getCommandId()), future);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,443,System.exit(systemExitOnShutdownExitCode);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,172,if (broker.isExpired(message)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1185,if (!broker.isExpired(node)) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,43,final ManagedRegionBroker broker;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/DataFile.java,94,rc.setLength(preferedSize);
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisorySupport.java,43,public static final String FAST_PRODUCER_TOPIC_PREFIX = ADVISORY_TOPIC_PREFIX + "FastPorducer.";
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,711,do {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,712,pageInMessages();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,767,pageInMessages();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,827,pageInMessages();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1168,if (isLazyDispatch()&& !force) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1303,private void pageInMessages() throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1304,pageInMessages(true);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,366,answer = new TransactionContext(getDataSource());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,374,return new TransactionContext(getDataSource());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,65,connection.setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,84,node.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,142,getDiskList().clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,387,LOG.error("Caught an IO Exception getting the DiskList ",e);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransport.java,30,import org.apache.activemq.command.Command;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransport.java,90,SSLSocket sslSocket = (SSLSocket)this.socket;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransport.java,92,SSLSession sslSession = sslSocket.getSession();
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransport.java,94,X509Certificate[] clientCertChain;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransport.java,95,try {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransport.java,96,clientCertChain = (X509Certificate[])sslSession.getPeerCertificates();
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransport.java,98,clientCertChain = null;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransport.java,101,connectionInfo.setTransportContext(clientCertChain);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransport.java,104,super.doConsume(command);
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,48,private ConcurrentHashMap<URI, NetworkBridge> bridges = new ConcurrentHashMap<URI, NetworkBridge>();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,356,sub = subscriptions.get(ack.getConsumerId());
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,363,.isInRecoveryMode()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,364,throw new IllegalArgumentException(
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,366,+ ack.getConsumerId());
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,368,return;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,588,protected void removeSubscription(DemandSubscription sub) throws IOException {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,620,DemandSubscription sub = subscriptionMapByLocalId.get(md.getConsumerId());
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,653,dequeueCounter.incrementAndGet();
activemq-core/src/main/java/org/apache/activemq/network/DemandSubscription.java,82,public int getDispatched() {
activemq-core/src/main/java/org/apache/activemq/network/DemandSubscription.java,83,return dispatched.get();
activemq-core/src/main/java/org/apache/activemq/network/DemandSubscription.java,89,public void setDispatched(int dispatched) {
activemq-core/src/main/java/org/apache/activemq/network/DemandSubscription.java,90,this.dispatched.set(dispatched);
activemq-core/src/main/java/org/apache/activemq/network/DemandSubscription.java,96,public int incrementDispatched() {
activemq-core/src/main/java/org/apache/activemq/network/DemandSubscription.java,97,return dispatched.incrementAndGet();
activemq-core/src/main/java/org/apache/activemq/broker/util/TimeStampingBrokerPlugin.java,38,public void send(ProducerBrokerExchange producerExchange, Message message) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/util/TimeStampingBrokerPlugin.java,48,message.setExpiration(expiration);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,362,doMessageSend(producerExchange, message);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,137,dispatchedMessage.remove(messageId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,107,c.getConnection().commit();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,65,String sql = statements.getLockCreateStatement();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,91,LOG.warn("Caught while closing statement: " + e1, e1);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,97,LOG.debug("Sleeping for " + lockAcquireSleepInterval + " milli(s) before trying again to get the lock...");
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/MySqlJDBCAdapter.java,28,statements.setLockCreateStatement("LOCK TABLE " + statements.getFullLockTableName() + " WRITE");
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/MySqlJDBCAdapter.java,35,s[i] = s[i]+" TYPE=INNODB";
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1166,int toPageIn = getMaxPageSize() + Math.max(0, (int)destinationStatistics.getInflight().getCount()) - pagedInMessages.size();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1167,toPageIn = Math.max(0, Math.min(toPageIn, getMaxPageSize()));
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,734,if (!session.isDupsOkAcknowledge()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1025,if (session.isDupsOkAcknowledge() || session.isAutoAcknowledge() || session.isIndividualAcknowledge()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,344,throw new javax.jms.ResourceAllocationException("SystemUsage memory limit reached");
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,83,this.systemUsage = brokerService.getProducerSystemUsage();
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,84,this.memoryUsage = new MemoryUsage(systemUsage.getMemoryUsage(), destination.toString());
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,285,throw new javax.jms.ResourceAllocationException("Usage Manager memory limit reached");
activemq-camel/src/main/java/org/apache/activemq/camel/component/ActiveMQConfiguration.java,189,return null;
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,20,import java.util.Iterator;
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,51,private ArrayList<ManagedSessionProxy> sessions = new ArrayList<ManagedSessionProxy>();
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,76,for (Iterator<ManagedSessionProxy> iter = sessions.iterator(); iter.hasNext();) {
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,77,ManagedSessionProxy p = iter.next();
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,78,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,79,p.cleanup();
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,82,iter.remove();
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,113,ActiveMQSession session = (ActiveMQSession)getConnection().createSession(transacted, acknowledgeMode);
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,116,ManagedSessionProxy p = new ManagedSessionProxy(session);
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,118,sessions.add(p);
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,125,p.setUseSharedTxContext(enable);
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedSessionProxy.java,59,public ManagedSessionProxy(ActiveMQSession session) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,479,if (!isSlave()) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,263,this.connection.syncSendPacket(info);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,382,IntegerResponse response = (IntegerResponse)this.connection.syncSendPacket(info);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,416,this.connection.syncSendPacket(info);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,456,this.connection.syncSendPacket(info);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,494,this.connection.syncSendPacket(info);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,586,this.connection.syncSendPacket(info);
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,71,Queue regionQueue = (Queue)i.next();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,72,regionQueue.purge();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1121,wakeup();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1148,try {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1149,taskRunner.wakeup();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1151,LOG.warn("Task Runner failed to wakeup ", e);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,19,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,20,import java.util.ArrayList;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,21,import java.util.Collections;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,22,import java.util.Comparator;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,23,import java.util.HashSet;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,24,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,25,import java.util.LinkedHashMap;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,26,import java.util.LinkedList;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,27,import java.util.List;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,28,import java.util.Set;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,29,import java.util.concurrent.CopyOnWriteArraySet;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,30,import java.util.concurrent.ExecutorService;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,31,import java.util.concurrent.Executors;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,32,import java.util.concurrent.ThreadFactory;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,33,import java.util.concurrent.locks.ReentrantLock;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,34,import javax.jms.InvalidSelectorException;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,35,import javax.jms.JMSException;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,94,private final ReentrantLock dispatchLock = new ReentrantLock();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,217,dispatchLock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,218,try {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,252,dispatchLock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,266,dispatchLock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,267,try {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,314,dispatchLock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,999,dispatchLock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1000,try {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1003,dispatchLock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1164,dispatchLock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1165,try{
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1211,dispatchLock.unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1217,dispatchLock.lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1218,try {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1241,dispatchLock.unlock();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,369,LOG.debug("Network Could not shutdown in a timely manner");
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1427,asyncSendPacket(info.createRemoveCommand());
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,68,private final ConcurrentHashMap<TransactionId, List<TransactionContext>> ENDED_XA_TRANSACTION_CONTEXTS = new ConcurrentHashMap<TransactionId, List<TransactionContext>>();
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,230,this.connection.asyncSendPacket(info);
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,73,if (!disposed) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,99,protected boolean disposed;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,273,localClientId = "NC_" + remoteBrokerName + "_inbound" + configuration.getBrokerName();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,335,if (!disposed) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,344,LOG.debug(" stopping " + configuration.getBrokerName() + " bridge to " + remoteBrokerName + " is disposed already ? " + disposed);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,345,boolean wasDisposedAlready = disposed;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,346,if (!disposed) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,352,disposed = true;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,368,if( !sendShutdown.await(100, TimeUnit.MILLISECONDS) ) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,373,ss.stop(localBroker);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,383,if (wasDisposedAlready) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,384,LOG.debug(configuration.getBrokerName() + " bridge to " + remoteBrokerName + " stopped");
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,386,LOG.info(configuration.getBrokerName() + " bridge to " + remoteBrokerName + " stopped");
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,392,if (!disposed) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,409,if (!disposed) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,566,if (!disposed) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,613,if (!disposed) {
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,111,bridges.put(uri, bridge);
activemq-core/src/main/java/org/apache/activemq/network/ConduitBridge.java,62,DestinationFilter filter = DestinationFilter.parseFilter(info.getDestination());
activemq-core/src/main/java/org/apache/activemq/network/ConduitBridge.java,65,if (filter.matches(ds.getLocalInfo().getDestination())) {
activemq-core/src/main/java/org/apache/activemq/filter/DestinationFilter.java,63,return new PrefixDestinationFilter(paths);
activemq-core/src/main/java/org/apache/activemq/filter/DestinationFilter.java,68,return new WildcardDestinationFilter(paths);
activemq-core/src/main/java/org/apache/activemq/filter/PrefixDestinationFilter.java,37,public PrefixDestinationFilter(String[] prefixes) {
activemq-core/src/main/java/org/apache/activemq/filter/WildcardDestinationFilter.java,37,public WildcardDestinationFilter(String[] prefixes) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ConnectionView.java,68,public int getDispatchQueueSize() {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ConnectionView.java,69,return connection.getDispatchQueueSize();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ConnectionView.java,84,public long getEnqueueCount() {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ConnectionView.java,85,return connection.getStatistics().getEnqueues().getCount();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ConnectionView.java,94,public long getDequeueCount() {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ConnectionView.java,95,return connection.getStatistics().getDequeues().getCount();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ConnectionViewMBean.java,45,int getDispatchQueueSize();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ConnectionViewMBean.java,57,long getEnqueueCount();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ConnectionViewMBean.java,64,long getDequeueCount();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ConnectorView.java,85,public long getEnqueueCount() {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ConnectorView.java,86,return connector.getStatistics().getEnqueues().getCount();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ConnectorView.java,95,public long getDequeueCount() {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ConnectorView.java,96,return connector.getStatistics().getDequeues().getCount();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ConnectorViewMBean.java,50,long getEnqueueCount();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ConnectorViewMBean.java,57,long getDequeueCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,222,prefetchExtension--;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,149,try {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,150,oneway(DISCONNECT);
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,125,if(LOG.isTraceEnabled()) {
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,134,info.setResponseRequired(true);
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,265,writeCheckTime = readCheckTime/3;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,167,inTx = false;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,195,inTx = false;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DB2JDBCAdapter.java,30,public DB2JDBCAdapter() {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DB2JDBCAdapter.java,31,batchStatments = false;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,387,rmiServer = "localhost:" + rmiServerPort;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,389,String serviceURL = "service:jmx:rmi://" + rmiServer + "/jndi/rmi://localhost:" + connectorPort + connectorPath;
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,78,fireAdvisory(context, topic, info);
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,79,connections.put(info.getConnectionId(), info);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,250,return;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,251,running = false;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,255,serverSessionPool.close();
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStoreAdapter.java,153,rc = new KahaReferenceStore(this, getMapReferenceContainer(destination, "queue-data"),
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,684,if(!message.isPersistent()){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,700,BrokerSupport.resend(context,message,
activemq-core/src/main/java/org/apache/activemq/util/BrokerSupport.java,42,Message message = originalMessage.copy();
activemq-core/src/main/java/org/apache/activemq/network/ConduitBridge.java,68,ds.add(info.getConsumerId());
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,206,if (!this.getConsumerInfo().isBrowser()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,207,node.getRegionDestination().getDestinationStatistics().getDequeues().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,220,node.getRegionDestination().getDestinationStatistics().getDequeues().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,273,node.getRegionDestination().getDestinationStatistics().getDequeues().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,359,.getDequeues().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,585,node.getRegionDestination().messageExpired(context, this, node);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1111,destinationStatistics.getDequeues().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,660,return messageReference.isExpired();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,675,if(message!=null&&node.getRegionDestination()!=null){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,680,long expiration=message.getExpiration();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,681,message.setExpiration(0);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,683,expiration));
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,614,public boolean isExpired() {
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,615,long expireTime = this.getExpiration();
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,616,if (expireTime > 0 && System.currentTimeMillis() > expireTime) {
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,617,return true;
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,619,return false;
activemq-core/src/main/java/org/apache/activemq/command/Message.java,438,long expireTime = getExpiration();
activemq-core/src/main/java/org/apache/activemq/command/Message.java,439,if (expireTime > 0 && System.currentTimeMillis() > expireTime) {
activemq-core/src/main/java/org/apache/activemq/command/Message.java,440,return true;
activemq-core/src/main/java/org/apache/activemq/command/Message.java,442,return false;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,929,return (Service[]) services.toArray();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,244,da.registerService(getConnectUri().toString());
activemq-core/src/main/java/org/apache/activemq/transport/discovery/DiscoveryTransport.java,74,next.add(new URI[] {uri});
activemq-core/src/main/java/org/apache/activemq/broker/region/IndirectMessageReference.java,72,return "Message " + message.getMessageId() + " dropped=" + dropped + " locked=" + (lockOwner != null);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,292,if( node.isExpired() ) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,293,node.getRegionDestination().messageExpired(context, this, node);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,552,rc.addAll(pending.remove(context, destination));
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,682,message.setProperty("originalExpiration",new Long(
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationStatistics.java,24,import org.apache.tools.ant.taskdefs.condition.IsReference;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,173,messageExpired(createConnectionContext(), message);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,485,public void gc(){
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,618,public Message[] browse() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,619,int count = 0;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,622,synchronized (this.pagedInPendingDispatch) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,623,for (Iterator<QueueMessageReference> i = this.pagedInPendingDispatch
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,625,&& count < getMaxBrowsePageSize();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,626,l.add(i.next().getMessage());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,627,count++;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,630,if (count < getMaxBrowsePageSize()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,632,for (Iterator<QueueMessageReference> i = this.pagedInMessages
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,634,&& count < getMaxBrowsePageSize();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,635,Message m = i.next().getMessage();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,636,if (l.contains(m) == false) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,637,l.add(m);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,638,count++;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,643,if (count < getMaxBrowsePageSize()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,644,synchronized (messages) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,645,try {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,646,messages.reset();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,648,&& count < getMaxBrowsePageSize()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,649,MessageReference node = messages.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,650,messages.rollback(node.getMessageId());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,651,if (node != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,652,Message m = node.getMessage();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,653,if (l.contains(m) == false) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,654,l.add(m);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,655,count++;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,660,messages.release();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,665,LOG.error("Problem retrieving message in browse() ", e);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,667,return l.toArray(new Message[l.size()]);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1105,public void messageExpired(ConnectionContext context,MessageReference reference) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1106,messageExpired(context,null,reference);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1112,destinationStatistics.getInflight().decrement();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1118,synchronized(pagedInMessages) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1119,pagedInMessages.remove(reference.getMessageId());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1189,messageExpired(createConnectionContext(), ref);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,80,if (deadLetterStrategy != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,81,queue.setDeadLetterStrategy(deadLetterStrategy);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,104,if (deadLetterStrategy != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,105,topic.setDeadLetterStrategy(deadLetterStrategy);
activemq-core/src/main/java/org/apache/activemq/transport/TransportFactory.java,267,if (options.containsKey(WRITE_TIMEOUT_FILTER)) {
activemq-core/src/main/java/org/apache/activemq/transport/TransportFactory.java,268,transport = new WriteTimeoutFilter(transport);
activemq-core/src/main/java/org/apache/activemq/transport/TransportFactory.java,269,String soWriteTimeout = (String)options.get(WRITE_TIMEOUT_FILTER);
activemq-core/src/main/java/org/apache/activemq/transport/TransportFactory.java,270,if (soWriteTimeout!=null) ((WriteTimeoutFilter)transport).setWriteTimeout(Long.parseLong(soWriteTimeout));
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportFactory.java,108,return transport;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,121,sub.add(context, this);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,183,synchronized (consumers) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,184,consumers.add(subscription);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,215,topicStore.addSubsciption(info,subscription.getConsumerInfo().isRetroactive());
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,548,referenceStoreAdapter.recoverState();
activemq-fileserver/src/main/java/org/apache/activemq/util/RestFilter.java,41,import sun.net.www.protocol.http.HttpURLConnection;
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterBroker.java,103,super.stop();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,33,protected String sequenceDataType = "INTEGER";
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,38,this.key = socketChannel.register(worker.selector, 0, this);
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,39,worker.incrementUseCounter();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,57,key.cancel();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,58,worker.selector.wakeup();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,256,return sendTextMessage(Collections.EMPTY_MAP,body,null,null);
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,93,if (allowedACLs != null && !securityContext.isInOneOf(allowedACLs)) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,112,if (allowedACLs != null && !subject.isInOneOf(allowedACLs)) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,147,if (info.getDestination() != null) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,169,if (!subject.getAuthorizedWriteDests().contains(messageSend.getDestination())) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,840,DestinationFilter filter = DestinationFilter.parseFilter(destination);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,845,if (filter instanceof org.apache.activemq.filter.SimpleDestinationFilter) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,848,filter = newFilter;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,852,if (match != null && filter.matches(match)) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,861,if (filter instanceof org.apache.activemq.filter.SimpleDestinationFilter) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,864,filter = newFilter;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,868,if (match != null && filter.matches(match)) {
activemq-core/src/main/java/org/apache/activemq/transport/udp/UdpTransportFactory.java,63,UdpTransport transport = new UdpTransport(openWireFormat, port);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,855,additionalWindowSize = deliveredCounter;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,858,if (ackType == MessageAck.STANDARD_ACK_TYPE) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,859,deliveredCounter = 0;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,860,additionalWindowSize = 0;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,438,dequeueCounter.incrementAndGet();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,220,dequeueCounter.addAndGet(ack.getMessageCount());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,749,ackLater(md, MessageAck.DELIVERED_ACK_TYPE);
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,52,key.interestOps(0);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1073,wakeup();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,682,Transport t = TransportFactory.compositeConnect(uri);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,80,private CallbackHandler handler;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,81,private String initialContextFactory;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,82,private String connectionURL;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,83,private String connectionUsername;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,84,private String connectionPassword;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,85,private String connectionProtocol;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,86,private String authentication;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,87,private String userBase;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,88,private String roleBase;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,89,private String roleName;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,90,private String userRoleName;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,92,private MessageFormat userSearchMatchingFormat;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,93,private MessageFormat roleSearchMatchingFormat;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,94,private boolean userSearchSubtreeBool;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,95,private boolean roleSearchSubtreeBool;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,101,initialContextFactory = (String)options.get(INITIAL_CONTEXT_FACTORY);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,102,connectionURL = (String)options.get(CONNECTION_URL);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,103,connectionUsername = (String)options.get(CONNECTION_USERNAME);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,104,connectionPassword = (String)options.get(CONNECTION_PASSWORD);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,105,connectionProtocol = (String)options.get(CONNECTION_PROTOCOL);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,106,authentication = (String)options.get(AUTHENTICATION);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,107,userBase = (String)options.get(USER_BASE);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,108,String userSearchMatching = (String)options.get(USER_SEARCH_MATCHING);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,109,String userSearchSubtree = (String)options.get(USER_SEARCH_SUBTREE);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,110,roleBase = (String)options.get(ROLE_BASE);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,111,roleName = (String)options.get(ROLE_NAME);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,112,String roleSearchMatching = (String)options.get(ROLE_SEARCH_MATCHING);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,113,String roleSearchSubtree = (String)options.get(ROLE_SEARCH_SUBTREE);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,114,userRoleName = (String)options.get(USER_ROLE_NAME);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,115,userSearchMatchingFormat = new MessageFormat(userSearchMatching);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,116,roleSearchMatchingFormat = new MessageFormat(roleSearchMatching);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,117,userSearchSubtreeBool = Boolean.valueOf(userSearchSubtree).booleanValue();
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,118,roleSearchSubtreeBool = Boolean.valueOf(roleSearchSubtree).booleanValue();
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,134,String password = new String(((PasswordCallback)callbacks[1]).getPassword());
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,136,if (username == null || "".equals(username) || password == null || "".equals(password)) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,137,return false;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,199,if (userRoleName != null) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,200,list.add(userRoleName);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,206,NamingEnumeration results = context.search(userBase, filter, constraints);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,219,Name baseName = parser.parse(userBase);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,230,if (userRoleName != null) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,231,roles = addAttributeValues(userRoleName, attrs, roles);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,261,if (roleName == null || "".equals(roleName)) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,274,NamingEnumeration results = context.search(roleBase, filter, constraints);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,281,list = addAttributeValues(roleName, attrs, list);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,328,if (connectionUsername != null) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,329,context.addToEnvironment(Context.SECURITY_PRINCIPAL, connectionUsername);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,334,if (connectionPassword != null) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,335,context.addToEnvironment(Context.SECURITY_CREDENTIALS, connectionPassword);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,364,if (context != null) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,365,return context;
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,370,env.put(Context.INITIAL_CONTEXT_FACTORY, initialContextFactory);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,371,if (connectionUsername != null || !"".equals(connectionUsername)) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,372,env.put(Context.SECURITY_PRINCIPAL, connectionUsername);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,374,if (connectionPassword != null || !"".equals(connectionPassword)) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,375,env.put(Context.SECURITY_CREDENTIALS, connectionPassword);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,377,env.put(Context.SECURITY_PROTOCOL, connectionProtocol);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,378,env.put(Context.PROVIDER_URL, connectionURL);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,379,env.put(Context.SECURITY_AUTHENTICATION, authentication);
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,24,import java.net.URI;
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,25,import java.net.URISyntaxException;
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,180,private static Object convert(Object value, Class type) throws URISyntaxException {
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,186,if (type == URI.class) {
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,187,return new URI(value.toString());
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,192,private static String convertToString(Object value, Class type) throws URISyntaxException {
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,198,if (type == URI.class) {
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,199,return ((URI)value).toString();
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,222,if (clazz == URI.class) {
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,223,return true;
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,225,if (clazz == Boolean.class) {
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,226,return true;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,595,protected DemandSubscription getDemandSubscription(MessageDispatch md) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,596,return subscriptionMapByLocalId.get(md.getConsumerId());
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,619,final MessageDispatch md = (MessageDispatch)command;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,627,boolean cameFromRemote = false;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,649,else{
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,650,LOG.info("Message not forwarded on to remote, because message came from remote");
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1824,for (Iterator<ActiveMQSession> i = this.sessions.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1825,ActiveMQSession s = i.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1826,s.deliverAcks();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,431,if (LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,432,LOG.debug(getConsumerId() + " received message: " + md);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,613,synchronized(deliveredMessages) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,614,ack = makeAckForAllDeliveredMessages(MessageAck.STANDARD_ACK_TYPE);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,615,if (ack != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,616,deliveredMessages.clear();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,617,ackCounter = 0;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,850,pendingAck.setTransactionId(session.getTransactionContext().getTransactionId());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,886,deliveredCounter -= deliveredMessages.size();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1043,LOG.debug(getConsumerId() + " Ignoring Duplicate: " + md.getMessage());
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1639,if (this.debug) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1640,LOG.debug(getSessionId() + " sending message: " + msg);
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,202,pending.addRecoveredMessage(message);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,387,if (callDispatchMatched && destination != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,389,destination.wakeup();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,653,node.getRegionDestination().getDestinationStatistics().getInflight().increment();
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,362,public Response processMessageAck(MessageAck ack) {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,363,if (trackTransactions && ack != null && ack.getTransactionId() != null) {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,364,ConnectionId connectionId = ack.getConsumerId().getParentId().getParentId();
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,365,if (connectionId != null) {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,366,ConnectionState cs = connectionStates.get(connectionId);
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,367,if (cs != null) {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,368,TransactionState transactionState = cs.getTransactionState(ack.getTransactionId());
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,369,if (transactionState != null) {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,370,transactionState.addCommand(ack);
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,374,return TRACKED_RESPONSE_MARKER;
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,376,return null;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1403,if (advisoryConsumer != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,417,return null;
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,79,if (subscriberCount > 0) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,276,return false;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,42,protected boolean cacheEnabled=false;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,78,if (!isDuplicate(message.getMessageId())) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,170,if (size==0 && isStarted() && useCache) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,171,cacheEnabled=true;
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,120,if ( recoverReference(listener, msg)) {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,161,public void addReferenceFileIdsInUse() {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,162,for (StoreEntry entry = messageContainer.getFirst(); entry != null; entry = messageContainer
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,163,.getNext(entry)) {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,164,ReferenceRecord msg = (ReferenceRecord)messageContainer.getValue(entry);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,165,addInterest(msg);
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,246,LOG.debug("Memory usage change.  from: " + oldPercentUsage + ", to: " + newPercentUsage);
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,282,public Response processRemoveConsumer(ConsumerId id) {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,314,public Response processRemoveSession(SessionId id) {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,334,public Response processRemoveConnection(ConnectionId id) throws Exception {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1045,ackLater(md, MessageAck.STANDARD_ACK_TYPE);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,263,LOG.error("Could not correlate acknowledgment with dispatched message: "
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,274,protected synchronized boolean  isDuplicate(MessageId messageId) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,77,public synchronized boolean recoverMessage(Message message, boolean cached)throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,90,LOG.debug("Ignoring batched duplicated from store: " + message);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,94,return true;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,22,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/store/ReferenceStore.java,71,void addMessageReference(ConnectionContext context, MessageId messageId, ReferenceData data) throws IOException;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,388,referenceStore.addMessageReference(context, entry.getKey(), entry.getValue());
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,393,size++;
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,136,public void addMessageReference(ConnectionContext context, MessageId messageId,
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,140,ReferenceRecord record = new ReferenceRecord(messageId.toString(), data);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,141,messageContainer.put(messageId, record);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,142,addInterest(record);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,73,public  void addMessageReference(final ConnectionContext context, final MessageId messageId,
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,470,LOG.debug("Send oneway attempt: " + i + " failed.");
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,271,getExecutor().execute(listenerNotifier);
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAReferenceStore.java,73,public void addMessageReference(ConnectionContext context, MessageId messageId, ReferenceData data) throws IOException {
activemq-core/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,68,NodeIterator iterator = cachedXPathAPI.selectNodeIterator(doc, xpath);
activemq-core/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,69,return iterator.nextNode() != null;
activemq-core/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,89,NodeIterator iterator = cachedXPathAPI.selectNodeIterator(doc, xpath);
activemq-core/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,90,return iterator.nextNode() != null;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,79,public class Queue extends BaseDestination implements Task {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,97,private QueueDispatchSelector  dispatchSelector;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,149,Thread thread = new Thread(runnable, "QueueThread:"+destination);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1017,synchronized(messagesWaitingForSpace) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1018,while (!messagesWaitingForSpace.isEmpty() && !memoryUsage.isFull()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1019,Runnable op = messagesWaitingForSpace.removeFirst();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1020,op.run();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1023,return false;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,28,import org.apache.activemq.usage.Usage;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,29,import org.apache.activemq.usage.UsageListener;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,37,public abstract class AbstractStoreCursor extends AbstractPendingMessageCursor implements MessageRecoveryListener, UsageListener {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,62,getSystemUsage().getMemoryUsage().addUsageListener(this);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,66,getSystemUsage().getMemoryUsage().removeUsageListener(this);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,185,public final synchronized void onUsageChanged(Usage usage, int oldPercentUsage,
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,186,int newPercentUsage) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,187,if (oldPercentUsage > newPercentUsage && oldPercentUsage >= memoryUsageHighWaterMark) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,188,storeHasMessages = true;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,189,try {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,190,fillBatch();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,192,LOG.error("Failed to fill batch ", e);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,34,import org.apache.activemq.usage.MemoryUsage;
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQObjectMessage.java,179,throw new IOException(ce.getMessage());
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQObjectMessage.java,181,dataIn.close();
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,81,return ((ObjectMessage) message).getObject();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,83,Topic topic = (Topic)iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,84,topic.deleteSubscription(context, key);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,139,Topic topic = (Topic)iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,140,topic.deleteSubscription(context, key);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,45,import org.apache.activemq.broker.region.group.MessageGroupSet;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1172,if ((force || !consumers.isEmpty()) && toPageIn > 0) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1173,messages.setMaxBatchSize(toPageIn);
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterBroker.java,199,sendAsyncToSlave(info);
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterBroker.java,200,Subscription answer = super.addConsumer(context, info);
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterBroker.java,201,return answer;
activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterBroker.java,316,sendAsyncToSlave(mdn);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,232,localAndXATransaction.cleanup();
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,163,removeMessage = true;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,98,Thread.sleep(lockAcquireSleepInterval);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,106,if (connection != null) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,107,connection.rollback();
activemq-core/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,89,if (info.isDurable() || (info.getDestination().isQueue() && !info.getDestination().isTemporary())) {
activemq-core/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,90,info.setConsumerId(new ConsumerId(localSessionInfo.getSessionId(), consumerIdGenerator
activemq-core/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,91,.getNextSequenceId()));
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,519,stopper.stop(persistenceAdapter);
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAPersistenceAdapter.java,197,if (entityManagerFactory != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,612,if (this.optimizeAcknowledge) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,755,synchronized (deliveredMessages) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,756,if (!deliveredMessages.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,757,if (optimizeAcknowledge) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,758,if (deliveryingAcknowledgements.compareAndSet(
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,759,false, true)) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,761,if (ackCounter >= (info
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,762,.getCurrentPrefetchSize() * .65)) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,770,deliveryingAcknowledgements.set(false);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,773,MessageAck ack = makeAckForAllDeliveredMessages(MessageAck.STANDARD_ACK_TYPE);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,774,if (ack!=null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,775,deliveredMessages.clear();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,776,session.sendAck(ack);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,289,.removeConsumer(consumerId);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,302,if (!list.isEmpty() && !consumers.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,994,pageInMoreMessages = !messages.isEmpty();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1250,List<QueueMessageReference> rc = new ArrayList<QueueMessageReference>(list.size());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1251,Set<Subscription> fullConsumers = new HashSet<Subscription>(this.consumers.size());
activemq-core/src/main/java/org/apache/activemq/network/DemandSubscription.java,41,localInfo.setBrokerPath(info.getBrokerPath());
activemq-core/src/main/java/org/apache/activemq/network/DemandSubscription.java,52,public boolean add(ConsumerId id) {
activemq-core/src/main/java/org/apache/activemq/network/DemandSubscription.java,53,if (localInfo != null) {
activemq-core/src/main/java/org/apache/activemq/network/DemandSubscription.java,54,localInfo.addNetworkConsumerId(id);
activemq-core/src/main/java/org/apache/activemq/network/DemandSubscription.java,66,if (localInfo != null) {
activemq-core/src/main/java/org/apache/activemq/network/DemandSubscription.java,67,localInfo.removeNetworkConsumerId(id);
activemq-core/src/main/java/org/apache/activemq/network/DemandSubscription.java,40,localInfo.setSelector(null);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,118,MarshallingSupport.writeUTF8(dataOut, text);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,674,for (MessageDispatch old : deliveredMessages) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,675,session.connection.rollbackDuplicate(this, old.getMessage());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,158,cacheEnabled=false;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,323,node.incrementRedeliveryCounter();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,231,node.incrementRedeliveryCounter();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,551,public Response processRemoveConsumer(ConsumerId id) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,586,public Response processRemoveSession(SessionId id) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,600,processRemoveConsumer(consumerId);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,694,public synchronized Response processRemoveConnection(ConnectionId id) throws InterruptedException {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,705,processRemoveSession(sessionId);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1000,processRemoveConnection(cs.getInfo().getConnectionId());
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,181,dest.removeSubscription(context, sub);
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,324,dest.removeSubscription(context, sub);
activemq-core/src/main/java/org/apache/activemq/broker/region/Destination.java,44,void removeSubscription(ConnectionContext context, Subscription sub) throws Exception;
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,89,public void removeSubscription(ConnectionContext context, Subscription sub) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,90,next.removeSubscription(context, sub);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,297,qmr.incrementRedeliveryCounter();
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,156,public void removeSubscription(ConnectionContext context, Subscription sub) throws Exception {
activemq-core/src/main/java/org/apache/activemq/command/RemoveInfo.java,60,return visitor.processRemoveConnection((ConnectionId)objectId);
activemq-core/src/main/java/org/apache/activemq/command/RemoveInfo.java,62,return visitor.processRemoveSession((SessionId)objectId);
activemq-core/src/main/java/org/apache/activemq/command/RemoveInfo.java,64,return visitor.processRemoveConsumer((ConsumerId)objectId);
activemq-core/src/main/java/org/apache/activemq/state/CommandVisitor.java,57,Response processRemoveConnection(ConnectionId id) throws Exception;
activemq-core/src/main/java/org/apache/activemq/state/CommandVisitor.java,59,Response processRemoveSession(SessionId id) throws Exception;
activemq-core/src/main/java/org/apache/activemq/state/CommandVisitor.java,63,Response processRemoveConsumer(ConsumerId id) throws Exception;
activemq-core/src/main/java/org/apache/activemq/state/CommandVisitorAdapter.java,130,public Response processRemoveConnection(ConnectionId id) throws Exception {
activemq-core/src/main/java/org/apache/activemq/state/CommandVisitorAdapter.java,134,public Response processRemoveConsumer(ConsumerId id) throws Exception {
activemq-core/src/main/java/org/apache/activemq/state/CommandVisitorAdapter.java,146,public Response processRemoveSession(SessionId id) throws Exception {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,277,MessageAck ack = sub.onStompMessageAck(messageId);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,49,private final LinkedHashMap<String, MessageId> dispatchedMessage = new LinkedHashMap<String, MessageId>();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,68,dispatchedMessage.put(message.getJMSMessageID(), message.getMessageId());
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,72,dispatchedMessage.put(message.getJMSMessageID(), message.getMessageId());
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,99,synchronized MessageAck onStompMessageAck(String messageId) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,101,if (!dispatchedMessage.containsKey(messageId)) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,110,ack.setAckType(MessageAck.STANDARD_ACK_TYPE);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,115,String id = (String)entry.getKey();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,116,MessageId msgid = (MessageId)entry.getValue();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,119,ack.setFirstMessageId(msgid);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,122,iter.remove();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,125,if (id.equals(messageId)) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,126,ack.setLastMessageId(msgid);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,135,MessageId msgid = (MessageId)dispatchedMessage.get(messageId);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,136,ack.setMessageID(msgid);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,836,if (destination.isTemporary() && !configuration.isBridgeTempDestinations()) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,837,return false;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,237,doPageIn(false);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,239,synchronized (pagedInMessages) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,240,RecoveryDispatch rd = new RecoveryDispatch();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,241,rd.messages =  new ArrayList<QueueMessageReference>(pagedInMessages.values());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,242,rd.subscription = sub;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,243,recoveries.addLast(rd);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,245,if( sub instanceof QueueBrowserSubscription ) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,307,if (consumers.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,308,messages.gc();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,903,pageInMessages();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1278,if (target == null && interestCount>0) {
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,73,if (result) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,299,if(!transacted && acknowledgeMode==Session.SESSION_TRANSACTED) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,300,throw new JMSException("acknowledgeMode SESSION_TRANSACTED cannot be used for an non-transacted Session");
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,123,for (Iterator<ManagedSessionProxy> iter = sessions.iterator(); iter.hasNext();) {
activemq-ra/src/main/java/org/apache/activemq/ra/ManagedConnectionProxy.java,124,ManagedSessionProxy p = iter.next();
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,207,LOG.debug("Connection established");
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,209,fanoutHandler.reconnectDelay = 10;
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,210,fanoutHandler.connectFailures = 0;
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,211,if (primary == null) {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,212,primary = fanoutHandler;
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,283,if (destinations.remove(destination) != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,130,if (dispatchCounterBeforePull == dispatchCounter) {
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,58,private ThreadPoolExecutor executor;
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,284,public synchronized void start() {
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,296,public synchronized void stop() {
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,403,protected synchronized Executor getExecutor() {
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,405,this.executor = new ThreadPoolExecutor(1, 1, 0,
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,406,TimeUnit.NANOSECONDS,
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,407,new LinkedBlockingQueue<Runnable>(), new ThreadFactory() {
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,408,public Thread newThread(Runnable runnable) {
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,410,+ " Usage Thread Pool");
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,411,thread.setDaemon(true);
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,412,return thread;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,142,public static final int INDIVIDUAL_ACKNOWLEDGE=4;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,555,dispose();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,556,connection.asyncSendPacket(info.createRemoveCommand());
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,202,public Set getDestinations(ActiveMQDestination destination) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,57,return existing;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/data/DataFile.java,31,private File file;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/data/DataFile.java,32,private Integer number;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/data/DataManagerImpl.java,68,dataFilePrefix = NAME_PREFIX + name + "-";
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,73,private Map<ContainerId, ListContainerImpl> lists = new ConcurrentHashMap<ContainerId, ListContainerImpl>();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,74,private Map<ContainerId, MapContainerImpl> maps = new ConcurrentHashMap<ContainerId, MapContainerImpl>();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,75,private Map<String, DataManager> dataManagers = new ConcurrentHashMap<String, DataManager>();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,76,private Map<String, IndexManager> indexManagers = new ConcurrentHashMap<String, IndexManager>();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,77,private IndexManager rootIndexManager; // contains all the root indexes
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,479,rootIndexManager = getIndexManager(defaultDM, defaultContainerName);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,681,this.filePrefix = filePrefix;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/container/MapContainerImpl.java,75,name=IOHelper.toFileSystemSafeName(name);
activemq-core/src/main/java/org/apache/activemq/store/amq/RecoveryListenerAdapter.java,58,LOG.error("Message id " + ref + " could not be recovered from the data store - already dispatched");
activemq-core/src/main/java/org/apache/activemq/store/amq/RecoveryListenerAdapter.java,60,return false;
activemq-core/src/main/java/org/apache/activemq/kaha/ContainerId.java,52,public void setDataContainerName(String dataContainerName) {
activemq-core/src/main/java/org/apache/activemq/kaha/ContainerId.java,53,this.dataContainerName = dataContainerName;
activemq-core/src/main/java/org/apache/activemq/kaha/ContainerId.java,66,public void setKey(Object key) {
activemq-core/src/main/java/org/apache/activemq/kaha/ContainerId.java,67,this.key = key;
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,201,ContainerId containerId = new ContainerId();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,202,containerId.setKey(id);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,203,containerId.setDataContainerName(containerName);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,218,String containerName = IOHelper.toFileSystemSafeName(originalContainerName);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,219,ContainerId containerId = new ContainerId();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,220,containerId.setKey(id);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,221,containerId.setDataContainerName(containerName);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,224,DataManager dm = getDataManager(containerName);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,225,IndexManager im = getIndexManager(dm, containerName);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,271,ContainerId containerId = new ContainerId();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,272,containerId.setKey(id);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,273,containerId.setDataContainerName(containerName);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,285,public synchronized ListContainer getListContainer(Object id, String originalContainerName,
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,288,String containerName = IOHelper.toFileSystemSafeName(originalContainerName);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,289,ContainerId containerId = new ContainerId();
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,290,containerId.setKey(id);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,291,containerId.setDataContainerName(containerName);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,294,DataManager dm = getDataManager(containerName);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,295,IndexManager im = getIndexManager(dm, containerName);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1339,syncSendPacket(info);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2046,public void unsubscribe(String name) throws JMSException {
activemq-core/src/main/java/org/apache/activemq/command/ConnectionInfo.java,51,public void copy(ConnectionInfo copy) {
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,154,if (text.length() > 63) {
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAMessageStore.java,40,public class JPAMessageStore implements MessageStore {
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAMessageStore.java,44,protected final ActiveMQDestination destination;
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAMessageStore.java,50,this.destination = destination;
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAMessageStore.java,79,public ActiveMQDestination getDestination() {
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAMessageStore.java,80,return destination;
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAMessageStore.java,194,public void setMemoryUsage(MemoryUsage memoeyUSage){
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAMessageStore.java,197,public void start() throws Exception {
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAMessageStore.java,200,public void stop() throws Exception {
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAReferenceStore.java,41,public class JPAReferenceStore implements ReferenceStore {
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAReferenceStore.java,45,protected final ActiveMQDestination destination;
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAReferenceStore.java,52,this.destination = destination;
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAReferenceStore.java,61,public ActiveMQDestination getDestination() {
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAReferenceStore.java,62,return destination;
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAReferenceStore.java,209,public void setMemoryUsage(MemoryUsage memoeyUSage){
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAReferenceStore.java,212,public void start() throws Exception {
activemq-jpa-store/src/main/java/org/apache/activemq/store/jpa/JPAReferenceStore.java,215,public void stop() throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,40,public static final int MAX_PAGE_SIZE=200;
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,41,public static final int MAX_BROWSE_PAGE_SIZE=MAX_PAGE_SIZE*2;
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,48,private int maxProducersToAudit=1024;
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,49,private int maxAuditDepth=2048;
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,50,private boolean enableAudit=true;
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,51,private int maxPageSize=MAX_PAGE_SIZE;
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,52,private int maxBrowsePageSize=MAX_BROWSE_PAGE_SIZE;
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,53,private boolean useCache=true;
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,54,private int minimumMessageSize=1024;
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,55,private boolean lazyDispatch=false;
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,74,public BaseDestination(BrokerService brokerService,MessageStore store, ActiveMQDestination destination, DestinationStatistics parentStats) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,76,this.broker=brokerService.getBroker();
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,77,this.store=store;
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,78,this.destination=destination;
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,81,this.destinationStatistics.setParent(parentStats);
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,150,public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception{
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,154,public void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception{
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,180,return destinationStatistics.getConsumers().getCount() != 0 ||
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,181,destinationStatistics.getProducers().getCount() != 0;
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,252,public void setAdvisoryForDiscardingMessages(
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,253,boolean advisoryForDiscardingMessages) {
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,344,if(advisoryForDelivery) {
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,367,if(advisoryForSlowConsumers) {
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,377,public void fastProducer(ConnectionContext context,ProducerInfo producerInfo) {
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,378,if(advisdoryForFastProducers) {
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,388,public void isFull(ConnectionContext context,Usage usage) {
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,389,if(advisoryWhenFull) {
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,390,broker.isFull(context,this, usage);
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,395,destinationStatistics.setParent(null);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,478,public void dispose(ConnectionContext context) throws IOException {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,479,super.dispose(context);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,480,if (store != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,481,store.removeAllMessages(context);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,452,public void dispose(ConnectionContext context) throws IOException {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,453,super.dispose(context);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,454,if (topicStore != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,455,topicStore.removeAllMessages(context);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,44,import org.apache.activemq.store.MessageStore;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,62,public class AMQMessageStore implements MessageStore {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,69,protected final ActiveMQDestination destination;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,85,public AMQMessageStore(AMQPersistenceAdapter adapter,ReferenceStore referenceStore, ActiveMQDestination destination) {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,87,this.lock=referenceStore.getStoreLock();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,90,this.destination = destination;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,91,this.transactionTemplate = new TransactionTemplate(adapter, new ConnectionContext(new NonCachedMessageEvaluationContext()));
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,164,lock.lock();
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,165,try {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,171,if (messages.size() > this.peristenceAdapter
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,172,.getMaxCheckpointMessageAddSize()) {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,197,LOG.warn("Could not replay add for message '" + id + "'.  Message may have already been added. reason: " + e, e);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,213,removeMessage(ack,location);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,229,LOG.debug("Transacted message remove commit for: " + ack.getLastMessageId() + ", at: " + location);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,237,removeMessage(ack,location);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,242,LOG.debug("Transacted message remove rollback for: " + ack.getLastMessageId() + ", at: " + location);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,258,try{
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,274,else if (data == null) {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,292,LOG.warn("Could not replay acknowledge for message '" + messageAck.getLastMessageId() + "'.  Message may have already been acknowledged. reason: " + e);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,375,LOG.debug("Doing batch update... adding: " + cpAddedMessageIds.size() + " removing: " + cpRemovedMessageLocations.size() + " ");
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,389,AMQMessageStore.this.peristenceAdapter.removeInProgressDataFile(AMQMessageStore.this,entry.getValue().getFileId());
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,439,throw new IOException("Could not read message " + identity
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,440,+ " at location " + location
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,481,referenceStore.recover(new RecoveryListenerAdapter(this, listener));
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,509,public ActiveMQDestination getDestination() {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,510,return destination;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,513,public void addMessageReference(ConnectionContext context, MessageId messageId, long expirationTime, String messageRef) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,546,return (Message)rc;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,548,throw new IOException("Could not read message  at location " + location + ", expected a message, but got: " + rc);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,31,import org.apache.activemq.usage.SystemUsage;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,40,public class JDBCMessageStore implements MessageStore {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,43,protected final ActiveMQDestination destination;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,52,this.destination = destination;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,172,public void start() {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,175,public void stop() {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,194,public ActiveMQDestination getDestination() {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,195,return destination;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,198,public void setMemoryUsage(MemoryUsage memoryUsage) {
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalMessageStore.java,53,public class JournalMessageStore implements MessageStore {
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalMessageStore.java,60,protected final ActiveMQDestination destination;
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalMessageStore.java,78,this.destination = destination;
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalMessageStore.java,385,public ActiveMQDestination getDestination() {
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalMessageStore.java,386,return destination;
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaMessageStore.java,38,public class KahaMessageStore implements MessageStore {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaMessageStore.java,40,protected final ActiveMQDestination destination;
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaMessageStore.java,47,this.destination = destination;
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaMessageStore.java,104,public void start() {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaMessageStore.java,107,public void stop() {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaMessageStore.java,114,public ActiveMQDestination getDestination() {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaMessageStore.java,115,return destination;
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaMessageStore.java,122,public void setMemoryUsage(MemoryUsage memoryUsage) {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,40,public class KahaReferenceStore implements ReferenceStore {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,42,protected final ActiveMQDestination destination;
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,53,this.destination = destination;
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,60,public void start() {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,63,public void stop() {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,207,public ActiveMQDestination getDestination() {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,208,return destination;
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,234,public void setMemoryUsage(MemoryUsage memoryUsage) {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStoreAdapter.java,259,Set<SubscriptionInfo> set = new HashSet<SubscriptionInfo>(this.durableSubscribers);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,42,private Map<String, SubscriptionInfo> subscriberContainer;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,42,public class MemoryMessageStore implements MessageStore {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,44,protected final ActiveMQDestination destination;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,53,this.destination = destination;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,111,public void start() {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,114,public void stop() {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,123,public ActiveMQDestination getDestination() {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,124,return destination;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,168,public void setMemoryUsage(MemoryUsage memoeyUSage){
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,97,enqueueValve.decrement();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,24,import java.security.KeyManagementException;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,25,import java.security.SecureRandom;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,39,import javax.net.ssl.KeyManager;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,40,import javax.net.ssl.TrustManager;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,86,import org.apache.activemq.transport.tcp.SslTransportFactory;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,78,rs = c.getConnection().getMetaData().getTables(null, null,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,79,statements.getFullMessageTableName(),
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,80,new String[] {"TABLE"});
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,87,String[] createStatments = statements.getCreateSchemaStatements();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,96,LOG.debug("Could not create JDBC tables; The message table already existed."
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,98,+ " SQLState: " + e.getSQLState() + " Vendor code: " + e.getErrorCode());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,101,+ createStatments[i] + " Message: " + e.getMessage() + " SQLState: "
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,102,+ e.getSQLState() + " Vendor code: " + e.getErrorCode());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,120,String[] dropStatments = statements.getDropSchemaStatements();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,128,LOG.warn("Could not drop JDBC tables; they may not exist." + " Failure was: "
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,129,+ dropStatments[i] + " Message: " + e.getMessage() + " SQLState: "
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,130,+ e.getSQLState() + " Vendor code: " + e.getErrorCode());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,147,s = c.getConnection().prepareStatement(statements.getFindLastSequenceIdInMsgsStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,155,s = c.getConnection().prepareStatement(statements.getFindLastSequenceIdInAcksStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,168,public void doAddMessage(TransactionContext c, MessageId messageID, ActiveMQDestination destination,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,169,byte[] data, long expiration) throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,173,s = c.getConnection().prepareStatement(statements.getAddMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,174,if (batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,184,if (batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,190,if (!batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,191,if (s!=null) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,198,public void doAddMessageReference(TransactionContext c, MessageId messageID,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,200,throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,204,s = c.getConnection().prepareStatement(statements.getAddMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,205,if (batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,215,if (batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,221,if (!batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,227,public long getBrokerSequenceId(TransactionContext c, MessageId messageID) throws SQLException,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,228,IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,232,s = c.getConnection().prepareStatement(statements.getFindMessageSequenceIdStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,250,s = c.getConnection().prepareStatement(statements.getFindMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,267,s = c.getConnection().prepareStatement(statements.getFindMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,284,s = c.getConnection().prepareStatement(statements.getRemoveMessageStatment());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,285,if (batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,290,if (batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,296,if (!batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,302,public void doRecover(TransactionContext c, ActiveMQDestination destination,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,303,JDBCMessageRecoveryListener listener) throws Exception {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,307,s = c.getConnection().prepareStatement(statements.getFindAllMessagesStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,310,if (statements.isUseExternalMessageReferences()) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,330,String subscriptionName, long seq) throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,334,s = c.getConnection().prepareStatement(statements.getUpdateLastAckOfDurableSubStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,335,if (batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,343,if (batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,349,if (!batchStatments) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,357,throws Exception {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,363,s = c.getConnection().prepareStatement(statements.getFindAllDurableSubMessagesStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,368,if (statements.isUseExternalMessageReferences()) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,388,String subscriptionName, long seq, int maxReturned,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,389,JDBCMessageRecoveryListener listener) throws Exception {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,393,s = c.getConnection().prepareStatement(statements.getFindDurableSubMessagesStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,401,if (statements.isUseExternalMessageReferences()) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,426,throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,431,s = c.getConnection().prepareStatement(statements.getDurableSubscriberMessageCountStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,451,throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,458,s = c.getConnection().prepareStatement(statements.getFindLastSequenceIdInMsgsStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,470,s = c.getConnection().prepareStatement(statements.getCreateDurableSubStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,487,throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,491,s = c.getConnection().prepareStatement(statements.getFindDurableSubStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,504,subscription.setSubscribedDestination(ActiveMQDestination
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,505,.createDestination(rs.getString(2), ActiveMQDestination.QUEUE_TYPE));
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,514,throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,518,s = c.getConnection().prepareStatement(statements.getFindAllDurableSubsStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,528,subscription.setSubscribedDestination(ActiveMQDestination
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,529,.createDestination(rs.getString(4), ActiveMQDestination.QUEUE_TYPE));
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,540,throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,543,s = c.getConnection().prepareStatement(statements.getRemoveAllMessagesStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,547,s = c.getConnection().prepareStatement(statements.getRemoveAllSubscriptionsStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,556,String subscriptionName) throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,559,s = c.getConnection().prepareStatement(statements.getDeleteSubscriptionStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,572,LOG.debug("Executing SQL: " + statements.getDeleteOldMessagesStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,573,s = c.getConnection().prepareStatement(statements.getDeleteOldMessagesStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,582,public long doGetLastAckedDurableSubscriberMessageId(TransactionContext c,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,583,ActiveMQDestination destination, String clientId,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,584,String subscriberName) throws SQLException,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,585,IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,591,.prepareStatement(statements.getLastAckedDurableSubscriberMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,627,s = c.getConnection().prepareStatement(statements.getFindAllDestinationsStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,640,return batchStatments;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,648,statements.setUseExternalMessageReferences(useExternalMessageReferences);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,652,return statements;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,659,public byte[] doGetNextDurableSubscriberMessageStatement(TransactionContext c,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,660,ActiveMQDestination destination,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,662,throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,666,s = c.getConnection().prepareStatement(statements.getNextDurableSubscriberMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,682,IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,687,s = c.getConnection().prepareStatement(statements.getDestinationMessageCountStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,701,int maxReturned, JDBCMessageRecoveryListener listener) throws Exception {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,705,s = c.getConnection().prepareStatement(statements.getFindNextMessagesStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,706,s.setMaxRows(maxReturned);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,708,s.setLong(2, nextSeq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,711,if (statements.isUseExternalMessageReferences()) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,717,break;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,726,break;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,221,destination.getDestinationStatistics().getInflight().subtract(ack.getMessageCount());
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,439,destination.getDestinationStatistics().getDequeues().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,440,destination.getDestinationStatistics().getInflight().decrement();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,129,final synchronized void pullTimeout(long dispatchCounterBeforePull) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,131,try {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,132,add(QueueMessageReference.NULL_MESSAGE);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,133,dispatchPending();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,135,context.getConnection().serviceException(e);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,685,message.setPersistent(true);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,686,message.setProperty("originalDeliveryMode",
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,601,return journal.write(toPacket(wireFormat.marshal(command)), sync);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,245,prefetchExtension, index + 1);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,249,prefetchExtension - (index + 1));
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,593,dispose();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,594,this.session.asyncSendPacket(info.createRemoveCommand());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,659,deliverAcks();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,668,if (session.isTransacted() || session.isDupsOkAcknowledge()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,669,acknowledge();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,679,synchronized(deliveredMessages) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,680,deliveredMessages.clear();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,932,if (lastMd.getMessage().getRedeliveryCounter() > 0) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,937,for (Iterator iter = deliveredMessages.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,938,MessageDispatch md = (MessageDispatch)iter.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,952,session.connection.rollbackDuplicate(this, lastMd.getMessage());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,958,MessageAck ack = new MessageAck(lastMd, MessageAck.REDELIVERED_ACK_TYPE, deliveredMessages.size());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,959,ack.setFirstMessageId(firstMsgId);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,960,session.sendAck(ack,true);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,965,for (Iterator iter = deliveredMessages.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,966,MessageDispatch md = (MessageDispatch)iter.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,970,if (redeliveryDelay > 0) {
activemq-core/src/main/java/org/apache/activemq/command/CommandTypes.java,27,byte PROTOCOL_VERSION = 3;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,81,public abstract class DemandForwardingBridgeSupport implements NetworkBridge {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,507,if (contains(info.getBrokerPath(), localBrokerPath[0])) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,522,if (addConsumerInfo(info)) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,523,if (LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,527,if (LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/network/MulticastNetworkConnector.java,154,return new CompositeDemandForwardingBridge(this, local, remote);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,20,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,46,private TaskRunner taskRunner;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,118,for (Iterator i = this.session.consumers.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,119,ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer)i.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,143,taskRunner = null;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,165,return (MessageDispatch)messageQueue.dequeueNoWait();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,179,for (Iterator i = this.session.consumers.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,180,ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer)i.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1618,msg.setJMSDestination(destination);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1619,msg.setJMSDeliveryMode(deliveryMode);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1620,long expiration = 0L;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1621,if (!producer.getDisableMessageTimestamp()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1622,long timeStamp = System.currentTimeMillis();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1623,msg.setJMSTimestamp(timeStamp);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1624,if (timeToLive > 0) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1625,expiration = timeToLive + timeStamp;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1628,msg.setJMSExpiration(expiration);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1629,msg.setJMSPriority(priority);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1630,msg.setJMSRedelivered(false);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,91,if (taskRunner == null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,92,taskRunner = session.connection.getSessionTaskRunner().createTaskRunner(this, "ActiveMQ Session: " + session.getSessionId());
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,99,while (iterate()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,912,Message m = r.getMessage();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,913,BrokerSupport.resend(context, m, dest);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,914,removeMessage(context, r);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,921,synchronized (messages) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,922,messages.rollback(r.getMessageId());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1100,synchronized(messages) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1101,messages.rollback(reference.getMessageId());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,20,import java.util.LinkedHashMap;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,22,import org.apache.activemq.broker.region.MessageReference;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,42,private final LinkedHashMap<MessageId,Message> batchList = new LinkedHashMap<MessageId,Message> ();
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaReferenceStore.java,196,Set<MessageId> tmpSet = new HashSet(messageContainer.keySet());
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,386,Destination dest = destinations.get(destination);
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,387,if (dest == null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,388,if (autoCreateDestinations) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,392,try {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,394,context.getBroker().addDestination(context, destination);
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,395,dest = addDestination(context, destination);
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,401,dest = destinations.get(destination);
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,403,if (dest == null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,404,throw new JMSException("The destination " + destination + " does not exist.");
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,407,return dest;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,972,Scheduler.executeAfterDelay(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,782,Scheduler.executeAfterDelay(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,112,Scheduler.executeAfterDelay(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/TimedSubscriptionRecoveryPolicy.java,93,Scheduler.executePeriodically(gcTask, GC_INTERVAL);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/TimedSubscriptionRecoveryPolicy.java,97,Scheduler.cancel(gcTask);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,194,Scheduler.executePeriodically(cleanupTask, DEFAULT_CLEANUP_INTERVAL);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/AsyncDataManager.java,329,Scheduler.cancel(cleanupTask);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,274,Scheduler.executePeriodically(periodicCheckpointTask, getCheckpointInterval());
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,281,Scheduler.executePeriodically(periodicCleanupTask, getCleanupInterval());
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,304,Scheduler.cancel(periodicCheckpointTask);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,305,Scheduler.cancel(periodicCleanupTask);
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,233,Scheduler.executePeriodically(periodicCheckpointTask, checkpointInterval / 10);
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalPersistenceAdapter.java,244,Scheduler.cancel(periodicCheckpointTask);
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,26,public final class Scheduler {
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,30,public static final Timer CLOCK_DAEMON = new Timer("ActiveMQ Scheduler", true);
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,31,private static final HashMap<Runnable, TimerTask> TIMER_TASKS = new HashMap<Runnable, TimerTask>();
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,36,public static synchronized void executePeriodically(final Runnable task, long period) {
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,42,public static synchronized void cancel(Runnable task) {
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,50,public static void executeAfterDelay(final Runnable task, long redeliveryDelay) {
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,55,public static void shutdown() {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,308,if (SERVICELOG.isDebugEnabled() && e.getClass() != BrokerStoppedException.class) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,309,SERVICELOG.debug("Error occured while processing sync command: " + e, e);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,203,removeList.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,229,dispatched.add(0, node);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,399,LOG
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,400,.debug("Acknowledgment out of sync (Normally occurs when failover connection reconnects): "
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,401,+ ack);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,445,if (ack.getMessageCount() != checkCount && ack.isStandardAck()) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/TextFileCertificateLoginModule.java,89,try {
activemq-jaas/src/main/java/org/apache/activemq/jaas/TextFileCertificateLoginModule.java,90,java.io.FileInputStream in = new java.io.FileInputStream(usersFile);
activemq-jaas/src/main/java/org/apache/activemq/jaas/TextFileCertificateLoginModule.java,92,in.close();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,66,InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(resource);
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,67,if (in != null) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,68,ByteArrayOutputStream out = new ByteArrayOutputStream();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,69,byte[] buf = new byte[4096];
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,70,int len = in.read(buf);
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,71,while (len >= 0) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,72,out.write(buf, 0, len);
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,73,len = in.read(buf);
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,75,in.close();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,76,out.close();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,77,data = out.toByteArray();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,78,jsCache.put(resource, data);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,142,while (endpointWorkers.size() > 0) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,143,ActiveMQEndpointActivationKey key = endpointWorkers.keySet().iterator().next();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,144,endpointDeactivation(key.getMessageEndpointFactory(), key.getActivationSpec());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,203,ActiveMQEndpointWorker worker = endpointWorkers.remove(key);
activemq-console/src/main/java/org/apache/activemq/console/Main.java,106,app.runTaskClass(tokens);
activemq-console/src/main/java/org/apache/activemq/console/Main.java,107,System.exit(0);
activemq-console/src/main/java/org/apache/activemq/console/Main.java,210,public void runTaskClass(List<String> tokens) throws Throwable {
activemq-console/src/main/java/org/apache/activemq/console/command/ShellCommand.java,83,return -1;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionRequestInfo.java,65,public void configure(ActiveMQConnectionFactory factory) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,45,protected ActiveMQConnectionFactory createConnectionFactory(ActiveMQConnectionRequestInfo connectionRequestInfo) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,46,ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,47,connectionRequestInfo.configure(factory);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,60,public ActiveMQConnection makeConnection(ActiveMQConnectionRequestInfo connectionRequestInfo) throws JMSException{
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,61,return makeConnection(connectionRequestInfo, createConnectionFactory(connectionRequestInfo));
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,116,cf = createConnectionFactory(getInfo());
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,19,import java.util.ArrayList;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,20,import java.util.Enumeration;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,21,import java.util.HashSet;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,22,import java.util.List;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,23,import java.util.Properties;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,24,import java.util.Set;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,25,import java.util.StringTokenizer;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,98,private final Set queryViews = new HashSet(10);
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,109,List addMBeans = JmxMBeansUtil.queryMBeans(createJmxConnection(), queryAddObjects, queryViews);
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,113,List subMBeans = JmxMBeansUtil.queryMBeans(createJmxConnection(), querySubObjects, queryViews);
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,114,addMBeans.removeAll(subMBeans);
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,117,context.printMBean(JmxMBeansUtil.filterMBeansView(addMBeans, queryViews));
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,19,import java.util.ArrayList;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,20,import java.util.Collection;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,21,import java.util.HashMap;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,22,import java.util.Iterator;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,23,import java.util.List;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,24,import java.util.Map;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,25,import java.util.Set;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,105,newData = data.getClass().newInstance();
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,108,newData = new HashMap<Object, Object>();
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,19,import java.util.Iterator;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,20,import java.util.List;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,21,import java.util.Set;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,23,import javax.management.ObjectName;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,25,import javax.management.remote.JMXServiceURL;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,27,import org.apache.activemq.console.filter.GroupPropertiesViewFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,28,import org.apache.activemq.console.filter.MBeansAttributeQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,29,import org.apache.activemq.console.filter.MBeansObjectNameQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,30,import org.apache.activemq.console.filter.MBeansRegExQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,31,import org.apache.activemq.console.filter.MapTransformFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,32,import org.apache.activemq.console.filter.MessagesQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,33,import org.apache.activemq.console.filter.PropertiesViewFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,34,import org.apache.activemq.console.filter.QueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,35,import org.apache.activemq.console.filter.StubQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,36,import org.apache.activemq.console.filter.WildcardToMsgSelectorTransformFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,37,import org.apache.activemq.console.filter.WildcardToRegExTransformFilter;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,237,throw new ResourceException("Could cleanup the ActiveMQ connection: " + e, e);
activemq-camel/src/main/java/org/apache/activemq/camel/component/ActiveMQConfiguration.java,25,import org.springframework.jms.connection.SingleConnectionFactory;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,33,import org.apache.activemq.ActiveMQQueueSession;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,35,import org.apache.activemq.ActiveMQTopicSession;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,73,return new ServerSessionImpl(this, (ActiveMQSession)session, activeMQAsfEndpointWorker.workManager, endpoint, true, batchSize);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,77,return new ServerSessionImpl(this, (ActiveMQSession)session, activeMQAsfEndpointWorker.workManager, endpoint, false, batchSize);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,223,List l = session.getUnconsumedMessages();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,120,String clientId = activationSpec.getClientId();
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,19,import java.util.Enumeration;
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,20,import java.util.HashMap;
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,21,import java.util.Map;
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,40,public MessageQuery(BrokerFacade brokerFacade, SessionPool sessionPool) throws JMSException {
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,41,super(brokerFacade, sessionPool);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,24,import org.springframework.beans.factory.DisposableBean;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,31,private SessionPool sessionPool;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,33,private Session session;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,37,public QueueBrowseQuery(BrokerFacade brokerFacade, SessionPool sessionPool) throws JMSException {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,39,this.sessionPool = sessionPool;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,40,this.session = sessionPool.borrowSession();
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,48,sessionPool.returnSession(session);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,49,session = null;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,65,queue = session.createQueue(getValidDestination());
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,82,public Session getSession() {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,83,return session;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,20,import java.io.IOException;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,21,import java.io.PrintWriter;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,22,import java.util.HashMap;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,26,import javax.jms.Destination;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,27,import javax.jms.JMSException;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,28,import javax.jms.Message;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,29,import javax.jms.MessageConsumer;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,30,import javax.jms.ObjectMessage;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,31,import javax.jms.TextMessage;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,32,import javax.servlet.ServletConfig;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,34,import javax.servlet.ServletException;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,35,import javax.servlet.http.HttpServletRequest;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,36,import javax.servlet.http.HttpServletResponse;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,59,private int serverSessionId = getNextLogId();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,108,return stale || !session.isRunning();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,162,log.debug("Running");
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,165,log.debug("run loop start");
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,168,if ( session.isRunning() ) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,199,log.debug("Run finished");
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,192,activeSessions.remove(ss);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,209,Thread startThread = new Thread("ActiveMQ Transport Initiator: " + transport.getRemoteAddress()) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,221,startThread.start();
activemq-core/src/main/java/org/apache/activemq/thread/DefaultThreadPools.java,29,private static final Executor DEFAULT_POOL;
activemq-core/src/main/java/org/apache/activemq/thread/DefaultThreadPools.java,30,static {
activemq-core/src/main/java/org/apache/activemq/thread/DefaultThreadPools.java,31,DEFAULT_POOL = new ScheduledThreadPoolExecutor(5, new ThreadFactory() {
activemq-core/src/main/java/org/apache/activemq/thread/DefaultThreadPools.java,32,public Thread newThread(Runnable runnable) {
activemq-core/src/main/java/org/apache/activemq/thread/DefaultThreadPools.java,33,Thread thread = new Thread(runnable, "ActiveMQ Default Thread Pool Thread");
activemq-core/src/main/java/org/apache/activemq/thread/DefaultThreadPools.java,34,thread.setDaemon(true);
activemq-core/src/main/java/org/apache/activemq/thread/DefaultThreadPools.java,35,return thread;
activemq-core/src/main/java/org/apache/activemq/thread/DefaultThreadPools.java,44,public static Executor getDefaultPool() {
activemq-core/src/main/java/org/apache/activemq/thread/DefaultThreadPools.java,45,return DEFAULT_POOL;
activemq-core/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,34,public class TaskRunnerFactory {
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOTransport.java,152,selection.disable();
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,23,import java.util.concurrent.Executors;
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,39,private Executor selectorExecutor = Executors.newCachedThreadPool(new ThreadFactory() {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,40,public Thread newThread(Runnable r) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,41,Thread rc = new Thread(r);
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,42,rc.setName("NIO Transport Thread");
activemq-core/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,43,return rc;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,150,result.add(i.next());
