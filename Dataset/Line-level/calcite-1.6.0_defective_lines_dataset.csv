File,Line_number,SRC
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3422,SqlNode selectItem = selectItems.get(i);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,65,final List<AbstractConverter> abstractConverters = new ArrayList<>();
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,354,planner.checkForSatisfiedConverters(set, rel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1309,void checkForSatisfiedConverters(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1310,RelSet set,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1311,RelNode rel) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1312,int i = 0;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1313,while (i < set.abstractConverters.size()) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1314,AbstractConverter converter = set.abstractConverters.get(i);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1316,changeTraitsUsingConverters(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1317,rel,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1318,converter.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1319,if (converted == null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1322,if (!isRegistered(converted)) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1817,set.abstractConverters.add((AbstractConverter) rel);
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,62,final RexExecutorImpl executor;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,67,RexExecutorImpl executor,
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,213,final RexExecutable exec =
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,62,private String compile(RexBuilder rexBuilder, List<RexNode> constExps,
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,105,public RexExecutable getExecutable(RexBuilder rexBuilder, List<RexNode> exps,
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,109,RelOptUtil.pushPastProject(topProject.getProjects(), bottomProject);
core/src/main/java/org/apache/calcite/rex/RexWindow.java,53,RexWindowBound upperBound,
core/src/main/java/org/apache/calcite/rex/RexWindow.java,55,assert partitionKeys != null;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,817,final ImmutableBitSet groupSet =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,819,final ImmutableList<ImmutableBitSet> groupSets;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,37,import org.apache.calcite.rex.RexLiteral;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1182,boolean allowAbstractConverters) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1232,RelTraitSet stepTraits =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1235,rel = getSubset(converted, stepTraits);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1303,RelNode changeTraitsUsingConverters(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1304,RelNode rel,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1305,RelTraitSet toTraits) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1306,return changeTraitsUsingConverters(rel, toTraits, false);
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,119,if (flatGroupSets.isEmpty()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2555,bb.setRoot(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2558,false);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,83,public Result visitChild(int i, RelNode e) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,105,protected final Map<String, SqlNode> ordinalMap = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,111,public abstract Result visitChild(int i, RelNode e);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,680,final SqlNode mappedSqlNode =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,682,if (mappedSqlNode != null) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,683,return mappedSqlNode;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,836,return node;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,858,this.rel = rel;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,859,this.clauses = clauses;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,860,this.select = select;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,861,this.context = context;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,333,if (!inputRels.contains(previous)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2943,convertQueryRecursive(call.getSource(), false, targetRowType).project();
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,510,match.recomputeDigest();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleMatch.java,147,buf.append(", ");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleMatch.java,151,buf.append("]");
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,23,import org.apache.calcite.sql.SqlCallBinding;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,37,import org.apache.calcite.sql.type.SqlTypeUtil;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,39,import org.apache.calcite.sql.validate.SqlValidator;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,40,import org.apache.calcite.sql.validate.SqlValidatorScope;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,41,import org.apache.calcite.util.ImmutableNullableList;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,44,import java.util.List;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,130,private List<RelDataType> collectOperandTypes(
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,131,SqlValidator validator,
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,132,SqlValidatorScope scope,
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,133,SqlCall call) {
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,134,List<RelDataType> argTypes =
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,135,SqlTypeUtil.deriveAndCollectTypes(
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,136,validator, scope, call.getOperandList());
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,137,return ImmutableNullableList.of(
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,138,argTypes.get(VALUE_OPERAND),
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,139,argTypes.get(LOWER_OPERAND),
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,140,argTypes.get(UPPER_OPERAND));
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,145,SqlCallBinding callBinding = (SqlCallBinding) opBinding;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,149,collectOperandTypes(
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,150,callBinding.getValidator(),
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,151,callBinding.getScope(),
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,152,callBinding.getCall()));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,23,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,316,newFilterArg = filters.get(aggregate.getGroupSet());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,320,newFilterArg =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,321,filters.get(
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,324,.union(aggregate.getGroupSet()));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,334,remap(fullGroupSet, aggregate.getGroupSet()),
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,755,final Clause maxClause = maxClause();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,756,boolean needNew = false;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,759,Set<Clause> nonWrapSet = ImmutableSet.of(Clause.SELECT);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,760,for (Clause clause : clauses) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,763,needNew = true;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,795,public Clause maxClause() {
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,218,return inferTypeFromOperands(
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,219,opBinding.getTypeFactory(),
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,220,opBinding.collectOperandTypes());
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,259,private RelDataType inferTypeFromOperands(
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,260,RelDataTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,261,List<RelDataType> argTypes) {
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,267,thenTypes.add(argTypes.get(j));
core/src/main/java/org/apache/calcite/runtime/Hook.java,65,QUERY_PLAN;
core/src/main/java/org/apache/calcite/rel/core/Project.java,242,&& false) {
core/src/main/java/org/apache/calcite/rel/core/Project.java,243,pw.item("type", rowType);
core/src/main/java/org/apache/calcite/rex/RexProgram.java,279,int trivialCount = 0;
core/src/main/java/org/apache/calcite/rex/RexProgram.java,283,if (level != SqlExplainLevel.DIGEST_ATTRIBUTES) {
core/src/main/java/org/apache/calcite/rex/RexProgram.java,284,trivialCount = countTrivial(projects);
core/src/main/java/org/apache/calcite/rex/RexProgram.java,301,pw.item(prefix + outFields.get(i).getName(), projects.get(i));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,25,import org.apache.calcite.schema.Table;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,40,final Table table = relOptTable.unwrap(Table.class);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,41,if (!EnumerableTableScan.canHandle(table)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,42,return null;
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,234,&& table instanceof QueryableTable) {
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,245,throw new AssertionError();
core/src/main/java/org/apache/calcite/util/BitString.java,195,assert bytes != null;
core/src/main/java/org/apache/calcite/util/BitString.java,196,int bitCount = bytes.length * 8;
core/src/main/java/org/apache/calcite/util/BitString.java,199,for (int i = 7; i >= 0; --i) {
core/src/main/java/org/apache/calcite/util/BitString.java,200,sb.append(((b & 1) == 0) ? '0' : '1');
core/src/main/java/org/apache/calcite/util/BitString.java,201,b >>= 1;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,606,if (scale > 0) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,607,RelDataType decimalType =
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,612,value = encodeIntervalOrDecimal(value, decimalType, false);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,55,import java.util.Collections;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,130,final SqlNodeList selectList =
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,131,new SqlNodeList(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,132,Collections.singletonList(SqlIdentifier.star(SqlParserPos.ZERO)),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,133,SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,137,final SqlPrettyWriter writer = new SqlPrettyWriter(jdbcSchema.dialect);
core/src/main/java/org/apache/calcite/sql/SqlAsOperator.java,75,SqlWriter.FrameTypeEnum.SIMPLE);
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,198,final SqlWriter.Frame joinFrame =
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,199,writer.startList(SqlWriter.FrameTypeEnum.JOIN);
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,204,String natural = "";
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,205,if (join.isNatural()) {
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,206,natural = "NATURAL ";
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,213,writer.sep(natural + "CROSS JOIN");
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,216,writer.sep(natural + "FULL JOIN");
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,219,writer.sep(natural + "INNER JOIN");
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,222,writer.sep(natural + "LEFT JOIN");
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,225,writer.sep(natural + "RIGHT JOIN");
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,253,writer.endList(joinFrame);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,122,return toSqlString(null).getSql();
core/src/main/java/org/apache/calcite/sql/SqlNode.java,142,if (dialect == null) {
core/src/main/java/org/apache/calcite/sql/SqlNode.java,145,SqlPrettyWriter writer = new SqlPrettyWriter(dialect);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,146,writer.setAlwaysUseParentheses(forceParens);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,147,writer.setSelectListItemsOnSeparateLines(false);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,148,writer.setIndentation(0);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,149,unparse(writer, 0, 0);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,19,import org.apache.calcite.sql.fun.SqlStdOperatorTable;
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,108,final SqlWriter.Frame frame =
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,110,: writer.startList("", "");
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,111,commaList(writer);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,112,writer.endList(frame);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,119,for (SqlNode node : list) {
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,120,writer.sep(",");
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,121,node.unparse(writer, 2, 3);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,125,void andOrList(SqlWriter writer, SqlKind sepKind) {
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,126,SqlBinaryOperator sepOp =
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,127,sepKind == SqlKind.AND
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,128,? SqlStdOperatorTable.AND
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,129,: SqlStdOperatorTable.OR;
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,130,for (int i = 0; i < list.size(); i++) {
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,131,SqlNode node = list.get(i);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,132,writer.sep(sepKind.name(), false);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,140,int lprec = (i == 0) ? 0 : sepOp.getRightPrec();
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,141,int rprec = (i == (list.size() - 1)) ? 0 : sepOp.getLeftPrec();
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,142,node.unparse(writer, lprec, rprec);
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,326,unparseListClause(writer, clause, null);
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,333,if (clause instanceof SqlNodeList) {
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,334,if (sepKind != null) {
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,335,((SqlNodeList) clause).andOrList(writer, sepKind);
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,337,((SqlNodeList) clause).commaList(writer);
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,340,clause.unparse(writer, 0, 0);
core/src/main/java/org/apache/calcite/sql/SqlOrderBy.java,93,final SqlWriter.Frame listFrame =
core/src/main/java/org/apache/calcite/sql/SqlOrderBy.java,94,writer.startList(SqlWriter.FrameTypeEnum.ORDER_BY_LIST);
core/src/main/java/org/apache/calcite/sql/SqlOrderBy.java,95,unparseListClause(writer, orderBy.orderList);
core/src/main/java/org/apache/calcite/sql/SqlOrderBy.java,96,writer.endList(listFrame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,145,SqlNode selectClause = select.selectList;
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,146,if (selectClause == null) {
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,147,selectClause = SqlIdentifier.star(SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,149,final SqlWriter.Frame selectListFrame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,150,writer.startList(SqlWriter.FrameTypeEnum.SELECT_LIST);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,151,unparseListClause(writer, selectClause);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,152,writer.endList(selectListFrame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,177,SqlKind whereSepKind = SqlKind.AND;
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,180,whereSepKind = SqlKind.OR;
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,185,while (node.getKind() == whereSepKind) {
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,192,final SqlWriter.Frame whereFrame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,193,writer.startList(SqlWriter.FrameTypeEnum.WHERE_LIST);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,194,unparseListClause(
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,195,writer,
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,196,new SqlNodeList(
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,197,list,
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,198,select.where.getParserPosition()),
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,199,whereSepKind);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,200,writer.endList(whereFrame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,207,final SqlWriter.Frame groupFrame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,208,writer.startList(SqlWriter.FrameTypeEnum.GROUP_BY_LIST);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,209,if (select.groupBy.getList().isEmpty()) {
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,210,final SqlWriter.Frame frame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,211,writer.startList(SqlWriter.FrameTypeEnum.SIMPLE, "(", ")");
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,212,writer.endList(frame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,214,unparseListClause(writer, select.groupBy);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,216,writer.endList(groupFrame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,224,final SqlWriter.Frame windowFrame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,225,writer.startList(SqlWriter.FrameTypeEnum.WINDOW_DECL_LIST);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,226,for (SqlNode windowDecl : select.windowDecls) {
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,227,writer.sep(",");
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,228,windowDecl.unparse(writer, 0, 0);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,230,writer.endList(windowFrame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,234,final SqlWriter.Frame orderFrame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,235,writer.startList(SqlWriter.FrameTypeEnum.ORDER_BY_LIST);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,236,unparseListClause(writer, select.orderBy);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,237,writer.endList(orderFrame);
core/src/main/java/org/apache/calcite/sql/SqlWriter.java,179,SUB_QUERY,
core/src/main/java/org/apache/calcite/sql/SqlWriter.java,214,IDENTIFIER(false);
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,126,private static final SqlWriter.FrameType FRAME_TYPE =
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,127,SqlWriter.FrameTypeEnum.create("CASE");
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,296,writer.startList(FRAME_TYPE, "CASE", "END");
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,31,import java.io.StringWriter;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,137,private final StringWriter sw = new StringWriter();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,138,protected final PrintWriter pw;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,143,protected boolean alwaysUseParentheses;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,144,private boolean keywordsLowerCase;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,146,private boolean quoteAllIdentifiers;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,147,private int indentation;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,148,private boolean clauseStartsLine;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,149,private boolean selectListItemsOnSeparateLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,150,private boolean selectListExtraIndentFlag;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,152,private boolean windowDeclListNewline;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,153,private boolean updateSetListNewline;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,154,private boolean windowNewline;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,156,private boolean whereListItemsOnSeparateLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,158,private boolean caseClausesOnNewLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,159,private int lineLength;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,160,private int charCount;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,168,if (pw == null) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,169,pw = new PrintWriter(sw);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,171,this.pw = pw;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,172,this.dialect = dialect;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,173,this.alwaysUseParentheses = alwaysUseParentheses;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,174,resetSettings();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,175,reset();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,181,this(dialect, alwaysUseParentheses, null);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,185,this(dialect, true);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,195,this.caseClausesOnNewLines = caseClausesOnNewLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,207,this.windowNewline = windowNewline;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,211,this.windowDeclListNewline = windowDeclListNewline;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,215,return indentation;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,219,return alwaysUseParentheses;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,230,return quoteAllIdentifiers;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,234,return clauseStartsLine;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,238,return selectListItemsOnSeparateLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,242,return whereListItemsOnSeparateLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,246,return selectListExtraIndentFlag;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,250,return keywordsLowerCase;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,254,return lineLength;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,259,indentation = 4;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,260,clauseStartsLine = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,261,selectListItemsOnSeparateLines = false;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,262,selectListExtraIndentFlag = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,263,keywordsLowerCase = false;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,264,quoteAllIdentifiers = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,265,windowDeclListNewline = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,266,updateSetListNewline = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,267,windowNewline = false;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,269,alwaysUseParentheses = false;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,270,whereListItemsOnSeparateLines = false;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,271,lineLength = 0;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,272,charCount = 0;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,276,pw.flush();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,298,this.indentation = indentation;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,346,this.clauseStartsLine = clauseStartsLine;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,354,this.selectListItemsOnSeparateLines = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,381,public void setSelectListExtraIndentFlag(boolean b) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,382,this.selectListExtraIndentFlag = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,389,public void setKeywordsLowerCase(boolean b) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,390,this.keywordsLowerCase = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,399,public void setWhereListItemsOnSeparateLines(boolean b) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,400,this.whereListItemsOnSeparateLines = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,403,public void setAlwaysUseParentheses(boolean b) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,404,this.alwaysUseParentheses = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,408,pw.println();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,409,charCount = 0;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,410,indent(currentIndent);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,418,Spaces.append(pw, indent);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,419,charCount += indent;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,429,public void setQuoteAllIdentifiers(boolean b) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,430,this.quoteAllIdentifiers = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,450,int indentation = getIndentation();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,451,if (frameType instanceof FrameTypeEnum) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,452,FrameTypeEnum frameTypeEnum = (FrameTypeEnum) frameType;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,454,switch (frameTypeEnum) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,455,case WINDOW_DECL_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,456,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,457,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,458,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,459,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,460,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,461,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,462,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,463,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,464,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,465,windowDeclListNewline,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,466,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,467,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,469,case UPDATE_SET_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,470,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,471,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,472,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,473,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,474,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,475,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,476,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,477,updateSetListNewline,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,478,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,479,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,480,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,481,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,483,case SELECT_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,484,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,485,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,486,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,487,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,488,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,489,selectListExtraIndentFlag ? indentation : 0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,490,selectListItemsOnSeparateLines,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,491,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,492,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,493,selectListItemsOnSeparateLines,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,494,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,495,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,497,case ORDER_BY_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,498,case GROUP_BY_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,499,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,500,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,501,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,502,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,503,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,504,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,505,selectListItemsOnSeparateLines,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,506,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,507,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,508,selectListItemsOnSeparateLines,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,509,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,510,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,512,case SUB_QUERY:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,514,case BLACK:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,520,open = Spaces.padRight("(", indentation);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,521,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,522,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,523,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,524,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,525,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,526,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,527,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,528,true,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,529,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,530,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,531,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,532,false) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,533,protected void _before() {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,534,newlineAndIndent();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,537,case HYDE:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,543,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,544,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,545,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,546,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,547,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,548,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,549,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,550,true,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,551,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,552,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,553,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,554,false) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,555,protected void _before() {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,556,nextWhitespace = NL;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,559,default:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,563,case ORDER_BY:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,564,case OFFSET:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,565,case FETCH:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,566,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,567,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,568,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,569,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,570,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,571,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,572,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,573,true,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,574,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,575,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,576,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,577,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,579,case SELECT:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,580,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,581,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,582,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,583,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,584,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,585,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,586,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,587,isClauseStartsLine(), // newline before FROM, WHERE etc.
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,588,0, // all clauses appear below SELECT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,589,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,590,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,591,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,593,case SETOP:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,594,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,595,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,596,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,597,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,598,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,599,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,600,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,601,isClauseStartsLine(), // newline before UNION, EXCEPT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,602,0, // all clauses appear below SELECT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,603,isClauseStartsLine(), // newline after UNION, EXCEPT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,604,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,605,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,607,case WINDOW:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,608,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,609,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,610,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,611,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,612,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,613,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,614,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,615,windowNewline,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,616,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,617,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,618,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,619,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,621,case FUN_CALL:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,622,setNeedWhitespace(false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,623,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,624,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,625,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,626,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,627,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,628,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,629,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,630,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,631,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,632,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,633,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,634,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,636,case IDENTIFIER:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,637,case SIMPLE:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,638,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,639,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,640,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,641,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,642,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,643,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,644,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,645,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,646,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,647,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,648,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,649,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,651,case WHERE_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,652,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,653,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,654,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,655,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,656,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,657,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,658,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,659,whereListItemsOnSeparateLines,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,660,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,661,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,662,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,663,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,665,case FROM_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,666,case JOIN:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,667,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,668,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,669,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,670,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,671,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,672,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,673,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,674,isClauseStartsLine(), // newline before UNION, EXCEPT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,675,0, // all clauses appear below SELECT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,676,isClauseStartsLine(), // newline after UNION, EXCEPT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,677,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,678,false) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,679,protected void sep(boolean printFirst, String sep) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,680,boolean newlineBefore =
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,681,newlineBeforeSep
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,682,&& !sep.equals(",");
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,683,boolean newlineAfter =
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,684,newlineAfterSep && sep.equals(",");
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,685,if ((itemCount > 0) || printFirst) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,686,if (newlineBefore && (itemCount > 0)) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,687,pw.println();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,688,charCount = 0;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,689,indent(currentIndent + sepIndent);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,690,setNeedWhitespace(false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,692,keyword(sep);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,693,nextWhitespace = newlineAfter ? NL : " ";
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,695,++itemCount;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,698,default:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,706,if (frameType.getName().equals("CASE")) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,707,if (caseClausesOnNewLines) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,708,newlineAfterOpen = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,710,newlineBeforeClose = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,711,sepIndent = 0;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,714,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,715,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,716,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,717,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,718,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,719,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,720,newlineAfterOpen,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,721,newlineBeforeSep,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,722,sepIndent,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,723,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,724,newlineBeforeClose,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,725,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,744,++frame.itemCount;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,751,if (frameType.needsIndent()) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,752,currentIndent += frame.extraIndent;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,790,if (endedFrame.frameType.needsIndent()) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,791,currentIndent -= this.frame.extraIndent;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,804,pw.flush();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,805,return sw.toString();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,823,pw.print(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,825,charCount += s.length();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,857,pw.print(nextWhitespace);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,858,charCount += nextWhitespace.length();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,869,&& ((charCount + s.length()) >= lineLength);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,885,pw.print(s);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,886,charCount += s.length();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,891,pw.print(x);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,892,charCount += String.valueOf(x).length();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,902,pw.print(qName);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,903,charCount += qName.length();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,997,this.lineLength = lineLength;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1055,private final boolean newlineBeforeClose;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1056,private final boolean newlineAfterClose;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1057,private final boolean newlineAfterOpen;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1059,FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1060,FrameType frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1061,String keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1062,String open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1063,String close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1064,int extraIndent,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1065,boolean newlineAfterOpen,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1066,boolean newlineBeforeSep,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1067,int sepIndent,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1068,boolean newlineAfterSep,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1069,boolean newlineBeforeClose,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1070,boolean newlineAfterClose) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1095,|| (newlineAfterOpen && (itemCount == 0))) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1096,newlineAndIndent();
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,65,writer.setAlwaysUseParentheses(false);
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,66,writer.setSelectListItemsOnSeparateLines(false);
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,67,writer.setIndentation(0);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3671,int iAdjusted = i;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3672,if (query instanceof SqlUpdate) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3673,int nUpdateColumns =
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3674,((SqlUpdate) query).getTargetColumnList().size();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3675,assert sourceFields.size() >= nUpdateColumns;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3676,iAdjusted -= sourceFields.size() - nUpdateColumns;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3678,SqlNode node = getNthExpr(query, iAdjusted, sourceCount);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3719,if (update.getTargetColumnList() != null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3720,return update.getTargetColumnList().get(ordinal);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3771,checkTypeAssignment(sourceRowType, targetRowType, call);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,156,List<RexNode> projExprs = rel.getProjects();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,176,RelDataTypeFactory typeFactory =
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,177,rel.getCluster().getTypeFactory();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,36,import java.util.HashMap;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,81,final Map<Integer, Integer> mapInToOutPos = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,82,final List<RexNode> projExprs = rel.getProjects();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,83,final Set<ImmutableBitSet> projUniqueKeySet = new HashSet<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,89,mapInToOutPos.put(((RexInputRef) projExpr).getIndex(), i);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,93,if (mapInToOutPos.isEmpty()) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,96,return projUniqueKeySet;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,102,if (childUniqueKeySet != null) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,105,for (ImmutableBitSet colMask : childUniqueKeySet) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,106,ImmutableBitSet.Builder tmpMask = ImmutableBitSet.builder();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,107,boolean completeKeyProjected = true;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,108,for (int bit : colMask) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,109,if (mapInToOutPos.containsKey(bit)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,110,tmpMask.set(mapInToOutPos.get(bit));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,114,completeKeyProjected = false;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,115,break;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,118,if (completeKeyProjected) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,119,projUniqueKeySet.add(tmpMask.build());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,124,return projUniqueKeySet;
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,65,operand(projectClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,728,switch (operand.getKind()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,729,case CASE:
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,320,if (rank.get(target) < rank.get(ordinal1)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,412,SqlNode expanded = expand(selectItem, scope);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,677,final List<RexNode> castExps =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,678,RexUtil.generateCastExpressions(rexBuilder, castRowType, rowType);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,216,|| Number.class.isAssignableFrom(elementType))) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,217,protected final List<RelNode> leaves = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1613,leaves.add(resultRel);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3853,leaves.add(root);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,174,this.validator =
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,177,this.validator.setIdentifierExpansion(true);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,54,return (Integer) expression0.evaluate(evaluator) + (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,55,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,58,+ (Double) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,65,return (Integer) expression0.evaluate(evaluator) / (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,66,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,79,return (Integer) expression0.evaluate(evaluator) > (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,80,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,83,> (Double) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,91,>= (Integer) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,94,>= (Double) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,101,return (Integer) expression0.evaluate(evaluator) < (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,102,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,105,< (Double) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,113,<= (Integer) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,116,<= (Double) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,123,return (Integer) expression0.evaluate(evaluator) * (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,124,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,140,return (Integer) expression0.evaluate(evaluator) - (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,141,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,144,- (Double) expression1.evaluate(evaluator);
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,459,new SqlSingleOperandTypeChecker() {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,460,public boolean checkSingleOperandType(
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,461,SqlCallBinding callBinding,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,462,SqlNode node,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,463,int iFormalOperand,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,464,boolean throwOnFailure) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,465,assert 0 == iFormalOperand;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,466,RelDataType type =
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,467,callBinding.getValidator().deriveType(
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,468,callBinding.getScope(),
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,469,node);
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,470,boolean validationError = false;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,471,if (!type.isStruct()) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,472,validationError = true;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,474,validationError = true;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,476,SqlTypeName typeName =
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,477,type.getFieldList().get(0).getType().getSqlTypeName();
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,478,if (typeName != SqlTypeName.MULTISET
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,479,&& typeName != SqlTypeName.ARRAY) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,480,validationError = true;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,484,if (validationError && throwOnFailure) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,485,throw callBinding.newValidationSignatureError();
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,487,return !validationError;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,490,public boolean checkOperandTypes(
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,491,SqlCallBinding callBinding,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,492,boolean throwOnFailure) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,493,return checkSingleOperandType(
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,494,callBinding,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,495,callBinding.operand(0),
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,496,0,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,497,throwOnFailure);
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,500,public SqlOperandCountRange getOperandCountRange() {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,501,return SqlOperandCountRanges.of(1);
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,504,public String getAllowedSignatures(SqlOperator op, String opName) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,505,return "UNNEST(<MULTISET>)";
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,508,public boolean isOptional(int i) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,509,return false;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,512,public Consistency getConsistency() {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,513,return Consistency.NONE;
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,231,for (SqlNode node : thenList) {
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,232,argTypes.add(
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,233,callBinding.getValidator().deriveType(
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,234,callBinding.getScope(), node));
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,58,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,123,join.getTraitSet(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,176,static Expression fromInternal(Expression e, Class<?> targetType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,177,if (e == ConstantUntypedNull.INSTANCE) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,178,return e;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,180,if (!(e.getType() instanceof Class)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,181,return e;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,183,if (targetType.isAssignableFrom((Class) e.getType())) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,184,return e;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,187,return Expressions.call(BuiltInMethod.INTERNAL_TO_DATE.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,189,if (targetType == java.sql.Time.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,190,return Expressions.call(BuiltInMethod.INTERNAL_TO_TIME.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,192,if (targetType == java.sql.Timestamp.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,193,return Expressions.call(BuiltInMethod.INTERNAL_TO_TIMESTAMP.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,198,return Expressions.convert_(e,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,201,return e;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,223,static Type toInternal(RelDataType type) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,239,static Expression enforce(final Type storageType,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,240,final Expression e) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,241,if (storageType != null && e.type != storageType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,242,if (e.type == java.sql.Date.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,243,if (storageType == int.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,244,return Expressions.call(BuiltInMethod.DATE_TO_INT.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,246,if (storageType == Integer.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,247,return Expressions.call(BuiltInMethod.DATE_TO_INT_OPTIONAL.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,250,if (storageType == int.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,251,return Expressions.call(BuiltInMethod.TIME_TO_INT.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,253,if (storageType == Integer.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,254,return Expressions.call(BuiltInMethod.TIME_TO_INT_OPTIONAL.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,257,if (storageType == long.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,258,return Expressions.call(BuiltInMethod.TIMESTAMP_TO_LONG.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,260,if (storageType == Long.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,261,return Expressions.call(BuiltInMethod.TIMESTAMP_TO_LONG_OPTIONAL.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,265,return e;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,143,RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,264,RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,867,RexToLixTranslator.convert(res, agg.result.getType()));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,892,offs = RexToLixTranslator.convert(offs, int.class);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,908,return RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1091,return RexToLixTranslator.convert(result.accumulator().get(1),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,27,import org.apache.calcite.linq4j.tree.ExpressionType;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,31,import org.apache.calcite.linq4j.tree.UnaryExpression;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,220,expression = EnumUtils.enforce(storageType, expression);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,352,convert = convert(operand, typeFactory.getJavaClass(targetType));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,545,convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,732,public static Expression convert(Expression operand, Type toType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,733,final Type fromType = operand.getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,735,return operand;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,739,final Primitive toPrimitive = Primitive.of(toType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,740,final Primitive toBox = Primitive.ofBox(toType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,741,final Primitive fromBox = Primitive.ofBox(fromType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,742,final Primitive fromPrimitive = Primitive.of(fromType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,743,final boolean fromNumber = fromType instanceof Class
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,744,&& Number.class.isAssignableFrom((Class) fromType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,745,if (fromType == String.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,746,if (toPrimitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,747,switch (toPrimitive) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,748,case CHAR:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,749,case SHORT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,750,case INT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,751,case LONG:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,752,case FLOAT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,753,case DOUBLE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,755,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,756,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,758,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,759,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,761,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,762,toPrimitive.boxClass,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,764,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,767,if (toBox != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,768,switch (toBox) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,769,case CHAR:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,771,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,772,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,774,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,775,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,777,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,778,toBox.boxClass,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,780,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,784,if (toPrimitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,785,if (fromPrimitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,787,return Expressions.convert_(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,788,operand, toPrimitive.primitiveClass);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,790,if (fromNumber || fromBox == Primitive.CHAR) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,792,return Expressions.unbox(operand, toPrimitive);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,796,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,797,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,799,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,804,return Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,805,Expressions.equal(operand, RexImpTable.NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,806,RexImpTable.NULL_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,807,Expressions.box(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,808,Expressions.unbox(operand, toBox),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,809,toBox));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,814,if (operand instanceof UnaryExpression) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,815,UnaryExpression una = (UnaryExpression) operand;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,816,if (una.nodeType == ExpressionType.Convert
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,817,|| Primitive.of(una.getType()) == toBox) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,818,return Expressions.box(una.expression, toBox);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,836,if (fromBox != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,839,return Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,840,Expressions.equal(operand, RexImpTable.NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,841,RexImpTable.NULL_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,842,Expressions.new_(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,843,BigDecimal.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,844,Expressions.unbox(operand, fromBox)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,846,if (fromPrimitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,854,return Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,855,Expressions.equal(operand, RexImpTable.NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,856,RexImpTable.NULL_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,857,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,858,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,860,operand));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,862,if (fromPrimitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,863,switch (fromPrimitive) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,864,case DOUBLE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,865,case FLOAT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,868,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,869,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,871,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,872,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,875,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,876,fromPrimitive.boxClass,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,878,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,883,return Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,884,Expressions.equal(operand, RexImpTable.NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,885,RexImpTable.NULL_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,886,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,887,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,889,operand));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,901,return Expressions.convert_(operand, toType);
core/src/main/java/org/apache/calcite/adapter/enumerable/StrictAggImplementor.java,170,return RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/StrictAggImplementor.java,181,Expression nonNull = RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,153,RexToLixTranslator.convert(recFromCtx, Object[].class);
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,161,return RexToLixTranslator.convert(recordAccess, storageType);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,19,import org.apache.calcite.adapter.enumerable.RexToLixTranslator;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,181,RexToLixTranslator.convert(Expressions.constant(o), clazz);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,175,&& token.s.equalsIgnoreCase("ALL")) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,488,if (token.s.equals(hintToken)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,617,if (token.s.equals(hintToken)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,694,if (token.s.equals(hintToken)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,774,if (token.s.equals(hintToken)) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,683,public static int mod(int b0, BigDecimal b1) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,684,return mod(b0, b1.intValue());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3954,if (rowType == null) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3957,return null;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3964,throw new AssertionError();
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,29,import org.apache.calcite.util.ImmutableIntList;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,102,return;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,105,final ImmutableIntList projects;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,106,final ImmutableList<RexNode> filters;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,110,filters = bindableScan.filters;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,111,projects = bindableScan.projects;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,113,filters = ImmutableList.of();
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,114,projects = scan.identity();
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,117,final List<Integer> projects2 =
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,118,Mappings.apply((Mapping) mapping, projects);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,119,call.transformTo(
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,120,Bindables.BindableTableScan.create(scan.getCluster(), scan.getTable(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,121,filters, projects2));
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1052,return subset;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1054,return register(rel, equivRel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1077,if (relCost.isLt(subset.bestCost)) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,881,rel.recomputeDigest();
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,250,subset.bestCost = otherSubset.bestCost;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,251,subset.best = otherSubset.best;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,279,final Set<RelSubset> activeSet = new HashSet<>();
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,200,if (rel.set == set && traitSet.satisfies(rel.getTraitSet())) {
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,24,import org.apache.calcite.plan.RelOptPlanner;
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,919,RelOptPlanner planner, Prepare.Materialization materialization) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,993,RelOptPlanner planner,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,999,this.planner = planner;
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1001,this.rexBuilder = new RexBuilder(typeFactory);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1078,final RelOptCluster cluster = prepare.createCluster(planner, rexBuilder);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1216,prepare.populateMaterializations(context, planner, materialization);
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,51,super("ITEM", SqlKind.OTHER_FUNCTION, 100, true, null, null, null);
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoFilter.java,218,case OTHER_FUNCTION:
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,35,final Properties properties1 = new Properties(properties);
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,36,properties1.setProperty(property.camelName(), value);
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,37,return new CalciteConnectionConfigImpl(properties1);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,619,SqlNode node = field(collation.getFieldIndex());
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,775,Context newContext;
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,223,Types.castIfNecessary(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,224,fieldClass(field),
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,225,fieldReference(v1, field)));
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,297,arg0 = Types.castIfNecessary(Comparable.class, arg0);
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,298,arg1 = Types.castIfNecessary(Comparable.class, arg1);
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,398,arg0 = Types.castIfNecessary(Comparable.class, arg0);
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,399,arg1 = Types.castIfNecessary(Comparable.class, arg1);
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,557,Types.castIfNecessary(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,558,returnType,
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,559,fieldReference(v1, field0));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,33,import org.apache.calcite.linq4j.tree.Types;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1013,Types.castIfNecessary(acc.type, add.arguments().get(0)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1513,Types.castIfNecessary(type,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1514,Expressions.constant(timeUnit.multiplier)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,734,if (fromType.equals(toType)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,821,return Expressions.box(operand, toBox);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,893,return Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,894,Expressions.equal(operand, RexImpTable.NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,895,RexImpTable.NULL_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,896,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,897,operand,
core/src/main/java/org/apache/calcite/adapter/enumerable/StrictAggImplementor.java,25,import org.apache.calcite.linq4j.tree.Types;
core/src/main/java/org/apache/calcite/adapter/enumerable/StrictAggImplementor.java,58,Expressions.assign(acc, Types.castIfNecessary(acc.type, next))));
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,29,import org.apache.calcite.linq4j.tree.Types;
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,126,return Types.castIfNecessary(
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,127,target.getClass(),
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,132,BuiltInMethod.REFLECTIVE_SCHEMA_GET_TARGET.method));
core/src/main/java/org/apache/calcite/schema/Schemas.java,33,import org.apache.calcite.linq4j.tree.Types;
core/src/main/java/org/apache/calcite/schema/Schemas.java,200,return Types.castIfNecessary(clazz, expression);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Types.java,453,if (Types.isAssignableFrom(returnType, type)) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,248,Context rightContext, int leftFieldCount) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,262,rightContext, leftFieldCount);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,278,node = stripCastFromString(node);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,314,private static RexNode stripCastFromString(RexNode node) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,328,final RexNode o0b = ((RexCall) o0).getOperands().get(0);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,329,switch (o0b.getType().getSqlTypeName()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,330,case CHAR:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,331,case VARCHAR:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,332,return call.clone(call.getType(), ImmutableList.of(o0b, o1));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,337,final RexNode o1b = ((RexCall) o1).getOperands().get(0);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,338,switch (o1b.getType().getSqlTypeName()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,339,case CHAR:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,340,case VARCHAR:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,341,return call.clone(call.getType(), ImmutableList.of(o0, o1b));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,516,final RexCall call = (RexCall) stripCastFromString(rex);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,531,return createLeftCall(op, nodeList);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,145,writer.append("new java.math.BigDecimal(").append(exact).append("L");
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,319,subset.propagateCostImprovements0(planner, mq, rel, activeSet);
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,325,RelNode rel, Set<RelSubset> activeSet) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,351,parentSubset.propagateCostImprovements(planner, mq, parent,
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,352,activeSet);
core/src/main/java/org/apache/calcite/rel/metadata/CyclicMetadataException.java,28,public static final CyclicMetadataException INSTANCE =
core/src/main/java/org/apache/calcite/rel/metadata/CyclicMetadataException.java,29,new CyclicMetadataException();
core/src/main/java/org/apache/calcite/rel/metadata/CyclicMetadataException.java,32,private CyclicMetadataException() {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,297,if (!predicate.apply(join, joinType, exp)) {
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,85,if (join.getJoinType().generatesNullsOnRight()) {
core/src/main/java/org/apache/calcite/rel/core/Calc.java,171,return copy(traitSet, getInput(),
core/src/main/java/org/apache/calcite/rel/core/Calc.java,172,new RexProgram(program.getInputRowType(),
core/src/main/java/org/apache/calcite/rel/core/Calc.java,173,exprs,
core/src/main/java/org/apache/calcite/rel/core/Calc.java,175,(RexLocalRef) condition,
core/src/main/java/org/apache/calcite/rel/core/Calc.java,176,program.getOutputRowType()));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistribution.java,132,throw new AssertionError(); // TODO:
core/src/main/java/org/apache/calcite/rel/core/Correlate.java,107,new CorrelationId((Integer) input.get("correlationId")),
core/src/main/java/org/apache/calcite/rel/core/Correlate.java,158,.item("requiredColumns", requiredColumns.toString());
core/src/main/java/org/apache/calcite/rel/logical/LogicalCorrelate.java,91,new CorrelationId((Integer) input.get("correlationId")),
core/src/main/java/org/apache/calcite/rex/RexProgram.java,242,return collectExplainTerms("", pw, pw.getDetailLevel());
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,152,List<RexNode> newOperands = apply(call.getOperands());
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,153,if (true) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,156,throw new AssertionError();
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,52,RelTrait out, String description) {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,69,description == null
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,71,: description);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,234,return table.unwrap(ScannableTable.class).scan(dataContext);
core/src/main/java/org/apache/calcite/rel/core/Project.java,281,mapping.set(((RexInputRef) exp.e).getIndex(), exp.i);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,99,final Mappings.TargetMapping mapping = project.getMapping();
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,100,if (mapping == null
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,101,|| Mappings.isIdentity(mapping)) {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1151,exprList.add(rexBuilder.makeZeroLiteral(field.getType()));
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1156,exprList.set(target,
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1157,rexBuilder.ensureType(expr.e.getType(),
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1158,RexInputRef.of(expr.i, input.rowType),
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1159,false));
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1161,throw MatchFailed.INSTANCE;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,902,if (needsNullIndicator(type)) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,906,RelDataType indicatorType =
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,907,typeFactory.createSqlType(SqlTypeName.BOOLEAN);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,908,if (type.isNullable()) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,909,indicatorType =
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,910,typeFactory.createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,911,indicatorType,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,912,true);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,914,RelDataTypeField nullIndicatorField =
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,915,new RelDataTypeFieldImpl(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,917,0,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,918,indicatorType);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,919,list.add(nullIndicatorField);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,920,nested = true;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,180,restructured = false;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,181,List<RexNode> structuringExps = null;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,184,structuringExps = restructureFields(root.getRowType());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,186,if (restructured) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,195,return flattened;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,203,if (field.getType().getSqlTypeName() == SqlTypeName.STRUCTURED) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,205,structuringExps.add(restructure(field.getType()));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,207,structuringExps.add(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,208,new RexInputRef(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,209,iRestructureInput,
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,210,field.getType()));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,211,++iRestructureInput;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,217,private RexNode restructure(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,218,RelDataType structuredType) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,220,RexInputRef nullIndicator =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,221,RexInputRef.of(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,222,iRestructureInput++, flattenedRootType.getFieldList());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,225,List<RexNode> inputExprs = restructureFields(structuredType);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,226,RexNode newInvocation =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,227,rexBuilder.makeNewInvocation(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,228,structuredType,
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,229,inputExprs);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,231,if (!structuredType.isNullable()) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,233,return newInvocation;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,238,RexNode[] caseOperands = new RexNode[3];
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,241,caseOperands[0] =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,242,rexBuilder.makeCall(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,243,SqlStdOperatorTable.IS_NULL,
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,244,nullIndicator);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,253,caseOperands[2] = newInvocation;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,255,return rexBuilder.makeCall(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,256,SqlStdOperatorTable.CASE,
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,257,caseOperands);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,277,int newOrdinal = 0;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,281,RelNode oldInput = null;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,282,for (RelNode oldInput1 : currentRel.getInputs()) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,283,RelDataType oldInputType = oldInput1.getRowType();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,284,int n = oldInputType.getFieldCount();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,285,if (oldOrdinal < n) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,286,oldInput = oldInput1;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,287,break;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,290,newOrdinal += newInput.getRowType().getFieldCount();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,291,oldOrdinal -= n;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,293,assert oldInput != null;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,295,RelDataType oldInputType = oldInput.getRowType();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,318,private int calculateFlattenedOffset(RelDataType rowType, int ordinal) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,319,int offset = 0;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,320,if (SqlTypeUtil.needsNullIndicator(rowType)) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,322,++offset;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,324,List<RelDataTypeField> oldFields = rowType.getFieldList();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,325,for (int i = 0; i < ordinal; ++i) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,326,RelDataType oldFieldType = oldFields.get(i).getType();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,327,if (oldFieldType.isStruct()) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,330,RelDataType flattened =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,331,SqlTypeUtil.flattenRecordType(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,332,rexBuilder.getTypeFactory(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,333,oldFieldType,
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,334,null);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,335,final List<RelDataTypeField> fields = flattened.getFieldList();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,336,offset += fields.size();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,338,++offset;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,341,return offset;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,392,RelNode newRel =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,393,rel.copy(rel.getTraitSet(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,394,getNewForOldRel(rel.getInput()),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,395,rel.getCondition().accept(new RewriteRexShuttle()));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,466,flattenProjections(new RewriteRexShuttle(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,467,rel.getProjects(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,468,rel.getRowType().getFieldNames(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,470,flattenedExpList);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,548,String fieldName =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,551,: fieldNames.get(i);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,552,if (!prefix.equals("")) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,553,fieldName = prefix + "$" + fieldName;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,565,RexInputRef inputRef = (RexInputRef) exp;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,569,RelDataType flattenedType =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,570,SqlTypeUtil.flattenRecordType(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,571,rexBuilder.getTypeFactory(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,572,exp.getType(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,573,null);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,574,List<RelDataTypeField> fieldList = flattenedType.getFieldList();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,575,int n = fieldList.size();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,576,for (int j = 0; j < n; ++j) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,578,flattenedExps.add(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,581,fieldName));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,587,if (exp.isA(SqlKind.NEW_SPECIFICATION)) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,590,flattenedExps.add(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,592,fieldName));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,594,if (RexLiteral.isNullLiteral(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,595,((RexCall) exp).operands.get(0))) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,598,flattenNullLiteral(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,599,exp.getType(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,600,flattenedExps);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,601,return;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,604,flattenProjections(new RewriteRexShuttle(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,613,int j = 0;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,615,flattenedExps.add(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,617,fieldName + "$" + (j++)));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,655,flattenInputs(rel.getRowType().getFieldList(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,656,rexBuilder.makeRangeReference(newRel),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,657,flattenedExpList);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,680,flattenInputs(field.getType().getFieldList(), ref, flattenedExpList);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,765,calculateFlattenedOffset(
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,774,final UnifyRuleCall call = new UnifyRuleCall(rule, query, target, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,92,private final RexToLixTranslator.InputGetter inputGetter;
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,83,boolean allColumnsInAggregate = aggregate.getGroupSet().
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,84,contains(filterColumns);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,593,throw Extensions.todo();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1284,final List<RelFieldCollation> fieldCollations = new ArrayList<>();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1288,for (RexNode node : nodes) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1290,collation(node, RelFieldCollation.Direction.ASCENDING, null,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1302,final boolean addedFields = extraNodes.size() > originalExtraNodes.size();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1304,assert !addedFields;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1335,if (addedFields) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1336,project(extraNodes);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1342,if (addedFields) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1343,project(originalExtraNodes);
core/src/main/java/org/apache/calcite/util/Pair.java,197,return new AbstractList<Pair<K, V>>() {
core/src/main/java/org/apache/calcite/util/Pair.java,198,public Pair<K, V> get(int index) {
core/src/main/java/org/apache/calcite/util/Pair.java,199,return Pair.of(ks.get(index), vs.get(index));
core/src/main/java/org/apache/calcite/util/Pair.java,202,public int size() {
core/src/main/java/org/apache/calcite/util/Pair.java,203,return size;
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,124,BINDABLE_WINDOW_RULE);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,20,import java.util.ArrayList;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,21,import java.util.Arrays;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,28,static final Indent INDENT = new Indent(20);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,31,private int level;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,32,private String indent = "";
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,78,indent = INDENT.get(++level);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,85,indent = INDENT.get(--level);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,95,buf.append(indent);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,147,buf.append(indent);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,199,private static class Indent extends ArrayList<String> {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,201,super(initialCapacity);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,202,ensureSize(initialCapacity);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,205,public synchronized String of(int index) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,206,ensureSize(index + 1);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,207,return get(index);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,210,private void ensureSize(int targetSize) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,211,if (targetSize < size()) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,212,return;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,214,char[] chars = new char[2 * targetSize];
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,215,Arrays.fill(chars, ' ');
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,217,clear();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,218,for (int i = 0; i < targetSize; i++) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,31,import org.apache.calcite.sql.fun.SqlCastFunction;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,412,RexNode first = removeCast(operands.get(0));
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,413,RexNode second = removeCast(operands.get(1));
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,430,private static RexNode removeCast(RexNode inputRef) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,431,if (inputRef instanceof RexCall) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,432,final RexCall castedRef = (RexCall) inputRef;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,433,final SqlOperator operator = castedRef.getOperator();
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,434,if (operator instanceof SqlCastFunction) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,435,inputRef = castedRef.getOperands().get(0);
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,438,return inputRef;
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,31,import org.apache.calcite.sql.SqlOperator;
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,32,import org.apache.calcite.sql.fun.SqlCastFunction;
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,113,inputRef = removeCast(inputRef);
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,114,literal = removeCast(literal);
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,192,private static RexNode removeCast(RexNode inputRef) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,193,if (inputRef instanceof RexCall) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,194,final RexCall castedRef = (RexCall) inputRef;
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,195,final SqlOperator operator = castedRef.getOperator();
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,196,if (operator instanceof SqlCastFunction) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,197,inputRef = castedRef.getOperands().get(0);
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,200,return inputRef;
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,62,super(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3142,case AND:
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3149,final int left2 = leftCount + extraLeftExprs.size();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3151,final RexNode e =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3152,pushDownEqualJoinConditions(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3153,operand,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3154,leftCount,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3155,rightCount,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3156,extraLeftExprs,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3158,final List<RexNode> remainingOperands = Util.skip(operands, i + 1);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3159,final int left3 = leftCount + extraLeftExprs.size();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3160,fix(remainingOperands, left2, left3);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3161,fix(list, left2, left3);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3162,list.add(e);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,362,final String op = (String) map.get("op");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,363,if (op != null) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,441,final List<SqlOperator> operatorList =
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,442,SqlStdOperatorTable.instance().getOperatorList();
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,443,for (SqlOperator operator : operatorList) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,444,if (operator.getName().equals(op)) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,467,private String toJson(SqlOperator operator) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,469,return operator.getName();
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,271,final String aggName = (String) jsonAggCall.get("agg");
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,197,node = SqlStdOperatorTable.AS.createCall(
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,198,POS, node, new SqlIdentifier(name, POS));
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,416,protected boolean requiresAliasForFromItems() {
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,76,String stringValue = ((NlsString) value).getValue();
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,80,assert value instanceof NlsString;
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,81,writer.literal(value.toString());
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,60,private final String identifierQuoteString;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,61,private final String identifierEndQuoteString;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,62,private final String identifierEscapedQuote;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,284,if (identifierQuoteString == null) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,285,buf.append(val); // quoting is not supported
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,286,return buf;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,288,String val2 =
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,289,val.replaceAll(
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,290,identifierEndQuoteString,
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,291,identifierEscapedQuote);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,292,buf.append(identifierQuoteString);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,293,buf.append(val2);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,294,buf.append(identifierEndQuoteString);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,329,public String quoteStringLiteral(String val) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,330,if (containsNonAscii(val)) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,331,final StringBuilder buf = new StringBuilder();
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,333,return buf.toString();
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,335,val = FakeUtil.replace(val, "'", "''");
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,336,return "'" + val + "'";
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,347,private static boolean containsNonAscii(String s) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,350,if (c < 32 || c >= 128) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,393,&& (val.charAt(val.length() - 1) == '\'')) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,394,if (val.length() > 2) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,395,val = FakeUtil.replace(val, "''", "'");
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,396,return val.substring(1, val.length() - 1);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,399,return "";
core/src/main/java/org/apache/calcite/sql/fun/SqlLiteralChainOperator.java,174,writer.literal(nls.asSql(true, false));
core/src/main/java/org/apache/calcite/sql/fun/SqlLiteralChainOperator.java,177,writer.literal(nls.asSql(false, false));
core/src/main/java/org/apache/calcite/util/NlsString.java,160,boolean suffix) {
core/src/main/java/org/apache/calcite/util/NlsString.java,162,if (prefix && (null != charsetName)) {
core/src/main/java/org/apache/calcite/util/NlsString.java,163,ret.append("_");
core/src/main/java/org/apache/calcite/util/NlsString.java,164,ret.append(charsetName);
core/src/main/java/org/apache/calcite/util/NlsString.java,166,ret.append("'");
core/src/main/java/org/apache/calcite/util/NlsString.java,168,ret.append("'");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,403,final Object literal = map.get("literal");
core/src/main/java/org/apache/calcite/adapter/enumerable/ReflectiveCallNotNullImplementor.java,52,return Expressions.call(method, translatedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/ReflectiveCallNotNullImplementor.java,58,return Expressions.call(target, method, translatedOperands);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,332,List<RelNode> inputRels = input.set.getRelsFromAllSubsets();
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,103,if (!description.matches("[A-Za-z][-A-Za-z0-9_.():]*")) {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,70,? "ConverterRule<in=" + in + ",out=" + out + ">"
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,83,materialization.queryRel =
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,84,sqlToRelConverter2.convertQuery(node, true, true).rel;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,476,assert queryDescendant.rowType.equals(targetDescendant.rowType);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,513,MutableRel parent = result.call.query.replaceInParent(result.result);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,521,: Pair.of(result.result, result.call.query);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,955,action.getConfig().getDefaultSchema() != null
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,966,action.getConfig().getContext(),
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,967,action.getConfig().getCostFactory());
core/src/main/java/org/apache/calcite/tools/Frameworks.java,78,public abstract static class PrepareAction<R> {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,81,this.config = newConfigBuilder() //
core/src/main/java/org/apache/calcite/tools/Frameworks.java,93,public abstract R apply(RelOptCluster cluster, RelOptSchema relOptSchema,
core/src/main/java/org/apache/calcite/tools/Frameworks.java,94,SchemaPlus rootSchema, CalciteServerStatement statement);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,104,public static <R> R withPlanner(final PlannerAction<R> action, //
core/src/main/java/org/apache/calcite/tools/Frameworks.java,106,return withPrepare(
core/src/main/java/org/apache/calcite/tools/Frameworks.java,107,new Frameworks.PrepareAction<R>(config) {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,108,public R apply(RelOptCluster cluster, RelOptSchema relOptSchema,
core/src/main/java/org/apache/calcite/tools/Frameworks.java,109,SchemaPlus rootSchema, CalciteServerStatement statement) {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,110,final CalciteSchema schema =
core/src/main/java/org/apache/calcite/tools/Frameworks.java,111,CalciteSchema.from(
core/src/main/java/org/apache/calcite/tools/Frameworks.java,112,Util.first(config.getDefaultSchema(), rootSchema));
core/src/main/java/org/apache/calcite/tools/Frameworks.java,113,return action.apply(cluster, relOptSchema, schema.root().plus());
core/src/main/java/org/apache/calcite/tools/Frameworks.java,137,public static <R> R withPrepare(PrepareAction<R> action) {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,140,if (action.config.getTypeSystem() != RelDataTypeSystem.DEFAULT) {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,142,action.config.getTypeSystem().getClass().getName());
core/src/main/java/org/apache/calcite/tools/Frameworks.java,149,return new CalcitePrepareImpl().perform(statement, action);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,48,import org.apache.calcite.schema.SchemaPlus;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,49,import org.apache.calcite.server.CalciteServerStatement;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,164,final RelOptCluster[] clusters = {null};
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,165,final RelOptSchema[] relOptSchemas = {null};
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,166,Frameworks.withPrepare(
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,167,new Frameworks.PrepareAction<Void>(config) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,168,public Void apply(RelOptCluster cluster, RelOptSchema relOptSchema,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,169,SchemaPlus rootSchema, CalciteServerStatement statement) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,170,clusters[0] = cluster;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,171,relOptSchemas[0] = relOptSchema;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,172,return null;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,175,return new RelBuilder(config.getContext(), clusters[0], relOptSchemas[0]);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,557,return filterFactory.createFilter(child, condition);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,217,RelNode createFilter(RelNode input, RexNode condition);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,225,public RelNode createFilter(RelNode input, RexNode condition) {
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,226,return LogicalFilter.create(input, condition);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,485,relBuilder.push(
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,486,filter.copy(filter.getTraitSet(), newInput, newConditionExpr));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,685,return filter(ImmutableList.copyOf(predicates));
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1003,return call.result(call.query);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3150,final int right2 = rightCount + extraRightExprs.size();
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,25,import org.apache.calcite.rel.core.JoinRelType;
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,87,JoinRelType.INNER,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,194,if (RelOptUtil.classifyFilters(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3078,+ rightCount + extraRightExprs.size(),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3079,0, 0, leftCount,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3080,leftCount, leftCount + extraLeftExprs.size(), rightCount);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1173,return values(frame.rel.getRowType());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,39,public static final RelOptRule ENUMERABLE_SEMI_JOIN_RULE =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,40,new EnumerableSemiJoinRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,17,package org.apache.calcite.adapter.enumerable;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,22,import org.apache.calcite.plan.RelOptCluster;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,25,import org.apache.calcite.plan.RelTraitSet;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,26,import org.apache.calcite.rel.InvalidRelException;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,27,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,29,import org.apache.calcite.rel.core.JoinRelType;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,31,import org.apache.calcite.rel.metadata.RelMetadataQuery;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,32,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,34,import org.apache.calcite.util.ImmutableIntList;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,43,EnumerableSemiJoin(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,44,RelOptCluster cluster,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,45,RelTraitSet traits,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,46,RelNode left,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,47,RelNode right,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,48,RexNode condition,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,49,ImmutableIntList leftKeys,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,51,throws InvalidRelException {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,57,ImmutableIntList leftKeys, ImmutableIntList rightKeys) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,58,final RelOptCluster cluster = left.getCluster();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,59,try {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,82,throw new AssertionError(e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,17,package org.apache.calcite.adapter.enumerable;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,19,import org.apache.calcite.plan.Convention;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,20,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,21,import org.apache.calcite.rel.convert.ConverterRule;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,24,import java.util.ArrayList;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,25,import java.util.List;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,30,class EnumerableSemiJoinRule extends ConverterRule {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,31,EnumerableSemiJoinRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,38,final List<RelNode> newInputs = new ArrayList<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,39,for (RelNode input : semiJoin.getInputs()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,40,if (!(input.getConvention() instanceof EnumerableConvention)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,41,input =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,42,convert(input,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,43,input.getTraitSet().replace(EnumerableConvention.INSTANCE));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,45,newInputs.add(input);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,335,final JoinInfo joinInfo = JoinInfo.of(left, right, condition);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,336,return SemiJoin.create(left, right,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,337,condition, joinInfo.leftKeys, joinInfo.rightKeys);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,17,package org.apache.calcite.rel.core;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,19,import org.apache.calcite.plan.Convention;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,20,import org.apache.calcite.plan.RelOptCluster;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,21,import org.apache.calcite.plan.RelOptCost;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,22,import org.apache.calcite.plan.RelOptPlanner;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,23,import org.apache.calcite.plan.RelTraitSet;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,24,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,25,import org.apache.calcite.rel.metadata.RelMdUtil;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,26,import org.apache.calcite.rel.metadata.RelMetadataQuery;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,27,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,29,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,30,import org.apache.calcite.util.ImmutableIntList;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,31,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,33,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,34,import com.google.common.collect.ImmutableSet;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,43,public class SemiJoin extends EquiJoin {
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,59,public SemiJoin(
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,60,RelOptCluster cluster,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,61,RelTraitSet traitSet,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,62,RelNode left,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,63,RelNode right,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,64,RexNode condition,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,65,ImmutableIntList leftKeys,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,66,ImmutableIntList rightKeys) {
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,67,super(
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,68,cluster,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,69,traitSet,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,70,left,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,71,right,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,72,condition,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,73,leftKeys,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,74,rightKeys,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,76,JoinRelType.INNER);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,80,public static SemiJoin create(RelNode left, RelNode right, RexNode condition,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,81,ImmutableIntList leftKeys, ImmutableIntList rightKeys) {
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,82,final RelOptCluster cluster = left.getCluster();
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,83,return new SemiJoin(cluster, cluster.traitSetOf(Convention.NONE), left,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,84,right, condition, leftKeys, rightKeys);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,90,RelNode left, RelNode right, JoinRelType joinType, boolean semiJoinDone) {
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,91,assert joinType == JoinRelType.INNER;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,92,final JoinInfo joinInfo = JoinInfo.of(left, right, condition);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,93,assert joinInfo.isEqui();
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,94,return new SemiJoin(getCluster(), traitSet, left, right, condition,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,95,joinInfo.leftKeys, joinInfo.rightKeys);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,99,RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,101,return planner.getCostFactory().makeTinyCost();
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,105,return Util.first(
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,106,RelMdUtil.getSemiJoinRowCount(mq, left, right, joinType, condition),
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,107,1D);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,118,left.getRowType(),
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,119,null,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,120,JoinRelType.INNER,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,121,getCluster().getTypeFactory(),
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,122,null,
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,19,import org.apache.calcite.linq4j.CorrelateJoinType;
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,82,public CorrelateJoinType toLinq4j() {
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,85,return CorrelateJoinType.INNER;
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,87,return CorrelateJoinType.LEFT;
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,89,return CorrelateJoinType.SEMI;
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,91,return CorrelateJoinType.ANTI;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,195,return program.getCollations(mq.collations(input));
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,91,.push(call.rel(3).getInput(0));
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,54,private static final LoadingCache<Object, RelDataType> CACHE =
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,338,return CACHE.getUnchecked(type);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1383,permute(query, project.getInput(), mapping.inverse());
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1384,final MutableRel result = unifyAggregates(aggregate2, target);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1385,return result == null ? null : call.result(result);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,876,RelNode aggregate = aggregateFactory.createAggregate(r,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,574,combinedMap.put(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,591,entry.getValue());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,100,info.leftKeys,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,101,info.rightKeys,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,19,import org.apache.calcite.linq4j.tree.BlockBuilder;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,20,import org.apache.calcite.linq4j.tree.Expression;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,21,import org.apache.calcite.linq4j.tree.Expressions;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,23,import org.apache.calcite.plan.RelOptCost;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,24,import org.apache.calcite.plan.RelOptPlanner;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,28,import org.apache.calcite.rel.core.JoinInfo;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,30,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,33,import org.apache.calcite.util.BuiltInMethod;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,35,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,39,public class EnumerableSemiJoin extends SemiJoin implements EnumerableRel {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,52,super(cluster, traits, left, right, condition, leftKeys, rightKeys);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,56,public static EnumerableSemiJoin create(RelNode left, RelNode right, RexNode condition,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,66,throw new AssertionError(e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,71,RelNode left, RelNode right, JoinRelType joinType,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,72,boolean semiJoinDone) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,73,assert joinType == JoinRelType.INNER;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,74,final JoinInfo joinInfo = JoinInfo.of(left, right, condition);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,75,assert joinInfo.isEqui();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,76,try {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,77,return new EnumerableSemiJoin(getCluster(), traitSet, left, right,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,78,condition, joinInfo.leftKeys, joinInfo.rightKeys);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,87,RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,88,double rowCount = mq.getRowCount(this);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,91,final double rightRowCount = right.estimateRowCount(mq);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,92,final double leftRowCount = left.estimateRowCount(mq);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,93,if (Double.isInfinite(leftRowCount)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,94,rowCount = leftRowCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,96,rowCount += Util.nLogN(leftRowCount);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,98,if (Double.isInfinite(rightRowCount)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,99,rowCount = rightRowCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,101,rowCount += rightRowCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,103,return planner.getCostFactory().makeCost(rowCount, 0, 0).multiplyBy(.01d);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,106,public Result implement(EnumerableRelImplementor implementor, Prefer pref) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,107,BlockBuilder builder = new BlockBuilder();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,108,final Result leftResult =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,109,implementor.visitChild(this, 0, (EnumerableRel) left, pref);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,110,Expression leftExpression =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,111,builder.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,113,final Result rightResult =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,114,implementor.visitChild(this, 1, (EnumerableRel) right, pref);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,115,Expression rightExpression =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,116,builder.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,118,final PhysType physType = leftResult.physType;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,119,return implementor.result(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,120,physType,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,121,builder.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,122,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,123,BuiltInMethod.SEMI_JOIN.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,124,Expressions.list(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,125,leftExpression,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,126,rightExpression,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,127,leftResult.physType.generateAccessor(leftKeys),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,129,.toBlock());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,47,return EnumerableSemiJoin.create(newInputs.get(0), newInputs.get(1),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,48,semiJoin.getCondition(), semiJoin.leftKeys, semiJoin.rightKeys);
core/src/main/java/org/apache/calcite/rel/core/Correlate.java,31,import org.apache.calcite.sql.SemiJoinType;
core/src/main/java/org/apache/calcite/rel/logical/LogicalCorrelate.java,28,import org.apache.calcite.sql.SemiJoinType;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,32,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,273,public Boolean areColumnsUnique(SemiJoin rel, RelMetadataQuery mq,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,274,ImmutableBitSet columns, boolean ignoreNulls) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,277,return mq.areColumnsUnique(rel.getLeft(), columns, ignoreNulls);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistinctRowCount.java,27,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistinctRowCount.java,147,public Double getDistinctRowCount(SemiJoin rel, RelMetadataQuery mq,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistinctRowCount.java,148,ImmutableBitSet groupKey, RexNode predicate) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPopulationSize.java,25,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPopulationSize.java,83,public Double getPopulationSize(SemiJoin rel, RelMetadataQuery mq,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPopulationSize.java,84,ImmutableBitSet groupKey) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPopulationSize.java,85,return mq.getPopulationSize(rel.getLeft(), groupKey);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,30,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,36,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,173,public Double getRowCount(SemiJoin rel, RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,176,RexNode semiJoinSelectivity =
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,177,RelMdUtil.makeSemiJoinSelectivityRexNode(mq, rel);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,179,return NumberUtil.multiply(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,180,mq.getSelectivity(rel.getLeft(), semiJoinSelectivity),
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,181,mq.getRowCount(rel.getLeft()));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdSize.java,29,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdSize.java,175,public List<Double> averageColumnSizes(SemiJoin rel, RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,26,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,198,public Set<ImmutableBitSet> getUniqueKeys(SemiJoin rel, RelMetadataQuery mq,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,199,boolean ignoreNulls) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,202,return mq.getUniqueKeys(rel.getLeft(), ignoreNulls);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,28,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,117,public static double computeSemiJoinSelectivity(RelMetadataQuery mq,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,118,SemiJoin rel) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,119,return computeSemiJoinSelectivity(mq, rel.getLeft(), rel.getRight(),
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,120,rel.getLeftKeys(), rel.getRightKeys());
core/src/main/java/org/apache/calcite/tools/Programs.java,115,EnumerableRules.ENUMERABLE_SEMI_JOIN_RULE,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,561,if (from.getKind() == SqlKind.VALUES) {
core/src/main/java/org/apache/calcite/sql/fun/SqlRollupOperator.java,40,private static void unparseCube(SqlWriter writer, SqlCall call) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,457,final Schema schema = new CalciteConnectionImpl.RootSchema();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,78,super();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,187,DatabaseMetaData metaData = connection.getMetaData();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,188,resultSet = metaData.getTables(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,189,catalog,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,190,schema,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,191,null,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,192,null);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,195,while (resultSet.next()) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,196,final String tableName = resultSet.getString(3);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,197,final String catalogName = resultSet.getString(1);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,198,final String schemaName = resultSet.getString(2);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,199,final String tableTypeName = resultSet.getString(4);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,210,tableTypeName == null
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,219,new JdbcTable(this, catalogName, schemaName, tableName, tableType);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,220,builder.put(tableName, table);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,519,return call(SqlStdOperatorTable.AS, expr, literal(alias));
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,777,String digest = rel.getDigest();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,778,HepRelVertex equivVertex = mapDigestToVertex.get(digest);
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,843,String oldDigest = vertex.getCurrentRel().toString();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,844,if (mapDigestToVertex.get(oldDigest) == vertex) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,845,mapDigestToVertex.remove(oldDigest);
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,920,Iterator<Map.Entry<String, HepRelVertex>> digestIter =
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,79,if (newCalc.getDigest().equals(bottomCalc.getDigest())) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,191,return DatabaseProduct.DERBY;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFilterableTable.java,70,if (filter.isA(SqlKind.EQUALS)) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,424,if (SqlUtil.isNullLiteral(left, false)) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,425,return cx.convertExpression(left);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,427,RexNode arg = cx.convertExpression(left);
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,40,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,93,final RelDataType operandType = callBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,94,final SqlSingleOperandTypeChecker checker = getChecker(operandType);
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,99,private SqlSingleOperandTypeChecker getChecker(RelDataType operandType) {
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,111,throw new AssertionError(operandType.getSqlTypeName());
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,514,return Arrays.equals(v1, v2);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,518,return Arrays.hashCode(t);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,91,for (RelNode input : setOp.getInputs()) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,102,SetOp newSetOp =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,103,setOp.copy(setOp.getTraitSet(), newSetOpInputs);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,105,call.transformTo(newSetOp);
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,444,(RexNode) rexBuilder.makeInputRef(
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,560,(RexNode) rexBuilder.makeInputRef(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,231,return builder.build();
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,59,final RelNode input = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,60,if (!aggregate.getAggCallList().isEmpty() || aggregate.indicator) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,61,return;
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,70,final RelNode newInput = convert(input, aggregate.getTraitSet().simplify());
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,172,return rexBuilder.makeExactLiteral(BigDecimal.ONE);
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,174,return rexBuilder.makeCall(SqlStdOperatorTable.CASE, predicate,
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,175,rexBuilder.makeExactLiteral(BigDecimal.ONE),
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,176,rexBuilder.makeExactLiteral(BigDecimal.ZERO));
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,308,if (operand.ordinalInParent < inputs.size()) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,312,successors = subset.set.subsets;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,327,if (ascending) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,34,import java.util.ArrayList;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,83,: "planner promised us at least one Empty child";
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,86,case 0:
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,88,break;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,89,case 1:
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,91,RelOptUtil.createCastRel(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,93,union.getRowType(),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,95,break;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,96,default:
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,98,break;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,105,return node instanceof Values
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,106,&& ((Values) node).getTuples().isEmpty();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,71,private final JdbcSchema jdbcSchema;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,72,private final String jdbcCatalogName;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,73,private final String jdbcSchemaName;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,74,private final String jdbcTableName;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,75,private final Schema.TableType jdbcTableType;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,78,String jdbcSchemaName, String tableName, Schema.TableType jdbcTableType) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,80,this.jdbcSchema = jdbcSchema;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,83,this.jdbcTableName = tableName;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,142,SqlIdentifier tableName() {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,143,final List<String> strings = new ArrayList<>();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,145,strings.add(jdbcSchema.catalog);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,148,strings.add(jdbcSchema.schema);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,150,strings.add(jdbcTableName);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,151,return new SqlIdentifier(strings, SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,135,RelNode createSort(RelTraitSet traits, RelNode input,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,136,RelCollation collation, RexNode offset, RexNode fetch);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,150,public RelNode createSort(RelTraitSet traits, RelNode input,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,151,RelCollation collation, RexNode offset, RexNode fetch) {
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,152,return createSort(input, collation, offset, fetch);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,254,RelNode createJoin(RelNode left, RelNode right, RexNode condition,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,256,boolean semiJoinDone);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,271,public RelNode createJoin(RelNode left, RelNode right, RexNode condition,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,272,JoinRelType joinType, Set<String> variablesStopped,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,273,boolean semiJoinDone) {
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,274,return createJoin(left, right, condition,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,275,CorrelationId.setOf(variablesStopped), joinType, semiJoinDone);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,178,final SqlIdentifier identifier =
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,179,new SqlIdentifier(e.getTable().getQualifiedName(), SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,47,import com.google.common.collect.ImmutableSet;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2153,assert nTotalFields == (joinRel instanceof SemiJoin
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2154,? nSysFields + nFieldsLeft
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2155,: nSysFields + nFieldsLeft + nFieldsRight);
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,89,!corr.getJoinType().toJoinType().generatesNullsOnLeft(),
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,90,!corr.getJoinType().toJoinType().generatesNullsOnRight(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2168,LogicalCorrelate corr = LogicalCorrelate.create(leftRel, p.r,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2169,p.id, p.requiredColumns, SemiJoinType.of(joinType));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,401,final AggregateCall aggCall =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,402,AggregateCall.create(SqlStdOperatorTable.MIN,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,403,false,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,404,ImmutableList.of(0),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,405,-1,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,406,0,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,407,ret,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,408,null,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,409,extraName);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,411,ret =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,413,ImmutableBitSet.of(), null, ImmutableList.of(aggCall));
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,111,(SqlAggFunction) call.getOperator(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,112,call.getType(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,113,clonedOperands,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,354,final RelDataType bigintType = getTypeFactory().createSqlType(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,355,SqlTypeName.BIGINT);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,377,final RelDataType bigintType = getTypeFactory().createSqlType(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,378,SqlTypeName.BIGINT);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,608,getTypeFactory().createSqlType(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,609,SqlTypeName.DECIMAL,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,611,scale);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,998,return getTypeFactory().createTypeWithNullability(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,999,type,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1000,valueNullability);
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,43,super("FILTER", SqlKind.FILTER, 2, true, ReturnTypes.ARG0_FORCE_NULLABLE,
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,147,if (call.getKind() == SqlKind.FILTER) {
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,148,call.operand(0).accept(this);
core/src/main/java/org/apache/calcite/rel/core/TableFunctionScan.java,75,RelTraitSet traits,
core/src/main/java/org/apache/calcite/rel/core/TableFunctionScan.java,81,super(cluster, traits);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,21,import org.apache.calcite.plan.RelTraitSet;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,43,final RelTraitSet traitSet =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,44,sort.getTraitSet().replace(EnumerableConvention.INSTANCE);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,55,RelNode x = convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,56,input,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,57,input.getTraitSet().replace(EnumerableConvention.INSTANCE));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,59,new EnumerableLimit(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,60,sort.getCluster(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,61,traitSet,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,62,x,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,233,SortUnionTransposeRule.INSTANCE);
core/src/main/java/org/apache/calcite/rel/RelFieldCollation.java,128,public NullDirection defaultNullDirection() {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,444,checkRollup:
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,445,if (groupSets.size() == groupSet.cardinality() + 1) {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,446,ImmutableBitSet g = groupSet;
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,447,for (ImmutableBitSet bitSet : groupSets) {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,448,if (!bitSet.equals(g)) {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,449,break checkRollup;
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,451,g = g.clear(g.length() - 1);
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,453,assert g.isEmpty();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,152,List<SqlNode> groupByList = Expressions.list();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,154,for (int group : e.getGroupSet()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,155,final SqlNode field = builder.context.field(group);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,156,addSelect(selectList, field, e.getRowType());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,157,groupByList.add(field);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,274,builder = x.builder(e, Clause.FETCH);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,279,builder = x.builder(e, Clause.OFFSET);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,500,public RelFieldCollation.NullDirection defaultNullDirection(
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,432,public RexNode call(SqlOperator operator, RexNode... operands) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,444,public RexNode call(SqlOperator operator,
core/src/main/java/org/apache/calcite/util/Bug.java,166,public static final boolean CALCITE_461_FIXED = false;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,90,static Class javaRowClass(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,91,JavaTypeFactory typeFactory, RelDataType type) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,92,if (type.isStruct() && type.getFieldCount() == 1) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,93,type = type.getFieldList().get(0).getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,95,final Type clazz = typeFactory.getJavaClass(type);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,96,return clazz instanceof Class ? (Class) clazz : Object[].class;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,408,inputPhysType.convertTo(childExp, physType),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCollect.java,60,Expressions.call(child_,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,193,final RelDataType dummyType = this.rowType;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,194,final Expression e3 =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,195,elementPhysType.convertTo(e2,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,196,PhysTypeImpl.of(typeFactory, dummyType, JavaRowFormat.LIST));
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,53,import static org.apache.calcite.adapter.enumerable.EnumUtils.javaRowClass;
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,75,fieldClasses.add(javaRowClass(typeFactory, field.getType()));
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,240,final JavaRowFormat targetFormat = targetPhysType.getFormat();
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,247,return Expressions.call(exp, BuiltInMethod.SELECT.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,248,generateSelector(o_, Util.range(fieldCount), targetFormat));
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,168,if (type.isStruct() && type.getFieldCount() == 1) {
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,169,return getJavaClass(type.getFieldList().get(0).getType());
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1406,return list;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,598,if (id.names.size() == 1) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPercentageOriginalRows.java,78,double rowCount = mq.getRowCount(input);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPercentageOriginalRows.java,79,double percentage = mq.getPercentageOriginalRows(input);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPercentageOriginalRows.java,98,double left = mq.getPercentageOriginalRows(rel.getLeft());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPercentageOriginalRows.java,99,double right = mq.getPercentageOriginalRows(rel.getRight());
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,201,final SqlTypeName sqlTypeName =
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,202,Util.enumVal(SqlTypeName.class, (String) map.get("type"));
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,203,final Integer precision = (Integer) map.get("precision");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,204,final Integer scale = (Integer) map.get("scale");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,205,final RelDataType type;
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,206,if (precision == null) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,207,type = typeFactory.createSqlType(sqlTypeName);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,209,type = typeFactory.createSqlType(sqlTypeName, precision);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,211,type = typeFactory.createSqlType(sqlTypeName, precision, scale);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,213,final boolean nullable = (Boolean) map.get("nullable");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,214,return typeFactory.createTypeWithNullability(type, nullable);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,227,Object toJson(Object value) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,285,final Map<String, Object> map =
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,286,(Map<String, Object>) toJson(node.getType());
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,306,final Object value2 = literal.getValue2();
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,307,if (value2 == null) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,311,map = jsonBuilder.map();
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,312,map.put("literal", null);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,313,map.put("type", literal.getTypeName().name());
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,314,return map;
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,316,return value2;
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,346,map.put("class", call.getOperator().getClass().getName());
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,365,final Object jsonType = map.get("type");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,366,final SqlOperator operator = toOp(op, map);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,368,RelDataType type;
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,369,if (jsonType != null) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,372,type = rexBuilder.deriveReturnType(operator, rexOperands);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,374,return rexBuilder.makeCall(type, operator, rexOperands);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,404,final SqlTypeName sqlTypeName =
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,405,Util.enumVal(SqlTypeName.class, (String) map.get("type"));
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,409,return toRex(relInput, literal);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,438,private SqlOperator toOp(String op, Map<String, Object> map) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,463,SqlAggFunction toAggregation(String agg, Map<String, Object> map) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,464,return (SqlAggFunction) toOp(agg, map);
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,77,Map<String, Object> o = mapper.readValue(s, TYPE_REF);
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,168,inputs.add(toAggCall(jsonAggCall));
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,270,private AggregateCall toAggCall(Map<String, Object> jsonAggCall) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,273,relJson.toAggregation(aggName, jsonAggCall);
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonWriter.java,40,private final JsonBuilder jsonBuilder;
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonWriter.java,41,private final RelJson relJson;
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonWriter.java,44,private final List<Object> relList;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,60,static final SqlPostfixOperator FOLLOWING_OPERATOR =
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,67,static final SqlPostfixOperator PRECEDING_OPERATOR =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,63,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,544,if (nodeList.size() == 2) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,545,return op.createCall(new SqlNodeList(nodeList, POS));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,547,final List<SqlNode> butLast = Util.skipLast(nodeList);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,548,final SqlNode last = nodeList.get(nodeList.size() - 1);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,549,final SqlNode call = createLeftCall(op, butLast);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,550,return op.createCall(new SqlNodeList(ImmutableList.of(call, last), POS));
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,227,Lists.transform(type.getFieldList(),
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,233,type.getFieldNames());
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,235,if (type instanceof JavaType) {
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,238,type.isNullable());
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,240,return type;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,295,if (type instanceof RelRecordType) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,296,return copyRecordType((RelRecordType) type, true, false);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,298,return createTypeWithNullability(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,299,type,
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,300,type.isNullable());
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,316,if (nullable) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,319,newType = copyRecordType((RelRecordType) type, false, true);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,323,newType = copyRecordType((RelRecordType) type, true, false);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,351,final List<RelDataType> types) {
core/src/main/java/org/apache/calcite/rel/type/RelRecordType.java,49,return false;
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,442,+ "] could not be implemented; planner state:\n");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,248,private String originalRootString;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,332,this.originalRootString =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,333,RelOptUtil.toString(root, SqlExplainLevel.ALL_ATTRIBUTES);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1347,pw.println(originalRootString);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1348,pw.println("Sets:");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1404,pw.println();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,229,getRule().onMatch(this);
core/src/main/java/org/apache/calcite/tools/Programs.java,265,return hep(
core/src/main/java/org/apache/calcite/tools/Programs.java,266,ImmutableList.of((RelOptRule) SubQueryRemoveRule.FILTER,
core/src/main/java/org/apache/calcite/tools/Programs.java,267,SubQueryRemoveRule.PROJECT,
core/src/main/java/org/apache/calcite/tools/Programs.java,268,SubQueryRemoveRule.JOIN), true, metadataProvider);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,66,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,183,private final Map<Pair<String, RelDataType>, RelNode> mapDigestToRel =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1408,private static Pair<String, RelDataType> key(RelNode rel) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1409,return Pair.of(rel.getDigest(), rel.getRowType());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1424,final Pair<String, RelDataType> oldKey =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1425,Pair.of(oldDigest, rel.getRowType());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1426,final RelNode removed = mapDigestToRel.remove(oldKey);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1432,final Pair<String, RelDataType> key = key(rel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1433,final RelNode equivRel = mapDigestToRel.put(key, rel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1442,mapDigestToRel.put(key, equivRel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1487,final Pair<String, RelDataType> key = key(rel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1488,RelNode equivRel = mapDigestToRel.get(key);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1697,Pair<String, RelDataType> key = key(rel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1740,key = key(rel);
core/src/main/java/org/apache/calcite/rel/core/Values.java,38,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/core/Values.java,177,.itemIf("tuples", tuples, pw.nest());
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,954,return makeLiteral(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,955,new NlsString(s, null, null),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,956,typeFactory.createSqlType(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,957,SqlTypeName.CHAR,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,958,s.length()),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,959,SqlTypeName.CHAR);
core/src/main/java/org/apache/calcite/rex/RexCall.java,80,for (int i = 0; i < operands.size(); i++) {
core/src/main/java/org/apache/calcite/rex/RexCall.java,81,if (i > 0) {
core/src/main/java/org/apache/calcite/rex/RexCall.java,82,sb.append(", ");
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,178,this.digest = toJavaString(value, typeName);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,254,SqlTypeName typeName) {
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,256,return "null";
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,260,printAsJava(value, pw, typeName, false);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,301,printAsJava(value, pw, typeName, true);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,326,boolean java) {
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,400,return list.get(index).digest;
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,201,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,202,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,203,Coercibility.COERCIBLE);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,205,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,206,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,207,Coercibility.IMPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,211,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,212,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,213,Coercibility.EXPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,220,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,221,col1.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,222,Coercibility.IMPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,225,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,226,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,227,Coercibility.IMPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,233,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,234,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,235,Coercibility.EXPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,246,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,247,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,248,Coercibility.EXPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,257,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,258,col1.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,259,Coercibility.EXPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,262,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,263,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,264,Coercibility.EXPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlPostfixOperator.java,84,new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlPostfixOperator.java,85,collation.getCollationName(),
core/src/main/java/org/apache/calcite/sql/SqlPostfixOperator.java,86,collation.getCoercibility()));
core/src/main/java/org/apache/calcite/sql/SqlPrefixOperator.java,85,new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlPrefixOperator.java,86,collation.getCollationName(),
core/src/main/java/org/apache/calcite/sql/SqlPrefixOperator.java,87,collation.getCoercibility()));
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,202,if (wrappedCharset != null) {
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,207,if (collation != null) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,111,public static Enumerable<Object> of(DataSource dataSource, String sql) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,117,public static Enumerable<Object> of(DataSource dataSource, String sql,
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,124,public static <T> Enumerable<T> of(
core/src/main/java/org/apache/calcite/config/CalciteConnectionProperty.java,78,TIME_ZONE("timeZone", Type.STRING, null, false),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,316,+ "\nexpression is " + newRel.toString();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,128,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,129,final Aggregate aggregate = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,130,final Join join = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,131,final RexBuilder rexBuilder = aggregate.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,132,final RelBuilder relBuilder = call.builder();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,139,return;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,141,if (aggregateCall.filterArg >= 0) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,142,return;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,148,if (join.getJoinType() != JoinRelType.INNER) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,149,return;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,152,if (!allowFunctions && !aggregate.getAggCallList().isEmpty()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,153,return;
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,63,filter.getCondition());
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,353,assert tempDigest != null : "post: return != null";
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,354,String prefix = "rel#" + id + ":";
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,358,this.desc = prefix + tempDigest;
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,359,this.digest = this.desc.substring(prefix.length());
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,411,pw.write(value.left + "=" + value.right);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1552,RelDataType inferredType,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1553,SqlValidatorScope scope,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1554,SqlNode node) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1637,if (operandTypeInference == null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1640,Arrays.fill(operandTypes, unknownType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,434,case INPUT_REF:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,439,if (nullAs == RexImpTable.NullAs.NOT_POSSIBLE
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,440,&& input.type.equals(storageType)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,443,return input;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,490,case FIELD_ACCESS:
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,864,long l = bd.unscaledValue().longValue();
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,867,assert BigDecimal.valueOf(l, scale).equals(bd);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,869,if ((l >= Integer.MIN_VALUE) && (l <= Integer.MAX_VALUE)) {
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,68,return def.canonizeComposite(compositeTrait);
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,106,RelCompositeTrait<T> canonize(RelTraitDef<T> traitDef) {
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,107,T[] newTraits = null;
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,108,for (int i = 0; i < traits.length; i++) {
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,109,final T trait = traits[i];
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,110,final T trait2 = traitDef.canonize(trait);
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,111,if (trait2 != trait) {
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,112,if (newTraits == null) {
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,113,newTraits = traits.clone();
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,115,newTraits[i] = trait2;
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,118,if (newTraits == null) {
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,119,return this;
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,121,assert false;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,22,import com.google.common.cache.CacheBuilder;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,23,import com.google.common.cache.CacheLoader;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,24,import com.google.common.cache.LoadingCache;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,26,import java.util.List;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,27,import javax.annotation.Nonnull;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,59,private final LoadingCache<T, T> canonicalMap =
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,76,private final LoadingCache<Object, RelCompositeTrait> canonicalCompositeMap =
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,79,.build(
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,80,new CacheLoader<Object, RelCompositeTrait>() {
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,82,if (key instanceof RelCompositeTrait) {
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,83,return (RelCompositeTrait) key;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,86,final List<RelMultipleTrait> list =
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,87,(List<RelMultipleTrait>) key;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,88,final RelTraitDef def = list.get(0).getTraitDef();
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,89,return (RelCompositeTrait) RelCompositeTrait.of(def, list);
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,134,if (trait instanceof RelCompositeTrait) {
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,135,RelCompositeTrait relCompositeTrait = (RelCompositeTrait) trait;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,136,return (T) canonizeComposite(relCompositeTrait);
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,140,+ " cannot canonize a "
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,141,+ trait.getClass().getName();
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,143,return canonicalMap.getUnchecked(trait);
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,146,final RelCompositeTrait canonizeComposite(RelCompositeTrait compositeTrait) {
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,147,return canonicalCompositeMap.getUnchecked(compositeTrait);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1405,final Map<String, Integer> map = new HashMap<>();
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1407,map.put(e.toString(), map.size());
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1411,final Integer integer = map.get(ref.getName());
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1419,final Integer integer = map.get(call.toString());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,61,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,310,RelOptPredicateList info = mq.getPulledUpPredicates(input);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,392,final Map<String, ImmutableBitSet> exprFields;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,394,final Set<String> equalityPredicates;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,421,if (lPreds == null) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,426,leftChildPredicates = lPreds.accept(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,430,exprFields.put(r.toString(), RelOptUtil.InputFinder.bits(r));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,434,if (rPreds == null) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,440,rightChildPredicates = rPreds.accept(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,444,exprFields.put(r.toString(), RelOptUtil.InputFinder.bits(r));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,464,new ArrayList<>(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,571,private void infer(RexNode predicates, Set<String> allExprsDigests,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,576,&& equalityPredicates.contains(r.toString())) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,605,private void equivalent(int p1, int p2) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,635,JoinConditionBasedPredicateInference.this.equivalent(lPos, rPos);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,636,JoinConditionBasedPredicateInference.this.equalityPredicates
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,637,.add(call.toString());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,51,import java.util.HashSet;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,436,final List<RexNode> unionList = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,437,final Set<String> strings = new HashSet<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,439,for (RexNode rex : RelOptUtil.conjunctions(pred1)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,440,if (strings.add(rex.toString())) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,441,unionList.add(rex);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,444,for (RexNode rex2 : RelOptUtil.conjunctions(pred2)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,445,if (strings.add(rex2.toString())) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,446,unionList.add(rex2);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,466,final List<RexNode> list1 = RelOptUtil.conjunctions(pred1);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,467,final List<RexNode> list2 = RelOptUtil.conjunctions(pred2);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,468,final List<RexNode> minusList = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,470,for (RexNode rex1 : list1) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,471,boolean add = true;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,472,for (RexNode rex2 : list2) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,473,if (rex2.toString().compareTo(rex1.toString()) == 0) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,474,add = false;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,475,break;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,478,if (add) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,479,minusList.add(rex1);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,64,if (join.getCondition().toString().equals(newCondition.toString())) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,617,addExpr(preserveLeft, call);
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,621,addExpr(preserveRight, call);
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,645,private void addExpr(List<RexNode> exprList, RexNode newExpr) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,646,String newExprString = newExpr.toString();
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,647,for (RexNode expr : exprList) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,648,if (newExprString.compareTo(expr.toString()) == 0) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,649,return;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,652,exprList.add(newExpr);
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,721,int match = findExprInList(rex, rexList1);
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,727,match = findExprInList(rex, rexList2);
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,736,private int findExprInList(RexNode rex, List<RexNode> rexList) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,737,int match = 0;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,738,for (RexNode rexElement : rexList) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,739,if (rexElement.toString().compareTo(rex.toString()) == 0) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,740,return match;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,742,match++;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,744,return -1;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,122,private final Map<Pair<String, String>, RexNode> irreducible;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,123,private final Map<Pair<String, String>, RexNode> results;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,173,Pair<String, String> key = RexUtil.makeKey(node);
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,185,Pair<String, String> key = RexUtil.makeKey(node);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,361,return RexUtil.eq(subQuery, this.subQuery) ? replacement : subQuery;
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,109,if (RexUtil.eq(node, seek)) {
core/src/main/java/org/apache/calcite/rex/RexCall.java,72,protected String computeDigest(boolean withType) {
core/src/main/java/org/apache/calcite/rex/RexCall.java,73,StringBuilder sb = new StringBuilder(op.getName());
core/src/main/java/org/apache/calcite/rex/RexCall.java,84,RexNode operand = operands.get(i);
core/src/main/java/org/apache/calcite/rex/RexCall.java,85,sb.append(operand.toString());
core/src/main/java/org/apache/calcite/rex/RexCall.java,99,public String toString() {
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,45,private final Map<Pair<String, String>, RexLocalRef> exprMap =
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,323,final Pair<String, String> key;
core/src/main/java/org/apache/calcite/rex/RexSubQuery.java,93,StringBuilder sb = new StringBuilder(op.getName());
core/src/main/java/org/apache/calcite/rex/RexSubQuery.java,96,sb.append(operand.toString());
core/src/main/java/org/apache/calcite/rex/RexUtil.java,664,public static Pair<String, String> makeKey(RexNode expr) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,665,return Pair.of(expr.toString(), expr.getType().getFullTypeString());
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1258,if (eq(next, e)) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1627,final Map<String, RexNode> mapDigestToExpr = new HashMap<>();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1636,final String key = expr.toString();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1637,final RexNode previous = mapDigestToExpr.put(key, expr);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1645,return mapDigestToExpr.get(expr.toString());
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1851,final Map<String, RexNode> factors = commonFactors(operands);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1881,private Map<String, RexNode> commonFactors(List<RexNode> nodes) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1887,map.put(conjunction.toString(), conjunction);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1897,private RexNode removeFactor(Map<String, RexNode> factors, RexNode node) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1900,if (!factors.containsKey(operand.toString())) {
core/src/main/java/org/apache/calcite/rex/RexVariable.java,35,assert type != null;
core/src/main/java/org/apache/calcite/rex/RexVariable.java,36,assert name != null;
core/src/main/java/org/apache/calcite/rex/RexVariable.java,37,this.name = name;
core/src/main/java/org/apache/calcite/rex/RexVariable.java,38,this.digest = name;
core/src/main/java/org/apache/calcite/rex/RexVariable.java,39,this.type = type;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,729,int x = findExpr(projectExprs.get(i), projectExprs, i);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,730,if (x >= 0) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,794,private int findExpr(RexNode seek, List<RexNode> exprs, int count) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,795,for (int i = 0; i < count; i++) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,796,RexNode expr = exprs.get(i);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,797,if (expr.toString().equals(seek.toString())) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,798,return i;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,801,return -1;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4613,if (expr.toString().equals(convertedInputExpr.toString())) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1773,SqlOperator nullOp;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1774,SqlOperator eqOp;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1776,nullOp = SqlStdOperatorTable.IS_NULL;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1777,eqOp = SqlStdOperatorTable.EQUALS;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1779,nullOp = SqlStdOperatorTable.IS_NOT_NULL;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1780,eqOp = SqlStdOperatorTable.NOT_EQUALS;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1782,RexNode[] whenThenElse = {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1784,rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, x),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1787,rexBuilder.makeCall(nullOp, y),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1790,rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, y),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1793,rexBuilder.makeCall(nullOp, x),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1798,return rexBuilder.makeCall(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1799,SqlStdOperatorTable.CASE,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1800,whenThenElse);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2476,(List) rel.getInputs());
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,796,if (node != call) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,91,String sql = generateSql(jdbcConvention.dialect);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,153,final Expression enumerable =
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,154,builder0.append(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,156,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,157,BuiltInMethod.RESULT_SET_ENUMERABLE_OF.method,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,158,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,159,Schemas.unwrap(jdbcConvention.expression,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,160,JdbcSchema.class),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,161,BuiltInMethod.JDBC_SCHEMA_DATA_SOURCE.method),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,162,sql_,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,163,rowBuilderFactory_));
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,294,private String generateSql(SqlDialect dialect) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,882,return null;
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,104,Function1<ResultSet, Function0<T>> rowBuilderFactory) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,137,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,138,statement.setQueryTimeout(10);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,149,throw new RuntimeException("while executing SQL [" + sql + "]", e);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,151,if (statement != null) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,152,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,153,statement.close();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,158,if (connection != null) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,159,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,160,connection.close();
core/src/main/java/org/apache/calcite/sql/SqlDynamicParam.java,64,writer.print("?");
core/src/main/java/org/apache/calcite/sql/SqlNode.java,150,final String sql = writer.toString();
core/src/main/java/org/apache/calcite/sql/SqlNode.java,151,return new SqlString(dialect, sql);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,23,import org.apache.calcite.sql.util.SqlBuilder;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,809,return new SqlBuilder(dialect, toString()).toSqlString();
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,31,private final String s;
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,39,public SqlString(SqlDialect dialect, String s) {
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,41,this.s = s;
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,42,assert s != null;
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,43,assert dialect != null;
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,47,return s.hashCode();
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,52,&& s.equals(((SqlString) obj).s);
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,64,return s;
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,73,return s;
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,100,return new RexCall(
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,101,call.getType(),
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,102,call.getOperator(),
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,103,clonedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,258,builder.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,272,final BlockBuilder builder2 = new BlockBuilder();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,320,builder2.add(acc_);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,321,final Expression accumulatorAdder =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,322,builder.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,324,Expressions.lambda(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,325,Function2.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,326,builder2.toBlock(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,327,acc_,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,328,inParameter));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,378,accumulatorInitializer,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,379,accumulatorAdder,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,398,Expressions.call(accumulatorInitializer, "apply"),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,399,accumulatorAdder,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,400,resultSelector))));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,429,accumulatorInitializer,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,430,accumulatorAdder,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,710,AggregateCall.create(
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,74,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1284,private static List<AggregateCall> apply(final Mapping mapping,
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1285,List<AggregateCall> aggCallList) {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1286,return Lists.transform(aggCallList,
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1341,aggregateCall.type, aggregateCall.name));
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,82,private AggregateCall(
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,83,SqlAggFunction aggFunction,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,84,boolean distinct,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,85,List<Integer> argList,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,86,int filterArg,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,87,RelDataType type,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,88,String name) {
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,224,&& filterArg == other.filterArg;
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,252,public AggregateCall copy(List<Integer> args, int filterArg) {
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,259,return copy(args, filterArg);
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,281,filterOperand == null ? -1 : filterOperand, type, null);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,904,orderByList.add(context.toSql(field));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,524,newFilterArg, aggCall.getType(), aggCall.getName());
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,77,for (int key : aggregate.getGroupSet()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,78,final RexNode rex = project.getProjects().get(key);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,79,if (rex instanceof RexInputRef) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,80,final int newKey = ((RexInputRef) rex).getIndex();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,81,newKeys.add(newKey);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,82,map.put(key, newKey);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,100,final ImmutableList.Builder<Integer> newArgs = ImmutableList.builder();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,101,for (int arg : aggregateCall.getArgList()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,102,final RexNode rex = project.getProjects().get(arg);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,103,if (rex instanceof RexInputRef) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,104,newArgs.add(((RexInputRef) rex).getIndex());
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,107,return null;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,110,final int newFilterArg;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,111,if (aggregateCall.filterArg >= 0) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,112,final RexNode rex = project.getProjects().get(aggregateCall.filterArg);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,113,if (!(rex instanceof RexInputRef)) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,114,return null;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,116,newFilterArg = ((RexInputRef) rex).getIndex();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,118,newFilterArg = -1;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,120,aggCalls.add(aggregateCall.copy(newArgs.build(), newFilterArg));
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,173,ImmutableList.of(groupCount + ord.i), -1, groupCount, input,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,174,aggType, origCall.getName());
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,299,aggCall = aggCall.copy(nullableArgs, aggCall.filterArg);
core/src/main/java/org/apache/calcite/sql/SqlAggFunction.java,51,operandTypeChecker, funcType, false, false);
core/src/main/java/org/apache/calcite/sql/SqlAggFunction.java,65,operandTypeChecker, funcType, false, false);
core/src/main/java/org/apache/calcite/sql/SqlAggFunction.java,108,validator.validateAggregateParams(call, null, scope);
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,71,SqlCall aggCall = call.operand(0);
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,77,validator.validateAggregateParams(aggCall, condition, scope);
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,94,SqlNode agg = call.operand(0);
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,96,if (!(agg instanceof SqlCall)) {
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,97,throw new IllegalStateException("Argument to SqlOverOperator"
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,98,+ " should be SqlCall, got " + agg.getClass() + ": " + agg);
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,101,final SqlCall aggCall = (SqlCall) agg;
core/src/main/java/org/apache/calcite/sql/SqlRankFunction.java,38,true);
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,119,ImmutableIntList.of(), -1,
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,148,ImmutableList.of(ordinal), -1, aggregateCall.type,
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,149,aggregateCall.name);
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,208,return aggregateCall.copy(ImmutableIntList.of(arg), -1);
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,261,ImmutableList.of(ordinal), -1, aggregateCall.type,
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,262,aggregateCall.name);
core/src/main/java/org/apache/calcite/sql/fun/SqlAvgAggFunction.java,49,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlCovarAggFunction.java,51,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlFirstLastValueAggFunction.java,51,true);
core/src/main/java/org/apache/calcite/sql/fun/SqlHistogramAggFunction.java,56,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,85,true);
core/src/main/java/org/apache/calcite/sql/fun/SqlMinMaxAggFunction.java,79,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlNtileAggFunction.java,40,true);
core/src/main/java/org/apache/calcite/sql/fun/SqlSingleValueAggFunction.java,54,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1522,SqlFunctionCategory.SYSTEM, false, false) {
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1534,SqlFunctionCategory.SYSTEM, false, false) {
core/src/main/java/org/apache/calcite/sql/fun/SqlSumAggFunction.java,57,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlSumEmptyIsZeroAggFunction.java,51,false);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidator.java,291,SqlValidatorScope scope);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,791,for (int i : aggCall.getArgList()) {
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,792,inputFieldsUsed.set(i);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4255,&& (op.isAggregator() || op.getKind() == SqlKind.FILTER)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4512,translateAgg((SqlCall) call.operand(0), call.operand(1), call);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4536,private void translateAgg(SqlCall call, SqlNode filter, SqlCall outerCall) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,865,filterArg, groupSet.cardinality(), r, null, aggCall1.alias);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,868,relBuilder.aggregateCall(aggCall.getAggregation(),
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,605,ImmutableList.copyOf(operands));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,611,if (filter != null) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,612,if (filter.getType().getSqlTypeName() != SqlTypeName.BOOLEAN) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,615,if (filter.getType().isNullable()) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,616,filter = call(SqlStdOperatorTable.IS_TRUE, filter);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,620,ImmutableList.copyOf(operands));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,637,operand);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1470,private static class AggCallImpl implements AggCall {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1473,private final RexNode filter;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1474,private final String alias;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1475,private final ImmutableList<RexNode> operands;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1478,String alias, ImmutableList<RexNode> operands) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1479,this.aggFunction = aggFunction;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1481,this.filter = filter;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1483,this.operands = operands;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelate.java,29,import org.apache.calcite.rel.core.JoinRelType;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelate.java,101,Expression selector =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelate.java,102,EnumUtils.joinSelector(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelate.java,104,: JoinRelType.INNER, physType,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelate.java,105,ImmutableList.of(leftResult.physType, rightResult.physType));
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,639,assert table != null;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,105,starRelOptTable.toRel(RelOptUtil.getContext(cluster));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,23,import org.apache.calcite.rel.RelRoot;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2567,public static RelOptTable.ToRelContext getContext(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2568,final RelOptCluster cluster) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2569,return new RelOptTable.ToRelContext() {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2570,public RelOptCluster getCluster() {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2571,return cluster;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2574,public RelRoot expandView(RelDataType rowType, String queryString,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2576,throw new UnsupportedOperationException();
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,31,import org.apache.calcite.rel.RelRoot;
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,35,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,52,class LixToRelTranslator implements RelOptTable.ToRelContext {
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,63,public RelOptCluster getCluster() {
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,64,return cluster;
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,67,public RelRoot expandView(RelDataType rowType, String queryString,
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,55,public class PlannerImpl implements Planner {
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,205,new SqlToRelConverter(new ViewExpanderImpl(), validator,
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,222,SqlParser parser = SqlParser.create(queryString, parserConfig);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,223,SqlNode sqlNode;
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,224,try {
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,225,sqlNode = parser.parseQuery();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,227,throw new RuntimeException("parse failed", e);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,230,final CalciteCatalogReader catalogReader =
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,231,createCatalogReader().withSchemaPath(schemaPath);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,234,validator.setIdentifierExpansion(true);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,237,final RexBuilder rexBuilder = createRexBuilder();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,238,final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,239,final SqlToRelConverter sqlToRelConverter =
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,240,new SqlToRelConverter(new ViewExpanderImpl(), validator,
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,247,root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,250,return PlannerImpl.this.root;
core/src/main/java/org/apache/calcite/prepare/Prepare.java,374,public RelRoot expandView(RelDataType rowType, String queryString,
core/src/main/java/org/apache/calcite/prepare/Prepare.java,376,throw new UnsupportedOperationException();
core/src/main/java/org/apache/calcite/prepare/QueryableRelBuilder.java,102,return ((TranslatableTable) table).toRel(translator, relOptTable);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,28,import org.apache.calcite.plan.RelOptUtil;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,130,relBuilder.push(aggregateRelOptTable.toRel(RelOptUtil.getContext(cluster)));
core/src/main/java/org/apache/calcite/rel/rules/LoptSemiJoinOptimizer.java,283,RelOptUtil.getContext(factRel.getCluster()));
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,22,import org.apache.calcite.plan.RelOptUtil;
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,48,RelOptUtil.getContext(oldRel.getCluster()));
core/src/main/java/org/apache/calcite/schema/impl/ViewTable.java,123,private RelRoot expandView(RelOptTable.ToRelContext preparingStmt,
core/src/main/java/org/apache/calcite/schema/impl/ViewTable.java,128,root = root.withRel(RelOptUtil.createCastRel(root.rel, rowType, true));
core/src/main/java/org/apache/calcite/schema/impl/ViewTable.java,129,return root;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3026,return new RelOptTable.ToRelContext() {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3027,public RelOptCluster getCluster() {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3028,return cluster;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,604,SqlOperator op = aggCall.getAggregation();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,605,if (op instanceof SqlSumEmptyIsZeroAggFunction) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,606,op = SqlStdOperatorTable.SUM;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,608,final List<SqlNode> operands = Expressions.list();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,610,operands.add(field(arg));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,612,return op.createCall(
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,613,aggCall.isDistinct() ? SqlSelectKeyword.DISTINCT.symbol(POS) : null,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,878,if (s.equals("(")) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,879,throw new RuntimeException("Use 'startList'");
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,881,if (s.equals(")")) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,882,throw new RuntimeException("Use 'endList'");
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,586,if (groupSets == null) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,587,groupSets = ImmutableList.of(groupSet);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,592,Lists.transform(groupSets,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,598,return groupKey(nodes, indicator, nodeLists);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,88,public final ImmutableList<Node> nodes;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,96,public final ImmutableList<String> uniqueColumnNames;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,113,private Lattice(CalciteSchema rootSchema, ImmutableList<Node> nodes,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,130,for (int i = 0; i < nodes.size(); i++) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,131,Node node = nodes.get(i);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,132,if (i == 0) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,133,assert node.parent == null;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,135,assert nodes.subList(0, i).contains(node.parent);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,143,uniqueColumnNames =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,144,ImmutableList.copyOf(
core/src/main/java/org/apache/calcite/materialize/Lattice.java,161,String current) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,306,for (Node node : usedNodes) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,307,if (node.parent != null) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,310,dialect.quoteIdentifier(buf, node.scan.getTable().getQualifiedName());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,313,if (node.parent != null) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,316,for (IntPair pair : node.link) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,320,final Column left = columns.get(node.parent.startCol + pair.source);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,321,dialect.quoteIdentifier(buf, left.identifiers());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,324,dialect.quoteIdentifier(buf, right.identifiers());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,344,private static void use(List<Node> usedNodes, Node node) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,345,if (!usedNodes.contains(node)) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,346,if (node.parent != null) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,347,use(usedNodes, node.parent);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,349,usedNodes.add(node);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,355,for (Node node : nodes) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,356,tables.add(node.scan.getTable().unwrap(Table.class));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,362,return new Builder(calciteSchema, sql);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,415,public static class Node {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,416,public final TableScan scan;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,417,public final Node parent;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,418,public final ImmutableList<IntPair> link;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,419,public final int startCol;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,420,public final int endCol;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,421,public final String alias;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,423,public Node(TableScan scan, Node parent, List<IntPair> link,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,424,int startCol, int endCol, String alias) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,426,this.parent = parent;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,427,this.link = link == null ? null : ImmutableList.copyOf(link);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,428,assert (parent == null) == (link == null);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,429,assert startCol >= 0;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,430,assert endCol > startCol;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,431,this.startCol = startCol;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,432,this.endCol = endCol;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,433,this.alias = alias;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,439,public static final DirectedGraph.EdgeFactory<RelNode, Edge> FACTORY =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,452,public RelNode getTarget() {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,453,return (RelNode) target;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,456,public RelNode getSource() {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,457,return (RelNode) source;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,466,public Measure(SqlAggFunction agg, Iterable<Column> args) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,471,public int compareTo(Measure measure) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,472,int c = agg.getName().compareTo(measure.agg.getName());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,473,if (c != 0) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,474,return c;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,476,return compare(args, measure.args);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,480,return "Measure: [agg: " + agg + ", args: " + args + "]";
core/src/main/java/org/apache/calcite/materialize/Lattice.java,491,&& this.args.equals(((Measure) obj).args);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,525,public static class Column implements Comparable<Column> {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,527,public final String table;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,528,public final String column;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,531,private Column(int ordinal, String table, String column, String alias) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,564,private final ImmutableList<Column> columns;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,566,private final ImmutableList.Builder<Measure> defaultMeasureListBuilder =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,567,ImmutableList.builder();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,577,public Builder(CalciteSchema schema, String sql) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,594,final DirectedGraph<RelNode, Edge> graph =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,596,for (RelNode node : relNodes) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,597,graph.addVertex(node);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,600,final RelNode source = relNodes.get(tempLink[0][0]);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,601,final RelNode target = relNodes.get(tempLink[1][0]);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,611,Node previous = null;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,613,int previousColumn = 0;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,614,for (RelNode relNode : TopologicalOrderIterator.of(graph)) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,615,final List<Edge> edges = graph.getInwardEdges(relNode);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,616,Node node;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,617,final int column = previousColumn
core/src/main/java/org/apache/calcite/materialize/Lattice.java,618,+ relNode.getRowType().getFieldCount();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,619,if (previous == null) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,622,+ relNode);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,624,node = new Node((TableScan) relNode, null, null,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,625,previousColumn, column, aliases.get(nodes.size()));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,632,node = new Node((TableScan) relNode,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,633,map.get(edge.getSource()), edge.pairs, previousColumn, column,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,634,aliases.get(nodes.size()));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,636,nodes.add(node);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,637,map.put(relNode, node);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,638,previous = node;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,639,previousColumn = column;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,642,final ImmutableList.Builder<Column> builder = ImmutableList.builder();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,643,final ImmutableListMultimap.Builder<String, Column> aliasBuilder =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,644,ImmutableListMultimap.builder();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,645,int c = 0;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,646,for (Node node : nodes) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,647,if (node.scan != null) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,648,for (String name : node.scan.getRowType().getFieldNames()) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,649,final Column column = new Column(c++, node.alias, name, name);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,650,builder.add(column);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,651,aliasBuilder.put(column.alias, column);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,655,columns = builder.build();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,656,columnsByAlias = aliasBuilder.build();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,699,return new Lattice(rootSchema, ImmutableList.copyOf(nodes), auto,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,701,columns, defaultMeasureListBuilder.build(), tileListBuilder.build());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,708,public ImmutableList<Column> resolveArgs(Object args) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,774,for (Column column1 : columns) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,784,public Measure resolveMeasure(String aggName, Object args) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,787,return new Measure(agg, list);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,801,public void addMeasure(Measure measure) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,802,defaultMeasureListBuilder.add(measure);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,397,latticeBuilder.resolveMeasure(jsonMeasure.agg, jsonMeasure.args);
core/src/main/java/org/apache/calcite/plan/RelOptLattice.java,43,return lattice.nodes.get(0).scan.getTable();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,70,private HepProgram mainProgram;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,78,private Map<String, HepRelVertex> mapDigestToVertex;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,80,private final Set<RelOptRule> allRules;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,88,private boolean noDAG;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,95,private DirectedGraph<HepRelVertex, DefaultEdge> graph;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,130,boolean noDAG,
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,135,this.onCopyHook =
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,137,mapDigestToVertex = new HashMap<>();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,138,graph = DefaultDirectedGraph.create();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,142,allRules = new LinkedHashSet<>();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,143,this.noDAG = noDAG;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,775,if (!noDAG) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,420,public abstract class Context {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,424,protected Context(int fieldCount) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,425,this(fieldCount, false);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,428,protected Context(int fieldCount, boolean ignoreCast) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,654,return new AliasContext(aliases, qualified);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,658,return new JoinContext(leftContext, rightContext);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,663,public class AliasContext extends Context {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,669,boolean qualified) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,670,super(computeFieldCount(aliases));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,699,class JoinContext extends Context {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,704,private JoinContext(Context leftContext, Context rightContext) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,705,super(leftContext.fieldCount + rightContext.fieldCount);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,778,newContext = new Context(selectList.size()) {
core/src/main/java/org/apache/calcite/schema/impl/StarTable.java,92,return typeFactory.createStructType(typeList, lattice.uniqueColumnNames);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,174,private SqlRexConvertletTable convertletTable =
core/src/main/java/org/apache/calcite/tools/Frameworks.java,175,StandardConvertletTable.INSTANCE;
core/src/main/java/org/apache/calcite/tools/Frameworks.java,176,private SqlOperatorTable operatorTable = SqlStdOperatorTable.instance();
core/src/main/java/org/apache/calcite/tools/Frameworks.java,177,private ImmutableList<Program> programs = ImmutableList.of();
core/src/main/java/org/apache/calcite/tools/Frameworks.java,180,private SqlParser.Config parserConfig =
core/src/main/java/org/apache/calcite/tools/Frameworks.java,181,SqlParser.Config.DEFAULT;
core/src/main/java/org/apache/calcite/tools/Frameworks.java,185,private RelDataTypeSystem typeSystem = RelDataTypeSystem.DEFAULT;
core/src/main/java/org/apache/calcite/tools/Frameworks.java,187,private ConfigBuilder() {}
core/src/main/java/org/apache/calcite/util/graph/DefaultDirectedGraph.java,38,final Map<V, VertexInfo<V, E>> vertexMap =
core/src/main/java/org/apache/calcite/util/graph/DefaultDirectedGraph.java,57,StringBuilder buf = new StringBuilder();
core/src/main/java/org/apache/calcite/util/graph/DefaultDirectedGraph.java,63,.append(")");
core/src/main/java/org/apache/calcite/util/graph/DefaultDirectedGraph.java,64,return buf.toString();
core/src/main/java/org/apache/calcite/util/graph/DefaultEdge.java,27,this.source = source;
core/src/main/java/org/apache/calcite/util/graph/DefaultEdge.java,28,this.target = target;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,917,if (constants.containsKey(inputRef)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,918,stack.add(Constancy.REDUCIBLE_CONSTANT);
core/src/main/java/org/apache/calcite/rex/RexFieldCollation.java,36,String s = left.toString();
core/src/main/java/org/apache/calcite/rex/RexFieldCollation.java,40,s += " DESC";
core/src/main/java/org/apache/calcite/rex/RexFieldCollation.java,43,s += " NULLS FIRST";
core/src/main/java/org/apache/calcite/rex/RexFieldCollation.java,46,s += " NULLS LAST";
core/src/main/java/org/apache/calcite/rex/RexFieldCollation.java,52,return s;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,494,if (!(target instanceof RexCorrelVariable)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,495,throw new RuntimeException(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,498,if (correlates == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,499,throw new RuntimeException("Cannot translate " + expr + " since "
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,500,+ "correlate variables resolver is not defined");
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,502,InputGetter getter =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,503,correlates.apply(((RexCorrelVariable) target).getName());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,504,return getter.field(list, fieldAccess.getField().getIndex(), storageType);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,777,RexCall cast = (RexCall) refExp;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,778,refExp = cast.getOperands().get(0);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,780,if (refExp.isA(SqlKind.NEW_SPECIFICATION)) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,781,return ((RexCall) refExp).operands
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,782,.get(fieldAccess.getField().getIndex());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,784,if (!(refExp instanceof RexFieldAccess)) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,787,fieldAccess = (RexFieldAccess) refExp;
core/src/main/java/org/apache/calcite/util/BuiltInMethod.java,357,METADATA_REL(Metadata.class, "rel");
core/src/main/java/org/apache/calcite/rex/RexFieldCollation.java,32,super(left, ImmutableSet.copyOf(right));
core/src/main/java/org/apache/calcite/rex/RexCall.java,125,case IS_NOT_FALSE:
core/src/main/java/org/apache/calcite/rex/RexCall.java,126,case NOT:
core/src/main/java/org/apache/calcite/rex/RexCall.java,127,return operands.get(0).isAlwaysFalse();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,169,implementor.allCorrelateVariables);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScan.java,85,(JavaTypeFactory) getCluster().getTypeFactory(), bb, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableThetaJoin.java,183,implementor.allCorrelateVariables)));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,275,inputGetter);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,424,getBlockBuilderWinAggFrameResultContextFunction(typeFactory, result,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,425,translatedConstants, comparator_, rows_, i_, startX, endX,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,426,minX, maxX,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,524,final JavaTypeFactory typeFactory, final Result result,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,525,final List<Expression> translatedConstants,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1453,translatedOperands.get(2));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,107,private RexToLixTranslator(RexProgram program, JavaTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,108,Expression root, InputGetter inputGetter, BlockBuilder list) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,109,this(program, typeFactory, root, inputGetter, list,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,111,new RexBuilder(typeFactory));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,114,private RexToLixTranslator(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,115,RexProgram program,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,116,JavaTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,117,Expression root,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,118,InputGetter inputGetter,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,119,BlockBuilder list,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,120,Map<RexNode, Boolean> exprNullableMap,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,121,RexBuilder builder) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,122,this(program, typeFactory, root, inputGetter, list, exprNullableMap,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,123,builder, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,126,private RexToLixTranslator(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,127,RexProgram program,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,128,JavaTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,129,Expression root,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,130,InputGetter inputGetter,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,131,BlockBuilder list,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,132,Map<? extends RexNode, Boolean> exprNullableMap,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,133,RexBuilder builder,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,134,RexToLixTranslator parent) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,135,this(program, typeFactory, root, inputGetter, list, exprNullableMap,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,136,builder, parent, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,139,private RexToLixTranslator(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,140,RexProgram program,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,149,this.program = program;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,150,this.typeFactory = typeFactory;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,151,this.root = root;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,153,this.list = list;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,154,this.exprNullableMap = exprNullableMap;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,155,this.builder = builder;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,156,this.parent = parent;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,157,this.correlates = correlates;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,175,JavaTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,176,BlockBuilder list,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,177,PhysType outputPhysType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,178,Expression root,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,179,InputGetter inputGetter,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,180,Function1<String, InputGetter> correlates) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,196,BlockBuilder list, InputGetter inputGetter) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,198,return new RexToLixTranslator(null, typeFactory, root, inputGetter, list);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,714,public static Expression translateCondition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,715,RexProgram program,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,716,JavaTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,717,BlockBuilder list,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,718,InputGetter inputGetter,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,719,Function1<String, InputGetter> correlates) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,725,new RexToLixTranslator(program, typeFactory, root, inputGetter, list);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,994,nullable, builder, this, correlates);
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,102,RexToLixTranslator.translateProjects(program, javaTypeFactory, builder,
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,103,null, root, inputGetter, correlates);
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,81,RexToLixTranslator.translateProjects(programBuilder.getProgram(),
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,82,javaTypeFactory, blockBuilder, null, root_, getter, null);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,160,return trim_(s, false, true, ' ');
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,165,return trim_(s, true, false, ' ');
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,169,public static String trim(boolean leading, boolean trailing, String seek,
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,171,return trim_(s, leading, trailing, seek.charAt(0));
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,175,private static String trim_(String s, boolean left, boolean right, char c) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,182,if (s.charAt(j - 1) != c) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,194,if (s.charAt(i) != c) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,987,s = trim_(s, true, true, ' ');
core/src/main/java/org/apache/calcite/util/BuiltInMethod.java,251,String.class),
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,347,null);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodCallExpression.java,52,this(method.getGenericReturnType(), method, targetExpression, expressions);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,646,RelDataType int8Type =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,647,cx.getTypeFactory().createSqlType(SqlTypeName.BIGINT);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,648,final RexNode[] casts = new RexNode[2];
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,649,casts[0] =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,650,rexBuilder.makeCast(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,651,cx.getTypeFactory().createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,652,int8Type,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,653,exprs.get(0).getType().isNullable()),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,654,exprs.get(0));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,655,casts[1] =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,656,rexBuilder.makeCast(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,657,cx.getTypeFactory().createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,658,int8Type,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,659,exprs.get(1).getType().isNullable()),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,660,exprs.get(1));
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,87,public static String substring(String s, int from, int for_) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,88,return s.substring(from - 1, Math.min(from - 1 + for_, s.length()));
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,92,public static String substring(String s, int from) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,93,return s.substring(from - 1);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,216,String bigString = new String(chars);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,219,add(bigString.substring(0, i * 2));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,892,if ((sqlNode instanceof SqlCall) && containsInOperator(sqlNode)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,893,SqlCall sqlCall = (SqlCall) sqlNode;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,895,|| (sqlCall.getOperator() == SqlStdOperatorTable.OR)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,896,SqlNode[] sqlOperands = ((SqlBasicCall) sqlCall).operands;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,897,for (int i = 0; i < sqlOperands.length; i++) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,902,SqlNode childNode = sqlCall.operand(0);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,903,assert childNode instanceof SqlCall;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,904,SqlBasicCall childSqlCall = (SqlBasicCall) childNode;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,905,if (childSqlCall.getOperator() == SqlStdOperatorTable.AND) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,906,SqlNode[] andOperands = childSqlCall.getOperands();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,907,SqlNode[] orOperands = new SqlNode[andOperands.length];
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,908,for (int i = 0; i < orOperands.length; i++) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,914,for (int i = 0; i < orOperands.length; i++) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,920,SqlNode[] orOperands = childSqlCall.getOperands();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,921,SqlNode[] andOperands = new SqlNode[orOperands.length];
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,922,for (int i = 0; i < andOperands.length; i++) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,928,for (int i = 0; i < andOperands.length; i++) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,934,SqlNode[] notOperands = childSqlCall.getOperands();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,935,assert notOperands.length == 1;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,938,SqlNode[] inOperands = childSqlCall.getOperands();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,939,SqlInOperator inOp =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,940,(SqlInOperator) childSqlCall.getOperator();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,955,return sqlNode;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,960,return sqlNode;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,964,return sqlNode;
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,416,return al;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,182,case RPAREN:
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,183,iter.previous();
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,184,return;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,187,break;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,571,purgeSelectExprsKeepAliases();
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,37,UNION, INTERSECT, EXCEPT,
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,335,if (pos < sql.length()) {
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,409,return new SqlAdvisor(validator);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,143,final List<SqlMoniker> result;
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,144,if (word.length() > 0) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,145,result = new ArrayList<SqlMoniker>();
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,146,if (quoted) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,148,word = word.substring(1);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,149,for (SqlMoniker hint : completionHints) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,150,String cname = hint.toString();
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,151,if (cname.startsWith(word)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,152,result.add(hint);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,157,for (SqlMoniker hint : completionHints) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,158,String cname = hint.toString();
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,160,&& cname.substring(0, word.length()).equalsIgnoreCase(word)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,161,result.add(hint);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,166,result = completionHints;
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,217,if (hintList.contains(star) && !isSelectListItem(sqlNode, pos)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,238,final SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,107,&& (sql.charAt(wordStart - 1) == '"')) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,125,&& (sql.charAt(wordEnd) == '"')) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,332,SqlSimpleParser simpleParser = new SqlSimpleParser(HINT_TOKEN);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,399,SqlSimpleParser parser = new SqlSimpleParser(HINT_TOKEN);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,428,SqlParser parser = SqlParser.create("");
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,442,SqlParser parser = SqlParser.create(sql);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,133,Tokenizer tokenizer = new Tokenizer(sql, hintToken);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,277,case '"':
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,280,start = pos;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,281,++pos;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,282,while (pos < sql.length()) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,283,c = sql.charAt(pos);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,284,++pos;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,285,if (c == '"') {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,286,if (pos < sql.length()) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,287,char c1 = sql.charAt(pos);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,288,if (c1 == '"') {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,291,++pos;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,293,break;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,296,break;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,300,match = sql.substring(start, pos);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,301,if (match.startsWith("\" " + hintToken + " ")) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,302,return new Token(TokenType.ID, hintToken);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,304,return new Token(TokenType.DQID, match);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,289,RelNode newInput = getNewForOldRel(oldInput1);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,296,newOrdinal += calculateFlattenedOffset(oldInputType, oldOrdinal);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,297,return newOrdinal;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,513,programBuilder.addCondition(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,514,new RexLocalRef(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,515,getNewForOldInput(conditionRef.getIndex()),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,516,conditionRef.getType()));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,566,int newOffset = getNewForOldInput(inputRef.getIndex());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,577,RelDataTypeField field = fieldList.get(j);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,580,new RexInputRef(newOffset + j, field.getType()),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,737,final int newIndex = getNewForOldInput(oldIndex);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,743,RelDataType fieldType = removeDistinct(input.getType());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,744,RexInputRef newInput = new RexInputRef(newIndex, fieldType);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,745,return newInput;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,759,RelDataType fieldType = removeDistinct(fieldAccess.getType());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,770,iInput += getNewForOldInput(inputRef.getIndex());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,771,return new RexInputRef(iInput, fieldType);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,77,import java.util.Iterator;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,741,final List<String> names = new ArrayList<>();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,752,final RelDataType inputRowType = peek().getRowType();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,760,names);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,767,public RelBuilder project(RexNode... nodes) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,768,return project(ImmutableList.copyOf(nodes));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,776,private String inferAlias(List<RexNode> exprList, RexNode expr) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,782,return inferAlias(exprList, ((RexCall) expr).getOperands().get(0));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,785,for (;;) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,786,final int i = exprList.indexOf(expr);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,787,if (i < 0) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,788,break;
core/src/main/java/org/apache/calcite/model/ModelHandler.java,75,final ObjectMapper mapper = new ObjectMapper();
core/src/main/java/org/apache/calcite/model/ModelHandler.java,76,mapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,77,mapper.configure(JsonParser.Feature.ALLOW_SINGLE_QUOTES, true);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,78,mapper.configure(JsonParser.Feature.ALLOW_COMMENTS, true);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,81,root = mapper.readValue(
core/src/main/java/org/apache/calcite/model/ModelHandler.java,82,uri.substring("inline:".length()), JsonRoot.class);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,124,if (variables.contains(declaration.parameter.name)) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,125,Expression x = append(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,126,newName(declaration.parameter.name, optimize),
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,127,declaration.initializer);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,136,add(statement);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,239,return (decl.modifiers & Modifier.FINAL) != 0;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,339,final SubstituteVariableVisitor visitor = new SubstituteVariableVisitor(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,488,private final Map<ParameterExpression, Expression> map;
core/src/main/java/org/apache/calcite/sql/SqlKind.java,774,LAST_VALUE, COVAR_POP, COVAR_SAMP, REGR_SXX, REGR_SYY,
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,54,SqlValidator.STRICT
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,55,? OperandTypes.ANY
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,56,: OperandTypes.ONE_OR_MORE,
core/src/main/java/org/apache/calcite/sql/fun/SqlCovarAggFunction.java,52,Preconditions.checkArgument(kind == SqlKind.COVAR_POP
core/src/main/java/org/apache/calcite/sql/fun/SqlCovarAggFunction.java,53,|| kind == SqlKind.COVAR_SAMP
core/src/main/java/org/apache/calcite/sql/fun/SqlCovarAggFunction.java,54,|| kind == SqlKind.REGR_SXX
core/src/main/java/org/apache/calcite/sql/fun/SqlCovarAggFunction.java,55,|| kind == SqlKind.REGR_SYY);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,302,exprList.add(cx.convertExpression(whenList.get(i)));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,303,exprList.add(cx.convertExpression(thenList.get(i)));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,305,exprList.add(cx.convertExpression(call.getElseOperand()));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,307,RexBuilder rexBuilder = cx.getRexBuilder();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,428,RelDataType type = dataType.deriveType(typeFactory);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1161,final SqlNode argSquared =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1162,SqlStdOperatorTable.MULTIPLY.createCall(pos, arg, arg);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1163,final SqlNode sumArgSquared =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1164,SqlStdOperatorTable.SUM.createCall(pos, argSquared);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1165,final SqlNode sum =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1166,SqlStdOperatorTable.SUM.createCall(pos, arg);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1168,SqlStdOperatorTable.MULTIPLY.createCall(pos, sum, sum);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1169,final SqlNode count =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1170,SqlStdOperatorTable.COUNT.createCall(pos, arg);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1172,SqlStdOperatorTable.DIVIDE.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1173,pos, sumSquared, count);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1175,SqlStdOperatorTable.MINUS.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1176,pos, sumArgSquared, avgSumSquared);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1179,denominator = count;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1181,final SqlNumericLiteral one =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1182,SqlLiteral.createExactNumeric("1", pos);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1183,denominator =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1184,SqlStdOperatorTable.MINUS.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1185,pos, count, one);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1188,SqlStdOperatorTable.DIVIDE.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1189,pos, diff, denominator);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1192,final SqlNumericLiteral half =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1193,SqlLiteral.createExactNumeric("0.5", pos);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1194,result =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1195,SqlStdOperatorTable.POWER.createCall(pos, div, half);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1116,SqlNode sqlNode1 = validator.validate(sqlNode);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1121,sqlToRelConverter.convertQuery(sqlNode1, true, false);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,235,final SqlNode validatedSqlNode = validator.validate(sqlNode);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,246,root = sqlToRelConverter.convertQuery(validatedSqlNode, true, false);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,693,for (RelDataTypeField field : rowType.getFieldList()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,694,hintList.add(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,695,new SqlMonikerImpl(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,696,field.getName(),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,697,SqlMonikerType.COLUMN));
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,32,import java.io.IOException;
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,49,private static final File SRC_DIR = new File("/tmp");
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,109,String source = "public class " + className + "\n"
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,112,+ " {\n"
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,113,+ s + "\n"
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,114,+ "}\n";
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,116,System.out.println("======================");
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,117,System.out.println(source);
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,118,System.out.println("======================");
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,122,JaninoCompiler compiler = new JaninoCompiler();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,123,compiler.getArgs().setDestdir(CLASS_DIR.getAbsolutePath());
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,124,compiler.getArgs().setSource(source, file.getAbsolutePath());
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,125,compiler.getArgs().setFullClassName(className);
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,126,compiler.compile();
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,37,import net.hydromatic.tpcds.TpcdsColumn;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,38,import net.hydromatic.tpcds.TpcdsEntity;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,39,import net.hydromatic.tpcds.TpcdsTable;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,41,import java.sql.Date;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,50,private final int part;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,51,private final int partCount;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,85,this.part = part;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,86,this.partCount = partCount;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,89,for (TpcdsTable<?> tpcdsTable : TpcdsTable.getTables()) {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,102,private class TpcdsQueryableTable<E extends TpcdsEntity>
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,104,private final TpcdsTable<E> tpcdsTable;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,106,TpcdsQueryableTable(TpcdsTable<E> tpcdsTable) {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,113,Integer rowCount = TABLE_ROW_COUNTS.get(tpcdsTable.name);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,114,assert rowCount != null : tpcdsTable.name;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,124,final Enumerator<E> iterator =
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,125,Linq4j.iterableEnumerator(
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,126,tpcdsTable.createGenerator(scaleFactor, part, partCount));
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,127,return new Enumerator<Object[]>() {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,128,public Object[] current() {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,129,final List<TpcdsColumn<E>> columns = tpcdsTable.getColumns();
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,130,final Object[] objects = new Object[columns.size()];
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,131,int i = 0;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,132,for (TpcdsColumn<E> column : columns) {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,133,objects[i++] = value(column, iterator.current());
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,135,return objects;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,138,private Object value(TpcdsColumn<E> tpcdsColumn, E current) {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,139,final Class<?> type = realType(tpcdsColumn);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,140,if (type == String.class) {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,141,return tpcdsColumn.getString(current);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,143,return tpcdsColumn.getDouble(current);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,145,return Date.valueOf(tpcdsColumn.getString(current));
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,147,return tpcdsColumn.getLong(current);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,151,public boolean moveNext() {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,152,return iterator.moveNext();
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,155,public void reset() {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,156,iterator.reset();
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,159,public void close() {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,168,for (TpcdsColumn<E> column : tpcdsTable.getColumns()) {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,170,typeFactory.createJavaType(realType(column)));
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,175,private Class<?> realType(TpcdsColumn<E> column) {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,176,if (column.getColumnName().endsWith("date")) {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,177,return Date.class;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,179,return column.getType();
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchemaFactory.java,39,Map map = (Map) operand;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchemaFactory.java,41,int part = Util.first((Integer) map.get("part"), 1);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchemaFactory.java,42,int partCount = Util.first((Integer) map.get("partCount"), 1);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchemaFactory.java,43,boolean columnPrefix = Util.first((Boolean) map.get("columnPrefix"), true);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchemaFactory.java,44,return new TpcdsSchema(scale, part, partCount);
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,218,getOperator().unparse(writer, this, 0, 0);
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,221,getOperator().unparse(writer, this, leftPrec, rightPrec);
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,43,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,75,final List<ImmutableBitSet> keys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,283,return list.toArray(new Comparable[list.size()]);
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,819,: ImmutableList.<RelCollation>of());
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,37,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,88,ImmutableList.<RelCollation>of(), null, queryable);
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,96,return createCloneTable(typeFactory, protoRowType,
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,97,ImmutableList.<RelCollation>of(), repList, source);
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,118,Suppliers.memoize(
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,119,new Supplier<ArrayTable.Content>() {
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,120,public ArrayTable.Content get() {
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,121,final ColumnLoader loader =
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,122,new ColumnLoader<>(typeFactory, source, protoRowType,
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,123,repList);
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,124,final List<RelCollation> collation2 =
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,126,&& loader.sortField >= 0
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,128,: collations;
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,129,return new ArrayTable.Content(loader.representationValues,
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,130,loader.size(), collation2);
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,29,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,56,private static final Function<Timestamp, Long> TIMESTAMP_TO_LONG =
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,57,new Function<Timestamp, Long>() {
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,58,public Long apply(Timestamp a0) {
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,59,return a0 == null ? null : a0.getTime();
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,63,private static final Function<Time, Integer> TIME_TO_INT =
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,64,new Function<Time, Integer>() {
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,65,public Integer apply(Time a0) {
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,66,return a0 == null
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,67,? null
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,68,: (int) (a0.getTime() % DateTimeUtils.MILLIS_PER_DAY);
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,72,private static final Function<Date, Integer> DATE_TO_INT =
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,73,new Function<Date, Integer>() {
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,74,public Integer apply(Date a0) {
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,75,return a0 == null
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,76,? null
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,77,: (int) (a0.getTime() / DateTimeUtils.MILLIS_PER_DAY);
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,267,return Lists.transform(list, TIMESTAMP_TO_LONG);
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,274,return Lists.transform(list, TIME_TO_INT);
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,281,return Lists.transform(list, DATE_TO_INT);
core/src/main/java/org/apache/calcite/adapter/clone/ListTable.java,32,import org.apache.calcite.util.ImmutableBitSet;
core/src/main/java/org/apache/calcite/adapter/clone/ListTable.java,67,return Statistics.of(list.size(), ImmutableList.<ImmutableBitSet>of());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,35,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,37,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,52,private static final Function<RexNode, Type> REX_TO_INTERNAL_TYPE =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,53,new Function<RexNode, Type>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,54,public Type apply(RexNode node) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,55,return toInternal(node.getType());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,236,return Lists.transform(operandList, REX_TO_INTERNAL_TYPE);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,47,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,356,final List<Expression> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,71,return new Node() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,72,public void run() throws InterruptedException {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,73,final Sink sink =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,74,implementor.relSinks.get(EnumerableBindable.this).get(0);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,75,final Enumerable<Object[]> enumerable = bind(implementor.dataContext);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,76,final Enumerator<Object[]> enumerator = enumerable.enumerator();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,77,while (enumerator.moveNext()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,78,sink.send(Row.asCopy(enumerator.current()));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,34,import org.apache.calcite.rel.RelDistribution;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,46,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,94,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,95,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,96,return RelMdCollation.calc(mq, input, program);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,100,new Supplier<RelDistribution>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,101,public RelDistribution get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,102,return RelMdDistribution.calc(mq, input, program);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,33,super(LogicalCalc.class, RelOptUtil.CALC_PREDICATE, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,21,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,23,import org.apache.calcite.rel.RelDistribution;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,32,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,34,import java.util.List;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,62,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,63,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,64,return RelMdCollation.filter(mq, input);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,68,new Supplier<RelDistribution>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,69,public RelDistribution get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,70,return RelMdDistribution.filter(mq, input);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,31,super(LogicalFilter.class, RelOptUtil.FILTER_PREDICATE, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,24,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,26,import org.apache.calcite.rel.RelDistribution;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,38,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,72,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,73,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,74,return RelMdCollation.limit(mq, input);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,78,new Supplier<RelDistribution>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,79,public RelDistribution get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,80,return RelMdDistribution.limit(mq, input);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,92,leftKeys, rightKeys, ImmutableSet.<CorrelationId>of(), joinType);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,33,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,64,final List<RelNode> newInputs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,65,final List<RelCollation> collations = Lists.newArrayList();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,71,final List<RelFieldCollation> fieldCollations = Lists.newArrayList();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProject.java,21,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProject.java,31,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProject.java,76,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProject.java,77,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProject.java,78,return RelMdCollation.project(mq, input, projects);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,31,super(LogicalProject.class, RelOptUtil.PROJECT_PREDICATE, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,20,import org.apache.calcite.plan.RelOptCluster;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,23,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,24,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,25,import org.apache.calcite.rex.RexUtil;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,26,import org.apache.calcite.sql.validate.SqlValidatorUtil;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,28,import java.util.List;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,37,RelFactories.FilterFactory FILTER_FACTORY =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,38,new RelFactories.FilterFactory() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,39,public RelNode createFilter(RelNode child, RexNode condition) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,40,return EnumerableFilter.create(child, condition);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,44,RelFactories.ProjectFactory PROJECT_FACTORY =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,45,new RelFactories.ProjectFactory() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,46,public RelNode createProject(RelNode child,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,47,List<? extends RexNode> projects, List<String> fieldNames) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,48,final RelOptCluster cluster = child.getCluster();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,49,final RelDataType rowType =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,50,RexUtil.createStructType(cluster.getTypeFactory(), projects,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,54,return EnumerableProject.create(child, projects, rowType);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,44,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,48,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,71,Maps.newHashMap();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,73,Maps.newIdentityHashMap();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,118,new Function<ParameterExpression, Statement>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,119,public Statement apply(ParameterExpression input) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,120,return Expressions.declare(Modifier.FINAL, input,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,121,Expressions.convert_(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,122,Expressions.call(DataContext.ROOT,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,123,BuiltInMethod.DATA_CONTEXT_GET.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,124,Expressions.constant(input.name)),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,125,input.type));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,149,Collections.<ParameterExpression>emptyList(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,156,Collections.<Type>singletonList(Bindable.class),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,167,ImmutableList.<Type>of(Serializable.class),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,290,Collections.<ParameterExpression>emptyList(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,388,Collections.<ParameterExpression>emptyList(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,443,corrVars.put(name, new RexToLixTranslator.InputGetter() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,444,public Expression field(BlockBuilder list, int index, Type storageType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,445,Expression fieldReference =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,446,physType.fieldReference(pe, index, storageType);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,447,return corrBlock.append(name + "_" + index, fieldReference);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,34,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,48,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,79,.replaceIfs(RelCollationTraitDef.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,80,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,81,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,82,if (table != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,83,return table.getStatistic().getCollations();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,85,return ImmutableList.of();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,26,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,28,import org.apache.calcite.rel.RelDistribution;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,41,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,65,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,66,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,67,return RelMdCollation.values(mq, rowType, tuples);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,71,new Supplier<RelDistribution>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,72,public RelDistribution get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,73,return RelMdDistribution.values(rowType, tuples);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,54,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,430,final Function<AggImpState, List<RexNode>> rexArguments =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,431,new Function<AggImpState, List<RexNode>>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,432,public List<RexNode> apply(AggImpState agg) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,433,List<Integer> argList = agg.call.getArgList();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,434,List<RelDataType> inputTypes =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,435,EnumUtils.fieldRowTypes(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,436,result.physType.getRowType(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,437,constants,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,438,argList);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,439,List<RexNode> args = new ArrayList<RexNode>(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,440,inputTypes.size());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,441,for (int i = 0; i < argList.size(); i++) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,442,Integer idx = argList.get(i);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,443,args.add(new RexInputRef(idx, inputTypes.get(i)));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,445,return args;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,534,return new Function<BlockBuilder,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,535,WinAggFrameResultContext>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,536,public WinAggFrameResultContext apply(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,537,final BlockBuilder block) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,538,return new WinAggFrameResultContext() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,539,public RexToLixTranslator rowTranslator(Expression rowIndex) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,540,Expression row =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,541,getRow(rowIndex);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,542,final RexToLixTranslator.InputGetter inputGetter =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,543,new WindowRelInputGetter(row, inputPhysType,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,544,result.physType.getRowType().getFieldCount(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,545,translatedConstants);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,547,return RexToLixTranslator.forAggregation(typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,548,block, inputGetter);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,551,public Expression computeIndex(Expression offset,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,552,WinAggImplementor.SeekType seekType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,553,Expression index;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,554,if (seekType == WinAggImplementor.SeekType.AGG_INDEX) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,555,index = jDecl.parameter;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,557,index = i_;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,559,index = startX;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,561,index = endX;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,563,throw new IllegalArgumentException("SeekSet " + seekType
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,564,+ " is not supported");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,566,if (!Expressions.constant(0).equals(offset)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,567,index = block.append("idx", Expressions.add(index, offset));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,569,return index;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,572,private Expression checkBounds(Expression rowIndex,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,573,Expression minIndex, Expression maxIndex) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,574,if (rowIndex == i_ || rowIndex == startX || rowIndex == endX) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,576,return hasRows;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,580,Expression res = block.append("rowInFrame",
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,581,Expressions.foldAnd(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,582,ImmutableList.of(hasRows,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,583,Expressions.greaterThanOrEqual(rowIndex, minIndex),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,584,Expressions.lessThanOrEqual(rowIndex, maxIndex))));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,586,return res;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,589,public Expression rowInFrame(Expression rowIndex) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,590,return checkBounds(rowIndex, startX, endX);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,593,public Expression rowInPartition(Expression rowIndex) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,594,return checkBounds(rowIndex, minX, maxX);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,597,public Expression compareRows(Expression a, Expression b) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,598,return Expressions.call(comparator_,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,599,BuiltInMethod.COMPARATOR_COMPARE.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,600,getRow(a), getRow(b));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,603,public Expression getRow(Expression rowIndex) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,604,return block.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,606,RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,607,Expressions.arrayIndex(rows_, rowIndex),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,608,inputPhysType.getJavaRowType()));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,611,public Expression index() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,612,return i_;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,615,public Expression startIndex() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,616,return startX;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,619,public Expression endIndex() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,620,return endX;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,623,public Expression hasRows() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,624,return hasRows;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,627,public Expression getFrameRowCount() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,628,return frameRowCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,631,public Expression getPartitionRowCount() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,632,return partitionRowCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/NestedBlockBuilderImpl.java,55,nestBlock(block, Collections.<RexNode, Boolean>emptyMap());
core/src/main/java/org/apache/calcite/adapter/enumerable/NestedBlockBuilderImpl.java,66,nestBlock(block, Collections.<RexNode, Boolean>emptyMap());
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,42,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,49,import java.util.Collections;
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,176,final List<Expression> expressions = Lists.newArrayList();
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,263,return Pair.<Expression, Expression>of(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,264,selector,
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,333,Expressions.<MemberDeclaration>list(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,367,return Pair.<Expression, Expression>of(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,368,selector,
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,369,Expressions.new_(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,370,Comparator.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,371,Collections.<Expression>emptyList(),
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,434,Expressions.<MemberDeclaration>list(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,469,Collections.<Expression>emptyList(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,58,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,60,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,193,Maps.newHashMap();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,296,map.put(DEFAULT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,297,new CallImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,298,public Expression implement(RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,299,RexCall call, NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,300,return Expressions.constant(null);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,358,return new Supplier<T>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,359,public T get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,360,try {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,361,return constructor.newInstance();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,363,| InvocationTargetException e) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,364,throw new IllegalStateException(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,403,return new CallImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,404,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,405,RexToLixTranslator translator, RexCall call, NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,406,return implementNullSemantics0(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,407,translator, call, nullAs, nullPolicy, harmonize,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,408,implementor);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,424,return new CallImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,425,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,426,RexToLixTranslator translator, RexCall call, NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,427,assert call.getOperator() == AND
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,428,: "AND null semantics is supported only for AND operator. Actual operator is "
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,429,+ String.valueOf(call.getOperator());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,430,final RexCall call2 = call2(false, translator, call);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,431,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,432,case NOT_POSSIBLE: // Just foldAnd
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,433,case TRUE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,436,case FALSE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,439,final List<Expression> expressions =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,440,translator.translateList(call2.getOperands(), nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,441,return Expressions.foldAnd(expressions);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,442,case NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,443,case IS_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,444,case IS_NOT_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,445,final List<Expression> nullAsTrue =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,446,translator.translateList(call2.getOperands(), NullAs.TRUE);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,447,final List<Expression> nullAsIsNull =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,448,translator.translateList(call2.getOperands(), NullAs.IS_NULL);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,449,Expression hasFalse = Expressions.not(Expressions.foldAnd(nullAsTrue));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,450,Expression hasNull = Expressions.foldOr(nullAsIsNull);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,451,Expression result = nullAs.handle(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,452,Expressions.condition(hasFalse, BOXED_FALSE_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,453,Expressions.condition(hasNull, NULL_EXPR, BOXED_TRUE_EXPR)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,454,return result;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,455,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,456,throw new IllegalArgumentException(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,469,return new CallImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,470,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,471,RexToLixTranslator translator, RexCall call, final NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,472,assert call.getOperator() == OR
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,473,: "OR null semantics is supported only for OR operator. Actual operator is "
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,474,+ String.valueOf(call.getOperator());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,475,final RexCall call2 = call2(harmonize, translator, call);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,476,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,477,case NOT_POSSIBLE: // Just foldOr
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,478,case TRUE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,481,case FALSE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,484,final List<Expression> expressions =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,485,translator.translateList(call2.getOperands(), nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,486,return Expressions.foldOr(expressions);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,487,case NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,488,case IS_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,489,case IS_NOT_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,490,final List<Expression> nullAsFalse =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,491,translator.translateList(call2.getOperands(), NullAs.FALSE);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,492,final List<Expression> nullAsIsNull =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,493,translator.translateList(call2.getOperands(), NullAs.IS_NULL);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,494,Expression hasTrue = Expressions.foldOr(nullAsFalse);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,495,Expression hasNull = Expressions.foldOr(nullAsIsNull);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,496,Expression result = nullAs.handle(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,497,Expressions.condition(hasTrue, BOXED_TRUE_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,498,Expressions.condition(hasNull, NULL_EXPR, BOXED_FALSE_EXPR)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,499,return result;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,500,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,501,throw new IllegalArgumentException(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,536,return new CallImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,537,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,538,RexToLixTranslator translator, RexCall call, NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,539,final RexCall call2 = call2(false, translator, call);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,540,return implementCall(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,541,translator, call2, implementor, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1129,return Collections.<Type>singletonList(afi.accumulatorType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1131,return Arrays.<Type>asList(afi.accumulatorType, afi.declaringClass);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,78,Util.<Method, SqlOperator>mapOf(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,110,Collections.<RexNode, Boolean>emptyMap(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1002,block, ImmutableMap.<RexNode, Boolean>of(), builder, this, correlates);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1011,Collections.<RexNode, Boolean>emptyMap(), builder, this, correlates);
core/src/main/java/org/apache/calcite/adapter/enumerable/impl/WinAggAddContextImpl.java,27,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/adapter/enumerable/impl/WinAggResultContextImpl.java,26,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,32,import org.apache.calcite.rel.type.RelDataTypeField;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,49,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,50,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,84,this.jdbcTableType = Preconditions.checkNotNull(jdbcTableType);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,115,return Lists.transform(rowType.getFieldList(),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,116,new Function<RelDataTypeField, Pair<ColumnMetaData.Rep, Integer>>() {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,120,final Class clazz = (Class) typeFactory.getJavaClass(type);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,121,final ColumnMetaData.Rep rep =
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,122,Util.first(ColumnMetaData.Rep.of(clazz),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,123,ColumnMetaData.Rep.OBJECT);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,124,return Pair.of(rep, type.getSqlTypeName().getJdbcOrdinal());
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,121,return new Function1<ResultSet, Function0<Object[]>>() {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,122,public Function0<Object[]> apply(ResultSet resultSet) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,123,try {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,124,return new ObjectArrayRowBuilder(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,125,resultSet,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,126,Pair.left(list).toArray(new ColumnMetaData.Rep[list.size()]),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,129,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,206,CacheBuilder.newBuilder().softValues().build(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,207,new CacheLoader<List<String>, BasicDataSource>() {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,209,BasicDataSource dataSource = new BasicDataSource();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,210,dataSource.setUrl(key.get(0));
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,211,dataSource.setUsername(key.get(1));
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,212,dataSource.setPassword(key.get(2));
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,213,dataSource.setDriverClassName(key.get(3));
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,214,return dataSource;
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,43,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,46,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,47,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,60,private final List<Grouping> groups = Lists.newArrayList();
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,106,return new AccumulatorFactory() {
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,107,public Accumulator get() {
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,108,return new CountAccumulator(call);
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,274,private final Map<Row, AccumulatorList> accumulators = Maps.newHashMap();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,73,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,168,this.filters = Preconditions.checkNotNull(filters);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,169,this.projects = Preconditions.checkNotNull(projects);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,176,return create(cluster, relOptTable, ImmutableList.<RexNode>of(),
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,187,.replaceIfs(RelCollationTraitDef.INSTANCE,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,188,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,189,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,190,if (table != null) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,191,return table.getStatistic().getCollations();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,193,return ImmutableList.of();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,245,super(LogicalFilter.class, RelOptUtil.FILTER_PREDICATE, Convention.NONE,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,276,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,277,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,278,return RelMdCollation.filter(mq, input);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,308,super(LogicalProject.class, RelOptUtil.PROJECT_PREDICATE, Convention.NONE,
core/src/main/java/org/apache/calcite/interpreter/InterpretableRel.java,23,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/interpreter/InterpretableRel.java,40,Maps.newLinkedHashMap();
core/src/main/java/org/apache/calcite/interpreter/InterpretableRel.java,43,public final Map<RelNode, List<Sink>> relSinks = Maps.newHashMap();
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,45,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,70,this.dataContext = Preconditions.checkNotNull(dataContext);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,339,this.enumerator = Preconditions.checkNotNull(enumerator);
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,20,import org.apache.calcite.adapter.enumerable.PhysType;
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,43,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,53,import java.lang.reflect.Type;
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,88,Pair.<Expression, PhysType>of(
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,93,final Function1<String, RexToLixTranslator.InputGetter> correlates =
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,94,new Function1<String, RexToLixTranslator.InputGetter>() {
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,95,public RexToLixTranslator.InputGetter apply(String a0) {
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,96,throw new UnsupportedOperationException();
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,120,final List<MemberDeclaration> declarations = Lists.newArrayList();
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,148,ImmutableList.<Type>of(Scalar.class), declarations);
core/src/main/java/org/apache/calcite/interpreter/JoinNode.java,22,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/interpreter/JoinNode.java,59,rightList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,23,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,25,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,29,import java.util.Collections;
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,72,final List<Row> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,76,Collections.sort(list, comparator());
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,95,return comparator(input);
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,105,return new Comparator<Row>() {
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,106,public int compare(Row o1, Row o2) {
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,107,final Comparable c1 = (Comparable) o1.getValues()[x];
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,108,final Comparable c2 = (Comparable) o2.getValues()[x];
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,109,return RelFieldCollation.compare(c1, c2, nullComparison);
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,113,return new Comparator<Row>() {
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,114,public int compare(Row o1, Row o2) {
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,115,final Comparable c1 = (Comparable) o1.getValues()[x];
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,116,final Comparable c2 = (Comparable) o2.getValues()[x];
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,117,return RelFieldCollation.compare(c2, c1, -nullComparison);
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,23,import org.apache.calcite.linq4j.function.Predicate1;
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,147,rowEnumerable = queryable.select(
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,148,new Function1<Object, Row>() {
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,149,public Row apply(Object o) {
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,150,final Object[] values = new Object[fields.size()];
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,151,for (int i = 0; i < fields.size(); i++) {
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,152,Field field = fields.get(i);
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,153,try {
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,154,values[i] = field.get(o);
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,156,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,159,return new Row(values);
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,273,enumerable = enumerable.where(
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,274,new Predicate1<Row>() {
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,276,context.values = row.getValues();
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,277,Boolean b = (Boolean) condition.execute(context);
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,278,return b != null && b;
core/src/main/java/org/apache/calcite/interpreter/UnionNode.java,22,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/interpreter/UnionNode.java,46,final Set<Row> rows = rel.all ? null : Sets.<Row>newHashSet();
core/src/main/java/org/apache/calcite/interpreter/ValuesNode.java,24,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/interpreter/ValuesNode.java,45,final List<RexNode> nodes = Lists.newArrayList();
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,45,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,66,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,70,import java.sql.PreparedStatement;
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,123,Preconditions.checkNotNull(rootSchema != null
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,156,return iface.cast(
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,157,new RelRunner() {
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,158,public PreparedStatement prepare(RelNode rel) {
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,159,try {
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,160,return prepareStatement_(CalcitePrepare.Query.of(rel),
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,161,ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY,
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,162,getHoldability());
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,267,Map<String, Object> map = Maps.newLinkedHashMap();
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,315,final Map<Integer, CalciteServerStatement> statementMap = Maps.newHashMap();
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,430,this.connection = Preconditions.checkNotNull(connection);
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,490,this.connection = Preconditions.checkNotNull(connection);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,22,import org.apache.calcite.avatica.AvaticaParameter;
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,39,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,43,import org.apache.calcite.rel.type.RelDataTypeField;
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,57,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,93,return new Predicate1<T>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,94,public boolean apply(T v1) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,95,return regex.matcher(v1.getName()).matches();
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,105,return new Predicate1<String>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,106,public boolean apply(String v1) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,107,return regex.matcher(v1).matches();
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,179,return createResultSet(Collections.<String, Object>emptyMap(),
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,188,return createResultSet(Collections.<String, Object>emptyMap(), columns,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,200,ImmutableList.<AvaticaParameter>of(), internalParameters, null,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,257,typeFilter = new Predicate1<MetaTable>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,258,public boolean apply(MetaTable v1) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,259,return typeList.contains(v1.tableType);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,266,.selectMany(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,267,new Function1<MetaSchema, Enumerable<MetaTable>>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,268,public Enumerable<MetaTable> apply(MetaSchema schema) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,269,return tables(schema, matcher(tableNamePattern));
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,320,.selectMany(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,321,new Function1<MetaSchema, Enumerable<MetaTable>>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,322,public Enumerable<MetaTable> apply(MetaSchema schema) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,323,return tables(schema, tableNameMatcher);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,326,.selectMany(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,327,new Function1<MetaTable, Enumerable<MetaColumn>>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,328,public Enumerable<MetaColumn> apply(MetaTable schema) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,329,return columns(schema);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,374,.select(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,375,new Function1<CalciteSchema, MetaSchema>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,376,public MetaSchema apply(CalciteSchema calciteSchema) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,377,return new CalciteMetaSchema(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,378,calciteSchema,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,380,calciteSchema.getName());
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,383,.orderBy(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,384,new Function1<MetaSchema, Comparable>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,385,public Comparable apply(MetaSchema metaSchema) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,386,return (Comparable) FlatLists.of(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,387,Util.first(metaSchema.tableCatalog, ""),
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,388,metaSchema.tableSchem);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,395,.selectMany(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,396,new Function1<MetaSchema, Enumerable<MetaTable>>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,397,public Enumerable<MetaTable> apply(MetaSchema schema) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,398,return tables(schema, Functions.<String>truePredicate1());
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,406,.select(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,407,new Function1<String, MetaTable>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,408,public MetaTable apply(String name) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,409,final Table table =
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,410,schema.calciteSchema.getTable(name, true).getTable();
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,411,return new CalciteMetaTable(table,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,412,schema.tableCatalog,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,413,schema.tableSchem,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,414,name);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,421,.select(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,422,new Function1<Map.Entry<String, Table>, MetaTable>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,423,public MetaTable apply(Map.Entry<String, Table> pair) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,424,final Table table = pair.getValue();
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,425,return new CalciteMetaTable(table,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,426,schema.tableCatalog,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,427,schema.tableSchem,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,428,pair.getKey());
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,437,.where(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,438,new Predicate1<MetaTable>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,439,public boolean apply(MetaTable v1) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,440,return matcher.apply(v1.getName());
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,482,.select(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,483,new Function1<RelDataTypeField, MetaColumn>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,484,public MetaColumn apply(RelDataTypeField field) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,485,final int precision =
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,490,: -1;
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,491,return new MetaColumn(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,492,table.tableCat,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,493,table.tableSchem,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,494,table.tableName,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,495,field.getName(),
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,496,field.getType().getSqlTypeName().getJdbcOrdinal(),
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,497,field.getType().getFullTypeString(),
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,498,precision,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,501,: null,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,502,10,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,504,? DatabaseMetaData.columnNullable
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,505,: DatabaseMetaData.columnNoNulls,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,506,precision,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,507,field.getIndex() + 1,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,508,field.getType().isNullable() ? "YES" : "NO");
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,677,this.calciteTable = Preconditions.checkNotNull(calciteTable);
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,63,Function0<CalcitePrepare> DEFAULT_FACTORY =
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,64,new Function0<CalcitePrepare>() {
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,65,public CalcitePrepare apply() {
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,66,return new CalcitePrepareImpl();
core/src/main/java/org/apache/calcite/jdbc/CalciteResultSet.java,28,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/jdbc/CalciteResultSet.java,58,resultSink = new Handler.ResultSink() {
core/src/main/java/org/apache/calcite/jdbc/CalciteResultSet.java,59,public void toBeCompleted() {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,139,return new TableEntryImpl(this, name, table, ImmutableList.<String>of());
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,144,return add(tableName, table, ImmutableList.<String>of());
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,484,this.schema = Preconditions.checkNotNull(schema);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,485,this.name = Preconditions.checkNotNull(name);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,501,this.sqls = Preconditions.checkNotNull(sqls);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,640,this.table = Preconditions.checkNotNull(table);
core/src/main/java/org/apache/calcite/jdbc/JavaRecordType.java,22,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/jdbc/JavaRecordType.java,38,this.clazz = Preconditions.checkNotNull(clazz);
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,38,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,39,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,228,new Function<RelDataTypeField, RelDataType>() {
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,229,public RelDataType apply(RelDataTypeField a0) {
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,350,this.syntheticType = Preconditions.checkNotNull(syntheticType);
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,351,this.name = Preconditions.checkNotNull(name);
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,352,this.type = Preconditions.checkNotNull(type);
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,19,import org.apache.calcite.linq4j.Enumerable;
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,21,import org.apache.calcite.linq4j.function.Function1;
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,36,ImmutableMap.<String, Table>of(
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,42,return meta.tables(catalog).selectMany(
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,43,new Function1<MetaTable, Enumerable<MetaColumn>>() {
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,44,public Enumerable<MetaColumn> apply(MetaTable table) {
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,45,return meta.columns(table);
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,39,.build(
core/src/main/java/org/apache/calcite/materialize/Lattice.java,54,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,59,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,61,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,73,private static final Function<Column, String> GET_ALIAS =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,74,new Function<Column, String>() {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,75,public String apply(Column input) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,76,return input.alias;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,80,private static final Function<Column, Integer> GET_ORDINAL =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,81,new Function<Column, Integer>() {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,82,public Integer apply(Column input) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,83,return input.ordinal;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,99,private final Function<Integer, Column> toColumnFunction =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,100,new Function<Integer, Column>() {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,101,public Column apply(Integer input) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,102,return columns.get(input);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,105,private final Function<AggregateCall, Measure> toMeasureFunction =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,106,new Function<AggregateCall, Measure>() {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,107,public Measure apply(AggregateCall input) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,108,return new Measure(input.getAggregation(),
core/src/main/java/org/apache/calcite/materialize/Lattice.java,109,Lists.transform(input.getArgList(), toColumnFunction));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,119,this.nodes = Preconditions.checkNotNull(nodes);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,120,this.columns = Preconditions.checkNotNull(columns);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,125,this.defaultMeasures = Preconditions.checkNotNull(defaultMeasures);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,126,this.tiles = Preconditions.checkNotNull(tiles);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,139,List<String> nameList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,261,final Set<String> columnNames = Sets.newHashSet();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,354,final List<Table> tables = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,366,return Lists.transform(aggCallList, toMeasureFunction);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,425,this.scan = Preconditions.checkNotNull(scan);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,440,new DirectedGraph.EdgeFactory<RelNode, Edge>() {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,441,public Edge createEdge(RelNode source, RelNode target) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,442,return new Edge(source, target);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,446,final List<IntPair> pairs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,467,this.agg = Preconditions.checkNotNull(agg);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,505,return Lists.transform(args, GET_ORDINAL);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,533,this.table = Preconditions.checkNotNull(table);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,534,this.column = Preconditions.checkNotNull(column);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,535,this.alias = Preconditions.checkNotNull(alias);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,563,private final List<Node> nodes = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,578,this.rootSchema = Preconditions.checkNotNull(schema.root());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,585,List<RelNode> relNodes = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,586,List<int[][]> tempLinks = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,590,List<String> aliases = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,612,final Map<RelNode, Node> map = Maps.newIdentityHashMap();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,840,private final List<Measure> measureBuilder = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,841,private final List<Column> dimensionListBuilder = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/MaterializationActor.java,24,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/materialize/MaterializationActor.java,37,final Map<MaterializationKey, Materialization> keyMap = Maps.newHashMap();
core/src/main/java/org/apache/calcite/materialize/MaterializationActor.java,39,final Map<QueryKey, MaterializationKey> keyBySql = Maps.newHashMap();
core/src/main/java/org/apache/calcite/materialize/MaterializationActor.java,41,final Map<TileKey, MaterializationKey> keyByTile = Maps.newHashMap();
core/src/main/java/org/apache/calcite/materialize/MaterializationActor.java,77,this.rootSchema = Preconditions.checkNotNull(rootSchema);
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,21,import org.apache.calcite.avatica.ColumnMetaData;
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,41,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,45,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,66,new ThreadLocal<MaterializationService>() {
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,68,return new MaterializationService();
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,73,new Comparator<Pair<CalciteSchema.TableEntry, TileKey>>() {
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,74,public int compare(Pair<CalciteSchema.TableEntry, TileKey> o0,
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,75,Pair<CalciteSchema.TableEntry, TileKey> o1) {
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,77,final Table t0 = o0.left.getTable();
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,78,final Table t1 = o1.left.getTable();
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,79,int c = Double.compare(t0.getStatistic().getRowCount(),
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,80,t1.getStatistic().getRowCount());
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,81,if (c != 0) {
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,82,return c;
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,85,return o0.left.name.compareTo(o1.left.name);
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,204,new TileKey(lattice, groupSet, ImmutableList.<Lattice.Measure>of());
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,264,final List<TileKey> obsolete = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,265,final LinkedHashSet<Lattice.Measure> measureSet = Sets.newLinkedHashSet();
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,373,Lists.transform(calciteSignature.columns,
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,374,new Function<ColumnMetaData, ColumnMetaData.Rep>() {
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,375,public ColumnMetaData.Rep apply(ColumnMetaData column) {
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,376,return column.type.rep;
core/src/main/java/org/apache/calcite/materialize/SqlLatticeStatisticProvider.java,41,.createTable(lattice.rootSchema, sql, ImmutableList.<String>of());
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,19,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,22,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,47,private static final Function<Attribute, Lattice.Column> TO_COLUMN =
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,48,new Function<Attribute, Lattice.Column>() {
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,49,public Lattice.Column apply(Attribute input) {
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,50,return ((AttributeImpl) input).column;
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,207,return lattice.getRowCount(Lists.transform(attributes, TO_COLUMN));
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,425,return Iterables.filter(classes,
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,428,return clazz.isAssignableFrom(input);
core/src/main/java/org/apache/calcite/plan/Contexts.java,21,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/plan/Contexts.java,23,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/plan/Contexts.java,85,final List<Context> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/Contexts.java,119,this.target = Preconditions.checkNotNull(target);
core/src/main/java/org/apache/calcite/plan/Contexts.java,142,this.contexts = Preconditions.checkNotNull(contexts);
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,19,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,43,this.traits = Preconditions.checkNotNull(traits);
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,62,traitList.toArray(new RelMultipleTrait[traitList.size()]);
core/src/main/java/org/apache/calcite/plan/RelOptCluster.java,29,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/plan/RelOptCluster.java,77,this.planner = Preconditions.checkNotNull(planner);
core/src/main/java/org/apache/calcite/plan/RelOptCluster.java,78,this.typeFactory = Preconditions.checkNotNull(typeFactory);
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,44,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,46,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,159,final List<RexNode> conditions = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,183,final List<RexNode> conditions = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,221,this.scan = Preconditions.checkNotNull(scan);
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,23,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,24,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,25,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,26,import com.google.common.base.Predicates;
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,98,this.operand = Preconditions.checkNotNull(operand);
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,99,this.relBuilderFactory = Preconditions.checkNotNull(relBuilderFactory);
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,127,return new RelOptRuleOperand(clazz, null, Predicates.<R>alwaysTrue(),
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,146,return new RelOptRuleOperand(clazz, trait, Predicates.<R>alwaysTrue(),
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,162,public static <R extends RelNode> RelOptRuleOperand operand(
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,182,public static <R extends RelNode> RelOptRuleOperand operand(
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,564,new Function<RelNode, RelNode>() {
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,565,public RelNode apply(RelNode rel) {
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,566,return convert(rel, rel.getTraitSet().replace(trait));
core/src/main/java/org/apache/calcite/plan/RelOptRuleCall.java,224,transformTo(rel, ImmutableMap.<RelNode, RelNode>of());
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperand.java,22,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperand.java,23,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperand.java,98,this.clazz = Preconditions.checkNotNull(clazz);
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperand.java,101,this.predicate = Preconditions.checkNotNull((Predicate) predicate);
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperand.java,195,return predicate.apply(rel);
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperandChildren.java,35,ImmutableList.<RelOptRuleOperand>of());
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperandChildren.java,40,ImmutableList.<RelOptRuleOperand>of());
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,85,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,86,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,112,public static final double EPSILON = 1.0e-5;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,116,public static final Predicate<Filter> FILTER_PREDICATE =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,119,return !(B
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,121,|| RexOver.containsOver(filter.getCondition()));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,127,public static final Predicate<Project> PROJECT_PREDICATE =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,130,return !(B
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,132,|| RexOver.containsOver(project.getProjects(), null));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,138,public static final Predicate<Calc> CALC_PREDICATE =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,141,return !(B
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,143,|| calc.getProgram().containsAggs());
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,147,static final boolean B = false;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,149,private static final Function<RelDataTypeField, RelDataType> GET_TYPE =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,150,new Function<RelDataTypeField, RelDataType>() {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,151,public RelDataType apply(RelDataTypeField field) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,152,return field.getType();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,257,return Lists.transform(type.getFieldList(), GET_TYPE);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,525,Pair.<RexNode, String>of(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,729,ImmutableList.<AggregateCall>of());
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1556,Pair.<RexNode, String>of(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2163,final List<RexNode> filtersToRemove = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2435,List<BitSet> newProjFields = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2466,Lists.transform(newProjFields, ImmutableBitSet.FROM_BIT_SET),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2925,final List<String> outputNameList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2926,final List<RexNode> exprList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3029,return Pair.<RexNode, String>of(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3053,return Pair.<RexNode, String>of(
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,62,.build(
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,63,new CacheLoader<T, T>() {
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,65,return key;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,22,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,554,new RelTraitSet(this, traits.toArray(new RelTrait[traits.size()]));
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,67,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,69,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,70,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,75,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,149,ImmutableList.<UnifyRule>of(
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,448,List<RelNode> sub = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,469,final Map<MutableRel, MutableRel> map = Maps.newHashMap();
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,482,final List<Replacement> attempted = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,483,List<List<Replacement>> substitutions = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,892,this.rule = Preconditions.checkNotNull(rule);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,893,this.query = Preconditions.checkNotNull(query);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,894,this.target = Preconditions.checkNotNull(target);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,895,this.slots = Preconditions.checkNotNull(slots);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1287,new Function<AggregateCall, AggregateCall>() {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1288,public AggregateCall apply(AggregateCall call) {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1289,return call.copy(Mappings.apply2(mapping, call.getArgList()),
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1290,Mappings.apply(mapping, call.filterArg));
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1304,final List<Integer> projects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1328,final List<AggregateCall> aggregateCalls = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,2394,private static final Predicate<LogicalFilter> PREDICATE =
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,2397,return input.getCondition() instanceof RexInputRef;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,2406,operand(LogicalFilter.class, null, PREDICATE,
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,136,Util.first(onCopyHook, Functions.<RelNode, RelNode, Void>ignore2());
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,505,bindings.toArray(new RelNode[bindings.size()]),
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,22,import org.apache.calcite.rel.metadata.RelMetadataQuery;
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,35,return new UnboundMetadata<M>() {
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,36,public M bind(RelNode rel, RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,37,if (!(rel instanceof HepRelVertex)) {
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,38,return null;
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,40,HepRelVertex vertex = (HepRelVertex) rel;
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,41,final RelNode rel2 = vertex.getCurrentRel();
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,42,UnboundMetadata<M> function =
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,43,rel.getCluster().getMetadataProvider().apply(rel2.getClass(),
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,44,metadataClass);
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,45,return function.bind(rel2, mq);
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,20,import org.apache.calcite.linq4j.function.Predicate1;
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,44,import java.util.Iterator;
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,388,return new Iterable<RelNode>() {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,389,public Iterator<RelNode> iterator() {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,391,.where(
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,392,new Predicate1<RelNode>() {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,393,public boolean apply(RelNode v1) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,394,return v1.getTraitSet().satisfies(traitSet);
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,397,.iterator();
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,38,import java.util.Collections;
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,239,Collections.sort(
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,240,boostRemovals,
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,241,new Comparator<RelSubset>() {
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,242,public int compare(RelSubset o1, RelSubset o2) {
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,243,int o1children = countChildren(o1);
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,244,int o2children = countChildren(o2);
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,245,int c = compare(o1children, o2children);
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,246,if (c == 0) {
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,248,c = compare(o1.getId(), o2.getId());
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,250,return c;
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,253,private int compare(int i1, int i2) {
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,254,return (i1 < i2) ? -1 : ((i1 == i2) ? 0 : 1);
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,257,private int countChildren(RelSubset subset) {
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,258,int count = 0;
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,259,for (RelNode rel : subset.getRels()) {
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,260,count += rel.getInputs().size();
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,262,return count;
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,467,Collections.sort(matchList, MATCH_COMPARATOR);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,86,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,87,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,90,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,98,import java.util.Comparator;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,258,Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,262,Maps.newLinkedHashMap();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,311,return new VolcanoPlannerPhaseRuleMappingInitializer() {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,312,public void initialize(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,313,Map<VolcanoPlannerPhase, Set<String>> phaseRuleMap) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,315,phaseRuleMap.get(VolcanoPlannerPhase.PRE_PROCESS_MDR).add("xxx");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,316,phaseRuleMap.get(VolcanoPlannerPhase.PRE_PROCESS).add("xxx");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,317,phaseRuleMap.get(VolcanoPlannerPhase.CLEANUP).add("xxx");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,863,final Set<RelSubset> subsets = Sets.newHashSet();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1352,new Comparator<RelSet>() {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1353,public int compare(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1354,RelSet o1,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1355,RelSet o2) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1356,return o1.id - o2.id;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,22,import org.apache.calcite.rel.metadata.RelMetadataQuery;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,40,return new UnboundMetadata<M>() {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,41,public M bind(RelNode rel, RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,42,final RelSubset subset = (RelSubset) rel;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,43,final RelMetadataProvider provider =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,44,rel.getCluster().getMetadataProvider();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,54,if (subset.best != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,55,final UnboundMetadata<M> function =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,56,provider.apply(subset.best.getClass(), metadataClass);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,57,if (function != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,58,final M metadata = function.bind(subset.best, mq);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,59,if (metadata != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,60,return metadata;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,77,if (subset.set.inMetadataQuery) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,78,return null;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,81,subset.set.inMetadataQuery = true;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,82,try {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,83,for (RelNode relCandidate : subset.set.rels) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,84,final UnboundMetadata<M> function =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,85,provider.apply(relCandidate.getClass(), metadataClass);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,86,if (function != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,87,final M result = function.bind(relCandidate, mq);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,88,if (result != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,89,return result;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,94,subset.set.inMetadataQuery = false;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,98,return null;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,85,ImmutableMap.<RelNode, List<RelNode>>of());
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,36,import org.apache.calcite.sql.SqlOperatorBinding;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,55,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,56,import com.google.common.collect.Collections2;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,131,final List<Function> functions2 = Lists.newArrayList();
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,236,if (functions.isEmpty()) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,237,return;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,239,operatorList.addAll(
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,240,Collections2.transform(functions,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,241,new com.google.common.base.Function<Function, SqlOperator>() {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,242,public SqlOperator apply(Function function) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,243,return toOp(opName, function);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,257,final Predicate<Integer> optional =
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,260,return function.getParameters().get(input).isOptional();
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,264,OperandTypes.family(typeFamilies, optional);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,287,return new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,288,public RelDataType inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,296,return new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,297,public RelDataType inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,298,final RelDataType type = function.getReturnType(typeFactory);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,305,return Lists.transform(types,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,306,new com.google.common.base.Function<RelDataType, RelDataType>() {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,307,public RelDataType apply(RelDataType type) {
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,51,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,126,final List<Callback> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,19,import org.apache.calcite.DataContext;
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,39,import org.apache.calcite.linq4j.Enumerable;
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,135,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,461,return Collections.<Function1<Context, RelOptPlanner>>singletonList(
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,462,new Function1<Context, RelOptPlanner>() {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,463,public RelOptPlanner apply(Context context) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,464,return createPlanner(context, null, null);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,616,ImmutableList.<AvaticaParameter>of(),
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,617,ImmutableMap.<String, Object>of(),
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,621,ImmutableList.<RelCollation>of(),
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,622,-1,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,623,new Bindable<T>() {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,624,public Enumerable<T> bind(DataContext dataContext) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,625,return Linq4j.asEnumerable(list);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,710,ImmutableList.<AvaticaParameter>of(),
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,711,ImmutableMap.<String, Object>of(), null,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,712,ImmutableList.<ColumnMetaData>of(), Meta.CursorFactory.OBJECT,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,780,: ImmutableList.<RelCollation>of(),
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,983,Maps.newLinkedHashMap();
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1010,return prepare_(
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1011,new Supplier<RelNode>() {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1012,public RelNode get() {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1013,final RelOptCluster cluster =
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1014,prepare.createCluster(planner, rexBuilder);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1016,.translate(queryable);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1022,return prepare_(
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1023,new Supplier<RelNode>() {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1024,public RelNode get() {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1025,return rel;
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1214,: ImmutableList.<Prepare.Materialization>of();
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1239,return new Bindable() {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1240,public Enumerable bind(DataContext dataContext) {
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,105,ImmutableList.<String>of(),
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,113,ImmutableList.<String>of(),
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,23,import org.apache.calcite.plan.RelOptSchema;
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,134,new Frameworks.PlannerAction<Void>() {
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,135,public Void apply(RelOptCluster cluster, RelOptSchema relOptSchema,
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,136,SchemaPlus rootSchema) {
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,137,Util.discard(rootSchema); // use our own defaultSchema
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,138,typeFactory = (JavaTypeFactory) cluster.getTypeFactory();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,139,planner = cluster.getPlanner();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,140,planner.setExecutor(executor);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,141,return null;
core/src/main/java/org/apache/calcite/prepare/Prepare.java,59,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/prepare/Prepare.java,449,Collections.<String>nCopies(4, null));
core/src/main/java/org/apache/calcite/prepare/Prepare.java,517,this.rowType = Preconditions.checkNotNull(rowType);
core/src/main/java/org/apache/calcite/prepare/Prepare.java,518,this.parameterRowType = Preconditions.checkNotNull(parameterRowType);
core/src/main/java/org/apache/calcite/prepare/Prepare.java,519,this.fieldOrigins = Preconditions.checkNotNull(fieldOrigins);
core/src/main/java/org/apache/calcite/prepare/Prepare.java,521,this.rootRel = Preconditions.checkNotNull(rootRel);
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,54,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,55,import com.google.common.base.Functions;
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,56,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,90,this.rowType = Preconditions.checkNotNull(rowType);
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,103,final Function<Class, Expression> expressionFunction =
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,104,(Function) Functions.constant(expression);
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,106,expressionFunction, null);
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,112,Function<Class, Expression> expressionFunction =
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,113,getClassExpressionFunction(schemaPlus, Util.last(path).left, table);
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,115,expressionFunction, table.getStatistic().getRowCount());
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,121,Function<Class, Expression> expressionFunction =
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,122,getClassExpressionFunction(tableEntry, table);
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,124,table, expressionFunction, rowCount);
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,137,return new Function<Class, Expression>() {
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,138,public Expression apply(Class clazz) {
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,139,return queryableTable.getExpression(schema, tableName, clazz);
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,145,return new Function<Class, Expression>() {
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,146,public Expression apply(Class clazz) {
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,147,return Schemas.tableExpression(schema, Object[].class, tableName,
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,148,table.getClass());
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,155,return new Function<Class, Expression>() {
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,156,public Expression apply(Class input) {
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,157,throw new UnsupportedOperationException();
core/src/main/java/org/apache/calcite/rel/RelCollations.java,22,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/RelCollations.java,40,new RelCollationImpl(ImmutableList.<RelFieldCollation>of()));
core/src/main/java/org/apache/calcite/rel/RelCollations.java,114,new Function<RelFieldCollation, Integer>() {
core/src/main/java/org/apache/calcite/rel/RelCollations.java,115,public Integer apply(RelFieldCollation input) {
core/src/main/java/org/apache/calcite/rel/RelCollations.java,116,return input.getFieldIndex();
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,26,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,88,this.type = Preconditions.checkNotNull(type);
core/src/main/java/org/apache/calcite/rel/RelFieldCollation.java,21,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/RelFieldCollation.java,198,this.direction = Preconditions.checkNotNull(direction);
core/src/main/java/org/apache/calcite/rel/RelFieldCollation.java,199,this.nullDirection = Preconditions.checkNotNull(nullDirection);
core/src/main/java/org/apache/calcite/rel/RelRoot.java,28,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/RelRoot.java,95,this.collation = Preconditions.checkNotNull(collation);
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,27,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,28,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,29,import com.google.common.base.Predicates;
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,72,this.inTrait = Preconditions.checkNotNull(in);
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,73,this.outTrait = Preconditions.checkNotNull(out);
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,48,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,50,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,76,public static final Predicate<Aggregate> IS_SIMPLE =
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,79,return input.getGroupType() == Group.SIMPLE;
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,131,this.groupSet = Preconditions.checkNotNull(groupSet);
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,337,final Set<String> containedNames = Sets.newHashSet();
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,28,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,89,this.type = Preconditions.checkNotNull(type);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,91,this.aggFunction = Preconditions.checkNotNull(aggFunction);
core/src/main/java/org/apache/calcite/rel/core/EquiJoin.java,25,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/core/EquiJoin.java,42,this.leftKeys = Preconditions.checkNotNull(leftKeys);
core/src/main/java/org/apache/calcite/rel/core/EquiJoin.java,43,this.rightKeys = Preconditions.checkNotNull(rightKeys);
core/src/main/java/org/apache/calcite/rel/core/Exchange.java,33,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/core/Exchange.java,61,this.distribution = Preconditions.checkNotNull(distribution);
core/src/main/java/org/apache/calcite/rel/core/Join.java,38,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/core/Join.java,105,this.condition = Preconditions.checkNotNull(condition);
core/src/main/java/org/apache/calcite/rel/core/Join.java,107,this.joinType = Preconditions.checkNotNull(joinType);
core/src/main/java/org/apache/calcite/rel/core/JoinInfo.java,28,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/core/JoinInfo.java,50,this.leftKeys = Preconditions.checkNotNull(leftKeys);
core/src/main/java/org/apache/calcite/rel/core/JoinInfo.java,51,this.rightKeys = Preconditions.checkNotNull(rightKeys);
core/src/main/java/org/apache/calcite/rel/core/JoinInfo.java,128,this.remaining = Preconditions.checkNotNull(remaining);
core/src/main/java/org/apache/calcite/rel/core/Project.java,44,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/core/Project.java,195,if (false && !Util.isDistinct(
core/src/main/java/org/apache/calcite/rel/core/Project.java,196,Lists.transform(exps,
core/src/main/java/org/apache/calcite/rel/core/Project.java,197,new Function<RexNode, Object>() {
core/src/main/java/org/apache/calcite/rel/core/Project.java,198,public Object apply(RexNode a0) {
core/src/main/java/org/apache/calcite/rel/core/Project.java,199,return a0.toString();
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,38,import org.apache.calcite.rel.type.RelDataTypeField;
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,268,semiJoinDone, ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,28,import org.apache.calcite.rel.type.RelDataTypeField;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,75,ImmutableSet.<CorrelationId>of(),
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,123,ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/rel/core/SortExchange.java,29,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/core/SortExchange.java,60,this.collation = Preconditions.checkNotNull(collation);
core/src/main/java/org/apache/calcite/rel/core/TableFunctionScan.java,98,ImmutableSet.<RelColumnMapping>of());
core/src/main/java/org/apache/calcite/rel/core/Values.java,35,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/core/Values.java,36,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/core/Values.java,50,private static final Function<ImmutableList<RexLiteral>, Object> F =
core/src/main/java/org/apache/calcite/rel/core/Values.java,51,new Function<ImmutableList<RexLiteral>, Object>() {
core/src/main/java/org/apache/calcite/rel/core/Values.java,52,public Object apply(ImmutableList<RexLiteral> tuple) {
core/src/main/java/org/apache/calcite/rel/core/Values.java,53,String s = tuple.toString();
core/src/main/java/org/apache/calcite/rel/core/Values.java,54,assert s.startsWith("[");
core/src/main/java/org/apache/calcite/rel/core/Values.java,55,assert s.endsWith("]");
core/src/main/java/org/apache/calcite/rel/core/Values.java,56,return "{ " + s.substring(1, s.length() - 1) + " }";
core/src/main/java/org/apache/calcite/rel/core/Values.java,67,public static final Predicate<? super Values> IS_EMPTY =
core/src/main/java/org/apache/calcite/rel/core/Values.java,70,return values.getTuples().isEmpty();
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,25,import org.apache.calcite.rel.RelDistribution;
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,39,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,98,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,99,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,100,return RelMdCollation.calc(mq, input, program);
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,104,new Supplier<RelDistribution>() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,105,public RelDistribution get() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,106,return RelMdDistribution.calc(mq, input, program);
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,22,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,24,import org.apache.calcite.rel.RelDistribution;
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,37,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,38,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,41,import java.util.List;
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,72,this.variablesSet = Preconditions.checkNotNull(variablesSet);
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,81,this(cluster, traitSet, child, condition, ImmutableSet.<CorrelationId>of());
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,90,ImmutableSet.<CorrelationId>of());
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,103,return create(input, condition, ImmutableSet.<CorrelationId>of());
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,113,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,114,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,115,return RelMdCollation.filter(mq, input);
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,119,new Supplier<RelDistribution>() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,120,public RelDistribution get() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,121,return RelMdDistribution.filter(mq, input);
core/src/main/java/org/apache/calcite/rel/logical/LogicalJoin.java,32,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/logical/LogicalJoin.java,100,this.systemFieldList = Preconditions.checkNotNull(systemFieldList);
core/src/main/java/org/apache/calcite/rel/logical/LogicalJoin.java,118,ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/rel/logical/LogicalJoin.java,136,input.getExpression("condition"), ImmutableSet.<CorrelationId>of(),
core/src/main/java/org/apache/calcite/rel/logical/LogicalJoin.java,138,ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/rel/logical/LogicalJoin.java,164,ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/rel/logical/LogicalJoin.java,171,joinType, false, ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,22,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,37,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,118,.replaceIfs(
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,119,RelCollationTraitDef.INSTANCE,
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,120,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,121,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,122,return RelMdCollation.project(mq, input, projects);
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableScan.java,23,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableScan.java,30,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableScan.java,101,.replaceIfs(RelCollationTraitDef.INSTANCE,
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableScan.java,102,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableScan.java,103,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableScan.java,104,if (table != null) {
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableScan.java,105,return table.getStatistic().getCollations();
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableScan.java,107,return ImmutableList.of();
core/src/main/java/org/apache/calcite/rel/logical/LogicalValues.java,22,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/rel/logical/LogicalValues.java,34,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/rel/logical/LogicalValues.java,87,.replaceIfs(
core/src/main/java/org/apache/calcite/rel/logical/LogicalValues.java,88,RelCollationTraitDef.INSTANCE, new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalValues.java,89,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalValues.java,90,return RelMdCollation.values(mq, rowType, tuples);
core/src/main/java/org/apache/calcite/rel/logical/LogicalValues.java,106,ImmutableList.<ImmutableList<RexLiteral>>of());
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,27,import org.apache.calcite.rex.RexFieldCollation;
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,183,new ArrayList<Map.Entry<String, RelDataType>>(
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,184,child.getRowType().getFieldList());
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,22,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,69,return new UnboundMetadata<M>() {
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,70,public M bind(RelNode rel, RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,71,final Metadata metadata = function.bind(rel, mq);
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,72,return metadataClass.cast(
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,73,Proxy.newProxyInstance(metadataClass.getClassLoader(),
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,74,new Class[]{metadataClass},
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,75,new CachingInvocationHandler(metadata)));
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,100,this.metadata = Preconditions.checkNotNull(metadata);
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,23,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,76,return new UnboundMetadata<M>() {
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,77,public M bind(RelNode rel, RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,78,final List<Metadata> metadataList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,79,for (UnboundMetadata<M> function : functions) {
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,80,final Metadata metadata = function.bind(rel, mq);
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,81,if (metadata != null) {
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,82,metadataList.add(metadata);
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,85,return metadataClass.cast(
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,86,Proxy.newProxyInstance(metadataClass.getClassLoader(),
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,87,new Class[]{metadataClass},
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,88,new ChainedInvocationHandler(metadataList)));
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,37,public static final UnboundMetadata<Metadata> DUMMY =
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,38,new UnboundMetadata<Metadata>() {
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,39,public Metadata bind(RelNode rel, RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,40,return null;
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,53,return new CacheLoader<Pair<Class<RelNode>, Class<Metadata>>,
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,54,UnboundMetadata<Metadata>>() {
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,56,Pair<Class<RelNode>, Class<Metadata>> key) throws Exception {
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,57,final UnboundMetadata<Metadata> function =
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,58,provider.apply(key.left, key.right);
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,60,return function != null ? function : DUMMY;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,34,import java.lang.reflect.InvocationHandler;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,151,final UnboundMetadata function =
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,152,new UnboundMetadata() {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,153,public Metadata bind(final RelNode rel,
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,154,final RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,155,return (Metadata) Proxy.newProxyInstance(
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,158,new InvocationHandler() {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,159,public Object invoke(Object proxy, Method method,
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,160,Object[] args) throws Throwable {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,167,if (method.equals(
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,168,BuiltInMethod.METADATA_REL.method)) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,169,return rel;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,171,if (method.equals(
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,172,BuiltInMethod.OBJECT_TO_STRING.method)) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,174,+ ")";
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,176,int i = methods.indexOf(method);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,177,if (i < 0) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,178,throw new AssertionError("not handled: " + method
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,179,+ " for " + rel);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,181,final Method handlerMethod = handlerMethods.get(i);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,182,if (handlerMethod == null) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,183,throw new AssertionError("not handled: " + method
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,184,+ " for " + rel);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,186,final Object[] args1;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,187,final List key;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,188,if (args == null) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,189,args1 = new Object[]{rel, mq};
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,190,key = FlatLists.of(rel, method);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,192,args1 = new Object[args.length + 2];
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,193,args1[0] = rel;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,194,args1[1] = mq;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,195,System.arraycopy(args, 0, args1, 2, args.length);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,197,final Object[] args2 = args1.clone();
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,198,args2[1] = method; // replace RelMetadataQuery with method
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,199,for (int j = 0; j < args2.length; j++) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,200,if (args2[j] == null) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,201,args2[j] = NullSentinel.INSTANCE;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,204,args2[j] = args2[j].toString();
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,207,key = FlatLists.copyOf(args2);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,210,throw CyclicMetadataException.INSTANCE;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,212,try {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,213,return handlerMethod.invoke(target, args1);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,215,| UndeclaredThrowableException e) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,50,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,53,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,161,Preconditions.checkNotNull(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,294,final List<RelCollation> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,297,Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,21,import org.apache.calcite.linq4j.function.Predicate1;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,57,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,62,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,418,exprFields = Maps.newHashMap();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,449,equivalence = Maps.newTreeMap();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,465,Lists.transform(exprs,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,466,new Function<RexNode, Void>() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,467,public Void apply(RexNode input) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,468,return input.accept(eF);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,594,return new Iterable<Mapping>() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,595,public Iterator<Mapping> iterator() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,596,ImmutableBitSet fields = exprFields.get(predicate.toString());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,597,if (fields.cardinality() == 0) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,600,return new ExprsItr(fields);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,614,exprs = Linq4j.asEnumerable(exprs).where(new Predicate1<RexNode>() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,615,public boolean apply(RexNode expr) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,616,return expr != null;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdSize.java,46,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdSize.java,217,List<List<Double>> inputColumnSizeList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,65,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,108,this.dialect = Preconditions.checkNotNull(dialect);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,614,POS, operands.toArray(new SqlNode[operands.size()]));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,566,final List<RexNode> conditions = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,703,null, ImmutableList.<AggregateCall>of()));
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,34,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,36,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,89,new Function<Integer, Integer>() {
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,90,public Integer apply(Integer a0) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,91,return newGroupSet.indexOf(a0);
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,126,final List<AggregateCall> topAggCallList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,47,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,48,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,50,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,82,operand(aggregateClass, null, Aggregate.IS_SIMPLE,
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,83,operand(joinClass, any())), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,169,final List<Integer> leftKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,170,final List<Integer> rightKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,239,Preconditions.checkNotNull(
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,272,new Function<Integer, Integer>() {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,273,public Integer apply(Integer a0) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,274,return map.get(a0);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,298,Preconditions.checkNotNull(
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,394,return new SqlSplittableAggFunction.Registry<E>() {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,395,public int register(E e) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,396,int i = list.indexOf(e);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,397,if (i < 0) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,398,i = list.size();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,399,list.add(e);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,401,return i;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,33,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,75,final List<Integer> newKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,133,final List<Integer> posList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,92,operand(aggregateClass, null, Aggregate.IS_SIMPLE,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,43,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,44,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,141,final List<AggregateCall> newCalls = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,142,final Map<AggregateCall, RexNode> aggCallMapping = Maps.newHashMap();
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,144,final List<RexNode> projList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,174,Collections.<String>nCopies(extraArgCount, null)));
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,47,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,61,operand(Aggregate.class, null, Aggregate.IS_SIMPLE,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,67,operand(Aggregate.class, null, Aggregate.IS_SIMPLE,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,146,final List<AggregateCall> aggCalls = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,223,List<Integer> newArgs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,54,operand(aggregateClass, null, Aggregate.IS_SIMPLE,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,42,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,150,final List<AggregateCall> newCalls = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/CalcRelSplitter.java,127,final RexNode[] exprs = exprList.toArray(new RexNode[exprList.size()]);
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,35,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,94,final List<RexNode> pushedConditions = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,95,final List<RexNode> remainingConditions = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,36,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,38,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,52,public static final Predicate TRUE_PREDICATE =
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,53,new Predicate() {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,54,public boolean apply(Join join, JoinRelType joinType, RexNode exp) {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,55,return true;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,93,this.predicate = Preconditions.checkNotNull(predicate);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,140,: Lists.<RexNode>newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,35,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,52,public static final Predicate<TableScan> PREDICATE =
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,57,final RelOptTable table = scan.getTable();
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,58,return table.unwrap(FilterableTable.class) != null
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,59,|| table.unwrap(ProjectableFilterableTable.class) != null;
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,67,operand(TableScan.class, null, PREDICATE, none())),
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,81,operand(TableScan.class, null, PREDICATE, none()))),
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,33,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,118,final List<RexNode> top = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,119,final List<RexNode> bottom = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,133,final List<RexNode> newBottomList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,189,Collections.<RelDataTypeField>emptyList());
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,37,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,38,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,128,final List<ImmutableBitSet> projFieldsList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,129,final List<int[]> joinFieldRefCountsList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,141,final List<Pair<JoinRelType, RexNode>> joinSpecs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,200,final List<RelNode> newInputs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,382,final List<RexNode> filters = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,473,final Map<Integer, int[]> refCountsMap = Maps.newHashMap();
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,524,final List<RexNode> filters = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/LoptJoinTree.java,22,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/rules/LoptJoinTree.java,23,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/LoptJoinTree.java,137,List<Integer> treeOrder = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/LoptJoinTree.java,160,this.parent = Preconditions.checkNotNull(parent);
core/src/main/java/org/apache/calcite/rel/rules/LoptJoinTree.java,198,this.left = Preconditions.checkNotNull(left);
core/src/main/java/org/apache/calcite/rel/rules/LoptJoinTree.java,199,this.right = Preconditions.checkNotNull(right);
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,37,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,465,fieldsRefByJoinFilter = Maps.newHashMap();
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,466,factorsRefByJoinFilter = Maps.newHashMap();
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,50,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,301,sortedFactors.toArray(new Integer[sortedFactors.size()]);
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,494,List<RexNode> newProjExprs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,1620,List<Pair<RexNode, String>> projects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,39,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,41,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,94,final List<Vertex> vertexes = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,104,final List<LoptMultiJoin.Edge> unusedEdges = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,126,final List<LoptMultiJoin.Edge> usedEdges = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,175,final List<RexNode> conditions = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,223,List<Pair<RelNode, Mappings.TargetMapping>> relNodes = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,372,this.conditions = Preconditions.checkNotNull(conditions);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,36,public static final ProjectFilterTransposeRule INSTANCE = new ProjectFilterTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,37,LogicalProject.class, LogicalFilter.class, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,38,PushProjector.ExprCondition.FALSE);
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,27,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,44,private static final Predicate<Project> PREDICATE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,47,return isTrivial(input);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,33,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,50,public static final Predicate<TableScan> PREDICATE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,54,final RelOptTable table = scan.getTable();
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,55,return table.unwrap(ProjectableFilterableTable.class) != null;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,63,operand(TableScan.class, null, PREDICATE, none())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,77,operand(TableScan.class, null, PREDICATE, none()))),
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,49,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,50,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,52,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,78,private static final Predicate<Calc> PREDICATE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,81,return RexOver.containsOver(calc.getProgram());
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,85,private static final Predicate<Project> PREDICATE2 =
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,88,return RexOver.containsOver(project.getProjects(), null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,281,final Set<Integer> newSet = Sets.newHashSet(i);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,70,unordered(operand(Values.class, null, Values.IS_EMPTY, none()))),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,197,operand(Values.class, null, Values.IS_EMPTY, none()),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,226,operand(Values.class, null, Values.IS_EMPTY, none()))),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,252,operand(Values.class, null, Values.IS_EMPTY, none())),
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,39,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,544,final List<Pair<RexNode, String>> projects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,765,ExprCondition FALSE =
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,768,return false;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,338,final List<RexNode> expandedExprList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,354,final List<RexLocalRef> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,443,final List<RexNode> constExps = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,444,List<Boolean> addCasts = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,445,final List<RexNode> removableCasts = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,459,final List<RexNode> reducedExprs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,506,final List<RexNode> reducedValues = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,35,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,103,ImmutableList.<RelNode>of(newSort));
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,46,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,160,final List<RelNode> newInputs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,265,List<RelNode> inputsToUnion = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,28,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,57,.build(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,58,new CacheLoader<Object, RelDataType>() {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,66,final ImmutableList.Builder<RelDataTypeField> list =
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,67,ImmutableList.builder();
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,69,list.add(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,70,new RelDataTypeFieldImpl(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,106,this.typeSystem = Preconditions.checkNotNull(typeSystem);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,308,Preconditions.checkNotNull(type);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,30,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,88,final List<Slot> slots = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,307,return new RelProtoDataType() {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,308,public RelDataType apply(RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,309,return typeFactory.copyType(protoType);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,327,return new RelProtoDataType() {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,328,public RelDataType apply(RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,329,final RelDataType type = typeFactory.createSqlType(typeName);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,330,return typeFactory.createTypeWithNullability(type, nullable);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,349,return new RelProtoDataType() {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,350,public RelDataType apply(RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,351,final RelDataType type = typeFactory.createSqlType(typeName, precision);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,352,return typeFactory.createTypeWithNullability(type, nullable);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,371,return new RelProtoDataType() {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,372,public RelDataType apply(RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,373,final RelDataType type =
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,374,typeFactory.createSqlType(typeName, precision, scale);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,375,return typeFactory.createTypeWithNullability(type, nullable);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,23,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,51,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,77,new Function<RelDataTypeField, RexInputRef>() {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,78,public RexInputRef apply(RelDataTypeField input) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,79,return new RexInputRef(input.getIndex(), input.getType());
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,126,return Lists.transform(rowType.getFieldList(), TO_INPUT_REF);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,272,ImmutableList.<RelCollation>of()));
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,388,ImmutableList.<RexNode>of(),
core/src/main/java/org/apache/calcite/rex/RexCorrelVariable.java,23,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rex/RexCorrelVariable.java,41,this.id = Preconditions.checkNotNull(id);
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,119,new RexToLixTranslator.InputGetter() {
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,120,public Expression field(BlockBuilder list, int index,
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,121,Type storageType) {
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,122,throw new UnsupportedOperationException();
core/src/main/java/org/apache/calcite/rex/RexPermuteInputsShuttle.java,69,ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/rex/RexProgram.java,35,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rex/RexProgram.java,524,final List<RexNode> filters = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,19,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,25,import javax.annotation.Nullable;
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,263,return Iterables.transform(iterable, new Function<RexNode, RexNode>() {
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,264,public RexNode apply(@Nullable RexNode t) {
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,265,return t == null ? null : t.accept(RexShuttle.this);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,206,op,
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,207,new RexSqlConvertlet() {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,208,public SqlNode convertCall(
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,209,RexToSqlNodeConverter converter,
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,210,RexCall call) {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,211,SqlNode[] operands =
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,212,convertExpressionList(converter, call.operands);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,213,if (operands == null) {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,214,return null;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,216,List<SqlNode> operandList =
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,217,new ArrayList<SqlNode>(Arrays.asList(operands));
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,218,SqlDataTypeSpec typeSpec =
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,219,SqlTypeUtil.convertTypeToSpec(call.getType());
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,220,operandList.add(typeSpec);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,221,return new SqlBasicCall(
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,222,op,
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,223,operandList.toArray(new SqlNode[operandList.size()]),
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,224,SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,237,op,
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,238,new RexSqlConvertlet() {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,239,public SqlNode convertCall(
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,240,RexToSqlNodeConverter converter,
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,241,RexCall call) {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,242,assert op instanceof SqlCaseOperator;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,243,SqlNode[] operands =
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,244,convertExpressionList(converter, call.operands);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,245,if (operands == null) {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,246,return null;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,248,SqlNodeList whenList = new SqlNodeList(SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,249,SqlNodeList thenList = new SqlNodeList(SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,250,int i = 0;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,251,while (i < operands.length - 1) {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,252,whenList.add(operands[i]);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,253,++i;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,254,thenList.add(operands[i]);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,255,++i;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,257,SqlNode elseExpr = operands[i];
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,258,SqlNode[] newOperands = new SqlNode[3];
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,259,newOperands[0] = whenList;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,260,newOperands[1] = thenList;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,261,newOperands[2] = elseExpr;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,262,return op.createCall(null, SqlParserPos.ZERO, newOperands);
core/src/main/java/org/apache/calcite/rex/RexSubQuery.java,70,ImmutableList.<RexNode>of(), rel);
core/src/main/java/org/apache/calcite/rex/RexSubQuery.java,81,ImmutableList.<RexNode>of(), rel);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,44,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,45,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,49,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,50,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,65,private static final Function<? super RexNode, ? extends RexNode> ADD_NOT =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,66,new Function<RexNode, RexNode>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,67,public RexNode apply(RexNode input) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,68,return new RexCall(input.getType(), SqlStdOperatorTable.NOT,
core/src/main/java/org/apache/calcite/rex/RexUtil.java,69,ImmutableList.of(input));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,73,private static final Predicate1<RexNode> IS_FLAT_PREDICATE =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,74,new Predicate1<RexNode>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,75,public boolean apply(RexNode v1) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,76,return isFlat(v1);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,80,private static final Function<Object, String> TO_STRING =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,81,new Function<Object, String>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,82,public String apply(Object input) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,83,return input.toString();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,87,private static final Function<RexNode, RelDataType> TYPE_FN =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,88,new Function<RexNode, RelDataType>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,89,public RelDataType apply(RexNode input) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,90,return input.getType();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,94,private static final Function<RelDataType, RelDataTypeFamily> FAMILY_FN =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,95,new Function<RelDataType, RelDataTypeFamily>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,96,public RelDataTypeFamily apply(RelDataType input) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,97,return input.getFamily();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,739,final Set<String> digests = Sets.newHashSet(); // to eliminate duplicates
core/src/main/java/org/apache/calcite/rex/RexUtil.java,793,final Set<String> digests = Sets.newHashSet(); // to eliminate duplicates
core/src/main/java/org/apache/calcite/rex/RexUtil.java,927,return Iterables.transform(
core/src/main/java/org/apache/calcite/rex/RexUtil.java,928,nodes, new Function<RexNode, RexNode>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,929,public RexNode apply(RexNode input) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,930,return input.accept(shuttle);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1034,|| !exists(exprs,
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1035,new Predicate1<RexNode>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1036,public boolean apply(RexNode expr) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1037,return isCallTo(expr, op);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1052,&& all(call.getOperands(), IS_FLAT_PREDICATE);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1244,return Lists.transform(nodes, TYPE_FN);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1248,return Lists.transform(types, FAMILY_FN);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1562,switch (input.getKind()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1563,case EQUALS:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1564,RexCall call2 = (RexCall) input;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1567,&& call2.getOperands().get(1) instanceof RexLiteral) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1568,return false;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1571,return true;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1597,public static Function<RexNode, RexNode> notFn(final RexBuilder rexBuilder) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1598,return new Function<RexNode, RexNode>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1599,public RexNode apply(RexNode input) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1604,: input.getKind() == SqlKind.NOT
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1606,: rexBuilder.makeCall(SqlStdOperatorTable.NOT, input);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1802,final List<RexNode> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1855,final List<RexNode> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1867,final List<RexNode> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1882,final Map<String, RexNode> map = Maps.newHashMap();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1898,List<RexNode> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1936,final List<RexNode> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1953,return toDnf(and(Lists.transform(flattenOr(operands), ADD_NOT)));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1956,return toDnf(or(Lists.transform(flattenAnd(operands), ADD_NOT)));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1966,final List<RexNode> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2052,public static final Predicate<Project> PROJECT_PREDICATE =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2055,for (RexNode node : project.getProjects()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2056,try {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2057,node.accept(INSTANCE);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2059,return true;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2062,return false;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2070,try {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2071,filter.getCondition().accept(INSTANCE);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2072,return false;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2074,return true;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2080,public static final Predicate<Join> JOIN_PREDICATE =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2083,try {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2084,join.getCondition().accept(INSTANCE);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2085,return false;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2087,return true;
core/src/main/java/org/apache/calcite/runtime/BinarySearch.java,52,Functions.<T>identitySelector(), comparator);
core/src/main/java/org/apache/calcite/runtime/BinarySearch.java,71,Functions.<T>identitySelector(), comparator);
core/src/main/java/org/apache/calcite/runtime/BinarySearch.java,139,Functions.<T>identitySelector(), comparator);
core/src/main/java/org/apache/calcite/runtime/BinarySearch.java,161,Functions.<T>identitySelector(), comparator);
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,46,private static final Function1<?, ?> SLICE =
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,47,new Function1<Object[], Object>() {
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,48,public Object apply(Object[] a0) {
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,49,return a0[0];
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,53,private static final Function1<Object[], Row> ARRAY_TO_ROW =
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,54,new Function1<Object[], Row>() {
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,55,public Row apply(Object[] a0) {
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,56,return Row.asCopy(a0);
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,66,return enumerable.select((Function1<E[], E>) SLICE);
core/src/main/java/org/apache/calcite/runtime/Hook.java,19,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/runtime/Hook.java,67,private final List<Function<Object, Object>> handlers =
core/src/main/java/org/apache/calcite/runtime/Hook.java,70,private final ThreadLocal<List<Function<Object, Object>>> threadHandlers =
core/src/main/java/org/apache/calcite/runtime/Hook.java,71,new ThreadLocal<List<Function<Object, Object>>>() {
core/src/main/java/org/apache/calcite/runtime/Hook.java,72,protected List<Function<Object, Object>> initialValue() {
core/src/main/java/org/apache/calcite/runtime/Hook.java,91,public <T, R> Closeable add(final Function<T, R> handler) {
core/src/main/java/org/apache/calcite/runtime/Hook.java,93,handlers.add((Function<Object, Object>) handler);
core/src/main/java/org/apache/calcite/runtime/Hook.java,94,return new Closeable() {
core/src/main/java/org/apache/calcite/runtime/Hook.java,95,public void close() {
core/src/main/java/org/apache/calcite/runtime/Hook.java,96,remove(handler);
core/src/main/java/org/apache/calcite/runtime/Hook.java,102,private boolean remove(Function handler) {
core/src/main/java/org/apache/calcite/runtime/Hook.java,107,public <T, R> Closeable addThread(final Function<T, R> handler) {
core/src/main/java/org/apache/calcite/runtime/Hook.java,109,threadHandlers.get().add((Function<Object, Object>) handler);
core/src/main/java/org/apache/calcite/runtime/Hook.java,110,return new Closeable() {
core/src/main/java/org/apache/calcite/runtime/Hook.java,111,public void close() {
core/src/main/java/org/apache/calcite/runtime/Hook.java,112,removeThread(handler);
core/src/main/java/org/apache/calcite/runtime/Hook.java,118,private boolean removeThread(Function handler) {
core/src/main/java/org/apache/calcite/runtime/Hook.java,124,for (Function<Object, Object> handler : handlers) {
core/src/main/java/org/apache/calcite/runtime/Hook.java,125,handler.apply(arg);
core/src/main/java/org/apache/calcite/runtime/Hook.java,127,for (Function<Object, Object> handler : threadHandlers.get()) {
core/src/main/java/org/apache/calcite/runtime/Hook.java,128,handler.apply(arg);
core/src/main/java/org/apache/calcite/runtime/Hook.java,140,Closeable EMPTY =
core/src/main/java/org/apache/calcite/runtime/Hook.java,141,new Closeable() {
core/src/main/java/org/apache/calcite/runtime/Hook.java,142,public void close() {}
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,53,new Function1<ResultSet, Function0<Object>>() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,54,public Function0<Object> apply(final ResultSet resultSet) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,55,final ResultSetMetaData metaData;
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,56,final int columnCount;
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,57,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,58,metaData = resultSet.getMetaData();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,59,columnCount = metaData.getColumnCount();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,61,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,63,if (columnCount == 1) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,64,return new Function0<Object>() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,65,public Object apply() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,66,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,67,return resultSet.getObject(1);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,69,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,75,return (Function0) new Function0<Object[]>() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,76,public Object[] apply() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,77,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,78,final List<Object> list = new ArrayList<Object>();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,79,for (int i = 0; i < columnCount; i++) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,80,if (metaData.getColumnType(i + 1) == Types.TIMESTAMP) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,81,long v = resultSet.getLong(i + 1);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,82,if (v == 0 && resultSet.wasNull()) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,83,list.add(null);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,85,list.add(v);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,88,list.add(resultSet.getObject(i + 1));
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,91,return list.toArray();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,93,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,224,return new Function1<ResultSet, Function0<Object>>() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,225,public Function0<Object> apply(final ResultSet resultSet) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,226,final ResultSetMetaData metaData;
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,227,final int columnCount;
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,229,metaData = resultSet.getMetaData();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,230,columnCount = metaData.getColumnCount();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,234,assert columnCount == primitives.length;
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,235,if (columnCount == 1) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,236,return new Function0<Object>() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,237,public Object apply() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,238,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,239,return resultSet.getObject(1);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,241,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,247,return (Function0) new Function0<Object[]>() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,248,public Object[] apply() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,249,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,250,final List<Object> list = new ArrayList<Object>();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,251,for (int i = 0; i < columnCount; i++) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,252,list.add(primitives[i].jdbcGet(resultSet, i + 1));
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,254,return list.toArray();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,256,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,64,new Function1<List<Object>, Enumerable<Object>>() {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,65,public Enumerable<Object> apply(List<Object> list) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,66,return Linq4j.asEnumerable(list);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,77,new ThreadLocal<Map<String, AtomicLong>>() {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,79,return new HashMap<String, AtomicLong>();
core/src/main/java/org/apache/calcite/schema/FunctionParameter.java,30,com.google.common.base.Function<FunctionParameter, String> NAME_FN =
core/src/main/java/org/apache/calcite/schema/FunctionParameter.java,31,new com.google.common.base.Function<FunctionParameter, String>() {
core/src/main/java/org/apache/calcite/schema/FunctionParameter.java,32,public String apply(FunctionParameter p) {
core/src/main/java/org/apache/calcite/schema/FunctionParameter.java,33,return p.getName();
core/src/main/java/org/apache/calcite/schema/Schemas.java,38,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/schema/Schemas.java,63,private static final com.google.common.base.Function<
core/src/main/java/org/apache/calcite/schema/Schemas.java,64,CalciteSchema.LatticeEntry,
core/src/main/java/org/apache/calcite/schema/Schemas.java,65,CalciteSchema.TableEntry> TO_TABLE_ENTRY =
core/src/main/java/org/apache/calcite/schema/Schemas.java,66,new com.google.common.base.Function<CalciteSchema.LatticeEntry,
core/src/main/java/org/apache/calcite/schema/Schemas.java,67,CalciteSchema.TableEntry>() {
core/src/main/java/org/apache/calcite/schema/Schemas.java,68,public CalciteSchema.TableEntry apply(
core/src/main/java/org/apache/calcite/schema/Schemas.java,69,CalciteSchema.LatticeEntry entry) {
core/src/main/java/org/apache/calcite/schema/Schemas.java,70,final CalciteSchema.TableEntry starTable = entry.getStarTable();
core/src/main/java/org/apache/calcite/schema/Schemas.java,72,== Schema.TableType.STAR;
core/src/main/java/org/apache/calcite/schema/Schemas.java,73,return entry.getStarTable();
core/src/main/java/org/apache/calcite/schema/Schemas.java,77,private static final com.google.common.base.Function<
core/src/main/java/org/apache/calcite/schema/Schemas.java,78,CalciteSchema.LatticeEntry,
core/src/main/java/org/apache/calcite/schema/Schemas.java,79,Lattice> TO_LATTICE =
core/src/main/java/org/apache/calcite/schema/Schemas.java,80,new com.google.common.base.Function<CalciteSchema.LatticeEntry,
core/src/main/java/org/apache/calcite/schema/Schemas.java,81,Lattice>() {
core/src/main/java/org/apache/calcite/schema/Schemas.java,82,public Lattice apply(CalciteSchema.LatticeEntry entry) {
core/src/main/java/org/apache/calcite/schema/Schemas.java,83,return entry.getLattice();
core/src/main/java/org/apache/calcite/schema/Schemas.java,247,return table.scan(root, ImmutableList.<RexNode>of());
core/src/main/java/org/apache/calcite/schema/Schemas.java,255,return table.scan(root, ImmutableList.<RexNode>of(),
core/src/main/java/org/apache/calcite/schema/Schemas.java,423,return new RelProtoDataType() {
core/src/main/java/org/apache/calcite/schema/Schemas.java,424,public RelDataType apply(RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/schema/Schemas.java,425,return table.getRowType(typeFactory);
core/src/main/java/org/apache/calcite/schema/Schemas.java,434,return new RelProtoDataType() {
core/src/main/java/org/apache/calcite/schema/Schemas.java,435,public RelDataType apply(RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/schema/Schemas.java,436,return function.getReturnType(typeFactory);
core/src/main/java/org/apache/calcite/schema/Schemas.java,447,return Lists.transform(list, TO_TABLE_ENTRY);
core/src/main/java/org/apache/calcite/schema/Schemas.java,455,return Lists.transform(list, TO_LATTICE);
core/src/main/java/org/apache/calcite/schema/Schemas.java,463,final List<CalciteSchema.LatticeEntry> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/schema/Schemas.java,495,String t = Preconditions.checkNotNull(base);
core/src/main/java/org/apache/calcite/schema/Schemas.java,530,list.add(Pair.<String, Schema>of(s.getName(), s));
core/src/main/java/org/apache/calcite/schema/Schemas.java,569,new PathImpl(ImmutableList.<Pair<String, Schema>>of());
core/src/main/java/org/apache/calcite/schema/impl/AggregateFunctionImpl.java,28,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/schema/impl/AggregateFunctionImpl.java,73,this.initMethod = Preconditions.checkNotNull(initMethod);
core/src/main/java/org/apache/calcite/schema/impl/AggregateFunctionImpl.java,74,this.addMethod = Preconditions.checkNotNull(addMethod);
core/src/main/java/org/apache/calcite/schema/impl/MaterializedViewTable.java,33,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/schema/impl/MaterializedViewTable.java,109,this.key = Preconditions.checkNotNull(
core/src/main/java/org/apache/calcite/schema/impl/StarTable.java,37,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/schema/impl/StarTable.java,66,this.lattice = Preconditions.checkNotNull(lattice);
core/src/main/java/org/apache/calcite/sql/SqlBinaryStringLiteral.java,23,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql/SqlBinaryStringLiteral.java,24,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/SqlBinaryStringLiteral.java,35,private static final Function<SqlLiteral, BitString> F =
core/src/main/java/org/apache/calcite/sql/SqlBinaryStringLiteral.java,36,new Function<SqlLiteral, BitString>() {
core/src/main/java/org/apache/calcite/sql/SqlBinaryStringLiteral.java,37,public BitString apply(SqlLiteral literal) {
core/src/main/java/org/apache/calcite/sql/SqlBinaryStringLiteral.java,38,return ((SqlBinaryStringLiteral) literal).getBitString();
core/src/main/java/org/apache/calcite/sql/SqlBinaryStringLiteral.java,73,BitString.concat(Lists.transform(literals, F)),
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,34,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,158,return Lists.transform(operator.getParamNames(),
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,159,new Function<String, SqlNode>() {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,160,public SqlNode apply(String paramName) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,161,for (SqlNode operand2 : call.getOperandList()) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,162,final SqlCall call2 = (SqlCall) operand2;
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,163,assert operand2.getKind() == SqlKind.ARGUMENT_ASSIGNMENT;
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,164,final SqlIdentifier id = call2.operand(1);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,165,if (id.getSimple().equals(paramName)) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,166,return call2.operand(0);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,169,return DEFAULT_CALL;
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,25,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,26,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,37,private static final Function<SqlLiteral, NlsString> F =
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,38,new Function<SqlLiteral, NlsString>() {
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,39,public NlsString apply(SqlLiteral literal) {
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,40,return ((SqlCharStringLiteral) literal).getNlsString();
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,86,NlsString.concat(Lists.transform(literals, F)),
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,617,private String databaseProductName;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,618,private String quoteString;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,619,private final NullCollation nullCollation;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,624,this.quoteString = quoteString;
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,19,import org.apache.calcite.linq4j.function.Function1;
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,44,private static final Function1<Integer, String> ARG_FN =
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,45,new Function1<Integer, String>() {
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,46,public String apply(Integer a0) {
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,47,return "arg" + a0;
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,171,return Functions.generate(paramTypes.size(), ARG_FN);
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,28,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,38,private static final Function<String, String> STAR_TO_EMPTY =
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,39,new Function<String, String>() {
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,40,public String apply(String s) {
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,41,return s.equals("*") ? "" : s;
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,45,private static final Function<String, String> EMPTY_TO_STAR =
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,46,new Function<String, String>() {
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,47,public String apply(String s) {
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,48,return s.equals("") ? "*" : s.equals("*") ? "\"*\"" : s;
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,132,return new SqlIdentifier(Lists.transform(names, STAR_TO_EMPTY), null, pos,
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,166,String[] nameArray = names.toArray(new String[names.size()]);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,32,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,111,TimeUnitRange.of(Preconditions.checkNotNull(startUnit), endUnit);
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,63,this.natural = Preconditions.checkNotNull(natural);
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,64,this.joinType = Preconditions.checkNotNull(joinType);
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,66,this.conditionType = Preconditions.checkNotNull(conditionType);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,175,return list.toArray(new SqlNode[list.size()]);
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,287,operandList.toArray(new SqlNode[operandList.size()]));
core/src/main/java/org/apache/calcite/sql/SqlSetOption.java,24,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/SqlSetOption.java,105,final List<SqlNode> operandList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,20,import org.apache.calcite.linq4j.function.Function1;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,40,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,68,ArrayList<SqlNode> list = new ArrayList<SqlNode>();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,85,ArrayList<SqlNode> list = new ArrayList<SqlNode>();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,599,final List<SqlOperator> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,848,private final List<SqlNode> ancestors = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,865,if (predicate.apply(node)) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,872,if (postPredicate.apply(node)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,243,return input instanceof SqlIdentifier
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,245,.equals(UPPER_HINT_TOKEN);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,250,return input.getParserPosition().startsAt(pos);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,21,import org.apache.calcite.adapter.enumerable.NotNullImplementor;
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,24,import org.apache.calcite.adapter.enumerable.RexToLixTranslator;
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,32,import org.apache.calcite.rex.RexCall;
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorHint.java,46,: names.toArray(new String[names.size()]);
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,23,import org.apache.calcite.sql.SqlOperatorBinding;
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,59,ReturnTypes.cascade(ReturnTypes.ARG0, new SqlTypeTransform() {
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,60,public RelDataType transformType(SqlOperatorBinding binding,
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,61,RelDataType type) {
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,63,SqlTypeTransform transform;
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,64,if (binding.getOperandCount() < 3) {
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,65,transform = SqlTypeTransforms.FORCE_NULLABLE;
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,67,RelDataType defValueType = binding.getOperandType(2);
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,69,? SqlTypeTransforms.FORCE_NULLABLE
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,70,: SqlTypeTransforms.TO_NOT_NULLABLE;
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,72,return transform.transformType(binding, type);
core/src/main/java/org/apache/calcite/sql/parser/SqlAbstractParserImpl.java,33,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/parser/SqlAbstractParserImpl.java,365,final List<SqlOperator> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,26,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,222,this.quotedCasing = Preconditions.checkNotNull(quotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,227,this.unquotedCasing = Preconditions.checkNotNull(unquotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,232,this.quoting = Preconditions.checkNotNull(quoting);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,247,this.parserFactory = Preconditions.checkNotNull(factory);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,283,this.quotedCasing = Preconditions.checkNotNull(quotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,284,this.unquotedCasing = Preconditions.checkNotNull(unquotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,285,this.quoting = Preconditions.checkNotNull(quoting);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,286,this.parserFactory = Preconditions.checkNotNull(parserFactory);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,21,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,495,return list.toArray(new String[list.size()]);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,499,return list.toArray(new SqlNode[list.size()]);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1177,return names.toArray(new String[names.size()]);
core/src/main/java/org/apache/calcite/sql/type/ArraySqlType.java,22,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/type/ArraySqlType.java,40,this.elementType = Preconditions.checkNotNull(elementType);
core/src/main/java/org/apache/calcite/sql/type/ComparableOperandTypeChecker.java,26,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/type/ComparableOperandTypeChecker.java,52,this.consistency = Preconditions.checkNotNull(consistency);
core/src/main/java/org/apache/calcite/sql/type/CompositeOperandTypeChecker.java,24,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/type/CompositeOperandTypeChecker.java,102,this.allowedRules = Preconditions.checkNotNull(allowedRules);
core/src/main/java/org/apache/calcite/sql/type/CompositeOperandTypeChecker.java,103,this.composition = Preconditions.checkNotNull(composition);
core/src/main/java/org/apache/calcite/sql/type/FamilyOperandTypeChecker.java,27,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/sql/type/FamilyOperandTypeChecker.java,58,return optional.apply(i);
core/src/main/java/org/apache/calcite/sql/type/FamilyOperandTypeChecker.java,123,while (min > 0 && optional.apply(min - 1)) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,21,import org.apache.calcite.sql.SqlCallBinding;
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,42,new SqlOperandTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,43,public void inferOperandTypes(
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,44,SqlCallBinding callBinding,
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,45,RelDataType returnType,
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,46,RelDataType[] operandTypes) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,47,final RelDataType unknownType =
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,48,callBinding.getValidator().getUnknownType();
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,49,RelDataType knownType = unknownType;
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,50,for (SqlNode operand : callBinding.operands()) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,51,knownType = callBinding.getValidator().deriveType(
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,52,callBinding.getScope(), operand);
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,53,if (!knownType.equals(unknownType)) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,54,break;
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,63,for (int i = 0; i < operandTypes.length; ++i) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,64,operandTypes[i] = knownType;
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,75,new SqlOperandTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,76,public void inferOperandTypes(
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,77,SqlCallBinding callBinding,
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,78,RelDataType returnType,
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,79,RelDataType[] operandTypes) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,80,for (int i = 0; i < operandTypes.length; ++i) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,81,operandTypes[i] =
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,84,: returnType;
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,94,new SqlOperandTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,95,public void inferOperandTypes(
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,96,SqlCallBinding callBinding,
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,97,RelDataType returnType,
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,98,RelDataType[] operandTypes) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,99,RelDataTypeFactory typeFactory = callBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,100,for (int i = 0; i < operandTypes.length; ++i) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,101,operandTypes[i] =
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,102,typeFactory.createSqlType(SqlTypeName.BOOLEAN);
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,115,new SqlOperandTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,116,public void inferOperandTypes(
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,117,SqlCallBinding callBinding,
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,118,RelDataType returnType,
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,119,RelDataType[] operandTypes) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,120,RelDataTypeFactory typeFactory = callBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,121,for (int i = 0; i < operandTypes.length; ++i) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,122,operandTypes[i] =
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,123,typeFactory.createSqlType(SqlTypeName.VARCHAR, 1024);
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,28,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,29,import com.google.common.base.Predicates;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,64,Predicates.<Integer>alwaysFalse());
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,81,return family(families, Predicates.<Integer>alwaysFalse());
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,261,Predicates.<Integer>alwaysFalse()) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,437,Predicates.<Integer>alwaysFalse()) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,292,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,293,public RelDataType inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,294,return opBinding.getTypeFactory().leastRestrictive(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,295,opBinding.collectOperandTypes());
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,302,public static final SqlReturnTypeInference MULTISET =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,303,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,304,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,305,final SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,306,ExplicitOperatorBinding newBinding =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,307,new ExplicitOperatorBinding(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,308,opBinding,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,309,new AbstractList<RelDataType>() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,310,public RelDataType get(int index) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,311,RelDataType type =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,313,.getComponentType();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,314,assert type != null;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,315,return type;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,318,public int size() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,319,return opBinding.getOperandCount();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,323,RelDataType biggestElementType =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,324,LEAST_RESTRICTIVE.inferReturnType(newBinding);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,325,return opBinding.getTypeFactory().createMultisetType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,326,biggestElementType,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,327,-1);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,375,public static final SqlReturnTypeInference DECIMAL_SCALE0 =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,376,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,377,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,378,SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,379,RelDataType type1 = opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,380,if (SqlTypeUtil.isDecimal(type1)) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,381,if (type1.getScale() == 0) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,382,return type1;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,384,int p = type1.getPrecision();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,385,RelDataType ret;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,386,ret =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,387,opBinding.getTypeFactory().createSqlType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,388,SqlTypeName.DECIMAL,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,389,p,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,390,0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,391,if (type1.isNullable()) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,392,ret =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,394,.createTypeWithNullability(ret, true);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,396,return ret;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,399,return null;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,415,public static final SqlReturnTypeInference DECIMAL_PRODUCT =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,416,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,417,public RelDataType inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,418,RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,419,RelDataType type1 = opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,420,RelDataType type2 = opBinding.getOperandType(1);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,421,return typeFactory.createDecimalProduct(type1, type2);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,448,public static final SqlReturnTypeInference DECIMAL_QUOTIENT =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,449,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,450,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,451,SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,452,RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,453,RelDataType type1 = opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,454,RelDataType type2 = opBinding.getOperandType(1);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,455,return typeFactory.createDecimalQuotient(type1, type2);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,492,public static final SqlReturnTypeInference DECIMAL_SUM =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,493,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,494,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,495,SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,496,RelDataType type1 = opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,497,RelDataType type2 = opBinding.getOperandType(1);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,499,&& SqlTypeUtil.isExactNumeric(type2)) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,501,|| SqlTypeUtil.isDecimal(type2)) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,502,int p1 = type1.getPrecision();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,503,int p2 = type2.getPrecision();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,504,int s1 = type1.getScale();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,505,int s2 = type2.getScale();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,507,final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,508,int scale = Math.max(s1, s2);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,509,final RelDataTypeSystem typeSystem = typeFactory.getTypeSystem();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,510,assert scale <= typeSystem.getMaxNumericScale();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,511,int precision = Math.max(p1 - s1, p2 - s2) + scale + 1;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,512,precision =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,513,Math.min(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,514,precision,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,515,typeSystem.getMaxNumericPrecision());
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,516,assert precision > 0;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,518,return typeFactory.createSqlType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,519,SqlTypeName.DECIMAL,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,520,precision,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,521,scale);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,525,return null;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,563,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,569,final RelDataType argType0 = opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,570,final RelDataType argType1 = opBinding.getOperandType(1);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,572,final boolean containsAnyType =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,574,|| (argType1.getSqlTypeName() == SqlTypeName.ANY);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,576,if (!containsAnyType
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,578,&& SqlTypeUtil.inCharOrBinaryFamilies(argType1))) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,583,SqlCollation pickedCollation = null;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,584,if (!containsAnyType
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,585,&& SqlTypeUtil.inCharFamily(argType0)) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,586,if (!SqlTypeUtil.isCharTypeComparable(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,587,opBinding.collectOperandTypes().subList(0, 2))) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,588,throw opBinding.newError(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,589,RESOURCE.typeNotComparable(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,590,argType0.getFullTypeString(),
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,591,argType1.getFullTypeString()));
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,594,pickedCollation =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,595,SqlCollation.getCoercibilityDyadicOperator(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,596,argType0.getCollation(), argType1.getCollation());
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,597,assert null != pickedCollation;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,601,SqlTypeName typeName =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,602,argType0.getSqlTypeName();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,603,if (SqlTypeUtil.isBoundedVariableWidth(argType1)) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,604,typeName = argType1.getSqlTypeName();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,607,RelDataType ret;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,608,int typePrecision;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,613,typePrecision = RelDataType.PRECISION_NOT_SPECIFIED;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,621,if (null != pickedCollation) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,622,RelDataType pickedType;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,625,pickedType = argType0;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,628,pickedType = argType1;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,632,ret =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,639,return ret;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,665,public static final SqlReturnTypeInference SCOPE =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,666,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,667,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,668,SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,669,SqlCallBinding callBinding = (SqlCallBinding) opBinding;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,670,return callBinding.getValidator().getNamespace(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,671,callBinding.getCall()).getRowType();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,680,public static final SqlReturnTypeInference MULTISET_PROJECT0 =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,681,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,682,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,683,SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,684,assert opBinding.getOperandCount() == 1;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,685,final RelDataType recordMultisetType =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,686,opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,687,RelDataType multisetType =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,688,recordMultisetType.getComponentType();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,689,assert multisetType != null : "expected a multiset type: "
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,690,+ recordMultisetType;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,691,final List<RelDataTypeField> fields =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,692,multisetType.getFieldList();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,693,assert fields.size() > 0;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,694,final RelDataType firstColType = fields.get(0).getType();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,695,return opBinding.getTypeFactory().createMultisetType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,696,firstColType,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,697,-1);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,705,public static final SqlReturnTypeInference MULTISET_RECORD =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,706,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,707,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,708,SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,709,assert opBinding.getOperandCount() == 1;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,710,final RelDataType multisetType = opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,711,RelDataType componentType = multisetType.getComponentType();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,712,assert componentType != null : "expected a multiset type: "
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,713,+ multisetType;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,714,final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,716,.add(SqlUtil.deriveAliasFromOrdinal(0), componentType).build();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,717,return typeFactory.createMultisetType(type, -1);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,724,public static final SqlReturnTypeInference RECORD_TO_SCALAR =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,725,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,726,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,727,SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,728,assert opBinding.getOperandCount() == 1;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,730,final RelDataType recordType = opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,732,boolean isStruct = recordType.isStruct();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,733,int fieldCount = recordType.getFieldCount();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,735,assert isStruct && (fieldCount == 1);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,737,RelDataTypeField fieldType = recordType.getFieldList().get(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,738,assert fieldType != null
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,739,: "expected a record type with one field: "
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,740,+ recordType;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,741,final RelDataType firstColType = fieldType.getType();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,742,return opBinding.getTypeFactory().createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,743,firstColType,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,744,true);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,755,public static final SqlReturnTypeInference AGG_SUM =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,756,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,758,inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,759,final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,761,.deriveSumType(typeFactory, opBinding.getOperandType(0));
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,762,if (opBinding.getGroupCount() == 0 || opBinding.hasFilter()) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,763,return typeFactory.createTypeWithNullability(type, true);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,765,return type;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,777,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,779,inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,780,final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,782,.deriveSumType(typeFactory, opBinding.getOperandType(0));
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,24,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,46,new SqlTypeTransform() {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,47,public RelDataType transformType(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,48,SqlOperatorBinding opBinding,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,49,RelDataType typeToTransform) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,50,return SqlTypeUtil.makeNullableIfOperandsAre(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,51,opBinding.getTypeFactory(),
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,53,Preconditions.checkNotNull(typeToTransform));
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,62,new SqlTypeTransform() {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,63,public RelDataType transformType(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,64,SqlOperatorBinding opBinding,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,65,RelDataType typeToTransform) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,66,return opBinding.getTypeFactory().createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,67,Preconditions.checkNotNull(typeToTransform),
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,68,false);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,77,new SqlTypeTransform() {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,78,public RelDataType transformType(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,79,SqlOperatorBinding opBinding,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,80,RelDataType typeToTransform) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,81,return opBinding.getTypeFactory().createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,82,Preconditions.checkNotNull(typeToTransform),
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,83,true);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,145,new SqlTypeTransform() {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,146,public RelDataType transformType(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,147,SqlOperatorBinding opBinding,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,148,RelDataType typeToTransform) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,149,return typeToTransform.getComponentType();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,160,new SqlTypeTransform() {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,161,public RelDataType transformType(SqlOperatorBinding opBinding,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,162,RelDataType typeToTransform) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,163,return opBinding.getTypeFactory().createMultisetType(typeToTransform,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,164,-1);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,174,new SqlTypeTransform() {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,175,public RelDataType transformType(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,176,SqlOperatorBinding opBinding,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,177,RelDataType typeToTransform) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,178,final List<RelDataTypeField> fields =
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,179,typeToTransform.getFieldList();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,180,assert fields.size() == 1;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,181,return fields.get(0).getType();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,38,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,40,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,66,List<RelDataType> argTypes2 = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,202,Preconditions.checkNotNull(type);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1159,ImmutableList.<RelDataType>of(),
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1160,ImmutableList.<String>of());
core/src/main/java/org/apache/calcite/sql/util/SqlShuttle.java,111,this.clonedOperands = operands.toArray(new SqlNode[operands.size()]);
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,174,.acceptCall(this, call, true, ArgHandlerImpl.<Void>instance());
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,28,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,60,Suppliers.memoize(
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,61,new Supplier<Resolved>() {
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,62,public Resolved get() {
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,63,assert temporaryGroupExprList == null;
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,64,temporaryGroupExprList = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,65,try {
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,66,return resolve();
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,68,temporaryGroupExprList = null;
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,20,import org.apache.calcite.linq4j.function.Function1;
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,21,import org.apache.calcite.linq4j.function.Predicate1;
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,25,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,55,.where(
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,56,new Predicate1<SqlMoniker>() {
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,57,public boolean apply(SqlMoniker input) {
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,58,return input.getType() == SqlMonikerType.SCHEMA;
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,61,.select(
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,62,new Function1<SqlMoniker, List<String>>() {
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,63,public List<String> apply(SqlMoniker input) {
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,64,return input.getFullyQualifiedNames();
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,67,.into(Sets.<List<String>>newHashSet());
core/src/main/java/org/apache/calcite/sql/validate/SchemaNamespace.java,24,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/validate/SchemaNamespace.java,40,this.names = Preconditions.checkNotNull(names);
core/src/main/java/org/apache/calcite/sql/validate/SqlMonikerImpl.java,23,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/validate/SqlMonikerImpl.java,44,this.type = Preconditions.checkNotNull(type);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,32,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,59,new Function<FunctionParameter, RelDataType>() {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,60,public RelDataType apply(FunctionParameter input) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,61,return input.getType(typeFactory);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,65,return Lists.transform(function.getParameters(), FunctionParameter.NAME_FN);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,24,import org.apache.calcite.linq4j.tree.ParameterExpression;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,48,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,72,Preconditions.checkNotNull(paramTypes),
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,79,FunctionParameter.NAME_FN);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,129,final List<Object> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,184,Expressions.lambda(bb.toBlock(),
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,185,Collections.<ParameterExpression>emptyList());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,86,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,87,import com.google.common.base.Joiner;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,286,this.opTab = Preconditions.checkNotNull(opTab);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,287,this.catalogReader = Preconditions.checkNotNull(catalogReader);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,288,this.typeFactory = Preconditions.checkNotNull(typeFactory);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,289,this.conformance = Preconditions.checkNotNull(conformance);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1698,this.nullCollation = Preconditions.checkNotNull(nullCollation);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3418,final Set<String> aliases = Sets.newHashSet();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4053,ImmutableList.<RelDataType>of(), null);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4191,this.node = Preconditions.checkNotNull(node);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4208,this.node = Preconditions.checkNotNull(node);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4225,this.node = Preconditions.checkNotNull(node);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4242,this.node = Preconditions.checkNotNull(node);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,46,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,442,List<ImmutableBitSet> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,538,Set<ImmutableBitSet> builder = Sets.newLinkedHashSet();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,563,final Set<List<ImmutableBitSet>> builder = Sets.newLinkedHashSet();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,567,Set<ImmutableBitSet> flattenedBitSets = Sets.newLinkedHashSet();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,595,: ImmutableList.<SqlValidatorNamespace>of();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,674,new Suggester() {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,675,public String apply(String original, int attempt, int size) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,676,return Util.first(original, "EXPR$") + attempt;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,681,new Suggester() {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,682,public String apply(String original, int attempt, int size) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,683,return Util.first(original, "$f") + Math.max(size, attempt);
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,24,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,39,this.table = Preconditions.checkNotNull(table);
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,44,this(validator, table, ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,82,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,83,public RexNode convertCall(
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,84,SqlRexContext cx,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,85,SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,86,try {
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,137,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,141,try {
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,214,alias,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,215,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,216,public RexNode convertCall(
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,217,SqlRexContext cx,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,218,SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,222,final SqlCall newCall =
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,226,return cx.convertExpression(newCall);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,89,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,90,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,95,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,96,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,98,import com.google.common.collect.Multimaps;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,114,import java.util.TreeSet;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,163,private final HashSet<LogicalCorrelate> generatedCorRels = Sets.newHashSet();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,261,return new Function2<RelNode, RelNode, Void>() {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,262,public Void apply(RelNode oldNode, RelNode newNode) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,267,if (oldNode instanceof LogicalCorrelate
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,268,&& newNode instanceof LogicalCorrelate) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,269,LogicalCorrelate oldCor = (LogicalCorrelate) oldNode;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,270,CorrelationId c = oldCor.getCorrelationId();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,275,if (generatedCorRels.contains(oldNode)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,276,generatedCorRels.add((LogicalCorrelate) newNode);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,279,return null;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,318,projectPulledAboveLeftCorrelator, null, ImmutableSet.<Integer>of());
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,329,ImmutableSet.<Integer>of());
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,349,List<RelNode> newInputs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,464,final List<Pair<RexNode, String>> projects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,533,Map<Integer, Integer> combinedMap = Maps.newHashMap();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,545,List<AggregateCall> newAggCalls = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,556,List<Integer> aggArgs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,645,final List<Pair<RexNode, String>> projects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,767,ImmutableSet.<CorrelationId>of(), JoinRelType.INNER);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,839,ImmutableSet.<CorrelationId>of(), JoinRelType.INNER);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1001,ImmutableSet.<CorrelationId>of(), rel.getJoinType().toJoinType());
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1033,ImmutableSet.<CorrelationId>of(), rel.getJoinType());
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1136,List<Pair<RexNode, String>> newProjExprs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1184,final List<Pair<RexNode, String>> newProjects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1292,List<Pair<RexNode, String>> projects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1721,List<RexNode> tmpRightJoinKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1722,List<RexNode> correlatedJoinKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1822,ImmutableSet.<CorrelationId>of(), joinType);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1841,operand(LogicalAggregate.class, null, Aggregate.IS_SIMPLE,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1891,final Set<Integer> isCountStar = Sets.newHashSet();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1929,List<RexNode> rightJoinKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1930,List<RexNode> tmpCorrelatedJoinKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1940,List<RexFieldAccess> correlatedJoinKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1941,List<RexInputRef> correlatedInputRefJoinKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2096,Pair.<RexNode, String>of(rexBuilder.makeLiteral(true),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2101,ImmutableSet.<CorrelationId>of(), joinType);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2116,List<RexNode> joinOutputProjects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2147,List<AggregateCall> newAggCalls = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2158,argList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2181,List<RexNode> newAggOutputProjectList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2245,final List<Pair<RexNode, String>> projects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2304,Set<Integer> isCount = Sets.newHashSet();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2462,Multimaps.newSortedSetMultimap(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2466,Bug.upgrade("use MultimapBuilder when we're on Guava-16");
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2467,return Sets.newTreeSet();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2571,this.r = Preconditions.checkNotNull(r);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,66,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,844,new Function<ImmutableBitSet, ImmutableBitSet>() {
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,845,public ImmutableBitSet apply(ImmutableBitSet input) {
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,846,return Mappings.apply(inputMapping, input);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,74,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,76,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,129,private final Map<RelNode, RelNode> oldToNewRelMap = Maps.newHashMap();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,200,final List<RexNode> structuringExps = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,309,new Function<Integer, Integer>() {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,310,public Integer apply(Integer oldInput) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,311,return getNewForOldInput(oldInput);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,465,final List<Pair<RexNode, String>> flattenedExpList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,497,final List<Pair<RexNode, String>> flattenedExpList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,579,Pair.<RexNode, String>of(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,591,Pair.<RexNode, String>of(rexBuilder.makeLiteral(false),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,606,Collections.<String>nCopies(call.getOperands().size(), null),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,654,final List<Pair<RexNode, String>> flattenedExpList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,822,final List<Pair<RexNode, String>> flattenedExps = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,160,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,165,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,166,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,296,this.cluster = Preconditions.checkNotNull(cluster);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,742,final Map<Integer, Integer> squished = Maps.newHashMap();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,744,final List<Pair<RexNode, String>> newProjects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,760,final List<Pair<RexNode, String>> undoProjects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1048,leftKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1126,ImmutableSet.<CorrelationId>of(), JoinRelType.INNER);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1429,new Function<Pair<RexNode, SqlNode>, RexNode>() {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1430,public RexNode apply(Pair<RexNode, SqlNode> pair) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1432,pair.left,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2178,joinCond, ImmutableSet.<CorrelationId>of(), joinType, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2190,final List<CorrelationId> correlNames = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2394,final List<RexNode> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2500,final List<Pair<RexNode, String>> projects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3078,Collections.<RexNode>nCopies(targetFields.size(), null));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3081,Collections.<String>nCopies(targetFields.size(), null));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3455,ImmutableSet.<CorrelationId>of(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3754,final List<Integer> leftJoinKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4382,private final Map<String, String> nameMap = Maps.newHashMap();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4850,ImmutableList.<RelCollation>of());
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,23,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,98,addAlias(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,99,SqlStdOperatorTable.CHARACTER_LENGTH,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,101,addAlias(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,102,SqlStdOperatorTable.IS_UNKNOWN,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,104,addAlias(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,105,SqlStdOperatorTable.IS_NOT_UNKNOWN,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,109,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,110,SqlStdOperatorTable.CAST,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,111,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,112,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,113,return convertCast(cx, call);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,116,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,117,SqlStdOperatorTable.IS_DISTINCT_FROM,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,118,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,119,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,120,return convertIsDistinctFrom(cx, call, false);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,123,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,124,SqlStdOperatorTable.IS_NOT_DISTINCT_FROM,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,125,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,126,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,127,return convertIsDistinctFrom(cx, call, true);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,131,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,132,SqlStdOperatorTable.PLUS,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,133,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,134,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,135,return convertPlus(cx, call);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,140,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,141,SqlStdOperatorTable.NOT_LIKE,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,142,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,143,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,144,final SqlCall expanded =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,145,SqlStdOperatorTable.NOT.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,146,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,147,SqlStdOperatorTable.LIKE.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,148,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,149,call.getOperandList()));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,150,return cx.convertExpression(expanded);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,155,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,156,SqlStdOperatorTable.NOT_SIMILAR_TO,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,157,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,158,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,159,final SqlCall expanded =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,160,SqlStdOperatorTable.NOT.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,161,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,162,SqlStdOperatorTable.SIMILAR_TO.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,163,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,164,call.getOperandList()));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,165,return cx.convertExpression(expanded);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,170,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,171,SqlStdOperatorTable.UNARY_PLUS,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,172,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,173,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,174,SqlNode expanded = call.operand(0);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,175,return cx.convertExpression(expanded);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,180,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,181,SqlStdOperatorTable.AS,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,182,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,183,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,184,SqlNode expanded = call.operand(0);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,185,return cx.convertExpression(expanded);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,190,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,191,SqlStdOperatorTable.SQRT,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,192,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,193,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,194,SqlNode expanded =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,195,SqlStdOperatorTable.POWER.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,196,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,197,call.operand(0),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,198,SqlLiteral.createExactNumeric(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,200,return cx.convertExpression(expanded);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,220,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,221,SqlStdOperatorTable.AVG,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,223,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,224,SqlStdOperatorTable.STDDEV_POP,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,226,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,227,SqlStdOperatorTable.STDDEV_SAMP,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,229,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,230,SqlStdOperatorTable.VAR_POP,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,232,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,233,SqlStdOperatorTable.VAR_SAMP,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,244,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,245,SqlStdOperatorTable.ELEMENT,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,246,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,247,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,248,assert call.operandCount() == 1;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,249,final SqlNode operand = call.operand(0);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,250,final RelDataType type =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,251,cx.getValidator().getValidatedNodeType(operand);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,252,if (!type.getComponentType().isStruct()) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,253,return cx.convertExpression(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,254,SqlStdOperatorTable.ELEMENT_SLICE.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,255,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,256,operand));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,260,return StandardConvertletTable.this.convertCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,261,cx,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,262,call);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,269,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,270,SqlStdOperatorTable.ELEMENT_SLICE,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,271,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,272,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,273,assert call.operandCount() == 1;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,274,final SqlNode operand = call.operand(0);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,275,final RexNode expr =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,276,cx.convertExpression(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,277,SqlStdOperatorTable.ELEMENT.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,278,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,279,operand));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,280,return cx.getRexBuilder().makeFieldAccess(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,281,expr,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,282,0);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,703,ImmutableList.<RexNode>of(cx.getRexBuilder().makeLiteral(key)));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,723,new RexCallBinding(cx.getTypeFactory(), fun, exprs, ImmutableList.<RelCollation>of()) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,809,final List<RexNode> exprs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,837,final List<RelDataType> nonCharacterTypes = Lists.newArrayList();
core/src/main/java/org/apache/calcite/tools/Frameworks.java,39,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/tools/Frameworks.java,196,this.context = Preconditions.checkNotNull(c);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,201,Preconditions.checkNotNull(executor);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,202,this.executor = executor;
core/src/main/java/org/apache/calcite/tools/Frameworks.java,208,this.convertletTable = Preconditions.checkNotNull(convertletTable);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,213,this.operatorTable = Preconditions.checkNotNull(operatorTable);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,232,this.parserConfig = Preconditions.checkNotNull(parserConfig);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,251,return programs(Programs.listOf(Preconditions.checkNotNull(ruleSets)));
core/src/main/java/org/apache/calcite/tools/Frameworks.java,265,this.typeSystem = Preconditions.checkNotNull(typeSystem);
core/src/main/java/org/apache/calcite/tools/Programs.java,65,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/tools/Programs.java,77,private static final Function<RuleSet, Program> RULE_SET_TO_PROGRAM =
core/src/main/java/org/apache/calcite/tools/Programs.java,78,new Function<RuleSet, Program>() {
core/src/main/java/org/apache/calcite/tools/Programs.java,79,public Program apply(RuleSet ruleSet) {
core/src/main/java/org/apache/calcite/tools/Programs.java,80,return of(ruleSet);
core/src/main/java/org/apache/calcite/tools/Programs.java,156,return Lists.transform(Arrays.asList(ruleSets), RULE_SET_TO_PROGRAM);
core/src/main/java/org/apache/calcite/tools/Programs.java,161,return Lists.transform(ruleSets, RULE_SET_TO_PROGRAM);
core/src/main/java/org/apache/calcite/tools/Programs.java,192,return new Program() {
core/src/main/java/org/apache/calcite/tools/Programs.java,193,public RelNode run(RelOptPlanner planner, RelNode rel,
core/src/main/java/org/apache/calcite/tools/Programs.java,195,final HepPlanner hepPlanner = new HepPlanner(hepProgram,
core/src/main/java/org/apache/calcite/tools/Programs.java,196,null, noDag, null, RelOptCostImpl.FACTORY);
core/src/main/java/org/apache/calcite/tools/Programs.java,198,List<RelMetadataProvider> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/tools/Programs.java,199,if (metadataProvider != null) {
core/src/main/java/org/apache/calcite/tools/Programs.java,200,list.add(metadataProvider);
core/src/main/java/org/apache/calcite/tools/Programs.java,202,hepPlanner.registerMetadataProviders(list);
core/src/main/java/org/apache/calcite/tools/Programs.java,203,RelMetadataProvider plannerChain =
core/src/main/java/org/apache/calcite/tools/Programs.java,204,ChainedRelMetadataProvider.of(list);
core/src/main/java/org/apache/calcite/tools/Programs.java,205,rel.getCluster().setMetadataProvider(plannerChain);
core/src/main/java/org/apache/calcite/tools/Programs.java,207,hepPlanner.setRoot(rel);
core/src/main/java/org/apache/calcite/tools/Programs.java,208,return hepPlanner.findBestExp();
core/src/main/java/org/apache/calcite/tools/Programs.java,221,return new Program() {
core/src/main/java/org/apache/calcite/tools/Programs.java,222,public RelNode run(RelOptPlanner planner, RelNode rel,
core/src/main/java/org/apache/calcite/tools/Programs.java,224,final int joinCount = RelOptUtil.countJoins(rel);
core/src/main/java/org/apache/calcite/tools/Programs.java,225,final Program program;
core/src/main/java/org/apache/calcite/tools/Programs.java,226,if (joinCount < minJoinCount) {
core/src/main/java/org/apache/calcite/tools/Programs.java,227,program = ofRules(rules);
core/src/main/java/org/apache/calcite/tools/Programs.java,234,.build();
core/src/main/java/org/apache/calcite/tools/Programs.java,235,final Program program1 =
core/src/main/java/org/apache/calcite/tools/Programs.java,242,final List<RelOptRule> list = Lists.newArrayList(rules);
core/src/main/java/org/apache/calcite/tools/Programs.java,243,list.removeAll(
core/src/main/java/org/apache/calcite/tools/Programs.java,244,ImmutableList.of(JoinCommuteRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,245,JoinAssociateRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,246,JoinPushThroughJoinRule.LEFT,
core/src/main/java/org/apache/calcite/tools/Programs.java,247,JoinPushThroughJoinRule.RIGHT));
core/src/main/java/org/apache/calcite/tools/Programs.java,248,list.add(bushy
core/src/main/java/org/apache/calcite/tools/Programs.java,249,? MultiJoinOptimizeBushyRule.INSTANCE
core/src/main/java/org/apache/calcite/tools/Programs.java,250,: LoptOptimizeJoinRule.INSTANCE);
core/src/main/java/org/apache/calcite/tools/Programs.java,251,final Program program2 = ofRules(list);
core/src/main/java/org/apache/calcite/tools/Programs.java,253,program = sequence(program1, program2);
core/src/main/java/org/apache/calcite/tools/Programs.java,272,return new Program() {
core/src/main/java/org/apache/calcite/tools/Programs.java,273,public RelNode run(RelOptPlanner planner, RelNode rel,
core/src/main/java/org/apache/calcite/tools/Programs.java,275,return null;
core/src/main/java/org/apache/calcite/tools/Programs.java,289,new Program() {
core/src/main/java/org/apache/calcite/tools/Programs.java,290,public RelNode run(RelOptPlanner planner, RelNode rel,
core/src/main/java/org/apache/calcite/tools/Programs.java,292,final RelNode rootRel2 =
core/src/main/java/org/apache/calcite/tools/Programs.java,294,? rel
core/src/main/java/org/apache/calcite/tools/Programs.java,295,: planner.changeTraits(rel, requiredOutputTraits);
core/src/main/java/org/apache/calcite/tools/Programs.java,296,assert rootRel2 != null;
core/src/main/java/org/apache/calcite/tools/Programs.java,298,planner.setRoot(rootRel2);
core/src/main/java/org/apache/calcite/tools/Programs.java,299,final RelOptPlanner planner2 = planner.chooseDelegate();
core/src/main/java/org/apache/calcite/tools/Programs.java,300,final RelNode rootRel3 = planner2.findBestExp();
core/src/main/java/org/apache/calcite/tools/Programs.java,301,assert rootRel3 != null : "could not implement exp";
core/src/main/java/org/apache/calcite/tools/Programs.java,302,return rootRel3;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,67,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,102,private static final Function<RexNode, String> FN_TYPE =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,103,new Function<RexNode, String>() {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,104,public String apply(RexNode input) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,105,return input + ": " + input.getType();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,191,return new RelBuilderFactory() {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,192,public RelBuilder create(RelOptCluster cluster, RelOptSchema schema) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,193,return new RelBuilder(context, cluster, schema);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,334,Preconditions.checkNotNull(alias);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,335,Preconditions.checkNotNull(fieldName);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,438,+ "; operands: " + Lists.transform(operandList, FN_TYPE));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,541,return groupKey(ImmutableList.<RexNode>of());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,593,new Function<ImmutableBitSet, ImmutableList<RexNode>>() {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,594,public ImmutableList<RexNode> apply(ImmutableBitSet input) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,595,return fields(ImmutableIntList.of(input.toArray()));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,714,return project(nodes, ImmutableList.<String>of());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,996,ImmutableSet.<CorrelationId>of());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1000,return join(joinType, condition, ImmutableSet.<CorrelationId>of());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1245,return sortLimit(offset, fetch, ImmutableList.<RexNode>of());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1395,final List<RexNode> exprList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1405,Lists.transform(
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1406,aggregateCalls, new Function<AggregateCall, AggCall>() {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1407,public AggCall apply(AggregateCall input) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1408,return new AggCallImpl2(input);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1452,this.nodes = Preconditions.checkNotNull(nodes);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1493,this.aggregateCall = Preconditions.checkNotNull(aggregateCall);
core/src/main/java/org/apache/calcite/util/BitSets.java,86,return new Iterable<Integer>() {
core/src/main/java/org/apache/calcite/util/BitSets.java,87,public Iterator<Integer> iterator() {
core/src/main/java/org/apache/calcite/util/BitSets.java,88,return new Iterator<Integer>() {
core/src/main/java/org/apache/calcite/util/BitSets.java,89,int i = bitSet.nextSetBit(0);
core/src/main/java/org/apache/calcite/util/BitSets.java,91,public boolean hasNext() {
core/src/main/java/org/apache/calcite/util/BitSets.java,92,return i >= 0;
core/src/main/java/org/apache/calcite/util/BitSets.java,95,public Integer next() {
core/src/main/java/org/apache/calcite/util/BitSets.java,96,int prev = i;
core/src/main/java/org/apache/calcite/util/BitSets.java,97,i = bitSet.nextSetBit(i + 1);
core/src/main/java/org/apache/calcite/util/BitSets.java,98,return prev;
core/src/main/java/org/apache/calcite/util/BitSets.java,101,public void remove() {
core/src/main/java/org/apache/calcite/util/BitSets.java,102,throw new UnsupportedOperationException();
core/src/main/java/org/apache/calcite/util/Compatible.java,25,import java.lang.reflect.InvocationHandler;
core/src/main/java/org/apache/calcite/util/Compatible.java,73,new Class<?>[] {Compatible.class},
core/src/main/java/org/apache/calcite/util/Compatible.java,74,new InvocationHandler() {
core/src/main/java/org/apache/calcite/util/Compatible.java,76,throws Throwable {
core/src/main/java/org/apache/calcite/util/Compatible.java,77,if (method.getName().equals("asMap")) {
core/src/main/java/org/apache/calcite/util/Compatible.java,79,try {
core/src/main/java/org/apache/calcite/util/Compatible.java,80,final Method guavaMethod = Maps.class.getMethod(
core/src/main/java/org/apache/calcite/util/Compatible.java,81,method.getName(), method.getParameterTypes());
core/src/main/java/org/apache/calcite/util/Compatible.java,82,return guavaMethod.invoke(null, args);
core/src/main/java/org/apache/calcite/util/Compatible.java,84,Set set = (Set) args[0];
core/src/main/java/org/apache/calcite/util/Compatible.java,85,Function function = (Function) args[1];
core/src/main/java/org/apache/calcite/util/Compatible.java,86,return CompatibleGuava11.asMap(set, function);
core/src/main/java/org/apache/calcite/util/Compatible.java,89,if (method.getName().equals("navigableSet")) {
core/src/main/java/org/apache/calcite/util/Compatible.java,90,ImmutableSortedSet set = (ImmutableSortedSet) args[0];
core/src/main/java/org/apache/calcite/util/Compatible.java,91,return CompatibleGuava11.navigableSet(set);
core/src/main/java/org/apache/calcite/util/Compatible.java,93,if (method.getName().equals("navigableMap")) {
core/src/main/java/org/apache/calcite/util/Compatible.java,94,ImmutableSortedMap map = (ImmutableSortedMap) args[0];
core/src/main/java/org/apache/calcite/util/Compatible.java,95,return CompatibleGuava11.navigableMap(map);
core/src/main/java/org/apache/calcite/util/Compatible.java,97,if (method.getName().equals("immutableNavigableMap")) {
core/src/main/java/org/apache/calcite/util/Compatible.java,98,Map map = (Map) args[0];
core/src/main/java/org/apache/calcite/util/Compatible.java,99,ImmutableSortedMap sortedMap = ImmutableSortedMap.copyOf(map);
core/src/main/java/org/apache/calcite/util/Compatible.java,100,return CompatibleGuava11.navigableMap(sortedMap);
core/src/main/java/org/apache/calcite/util/Compatible.java,102,if (method.getName().equals("setSchema")) {
core/src/main/java/org/apache/calcite/util/Compatible.java,103,Connection connection = (Connection) args[0];
core/src/main/java/org/apache/calcite/util/Compatible.java,104,String schema = (String) args[1];
core/src/main/java/org/apache/calcite/util/Compatible.java,106,connection.getClass().getMethod("setSchema", String.class);
core/src/main/java/org/apache/calcite/util/Compatible.java,107,return method1.invoke(connection, schema);
core/src/main/java/org/apache/calcite/util/Compatible.java,109,if (method.getName().equals("getParameterName")) {
core/src/main/java/org/apache/calcite/util/Compatible.java,110,final Method m = (Method) args[0];
core/src/main/java/org/apache/calcite/util/Compatible.java,111,final int i = (Integer) args[1];
core/src/main/java/org/apache/calcite/util/Compatible.java,112,try {
core/src/main/java/org/apache/calcite/util/Compatible.java,113,final Method method1 =
core/src/main/java/org/apache/calcite/util/Compatible.java,114,m.getClass().getMethod("getParameters");
core/src/main/java/org/apache/calcite/util/Compatible.java,115,Object parameters = method1.invoke(m);
core/src/main/java/org/apache/calcite/util/Compatible.java,116,final Object parameter = Array.get(parameters, i);
core/src/main/java/org/apache/calcite/util/Compatible.java,117,final Method method3 = parameter.getClass().getMethod("getName");
core/src/main/java/org/apache/calcite/util/Compatible.java,118,return method3.invoke(parameter);
core/src/main/java/org/apache/calcite/util/Compatible.java,120,return "arg" + i;
core/src/main/java/org/apache/calcite/util/Compatible.java,123,return null;
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,20,import com.google.common.base.Objects;
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,41,import static com.google.common.base.Preconditions.checkNotNull;
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,65,return super.retainAll(checkNotNull(c)); // GWT compatibility
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,81,checkNotNull(collection); // for GWT
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,231,this.set = checkNotNull(set);
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,232,this.function = checkNotNull(function);
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,328,return super.removeAll(checkNotNull(c));
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,341,return super.retainAll(checkNotNull(c));
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,378,if (com.google.common.base.Objects.equal(o, entry.getValue())) {
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,389,return super.removeAll(checkNotNull(c));
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,391,Set<K> toRemove = Sets.newHashSet();
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,403,return super.retainAll(checkNotNull(c));
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,405,Set<K> toRetain = Sets.newHashSet();
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,437,this.backingIterator = checkNotNull(backingIterator);
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,22,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,26,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,27,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,50,public static final Comparator<ImmutableBitSet> COMPARATOR =
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,51,new Comparator<ImmutableBitSet>() {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,52,public int compare(ImmutableBitSet o1, ImmutableBitSet o2) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,53,if (o1.equals(o2)) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,54,return 0;
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,56,if (o1.contains(o2)) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,57,return -1;
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,59,if (o2.contains(o1)) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,60,return 1;
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,62,return o1.compareTo(o2);
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,83,public static final Function<? super BitSet, ImmutableBitSet> FROM_BIT_SET =
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,84,new Function<BitSet, ImmutableBitSet>() {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,85,public ImmutableBitSet apply(BitSet input) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,86,return ImmutableBitSet.of(BitSets.toIter(input));
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,257,List<List<ImmutableBitSet>> singletons = Lists.newArrayList();
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,258,for (Integer bit : this) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,263,new Function<List<ImmutableBitSet>, ImmutableBitSet>() {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,264,public ImmutableBitSet apply(List<ImmutableBitSet> input) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,265,return ImmutableBitSet.union(input);
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,465,public int compareTo(ImmutableBitSet o) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,859,return Iterables.transform(bitSets,
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,860,new Function<ImmutableBitSet, ImmutableBitSet>() {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,861,public ImmutableBitSet apply(ImmutableBitSet bitSet) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,862,return bitSet.permute(map);
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,892,Maps.newTreeMap();
core/src/main/java/org/apache/calcite/util/ImmutableNullableList.java,22,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/util/ImmutableNullableList.java,205,private final List<E> contents = Lists.newArrayList();
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,94,s,
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,95,new Handler() {
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,96,public void range(int start, int end, boolean exclude) {
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,97,if (!exclude) {
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,98,bounds[0] = Math.min(bounds[0], start);
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,99,bounds[1] = Math.max(bounds[1], end);
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,139,s,
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,140,new Handler() {
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,141,public void range(int start, int end, boolean exclude) {
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,142,if (start <= n && n <= end) {
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,143,bs[0] = !exclude;
core/src/main/java/org/apache/calcite/util/Pair.java,221,return new Iterable<Pair<K, V>>() {
core/src/main/java/org/apache/calcite/util/Pair.java,222,public Iterator<Pair<K, V>> iterator() {
core/src/main/java/org/apache/calcite/util/Pair.java,223,final Iterator<? extends K> kIterator = ks.iterator();
core/src/main/java/org/apache/calcite/util/Pair.java,224,final Iterator<? extends V> vIterator = vs.iterator();
core/src/main/java/org/apache/calcite/util/Pair.java,226,return new Iterator<Pair<K, V>>() {
core/src/main/java/org/apache/calcite/util/Pair.java,227,public boolean hasNext() {
core/src/main/java/org/apache/calcite/util/Pair.java,228,return kIterator.hasNext() && vIterator.hasNext();
core/src/main/java/org/apache/calcite/util/Pair.java,231,public Pair<K, V> next() {
core/src/main/java/org/apache/calcite/util/Pair.java,235,public void remove() {
core/src/main/java/org/apache/calcite/util/Pair.java,236,kIterator.remove();
core/src/main/java/org/apache/calcite/util/Pair.java,237,vIterator.remove();
core/src/main/java/org/apache/calcite/util/Pair.java,279,return new Iterable<L>() {
core/src/main/java/org/apache/calcite/util/Pair.java,280,public Iterator<L> iterator() {
core/src/main/java/org/apache/calcite/util/Pair.java,281,final Iterator<? extends Map.Entry<L, R>> iterator =
core/src/main/java/org/apache/calcite/util/Pair.java,282,iterable.iterator();
core/src/main/java/org/apache/calcite/util/Pair.java,283,return new Iterator<L>() {
core/src/main/java/org/apache/calcite/util/Pair.java,284,public boolean hasNext() {
core/src/main/java/org/apache/calcite/util/Pair.java,285,return iterator.hasNext();
core/src/main/java/org/apache/calcite/util/Pair.java,288,public L next() {
core/src/main/java/org/apache/calcite/util/Pair.java,289,return iterator.next().getKey();
core/src/main/java/org/apache/calcite/util/Pair.java,292,public void remove() {
core/src/main/java/org/apache/calcite/util/Pair.java,293,iterator.remove();
core/src/main/java/org/apache/calcite/util/Pair.java,310,return new Iterable<R>() {
core/src/main/java/org/apache/calcite/util/Pair.java,311,public Iterator<R> iterator() {
core/src/main/java/org/apache/calcite/util/Pair.java,312,final Iterator<? extends Map.Entry<L, R>> iterator =
core/src/main/java/org/apache/calcite/util/Pair.java,313,iterable.iterator();
core/src/main/java/org/apache/calcite/util/Pair.java,314,return new Iterator<R>() {
core/src/main/java/org/apache/calcite/util/Pair.java,315,public boolean hasNext() {
core/src/main/java/org/apache/calcite/util/Pair.java,316,return iterator.hasNext();
core/src/main/java/org/apache/calcite/util/Pair.java,319,public R next() {
core/src/main/java/org/apache/calcite/util/Pair.java,320,return iterator.next().getValue();
core/src/main/java/org/apache/calcite/util/Pair.java,323,public void remove() {
core/src/main/java/org/apache/calcite/util/Pair.java,324,iterator.remove();
core/src/main/java/org/apache/calcite/util/Pair.java,367,return new Iterable<Pair<T, T>>() {
core/src/main/java/org/apache/calcite/util/Pair.java,368,public Iterator<Pair<T, T>> iterator() {
core/src/main/java/org/apache/calcite/util/Pair.java,369,final Iterator<T> iterator = iterable.iterator();
core/src/main/java/org/apache/calcite/util/Pair.java,370,if (!iterator.hasNext()) {
core/src/main/java/org/apache/calcite/util/Pair.java,373,final T first = iterator.next();
core/src/main/java/org/apache/calcite/util/Pair.java,374,return new Iterator<Pair<T, T>>() {
core/src/main/java/org/apache/calcite/util/Pair.java,375,T previous = first;
core/src/main/java/org/apache/calcite/util/Pair.java,377,public boolean hasNext() {
core/src/main/java/org/apache/calcite/util/Pair.java,378,return iterator.hasNext();
core/src/main/java/org/apache/calcite/util/Pair.java,381,public Pair<T, T> next() {
core/src/main/java/org/apache/calcite/util/Pair.java,382,final T current = iterator.next();
core/src/main/java/org/apache/calcite/util/Pair.java,383,final Pair<T, T> pair = of(previous, current);
core/src/main/java/org/apache/calcite/util/Pair.java,384,previous = current;
core/src/main/java/org/apache/calcite/util/Pair.java,385,return pair;
core/src/main/java/org/apache/calcite/util/Pair.java,388,public void remove() {
core/src/main/java/org/apache/calcite/util/Pair.java,389,throw new UnsupportedOperationException("remove");
core/src/main/java/org/apache/calcite/util/Pair.java,407,return new Iterable<Pair<T, T>>() {
core/src/main/java/org/apache/calcite/util/Pair.java,408,public Iterator<Pair<T, T>> iterator() {
core/src/main/java/org/apache/calcite/util/Pair.java,409,final Iterator<T> iterator = iterable.iterator();
core/src/main/java/org/apache/calcite/util/Pair.java,410,if (!iterator.hasNext()) {
core/src/main/java/org/apache/calcite/util/Pair.java,413,final T first = iterator.next();
core/src/main/java/org/apache/calcite/util/Pair.java,414,return new Iterator<Pair<T, T>>() {
core/src/main/java/org/apache/calcite/util/Pair.java,415,public boolean hasNext() {
core/src/main/java/org/apache/calcite/util/Pair.java,416,return iterator.hasNext();
core/src/main/java/org/apache/calcite/util/Pair.java,419,public Pair<T, T> next() {
core/src/main/java/org/apache/calcite/util/Pair.java,420,return of(first, iterator.next());
core/src/main/java/org/apache/calcite/util/Pair.java,423,public void remove() {
core/src/main/java/org/apache/calcite/util/Pair.java,424,throw new UnsupportedOperationException("remove");
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,509,unseen.addAll(getNonChildren());
core/src/main/java/org/apache/calcite/util/ReflectUtil.java,295,Collections.<Class>emptyList());
core/src/main/java/org/apache/calcite/util/ReflectUtil.java,436,Collections.<Class>emptyList());
core/src/main/java/org/apache/calcite/util/TryThreadLocal.java,53,return new Memo() {
core/src/main/java/org/apache/calcite/util/TryThreadLocal.java,54,public void close() {
core/src/main/java/org/apache/calcite/util/TryThreadLocal.java,55,if (previous == initialValue) {
core/src/main/java/org/apache/calcite/util/TryThreadLocal.java,56,remove();
core/src/main/java/org/apache/calcite/util/TryThreadLocal.java,58,set(previous);
core/src/main/java/org/apache/calcite/util/UnmodifiableArrayList.java,19,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/util/UnmodifiableArrayList.java,43,this.elements = Preconditions.checkNotNull(elements);
core/src/main/java/org/apache/calcite/util/Util.java,31,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/util/Util.java,87,import javax.annotation.Nullable;
core/src/main/java/org/apache/calcite/util/Util.java,134,.build(
core/src/main/java/org/apache/calcite/util/Util.java,135,new CacheLoader<Class, Map<String, Enum>>() {
core/src/main/java/org/apache/calcite/util/Util.java,138,return enumConstants(clazz);
core/src/main/java/org/apache/calcite/util/Util.java,1694,return new Iterable<E>() {
core/src/main/java/org/apache/calcite/util/Util.java,1695,public Iterator<E> iterator() {
core/src/main/java/org/apache/calcite/util/Util.java,1696,return cast(iterable.iterator(), clazz);
core/src/main/java/org/apache/calcite/util/Util.java,1722,return new Iterable<E>() {
core/src/main/java/org/apache/calcite/util/Util.java,1723,public Iterator<E> iterator() {
core/src/main/java/org/apache/calcite/util/Util.java,1724,return new Filterator<>(iterable.iterator(), includeFilter);
core/src/main/java/org/apache/calcite/util/Util.java,1990,return v0 != null ? v0 : ImmutableList.<T>of();
core/src/main/java/org/apache/calcite/util/Util.java,2249,public static <K, V> Map<K, V> asIndexMap(
core/src/main/java/org/apache/calcite/util/Util.java,2253,Collections2.transform(values,
core/src/main/java/org/apache/calcite/util/Util.java,2254,new Function<V, Map.Entry<K, V>>() {
core/src/main/java/org/apache/calcite/util/Util.java,2255,public Map.Entry<K, V> apply(@Nullable V input) {
core/src/main/java/org/apache/calcite/util/Util.java,2256,return Pair.of(function.apply(input), input);
core/src/main/java/org/apache/calcite/util/XmlOutput.java,553,translationVector.addAll(Collections.<String>nCopies(count, null));
core/src/main/java/org/apache/calcite/util/XmlOutput.java,564,translationVector.toArray(new String[translationVector.size()]);
core/src/main/java/org/apache/calcite/util/graph/BreadthFirstIterator.java,44,return new Iterable<V>() {
core/src/main/java/org/apache/calcite/util/graph/BreadthFirstIterator.java,45,public Iterator<V> iterator() {
core/src/main/java/org/apache/calcite/util/graph/BreadthFirstIterator.java,46,return new BreadthFirstIterator<V, E>(graph, root);
core/src/main/java/org/apache/calcite/util/graph/DefaultDirectedGraph.java,48,return create(DefaultEdge.<V>factory());
core/src/main/java/org/apache/calcite/util/graph/DefaultEdge.java,43,return new DirectedGraph.EdgeFactory<V, DefaultEdge>() {
core/src/main/java/org/apache/calcite/util/graph/DefaultEdge.java,44,public DefaultEdge createEdge(V v0, V v1) {
core/src/main/java/org/apache/calcite/util/graph/DefaultEdge.java,45,return new DefaultEdge(v0, v1);
core/src/main/java/org/apache/calcite/util/graph/DepthFirstIterator.java,19,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/util/graph/DepthFirstIterator.java,20,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/util/graph/DepthFirstIterator.java,45,final List<V> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/util/graph/DepthFirstIterator.java,46,buildListRecurse(list, Sets.<V>newHashSet(), graph, start);
core/src/main/java/org/apache/calcite/util/graph/TopologicalOrderIterator.java,45,return new Iterable<V>() {
core/src/main/java/org/apache/calcite/util/graph/TopologicalOrderIterator.java,46,public Iterator<V> iterator() {
core/src/main/java/org/apache/calcite/util/graph/TopologicalOrderIterator.java,47,return new TopologicalOrderIterator<V, E>(graph);
core/src/main/java/org/apache/calcite/util/javac/JavaCompilerArgs.java,64,setStringArray(list.toArray(new String[list.size()]));
core/src/main/java/org/apache/calcite/util/javac/JavaCompilerArgs.java,93,return argsList.toArray(new String[argsList.size()]);
core/src/main/java/org/apache/calcite/util/javac/JavaCompilerArgs.java,101,return fileNameList.toArray(new String[fileNameList.size()]);
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,25,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,222,Iterables.transform(bitSets,
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,223,new Function<ImmutableBitSet, ImmutableBitSet>() {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,224,public ImmutableBitSet apply(ImmutableBitSet input1) {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,225,return Mappings.apply(mapping, input1);
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,349,Function<Integer, Integer> function,
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,609,new Function<Integer, Integer>() {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,610,public Integer apply(Integer source) {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,611,int source2 = source - offset;
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,613,? null
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,614,: mapping.getTargetOpt(source2);
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,655,new Function<Integer, Integer>() {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,656,public Integer apply(Integer source) {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,657,int target = mapping.getTargetOpt(source);
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,658,return target < 0 ? null : target + offset;
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,684,new Function<Integer, Integer>() {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,685,public Integer apply(Integer source) {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,686,final int source2 = source - offset;
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,687,if (source2 < 0 || source2 >= mapping.getSourceCount()) {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,688,return null;
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,690,int target = mapping.getTargetOpt(source2);
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,691,if (target < 0) {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,692,return null;
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,694,return target + offset;
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,719,return new Iterable<IntPair>() {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,720,public Iterator<IntPair> iterator() {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,721,return invert(pairs.iterator());
core/src/main/java/org/apache/calcite/util/trace/CalciteTrace.java,61,new ThreadLocal<Function2<Void, File, String>>() {
core/src/main/java/org/apache/calcite/util/trace/CalciteTrace.java,63,return Functions.ignore2();
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,305,this.fieldTypes = fieldTypes.toArray(new CsvFieldType[fieldTypes.size()]);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,25,import java.io.FilenameFilter;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,69,File[] files = directoryFile.listFiles(
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,70,new FilenameFilter() {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,71,public boolean accept(File dir, String name) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,72,final String nameSansGz = trim(name, ".gz");
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,74,|| nameSansGz.endsWith(".json");
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,83,cellContent = new CellContent() {
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,84,public String get(int c) {
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,85,return "  ";
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,89,cellContent = new CellContent() {
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,90,public String get(int c) {
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,91,String s = region(c) + "";
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,92,return s.length() == 1 ? " " + s : s;
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,116,cellContent = new CellContent() {
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,117,public String get(int c) {
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,118,return solutionSet.contains(c) ? "* " : "  ";
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,355,CellContent SPACE = new CellContent() {
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,356,public String get(int c) {
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,357,return "  ";
example/function/src/main/java/org/apache/calcite/example/maze/MazeTable.java,24,import org.apache.calcite.linq4j.function.Function1;
example/function/src/main/java/org/apache/calcite/example/maze/MazeTable.java,105,new Function1<String, Object[]>() {
example/function/src/main/java/org/apache/calcite/example/maze/MazeTable.java,106,public Object[] apply(String s) {
example/function/src/main/java/org/apache/calcite/example/maze/MazeTable.java,107,return new Object[] {s};
linq4j/src/main/java/org/apache/calcite/linq4j/DefaultQueryable.java,54,this(QueryableRecorder.<T>instance());
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,369,return (int) longCount(enumerable, Functions.<TSource>truePredicate1());
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,401,return Linq4j.asEnumerable(
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,402,new Iterable<TSource>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,403,public Iterator<TSource> iterator() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,404,return new Iterator<TSource>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,406,private boolean nonFirst;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,408,private Iterator<TSource> rest;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,410,public boolean hasNext() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,411,return !nonFirst || rest.hasNext();
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,414,public TSource next() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,415,if (nonFirst) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,416,return rest.next();
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,418,final TSource first = os.current();
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,419,nonFirst = true;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,420,rest = Linq4j.enumeratorIterator(os);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,421,return first;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,425,public void remove() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,426,throw new UnsupportedOperationException("remove");
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,679,.select(new Function1<Grouping<TKey, TSource>, TResult>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,680,public TResult apply(Grouping<TKey, TSource> group) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,681,return resultSelector.apply(group.getKey(), group);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,697,.select(new Function1<Grouping<TKey, TSource>, TResult>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,698,public TResult apply(Grouping<TKey, TSource> group) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,699,return resultSelector.apply(group.getKey(), group);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,715,.select(new Function1<Grouping<TKey, TElement>, TResult>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,716,public TResult apply(Grouping<TKey, TElement> group) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,717,return resultSelector.apply(group.getKey(), group);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,735,.select(new Function1<Grouping<TKey, TElement>, TResult>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,736,public TResult apply(Grouping<TKey, TElement> group) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,737,return resultSelector.apply(group.getKey(), group);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,905,inners == null ? Linq4j.<TInner>emptyEnumerable() : inners);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,946,inners == null ? Linq4j.<TInner>emptyEnumerable() : inners);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1403,return longCount(source, Functions.<TSource>truePredicate1());
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1562,return (Function2<TSource, TSource, TSource>) Extensions.COMPARABLE_MIN;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1568,return (Function2<TSource, TSource, TSource>) Extensions.COMPARABLE_MAX;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1697,Functions.<TSource, TResult>ofTypePredicate(clazz));
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1721,Functions.<TSource>identitySelector());
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1732,return orderBy(source, keySelector, Collections.<TKey>reverseOrder());
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2195,return skipWhile(source, new Predicate2<TSource, Integer>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2196,public boolean apply(TSource v1, Integer v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2198,return v2 < count;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2211,Functions.<TSource, Integer>toPredicate2(predicate));
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2339,source, new Predicate2<TSource, Integer>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2340,public boolean apply(TSource v1, Integer v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2342,return v2 < count;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2354,source, new Predicate2<TSource, Long>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2355,public boolean apply(TSource v1, Long v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2357,return v2 < count;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2369,Functions.<TSource, Integer>toPredicate2(predicate));
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2421,Extensions.<TKey>comparableComparator(), false);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2442,Extensions.<TKey>comparableComparator(), true);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2464,return toMap(source, keySelector, Functions.<TSource>identitySelector());
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2475,return toMap(source, keySelector, Functions.<TSource>identitySelector(), comparer);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2546,return toLookup(source, keySelector, Functions.<TSource>identitySelector());
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2558,source, keySelector, Functions.<TSource>identitySelector(), comparer);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2652,return new Function1<Wrapped<TSource>, TSource>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2653,public TSource apply(Wrapped<TSource> a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2654,return a0.element;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2661,return new Function1<TSource, Wrapped<TSource>>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2662,public Wrapped<TSource> apply(TSource a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2663,return Wrapped.upAs(comparer, a0);
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,114,new Function2<BigDecimal, BigDecimal, BigDecimal>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,115,public BigDecimal apply(BigDecimal v1, BigDecimal v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,116,return v1.add(v2);
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,121,new Function2<Float, Float, Float>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,122,public Float apply(Float v1, Float v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,123,return v1 + v2;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,128,new Function2<Double, Double, Double>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,129,public Double apply(Double v1, Double v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,130,return v1 + v2;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,135,new Function2<Integer, Integer, Integer>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,136,public Integer apply(Integer v1, Integer v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,137,return v1 + v2;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,142,new Function2<Long, Long, Long>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,143,public Long apply(Long v1, Long v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,144,return v1 + v2;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,148,static final Function2 COMPARABLE_MIN =
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,149,new Function2<Comparable, Comparable, Comparable>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,150,public Comparable apply(Comparable v1, Comparable v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,151,return v1 == null || v1.compareTo(v2) > 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,155,static final Function2 COMPARABLE_MAX =
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,156,new Function2<Comparable, Comparable, Comparable>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,157,public Comparable apply(Comparable v1, Comparable v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,158,return v1 == null || v1.compareTo(v2) < 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,163,new Function2<Float, Float, Float>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,164,public Float apply(Float v1, Float v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,165,return v1 == null || v1.compareTo(v2) > 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,170,new Function2<Float, Float, Float>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,171,public Float apply(Float v1, Float v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,172,return v1 == null || v1.compareTo(v2) < 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,177,new Function2<Double, Double, Double>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,178,public Double apply(Double v1, Double v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,179,return v1 == null || v1.compareTo(v2) > 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,184,new Function2<Double, Double, Double>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,185,public Double apply(Double v1, Double v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,186,return v1 == null || v1.compareTo(v2) < 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,191,new Function2<Integer, Integer, Integer>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,192,public Integer apply(Integer v1, Integer v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,193,return v1 == null || v1.compareTo(v2) > 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,198,new Function2<Integer, Integer, Integer>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,199,public Integer apply(Integer v1, Integer v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,200,return v1 == null || v1.compareTo(v2) < 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,205,new Function2<Long, Long, Long>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,206,public Long apply(Long v1, Long v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,207,return v1 == null || v1.compareTo(v2) > 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,212,new Function2<Long, Long, Long>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,213,public Long apply(Long v1, Long v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,214,return v1 == null || v1.compareTo(v2) < 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,231,private static final Comparator<Comparable> COMPARABLE_COMPARATOR =
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,232,new Comparator<Comparable>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,233,public int compare(Comparable o1, Comparable o2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,235,return o1.compareTo(o2);
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,241,return (Comparator<T>) (Comparator) COMPARABLE_COMPARATOR;
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,21,import com.google.common.collect.Lists;
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,393,return new Iterable<List<T>>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,394,public Iterator<List<T>> iterator() {
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,395,final List<Enumerator<T>> enumerators = Lists.newArrayList();
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,396,for (Iterable<T> iterable : iterables) {
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,397,enumerators.add(iterableEnumerator(iterable));
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,399,return enumeratorIterator(
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,55,return new Iterable<Ord<E>>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,56,public Iterator<Ord<E>> iterator() {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,57,return zip(iterable.iterator());
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,117,return new Iterable<Ord<E>>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,118,public Iterator<Ord<E>> iterator() {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,119,return new Iterator<Ord<E>>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,120,int i = elementList.size() - 1;
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,122,public boolean hasNext() {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,123,return i >= 0;
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,126,public Ord<E> next() {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,127,return Ord.of(i, elementList.get(i--));
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,130,public void remove() {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,131,throw new UnsupportedOperationException("remove");
linq4j/src/main/java/org/apache/calcite/linq4j/QueryableDefaults.java,900,Functions.<T, Integer>toPredicate2(predicate.getFunction())));
linq4j/src/main/java/org/apache/calcite/linq4j/QueryableDefaults.java,1036,Functions.<T, Integer>toPredicate2(predicate.getFunction())));
linq4j/src/main/java/org/apache/calcite/linq4j/function/Function1.java,31,Function1<Object, Object> IDENTITY = new Function1<Object, Object>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Function1.java,32,public Object apply(Object v0) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Function1.java,33,return v0;
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,41,Collections.<Class<? extends Function>, Class>unmodifiableMap(
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,78,private static final Function1 CONSTANT_NULL_FUNCTION1 =
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,79,new Function1() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,80,public Object apply(Object s) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,81,return null;
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,86,new Function1<Object, String>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,87,public String apply(Object a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,88,return a0.toString();
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,112,return new Function1<T, R>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,113,public R apply(T s) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,114,return r;
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,198,return new Predicate1<T>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,199,public boolean apply(T v1) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,200,return v1 == null || clazz.isInstance(v1);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,207,return new Predicate2<T1, T2>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,208,public boolean apply(T1 v1, T2 v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,209,return p1.apply(v1);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,219,return new Predicate2<T1, T2>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,220,public boolean apply(T1 v1, T2 v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,221,return function.apply(v1, v2);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,231,return new Predicate1<T>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,232,public boolean apply(T v1) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,233,return function.apply(v1);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,264,return new Function1<T1, Integer>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,265,public Integer apply(T1 a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,266,return f.apply(a0);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,276,return new Function1<T1, Double>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,277,public Double apply(T1 a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,278,return f.apply(a0);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,288,return new Function1<T1, Long>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,289,public Long apply(T1 a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,290,return f.apply(a0);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,300,return new Function1<T1, Float>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,301,public Float apply(T1 a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,302,return f.apply(a0);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate1.java,30,Predicate1<Object> TRUE = new Predicate1<Object>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate1.java,31,public boolean apply(Object v0) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate1.java,32,return true;
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate1.java,41,Predicate1<Object> FALSE = new Predicate1<Object>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate1.java,42,public boolean apply(Object v0) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate1.java,43,return false;
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate2.java,31,Predicate2<Object, Object> TRUE = new Predicate2<Object, Object>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate2.java,32,public boolean apply(Object v0, Object v1) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate2.java,33,return true;
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate2.java,42,Predicate2<Object, Object> FALSE = new Predicate2<Object, Object>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate2.java,43,public boolean apply(Object v0, Object v1) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate2.java,44,return false;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,46,new Function1<ClassDeclarationFinder, ClassDeclarationFinder>() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,47,public ClassDeclarationFinder apply(ClassDeclarationFinder a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,48,return new DeterministicCodeOptimizer(a0);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,98,return new Function1<ClassDeclarationFinder, ClassDeclarationFinder>() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,99,public ClassDeclarationFinder apply(ClassDeclarationFinder a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,100,try {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,101,return constructor.newInstance(a0);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,103,throw new IllegalStateException(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,106,throw new IllegalStateException(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,109,throw new IllegalStateException(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,19,import com.google.common.base.Function;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,20,import com.google.common.collect.Lists;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,151,return writer.append("new java.math.BigDecimal(\"").append(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,152,bigDecimal.toString()).append("\")");
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,157,return writer.append("new java.math.BigInteger(\"").append(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,158,bigInteger.toString()).append("\")");
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,177,Lists.transform(Arrays.asList(value.getClass().getFields()),
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,178,new Function<Field, Object>() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,179,public Object apply(Field field) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,180,try {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,181,return field.get(value);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,183,throw new RuntimeException(e);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,19,import com.google.common.base.Function;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,66,Lists.transform(parameters,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,67,new Function<ParameterExpression, String>() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,68,public String apply(ParameterExpression parameter) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,69,final String modifiers =
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,70,Modifier.toString(parameter.modifier);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,72,+ Types.className(parameter.getType()) + " "
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,73,+ parameter.name;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/DeterministicCodeOptimizer.java,71,ImmutableSet.<Class>of(Byte.class, Boolean.class, Short.class,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,527,return new ConditionalExpression(Arrays.<Node>asList(test, ifFalse, ifTrue),
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,965,return new ConditionalStatement(Arrays.<Node>asList(test, ifTrue));
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,974,return new ConditionalStatement(Arrays.<Node>asList(test, ifTrue, ifFalse));
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1912,return new_(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1913,constructor.getDeclaringClass(), Collections.<Expression>emptyList());
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1921,return new_(type, Collections.<Expression>emptyList());
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,2835,return new TryStatement(body, Collections.<CatchBlock>emptyList(),
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,2836,finally_);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,22,import java.lang.reflect.InvocationHandler;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,28,import java.util.Collections;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,61,this((Class) function.getClass(), function, null,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,62,Collections.<ParameterExpression>emptyList());
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,77,return new Invokable() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,78,public Object dynamicInvoke(Object... args) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,79,final Evaluator evaluator = new Evaluator();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,80,for (int i = 0; i < args.length; i++) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,81,evaluator.push(parameterList.get(i), args[i]);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,83,return evaluator.evaluate(body);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,97,new Class[]{Types.toClass(type)},
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,98,new InvocationHandler() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,100,throws Throwable {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,101,return x.dynamicInvoke(args);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,222,return ((Class) type).getDeclaredMethods()[0];
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodDeclaration.java,19,import com.google.common.base.Function;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodDeclaration.java,67,Lists.transform(parameters,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodDeclaration.java,68,new Function<ParameterExpression, String>() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodDeclaration.java,69,public String apply(ParameterExpression a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodDeclaration.java,70,return a0.declString();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Types.java,156,return classes.toArray(new Class[classes.size()]);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Types.java,164,return classes.toArray(new Class[classes.size()]);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Types.java,560,return typeArguments.toArray(new Type[typeArguments.size()]);
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,83,return (Map) a0;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,92,return convert(a0.get(fieldName), fieldClass);
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,104,Object[] objects = new Object[fields.size()];
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,105,for (int i = 0; i < fields.size(); i++) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,106,final Map.Entry<String, Class> field = fields.get(i);
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,107,final String name = field.getKey();
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,108,objects[i] = convert(a0.get(name), field.getValue());
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,110,return objects;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverter.java,42,import com.google.common.base.Function;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverter.java,154,return Lists.transform(values,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverter.java,155,new Function<T, Expression>() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverter.java,156,public Expression apply(T a0) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverter.java,157,return Expressions.constant(a0);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,26,import com.google.common.base.Preconditions;
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,139,this.op = Preconditions.checkNotNull(op);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,140,this.pos = Preconditions.checkNotNull(pos);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,157,this.target = Preconditions.checkNotNull(target);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,167,this.name = Preconditions.checkNotNull(name);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,335,this.relation = Preconditions.checkNotNull(relation);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,345,this.relation = Preconditions.checkNotNull(relation);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,355,this.value = Preconditions.checkNotNull(value);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,410,this.value = Preconditions.checkNotNull(value);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,468,this.id = Preconditions.checkNotNull(id);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,469,this.type = Preconditions.checkNotNull(type);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,33,import org.apache.calcite.util.ImmutableBitSet;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,42,import java.util.Collections;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,115,return Statistics.of(rowCount, Collections.<ImmutableBitSet>emptyList());
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,168,return new Iterable<E>() {
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,169,public Iterator<E> iterator() {
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,170,return new Iterator<E>() {
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,171,public boolean hasNext() {
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,172,return enumeration.hasMoreElements();
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,175,public E next() {
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,176,return enumeration.nextElement();
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,179,public void remove() {
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,180,throw new UnsupportedOperationException();
spark/src/main/java/org/apache/calcite/adapter/spark/JdbcToSparkConverter.java,93,primitives.toArray(new Primitive[primitives.size()])));
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,396,file.map(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,397,new Function<String, Object>() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,399,return s.substring(0, Math.min(s.length(), 1));
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,404,file.groupBy(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,405,new Function<String, String>() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,407,return s.substring(0, Math.min(s.length(), 1));
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,411,).map(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,433,rdd.groupBy(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,434,new Function<Integer, Integer>() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,435,public Integer call(Integer integer) {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,436,return integer % 2;
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,440,file.flatMap(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,441,new FlatMapFunction<String, Pair<String, Integer>>() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,443,if (!x.startsWith("a")) {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,446,return Collections.singletonList(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,417,return convert;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,120,arguments.add(null);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1778,boolean forceNullable) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1832,SqlValidatorScope usingScope2 = usingScope;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1833,if (call.operandCount() > 2) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1834,usingScope2 = null;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1840,usingScope2,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1845,forceNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1852,if (call.operandCount() > 2) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1872,forceNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1908,forceLeftNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1912,final SqlValidatorScope rightParentScope;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1913,if (rightIsLateral) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1914,rightParentScope = joinScope;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1916,rightParentScope = parentScope;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1920,rightParentScope,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1926,forceRightNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1941,registerNamespace(usingScope, alias, newNs, forceNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1952,forceNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1965,forceNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1977,case UNNEST:
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1984,usingScope,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2007,forceNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2017,forceNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2030,forceNullable);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2219,boolean correlInCurrentScope = ancestorScope == bb.scope;
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,399,final String schemaName = con.getSchema();
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,442,final String schemaName = connection.getSchema();
core/src/main/java/org/apache/calcite/jdbc/CalciteJdbc41Factory.java,95,Meta.Signature signature, TimeZone timeZone, Meta.Frame firstFrame) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,362,ImmutableList.of(new MetaCatalog(connection.getCatalog())));
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,371,Enumerable<MetaSchema> schemas(String catalog) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,379,connection.getCatalog(),
core/src/main/java/org/apache/calcite/jdbc/CalciteResultSet.java,48,Meta.Frame firstFrame) {
core/src/main/java/org/apache/calcite/jdbc/CalciteResultSet.java,70,Iterable<Object> iterable) {
core/src/main/java/org/apache/calcite/jdbc/CalciteResultSet.java,111,CalciteConnectionImpl getCalciteConnection() {
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,41,final String catalog = meta.getConnection().getCatalog();
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,53,final String catalog = meta.getConnection().getCatalog();
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,107,final RelOptLattice lattice = call.getPlanner().getLattice(table);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,111,lattice.getAggregate(
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,112,call.getPlanner(), aggregate.getGroupSet(), measures);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,28,import org.apache.commons.dbcp.BasicDataSource;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,232,childPreserveExprs = new ArrayList<RexNode>();
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,233,rightPreserveExprs = new ArrayList<RexNode>();
core/src/main/java/org/apache/calcite/rex/RexMultisetUtil.java,43,SqlStdOperatorTable.MULTISET_EXCEPT_ALL,
core/src/main/java/org/apache/calcite/rex/RexMultisetUtil.java,45,SqlStdOperatorTable.MULTISET_INTERSECT_ALL,
core/src/main/java/org/apache/calcite/rex/RexMultisetUtil.java,47,SqlStdOperatorTable.MULTISET_UNION_ALL,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,95,public static final SqlMultisetSetOperator MULTISET_UNION =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,96,new SqlMultisetSetOperator("MULTISET UNION", 14, false);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,101,public static final SqlMultisetSetOperator MULTISET_UNION_ALL =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,107,public static final SqlMultisetSetOperator MULTISET_EXCEPT =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,108,new SqlMultisetSetOperator("MULTISET EXCEPT", 14, false);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,113,public static final SqlMultisetSetOperator MULTISET_EXCEPT_ALL =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,119,public static final SqlMultisetSetOperator MULTISET_INTERSECT =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,120,new SqlMultisetSetOperator("MULTISET INTERSECT", 18, false);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,125,public static final SqlMultisetSetOperator MULTISET_INTERSECT_ALL =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1528,public static final SqlFunction FUSION =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1862,final Set<SqlKind> flags = EnumSet.noneOf(SqlKind.class);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1864,flags.clear();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1865,RexNode e = bb.convertSortExpression(order, flags);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1866,orderKeys.add(new RexFieldCollation(e, flags));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4160,public RexNode convertSortExpression(SqlNode expr, Set<SqlKind> flags) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4165,flags.add(expr.getKind());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4166,final SqlNode operand = ((SqlCall) expr).operand(0);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4167,return convertSortExpression(operand, flags);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4169,return convertExpression(expr);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,74,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,80,import java.util.Set;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,831,final Set<RelDataTypeFamily> families =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,832,Sets.newHashSet(RexUtil.families(types));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,833,if (families.size() < 2) {
core/src/main/java/org/apache/calcite/rel/core/Uncollect.java,126,rel.getCluster().getTypeFactory().builder();
core/src/main/java/org/apache/calcite/sql/validate/UnnestNamespace.java,23,import org.apache.calcite.sql.type.MultisetSqlType;
core/src/main/java/org/apache/calcite/sql/validate/UnnestNamespace.java,62,private RelDataType inferReturnType() {
core/src/main/java/org/apache/calcite/sql/validate/UnnestNamespace.java,63,final SqlNode operand = unnest.operand(0);
core/src/main/java/org/apache/calcite/sql/validate/UnnestNamespace.java,64,RelDataType type = validator.getValidatedNodeType(operand);
core/src/main/java/org/apache/calcite/sql/validate/UnnestNamespace.java,68,if (type.isStruct()) {
core/src/main/java/org/apache/calcite/sql/validate/UnnestNamespace.java,69,type = type.getFieldList().get(0).getType();
core/src/main/java/org/apache/calcite/sql/validate/UnnestNamespace.java,71,MultisetSqlType t = (MultisetSqlType) type;
core/src/main/java/org/apache/calcite/sql/validate/UnnestNamespace.java,72,return t.getComponentType();
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,327,return Arrays.asList(t0, t1).equals(o);
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,453,return o.equals(this);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,178,for (Ord<RexNode> o : Ord.zip(project.getProjects())) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,179,if (o.e instanceof RexInputRef) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,180,int sIdx = ((RexInputRef) o.e).getIndex();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,181,m.set(sIdx, o.i);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,182,columnsMappedBuilder.set(sIdx);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,188,final ImmutableBitSet columnsMapped = columnsMappedBuilder.build();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,189,for (RexNode r : inputInfo.pulledUpPredicates) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,199,if (RexLiteral.isNullLiteral(expr.e)) {
core/src/main/java/org/apache/calcite/sql/fun/SqlCoalesceFunction.java,48,ReturnTypes.LEAST_RESTRICTIVE,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1202,RelDataTypeFamily family1 = null;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1203,RelDataTypeFamily family2 = null;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1207,if (type1.getSqlTypeName() != null) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1208,family1 = type1.getSqlTypeName().getFamily();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1210,if (type2.getSqlTypeName() != null) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1211,family2 = type2.getSqlTypeName().getFamily();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1213,if (family1 == null) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1214,family1 = type1.getFamily();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1216,if (family2 == null) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1217,family2 = type2.getFamily();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,107,import java.util.LinkedHashSet;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,401,List<Map.Entry<String, RelDataType>> types,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,404,if (expandStar(selectItems, aliases, types, includeSystemVars, scope,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,440,types.add(Pair.of(alias, type));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,445,List<Map.Entry<String, RelDataType>> types, boolean includeSystemVars,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,510,types,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2795,for (int i = 0; i < list.size(); i++) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2796,SqlIdentifier id = (SqlIdentifier) list.get(i);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2822,SqlValidatorUtil.deriveNaturalJoinColumnList(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2823,leftRowType,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2824,rightRowType);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2894,if (Collections.frequency(rowType.getFieldNames(), name) > 1) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3470,assert fieldList.size() >= aliases.size();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3564,final List<Map.Entry<String, RelDataType>> types = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3567,types.add(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3568,Pair.of(SqlUtil.deriveAliasFromOrdinal(types.size()),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3584,types.add(targetField);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3586,return typeFactory.createStructType(types);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,51,import java.util.Collections;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,337,&& (Collections.frequency(rightNames, name) == 1)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2011,SqlValidatorUtil.deriveNaturalJoinColumnList(leftRowType,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2012,rightRowType);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2013,conditionExp = convertUsing(leftNamespace, rightNamespace,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2014,columnList);
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,19,import org.apache.calcite.avatica.AvaticaResultSet;
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,77,closed = true;
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,78,final CalciteConnectionImpl connection1 =
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,79,(CalciteConnectionImpl) connection;
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,80,connection1.server.removeStatement(handle);
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,81,if (openResultSet != null) {
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,82,AvaticaResultSet c = openResultSet;
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,83,openResultSet = null;
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,84,c.close();
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,88,connection1.getDriver().handler.onStatementClose(this);
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,66,static int nextId = 0;
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,98,protected int id;
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,115,this.id = nextId++;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,98,new JdbcJoinRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,99,new JdbcCalcRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,100,new JdbcProjectRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,101,new JdbcFilterRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,102,new JdbcAggregateRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,103,new JdbcSortRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,104,new JdbcUnionRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,105,new JdbcIntersectRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,106,new JdbcMinusRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,107,new JdbcTableModificationRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,108,new JdbcValuesRule(out));
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,132,super(clazz, in, out, description);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,275,private JdbcCalcRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,536,super(Sort.class, Convention.NONE, out, "JdbcSortRule");
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,626,private JdbcIntersectRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,670,private JdbcMinusRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,706,private JdbcTableModificationRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,777,private JdbcValuesRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,23,import org.apache.calcite.rel.logical.LogicalFilter;
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,54,LogicalFilter oldFilter = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,72,RelNode newFilterRel =
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,75,oldFilterCond.accept(rewriteShuttle));
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,221,expr = relBuilder.field(source);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,222,++source;
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,76,IntervalValue interval = (IntervalValue) value;
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,77,writer.keyword("INTERVAL");
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,78,if (interval.getSign() == -1) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,79,writer.print("-");
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,81,writer.literal("'" + value.toString() + "'");
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,82,writer.keyword(interval.intervalQualifier.toString());
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,167,private boolean useDefaultStartPrecision() {
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,215,private boolean useDefaultFractionalSecondPrecision() {
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,264,unparse(RelDataTypeSystem.DEFAULT, writer);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,267,public void unparse(RelDataTypeSystem typeSystem, SqlWriter writer) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,268,final String start = timeUnitRange.startUnit.name();
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,269,final int fractionalSecondPrecision =
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,270,getFractionalSecondPrecision(typeSystem);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,271,final int startPrecision = getStartPrecision(typeSystem);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,272,if (timeUnitRange.startUnit == TimeUnit.SECOND) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,273,if (!useDefaultFractionalSecondPrecision()) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,274,final SqlWriter.Frame frame = writer.startFunCall(start);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,275,writer.print(startPrecision);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,276,writer.sep(",", true);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,277,writer.print(getFractionalSecondPrecision(typeSystem));
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,278,writer.endList(frame);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,280,final SqlWriter.Frame frame = writer.startFunCall(start);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,281,writer.print(startPrecision);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,282,writer.endList(frame);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,284,writer.keyword(start);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,287,if (!useDefaultStartPrecision()) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,288,final SqlWriter.Frame frame = writer.startFunCall(start);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,289,writer.print(startPrecision);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,290,writer.endList(frame);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,292,writer.keyword(start);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,295,if (null != timeUnitRange.endUnit) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,296,writer.keyword("TO");
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,297,final String end = timeUnitRange.endUnit.name();
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,299,&& (!useDefaultFractionalSecondPrecision())) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,300,final SqlWriter.Frame frame = writer.startFunCall(end);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,301,writer.print(fractionalSecondPrecision);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,302,writer.endList(frame);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,304,writer.keyword(end);
core/src/main/java/org/apache/calcite/sql/fun/SqlDatetimeSubtractionOperator.java,50,InferTypes.FIRST_KNOWN,
core/src/main/java/org/apache/calcite/sql/fun/SqlDatetimeSubtractionOperator.java,51,OperandTypes.MINUS_DATE_OPERATOR);
core/src/main/java/org/apache/calcite/sql/fun/SqlDatetimeSubtractionOperator.java,65,final SqlWriter.Frame frame = writer.startList("(", ")");
core/src/main/java/org/apache/calcite/sql/fun/SqlDatetimeSubtractionOperator.java,66,call.operand(0).unparse(writer, leftPrec, rightPrec);
core/src/main/java/org/apache/calcite/sql/fun/SqlDatetimeSubtractionOperator.java,67,writer.sep("-");
core/src/main/java/org/apache/calcite/sql/fun/SqlDatetimeSubtractionOperator.java,68,call.operand(1).unparse(writer, leftPrec, rightPrec);
core/src/main/java/org/apache/calcite/sql/fun/SqlDatetimeSubtractionOperator.java,69,writer.endList(frame);
core/src/main/java/org/apache/calcite/sql/fun/SqlDatetimeSubtractionOperator.java,70,call.operand(2).unparse(writer, leftPrec, rightPrec);
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,433,public static final SqlSingleOperandTypeChecker MINUS_DATE_OPERATOR =
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,230,public RelOptPredicateList getPredicates(SemiJoin semiJoin,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,231,RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,232,RexBuilder rB = semiJoin.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,233,final RelNode left = semiJoin.getInput(0);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,234,final RelNode right = semiJoin.getInput(1);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,236,final RelOptPredicateList leftInfo = mq.getPulledUpPredicates(left);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,237,final RelOptPredicateList rightInfo = mq.getPulledUpPredicates(right);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,239,JoinConditionBasedPredicateInference jI =
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,240,new JoinConditionBasedPredicateInference(semiJoin,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,241,RexUtil.composeConjunction(rB, leftInfo.pulledUpPredicates, false),
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,242,RexUtil.composeConjunction(rB, rightInfo.pulledUpPredicates, false));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,244,return jI.inferPredicates(false);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,249,RexBuilder rB = join.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,250,RelNode left = join.getInput(0);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,251,RelNode right = join.getInput(1);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,256,JoinConditionBasedPredicateInference jI =
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,258,RexUtil.composeConjunction(rB, leftInfo.pulledUpPredicates, false),
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,259,RexUtil.composeConjunction(rB, rightInfo.pulledUpPredicates,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,260,false));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,262,return jI.inferPredicates(false);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,307,RexBuilder rB = union.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,393,final Set<String> allExprsDigests;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,399,RexNode lPreds, RexNode rPreds) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,400,this(joinRel, joinRel instanceof SemiJoin, lPreds, rPreds);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,404,RexNode lPreds, RexNode rPreds) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,419,allExprsDigests = new HashSet<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,431,allExprsDigests.add(r.toString());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,445,allExprsDigests.add(r.toString());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,491,final Set<String> allExprsDigests = new HashSet<>(this.allExprsDigests);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,496,infer(leftChildPredicates, allExprsDigests, inferredPredicates,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,505,infer(rightChildPredicates, allExprsDigests, inferredPredicates,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,572,List<RexNode> inferedPredicates, boolean includeEqualityInference,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,585,&& !isAlwaysTrue(tr)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,586,inferedPredicates.add(tr);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,587,allExprsDigests.add(tr.toString());
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,93,new Function<RelFieldCollation, Comparator<? super Row>>() {
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,94,public Comparator<? super Row> apply(RelFieldCollation input) {
core/src/main/java/org/apache/calcite/rel/core/Project.java,277,for (Ord<RexNode> exp : Ord.zip(projects)) {
core/src/main/java/org/apache/calcite/rel/core/Project.java,304,for (Ord<RexNode> exp : Ord.zip(projects)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,209,for (Ord<RexNode> project : Ord.zip(projects)) {
core/src/main/java/org/apache/calcite/sql/type/CompositeOperandTypeChecker.java,136,for (Ord<SqlOperandTypeChecker> ord : Ord.zip(allowedRules)) {
core/src/main/java/org/apache/calcite/sql/type/CompositeOperandTypeChecker.java,260,for (Ord<SqlOperandTypeChecker> ord : Ord.zip(allowedRules)) {
core/src/main/java/org/apache/calcite/sql/type/CompositeOperandTypeChecker.java,273,for (Ord<SqlOperandTypeChecker> ord : Ord.zip(allowedRules)) {
core/src/main/java/org/apache/calcite/sql/type/CompositeOperandTypeChecker.java,283,for (Ord<SqlOperandTypeChecker> ord : Ord.zip(allowedRules)) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,385,boolean fixpoint;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,388,fixpoint = true;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,394,if (newVertex != null) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,395,++nMatches;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,396,if (nMatches >= currentProgram.matchLimit) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,397,return;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,399,if (fullRestartAfterTransformation) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,400,iter = getGraphIterator(root);
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,405,iter = getGraphIterator(newVertex);
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,409,fixpoint = false;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,411,break;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,225,side.newInput = joinInput;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,231,final Mappings.TargetMapping mapping =
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,232,s == 0
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,234,: Mappings.createShiftMapping(fieldCount + offset, 0, offset,
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,235,fieldCount);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,177,Expressions.parameter(int.class, builder.newName("prevStart"));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,179,Expressions.parameter(int.class, builder.newName("prevEnd"));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,295,for (RexLiteral literal : tuple) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1658,return Expressions.makeUnary(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1659,expressionType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1660,translatedOperands.get(0));
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1609,return new UnaryExpression(expressionType, expression.getType(),
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1610,expression);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnion.java,69,pref = pref.of(result.format);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,843,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,846,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,847,final List<Expression> translatedOperands =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,851,return nullAs.handle(result);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,445,Expression nullHandled = nullAs.handle(input);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,448,if (nullHandled instanceof ConstantExpression) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,449,return nullHandled;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,454,if (nullHandled == input) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,455,return input;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,462,String unboxVarName = "v_unboxed";
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,463,if (input instanceof ParameterExpression) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,464,unboxVarName = ((ParameterExpression) input).name + "_unboxed";
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,466,ParameterExpression unboxed = Expressions.parameter(nullHandled.getType(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,467,list.newName(unboxVarName));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,468,list.add(Expressions.declare(Modifier.FINAL, unboxed, nullHandled));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,470,return unboxed;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,20,import org.apache.calcite.sql.SqlFunction;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,22,import org.apache.calcite.sql.SqlKind;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,24,import org.apache.calcite.sql.SqlOperator;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,26,import org.apache.calcite.sql.SqlSyntax;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,27,import org.apache.calcite.sql.util.SqlBasicVisitor;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,30,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,38,class AggFinder extends SqlBasicVisitor<Void> {
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,41,private final SqlOperatorTable opTab;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,42,private final boolean over;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,54,this.opTab = opTab;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,55,this.over = over;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,88,public Void visit(SqlCall call) {
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,89,final SqlOperator operator = call.getOperator();
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,106,if (call.isA(SqlKind.QUERY)) {
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,110,if (call.getKind() == SqlKind.OVER) {
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,111,if (over) {
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,112,throw new Util.FoundOne(call);
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,115,return null;
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,126,if (isStar(e.getChildExps(), e.getInput().getRowType())) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,203,public static boolean isStar(List<RexNode> exps, RelDataType inputRowType) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,212,return i == inputRowType.getFieldCount();
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,572,for (Ord<Node> n : Ord.zip(list)) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,122,: listGetter(fields);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,225,distinctAggCalls.add(aggCall.left.rename(aggCall.right));
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,847,String newDigest = rel.recomputeDigest();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpretable.java,23,import org.apache.calcite.interpreter.Interpreter;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpretable.java,82,return new EnumerableNode(enumerable, implementor.interpreter, this);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpretable.java,190,Interpreter interpreter, EnumerableInterpretable rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpretable.java,192,this.sink = interpreter.sink(rel);
core/src/main/java/org/apache/calcite/interpreter/AbstractSingleNode.java,33,this.source = interpreter.source(rel, 0);
core/src/main/java/org/apache/calcite/interpreter/AbstractSingleNode.java,34,this.sink = interpreter.sink(rel);
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,66,public AggregateNode(Interpreter interpreter, Aggregate rel) {
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,67,super(interpreter, rel);
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,68,this.dataContext = interpreter.getDataContext();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,298,return new FilterNode(implementor.interpreter, this);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,348,return new ProjectNode(implementor.interpreter, this);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,399,return new SortNode(implementor.interpreter, this);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,462,return new JoinNode(implementor.interpreter, this);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,507,return new UnionNode(implementor.interpreter, this);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,533,return new ValuesNode(implementor.interpreter, this);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,604,return new AggregateNode(implementor.interpreter, this);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,659,return new WindowNode(implementor.interpreter, this);
core/src/main/java/org/apache/calcite/interpreter/FilterNode.java,31,public FilterNode(Interpreter interpreter, Filter rel) {
core/src/main/java/org/apache/calcite/interpreter/FilterNode.java,32,super(interpreter, rel);
core/src/main/java/org/apache/calcite/interpreter/FilterNode.java,34,interpreter.compile(ImmutableList.of(rel.getCondition()),
core/src/main/java/org/apache/calcite/interpreter/FilterNode.java,36,this.context = interpreter.createContext();
core/src/main/java/org/apache/calcite/interpreter/InterpretableRel.java,38,public final Interpreter interpreter;
core/src/main/java/org/apache/calcite/interpreter/InterpretableRel.java,45,public InterpreterImplementor(Interpreter interpreter,
core/src/main/java/org/apache/calcite/interpreter/InterpretableRel.java,48,this.interpreter = interpreter;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,47,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,63,final Map<RelNode, NodeInfo> nodes = Maps.newLinkedHashMap();
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,66,private final Map<RelNode, List<RelNode>> relInputs = Maps.newHashMap();
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,67,protected final ScalarCompiler scalarCompiler;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,71,this.scalarCompiler =
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,72,new JaninoRexCompiler(rootRel.getCluster().getRexBuilder());
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,74,final Compiler compiler = new Nodes.CoreCompiler(this);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,75,this.rootRel = compiler.visitRoot(rel);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,98,final ArrayDeque<Row> queue = ((ListSink) nodeInfo.sink).list;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,126,public Scalar compile(List<RexNode> nodes, RelDataType inputRowType) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,127,if (inputRowType == null) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,128,inputRowType = dataContext.getTypeFactory().builder().build();
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,130,return scalarCompiler.compile(nodes, inputRowType);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,133,RelDataType combinedRowType(List<RelNode> inputs) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,135,dataContext.getTypeFactory().builder();
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,136,for (RelNode input : inputs) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,137,builder.addAll(input.getRowType().getFieldList());
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,139,return builder.build();
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,250,public Source source(RelNode rel, int ordinal) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,251,final RelNode input = getInput(rel, ordinal);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,252,final NodeInfo nodeInfo = nodes.get(input);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,253,if (nodeInfo == null) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,254,throw new AssertionError("should be registered: " + rel);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,256,if (nodeInfo.rowEnumerable != null) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,257,return new EnumeratorSource(nodeInfo.rowEnumerable.enumerator());
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,259,Sink sink = nodeInfo.sink;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,260,if (sink instanceof ListSink) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,261,return new ListSource((ListSink) nodeInfo.sink);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,263,throw new IllegalStateException(
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,267,private RelNode getInput(RelNode rel, int ordinal) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,268,final List<RelNode> inputs = relInputs.get(rel);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,269,if (inputs != null) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,270,return inputs.get(ordinal);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,272,return rel.getInput(ordinal);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,285,public Sink sink(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,286,final ArrayDeque<Row> queue = new ArrayDeque<>(1);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,287,final Sink sink = new ListSink(queue);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,288,NodeInfo nodeInfo = new NodeInfo(rel, sink, null);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,289,nodes.put(rel, nodeInfo);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,290,return sink;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,303,public void enumerable(RelNode rel, Enumerable<Row> rowEnumerable) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,304,NodeInfo nodeInfo = new NodeInfo(rel, null, rowEnumerable);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,305,nodes.put(rel, nodeInfo);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,308,public Context createContext() {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,309,return new Context(dataContext);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,312,public DataContext getDataContext() {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,313,return dataContext;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,319,final Sink sink;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,325,this.sink = sink;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,387,this.list = sink.list;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,392,return list.remove();
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,416,public static class Compiler extends RelVisitor implements ReflectiveVisitor {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,417,private final ReflectiveVisitDispatcher<Compiler, RelNode> dispatcher =
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,418,ReflectUtil.createDispatcher(Compiler.class, RelNode.class);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,427,Compiler(Interpreter interpreter) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,431,public RelNode visitRoot(RelNode p) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,434,return rootRel;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,453,List<RelNode> inputs = interpreter.relInputs.get(parent);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,456,interpreter.relInputs.put(parent, inputs);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,465,final List<RelNode> inputs = interpreter.relInputs.get(p);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,482,final NodeInfo nodeInfo = interpreter.nodes.get(p);
core/src/main/java/org/apache/calcite/interpreter/JoinNode.java,38,public JoinNode(Interpreter interpreter, Join rel) {
core/src/main/java/org/apache/calcite/interpreter/JoinNode.java,39,this.leftSource = interpreter.source(rel, 0);
core/src/main/java/org/apache/calcite/interpreter/JoinNode.java,40,this.rightSource = interpreter.source(rel, 1);
core/src/main/java/org/apache/calcite/interpreter/JoinNode.java,41,this.sink = interpreter.sink(rel);
core/src/main/java/org/apache/calcite/interpreter/JoinNode.java,42,this.condition = interpreter.compile(ImmutableList.of(rel.getCondition()),
core/src/main/java/org/apache/calcite/interpreter/JoinNode.java,43,interpreter.combinedRowType(rel.getInputs()));
core/src/main/java/org/apache/calcite/interpreter/JoinNode.java,45,this.context = interpreter.createContext();
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,41,public static class CoreCompiler extends Interpreter.Compiler {
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,42,CoreCompiler(Interpreter interpreter) {
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,43,super(interpreter);
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,47,node = new AggregateNode(interpreter, agg);
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,51,node = new FilterNode(interpreter, filter);
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,55,node = new ProjectNode(interpreter, project);
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,59,node = new ValuesNode(interpreter, value);
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,63,node = TableScanNode.create(interpreter, scan,
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,64,ImmutableList.<RexNode>of(), null);
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,68,node = TableScanNode.create(interpreter, scan, scan.filters,
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,69,scan.projects);
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,73,node = new SortNode(interpreter, sort);
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,77,node = new UnionNode(interpreter, union);
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,81,node = new JoinNode(interpreter, join);
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,85,node = new WindowNode(interpreter, window);
core/src/main/java/org/apache/calcite/interpreter/ProjectNode.java,30,public ProjectNode(Interpreter interpreter, Project rel) {
core/src/main/java/org/apache/calcite/interpreter/ProjectNode.java,31,super(interpreter, rel);
core/src/main/java/org/apache/calcite/interpreter/ProjectNode.java,33,this.scalar = interpreter.compile(rel.getProjects(),
core/src/main/java/org/apache/calcite/interpreter/ProjectNode.java,35,this.context = interpreter.createContext();
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,38,public SortNode(Interpreter interpreter, Sort rel) {
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,39,super(interpreter, rel);
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,62,private TableScanNode(Interpreter interpreter, TableScan rel,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,64,interpreter.enumerable(rel, enumerable);
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,67,public void run() throws InterruptedException {
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,76,static TableScanNode create(Interpreter interpreter, TableScan rel,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,82,return createProjectableFilterable(interpreter, rel, filters, projects,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,88,return createFilterable(interpreter, rel, filters, projects,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,94,return createScannable(interpreter, rel, filters, projects,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,100,return createEnumerable(interpreter, rel, enumerable, null, filters,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,106,return createQueryable(interpreter, rel, filters, projects,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,113,private static TableScanNode createScannable(Interpreter interpreter,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,114,TableScan rel, ImmutableList<RexNode> filters, ImmutableIntList projects,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,117,Enumerables.toRow(scannableTable.scan(interpreter.getDataContext()));
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,118,return createEnumerable(interpreter, rel, rowEnumerable, null, filters,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,122,private static TableScanNode createQueryable(Interpreter interpreter,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,125,final DataContext root = interpreter.getDataContext();
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,166,return createEnumerable(interpreter, rel, rowEnumerable, null, filters,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,170,private static TableScanNode createFilterable(Interpreter interpreter,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,173,final DataContext root = interpreter.getDataContext();
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,183,return createEnumerable(interpreter, rel, rowEnumerable, null,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,187,private static TableScanNode createProjectableFilterable(
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,188,Interpreter interpreter, TableScan rel, ImmutableList<RexNode> filters,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,189,ImmutableIntList projects, ProjectableFilterableTable pfTable) {
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,190,final DataContext root = interpreter.getDataContext();
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,237,return createEnumerable(interpreter, rel, rowEnumerable, projects,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,242,private static TableScanNode createEnumerable(
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,243,Interpreter interpreter, TableScan rel,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,244,Enumerable<Row> enumerable, final ImmutableIntList acceptedProjects,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,245,List<RexNode> rejectedFilters, final ImmutableIntList rejectedProjects) {
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,270,interpreter.compile(
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,271,ImmutableList.of(filter2), inputRowType);
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,272,final Context context = interpreter.createContext();
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,295,return new TableScanNode(interpreter, rel, enumerable);
core/src/main/java/org/apache/calcite/interpreter/UnionNode.java,35,public UnionNode(Interpreter interpreter, Union rel) {
core/src/main/java/org/apache/calcite/interpreter/UnionNode.java,38,builder.add(interpreter.source(rel, i));
core/src/main/java/org/apache/calcite/interpreter/UnionNode.java,41,this.sink = interpreter.sink(rel);
core/src/main/java/org/apache/calcite/interpreter/ValuesNode.java,37,public ValuesNode(Interpreter interpreter, Values rel) {
core/src/main/java/org/apache/calcite/interpreter/ValuesNode.java,38,this.sink = interpreter.sink(rel);
core/src/main/java/org/apache/calcite/interpreter/ValuesNode.java,40,this.rows = createRows(interpreter, rel.getTuples());
core/src/main/java/org/apache/calcite/interpreter/ValuesNode.java,43,private ImmutableList<Row> createRows(Interpreter interpreter,
core/src/main/java/org/apache/calcite/interpreter/ValuesNode.java,49,final Scalar scalar = interpreter.compile(nodes, null);
core/src/main/java/org/apache/calcite/interpreter/ValuesNode.java,51,final Context context = interpreter.createContext();
core/src/main/java/org/apache/calcite/interpreter/WindowNode.java,26,WindowNode(Interpreter interpreter, Window rel) {
core/src/main/java/org/apache/calcite/interpreter/WindowNode.java,27,super(interpreter, rel);
core/src/main/java/org/apache/calcite/plan/hep/HepMatchOrder.java,40,TOP_DOWN
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,381,currentProgram.matchOrder != HepMatchOrder.ARBITRARY;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,429,if (currentProgram.matchOrder == HepMatchOrder.ARBITRARY) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,433,assert start == root;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,440,Iterable<HepRelVertex> iter =
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,441,TopologicalOrderIterator.of(graph);
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,443,if (currentProgram.matchOrder == HepMatchOrder.TOP_DOWN) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,444,return iter.iterator();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,449,assert currentProgram.matchOrder == HepMatchOrder.BOTTOM_UP;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,450,final List<HepRelVertex> list = new ArrayList<>();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,451,for (HepRelVertex vertex : iter) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,452,list.add(vertex);
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,454,Collections.reverse(list);
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,455,return list.iterator();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,848,if (mapDigestToVertex.get(newDigest) == null) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,849,mapDigestToVertex.put(newDigest, vertex);
core/src/main/java/org/apache/calcite/plan/hep/HepProgram.java,69,matchOrder = HepMatchOrder.ARBITRARY;
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,213,class SumSplitter implements SqlSplittableAggFunction {
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,214,public static final SumSplitter INSTANCE = new SumSplitter();
core/src/main/java/org/apache/calcite/sql/fun/SqlSumEmptyIsZeroAggFunction.java,69,return clazz.cast(SqlSplittableAggFunction.SumSplitter.INSTANCE);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,243,call1 = splitter.split(aggCall.e, mapping);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,74,new RelFieldCollation(key,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,75,RelFieldCollation.Direction.ASCENDING,
core/src/main/java/org/apache/calcite/rel/RelCollations.java,59,return new RelCollationImpl(ImmutableList.copyOf(fieldCollations));
core/src/main/java/org/apache/calcite/rel/RelCollations.java,63,return new RelCollationImpl(ImmutableList.copyOf(fieldCollations));
core/src/main/java/org/apache/calcite/rel/RelCollations.java,113,return Lists.transform(collation.getFieldCollations(),
core/src/main/java/org/apache/calcite/rel/RelCollations.java,150,if (contains(collation, keys)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2740,convertOrderItem(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2741,select,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2742,orderItem,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2743,extraOrderExprs,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1289,fieldCollations.add(
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1291,extraNodes));
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1079,SqlToRelConverter sqlToRelConverter =
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1080,new SqlToRelConverter(this, validator, catalogReader, cluster,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1083,return sqlToRelConverter;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2180,return RelOptUtil.pushDownJoinConditions(originalJoin);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,265,final List<RelDataType> paramTypes = toSql(argTypes);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,286,private SqlReturnTypeInference infer(final ScalarFunction function) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,290,return toSql(type);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,295,private SqlReturnTypeInference infer(final AggregateFunction function) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,299,return toSql(type);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,304,private List<RelDataType> toSql(List<RelDataType> types) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,308,return toSql(type);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,313,private RelDataType toSql(RelDataType type) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,101,if (table != null) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,102,return table;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,111,CalciteSchema schema =
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,113,if (schema == null) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,114,return null;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,116,final String name = Util.last(names);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,118,if (entry == null) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,156,CalciteSchema schema = rootSchema;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,157,for (String schemaName : schemaNames) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,159,if (schema == null) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,160,return null;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,163,return schema;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,985,if (convertedWhere.isAlwaysTrue()) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1093,if (isAny(type1) || isAny(type2)) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1094,return true;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,327,assert (sink != null) != (rowEnumerable != null) : "one or the other";
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,19,import org.apache.calcite.util.Pair;
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,33,private final LoadingCache<Pair<Lattice, Lattice.Column>, Integer> cache;
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,40,new CacheLoader<Pair<Lattice, Lattice.Column>, Integer>() {
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,42,throws Exception {
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,43,return provider.cardinality(key.left, key.right);
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,48,public int cardinality(Lattice lattice, Lattice.Column column) {
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,49,try {
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,50,return cache.get(Pair.of(lattice, column));
core/src/main/java/org/apache/calcite/materialize/DelegatingLatticeStatisticProvider.java,36,public int cardinality(Lattice lattice, Lattice.Column column) {
core/src/main/java/org/apache/calcite/materialize/DelegatingLatticeStatisticProvider.java,37,return provider.cardinality(lattice, column);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,63,import java.math.BigInteger;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,115,LatticeStatisticProvider statisticProvider, Double rowCountEstimate,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,116,ImmutableList<Column> columns, ImmutableList<Measure> defaultMeasures,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,117,ImmutableList<Tile> tiles) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,124,this.statisticProvider = Preconditions.checkNotNull(statisticProvider);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,238,for (Measure call : aggCallList) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,239,for (Column arg : call.args) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,240,columnSetBuilder.set(arg.ordinal);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,243,final ImmutableBitSet columnSet = columnSetBuilder.build();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,247,List<Node> usedNodes = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,248,for (Node node : nodes) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,250,.intersects(columnSet)) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,251,use(usedNodes, node);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,254,if (usedNodes.isEmpty()) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,255,usedNodes.add(nodes.get(0));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,262,for (int i : groupSet) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,263,if (k++ > 0) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,264,buf.append(", ");
core/src/main/java/org/apache/calcite/materialize/Lattice.java,265,groupBuf.append(", ");
core/src/main/java/org/apache/calcite/materialize/Lattice.java,267,final Column column = columns.get(i);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,268,dialect.quoteIdentifier(buf, column.identifiers());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,269,dialect.quoteIdentifier(groupBuf, column.identifiers());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,270,final String fieldName = uniqueColumnNames.get(i);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,271,columnNames.add(fieldName);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,272,if (!column.alias.equals(fieldName)) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,273,buf.append(" AS ");
core/src/main/java/org/apache/calcite/materialize/Lattice.java,274,dialect.quoteIdentifier(buf, fieldName);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,277,if (groupSet.isEmpty()) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,278,groupBuf.append("()");
core/src/main/java/org/apache/calcite/materialize/Lattice.java,280,int m = 0;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,281,for (Measure measure : aggCallList) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,282,if (k++ > 0) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,283,buf.append(", ");
core/src/main/java/org/apache/calcite/materialize/Lattice.java,286,.append("(");
core/src/main/java/org/apache/calcite/materialize/Lattice.java,287,if (measure.args.isEmpty()) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,288,buf.append("*");
core/src/main/java/org/apache/calcite/materialize/Lattice.java,290,int z = 0;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,291,for (Column arg : measure.args) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,292,if (z++ > 0) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,293,buf.append(", ");
core/src/main/java/org/apache/calcite/materialize/Lattice.java,295,dialect.quoteIdentifier(buf, arg.identifiers());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,298,buf.append(") AS ");
core/src/main/java/org/apache/calcite/materialize/Lattice.java,299,String measureName;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,300,while (!columnNames.add(measureName = "m" + m)) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,301,++m;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,303,dialect.quoteIdentifier(buf, measureName);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,332,buf.append(groupBuf);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,390,BigInteger n = BigInteger.ONE;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,391,for (Column column : columns) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,392,final int cardinality = statisticProvider.cardinality(this, column);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,393,if (cardinality > 1) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,394,n = n.multiply(BigInteger.valueOf(cardinality));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,397,final double nn = n.doubleValue();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,398,final double f = getFactRowCount();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,399,final double a = (nn - 1d) / nn;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,402,return f;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,404,final double v = nn * (1d - Math.pow(a, f));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,407,return Math.min(v, f);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,693,LatticeStatisticProvider statisticProvider =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,695,? AvaticaUtils.instantiatePlugin(LatticeStatisticProvider.class,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,818,this.measures = measures;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,819,this.dimensions = dimensions;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,822,final ImmutableBitSet.Builder bitSetBuilder = ImmutableBitSet.builder();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,823,for (Column dimension : dimensions) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,824,bitSetBuilder.set(dimension.ordinal);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,826,bitSet = bitSetBuilder.build();
core/src/main/java/org/apache/calcite/materialize/LatticeStatisticProvider.java,24,int cardinality(Lattice lattice, Lattice.Column column);
core/src/main/java/org/apache/calcite/materialize/Lattices.java,26,public static final LatticeStatisticProvider SQL =
core/src/main/java/org/apache/calcite/materialize/Lattices.java,27,SqlLatticeStatisticProvider.INSTANCE;
core/src/main/java/org/apache/calcite/materialize/Lattices.java,30,public static final LatticeStatisticProvider CACHED_SQL =
core/src/main/java/org/apache/calcite/materialize/Lattices.java,31,cache(SqlLatticeStatisticProvider.INSTANCE);
core/src/main/java/org/apache/calcite/materialize/Lattices.java,34,public static LatticeStatisticProvider cache(
core/src/main/java/org/apache/calcite/materialize/Lattices.java,35,LatticeStatisticProvider provider) {
core/src/main/java/org/apache/calcite/materialize/Lattices.java,36,return new CachingLatticeStatisticProvider(provider);
core/src/main/java/org/apache/calcite/materialize/SqlLatticeStatisticProvider.java,31,static final SqlLatticeStatisticProvider INSTANCE =
core/src/main/java/org/apache/calcite/materialize/SqlLatticeStatisticProvider.java,32,new SqlLatticeStatisticProvider();
core/src/main/java/org/apache/calcite/materialize/SqlLatticeStatisticProvider.java,35,private SqlLatticeStatisticProvider() {}
core/src/main/java/org/apache/calcite/materialize/SqlLatticeStatisticProvider.java,44,return ((Number) values[0]).intValue();
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,19,import java.util.AbstractList;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,73,private static final boolean DEBUG = Math.random() >= 0;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,81,this(ordering, new HashMap<E, Node<E>>());
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,92,this(ordering, new HashMap<E, Node<E>>(collection.size() * 3 / 2));
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,102,private PartiallyOrderedSet(Ordering<E> ordering, Map<E, Node<E>> map) {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,546,return null;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,550,return Collections.emptyList();
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,571,return null;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,575,return Collections.emptyList();
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,581,public List<E> getNonChildren() {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,582,if (topNode.childList.size() == 1
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,583,&& topNode.childList.get(0).e == null) {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,584,return Collections.emptyList();
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,590,if (bottomNode.parentList.size() == 1
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,591,&& bottomNode.parentList.get(0).e == null) {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,592,return Collections.emptyList();
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,738,private static class StripList<E> extends AbstractList<E> {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,739,private final List<Node<E>> list;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,742,this.list = list;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,746,return list.get(index).e;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,750,return list.size();
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,571,CalciteServerStatement statement =
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,576,callback.assign(signature, null, -1);
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,300,super(columns, sql, parameterList, internalParameters, cursorFactory, null);
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,301,this.rowType = rowType;
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,302,this.collationList = collationList;
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,303,this.maxRowCount = maxRowCount;
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,304,this.bindable = bindable;
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,704,final Bindable<T> bindable = new Bindable<T>() {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,705,public Enumerable<T> bind(DataContext dataContext) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,706,return Linq4j.emptyEnumerable();
core/src/main/java/org/apache/calcite/rel/type/RelDataType.java,35,public interface RelDataType /*extends Type*/ {
core/src/main/java/org/apache/calcite/rex/RexProgram.java,541,List<RelCollation> outputCollations = new ArrayList<>(1);
core/src/main/java/org/apache/calcite/runtime/CalciteResource.java,481,ExInst<CalciteException> insertIntoAlwaysGenerated(String a0);
core/src/main/java/org/apache/calcite/schema/impl/AbstractTable.java,27,public abstract class AbstractTable implements Table {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3631,private void checkFieldCount(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3632,SqlNode node,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3633,RelDataType logicalSourceRowType,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorTable.java,29,public interface SqlValidatorTable {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,187,import static org.apache.calcite.util.Static.RESOURCE;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2953,if (modifiableTable != null) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3038,public RelNode toRel(RelOptTable table) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3039,return table.toRel(createToRelContext());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3062,protected RelNode convertColumnList(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3063,SqlInsert call,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3064,RelNode sourceRel) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3065,RelDataType sourceRowType = sourceRel.getRowType();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3073,final RelDataType targetRowType = targetTable.getRowType();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3074,final List<RelDataTypeField> targetFields =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3075,targetRowType.getFieldList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3099,if (sourceExps.get(i) != null) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3101,throw RESOURCE.insertIntoAlwaysGenerated(fieldName).ex();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3103,continue;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3115,return RelOptUtil.createProject(sourceRel, sourceExps, fieldNames, true);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3152,for (int i = 0; i < targetColumnNames.size(); i++) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3153,final RexNode expr = rexBuilder.makeFieldAccess(sourceRef, i);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3650,protected class Blackboard implements SqlRexContext, SqlVisitor<RexNode> {
core/src/main/java/org/apache/calcite/util/Util.java,212,public static boolean discard(boolean b) {
core/src/main/java/org/apache/calcite/util/Util.java,213,return b;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,103,new FilterReduceExpressionsRule(LogicalFilter.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,110,new ProjectReduceExpressionsRule(LogicalProject.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,117,new JoinReduceExpressionsRule(Join.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,124,new CalcReduceExpressionsRule(LogicalCalc.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,135,super(filterClass, relBuilderFactory, "ReduceExpressionsRule(Filter)");
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,252,super(projectClass, relBuilderFactory, "ReduceExpressionsRule(Project)");
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,262,if (reduceExpressions(project, expList, predicates)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,282,super(joinClass, relBuilderFactory, "ReduceExpressionsRule(Join)");
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,329,super(calcClass, relBuilderFactory, "ReduceExpressionsRule(Calc)");
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,349,if (reduceExpressions(calc, expandedExprList, predicates)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,421,RelBuilderFactory relBuilderFactory, String desc) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,422,super(operand(clazz, any()), relBuilderFactory, desc);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,177,ReduceExpressionsRule.reduceExpressions(values, reducibleExps, predicates);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,246,public static final SqlBinaryOperator DOT =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,247,new SqlBinaryOperator(
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,249,SqlKind.DOT,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,250,80,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,251,true,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,252,null,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,253,null,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,254,OperandTypes.ANY_ANY);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,89,new EnumerableToBindableConverterRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,91,private EnumerableToBindableConverterRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,92,super(EnumerableRel.class, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,93,BindableConvention.INSTANCE, "EnumerableToBindableConverterRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,34,EnumerableConvention.INSTANCE, "EnumerableCalcRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelateRule.java,29,EnumerableCorrelateRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelateRule.java,30,super(LogicalCorrelate.class, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelateRule.java,31,EnumerableConvention.INSTANCE, "EnumerableCorrelateRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,32,EnumerableConvention.INSTANCE, "EnumerableFilterRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterToCalcRule.java,30,EnumerableFilterToCalcRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterToCalcRule.java,31,super(operand(EnumerableFilter.class, any()));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,30,new EnumerableInterpreterRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,32,private EnumerableInterpreterRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,33,super(RelNode.class, BindableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,34,EnumerableConvention.INSTANCE, "EnumerableInterpreterRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,32,EnumerableConvention.INSTANCE, "EnumerableProjectRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectToCalcRule.java,27,EnumerableProjectToCalcRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectToCalcRule.java,28,super(operand(EnumerableProject.class, any()));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,43,new EnumerableCorrelateRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,79,new EnumerableValuesRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,97,new EnumerableTableScanRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,31,super(LogicalTableFunctionScan.class, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,32,EnumerableConvention.INSTANCE, "EnumerableTableFunctionScanRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModifyRule.java,31,EnumerableTableModifyRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModifyRule.java,32,super(LogicalTableModify.class, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModifyRule.java,33,EnumerableConvention.INSTANCE, "EnumerableTableModificationRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,33,super(LogicalTableScan.class, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,34,EnumerableConvention.INSTANCE, "EnumerableTableScanRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,29,EnumerableValuesRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,30,super(LogicalValues.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,97,new JdbcToEnumerableConverterRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverterRule.java,30,JdbcToEnumerableConverterRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverterRule.java,31,super(RelNode.class, out, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,86,new BindableTableScanRule();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,89,new BindableFilterRule();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,92,new BindableProjectRule();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,95,new BindableSortRule();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,98,new BindableJoinRule();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,101,new BindableUnionRule();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,104,new BindableValuesRule();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,107,new BindableAggregateRule();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,110,new BindableWindowRule();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,139,private static class BindableTableScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,140,private BindableTableScanRule() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,141,super(operand(LogicalTableScan.class, none()));
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,243,private static class BindableFilterRule extends ConverterRule {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,244,private BindableFilterRule() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,246,BindableConvention.INSTANCE, "BindableFilterRule");
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,306,private static class BindableProjectRule extends ConverterRule {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,307,private BindableProjectRule() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,309,BindableConvention.INSTANCE, "BindableProjectRule");
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,356,private static class BindableSortRule extends ConverterRule {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,357,private BindableSortRule() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,358,super(Sort.class, Convention.NONE, BindableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,407,private static class BindableJoinRule extends ConverterRule {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,408,private BindableJoinRule() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,409,super(LogicalJoin.class, Convention.NONE, BindableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,470,private static class BindableUnionRule extends ConverterRule {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,471,private BindableUnionRule() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,472,super(LogicalUnion.class, Convention.NONE, BindableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,538,private static class BindableValuesRule extends ConverterRule {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,539,private BindableValuesRule() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,540,super(LogicalValues.class, Convention.NONE, BindableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,609,private static class BindableAggregateRule extends ConverterRule {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,610,private BindableAggregateRule() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,611,super(LogicalAggregate.class, Convention.NONE,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,612,BindableConvention.INSTANCE, "BindableAggregateRule");
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,667,private static class BindableWindowRule extends ConverterRule {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,668,private BindableWindowRule() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,669,super(LogicalWindow.class, Convention.NONE, BindableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,31,new NoneToBindableConverterRule();
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,33,private NoneToBindableConverterRule() {
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,34,super(RelNode.class, Convention.NONE, BindableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,2402,new FilterOnProjectRule();
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,2404,private FilterOnProjectRule() {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,2407,some(operand(LogicalProject.class, any()))));
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,316,instruction.ruleSet.add(new TraitMatchingRule(converter));
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,103,new ExpandConversionRule();
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,108,private ExpandConversionRule() {
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,109,super(operand(AbstractConverter.class, any()));
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,53,this(clazz, Predicates.<RelNode>alwaysTrue(), in, out, description);
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,67,String description) {
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,44,public TraitMatchingRule(ConverterRule converterRule) {
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,58,public Convention getOutConvention() {
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,90,protected AggregateReduceFunctionsRule(RelOptRuleOperand operand,
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,52,operand(RelNode.class, any())));
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,92,private AggregateStarTableRule(RelOptRuleOperand operand,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,93,String description) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,94,super(operand, description);
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,39,public static final CalcMergeRule INSTANCE = new CalcMergeRule();
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,43,private CalcMergeRule() {
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,47,operand(Calc.class, any())));
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,39,new CalcRemoveRule();
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,43,private CalcRemoveRule() {
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,44,super(operand(LogicalCalc.class, any()));
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,45,private CalcSplitRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,63,public Convention getOutConvention() {
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,75,List<RelNode> newInputs = new ArrayList<RelNode>(inputs);
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,41,new FilterCalcMergeRule();
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,45,private FilterCalcMergeRule() {
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,49,operand(LogicalCalc.class, any())));
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,33,new FilterMultiJoinMergeRule();
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,40,private FilterMultiJoinMergeRule() {
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,43,operand(MultiJoin.class, any())));
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,43,new FilterRemoveIsNotDistinctFromRule();
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,47,private FilterRemoveIsNotDistinctFromRule() {
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,48,super(operand(LogicalFilter.class, any()));
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,42,new FilterTableFunctionTransposeRule();
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,49,private FilterTableFunctionTransposeRule() {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,52,operand(LogicalTableFunctionScan.class, any())));
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,94,super(operand, description);
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,46,public static final FilterToCalcRule INSTANCE = new FilterToCalcRule();
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,50,private FilterToCalcRule() {
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,51,super(operand(LogicalFilter.class, any()));
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,39,new JoinAddRedundantSemiJoinRule(LogicalJoin.class);
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,46,private JoinAddRedundantSemiJoinRule(Class<? extends Join> clazz) {
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,47,super(operand(clazz, any()));
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,52,public static final JoinAssociateRule INSTANCE = new JoinAssociateRule();
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,59,private JoinAssociateRule() {
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,63,operand(RelSubset.class, any())));
core/src/main/java/org/apache/calcite/rel/rules/JoinExtractFilterRule.java,46,new JoinExtractFilterRule(LogicalJoin.class);
core/src/main/java/org/apache/calcite/rel/rules/JoinExtractFilterRule.java,54,super(operand(clazz, any()));
core/src/main/java/org/apache/calcite/rel/rules/JoinToCorrelateRule.java,71,protected JoinToCorrelateRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,105,new JoinToMultiJoinRule(LogicalJoin.class);
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,112,public JoinToMultiJoinRule(Class<? extends Join> clazz) {
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,116,operand(RelNode.class, any())));
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,51,private JoinUnionTransposeRule(RelOptRuleOperand operand,
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,52,String description) {
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,53,super(operand, description);
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,90,super(operand, description);
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,47,new ProjectCalcMergeRule();
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,51,private ProjectCalcMergeRule() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,55,operand(LogicalCalc.class, any())));
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,42,private ProjectMultiJoinMergeRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,51,public static final ProjectRemoveRule INSTANCE = new ProjectRemoveRule();
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,56,private ProjectRemoveRule() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,59,super(operand(Project.class, null, PREDICATE, any()));
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,36,new ProjectSortTransposeRule();
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,43,private ProjectSortTransposeRule() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,44,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,45,operand(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,46,operand(Sort.class, any())));
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,89,private ProjectTableScanRule(RelOptRuleOperand operand, String description) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,90,super(operand, description);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,43,public static final ProjectToCalcRule INSTANCE = new ProjectToCalcRule();
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,47,private ProjectToCalcRule() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,48,super(operand(LogicalProject.class, any()));
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,98,public static final ProjectToWindowRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,99,new ProjectToWindowRule(
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,100,operand(Calc.class, null, PREDICATE, any()),
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,102,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,103,Calc calc = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,104,assert RexOver.containsOver(calc.getProgram());
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,105,final CalcRelSplitter transform =
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,106,new WindowedAggRelSplitter(calc, call.builder());
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,107,RelNode newRel = transform.execute();
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,108,call.transformTo(newRel);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,118,public static final ProjectToWindowRule PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,119,new ProjectToWindowRule(
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,120,operand(Project.class, null, PREDICATE2, any()),
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,123,Project project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,124,assert RexOver.containsOver(project.getProjects(), null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,125,final RelNode input = project.getInput();
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,126,final RexProgram program =
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,127,RexProgram.create(
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,128,input.getRowType(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,129,project.getProjects(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,130,null,
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,131,project.getRowType(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,132,project.getCluster().getRexBuilder());
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,134,final LogicalCalc calc = LogicalCalc.create(input, program);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,135,final CalcRelSplitter transform = new WindowedAggRelSplitter(calc,
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,136,call.builder()) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,138,if (!(rel instanceof LogicalCalc)) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,139,return rel;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,141,final LogicalCalc calc = (LogicalCalc) rel;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,142,final RexProgram program = calc.getProgram();
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,143,relBuilder.push(calc.getInput());
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,144,if (program.getCondition() != null) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,145,relBuilder.filter(
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,146,program.expandLocalRef(program.getCondition()));
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,148,if (!program.projectsOnlyIdentity()) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,149,relBuilder.project(
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,150,Lists.transform(program.getProjectList(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,151,new Function<RexLocalRef, RexNode>() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,152,public RexNode apply(RexLocalRef a0) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,153,return program.expandLocalRef(a0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,156,calc.getRowType().getFieldNames());
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,158,return relBuilder.build();
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,161,RelNode newRel = transform.execute();
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,162,call.transformTo(newRel);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,169,private ProjectToWindowRule(RelOptRuleOperand operand, String description) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,170,super(operand, description);
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,49,new ProjectWindowTransposeRule();
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,51,private ProjectWindowTransposeRule() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,54,operand(LogicalWindow.class, any())));
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,68,public static final ReduceDecimalsRule INSTANCE = new ReduceDecimalsRule();
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,75,private ReduceDecimalsRule() {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,76,super(operand(LogicalCalc.class, any()));
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,40,new SemiJoinFilterTransposeRule();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,47,private SemiJoinFilterTransposeRule() {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,50,some(operand(LogicalFilter.class, any()))));
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,48,new SemiJoinJoinTransposeRule();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,55,private SemiJoinJoinTransposeRule() {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,58,some(operand(Join.class, any()))));
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,36,new SemiJoinRemoveRule();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,41,private SemiJoinRemoveRule() {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,42,super(operand(SemiJoin.class, any()));
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,47,LogicalJoin.class);
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,56,operand(joinClass, any())));
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,47,new SortProjectTransposeRule(Sort.class, LogicalProject.class, null);
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,55,this(sortClass, projectClass, null);
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,63,super(
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,66,description);
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,33,public static final SortRemoveRule INSTANCE = new SortRemoveRule();
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,35,private SortRemoveRule() {
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,36,super(
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,37,operand(Sort.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,139,private SubQueryRemoveRule(RelOptRuleOperand operand,
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,34,public static final TableScanRule INSTANCE = new TableScanRule();
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,38,private TableScanRule() {
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,39,super(operand(LogicalTableScan.class, any()));
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,31,new UnionEliminatorRule(LogicalUnion.class);
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,38,private UnionEliminatorRule(Class<? extends Union> clazz) {
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,39,super(operand(clazz, any()));
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,121,private ValuesReduceRule(RelOptRuleOperand operand, String desc) {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,122,super(operand, desc);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,58,new DeltaProjectTransposeRule(),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,59,new DeltaFilterTransposeRule(),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,60,new DeltaAggregateTransposeRule(),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,61,new DeltaSortTransposeRule(),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,62,new DeltaUnionTransposeRule(),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,63,new DeltaJoinTransposeRule(),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,64,new DeltaTableScanRule(),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,65,new DeltaTableScanToEmptyRule());
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,69,private DeltaProjectTransposeRule() {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,72,operand(Project.class, any())));
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,89,private DeltaFilterTransposeRule() {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,92,operand(Filter.class, any())));
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,108,private DeltaAggregateTransposeRule() {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,130,private DeltaSortTransposeRule() {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,133,operand(Sort.class, any())));
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,150,private DeltaUnionTransposeRule() {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,153,operand(Union.class, any())));
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,178,private DeltaTableScanRule() {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,181,operand(TableScan.class, none())));
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,209,private DeltaTableScanToEmptyRule() {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,212,operand(TableScan.class, none())));
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,243,operand(Join.class, any())));
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,34,new CsvProjectTableScanRule();
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,36,private CsvProjectTableScanRule() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,30,new MongoToEnumerableConverterRule();
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,32,private MongoToEnumerableConverterRule() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,33,super(RelNode.class, MongoRel.CONVENTION, EnumerableConvention.INSTANCE,
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,31,new EnumerableToSparkConverterRule();
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,33,private EnumerableToSparkConverterRule() {
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,34,super(
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,35,RelNode.class, EnumerableConvention.INSTANCE, SparkRel.CONVENTION,
spark/src/main/java/org/apache/calcite/adapter/spark/JdbcToSparkConverterRule.java,30,JdbcToSparkConverterRule(JdbcConvention out) {
spark/src/main/java/org/apache/calcite/adapter/spark/JdbcToSparkConverterRule.java,31,super(
spark/src/main/java/org/apache/calcite/adapter/spark/JdbcToSparkConverterRule.java,32,RelNode.class,
spark/src/main/java/org/apache/calcite/adapter/spark/JdbcToSparkConverterRule.java,33,out, SparkRel.CONVENTION,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,74,operand(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,75,LogicalProject.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,76,operand(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,77,LogicalFilter.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,78,operand(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,79,LogicalProject.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,85,operand(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,86,LogicalFilter.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,87,operand(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,88,LogicalProject.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,94,operand(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,95,LogicalFilter.class, operand(SplunkTableScan.class, none())),
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,100,operand(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,101,LogicalProject.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,107,super(rule, "SplunkPushDownRule: " + id);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,223,return super.computeSelfCost(planner, mq).multiplyBy(0.01d);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,711,SqlStdOperatorTable.SINGLE_VALUE, false, ImmutableList.of(i), -1,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,712,0, rel, null, null));
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1339,aggregateCall.isDistinct(),
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,69,this(aggFunction, distinct, argList, -1, type, name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,104,return create(aggFunction, distinct, argList, -1, groupCount, input, type,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,105,name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,122,return create(aggFunction, distinct, argList, filterArg, type, name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,129,return new AggregateCall(aggFunction, distinct, argList, filterArg, type,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,130,name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,190,return new AggregateCall(aggFunction, distinct, argList, filterArg, type,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,191,name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,253,return new AggregateCall(aggFunction, distinct, args, filterArg, type,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,254,name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,283,return create(aggFunction, distinct, argList, filterArg, newGroupKeyCount,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,284,input, newType, getName());
core/src/main/java/org/apache/calcite/rel/core/Window.java,317,return AggregateCall.create((SqlAggFunction) aggCall.getOperator(),
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,280,return AggregateCall.create(aggregation, distinct, operands,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,327,AggregateCall.create(aggregation, false, newArgList, newFilterArg,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,328,aggregate.getGroupCount(), distinct, null, aggCall.name);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,523,AggregateCall.create(aggCall.getAggregation(), false, newArgs,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,611,AggregateCall.create(aggCall.getAggregation(), false, newArgs, -1,
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,141,ImmutableList.of(i++), -1, aggregateCall.type,
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,142,aggregateCall.name));
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,257,AggregateCall.create(
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,258,SqlStdOperatorTable.SUM,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,267,AggregateCall.create(
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,268,SqlStdOperatorTable.COUNT,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,314,oldCall.getArgList(), oldCall.filterArg, oldAggRel.getGroupCount(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,315,oldAggRel.getInput(), null, oldCall.name);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,317,AggregateCall.create(
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,318,SqlStdOperatorTable.COUNT,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,410,AggregateCall.create(
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,411,SqlStdOperatorTable.SUM,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,432,AggregateCall.create(
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,433,SqlStdOperatorTable.COUNT,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,216,return AggregateCall.create(roll, false, ImmutableList.of(offset + i), -1,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,231,return AggregateCall.create(aggregation, false, newArgs, -1,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,156,builder.aggregateCall(SqlStdOperatorTable.SINGLE_VALUE, false, null,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,157,null, builder.field(0)));
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,247,builder.aggregateCall(SqlStdOperatorTable.COUNT, false, null, "ck",
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,248,builder.fields()));
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,118,return AggregateCall.create(SqlStdOperatorTable.COUNT, false,
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,147,return AggregateCall.create(SqlStdOperatorTable.SUM0, false,
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,229,return AggregateCall.create(SqlStdOperatorTable.COUNT, false,
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,260,return AggregateCall.create(SqlStdOperatorTable.SUM, false,
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,47,public SqlCountAggFunction() {
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,48,super(
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,50,null,
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,51,SqlKind.COUNT,
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,52,ReturnTypes.BIGINT,
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,53,null,
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,57,SqlFunctionCategory.NUMERIC,
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,58,false,
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,59,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,690,public static final SqlAggFunction COUNT = new SqlCountAggFunction();
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,869,aggCall.isDistinct(), filterArg, aggCall.name, args);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1121,ImmutableList.<Integer>of(), -1, longType, null),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1123,args, -1, longType, null)));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4580,final SqlAggFunction aggFunction =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4582,RelDataType type = validator.deriveType(bb.scope, call);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,604,return aggregateCall(aggFunction, distinct, filter, alias,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,619,return new AggCallImpl(aggFunction, distinct, filter, alias,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,625,return aggregateCall(SqlStdOperatorTable.COUNT, distinct, null, alias,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,626,operands);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,631,return aggregateCall(SqlStdOperatorTable.COUNT, false, null, alias);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,636,return aggregateCall(SqlStdOperatorTable.SUM, distinct, null, alias,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,642,return aggregateCall(
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,643,SqlStdOperatorTable.AVG, distinct, null, alias, operand);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,648,return aggregateCall(SqlStdOperatorTable.MIN, false, null, alias, operand);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,653,return aggregateCall(SqlStdOperatorTable.MAX, false, null, alias, operand);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,864,AggregateCall.create(aggCall1.aggFunction, aggCall1.distinct, args,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1477,AggCallImpl(SqlAggFunction aggFunction, boolean distinct, RexNode filter,
core/src/main/java/org/apache/calcite/rel/RelDistribution.java,19,import org.apache.calcite.plan.RelTrait;
core/src/main/java/org/apache/calcite/rel/RelDistribution.java,38,public interface RelDistribution extends RelTrait {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1760,ret =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1761,rexBuilder.makeCast(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1762,rexBuilder.getTypeFactory().createSqlType(SqlTypeName.BOOLEAN),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1763,ret);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,64,private final NullCollation nullCollation;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,580,MYSQL("MySQL", "`", NullCollation.HIGH),
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,586,HIVE("Apache Hive", null, NullCollation.HIGH),
core/src/main/java/org/apache/calcite/sql/fun/SqlTrimFunction.java,120,return "{0}([BOTH|LEADING|TRAILING} {1} FROM {2})";
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,84,return dispatch(e);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,235,for (List<RexLiteral> tuple : e.getTuples()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1915,convertFrom(bb, ((SqlCall) from).operand(0));
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,676,calciteTable.getJdbcTableType().name());
core/src/main/java/org/apache/calcite/schema/Schema.java,325,OTHER,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,723,iterationIdx[level] = 0;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,117,import static org.apache.calcite.sql.fun.SqlStdOperatorTable.EXTRACT_DATE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,248,defineMethod(EXTRACT_DATE, BuiltInMethod.UNIX_DATE_EXTRACT.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,249,NullPolicy.STRICT);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1074,public static final SqlSpecialOperator EXTRACT_DATE =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,21,import org.apache.calcite.avatica.util.TimeUnitRange;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,519,final RexBuilder rexBuilder = cx.getRexBuilder();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,520,final List<SqlNode> operands = call.getOperandList();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,521,final List<RexNode> exprs = convertExpressionList(cx, operands,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,522,SqlOperandTypeChecker.Consistency.NONE);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,525,RelDataType resType =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,526,cx.getTypeFactory().createSqlType(SqlTypeName.BIGINT);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,527,resType =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,528,cx.getTypeFactory().createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,529,resType,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,530,exprs.get(1).getType().isNullable());
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,531,RexNode res = rexBuilder.makeReinterpretCast(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,532,resType, exprs.get(1), rexBuilder.makeLiteral(false));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,534,final TimeUnit unit =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,535,((SqlIntervalQualifier) operands.get(0)).getStartUnit();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,536,final SqlTypeName sqlTypeName = exprs.get(1).getType().getSqlTypeName();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,537,switch (unit) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,538,case YEAR:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,539,case MONTH:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,540,case DAY:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,541,switch (sqlTypeName) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,542,case INTERVAL_YEAR_MONTH:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,544,break;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,545,case TIMESTAMP:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,548,case DATE:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,549,return rexBuilder.makeCall(resType, SqlStdOperatorTable.EXTRACT_DATE,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,550,ImmutableList.of(exprs.get(0), res));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,551,default:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,552,throw new AssertionError("unexpected " + sqlTypeName);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,556,res = mod(rexBuilder, resType, res, getFactor(unit));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,557,res = divide(rexBuilder, res, unit.multiplier);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,558,return res;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,593,switch (unit) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,594,case DAY:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,596,case HOUR:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,597,return TimeUnit.DAY.multiplier;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,598,case MINUTE:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,599,return TimeUnit.HOUR.multiplier;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,600,case SECOND:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,601,return TimeUnit.MINUTE.multiplier;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,604,case MONTH:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,605,return TimeUnit.YEAR.multiplier;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,606,default:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,607,throw Util.unexpected(unit);
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,328,private class AccumulatorList extends ArrayList<Accumulator> {
core/src/main/java/org/apache/calcite/sql/SqlBinaryStringLiteral.java,59,public SqlNode clone(SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,66,public SqlNode clone(SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlDateLiteral.java,46,public SqlNode clone(SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,65,public SqlNode clone(SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,66,return new SqlIntervalLiteral(
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,67,(IntervalValue) value,
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,68,getTypeName(),
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,69,pos);
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,220,public SqlNode clone(SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlNode.java,115,clones[i] = (SqlNode) node.clone();
core/src/main/java/org/apache/calcite/sql/SqlNumericLiteral.java,68,public SqlNode clone(SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlNumericLiteral.java,69,return new SqlNumericLiteral(
core/src/main/java/org/apache/calcite/sql/SqlNumericLiteral.java,70,(BigDecimal) value,
core/src/main/java/org/apache/calcite/sql/SqlNumericLiteral.java,71,getPrec(),
core/src/main/java/org/apache/calcite/sql/SqlNumericLiteral.java,72,getScale(),
core/src/main/java/org/apache/calcite/sql/SqlNumericLiteral.java,73,isExact,
core/src/main/java/org/apache/calcite/sql/SqlNumericLiteral.java,74,pos);
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,56,public SqlNode clone(SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,57,public SqlNode clone(SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/fun/SqlCoalesceFunction.java,74,for (int i = 0; (i + 1) < operands.size(); ++i) {
core/src/main/java/org/apache/calcite/sql/fun/SqlCoalesceFunction.java,76,SqlStdOperatorTable.IS_NOT_NULL.createCall(
core/src/main/java/org/apache/calcite/sql/fun/SqlCoalesceFunction.java,77,pos,
core/src/main/java/org/apache/calcite/sql/fun/SqlCoalesceFunction.java,78,operands.get(i)));
core/src/main/java/org/apache/calcite/sql/fun/SqlCoalesceFunction.java,79,thenList.add(operands.get(i).clone(operands.get(i).getParserPosition()));
core/src/main/java/org/apache/calcite/sql/fun/SqlCoalesceFunction.java,83,return SqlCase.createSwitched(
core/src/main/java/org/apache/calcite/sql/fun/SqlCoalesceFunction.java,84,pos, null, whenList, thenList, elseExpr);
core/src/main/java/org/apache/calcite/sql/fun/SqlNullifFunction.java,71,return SqlCase.createSwitched(
core/src/main/java/org/apache/calcite/sql/fun/SqlNullifFunction.java,72,pos, operands.get(0), whenList, thenList, operands.get(0).clone(
core/src/main/java/org/apache/calcite/sql/fun/SqlNullifFunction.java,73,operands.get(0).getParserPosition()));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1066,orderList =
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1067,orderBy.orderList.clone(orderBy.orderList.getParserPosition());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1156,selectList =
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1158,.clone();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1180,SqlNode leftJoinTerm = (SqlNode) sourceTableRef.clone();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1206,SqlNode insertSource = (SqlNode) sourceTableRef.clone();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,647,return (SqlNode) literal.clone();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,655,return (SqlNode) type.clone();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,659,return (SqlNode) param.clone();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,663,return (SqlNode) intervalQualifier.clone();
core/src/main/java/org/apache/calcite/util/NlsString.java,39,public class NlsString implements Comparable<NlsString> {
core/src/main/java/org/apache/calcite/util/NlsString.java,94,return new NlsString(value, charsetName, collation);
core/src/main/java/org/apache/calcite/util/XmlOutput.java,21,import java.io.IOException;
core/src/main/java/org/apache/calcite/util/XmlOutput.java,22,import java.io.LineNumberReader;
core/src/main/java/org/apache/calcite/util/XmlOutput.java,24,import java.io.StringReader;
core/src/main/java/org/apache/calcite/util/XmlOutput.java,400,LineNumberReader
core/src/main/java/org/apache/calcite/util/XmlOutput.java,401,in = new LineNumberReader(new StringReader(content));
core/src/main/java/org/apache/calcite/util/XmlOutput.java,402,try {
core/src/main/java/org/apache/calcite/util/XmlOutput.java,403,String line;
core/src/main/java/org/apache/calcite/util/XmlOutput.java,404,while ((line = in.readLine()) != null) {
core/src/main/java/org/apache/calcite/util/XmlOutput.java,406,out.println(line);
core/src/main/java/org/apache/calcite/util/XmlOutput.java,409,throw new AssertionError(ex);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,818,ImmutableBitSet.of(registerExpressions(extraNodes, groupKey_.nodes));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,821,final int sizeBefore = extraNodes.size();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,826,ImmutableBitSet.of(registerExpressions(extraNodes, nodeList));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,834,if (extraNodes.size() > sizeBefore) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,837,+ extraNodes.subList(sizeBefore, extraNodes.size()));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,845,registerExpressions(extraNodes, aggCall1.operands);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,847,registerExpression(extraNodes, aggCall1.filter);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,860,final List<Integer> args = registerExpressions(extraNodes, aggCall1.operands);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,862,: registerExpression(extraNodes, aggCall1.filter);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,891,private static int registerExpression(List<RexNode> exprList, RexNode node) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,892,int i = exprList.indexOf(node);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,893,if (i < 0) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,894,i = exprList.size();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,895,exprList.add(node);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,897,return i;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,900,private static List<Integer> registerExpressions(List<RexNode> extraNodes,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,901,Iterable<? extends RexNode> nodes) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,902,final List<Integer> builder = new ArrayList<>();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,903,for (RexNode node : nodes) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,904,builder.add(registerExpression(extraNodes, node));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,906,return builder;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,105,final RelDataType inputRowType = getInput().getRowType();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,179,final int indicatorCount = getIndicatorCount();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,197,agg.context =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,198,new AggContext() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,199,public SqlAggFunction aggregation() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,200,return agg.call.getAggregation();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,203,public RelDataType returnRelType() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,204,return agg.call.type;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,207,public Type returnType() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,208,return EnumUtils.javaClass(typeFactory, returnRelType());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,211,public List<? extends RelDataType> parameterRelTypes() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,212,return EnumUtils.fieldRowTypes(inputRowType, null,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,213,agg.call.getArgList());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,216,public List<? extends Type> parameterTypes() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,217,return EnumUtils.fieldTypes(typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,218,parameterRelTypes());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,221,List<Type> state =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,222,agg.implementor.getStateType(agg.context);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,247,new AggResultContextImpl(initBlock, decls));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,251,PhysTypeImpl.of(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,252,typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,344,for (int j = 0; j < groupCount + indicatorCount; j++) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,345,results.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,346,keyPhysType.fieldReference(key_, j));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,352,new AggResultContextImpl(resultBlock, agg.state)));
core/src/main/java/org/apache/calcite/adapter/enumerable/impl/AggAddContextImpl.java,32,super(block, accumulator);
core/src/main/java/org/apache/calcite/adapter/enumerable/impl/AggResetContextImpl.java,30,public class AggResetContextImpl extends NestedBlockBuilderImpl
core/src/main/java/org/apache/calcite/adapter/enumerable/impl/AggResultContextImpl.java,37,public AggResultContextImpl(BlockBuilder block,
core/src/main/java/org/apache/calcite/adapter/enumerable/impl/AggResultContextImpl.java,38,List<Expression> accumulator) {
core/src/main/java/org/apache/calcite/adapter/enumerable/impl/WinAggResultContextImpl.java,48,super(block, accumulator);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,412,LogicalAggregate.create(ret, false,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,715,return LogicalAggregate.create(rel, false,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,716,ImmutableBitSet.of(), null, aggCalls);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,727,return LogicalAggregate.create(rel, false,
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1280,return MutableAggregate.of(input, aggregate.indicator, groupSet, groupSets,
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1281,aggregateCalls);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1343,result = MutableAggregate.of(target, false, groupSet.build(), null,
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,129,this.indicator = indicator;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,20,import org.apache.calcite.plan.RelOptCluster;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,29,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,30,import org.apache.calcite.rel.type.RelDataTypeFactory;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,37,import org.apache.calcite.sql.type.SqlTypeName;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,50,import java.math.BigDecimal;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,150,rewriteUsingGroupingSets(call, aggregate, argLists);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,191,relBuilder.groupKey(groupSet, aggregate.indicator, aggregate.getGroupSets());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,207,Aggregate aggregate, Set<Pair<List<Integer>, Integer>> argLists) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,210,groupSetTreeSet.add(aggregate.getGroupSet());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,211,for (Pair<List<Integer>, Integer> argList : argLists) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,212,groupSetTreeSet.add(
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,215,.union(aggregate.getGroupSet()));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,232,distinctAggCalls);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,233,final RelNode distinct = relBuilder.peek();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,237,final RelOptCluster cluster = aggregate.getCluster();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,238,final RexBuilder rexBuilder = cluster.getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,239,final RelDataTypeFactory typeFactory = cluster.getTypeFactory();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,240,final RelDataType booleanType =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,241,typeFactory.createTypeWithNullability(
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,242,typeFactory.createSqlType(SqlTypeName.BOOLEAN), false);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,243,final List<Pair<RexNode, String>> predicates = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,244,final Map<ImmutableBitSet, Integer> filters = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,246,class Registrar {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,247,RexNode group = null;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,249,if (group == null) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,250,group = makeGroup(groupCount - 1);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,252,final RexNode node =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,253,rexBuilder.makeCall(SqlStdOperatorTable.EQUALS, group,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,254,rexBuilder.makeExactLiteral(
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,255,toNumber(remap(fullGroupSet, groupSet))));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,256,predicates.add(Pair.of(node, toString(groupSet)));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,258,+ predicates.size() - 1;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,261,private RexNode makeGroup(int i) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,262,final RexInputRef ref =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,263,rexBuilder.makeInputRef(booleanType, groupCount + i);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,264,final RexNode kase =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,265,rexBuilder.makeCall(SqlStdOperatorTable.CASE, ref,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,266,rexBuilder.makeExactLiteral(BigDecimal.ZERO),
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,267,rexBuilder.makeExactLiteral(TWO.pow(i)));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,268,if (i == 0) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,269,return kase;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,271,return rexBuilder.makeCall(SqlStdOperatorTable.PLUS,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,272,makeGroup(i - 1), kase);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,276,private BigDecimal toNumber(ImmutableBitSet bitSet) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,277,BigDecimal n = BigDecimal.ZERO;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,278,for (int key : bitSet) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,279,n = n.add(TWO.pow(key));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,281,return n;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,284,private String toString(ImmutableBitSet bitSet) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,285,final StringBuilder buf = new StringBuilder("$i");
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,286,for (int key : bitSet) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,287,buf.append(key).append('_');
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,289,return buf.substring(0, buf.length() - 1);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,292,final Registrar registrar = new Registrar();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,293,for (ImmutableBitSet groupSet : groupSets) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,297,if (!predicates.isEmpty()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,298,List<Pair<RexNode, String>> nodes = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,299,for (RelDataTypeField f : relBuilder.peek().getRowType().getFieldList()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,300,final RexNode node = rexBuilder.makeInputRef(f.getType(), f.getIndex());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,301,nodes.add(Pair.of(node, f.getName()));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,303,nodes.addAll(predicates);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,304,relBuilder.project(Pair.left(nodes), Pair.right(nodes));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,307,int x = groupCount + indicatorCount;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,335,aggregate.indicator,
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,100,if (allColumnsInAggregate && !aggregate.indicator) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,113,if (aggregate.indicator) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,254,.aggregate(relBuilder.groupKey(belowAggregateKey, false, null),
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,338,aggregate.indicator, Mappings.apply2(mapping, aggregate.getGroupSets())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,91,if (aggregate.indicator) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,528,oldAggregate.indicator,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,107,relBuilder.aggregate(relBuilder.groupKey(topAggRel.getGroupSet(), false, null),
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,128,relBuilder.aggregate(relBuilder.groupKey(aggRel.getGroupSet(), false, null),
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,143,relBuilder.groupKey(aggRel.getGroupSet(), aggRel.indicator, aggRel.getGroupSets()),
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,129,if (aggregate.indicator) {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,111,operand(Aggregate.class, any())));
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,121,LogicalAggregate.create(newDelta, aggregate.indicator,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,122,aggregate.getGroupSet(), aggregate.groupSets,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,123,aggregate.getAggCallList());
core/src/main/java/org/apache/calcite/runtime/CalciteResource.java,277,ExInst<SqlValidatorException> aggregateIllegalInGroupBy();
core/src/main/java/org/apache/calcite/sql/fun/SqlAbstractGroupFunction.java,20,import org.apache.calcite.sql.SqlFunction;
core/src/main/java/org/apache/calcite/sql/fun/SqlAbstractGroupFunction.java,40,public class SqlAbstractGroupFunction extends SqlFunction {
core/src/main/java/org/apache/calcite/sql/fun/SqlAbstractGroupFunction.java,57,super(name, kind, returnTypeInference, operandTypeInference,
core/src/main/java/org/apache/calcite/sql/fun/SqlAbstractGroupFunction.java,58,operandTypeChecker, category);
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,250,public final boolean indicator;
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,258,this.indicator = !this.groupSets.equals(ImmutableList.of(groupSet));
core/src/main/java/org/apache/calcite/sql/validate/DelegatingNamespace.java,104,public String translate(String name) {
core/src/main/java/org/apache/calcite/sql/validate/DelegatingNamespace.java,105,return namespace.translate(name);
core/src/main/java/org/apache/calcite/sql/validate/IdentifierNamespace.java,191,return resolvedNamespace.translate(name);
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,22,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,37,private final SqlValidatorScope scope;
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,44,this.scope = scope;
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,55,public List<String> translatedNames() {
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,56,if (scope == null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,57,return identifier.names;
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,59,final ImmutableList.Builder<String> builder = ImmutableList.builder();
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,60,SqlValidatorNamespace namespace =
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,62,builder.add(identifier.names.get(0));
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,63,for (String name : Util.skip(identifier.names)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,64,if (namespace != null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,65,name = namespace.translate(name);
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,66,namespace = null;
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,68,builder.add(name);
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,70,return builder.build();
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,81,public final List<String> suffixTranslated() {
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,82,return Util.skip(translatedNames(), prefixLength);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3330,throw newValidationError(agg, RESOURCE.aggregateIllegalInGroupBy());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3372,String keyword) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3381,throw newValidationError(condition, RESOURCE.condMustBeBoolean(keyword));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorNamespace.java,167,String translate(String name);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,580,LogicalAggregate.create(newProject,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,581,false,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,582,newGroupSet,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,583,null,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,584,newAggCalls));
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2175,LogicalAggregate.create(joinOutputProject,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2176,false,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2177,groupSet,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2178,null,
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,876,final RelBuilder.GroupKey groupKey = relBuilder.groupKey(newGroupSet,
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,877,aggregate.indicator, newGroupSets);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,37,import org.apache.calcite.rel.core.Aggregate;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,554,final RelBuilder relBuilder =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,555,RelFactories.LOGICAL_BUILDER.create(cluster, null);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,785,rel =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,786,createAggregate(bb, false, groupSet, ImmutableList.of(groupSet),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,787,ImmutableList.<AggregateCall>of());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1118,LogicalAggregate.create(seek, false, ImmutableBitSet.of(), null,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2499,RexNode havingExpr = null;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2556,createAggregate(bb, r.indicator, r.groupSet, r.groupSets,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2561,final Aggregate aggregate = (Aggregate) bb.root;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2562,if (aggregate.getGroupType() != Aggregate.Group.SIMPLE) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2563,assert aggregate.indicator;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2564,List<Pair<RexNode, String>> projects2 = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2565,int converted = 0;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2566,final int groupCount = aggregate.getGroupSet().cardinality();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2567,for (RelDataTypeField field : aggregate.getRowType().getFieldList()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2568,final int i = field.getIndex();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2569,final RexNode rex;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2570,if (i < groupCount && r.isNullable(i)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2571,++converted;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2573,rex = rexBuilder.makeCall(SqlStdOperatorTable.CASE,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2574,rexBuilder.makeInputRef(aggregate, groupCount + i),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2575,rexBuilder.makeCast(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2576,typeFactory.createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2577,field.getType(), true),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2578,rexBuilder.constantNull()),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2579,rexBuilder.makeInputRef(aggregate, i));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2581,rex = rexBuilder.makeInputRef(aggregate, i);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2583,projects2.add(Pair.of(rex, field.getName()));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2585,if (converted > 0) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2586,bb.setRoot(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2587,RelOptUtil.createProject(bb.root, projects2, true),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2588,false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2600,if (havingExpr.isAlwaysTrue()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2601,havingExpr = null;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2653,bb.setRoot(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2654,RelOptUtil.createProject(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2655,bb.root,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2656,projects,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2657,true),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2658,false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2687,protected RelNode createAggregate(Blackboard bb, boolean indicator,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2688,ImmutableBitSet groupSet, ImmutableList<ImmutableBitSet> groupSets,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2689,List<AggregateCall> aggCalls) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2690,return LogicalAggregate.create(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2691,bb.root, indicator, groupSet, groupSets, aggCalls);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3280,for (String name : qualified.suffixTranslated()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4603,r.indicator,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4643,switch (call.getKind()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4644,case GROUPING:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4646,case GROUP_ID:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4647,final RelDataType type = validator.getValidatedNodeType(call);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4648,if (!aggregatingSelectScope.resolved.get().indicator) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4649,return rexBuilder.makeExactLiteral(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4650,TWO.pow(effectiveArgCount(call)).subtract(BigDecimal.ONE), type);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4652,final List<Integer> operands;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4653,switch (call.getKind()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4654,case GROUP_ID:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4655,operands = ImmutableIntList.range(0, groupExprs.size());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4656,break;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4657,default:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4658,operands = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4659,for (SqlNode operand : call.getOperandList()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4660,final int x = lookupGroupExpr(operand);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4661,assert x >= 0;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4662,operands.add(x);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4665,RexNode node = null;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4666,int shift = operands.size();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4667,for (int operand : operands) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4668,node = bitValue(node, type, operand, --shift);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4670,return node;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4676,private int effectiveArgCount(SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4677,switch (call.getKind()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4678,case GROUPING:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4681,return call.operandCount();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4682,case GROUP_ID:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4683,return groupExprs.size();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4684,default:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4685,throw new AssertionError(call.getKind());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4689,private RexNode bitValue(RexNode previous, RelDataType type, int x,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4690,int shift) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4691,final AggregatingSelectScope.Resolved r =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4692,aggregatingSelectScope.resolved.get();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4693,RexNode node = rexBuilder.makeCall(SqlStdOperatorTable.CASE,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4694,rexBuilder.makeInputRef(bb.root, r.groupExprList.size() + x),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4695,rexBuilder.makeExactLiteral(BigDecimal.ONE, type),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4696,rexBuilder.makeExactLiteral(BigDecimal.ZERO, type));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4697,if (shift > 0) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4698,node = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, node,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4699,rexBuilder.makeExactLiteral(TWO.pow(shift), type));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4701,if (previous != null) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4702,node = rexBuilder.makeCall(SqlStdOperatorTable.PLUS, previous, node);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4704,return node;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,814,final RelDataType inputRowType = peek().getRowType();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,815,final List<RexNode> extraNodes = projects(inputRowType);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,851,if (extraNodes.size() > inputRowType.getFieldCount()) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,852,project(extraNodes);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,882,private List<RexNode> projects(RelDataType inputRowType) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,883,final List<RexNode> exprList = new ArrayList<>();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,884,for (RelDataTypeField field : inputRowType.getFieldList()) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,885,final RexBuilder rexBuilder = cluster.getRexBuilder();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,886,exprList.add(rexBuilder.makeInputRef(field.getType(), field.getIndex()));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,888,return exprList;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1285,final RelDataType inputRowType = peek().getRowType();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1286,final List<RexNode> extraNodes = projects(inputRowType);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1287,final List<RexNode> originalExtraNodes = ImmutableList.copyOf(extraNodes);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,115,schema.add(entry.getKey(), entry.getValue());
core/src/main/java/org/apache/calcite/model/ModelHandler.java,122,schema.add(Util.first(functionName, methodName), function);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,851,final int typeOrdinal = getTypeOrdinal(type);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeFamily.java,69,COLUMN_LIST;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,733,if (nullPolicy == NullPolicy.STRICT) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,742,if (nullPolicy == NullPolicy.STRICT) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,825,if (nullPolicy == NullPolicy.STRICT) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,289,final RelDataType type = function.getReturnType(typeFactory);
core/src/main/java/org/apache/calcite/schema/impl/ScalarFunctionImpl.java,38,public class ScalarFunctionImpl extends ReflectiveFunctionBase implements
core/src/main/java/org/apache/calcite/schema/impl/ScalarFunctionImpl.java,39,ScalarFunction, ImplementableFunction {
core/src/main/java/org/apache/calcite/schema/impl/ScalarFunctionImpl.java,116,new ReflectiveCallNotNullImplementor(method), NullPolicy.NONE, false);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeExplicitPrecedenceList.java,125,assert containsType(type1);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeExplicitPrecedenceList.java,126,assert containsType(type2);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,517,final SqlOperator op = call.getOperator();
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,32,import org.apache.calcite.sql.fun.SqlAvgAggFunction;
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,34,import org.apache.calcite.sql.fun.SqlSumAggFunction;
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,117,if (call.getAggregation() instanceof SqlAvgAggFunction
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,118,|| call.getAggregation() instanceof SqlSumAggFunction) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,187,if (oldCall.getAggregation() instanceof SqlSumAggFunction) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,190,return reduceSum(oldAggRel, oldCall, newCalls, aggCallMapping);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,192,if (oldCall.getAggregation() instanceof SqlAvgAggFunction) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,198,return reduceAvg(oldAggRel, oldCall, newCalls, aggCallMapping);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,248,Map<AggregateCall, RexNode> aggCallMapping) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,250,RexBuilder rexBuilder = oldAggRel.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,251,int iAvgInput = oldCall.getArgList().get(0);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,252,RelDataType avgInputType =
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,256,AggregateCall sumCall =
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,266,AggregateCall countCall =
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,286,RexNode denominatorRef =
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,294,rexBuilder.makeCall(SqlStdOperatorTable.DIVIDE,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,295,numeratorRef,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,296,denominatorRef);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,380,final RelDataType argType =
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,381,getFieldType(
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,382,oldAggRel.getInput(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,383,argOrdinal);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,385,final RexNode argRef = inputExprs.get(argOrdinal);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,386,final RexNode argSquared =
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,387,rexBuilder.makeCall(
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,388,SqlStdOperatorTable.MULTIPLY, argRef, argRef);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,392,AggregateCall.create(
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,393,SqlStdOperatorTable.SUM,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,394,oldCall.isDistinct(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,395,ImmutableIntList.of(argSquaredOrdinal),
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,396,oldCall.filterArg,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,400,null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,407,ImmutableList.of(argType));
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,425,ImmutableList.of(argType));
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,429,SqlStdOperatorTable.MULTIPLY, sumArg, sumArg);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,438,oldAggRel.getInput(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,447,ImmutableList.of(argType));
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,451,SqlStdOperatorTable.DIVIDE,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,452,sumSquaredArg, countArg);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystem.java,75,RelDataType deriveSumType(RelDataTypeFactory typeFactory, RelDataType argumentType);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystemImpl.java,166,RelDataTypeFactory typeFactory, RelDataType argumentType) {
core/src/main/java/org/apache/calcite/sql/fun/SqlAvgAggFunction.java,41,super(kind.name(),
core/src/main/java/org/apache/calcite/sql/fun/SqlAvgAggFunction.java,44,ReturnTypes.ARG0_NULLABLE_IF_EMPTY,
core/src/main/java/org/apache/calcite/sql/fun/SqlAvgAggFunction.java,50,Preconditions.checkArgument(kind == SqlKind.AVG
core/src/main/java/org/apache/calcite/sql/fun/SqlAvgAggFunction.java,51,|| kind == SqlKind.STDDEV_POP
core/src/main/java/org/apache/calcite/sql/fun/SqlAvgAggFunction.java,52,|| kind == SqlKind.STDDEV_SAMP
core/src/main/java/org/apache/calcite/sql/fun/SqlAvgAggFunction.java,53,|| kind == SqlKind.VAR_POP
core/src/main/java/org/apache/calcite/sql/fun/SqlAvgAggFunction.java,54,|| kind == SqlKind.VAR_SAMP);
core/src/main/java/org/apache/calcite/sql/fun/SqlCovarAggFunction.java,46,ReturnTypes.ARG0_NULLABLE_IF_EMPTY,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1103,expr = expandAvg(arg);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1106,expr = expandVariance(arg, true, true);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1109,expr = expandVariance(arg, false, true);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1112,expr = expandVariance(arg, true, false);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1115,expr = expandVariance(arg, false, false);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1120,RelDataType type =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1121,cx.getValidator().getValidatedNodeType(call);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1127,final SqlNode arg) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1134,pos, sum, count);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1138,final SqlNode arg,
core/src/main/java/org/apache/calcite/sql/SqlKind.java,916,return IS_FALSE;
core/src/main/java/org/apache/calcite/sql/SqlKind.java,918,return IS_TRUE;
core/src/main/java/org/apache/calcite/sql/SqlKind.java,922,return IS_NOT_FALSE;
core/src/main/java/org/apache/calcite/sql/SqlKind.java,924,return IS_NOT_TRUE;
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,63,public ArrayTable(Type elementType, RelProtoDataType protoRowType,
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,268,public ObjectArray(int ordinal) {
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,320,public PrimitiveArray(int ordinal, Primitive primitive, Primitive p) {
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,367,public PrimitiveDictionary() {
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,409,public ObjectDictionary(
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,478,public StringDictionary() {
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,516,public ByteStringDictionary() {
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,556,public Constant(int ordinal) {
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,807,public Content(List<? extends Column> columns, int size,
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,815,public Content(List<? extends Column> columns, int size, int sortField) {
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,843,public ObjectEnumerator(int rowCount, Column column) {
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,872,public ArrayEnumerator(int rowCount, List<Column> columns) {
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,53,0x2, 0xC, 0xF0, 0xFF00, 0xFFFF0000, 0xFFFFFFFF00000000L};
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,464,public Kev(int source, Comparable key) {
core/src/main/java/org/apache/calcite/adapter/clone/ListTable.java,51,public ListTable(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpretable.java,189,public EnumerableNode(Enumerable<Object[]> enumerable,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,75,protected final Function1<String, RexToLixTranslator.InputGetter>
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,76,allCorrelateVariables =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,77,new Function1<String, RexToLixTranslator.InputGetter>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,78,public RexToLixTranslator.InputGetter apply(String name) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,79,return getCorrelVariableGetter(name);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,75,public static final EnumerableTableModifyRule
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,76,ENUMERABLE_TABLE_MODIFICATION_RULE = new EnumerableTableModifyRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,90,public static final EnumerableFilterToCalcRule
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,91,ENUMERABLE_FILTER_TO_CALC_RULE = new EnumerableFilterToCalcRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,93,public static final EnumerableProjectToCalcRule
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,94,ENUMERABLE_PROJECT_TO_CALC_RULE = new EnumerableProjectToCalcRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,99,public static final EnumerableTableFunctionScanRule
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,100,ENUMERABLE_TABLE_FUNCTION_SCAN_RULE = new EnumerableTableFunctionScanRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,279,inputPhysType.getRowType().getFieldCount();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,523,getBlockBuilderWinAggFrameResultContextFunction(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,194,private final Map<SqlAggFunction, Supplier<? extends WinAggImplementor>>
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,195,winAggMap = Maps.newHashMap();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,590,((SqlUserDefinedFunction) operator).getFunction();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1871,public IsXxxImplementor(Boolean seek, boolean negate) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1895,public NotImplementor(NotNullImplementor implementor) {
core/src/main/java/org/apache/calcite/adapter/enumerable/WinAggImplementor.java,38,public enum SeekType {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,130,public JdbcConverterRule(Class<? extends RelNode> clazz, RelTrait in,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,77,public JdbcTable(JdbcSchema jdbcSchema, String jdbcCatalogName,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,117,public Pair<ColumnMetaData.Rep, Integer>
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,118,apply(RelDataTypeField field) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,119,final RelDataType type = field.getType();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,175,public JdbcTableQueryable(QueryProvider queryProvider, SchemaPlus schema,
core/src/main/java/org/apache/calcite/interpreter/AbstractSingleNode.java,31,public AbstractSingleNode(Interpreter interpreter, T rel) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,323,public NodeInfo(RelNode rel, Sink sink, Enumerable<Row> rowEnumerable) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,338,public EnumeratorSource(final Enumerator<Row> enumerator) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,386,public ListSource(ListSink sink) {
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,208,<T> CalcitePrepare.CalciteSignature<T>
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,209,parseQuery(CalcitePrepare.Query<T> query,
core/src/main/java/org/apache/calcite/jdbc/CalciteJdbc41Factory.java,120,public CalciteJdbc41Statement(CalciteConnectionImpl connection,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,673,public CalciteMetaTable(Table calciteTable, String tableCat,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,685,public CalciteMetaSchema(CalciteSchema calciteSchema,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,694,public MetadataTable(Class<E> clazz) {
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,63,syntheticTypes = new HashMap<>();
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,344,public RecordFieldImpl(
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,36,public CachingLatticeStatisticProvider(
core/src/main/java/org/apache/calcite/materialize/Lattice.java,448,public Edge(RelNode source, RelNode target) {
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,100,public SchemaImpl(Lattice lattice, StatisticsProvider statisticsProvider) {
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,198,public StatisticsProviderImpl(Lattice lattice) {
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,224,final Multimap<Pair<Convention, Convention>, ConverterRule>
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,225,mapArcToConverterRule =
core/src/main/java/org/apache/calcite/plan/RelOptListener.java,88,public abstract static class RelEvent extends EventObject {
core/src/main/java/org/apache/calcite/plan/RelOptListener.java,102,public static class RelChosenEvent extends RelEvent {
core/src/main/java/org/apache/calcite/plan/RelOptListener.java,110,public static class RelEquivalenceEvent extends RelEvent {
core/src/main/java/org/apache/calcite/plan/RelOptListener.java,134,public static class RelDiscardedEvent extends RelEvent {
core/src/main/java/org/apache/calcite/plan/RelOptListener.java,141,public abstract static class RuleEvent extends RelEvent {
core/src/main/java/org/apache/calcite/plan/RelOptListener.java,158,public static class RuleAttemptedEvent extends RuleEvent {
core/src/main/java/org/apache/calcite/plan/RelOptListener.java,176,public static class RuleProductionEvent extends RuleAttemptedEvent {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,282,|| type2.getSqlTypeName() == SqlTypeName.ANY) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,342,mapping.set(
core/src/main/java/org/apache/calcite/plan/TableAccessMap.java,41,public static enum Mode {
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,32,public <M extends Metadata> UnboundMetadata<M>
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,33,apply(Class<? extends RelNode> relClass,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,167,classOperands = LinkedListMultimap.create();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,310,getPhaseRuleMappingInitializer() {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,32,public <M extends Metadata> UnboundMetadata<M>
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,33,apply(Class<? extends RelNode> relClass,
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,59,public CalciteMaterializer(CalcitePrepareImpl prepare,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,987,public CalcitePreparingStmt(CalcitePrepareImpl prepare,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1228,public CalcitePreparedExplain(
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1260,public EmptyScalarTranslator(RexBuilder rexBuilder) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1383,public LambdaScalarTranslator(
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,57,public LixToRelTranslator(RelOptCluster cluster, Prepare preparingStmt) {
core/src/main/java/org/apache/calcite/prepare/QueryableRelBuilder.java,81,public QueryableRelBuilder(LixToRelTranslator translator) {
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,314,public MySchemaPlus(SchemaPlus parent, String name, Schema schema) {
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,72,new SortFactoryImpl();
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,75,new AggregateFactoryImpl();
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,314,public WindowKey(
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,353,Lists.newArrayList(
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,354,Iterables.filter(aggWindow.orderKeys,
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,359,return rexFieldCollation.left instanceof RexLocalRef;
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,58,public <M extends Metadata> UnboundMetadata<M>
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,59,apply(Class<? extends RelNode> relClass,
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,99,public CachingInvocationHandler(Metadata metadata) {
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,58,public <M extends Metadata> UnboundMetadata<M>
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,59,apply(Class<? extends RelNode> relClass,
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,104,public ChainedInvocationHandler(List<Metadata> metadataList) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,113,final ImmutableList<Method> methods) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,279,public <M extends Metadata> UnboundMetadata<M>
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,280,apply(Class<? extends RelNode> relClass,
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,281,Class<? extends M> metadataClass) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,290,public <M extends Metadata> UnboundMetadata<M>
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,291,apply(Class<? extends RelNode> relClass) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,398,public JoinConditionBasedPredicateInference(Join joinRel,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,730,public CardOfProjExpr(RelMetadataQuery mq, Project rel) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataProvider.java,57,<M extends Metadata> UnboundMetadata<M>
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataProvider.java,58,apply(Class<? extends RelNode> relClass,
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataProvider.java,59,Class<? extends M> metadataClass);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,392,private static <E> SqlSplittableAggFunction.Registry<E>
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,393,registry(final List<E> list) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,59,SUPPORTED_AGGREGATES = new IdentityHashMap<>();
core/src/main/java/org/apache/calcite/rel/rules/CalcRelSplitter.java,828,public ImplementTester(RelType relType) {
core/src/main/java/org/apache/calcite/rel/rules/CalcRelSplitter.java,881,public InputToCommonExprConverter(
core/src/main/java/org/apache/calcite/rel/rules/CalcRelSplitter.java,964,public HighestUsageFinder(RexNode[] exprs, int[] exprLevels) {
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,88,public RemoveIsNotDistinctFromRexShuttle(
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,547,public InputReferenceCounter(int[] refCounts) {
core/src/main/java/org/apache/calcite/rel/rules/LoptSemiJoinOptimizer.java,829,public LcsIndexOptimizer(LcsTableScan rel) {}
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,181,new RelType("CalcRelType") {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,182,protected boolean canImplement(RexFieldAccess field) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,183,return true;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,186,protected boolean canImplement(RexDynamicParam param) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,187,return true;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,190,protected boolean canImplement(RexLiteral literal) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,191,return true;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,194,protected boolean canImplement(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,195,return !(call instanceof RexOver);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,198,protected RelNode makeRel(RelOptCluster cluster, RelTraitSet traitSet,
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,199,RelBuilder relBuilder, RelNode input, RexProgram program) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,200,assert !program.containsAggs();
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,202,return super.makeRel(cluster, traitSet, relBuilder, input, program);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,205,new RelType("WinAggRelType") {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,206,protected boolean canImplement(RexFieldAccess field) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,207,return false;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,210,protected boolean canImplement(RexDynamicParam param) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,211,return false;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,214,protected boolean canImplement(RexLiteral literal) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,215,return false;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,218,protected boolean canImplement(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,219,return call instanceof RexOver;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,222,protected boolean supportsCondition() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,223,return false;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,226,protected RelNode makeRel(RelOptCluster cluster, RelTraitSet traitSet,
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,227,RelBuilder relBuilder, RelNode input, RexProgram program) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,230,return LogicalWindow.create(cluster, traitSet, relBuilder, input,
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,231,program);
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,585,public InputSpecialOpFinder(
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,666,public RefAndExprConverter(
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,355,public ReplaceSubQueryShuttle(RexSubQuery subQuery, RexNode replacement) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystemImpl.java,159,&& getDefaultPrecision(typeName) != -1) {
core/src/main/java/org/apache/calcite/rex/RexCallBinding.java,135,public RexCastCallBinding(
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,141,public DataContextInputGetter(RelDataType rowType,
core/src/main/java/org/apache/calcite/rex/RexOver.java,154,public Finder() {
core/src/main/java/org/apache/calcite/rex/RexProgram.java,843,public ExpansionShuttle(List<RexNode> exprs) {
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,998,public RegisterOutputShuttle(List<RexNode> localExprList) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1721,public ForwardRefFinder(RelDataType inputRowType) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1995,public RexShiftShuttle(int offset) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,94,public int getOrderKey() { return -1; }
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,112,public RexWindowBoundUnbounded(SqlNode node) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,190,public RexWindowBoundBounded(RexNode node) {
core/src/main/java/org/apache/calcite/runtime/CalciteResource.java,523,ExInst<CalciteException>
core/src/main/java/org/apache/calcite/runtime/CalciteResource.java,524,sQLConformance_MultipleActiveAutocommitStatements();
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,594,static <T extends Comparable<T>>
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,595,int compare(List<T> list0, List<T> list1) {
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,608,static <T extends Comparable<T>>
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,609,int compare(List<T> list0, List<T> list1, int size) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,51,private static final Function1<ResultSet, Function0<Object>>
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,52,AUTO_ROW_BUILDER_FACTORY =
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,174,public ResultSetEnumerator(
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,223,primitiveRowBuilderFactory(final Primitive[] primitives) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,62,private static final Function1<List<Object>, Enumerable<Object>>
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,63,LIST_AS_ENUMERABLE =
core/src/main/java/org/apache/calcite/schema/Schemas.java,444,public static List<CalciteSchema.TableEntry>
core/src/main/java/org/apache/calcite/schema/Schemas.java,445,getStarTables(CalciteSchema schema) {
core/src/main/java/org/apache/calcite/schema/TableFunction.java,43,List<Object> arguments);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,371,ZERO,
core/src/main/java/org/apache/calcite/sql/SqlWithItem.java,79,public SqlWithItemOperator() {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,65,RexImpTable.createImplementor(
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,66,new NotNullImplementor() {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,67,public Expression implement(RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,68,RexCall call, List<Expression> operands) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,69,return Expressions.call(GET_COMPLETION_HINTS,
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,70,Iterables.concat(Collections.singleton(ADVISOR), operands));
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,112,pos, replaced);
core/src/main/java/org/apache/calcite/sql/fun/SqlArgumentAssignmentOperator.java,38,public SqlArgumentAssignmentOperator() {
core/src/main/java/org/apache/calcite/sql/fun/SqlDefaultOperator.java,36,public SqlDefaultOperator() {
core/src/main/java/org/apache/calcite/sql/fun/SqlExtendOperator.java,37,public SqlExtendOperator() {
core/src/main/java/org/apache/calcite/sql/fun/SqlGroupIdFunction.java,33,public SqlGroupIdFunction() {
core/src/main/java/org/apache/calcite/sql/fun/SqlGroupingIdFunction.java,33,public SqlGroupingIdFunction() {
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,50,public SqlItemOperator() {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,93,d, d,
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,94,d, i,
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,95,i, d,
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,96,i, i
core/src/main/java/org/apache/calcite/sql/fun/SqlRollupOperator.java,31,public SqlRollupOperator(String name, SqlKind kind) {
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,182,&& typeSystem.getDefaultPrecision(typeName) > -1) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,337,public static final SqlOperandTypeChecker
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,338,COMPARABLE_ORDERED_COMPARABLE_ORDERED =
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,355,public static final SqlOperandTypeChecker
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,356,COMPARABLE_UNORDERED_COMPARABLE_UNORDERED =
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,377,public static final SqlSingleOperandTypeChecker
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,378,STRING_STRING_INTEGER_INTEGER =
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,407,public static final SqlSingleOperandTypeChecker
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,408,INTERVALINTERVAL_INTERVALDATETIME =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,647,public static final SqlReturnTypeInference
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,648,DYADIC_STRING_SUM_PRECISION_NULLABLE_VARYING =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,656,public static final SqlReturnTypeInference
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,657,DYADIC_STRING_SUM_PRECISION_NULLABLE =
core/src/main/java/org/apache/calcite/sql/type/SqlOperandCountRanges.java,48,public RangeImpl(int min, int max) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeExplicitPrecedenceList.java,70,TYPE_NAME_TO_PRECEDENCE_LIST =
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,110,public Pair<String, SqlValidatorNamespace>
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,111,findQualifyingTableName(String columnName, SqlNode ctx) {
core/src/main/java/org/apache/calcite/sql/validate/EmptyScope.java,106,public Pair<String, SqlValidatorNamespace>
core/src/main/java/org/apache/calcite/sql/validate/EmptyScope.java,107,findQualifyingTableName(String columnName, SqlNode ctx) {
core/src/main/java/org/apache/calcite/sql/validate/ParameterNamespace.java,34,public ParameterNamespace(SqlValidatorImpl validator, RelDataType type) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,69,SqlUserDefinedTableMacro.convertArguments(typeFactory, operandList,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,70,function, getNameAsId(), false);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,86,SqlUserDefinedTableMacro.convertArguments(typeFactory, operandList,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,87,function, getNameAsId(), false);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4188,public InsertNamespace(SqlValidatorImpl validator, SqlInsert node,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4205,public UpdateNamespace(SqlValidatorImpl validator, SqlUpdate node,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4222,public DeleteNamespace(SqlValidatorImpl validator, SqlDelete node,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4239,public MergeNamespace(SqlValidatorImpl validator, SqlMerge node,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4259,public DeriveTypeVisitor(SqlValidatorScope scope) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,310,public static AggregatingSelectScope
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,311,getEnclosingAggregateSelectScope(SqlValidatorScope scope) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,439,private static List<ImmutableBitSet>
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,536,public static ImmutableList<ImmutableBitSet>
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,537,rollup(List<ImmutableBitSet> bitSets) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,559,public static ImmutableList<ImmutableBitSet>
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,560,cube(List<ImmutableBitSet> bitSets) {
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,43,public TableNamespace(SqlValidatorImpl validator, SqlValidatorTable table) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1389,public RemoveCorrelationRexShuttle(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1584,public RemoveSingleAggregateRule() {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1637,public RemoveCorrelationForScalarProjectRule() {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1836,public RemoveCorrelationForScalarAggregateRule() {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2220,public AdjustProjectForCountAggregateRule(boolean flavor) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3688,private final Map<RelNode, Map<Integer, Integer>>
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3689,mapRootRelToFieldProjection = new HashMap<>();
core/src/main/java/org/apache/calcite/tools/Frameworks.java,286,public StdFrameworkConfig(Context context,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1222,private static <E> ImmutableList<ImmutableList<E>>
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1223,copy(Iterable<? extends List<E>> tupleList) {
core/src/main/java/org/apache/calcite/tools/RuleSets.java,48,public ListRuleSet(ImmutableList<RelOptRule> rules) {
core/src/main/java/org/apache/calcite/util/BitSets.java,328,public Closure(SortedMap<Integer, BitSet> equivalence) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,894,public Closure(SortedMap<Integer, ImmutableBitSet> equivalence) {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,677,public Node(E e) {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,695,public TopBottomNode(boolean top) {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,741,public StripList(List<Node<E>> list) {
core/src/main/java/org/apache/calcite/util/ReflectUtil.java,419,public static <R extends ReflectiveVisitor, E>
core/src/main/java/org/apache/calcite/util/ReflectUtil.java,420,ReflectiveVisitDispatcher<R, E> createDispatcher(
core/src/main/java/org/apache/calcite/util/XmlOutput.java,541,public StringEscaper() {
core/src/main/java/org/apache/calcite/util/graph/Graphs.java,38,public static <V, E extends DefaultEdge> List<V>
core/src/main/java/org/apache/calcite/util/graph/Graphs.java,39,predecessorListOf(DirectedGraph<V, E> graph, V vertex) {
core/src/main/java/org/apache/calcite/util/javac/JaninoCompiler.java,143,public AccountingClassLoader(
core/src/main/java/org/apache/calcite/util/mapping/MappingType.java,121,private MappingType() {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,1552,public PartialFunctionImpl(
core/src/main/java/org/apache/calcite/util/trace/CalciteTrace.java,59,private static final ThreadLocal<Function2<Void, File, String>>
core/src/main/java/org/apache/calcite/util/trace/CalciteTrace.java,60,DYNAMIC_HANDLER =
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,116,+ " for column: " + name
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,117,+ ". Will assume the type of column is string");
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFieldType.java,50,private static final Map<String, CsvFieldType> MAP =
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFieldType.java,51,new HashMap<String, CsvFieldType>();
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,42,public Maze(int width, int height) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,651,public static <TSource, TKey, TElement> Enumerable<Grouping<TKey, TElement>>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,652,groupBy(Enumerable<TSource> enumerable, Function1<TSource, TKey> keySelector,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,663,public static <TSource, TKey, TElement> Enumerable<Grouping<TKey, TElement>>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,664,groupBy(Enumerable<TSource> enumerable, Function1<TSource, TKey> keySelector,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,675,public static <TSource, TKey, TResult> Enumerable<TResult>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,676,groupBy(Enumerable<TSource> enumerable, Function1<TSource, TKey> keySelector,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,692,public static <TSource, TKey, TResult> Enumerable<TResult>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,693,groupBy(Enumerable<TSource> enumerable, Function1<TSource, TKey> keySelector,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,749,public static <TSource, TKey, TAccumulate, TResult> Enumerable<TResult>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,750,groupBy(Enumerable<TSource> enumerable, Function1<TSource, TKey> keySelector,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,768,public static <TSource, TKey, TAccumulate, TResult> Enumerable<TResult>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,769,groupByMultiple(Enumerable<TSource> enumerable,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,770,List<Function1<TSource, TKey>> keySelectors,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,791,public static <TSource, TKey, TAccumulate, TResult> Enumerable<TResult>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,792,groupBy(Enumerable<TSource> enumerable, Function1<TSource, TKey> keySelector,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,812,private static <TSource, TKey, TAccumulate, TResult> Enumerable<TResult>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,813,groupBy_(final Map<TKey, TAccumulate> map, Enumerable<TSource> enumerable,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,839,private static <TSource, TKey, TAccumulate, TResult> Enumerable<TResult>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,840,groupByMultiple_(final Map<TKey, TAccumulate> map,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,841,Enumerable<TSource> enumerable,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,869,private static <TSource, TKey, TResult> Enumerable<TResult>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,870,groupBy_(final Set<TKey> map, Enumerable<TSource> enumerable,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1560,private static <TSource extends Comparable<TSource>>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1561,Function2<TSource, TSource, TSource> minFunction() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1566,private static <TSource extends Comparable<TSource>>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1567,Function2<TSource, TSource, TSource> maxFunction() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1729,public static <TSource, TKey extends Comparable> Enumerable<TSource>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1730,orderByDescending(
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2406,public static <TSource, TKey> OrderedEnumerable<TSource>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2407,createOrderedEnumerable(
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2417,public static <TSource, TKey extends Comparable<TKey>>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2418,OrderedEnumerable<TSource> thenBy(
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2439,OrderedEnumerable<TSource> thenByDescending(
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2806,public TakeWhileEnumerator(Enumerator<TSource> enumerator,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2847,public TakeWhileLongEnumerator(Enumerator<TSource> enumerator,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2888,public SkipWhileEnumerator(Enumerator<TSource> enumerator,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2929,public CastingEnumerator(Enumerator<?> enumerator, Class<T> clazz) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3053,public LookupResultEnumerable(Map<TKey, TAccumulate> map,
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,154,public OrdList(List<? extends E> elements) {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,170,public OrdRandomAccessList(List<? extends E> elements) {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,180,public OrdArrayList(E[] elements) {
linq4j/src/main/java/org/apache/calcite/linq4j/QueryableDefaults.java,714,public static <T, TKey extends Comparable> OrderedQueryable<T>
linq4j/src/main/java/org/apache/calcite/linq4j/QueryableDefaults.java,715,orderByDescending(Queryable<T> source,
linq4j/src/main/java/org/apache/calcite/linq4j/QueryableDefaults.java,1079,public static <T, TKey extends Comparable<TKey>> OrderedQueryable<T>
linq4j/src/main/java/org/apache/calcite/linq4j/QueryableDefaults.java,1080,thenByDescending(OrderedQueryable<T> source,
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,39,public static final Map<Class<? extends Function>, Class>
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,40,FUNCTION_RESULT_TYPES =
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,651,public GeneratingList(int size, Function1<Integer, E> fn) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,492,public SubstituteVariableVisitor(Map<ParameterExpression, Expression> map) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,41,private final Function1<ClassDeclarationFinder, ClassDeclarationFinder>
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,42,childFactory;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,93,private static Function1<ClassDeclarationFinder, ClassDeclarationFinder>
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,94,newChildCreator(Class<? extends ClassDeclarationFinder> optimizingClass) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,36,public ExpressionWriter() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,40,public ExpressionWriter(boolean generics) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,200,public Indent(int initialCapacity) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1171,lambda(Class<F> type, BlockStatement body,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1182,public static <T, F extends Function<? extends T>> FunctionExpression<F>
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1183,lambda(Class<F> type, BlockStatement body,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1184,ParameterExpression... parameters) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1194,public static <T, F extends Function<? extends T>> FunctionExpression<F>
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1195,lambda(Class<F> type, Expression body,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1206,public static <T, F extends Function<? extends T>> FunctionExpression<F>
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1207,lambda(Class<F> type, Expression body, ParameterExpression... parameters) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3222,public FluentArrayList() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3226,public FluentArrayList(Collection<? extends T> c) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,221,&& ((Class) type).getDeclaredMethods().length == 1) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,43,public MongoEnumerator(Iterator<DBObject> cursor,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,67,MongoSortRule.INSTANCE,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,68,MongoFilterRule.INSTANCE,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,69,MongoProjectRule.INSTANCE,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,70,MongoAggregateRule.INSTANCE,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,249,public MongoConverterRule(
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,250,Class<? extends RelNode> clazz,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,251,RelTrait in,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,252,Convention out,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,253,String description) {
piglet/src/main/java/org/apache/calcite/piglet/Handler.java,181,private ImmutableList<ImmutableList<RexLiteral>>
piglet/src/main/java/org/apache/calcite/piglet/Handler.java,182,tuples(Ast.ValuesStmt valuesStmt, RelDataType rowType) {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRel.java,37,public abstract class Implementor extends JavaRelImplementor {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRel.java,49,public class Result {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkToEnumerableConverter.java,98,public SparkImplementorImpl(EnumerableRelImplementor implementor) {
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkDriver.java,109,public WrappingSplunkConnection(SplunkConnection connection) {
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkTable.java,81,public SplunkTableQueryable(QueryProvider queryProvider, SchemaPlus schema,
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,231,+ "required, list of fields to request, comma delimited",
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,233,+ "uri to splunk's mgmt port, default: https://localhost:8089",
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,235,+ "username to use for authentication, default: admin",
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,237,+ "password to use for authentication, default: changeme",
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,326,private int getIntervalSign(String value) {
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,64,this.keywordList = keywordList != null ? keywordList : new SqlNodeList(pos);
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,70,this.windowDecls = windowDecls != null ? windowDecls : new SqlNodeList(pos);
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,94,keywordList = (SqlNodeList) operand;
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,112,windowDecls = (SqlNodeList) operand;
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,178,public final SqlNodeList getWindowList() {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3137,if ((windowList == null) || (windowList.size() == 0)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3146,for (SqlNode node : windowList) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3147,final SqlWindow child = (SqlWindow) node;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3148,SqlIdentifier declName = child.getDeclName();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3162,for (int i = 0; i < windowList.size(); i++) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3163,SqlNode window1 = windowList.get(i);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3164,for (int j = i + 1; j < windowList.size(); j++) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3165,SqlNode window2 = windowList.get(j);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1857,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1179,SqlKind.OTHER_FUNCTION,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,127,int nonDistinctCount = 0;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,131,++nonDistinctCount;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,132,continue;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,134,argLists.add(Pair.of(aggCall.getArgList(), aggCall.filterArg));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,140,if (nonDistinctCount == 0 && argLists.size() == 1) {
core/src/main/java/org/apache/calcite/sql/fun/SqlNtileAggFunction.java,35,ReturnTypes.INTEGER,
core/src/main/java/org/apache/calcite/rel/core/Project.java,333,Permutation permutation = new Permutation(fieldCount);
core/src/main/java/org/apache/calcite/rel/core/Project.java,337,permutation.set(i, ((RexInputRef) exp).getIndex());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,214,final RelDataTypeFactory.FieldInfoBuilder typeBuilder =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,215,typeFactory.builder();
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,101,final RelDataTypeFactory.FieldInfoBuilder builder = typeFactory.builder();
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,124,final RelDataTypeFactory.FieldInfoBuilder builder = typeFactory.builder();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,265,final RelDataTypeFactory.FieldInfoBuilder fieldInfo = typeFactory.builder();
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,125,final RelDataTypeFactory.FieldInfoBuilder builder = typeFactory.builder();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,201,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,134,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,260,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,335,final RelDataTypeFactory.FieldInfoBuilder builder = typeFactory.builder();
core/src/main/java/org/apache/calcite/rel/core/Uncollect.java,125,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,194,final RelDataTypeFactory.FieldInfoBuilder builder = typeFactory.builder();
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,78,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,125,final RelDataTypeFactory.FieldInfoBuilder outputBuilder =
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,330,public FieldInfoBuilder(RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,331,this.typeFactory = typeFactory;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,332,assert typeFactory != null;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,350,public FieldInfoBuilder add(String name, RelDataType type) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,360,public FieldInfoBuilder add(String name, SqlTypeName typeName) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,369,public FieldInfoBuilder add(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,370,String name, SqlTypeName typeName, int precision) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,379,public FieldInfoBuilder add(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,380,String name, SqlTypeName typeName, int precision, int scale) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,391,public FieldInfoBuilder nullable(boolean nullable) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,404,public FieldInfoBuilder add(RelDataTypeField field) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,412,public FieldInfoBuilder addAll(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,213,final FieldInfoBuilder builder = builder();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,615,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,616,typeFactory.builder();
core/src/main/java/org/apache/calcite/sql/validate/SchemaNamespace.java,44,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,51,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/sql/validate/WithItemNamespace.java,44,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,304,final RelDataTypeFactory.FieldInfoBuilder typeBuilder =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1111,final RelDataTypeFactory.FieldInfoBuilder rowTypeBuilder =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1112,cluster.getTypeFactory().builder();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1116,final RelDataType type = cluster.getTypeFactory().leastRestrictive(
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1126,rowTypeBuilder.add(name, type);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1128,final RelDataType rowType = rowTypeBuilder.build();
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTableScan.java,70,final RelDataTypeFactory.FieldInfoBuilder builder =
piglet/src/main/java/org/apache/calcite/piglet/Handler.java,235,final RelDataTypeFactory.FieldInfoBuilder typeBuilder =
piglet/src/main/java/org/apache/calcite/piglet/Handler.java,287,final RelDataTypeFactory.FieldInfoBuilder builder = typeFactory.builder();
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,167,final RelDataTypeFactory.FieldInfoBuilder builder = typeFactory.builder();
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,140,final RelDataTypeFactory.FieldInfoBuilder builder = typeFactory.builder();
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkTableScan.java,103,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,375,.put(Variable.TIME_ZONE.camelName, timeZone);
core/src/main/java/org/apache/calcite/util/JsonBuilder.java,81,private void append(StringBuilder buf, int indent, Object o) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,102,final EnumerableRel.Result result = rootRel.implement(this, prefer);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScan.java,21,import org.apache.calcite.linq4j.tree.Expression;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScan.java,34,import org.apache.calcite.util.BuiltInMethod;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScan.java,69,boolean array = false;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScan.java,76,array = true;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScan.java,87,Expression translated = t.translate(getCall());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScan.java,88,if (array && rowType.getFieldCount() == 1) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScan.java,89,translated =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScan.java,90,Expressions.call(null, BuiltInMethod.SLICE0.method, translated);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScan.java,92,bb.add(Expressions.return_(null, translated));
core/src/main/java/org/apache/calcite/model/ModelHandler.java,139,public void visit(JsonRoot root) {
core/src/main/java/org/apache/calcite/model/ModelHandler.java,143,for (JsonSchema schema : root.schemas) {
core/src/main/java/org/apache/calcite/model/ModelHandler.java,147,if (root.defaultSchema != null) {
core/src/main/java/org/apache/calcite/model/ModelHandler.java,149,connection.setSchema(root.defaultSchema);
core/src/main/java/org/apache/calcite/runtime/Like.java,24,private static final String JAVA_REGEX_SPECIALS = "[]()|^-+*?{}$\\";
core/src/main/java/org/apache/calcite/schema/Schemas.java,291,makeContext(connection, schema, schemaPath, propValues);
core/src/main/java/org/apache/calcite/schema/Schemas.java,309,makeContext(connection, schema, schemaPath, propValues);
core/src/main/java/org/apache/calcite/schema/Schemas.java,321,final List<String> schemaPath, final String sql, boolean fail) {
core/src/main/java/org/apache/calcite/schema/Schemas.java,326,makeContext(connection, schema, schemaPath, propValues);
core/src/main/java/org/apache/calcite/schema/Schemas.java,329,return prepare.analyzeView(context, sql, fail);
core/src/main/java/org/apache/calcite/schema/Schemas.java,342,makeContext(connection, schema, schemaPath, map);
core/src/main/java/org/apache/calcite/schema/Schemas.java,352,public static CalcitePrepare.Context makeContext(
core/src/main/java/org/apache/calcite/schema/Schemas.java,353,final CalciteConnection connection, final CalciteSchema schema,
core/src/main/java/org/apache/calcite/schema/Schemas.java,354,final List<String> schemaPath,
core/src/main/java/org/apache/calcite/schema/Schemas.java,361,context0.getDataContext(), schema, schemaPath);
core/src/main/java/org/apache/calcite/schema/Schemas.java,385,final List<String> schemaPath) {
core/src/main/java/org/apache/calcite/rel/core/Sort.java,136,double rowCount = mq.getRowCount(this);
core/src/main/java/org/apache/calcite/rel/core/Sort.java,137,double bytesPerRow = getRowType().getFieldCount() * 4;
core/src/main/java/org/apache/calcite/rel/core/Sort.java,138,return planner.getCostFactory().makeCost(
core/src/main/java/org/apache/calcite/rel/core/Sort.java,139,Util.nLogN(rowCount) * bytesPerRow, rowCount, 0);
core/src/main/java/org/apache/calcite/rex/RexSubQuery.java,59,final RelDataType type =
core/src/main/java/org/apache/calcite/rex/RexSubQuery.java,60,typeFactory.createTypeWithNullability(
core/src/main/java/org/apache/calcite/rex/RexSubQuery.java,61,typeFactory.createSqlType(SqlTypeName.BOOLEAN), nullable);
core/src/main/java/org/apache/calcite/rex/RexSubQuery.java,62,return new RexSubQuery(type, SqlStdOperatorTable.IN, nodes, rel);
core/src/main/java/org/apache/calcite/sql/SqlKind.java,255,LESS_THAN,
core/src/main/java/org/apache/calcite/sql/SqlKind.java,260,GREATER_THAN,
core/src/main/java/org/apache/calcite/sql/SqlKind.java,265,LESS_THAN_OR_EQUAL,
core/src/main/java/org/apache/calcite/sql/SqlKind.java,270,GREATER_THAN_OR_EQUAL,
core/src/main/java/org/apache/calcite/sql/SqlKind.java,275,EQUALS,
core/src/main/java/org/apache/calcite/sql/SqlKind.java,280,NOT_EQUALS,
core/src/main/java/org/apache/calcite/sql/fun/SqlInOperator.java,56,private final boolean isNotIn;
core/src/main/java/org/apache/calcite/sql/fun/SqlInOperator.java,65,SqlInOperator(boolean isNotIn) {
core/src/main/java/org/apache/calcite/sql/fun/SqlInOperator.java,66,super(
core/src/main/java/org/apache/calcite/sql/fun/SqlInOperator.java,67,isNotIn ? "NOT IN" : "IN",
core/src/main/java/org/apache/calcite/sql/fun/SqlInOperator.java,68,SqlKind.IN,
core/src/main/java/org/apache/calcite/sql/fun/SqlInOperator.java,74,this.isNotIn = isNotIn;
core/src/main/java/org/apache/calcite/sql/fun/SqlInOperator.java,85,return isNotIn;
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,342,public static final SqlBinaryOperator IN = new SqlInOperator(false);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,349,new SqlInOperator(true);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,941,if (inOp.isNotIn()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1408,boolean isNotIn) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1431,return rexBuilder.makeCall(SqlStdOperatorTable.EQUALS,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1442,RexNode result =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1443,RexUtil.composeDisjunction(rexBuilder, comparisons, true);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1444,assert result != null;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1446,if (isNotIn) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1447,result =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1448,rexBuilder.makeCall(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1449,SqlStdOperatorTable.NOT,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1450,result);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1453,return result;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1718,if (((SqlCall) node).getOperator() == SqlStdOperatorTable.NOT_IN) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1719,logic = logic.negate();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1739,bb,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1740,operand,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1741,logic,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1748,bb,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1749,child,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1750,logic,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1759,if (kind == SqlKind.IN) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4055,final SqlInOperator op = (SqlInOperator) call.getOperator();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4071,final RexSubQuery in = RexSubQuery.in(root.rel, builder.build());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4074,: in;
core/src/main/java/org/apache/calcite/sql/type/SameOperandTypeChecker.java,88,if (operatorBinding.isOperandNull(i, false)) {
core/src/main/java/org/apache/calcite/sql/type/SameOperandTypeChecker.java,89,if (throwOnFailure) {
core/src/main/java/org/apache/calcite/sql/type/SameOperandTypeChecker.java,90,throw callBinding.getValidator().newValidationError(
core/src/main/java/org/apache/calcite/sql/type/SameOperandTypeChecker.java,91,callBinding.operand(i), RESOURCE.nullIllegal());
core/src/main/java/org/apache/calcite/sql/type/SameOperandTypeChecker.java,93,return false;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeFactoryImpl.java,142,public RelDataType leastRestrictive(List<RelDataType> types) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeFactoryImpl.java,188,public RelDataType createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,293,unknownType = typeFactory.createSqlType(SqlTypeName.NULL);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1076,RelOptCost relCost = getCost(rel, mq);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,226,RelOptUtil.conjunctions(filter.getCondition())));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,544,RelOptUtil.conjunctions(joinRel.getCondition()),
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,112,return new UdaAccumulatorFactory(
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,397,AggregateCall call) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,38,import java.sql.Date;
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,39,import java.util.Calendar;
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,119,Object value = ((RexLiteral) literal).getValue();
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,129,if (value instanceof BigDecimal) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,130,return Pair.of(index, ((BigDecimal) value).intValue());
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,133,if (value instanceof BigDecimal) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,134,return Pair.of(index, ((BigDecimal) value).doubleValue());
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,137,if (value instanceof BigDecimal) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,138,return Pair.of(index, ((BigDecimal) value).floatValue());
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,141,if (value instanceof BigDecimal) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,142,return Pair.of(index, ((BigDecimal) value).longValue());
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,145,if (value instanceof BigDecimal) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,146,return Pair.of(index, ((BigDecimal) value).shortValue());
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,149,if (value instanceof BigDecimal) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,150,return Pair.of(index, (short) ((BigDecimal) value).byteValue());
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,153,if (value instanceof BigDecimal) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,154,return Pair.of(index, value);
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,157,if (value instanceof NlsString) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,158,value = ((RexLiteral) literal).getValue2();
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,159,final Date dateValue = Date.valueOf((String) value);
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,160,return Pair.of(index, dateValue);
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,162,final long timeInMillis = ((Calendar) value).getTimeInMillis();
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,163,return Pair.of(index, new Date(timeInMillis));
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,166,if (value instanceof NlsString) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,168,final NlsString nl = (NlsString) value;
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,169,return Pair.of(index, nl.getValue().charAt(0));
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,172,if (value instanceof NlsString) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,174,return Pair.of(index, ((NlsString) value).getValue());
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,180,if (value instanceof NlsString) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,181,return Pair.of(index, ((NlsString) value).getValue());
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,183,return Pair.of(index, value);
core/src/main/java/org/apache/calcite/util/Util.java,40,import java.io.BufferedInputStream;
core/src/main/java/org/apache/calcite/util/Util.java,41,import java.io.BufferedOutputStream;
core/src/main/java/org/apache/calcite/util/Util.java,1526,public static int runApplication(
core/src/main/java/org/apache/calcite/util/Util.java,1527,String[] cmdarray,
core/src/main/java/org/apache/calcite/util/Util.java,1528,Logger logger,
core/src/main/java/org/apache/calcite/util/Util.java,1529,Reader appInput,
core/src/main/java/org/apache/calcite/util/Util.java,1530,Writer appOutput) throws IOException, InterruptedException {
core/src/main/java/org/apache/calcite/util/Util.java,1531,return runAppProcess(
core/src/main/java/org/apache/calcite/util/Util.java,1532,newAppProcess(cmdarray),
core/src/main/java/org/apache/calcite/util/Util.java,1533,logger,
core/src/main/java/org/apache/calcite/util/Util.java,1534,appInput,
core/src/main/java/org/apache/calcite/util/Util.java,1535,appOutput);
core/src/main/java/org/apache/calcite/util/Util.java,1545,public static ProcessBuilder newAppProcess(String[] cmdarray) {
core/src/main/java/org/apache/calcite/util/Util.java,1548,StringBuilder buf = new StringBuilder();
core/src/main/java/org/apache/calcite/util/Util.java,1549,for (int i = 0; i < cmdarray.length; ++i) {
core/src/main/java/org/apache/calcite/util/Util.java,1550,if (i > 0) {
core/src/main/java/org/apache/calcite/util/Util.java,1551,buf.append(" ");
core/src/main/java/org/apache/calcite/util/Util.java,1553,buf.append('"');
core/src/main/java/org/apache/calcite/util/Util.java,1554,buf.append(cmdarray[i]);
core/src/main/java/org/apache/calcite/util/Util.java,1555,buf.append('"');
core/src/main/java/org/apache/calcite/util/Util.java,1557,String fullcmd = buf.toString();
core/src/main/java/org/apache/calcite/util/Util.java,1558,buf.setLength(0);
core/src/main/java/org/apache/calcite/util/Util.java,1559,return new ProcessBuilder(cmdarray);
core/src/main/java/org/apache/calcite/util/Util.java,1576,public static int runAppProcess(
core/src/main/java/org/apache/calcite/util/Util.java,1577,ProcessBuilder pb,
core/src/main/java/org/apache/calcite/util/Util.java,1578,Logger logger,
core/src/main/java/org/apache/calcite/util/Util.java,1579,Reader appInput,
core/src/main/java/org/apache/calcite/util/Util.java,1580,Writer appOutput) throws IOException, InterruptedException {
core/src/main/java/org/apache/calcite/util/Util.java,1581,pb.redirectErrorStream(true);
core/src/main/java/org/apache/calcite/util/Util.java,1582,if (logger != null) {
core/src/main/java/org/apache/calcite/util/Util.java,1583,logger.info("start process: " + pb.command());
core/src/main/java/org/apache/calcite/util/Util.java,1585,Process p = pb.start();
core/src/main/java/org/apache/calcite/util/Util.java,1596,if (appInput != null) {
core/src/main/java/org/apache/calcite/util/Util.java,1597,OutputStream out =
core/src/main/java/org/apache/calcite/util/Util.java,1598,new BufferedOutputStream(
core/src/main/java/org/apache/calcite/util/Util.java,1599,p.getOutputStream(),
core/src/main/java/org/apache/calcite/util/Util.java,1600,100 * 1024);
core/src/main/java/org/apache/calcite/util/Util.java,1601,int c;
core/src/main/java/org/apache/calcite/util/Util.java,1602,while ((c = appInput.read()) != -1) {
core/src/main/java/org/apache/calcite/util/Util.java,1603,out.write(c);
core/src/main/java/org/apache/calcite/util/Util.java,1605,out.flush();
core/src/main/java/org/apache/calcite/util/Util.java,1607,if (appOutput != null) {
core/src/main/java/org/apache/calcite/util/Util.java,1608,InputStream in =
core/src/main/java/org/apache/calcite/util/Util.java,1609,new BufferedInputStream(
core/src/main/java/org/apache/calcite/util/Util.java,1610,p.getInputStream(),
core/src/main/java/org/apache/calcite/util/Util.java,1611,100 * 1024);
core/src/main/java/org/apache/calcite/util/Util.java,1612,int c;
core/src/main/java/org/apache/calcite/util/Util.java,1613,while ((c = in.read()) != -1) {
core/src/main/java/org/apache/calcite/util/Util.java,1614,appOutput.write(c);
core/src/main/java/org/apache/calcite/util/Util.java,1616,appOutput.flush();
core/src/main/java/org/apache/calcite/util/Util.java,1617,in.close();
core/src/main/java/org/apache/calcite/util/Util.java,1619,p.waitFor();
core/src/main/java/org/apache/calcite/util/Util.java,1621,int status = p.exitValue();
core/src/main/java/org/apache/calcite/util/Util.java,1622,if (logger != null) {
core/src/main/java/org/apache/calcite/util/Util.java,1623,logger.info("exit status=" + status + " from " + pb.command());
core/src/main/java/org/apache/calcite/util/Util.java,1625,return status;
core/src/main/java/org/apache/calcite/sql/fun/SqlMultisetValueConstructor.java,57,null,
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,46,import java.sql.Array;
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,201,case ARRAY:
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,202,return Array.class;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1648,inferUnknownTypes(operandTypes[i], scope, operands.get(i));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,50,import org.apache.calcite.util.NlsString;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,61,import java.util.Calendar;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,561,final Comparable value = literal.getValue();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,562,if (value == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,589,return Expressions.constant(value, javaClass);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,593,Expressions.constant(value.toString()));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,596,(((Calendar) value).getTimeInMillis() / DateTimeUtils.MILLIS_PER_DAY);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,597,javaClass = int.class;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,598,break;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,601,(((Calendar) value).getTimeInMillis() % DateTimeUtils.MILLIS_PER_DAY);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,605,value2 = ((Calendar) value).getTimeInMillis();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,606,javaClass = long.class;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,607,break;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,609,value2 = ((BigDecimal) value).longValue();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,612,case INTERVAL_YEAR_MONTH:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,613,value2 = ((BigDecimal) value).intValue();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,614,javaClass = int.class;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,615,break;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,618,value2 = ((NlsString) value).getValue();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,625,((ByteString) value).getBytes(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,628,value2 = value;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,629,javaClass = value.getClass();
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,239,return ((RexLiteral) node).getValue();
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,28,import java.math.BigDecimal;
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,46,: ((BigDecimal) ((RexLiteral) rel.offset).getValue()).intValue();
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,50,: ((BigDecimal) ((RexLiteral) rel.fetch).getValue()).intValue();
core/src/main/java/org/apache/calcite/plan/Strong.java,64,return ((RexLiteral) node).getValue() == null;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,333,final Comparable c1 = o1.get(x).getValue();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,334,final Comparable c2 = o2.get(x).getValue();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,341,final Comparable c1 = o1.get(x).getValue();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,342,final Comparable c2 = o2.get(x).getValue();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,296,values.add(NullSentinel.mask(literal.getValue()));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdSize.java,144,d += typeValueSize(field.getType(), literals.get(i).getValue());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdSize.java,349,return typeValueSize(node.getType(), ((RexLiteral) node).getValue());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,88,RexNode selec =
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,89,rexBuilder.makeApproxLiteral(new BigDecimal(selectivity));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,90,return rexBuilder.makeCall(ARTIFICIAL_SELECTIVITY_FUNC, selec);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,99,public static double getSelectivityValue(RexNode artificialSelecFuncNode) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,100,assert artificialSelecFuncNode instanceof RexCall;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,101,RexCall call = (RexCall) artificialSelecFuncNode;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,104,BigDecimal bd = (BigDecimal) ((RexLiteral) operand).getValue();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,105,return bd.doubleValue();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,71,import java.util.Calendar;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,462,return SqlLiteral.createExactNumeric(literal.getValue().toString(),
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,463,POS);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,466,literal.getValue().toString(), POS);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,468,return SqlLiteral.createBoolean((Boolean) literal.getValue(), POS);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,470,return SqlLiteral.createDate((Calendar) literal.getValue(), POS);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,472,return SqlLiteral.createTime((Calendar) literal.getValue(),
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,475,return SqlLiteral.createTimestamp((Calendar) literal.getValue(),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,31,import org.apache.calcite.runtime.SqlFunctions;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,495,Comparable value = literal.getValue();
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1020,public RexLiteral makeDateLiteral(Calendar date) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1021,assert date != null;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1022,return makeLiteral(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1023,date, typeFactory.createSqlType(SqlTypeName.DATE), SqlTypeName.DATE);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1029,public RexLiteral makeTimeLiteral(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1030,Calendar time,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1031,int precision) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1032,assert time != null;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1033,return makeLiteral(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1034,time,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1042,public RexLiteral makeTimestampLiteral(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1043,Calendar timestamp,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1045,assert timestamp != null;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1046,return makeLiteral(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1047,timestamp,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1242,return makeTimeLiteral((Calendar) value, type.getPrecision());
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1244,return makeDateLiteral((Calendar) value);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1246,return makeTimestampLiteral((Calendar) value, type.getPrecision());
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1313,final Calendar calendar;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1341,if (o instanceof Calendar) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1345,calendar.setTimeInMillis((Integer) o);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1346,return calendar;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1348,if (o instanceof Calendar) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1352,calendar.setTimeInMillis(0);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1353,calendar.add(Calendar.DAY_OF_YEAR, (Integer) o);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1354,return calendar;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1356,if (o instanceof Calendar) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1360,calendar.setTimeInMillis((Long) o);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1361,return calendar;
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,33,import org.apache.calcite.util.ZonelessDate;
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,34,import org.apache.calcite.util.ZonelessDatetime;
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,35,import org.apache.calcite.util.ZonelessTime;
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,36,import org.apache.calcite.util.ZonelessTimestamp;
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,377,printDatetime(pw, new ZonelessDate(), value);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,380,printDatetime(pw, new ZonelessTime(), value);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,383,printDatetime(pw, new ZonelessTimestamp(), value);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,414,private static void printDatetime(
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,415,PrintWriter pw,
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,416,ZonelessDatetime datetime,
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,417,Comparable value) {
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,418,assert value instanceof Calendar;
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,419,datetime.setZonelessTime(
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,420,((Calendar) value).getTimeInMillis());
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,421,pw.print(datetime);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,485,Calendar cal = null;
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,486,if (typeName == SqlTypeName.DATE) {
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,487,cal =
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,488,DateTimeUtils.parseDateFormat(literal, format, tz);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,491,DateTimeUtils.PrecisionTime ts =
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,492,DateTimeUtils.parsePrecisionDateTimeLiteral(literal, format, tz);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,493,if (ts != null) {
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,494,cal = ts.getCalendar();
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,497,if (cal == null) {
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,502,return new RexLiteral(cal, type, typeName);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,503,case SYMBOL:
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,541,return value;
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,556,return ((NlsString) value).getValue();
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,558,return ((BigDecimal) value).unscaledValue().longValue();
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,561,/ DateTimeUtils.MILLIS_PER_DAY);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,564,% DateTimeUtils.MILLIS_PER_DAY);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,565,case TIMESTAMP:
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,566,return ((Calendar) value).getTimeInMillis();
core/src/main/java/org/apache/calcite/rex/RexToSqlNodeConverterImpl.java,25,import java.util.Calendar;
core/src/main/java/org/apache/calcite/rex/RexToSqlNodeConverterImpl.java,86,(Calendar) literal.getValue(),
core/src/main/java/org/apache/calcite/rex/RexToSqlNodeConverterImpl.java,95,(Calendar) literal.getValue(),
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,23,import org.apache.calcite.util.ZonelessDate;
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,24,import org.apache.calcite.util.ZonelessTime;
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,25,import org.apache.calcite.util.ZonelessTimestamp;
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,27,import java.util.Calendar;
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,28,import java.util.TimeZone;
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,45,protected final String formatString;
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,58,protected SqlAbstractDateTimeLiteral(
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,59,Calendar d,
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,60,boolean tz,
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,61,SqlTypeName typeName,
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,62,int precision,
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,63,String formatString,
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,64,SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,68,this.formatString = formatString;
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,73,public int getPrec() {
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,74,return precision;
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,77,public String toValue() {
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,78,return Long.toString(getCal().getTimeInMillis());
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,81,public Calendar getCal() {
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,82,return (Calendar) value;
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,92,public TimeZone getTimeZone() {
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,93,assert hasTimeZone : "Attempt to get time zone on Literal date: "
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,94,+ getCal() + ", which has no time zone";
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,95,return getCal().getTimeZone();
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,125,protected ZonelessDate getDate() {
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,126,ZonelessDate zd = new ZonelessDate();
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,127,zd.setZonelessTime(getCal().getTimeInMillis());
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,128,return zd;
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,135,protected ZonelessTime getTime() {
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,136,ZonelessTime zt = new ZonelessTime();
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,137,zt.setZonelessTime(getCal().getTimeInMillis());
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,138,return zt;
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,145,protected ZonelessTimestamp getTimestamp() {
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,146,ZonelessTimestamp zt = new ZonelessTimestamp();
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,147,zt.setZonelessTime(getCal().getTimeInMillis());
core/src/main/java/org/apache/calcite/sql/SqlAbstractDateTimeLiteral.java,148,return zt;
core/src/main/java/org/apache/calcite/sql/SqlDateLiteral.java,19,import org.apache.calcite.avatica.util.DateTimeUtils;
core/src/main/java/org/apache/calcite/sql/SqlDateLiteral.java,25,import java.util.Calendar;
core/src/main/java/org/apache/calcite/sql/SqlDateLiteral.java,36,SqlDateLiteral(Calendar d, SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlDateLiteral.java,37,super(d, false, SqlTypeName.DATE, 0, DateTimeUtils.DATE_FORMAT_STRING, pos);
core/src/main/java/org/apache/calcite/sql/SqlDateLiteral.java,40,SqlDateLiteral(Calendar d, String format, SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlDateLiteral.java,41,super(d, false, SqlTypeName.DATE, 0, format, pos);
core/src/main/java/org/apache/calcite/sql/SqlDateLiteral.java,47,return new SqlDateLiteral((Calendar) value, pos);
core/src/main/java/org/apache/calcite/sql/SqlDateLiteral.java,50,public String toString() {
core/src/main/java/org/apache/calcite/sql/SqlDateLiteral.java,58,return getDate().toString(formatString);
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,198,return value instanceof Calendar;
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,344,return literal.toValue();
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,349,return literal.toValue();
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,655,return new SqlDateLiteral(calendar, pos);
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,662,return new SqlTimestampLiteral(calendar, precision, false, pos);
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,669,return new SqlTimeLiteral(calendar, precision, false, pos);
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,19,import org.apache.calcite.avatica.util.DateTimeUtils;
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,25,import java.util.Calendar;
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,36,SqlTimeLiteral(
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,37,Calendar t,
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,38,int precision,
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,39,boolean hasTimeZone,
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,40,SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,41,this(t, precision, hasTimeZone, DateTimeUtils.TIME_FORMAT_STRING, pos);
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,44,SqlTimeLiteral(
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,45,Calendar t,
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,46,int precision,
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,47,boolean hasTimeZone,
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,48,String format,
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,50,super(t, hasTimeZone, SqlTypeName.TIME, precision, format, pos);
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,51,Preconditions.checkArgument(this.precision >= 0 && this.precision <= 3);
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,57,return new SqlTimeLiteral(
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,58,(Calendar) value,
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,59,precision,
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,60,hasTimeZone,
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,61,formatString,
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,62,pos);
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,73,String result = getTime().toString(formatString);
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,74,final Calendar cal = getCal();
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,75,if (precision > 0) {
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,77,String digits = Long.toString(cal.getTimeInMillis());
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,78,result =
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,79,result + "."
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,80,+ digits.substring(digits.length() - 3,
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,81,digits.length() - 3 + precision);
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,83,assert 0 == cal.get(Calendar.MILLISECOND);
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,85,return result;
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,19,import org.apache.calcite.avatica.util.DateTimeUtils;
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,25,import java.util.Calendar;
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,36,public SqlTimestampLiteral(
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,37,Calendar cal,
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,38,int precision,
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,39,boolean hasTimeZone,
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,40,SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,41,this(cal, precision, hasTimeZone, DateTimeUtils.TIMESTAMP_FORMAT_STRING,
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,42,pos);
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,45,public SqlTimestampLiteral(
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,46,Calendar cal,
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,47,int precision,
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,48,boolean hasTimeZone,
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,49,String format,
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,50,SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,51,super(cal, hasTimeZone, SqlTypeName.TIMESTAMP, precision, format, pos);
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,52,Preconditions.checkArgument(this.precision >= 0 && this.precision <= 3);
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,58,return new SqlTimestampLiteral(
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,59,(Calendar) value,
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,60,precision,
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,61,hasTimeZone,
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,62,formatString,
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,63,pos);
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,74,String result = getTimestamp().toString(formatString);
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,75,final Calendar cal = getCal();
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,77,assert precision <= 3;
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,80,String digits = Long.toString(cal.getTimeInMillis());
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,81,result =
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,82,result + "."
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,83,+ digits.substring(digits.length() - 3,
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,84,digits.length() - 3 + precision);
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,86,assert 0 == cal.get(Calendar.MILLISECOND);
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,88,return result;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,765,return SqlLiteral.createDate((Calendar) o, pos);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,767,return SqlLiteral.createTime((Calendar) o, 0 /* todo */, pos);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,769,return SqlLiteral.createTimestamp((Calendar) o, 0 /* todo */, pos);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2638,Calendar calendar = (Calendar) literal.getValue();
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,38,import java.util.Calendar;
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,81,final Object value = literal.getValue();
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,82,if (value == null) {
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,105,BigDecimal bd = (BigDecimal) value;
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,109,case DOUBLE:
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,113,return rexBuilder.makeApproxLiteral((BigDecimal) value);
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,115,return rexBuilder.makeCharLiteral((NlsString) value);
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,117,return rexBuilder.makeLiteral(((Boolean) value).booleanValue());
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,119,bitString = (BitString) value;
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,129,return rexBuilder.makeFlag((Enum) value);
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,132,(Calendar) value,
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,136,(Calendar) value,
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,139,return rexBuilder.makeDateLiteral((Calendar) value);
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,144,((SqlIntervalLiteral.IntervalValue) value).getIntervalQualifier();
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,145,l = (long) SqlLiteral.value(literal);
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,147,BigDecimal.valueOf(l),
core/src/main/java/org/apache/calcite/util/BasicDatetime.java,17,package org.apache.calcite.util;
core/src/main/java/org/apache/calcite/util/BasicDatetime.java,19,import java.util.TimeZone;
core/src/main/java/org/apache/calcite/util/BasicDatetime.java,42,public interface BasicDatetime {
core/src/main/java/org/apache/calcite/util/BasicDatetime.java,48,long getTime();
core/src/main/java/org/apache/calcite/util/BasicDatetime.java,54,void setZonelessTime(long value);
core/src/main/java/org/apache/calcite/util/BasicDatetime.java,60,void setZonedTime(long value, TimeZone zone);
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,17,package org.apache.calcite.util;
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,19,import org.apache.calcite.avatica.util.DateTimeUtils;
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,21,import java.sql.Date;
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,22,import java.text.DateFormat;
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,23,import java.util.Calendar;
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,24,import java.util.TimeZone;
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,29,public class ZonelessDate extends ZonelessDatetime {
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,35,private static final long serialVersionUID = -6385775986251759394L;
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,39,protected transient Date tempDate;
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,46,public ZonelessDate() {
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,52,public void setZonelessTime(long value) {
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,53,super.setZonelessTime(value);
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,54,clearTime();
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,58,public void setZonedTime(long value, TimeZone zone) {
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,59,super.setZonedTime(value, zone);
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,60,clearTime();
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,64,public Object toJdbcObject() {
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,65,return new Date(getJdbcDate(DateTimeUtils.DEFAULT_ZONE));
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,74,public String toString() {
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,75,Date jdbcDate = getTempDate(getJdbcDate(DateTimeUtils.DEFAULT_ZONE));
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,76,return jdbcDate.toString();
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,86,public String toString(String format) {
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,87,DateFormat formatter = getFormatter(format);
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,88,Date jdbcDate = getTempDate(getTime());
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,89,return formatter.format(jdbcDate);
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,99,public static ZonelessDate parse(String s) {
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,100,return parse(s, DateTimeUtils.DATE_FORMAT_STRING);
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,111,public static ZonelessDate parse(String s, String format) {
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,112,Calendar cal =
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,113,DateTimeUtils.parseDateFormat(s, format, DateTimeUtils.GMT_ZONE);
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,114,if (cal == null) {
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,115,return null;
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,117,ZonelessDate zd = new ZonelessDate();
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,118,zd.setZonelessTime(cal.getTimeInMillis());
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,119,return zd;
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,125,protected Date getTempDate(long value) {
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,126,if (tempDate == null) {
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,127,tempDate = new Date(value);
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,129,tempDate.setTime(value);
core/src/main/java/org/apache/calcite/util/ZonelessDate.java,131,return tempDate;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,17,package org.apache.calcite.util;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,19,import org.apache.calcite.avatica.util.DateTimeUtils;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,21,import java.io.Serializable;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,22,import java.text.DateFormat;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,23,import java.util.Calendar;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,24,import java.util.TimeZone;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,30,public abstract class ZonelessDatetime implements BasicDatetime, Serializable {
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,36,private static final long serialVersionUID = -1274713852537224763L;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,44,public long internalTime;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,48,protected transient Calendar tempCal;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,49,protected transient DateFormat tempFormatter;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,50,protected transient String lastFormat;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,55,public long getTime() {
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,56,return internalTime;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,60,public void setZonelessTime(long value) {
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,61,this.internalTime = value;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,65,public void setZonedTime(long value, TimeZone zone) {
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,66,this.internalTime = value + zone.getOffset(value);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,72,public long getTimeValue() {
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,76,long timePart = internalTime % DateTimeUtils.MILLIS_PER_DAY;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,77,if (timePart < 0) {
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,78,timePart += DateTimeUtils.MILLIS_PER_DAY;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,80,return timePart;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,86,public long getDateValue() {
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,87,return internalTime - getTimeValue();
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,93,public void clearDate() {
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,94,internalTime = getTimeValue();
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,100,public void clearTime() {
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,101,internalTime = getDateValue();
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,110,public long getJdbcTime(TimeZone zone) {
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,111,long timeValue = getTimeValue();
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,112,return timeValue - zone.getOffset(timeValue);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,121,public long getJdbcDate(TimeZone zone) {
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,122,Calendar cal = getCalendar(DateTimeUtils.GMT_ZONE);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,123,cal.setTimeInMillis(getDateValue());
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,125,int year = cal.get(Calendar.YEAR);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,126,int doy = cal.get(Calendar.DAY_OF_YEAR);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,128,cal.clear();
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,129,cal.setTimeZone(zone);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,130,cal.set(Calendar.YEAR, year);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,131,cal.set(Calendar.DAY_OF_YEAR, doy);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,132,return cal.getTimeInMillis();
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,141,public long getJdbcTimestamp(TimeZone zone) {
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,142,Calendar cal = getCalendar(DateTimeUtils.GMT_ZONE);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,143,cal.setTimeInMillis(internalTime);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,145,int year = cal.get(Calendar.YEAR);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,146,int doy = cal.get(Calendar.DAY_OF_YEAR);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,147,int hour = cal.get(Calendar.HOUR_OF_DAY);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,148,int minute = cal.get(Calendar.MINUTE);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,149,int second = cal.get(Calendar.SECOND);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,150,int millis = cal.get(Calendar.MILLISECOND);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,152,cal.clear();
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,153,cal.setTimeZone(zone);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,154,cal.set(Calendar.YEAR, year);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,155,cal.set(Calendar.DAY_OF_YEAR, doy);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,156,cal.set(Calendar.HOUR_OF_DAY, hour);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,157,cal.set(Calendar.MINUTE, minute);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,158,cal.set(Calendar.SECOND, second);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,159,cal.set(Calendar.MILLISECOND, millis);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,160,return cal.getTimeInMillis();
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,166,public abstract Object toJdbcObject();
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,172,protected Calendar getCalendar(TimeZone zone) {
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,173,if (tempCal == null) {
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,176,tempCal.setTimeZone(zone);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,178,return tempCal;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,187,protected DateFormat getFormatter(String format) {
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,188,if ((tempFormatter != null) && lastFormat.equals(format)) {
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,189,return tempFormatter;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,191,tempFormatter = DateTimeUtils.newDateFormat(format);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,192,tempFormatter.setTimeZone(DateTimeUtils.GMT_ZONE);
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,193,lastFormat = format;
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,194,return tempFormatter;
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,17,package org.apache.calcite.util;
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,19,import org.apache.calcite.avatica.util.DateTimeUtils;
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,21,import java.sql.Time;
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,22,import java.text.DateFormat;
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,23,import java.text.SimpleDateFormat;
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,24,import java.util.Calendar;
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,25,import java.util.TimeZone;
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,30,public class ZonelessTime extends ZonelessDatetime {
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,36,private static final long serialVersionUID = 906156904798141861L;
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,40,protected final int precision;
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,41,protected transient Time tempTime;
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,48,public ZonelessTime() {
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,49,precision = 0;
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,61,public ZonelessTime(int precision) {
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,62,this.precision = precision;
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,68,public void setZonelessTime(long value) {
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,69,super.setZonelessTime(value);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,70,clearDate();
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,74,public void setZonedTime(long value, TimeZone zone) {
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,75,super.setZonedTime(value, zone);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,76,clearDate();
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,80,public Object toJdbcObject() {
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,81,return new Time(getJdbcTime(DateTimeUtils.DEFAULT_ZONE));
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,91,public long getJdbcTimestamp(TimeZone zone) {
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,92,Calendar cal = getCalendar(DateTimeUtils.GMT_ZONE);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,93,cal.setTimeInMillis(getTime());
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,94,int hour = cal.get(Calendar.HOUR_OF_DAY);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,95,int minute = cal.get(Calendar.MINUTE);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,96,int second = cal.get(Calendar.SECOND);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,97,int millis = cal.get(Calendar.MILLISECOND);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,99,cal.setTimeZone(zone);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,100,cal.setTimeInMillis(System.currentTimeMillis());
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,101,cal.set(Calendar.HOUR_OF_DAY, hour);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,102,cal.set(Calendar.MINUTE, minute);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,103,cal.set(Calendar.SECOND, second);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,104,cal.set(Calendar.MILLISECOND, millis);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,105,return cal.getTimeInMillis();
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,114,public String toString() {
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,115,Time jdbcTime = getTempTime(getJdbcTime(DateTimeUtils.DEFAULT_ZONE));
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,116,return jdbcTime.toString();
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,125,public String toString(String format) {
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,126,DateFormat formatter = getFormatter(format);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,127,Time jdbcTime = getTempTime(getTime());
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,128,return formatter.format(jdbcTime);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,138,public static ZonelessTime parse(String s) {
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,139,return parse(s, DateTimeUtils.TIME_FORMAT_STRING);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,149,public static ZonelessTime parse(String s, String format) {
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,150,DateTimeUtils.PrecisionTime pt =
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,151,DateTimeUtils.parsePrecisionDateTimeLiteral(s,
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,152,format,
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,153,DateTimeUtils.GMT_ZONE);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,154,if (pt == null) {
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,155,return null;
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,157,ZonelessTime zt = new ZonelessTime(pt.getPrecision());
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,158,zt.setZonelessTime(pt.getCalendar().getTime().getTime());
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,159,return zt;
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,165,protected Time getTempTime(long value) {
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,166,if (tempTime == null) {
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,167,tempTime = new Time(value);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,169,tempTime.setTime(value);
core/src/main/java/org/apache/calcite/util/ZonelessTime.java,171,return tempTime;
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,17,package org.apache.calcite.util;
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,19,import org.apache.calcite.avatica.util.DateTimeUtils;
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,21,import java.sql.Timestamp;
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,22,import java.text.DateFormat;
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,27,public class ZonelessTimestamp extends ZonelessDatetime {
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,33,private static final long serialVersionUID = -6829714640541648394L;
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,37,protected final int precision;
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,39,protected transient Timestamp tempTimestamp;
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,46,public ZonelessTimestamp() {
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,47,this.precision = 0;
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,59,public ZonelessTimestamp(int precision) {
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,60,this.precision = precision;
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,66,public Object toJdbcObject() {
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,67,return new Timestamp(getJdbcTimestamp(DateTimeUtils.DEFAULT_ZONE));
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,81,public String toString() {
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,82,Timestamp ts =
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,83,getTempTimestamp(getJdbcTimestamp(DateTimeUtils.DEFAULT_ZONE));
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,98,public String toString(String format) {
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,99,DateFormat formatter = getFormatter(format);
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,100,Timestamp ts = getTempTimestamp(getTime());
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,101,return formatter.format(ts);
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,114,public static ZonelessTimestamp parse(String s) {
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,115,return parse(s, DateTimeUtils.TIMESTAMP_FORMAT_STRING);
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,129,public static ZonelessTimestamp parse(String s, String format) {
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,130,DateTimeUtils.PrecisionTime pt =
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,131,DateTimeUtils.parsePrecisionDateTimeLiteral(s,
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,132,format,
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,133,DateTimeUtils.GMT_ZONE);
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,134,if (pt == null) {
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,135,return null;
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,137,ZonelessTimestamp zt = new ZonelessTimestamp(pt.getPrecision());
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,138,zt.setZonelessTime(pt.getCalendar().getTime().getTime());
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,139,return zt;
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,146,protected Timestamp getTempTimestamp(long value) {
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,147,if (tempTimestamp == null) {
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,148,tempTimestamp = new Timestamp(value);
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,150,tempTimestamp.setTime(value);
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,152,return tempTimestamp;
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,484,TimeZone tz = DateTimeUtils.GMT_ZONE;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,79,this.dataSource = dataSource;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,80,this.dialect = dialect;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,84,assert dialect != null;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,85,assert dataSource != null;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,363,return getTableMap(true).keySet();
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,48,super(parent, schema, name);
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,280,final DataContext dataContext = createDataContext(map);
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,284,public DataContext createDataContext(Map<String, Object> parameterValues) {
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,288,return new DataContextImpl(this, parameterValues);
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,354,Map<String, Object> parameters) {
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,357,this.rootSchema = connection.rootSchema;
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,413,return rootSchema.plus();
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,438,return connection.rootSchema;
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,453,return connection.createDataContext(ImmutableMap.<String, Object>of());
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,201,columns, cursorFactory, ImmutableList.<RelCollation>of(), -1,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,557,h.signature =
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,559,statement.createPrepareContext(), maxRowCount);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,574,statement.createPrepareContext(), maxRowCount);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,645,.createDataContext(ImmutableMap.<String, Object>of());
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,298,List<RelCollation> collationList, long maxRowCount,
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,299,Bindable<T> bindable) {
core/src/main/java/org/apache/calcite/jdbc/CalciteResultSet.java,84,ImmutableList.<RelCollation>of(), -1, null);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,88,private ImmutableList<ImmutableList<String>> path;
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,90,CalciteSchema(CalciteSchema parent, Schema schema, String name) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,496,public final List<String> sqls;
core/src/main/java/org/apache/calcite/jdbc/SimpleCalciteSchema.java,38,super(parent, schema, name);
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,317,if (materialization.rootSchema == rootSchema
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,382,Schemas.createDataContext(connection);
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,400,Schemas.createDataContext(connection);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,123,final String name2 = entry.name;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,124,return RelOptTableImpl.create(this, table.getRowType(typeFactory),
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,125,schema.add(name2, table), null);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,713,ImmutableList.<RelCollation>of(), -1, bindable);
core/src/main/java/org/apache/calcite/schema/Schemas.java,203,public static DataContext createDataContext(Connection connection) {
core/src/main/java/org/apache/calcite/schema/Schemas.java,204,return new DummyDataContext((CalciteConnection) connection);
core/src/main/java/org/apache/calcite/schema/Schemas.java,366,createDataContext(connection), schema, schemaPath);
core/src/main/java/org/apache/calcite/schema/Schemas.java,540,public DummyDataContext(CalciteConnection connection) {
core/src/main/java/org/apache/calcite/schema/Schemas.java,547,return connection.getRootSchema();
core/src/main/java/org/apache/calcite/sql/fun/SqlFloorFunction.java,58,final SqlWriter.Frame frame = writer.startFunCall(getName());
core/src/main/java/org/apache/calcite/sql/fun/SqlFloorFunction.java,60,call.operand(0).unparse(writer, 0, 100);
core/src/main/java/org/apache/calcite/sql/fun/SqlFloorFunction.java,61,writer.sep("TO");
core/src/main/java/org/apache/calcite/sql/fun/SqlFloorFunction.java,62,call.operand(1).unparse(writer, 100, 0);
core/src/main/java/org/apache/calcite/sql/fun/SqlFloorFunction.java,64,call.operand(0).unparse(writer, 0, 0);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,162,final SqlNodeList subQuery = new SqlNodeList(POS);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,163,subQuery.add(unionAll);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,167,elseExpr = SqlStdOperatorTable.SCALAR_QUERY.createCall(POS, subQuery);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,61,this.lineNumber = lineNumber;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,62,this.columnNumber = columnNumber;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,63,this.endLineNumber = lineNumber;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,64,this.endColumnNumber = columnNumber;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,173,public static SqlParserPos sum(SqlNode[] nodes) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,174,final Iterable<SqlParserPos> poses = toPos(Arrays.asList(nodes));
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,175,return sum(poses, Integer.MAX_VALUE, Integer.MAX_VALUE, -1, -1);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,179,return Iterables.transform(nodes,
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,180,new Function<SqlNode, SqlParserPos>() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,181,public SqlParserPos apply(SqlNode input) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,182,return input.getParserPosition();
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,191,public static SqlParserPos sum(List<? extends SqlNode> nodes) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,192,return sum(nodes.toArray(new SqlNode[nodes.size()]));
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,200,return sum(poses, Integer.MAX_VALUE, Integer.MAX_VALUE, -1, -1);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,95,Class<? extends LogicalAggregate> clazz,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,231,relBuilder.aggregate(relBuilder.groupKey(fullGroupSet, groupSets.size() > 1, groupSets),
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,235,final int indicatorCount = groupSets.size() > 1 ? groupCount : 0;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,294,filters.put(groupSet, registrar.register(groupSet));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,881,return whereScopes.get(select);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3390,final SqlNode having = select.getHaving();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4381,private final SqlValidatorImpl validator;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,26,import org.apache.calcite.rel.type.RelDataTypeFactory;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,27,import org.apache.calcite.rex.RexCall;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,114,final RelDataTypeFactory typeFactory = filter.getCluster().getTypeFactory();
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,115,if (RexUtil.isNullabilityCast(typeFactory, newCondition)) {
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,116,newCondition = ((RexCall) newCondition).getOperands().get(0);
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,120,RelNode newFilterRel =
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,121,copyFilter
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,122,? filter.copy(filter.getTraitSet(), project.getInput(),
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,124,: relBuilder.push(project.getInput()).filter(newCondition).build();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,166,call.transformTo(call.builder().
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,697,if (!x.isAlwaysTrue()) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,699,final RelNode filter = filterFactory.createFilter(frame.rel, x);
core/src/main/java/org/apache/calcite/sql/SqlBasicCall.java,47,this.operator = operator;
core/src/main/java/org/apache/calcite/sql/SqlBasicCall.java,66,this.operator = operator;
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,558,calciteConnection.parseQuery(CalcitePrepare.Query.of(sql),
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,573,signature = calciteConnection.parseQuery(CalcitePrepare.Query.of(sql),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4048,&& !call.isExpanded()) {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,24,import org.apache.calcite.sql.SqlSpecialOperator;
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,32,import org.apache.calcite.sql.validate.SqlValidator;
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,33,import org.apache.calcite.sql.validate.SqlValidatorScope;
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,41,public class SqlOverlapsOperator extends SqlSpecialOperator {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,44,private static final SqlWriter.FrameType FRAME_TYPE =
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,45,SqlWriter.FrameTypeEnum.create("OVERLAPS");
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,49,public SqlOverlapsOperator() {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,50,super("OVERLAPS",
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,51,SqlKind.OVERLAPS,
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,52,30,
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,53,true,
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,54,ReturnTypes.BOOLEAN_NULLABLE,
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,56,null);
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,61,public void unparse(
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,62,SqlWriter writer,
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,63,SqlCall call,
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,64,int leftPrec,
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,67,writer.startList(FRAME_TYPE, "(", ")");
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,68,call.operand(0).unparse(writer, leftPrec, rightPrec);
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,69,writer.sep(",", true);
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,70,call.operand(1).unparse(writer, leftPrec, rightPrec);
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,71,writer.sep(")", true);
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,73,writer.sep("(", true);
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,74,call.operand(2).unparse(writer, leftPrec, rightPrec);
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,75,writer.sep(",", true);
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,76,call.operand(3).unparse(writer, leftPrec, rightPrec);
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,80,public SqlOperandCountRange getOperandCountRange() {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,81,return SqlOperandCountRanges.of(4);
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,84,public String getSignatureTemplate(int operandsCount) {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,85,assert 4 == operandsCount;
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,86,return "({1}, {2}) {0} ({3}, {4})";
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,111,public boolean checkOperandTypes(
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,112,SqlCallBinding callBinding,
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,114,SqlValidator validator = callBinding.getValidator();
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,115,SqlValidatorScope scope = callBinding.getScope();
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,116,if (!OperandTypes.DATETIME.checkSingleOperandType(
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,117,callBinding,
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,118,callBinding.operand(0),
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,119,0,
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,120,throwOnFailure)) {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,123,if (!OperandTypes.DATETIME.checkSingleOperandType(
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,124,callBinding,
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,125,callBinding.operand(2),
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,126,0,
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,127,throwOnFailure)) {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,128,return false;
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,131,RelDataType t0 = validator.deriveType(scope, callBinding.operand(0));
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,132,RelDataType t1 = validator.deriveType(scope, callBinding.operand(1));
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,133,RelDataType t2 = validator.deriveType(scope, callBinding.operand(2));
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,134,RelDataType t3 = validator.deriveType(scope, callBinding.operand(3));
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,137,if (!SqlTypeUtil.sameNamedType(t0, t2)) {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,138,if (throwOnFailure) {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,139,throw callBinding.newValidationSignatureError();
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,144,if (SqlTypeUtil.isDatetime(t1)) {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,147,if (!SqlTypeUtil.sameNamedType(t0, t1)) {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,154,if (throwOnFailure) {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,155,throw callBinding.newValidationSignatureError();
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,157,return false;
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,160,if (SqlTypeUtil.isDatetime(t3)) {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,163,if (!SqlTypeUtil.sameNamedType(t2, t3)) {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,164,if (throwOnFailure) {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,165,throw callBinding.newValidationSignatureError();
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,167,return false;
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,170,if (throwOnFailure) {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,171,throw callBinding.newValidationSignatureError();
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,173,return false;
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,986,new SqlOverlapsOperator();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,35,import org.apache.calcite.sql.SqlBasicCall;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1013,final SqlNode[] operands = ((SqlBasicCall) call).getOperands();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1014,assert operands.length == 4;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,188,this(target_, query_, DEFAULT_RULES);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,450,reverseSubstitute(query, matches, sub, 0, matches.size());
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,597,private static void reverseSubstitute(Holder query,
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,604,reverseSubstitute(query, rem, sub, replaceCount, maxCount);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,609,reverseSubstitute(query, rem, sub, replaceCount, maxCount);
core/src/main/java/org/apache/calcite/plan/Strong.java,68,case EQUALS:
core/src/main/java/org/apache/calcite/plan/Strong.java,69,case NOT_EQUALS:
core/src/main/java/org/apache/calcite/plan/Strong.java,70,case LESS_THAN:
core/src/main/java/org/apache/calcite/plan/Strong.java,71,case LESS_THAN_OR_EQUAL:
core/src/main/java/org/apache/calcite/plan/Strong.java,72,case GREATER_THAN:
core/src/main/java/org/apache/calcite/plan/Strong.java,73,case GREATER_THAN_OR_EQUAL:
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,105,List<RelDataTypeField> projJoinFieldList =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,106,new ArrayList<RelDataTypeField>();
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,83,List<RelNode> newSetOpInputs = new ArrayList<RelNode>();
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,616,if (leftFields.contains(exprArgs)) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,753,public interface ExprCondition {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,766,new ExprCondition() {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,767,public boolean test(RexNode expr) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,777,public static class OperatorExprCondition implements ExprCondition {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,785,public OperatorExprCondition(Set<SqlOperator> operatorSet) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,786,this.operatorSet = operatorSet;
core/src/main/java/org/apache/calcite/rel/core/Window.java,318,false, getProjectOrdinals(aggCall.getOperands()), -1,
core/src/main/java/org/apache/calcite/rel/core/Window.java,352,int ordinal) {
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,159,aggMap.size());
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,114,((Window.RexWinAggCall) call).ordinal);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,336,boolean nullWhenCountZero) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,348,final RexOver over = new RexOver(type, operator, exprs, window);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,364,window),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,371,operator, exprs, window),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,389,window),
core/src/main/java/org/apache/calcite/rex/RexOver.java,63,RexWindow window) {
core/src/main/java/org/apache/calcite/rex/RexOver.java,84,protected String computeDigest(boolean withType) {
core/src/main/java/org/apache/calcite/rex/RexOver.java,85,return super.computeDigest(withType) + " OVER (" + window + ")";
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,53,window);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1884,window);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1885,return rexAgg.accept(visitor);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4803,SqlWindow window) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4864,false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4904,needSum0);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,125,type = typeFactory.createJavaType(String.class);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,148,types.add(typeFactory.createJavaType(String.class));
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,268,return new java.sql.Date(date.getTime());
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,278,return new java.sql.Time(date.getTime());
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,288,return new java.sql.Timestamp(date.getTime());
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFieldType.java,69,return typeFactory.createJavaType(clazz);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,312,boolean dummy, // prevent method from being used
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,149,final RexProgram program =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,150,this.program.normalize(getCluster().getRexBuilder(), true);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,91,import static org.apache.calcite.rex.RexUtil.simplify;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,322,public static RexNode splitFilter(
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,323,final RexBuilder rexBuilder, RexNode condition, RexNode target) {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,329,RexNode z = splitOr(rexBuilder, condition, target);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,334,RexNode x = andNot(rexBuilder, target, condition);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,336,RexNode x2 = andNot(rexBuilder, condition, target);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,337,return simplify(rexBuilder, x2);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1189,createFilter(query, target);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1196,MutableFilter createFilter(MutableFilter query, MutableFilter target) {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1228,FilterToFilterUnifyRule.INSTANCE.createFilter(
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1229,query, target);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,201,program = program.normalize(cluster.getRexBuilder(), false);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,437,RexBuilder rexBuilder = rel.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,465,new RexReplacer(
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,466,rexBuilder,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,467,removableCasts,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,468,reducedExprs,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,484,new RexReplacer(
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,485,rexBuilder,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,486,Pair.left(pairs),
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,487,Pair.right(pairs),
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,507,executor.reduce(rexBuilder, constExps2, reducedValues);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,521,new RexReplacer(
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,522,rexBuilder,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,523,constExps,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,524,reducedValues,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,525,addCasts);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,766,private final RexBuilder rexBuilder;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,772,RexBuilder rexBuilder,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,776,this.rexBuilder = rexBuilder;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,797,node = RexUtil.simplify(rexBuilder, node);
core/src/main/java/org/apache/calcite/rex/RexProgram.java,765,final RexProgram normalizedProgram = normalize(rexBuilder, false);
core/src/main/java/org/apache/calcite/rex/RexProgram.java,783,public RexProgram normalize(RexBuilder rexBuilder, boolean simplify) {
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,59,assert inputRowType != null;
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,60,assert rexBuilder != null;
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,61,this.inputRowType = inputRowType;
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,62,this.rexBuilder = rexBuilder;
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,94,boolean simplify) {
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,95,this(inputRowType, rexBuilder);
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,118,if (simplify) {
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,119,project = RexUtil.simplify(rexBuilder, pair.left.accept(expander));
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,130,if (simplify) {
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,131,condition = RexUtil.simplify(rexBuilder,
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,320,expr = RexUtil.simplify(rexBuilder, expr);
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,528,boolean simplify) {
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,543,outputRowType, normalize, false);
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,589,return program.normalize(rexBuilder, false);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,19,import org.apache.calcite.linq4j.Ord;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1287,switch (e.getKind()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1288,case AND:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1290,case OR:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1291,return simplifyOr(rexBuilder, (RexCall) e);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1292,case NOT:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1293,return simplifyNot(rexBuilder, (RexCall) e);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1294,case CASE:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1298,case IS_NULL:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1299,case IS_NOT_NULL:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1300,case IS_TRUE:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1301,case IS_NOT_TRUE:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1302,case IS_FALSE:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1303,case IS_NOT_FALSE:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1304,assert e instanceof RexCall;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1305,return simplifyIs(rexBuilder, (RexCall) e);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1306,default:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1307,return e;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1311,private static RexNode simplifyNot(RexBuilder rexBuilder, RexCall call) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1312,final RexNode a = call.getOperands().get(0);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1313,switch (a.getKind()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1314,case NOT:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1316,return simplify(rexBuilder, ((RexCall) a).getOperands().get(0));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1318,final SqlKind negateKind = a.getKind().negate();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1319,if (a.getKind() != negateKind) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1320,return simplify(rexBuilder,
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1321,rexBuilder.makeCall(op(negateKind),
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1322,ImmutableList.of(((RexCall) a).getOperands().get(0))));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1324,return call;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1327,private static RexNode simplifyIs(RexBuilder rexBuilder, RexCall call) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1328,final SqlKind kind = call.getKind();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1329,final RexNode a = call.getOperands().get(0);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1341,return simplify(rexBuilder, a);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1346,return simplify(rexBuilder,
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1347,rexBuilder.makeCall(SqlStdOperatorTable.NOT, a));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1350,switch (a.getKind()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1351,case NOT:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1358,return simplify(rexBuilder,
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1359,rexBuilder.makeCall(op(kind.negate()),
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1360,((RexCall) a).getOperands().get(0)));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1362,RexNode a2 = simplify(rexBuilder, a);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1363,if (a != a2) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1364,return rexBuilder.makeCall(op(kind), ImmutableList.of(a2));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1369,private static SqlOperator op(SqlKind kind) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1391,final List<RexNode> operands = call.getOperands();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1392,final List<RexNode> newOperands = new ArrayList<>();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1393,for (int i = 0; i < operands.size(); i++) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1394,RexNode operand = operands.get(i);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1395,if (isCasePredicate(call, i)) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1396,if (operand.isAlwaysTrue()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1399,break;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1403,++i;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1404,continue;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1407,newOperands.add(operand);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1409,assert newOperands.size() % 2 == 1;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1414,trueFalse:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1415,if (call.getType().getSqlTypeName() == SqlTypeName.BOOLEAN) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1426,for (Ord<Pair<RexNode, RexNode>> pair : Ord.zip(pairs)) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1429,break trueFalse;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1432,final List<RexNode> terms = new ArrayList<>();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1433,final List<RexNode> notTerms = new ArrayList<>();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1434,for (Ord<Pair<RexNode, RexNode>> pair : Ord.zip(pairs)) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1435,if (pair.e.getValue().isAlwaysTrue()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1436,terms.add(andNot(rexBuilder, pair.e.getKey(), notTerms));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1438,notTerms.add(pair.e.getKey());
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1443,if (newOperands.equals(operands)) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1444,return call;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1446,return call.clone(call.getType(), newOperands);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1451,private static List<Pair<RexNode, RexNode>> casePairs(RexBuilder rexBuilder,
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1452,List<RexNode> operands) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1453,final ImmutableList.Builder<Pair<RexNode, RexNode>> builder =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1454,ImmutableList.builder();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1455,for (int i = 0; i < operands.size() - 1; i += 2) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1456,builder.add(Pair.of(operands.get(i), operands.get(i + 1)));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1458,builder.add(
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1459,Pair.of((RexNode) rexBuilder.makeLiteral(true), Util.last(operands)));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1460,return builder.build();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1465,final List<RexNode> notTerms = new ArrayList<>();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1513,assert call.getKind() == SqlKind.OR;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1514,final List<RexNode> terms = RelOptUtil.disjunctions(call);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1515,for (int i = 0; i < terms.size(); i++) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1517,switch (term.getKind()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1518,case LITERAL:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1519,if (!RexLiteral.isNullLiteral(term)) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1520,if (RexLiteral.booleanValue(term)) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1521,return term; // true
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1523,terms.remove(i);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1524,--i;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1529,return composeDisjunction(rexBuilder, terms, false);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1913,return composeDisjunction(rexBuilder, nodes, false);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1985,return composeDisjunction(rexBuilder, nodes, false);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,467,return RexUtil.composeDisjunction(cluster.getRexBuilder(), operands, false);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,37,import org.apache.calcite.rex.RexInputRef;
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,319,map.put("input", ((RexInputRef) node).getIndex());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,116,Result x = visitChild(0, e.getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,117,final Builder builder =
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,118,x.builder(e, Clause.WHERE);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,119,builder.setWhere(builder.context.toSql(null, e.getCondition()));
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,120,return builder.result();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,829,return Expressions.call(BuiltInMethod.INTERNAL_TO_TIME.method, operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,833,return Expressions.call(BuiltInMethod.INTERNAL_TO_TIMESTAMP.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,834,operand);
core/src/main/java/org/apache/calcite/runtime/Like.java,95,javaPattern.append(".");
core/src/main/java/org/apache/calcite/runtime/Like.java,96,javaPattern.append('*');
core/src/main/java/org/apache/calcite/runtime/Like.java,267,javaPattern.append('.');
core/src/main/java/org/apache/calcite/runtime/Like.java,268,javaPattern.append('*');
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,150,return parent.findQualifyingTableName(columnName, ctx);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,104,final String[] strings = reader.readNext();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,212,: tableTypeName.toUpperCase().replace(' ', '_');
core/src/main/java/org/apache/calcite/config/CalciteConnectionProperty.java,26,import static org.apache.calcite.avatica.ConnectionConfigImpl.parse;
core/src/main/java/org/apache/calcite/config/CalciteConnectionProperty.java,103,NAME_TO_PROPS.put(p.camelName.toUpperCase(), p);
core/src/main/java/org/apache/calcite/config/CalciteConnectionProperty.java,134,return new PropEnv(parse(properties, NAME_TO_PROPS), this);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,213,return s0.toUpperCase();
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,427,return map.subMap(s.toUpperCase(), true, s.toLowerCase(), true);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,434,return set.subSet(name.toUpperCase(), true, name.toLowerCase(), true);
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,62,final PrintWriter pw = new PrintWriter(System.out);
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,191,return Util.enumVal(enumClass, getString(tag).toUpperCase());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,295,if (name.toLowerCase().startsWith("expr$")) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,297,ordinalMap.put(name.toLowerCase(), node);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,681,ordinalMap.get(field.getName().toLowerCase());
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,72,private final PrintWriter pw =
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,73,CalcitePrepareImpl.DEBUG ? new PrintWriter(System.out, true) : null;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1344,calendar = Calendar.getInstance(DateTimeUtils.GMT_ZONE);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1351,calendar = Calendar.getInstance(DateTimeUtils.GMT_ZONE);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1359,calendar = Calendar.getInstance(DateTimeUtils.GMT_ZONE);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,58,new DecimalFormat("0.0E0");
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,98,return s.toUpperCase();
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,103,return s.toLowerCase();
core/src/main/java/org/apache/calcite/sql/SqlAccessType.java,57,for (int i = 0; i < accessNames.length; i++) {
core/src/main/java/org/apache/calcite/sql/SqlAccessType.java,59,SqlAccessEnum.valueOf(
core/src/main/java/org/apache/calcite/sql/SqlAccessType.java,60,accessNames[i].trim().toUpperCase()));
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,90,String c = charset.name().toUpperCase() + "$" + locale.toString();
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,186,final String upperProductName = productName.toUpperCase().trim();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,662,ret.append("<").append(
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,663,typeList.get(i).toString().toUpperCase()).append(">");
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,671,values[i + 1] = "<" + typeList.get(i).toString().toUpperCase() + ">";
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,673,ret.append(MessageFormat.format(template, values));
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,56,private static final String UPPER_HINT_TOKEN = HINT_TOKEN.toUpperCase();
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,382,TokenType tokenType = map.get(name.toUpperCase());
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,126,SimpleDateFormat df = new SimpleDateFormat(pattern);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,271,return s.toUpperCase();
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,273,return s.toLowerCase();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,277,sw.getBuffer().setLength(0);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,824,isKeywordsLowerCase() ? s.toLowerCase() : s.toUpperCase());
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,19,import org.apache.calcite.avatica.util.DateTimeUtils;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,533,calendar = Calendar.getInstance(DateTimeUtils.GMT_ZONE);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,581,calendar = Calendar.getInstance(DateTimeUtils.GMT_ZONE);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,606,calendar = Calendar.getInstance(DateTimeUtils.GMT_ZONE);
core/src/main/java/org/apache/calcite/util/ConversionUtil.java,71,StringBuffer ret = new StringBuffer();
core/src/main/java/org/apache/calcite/util/ConversionUtil.java,72,for (int i = 0; i < value.length; i++) {
core/src/main/java/org/apache/calcite/util/ConversionUtil.java,73,ret.append(
core/src/main/java/org/apache/calcite/util/ConversionUtil.java,74,Integer.toString(trick | (0x0ff & value[i]), radix).substring(
core/src/main/java/org/apache/calcite/util/ConversionUtil.java,75,1));
core/src/main/java/org/apache/calcite/util/ConversionUtil.java,78,return ret.toString().toUpperCase();
core/src/main/java/org/apache/calcite/util/NlsString.java,67,charsetName = charsetName.toUpperCase();
core/src/main/java/org/apache/calcite/util/NumberUtil.java,41,FLOAT_FORMATTER = new DecimalFormat();
core/src/main/java/org/apache/calcite/util/NumberUtil.java,42,FLOAT_FORMATTER.applyPattern("0.######E0");
core/src/main/java/org/apache/calcite/util/NumberUtil.java,45,DOUBLE_FORMATTER = new DecimalFormat();
core/src/main/java/org/apache/calcite/util/NumberUtil.java,46,DOUBLE_FORMATTER.applyPattern("0.###############E0");
core/src/main/java/org/apache/calcite/util/Template.java,89,final List<String> parameterNames = new ArrayList<String>();
core/src/main/java/org/apache/calcite/util/Template.java,113,StringBuffer[] segments = new StringBuffer[4];
core/src/main/java/org/apache/calcite/util/Template.java,115,segments[i] = new StringBuffer();
core/src/main/java/org/apache/calcite/util/Template.java,187,StringBuffer[] segments,
core/src/main/java/org/apache/calcite/util/Util.java,612,SimpleDateFormat sdf = new SimpleDateFormat(FILE_TIMESTAMP_FORMAT);
core/src/main/java/org/apache/calcite/util/Util.java,1291,buf.append(tz.getDisplayName(false, TimeZone.SHORT));
core/src/main/java/org/apache/calcite/util/Util.java,1297,buf.append(tz.getDisplayName(true, TimeZone.SHORT));
core/src/main/java/org/apache/calcite/util/ZonelessDatetime.java,174,tempCal = Calendar.getInstance(zone);
core/src/main/java/org/apache/calcite/util/javac/JaninoCompiler.java,72,args.source.getBytes());
core/src/main/java/org/apache/calcite/util/trace/CalciteTimingTracer.java,31,new DecimalFormat("###,###,###,###,###");
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchemaFactory.java,53,flavor = CsvTable.Flavor.valueOf(flavorName.toUpperCase());
example/function/src/main/java/org/apache/calcite/example/maze/MazeTable.java,91,final PrintWriter pw = new PrintWriter(System.out);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,91,builder.put(tpcdsTable.getTableName().toUpperCase(),
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,169,builder.add(column.getColumnName().toUpperCase(),
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,60,builder.put(tpchTable.getTableName().toUpperCase(),
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,143,prefix = columnPrefixes.get(tpchTable.getTableName().toUpperCase());
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,144,assert prefix != null : tpchTable.getTableName().toUpperCase();
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,147,builder.add((prefix + column.getColumnName()).toUpperCase(),
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,148,typeFactory.createJavaType(realType(column)));
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,31,import java.io.FileWriter;
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,64,final Calendar calendar = Calendar.getInstance();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,105,try {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,106,String className = "CalciteProgram" + classId.getAndIncrement();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,107,File file = new File(SRC_DIR, className + ".java");
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,108,FileWriter fileWriter = new FileWriter(file, false);
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,120,fileWriter.write(source);
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,121,fileWriter.close();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,447,Pair.of(x.toUpperCase(), x.length()));
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,89,String.format(
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,99,rd = new BufferedReader(
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,100,new InputStreamReader(
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,101,post(
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,102,loginUrl,
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,103,data,
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,104,requestHeaders)));
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,143,String.format(
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,246,System.exit(1);
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,292,System.out.printf(
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,319,System.out.printf("%s=%s\n", this.fieldNames[i], values[i]);
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,355,csvReader = new CSVReader(new InputStreamReader(in));
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,512,case TIMESTAMP:
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,513,case TIME:
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,514,assert value instanceof Calendar;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,515,final Calendar calendar = (Calendar) value;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,516,int scale = type.getScale();
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,517,if (scale == RelDataType.SCALE_NOT_SPECIFIED) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,518,scale = 0;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,520,calendar.setTimeInMillis(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,521,SqlFunctions.round(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,522,calendar.getTimeInMillis(),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,523,DateTimeUtils.powerX(10, 3 - scale)));
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,524,break;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,832,if (typeName == SqlTypeName.CHAR) {
core/src/main/java/org/apache/calcite/util/ZonelessTimestamp.java,88,return ts.toString().substring(0, 19);
core/src/main/java/org/apache/calcite/rex/RexExecutable.java,69,Object[] values = compiledFunction.apply(dataContext);
core/src/main/java/org/apache/calcite/rex/RexExecutable.java,70,assert values.length == constExps.size();
core/src/main/java/org/apache/calcite/rex/RexExecutable.java,71,final List<Object> valueList = Arrays.asList(values);
core/src/main/java/org/apache/calcite/rex/RexExecutable.java,72,for (Pair<RexNode, Object> value : Pair.zip(constExps, valueList)) {
core/src/main/java/org/apache/calcite/rex/RexExecutable.java,73,reducedValues.add(
core/src/main/java/org/apache/calcite/rex/RexExecutable.java,74,rexBuilder.makeLiteral(value.right, value.left.getType(), true));
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,73,private Executor executor;
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,270,public void setExecutor(Executor executor) {
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,274,public Executor getExecutor() {
core/src/main/java/org/apache/calcite/plan/RelOptPlanner.java,23,import org.apache.calcite.rex.RexBuilder;
core/src/main/java/org/apache/calcite/plan/RelOptPlanner.java,24,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/plan/RelOptPlanner.java,319,void setExecutor(Executor executor);
core/src/main/java/org/apache/calcite/plan/RelOptPlanner.java,322,Executor getExecutor();
core/src/main/java/org/apache/calcite/plan/RelOptPlanner.java,328,interface Executor {
core/src/main/java/org/apache/calcite/plan/RelOptPlanner.java,332,void reduce(RexBuilder rexBuilder, List<RexNode> constExps,
core/src/main/java/org/apache/calcite/plan/RelOptPlanner.java,333,List<RexNode> reducedValues);
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,69,this.builder = builder;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,70,this.executor = executor;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,71,this.rowType = rowType;
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,75,private RelOptPlanner.Executor executor;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,19,import org.apache.calcite.plan.RelOptPlanner;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,493,RelOptPlanner.Executor executor =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,494,rel.getCluster().getPlanner().getExecutor();
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,31,import org.apache.calcite.plan.RelOptPlanner;
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,47,public class RexExecutorImpl implements RelOptPlanner.Executor {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1286,public static RexNode simplify(RexBuilder rexBuilder, RexNode e) {
core/src/main/java/org/apache/calcite/tools/FrameworkConfig.java,21,import org.apache.calcite.plan.RelOptPlanner;
core/src/main/java/org/apache/calcite/tools/FrameworkConfig.java,52,RelOptPlanner.Executor getExecutor();
core/src/main/java/org/apache/calcite/tools/Frameworks.java,24,import org.apache.calcite.plan.RelOptPlanner;
core/src/main/java/org/apache/calcite/tools/Frameworks.java,183,private RelOptPlanner.Executor executor;
core/src/main/java/org/apache/calcite/tools/Frameworks.java,200,public ConfigBuilder executor(RelOptPlanner.Executor executor) {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,284,private final RelOptPlanner.Executor executor;
core/src/main/java/org/apache/calcite/tools/Frameworks.java,295,RelOptPlanner.Executor executor) {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,316,public RelOptPlanner.Executor getExecutor() {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,28,import java.io.File;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,29,import java.io.FileInputStream;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,30,import java.io.FileReader;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,32,import java.io.InputStreamReader;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,39,import java.util.zip.GZIPInputStream;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,97,static RelDataType deduceRowType(JavaTypeFactory typeFactory, File file,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,103,reader = openCsv(file);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,154,final Reader fileReader;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,155,if (file.getName().endsWith(".gz")) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,156,final GZIPInputStream inputStream =
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,157,new GZIPInputStream(new FileInputStream(file));
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,158,fileReader = new InputStreamReader(inputStream);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,160,fileReader = new FileReader(file);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFilterableTable.java,31,import java.io.File;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFilterableTable.java,44,CsvFilterableTable(File file, RelProtoDataType protoRowType) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFilterableTable.java,45,super(file, protoRowType);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvScannableTable.java,26,import java.io.File;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvScannableTable.java,37,CsvScannableTable(File file, RelProtoDataType protoRowType) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvScannableTable.java,38,super(file, protoRowType);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvScannableTable.java,50,null, new CsvEnumerator.ArrayRowConverter(fieldTypes, fields));
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,33,final File directoryFile;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,84,String tableName = trim(file.getName(), ".gz");
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,85,final String tableNameSansJson = trimOrNull(tableName, ".json");
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,86,if (tableNameSansJson != null) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,87,JsonTable table = new JsonTable(file);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,88,builder.put(tableNameSansJson, table);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,91,tableName = trim(tableName, ".csv");
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,93,final Table table = createTable(file);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,94,builder.put(tableName, table);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,100,private Table createTable(File file) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,103,return new CsvTranslatableTable(file, null);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,105,return new CsvScannableTable(file, null);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,107,return new CsvFilterableTable(file, null);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,109,throw new AssertionError("Unknown flavor " + flavor);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTable.java,25,import java.io.File;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTable.java,33,protected final File file;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTable.java,38,CsvTable(File file, RelProtoDataType protoRowType) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTable.java,39,this.file = file;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTable.java,48,fieldTypes = new ArrayList<CsvFieldType>();
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTable.java,49,return CsvEnumerator.deduceRowType((JavaTypeFactory) typeFactory, file,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTable.java,52,return CsvEnumerator.deduceRowType((JavaTypeFactory) typeFactory,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTable.java,53,file,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTableFactory.java,44,File file = new File(fileName);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTableFactory.java,47,if (base != null && !file.isAbsolute()) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTableFactory.java,48,file = new File(base, fileName);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTableFactory.java,52,return new CsvScannableTable(file, protoRowType);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTranslatableTable.java,33,import java.io.File;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTranslatableTable.java,42,CsvTranslatableTable(File file, RelProtoDataType protoRowType) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTranslatableTable.java,43,super(file, protoRowType);
example/csv/src/main/java/org/apache/calcite/adapter/csv/JsonEnumerator.java,25,import java.io.File;
example/csv/src/main/java/org/apache/calcite/adapter/csv/JsonEnumerator.java,33,public JsonEnumerator(File file) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/JsonEnumerator.java,40,List<Object> list = mapper.readValue(file, List.class);
example/csv/src/main/java/org/apache/calcite/adapter/csv/JsonTable.java,29,import java.io.File;
example/csv/src/main/java/org/apache/calcite/adapter/csv/JsonTable.java,35,private final File file;
example/csv/src/main/java/org/apache/calcite/adapter/csv/JsonTable.java,38,JsonTable(File file) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/JsonTable.java,39,this.file = file;
example/csv/src/main/java/org/apache/calcite/adapter/csv/JsonTable.java,57,return new JsonEnumerator(file);
core/src/main/java/org/apache/calcite/sql/fun/SqlGroupingFunction.java,32,public SqlGroupingFunction() {
core/src/main/java/org/apache/calcite/sql/fun/SqlGroupingFunction.java,33,super("GROUPING", SqlKind.GROUPING, ReturnTypes.INTEGER, null,
core/src/main/java/org/apache/calcite/sql/fun/SqlGroupingFunction.java,34,OperandTypes.ANY, SqlFunctionCategory.SYSTEM);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,187,new SqlGroupingFunction();
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,194,public static final SqlGroupingIdFunction GROUPING_ID =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,195,new SqlGroupingIdFunction();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4645,case GROUPING_ID:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4679,return 1;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4680,case GROUPING_ID:
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,370,type = toType(cluster.getTypeFactory(), jsonType);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,399,RelDataType type = toType(cluster.getTypeFactory(), jsonType);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,407,return rexBuilder.makeNullLiteral(sqlTypeName);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,582,casted, makeNullLiteral(toType.getSqlTypeName())));
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1095,public RexNode makeNullLiteral(SqlTypeName typeName, int precision) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1096,RelDataType type =
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1097,typeFactory.createTypeWithNullability(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1098,typeFactory.createSqlType(typeName, precision),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1099,true);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1100,return makeCast(type, constantNull());
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1115,RelDataType type =
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1116,typeFactory.createTypeWithNullability(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1117,typeFactory.createSqlType(typeName),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1118,true);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1119,return makeCast(type, constantNull());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1263,rexBuilder.makeNullLiteral(SqlTypeName.BOOLEAN);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3011,node = rexBuilder.makeNullLiteral(field.getType().getSqlTypeName());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,685,rexBuilder.constantNull(), true));
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,352,rexBuilder.constantNull(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,466,rexBuilder.makeNullLiteral(countArg.getType().getSqlTypeName());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,127,Expression leftExpression =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,128,builder.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,132,Expression rightExpression =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,133,builder.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,136,PhysTypeImpl.of(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,137,implementor.getTypeFactory(), getRowType(), pref.preferArray());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,138,final PhysType keyPhysType =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,139,leftResult.physType.project(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,140,leftKeys, JavaRowFormat.LIST);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,149,leftResult.physType.generateAccessor(leftKeys),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,150,rightResult.physType.generateAccessor(rightKeys),
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,94,final Result leftResult = visitChild(0, e.getLeft());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,95,final Result rightResult = visitChild(1, e.getRight());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,97,final Context rightContext =
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,98,rightResult.qualifiedContext();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,391,return new Result(node, clauses, alias5,
core/src/main/java/org/apache/calcite/rel/core/Correlate.java,28,import org.apache.calcite.rel.logical.LogicalJoin;
core/src/main/java/org/apache/calcite/rel/core/Correlate.java,142,final LogicalJoin join = LogicalJoin.create(left, right,
core/src/main/java/org/apache/calcite/rel/core/Correlate.java,143,getCluster().getRexBuilder().makeLiteral(true),
core/src/main/java/org/apache/calcite/rel/core/Correlate.java,144,ImmutableSet.<CorrelationId>of(), joinType.toJoinType());
core/src/main/java/org/apache/calcite/rel/core/Correlate.java,145,return join.deriveRowType();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,754,RelNode distinct = RelOptUtil.createDistinctRel(project);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,712,final Frame frame = map.get(oldInput);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,746,final RelNode newInput = map.get(oldInput).r;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,781,final Frame frame = map.get(oldInput);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,171,assert type != null;
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,172,assert value == null || valueMatchesType(value, typeName, true);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,173,assert (value == null) == type.isNullable();
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,174,assert typeName != SqlTypeName.ANY;
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,176,this.type = type;
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,177,this.typeName = typeName;
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,216,return value instanceof Calendar;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,29,import java.util.TimeZone;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,443,format.setTimeZone(TimeZone.getTimeZone("GMT"));
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,57,TimeZone gmt = TimeZone.getTimeZone("GMT");
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,326,public static Mappings.TargetMapping permutation(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,340,RexNode operand = ((RexCall) node.e).getOperands().get(0);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,343,node.i,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,344,((RexInputRef) operand).getIndex());
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,83,RelOptUtil.permutation(
core/src/main/java/org/apache/calcite/rex/RexCallBinding.java,105,((RexCall) operand).getOperator().getMonotonicity(binding);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,285,boolean nullable = resultSet.getBoolean(11);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1329,project(project.getProjects());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,434,final List<RexNode> operandList = ImmutableList.copyOf(operands);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,446,return cluster.getRexBuilder().makeCall(operator,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,447,ImmutableList.copyOf(operands));
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,65,final Class clazz;
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,151,return new FieldTable<T>(field, elementType, enumerable);
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,188,public ReflectiveTable(Type elementType, Enumerable enumerable) {
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,257,Class clazz;
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,280,target = clazz.newInstance();
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,295,public MethodTableMacro(ReflectiveSchema schema, Method method) {
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,312,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,323,public FieldTable(Field field, Type elementType, Enumerable<T> enumerable) {
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,344,public FieldSelector(Class elementType) {
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,408,instance = aggFunction.declaringClass.newInstance();
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,170,return createStructType(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,171,new FieldInfo() {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,172,public int getFieldCount() {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,173,return fieldList.size();
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,176,public String getFieldName(int index) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,180,public RelDataType getFieldType(int index) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,703,return b0.setScale(0, BigDecimal.ROUND_FLOOR);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,764,return b0.setScale(0, BigDecimal.ROUND_CEILING);
core/src/main/java/org/apache/calcite/schema/impl/TableFunctionImpl.java,146,o = method.getDeclaringClass().newInstance();
core/src/main/java/org/apache/calcite/schema/impl/TableFunctionImpl.java,156,).ex(e);
core/src/main/java/org/apache/calcite/schema/impl/TableFunctionImpl.java,158,| InstantiationException e) {
core/src/main/java/org/apache/calcite/schema/impl/TableMacroImpl.java,77,o = method.getDeclaringClass().newInstance();
core/src/main/java/org/apache/calcite/schema/impl/TableMacroImpl.java,87,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/schema/impl/TableMacroImpl.java,89,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,115,validator.setValidatedNodeType(call, ret);
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,116,validator.setValidatedNodeType(agg, ret);
core/src/main/java/org/apache/calcite/sql/SqlJdbcFunctionCall.java,458,validator.setValidatedNodeType(operand, nodeType);
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,427,validator.setValidatedNodeType(call, ret);
core/src/main/java/org/apache/calcite/sql/SqlOverOperator.java,108,validator.setValidatedNodeType(call, ret);
core/src/main/java/org/apache/calcite/sql/SqlOverOperator.java,109,validator.setValidatedNodeType(agg, ret);
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,254,callBinding.getValidator().setValidatedNodeType(node, ret);
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,123,callBinding.getValidator().setValidatedNodeType(
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,124,operand0,
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,125,ret);
core/src/main/java/org/apache/calcite/sql/fun/SqlInOperator.java,129,validator.setValidatedNodeType(
core/src/main/java/org/apache/calcite/sql/fun/SqlInOperator.java,130,nodeList,
core/src/main/java/org/apache/calcite/sql/fun/SqlInOperator.java,131,rightType);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,439,setValidatedNodeTypeImpl(expanded, type);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1412,public void setValidatedNodeType(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1413,SqlNode node,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1414,RelDataType type) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1415,setValidatedNodeTypeImpl(node, type);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1418,public void removeValidatedNodeType(SqlNode node) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1419,nodeToTypeMap.remove(node);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1422,void setValidatedNodeTypeImpl(SqlNode node, RelDataType type) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1452,setValidatedNodeTypeImpl(expr, type);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1579,setValidatedNodeTypeImpl(node, newInferredType);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1626,setValidatedNodeTypeImpl(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1627,caseCall.getElseOperand(),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1628,returnType);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1734,if (forceNullable) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1735,ns.makeNullable();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1737,namespaces.put(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1738,ns.getNode(),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1739,ns);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3348,setValidatedNodeTypeImpl(groupItem, type);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3533,setValidatedNodeTypeImpl(selectItem, type);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3384,validator.setValidatedNodeType(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3385,list,
core/src/main/java/org/apache/calcite/util/NumberUtil.java,84,bd = bd.setScale(scale, BigDecimal.ROUND_HALF_UP);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Types.java,255,&& !clazz.isPrimitive()) {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,127,Class<?> clazz = Class.forName(className);
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,128,Object o = clazz.newInstance();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,129,return (ArrayBindable) o;
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,131,throw new RuntimeException(e);
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,133,throw new RuntimeException(e);
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,135,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,177,final Expression e = format.field(row_, i, physType.getJavaFieldType(i));
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,62,Type fieldType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,68,return Expressions.field(
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,69,expression,
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,70,recordField.getDeclaringClass(),
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,92,public Expression record(
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,93,Type javaRowClass, List<Expression> expressions) {
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,159,return RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,160,Expressions.call(expression,
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,161,BuiltInMethod.LIST_GET.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,162,Expressions.constant(field)),
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,163,fieldType);
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,187,return RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,188,Expressions.call(expression,
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,189,BuiltInMethod.ROW_VALUE.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,190,Expressions.constant(field)),
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,191,fieldType);
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,217,return RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,218,Expressions.arrayIndex(expression, Expressions.constant(field)),
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,219,fieldType);
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,260,Type fieldType);
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,619,return format.field(expression, field, storageType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,825,return Expressions.call(BuiltInMethod.INTERNAL_TO_DATE.method, operand);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,99,SqlNode sqlCondition = convertConditionToSqlNode(e.getCondition(),
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,100,leftContext,
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,101,rightContext,
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,102,e.getLeft().getRowType().getFieldCount());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,107,joinType(e.getJoinType()).symbol(POS),
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,109,JoinConditionType.ON.symbol(POS),
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,44,import com.google.common.base.Throwables;
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,412,throw Throwables.propagate(e);
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,434,throw Throwables.propagate(e);
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,450,throw Throwables.propagate(e);
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,461,throw Throwables.propagate(e);
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,63,import com.google.common.base.Throwables;
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,164,throw Throwables.propagate(e);
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,21,import com.google.common.base.Throwables;
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,23,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,154,throw Util.newInternal("Converter from " + previous
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,155,+ " to " + arc
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,244,throw Util.newInternal(e, "while visiting tree");
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,317,throw Util.newInternal(s);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1093,throw Util.newInternal(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1095,+ leftKey + " (type " + leftKeyType + ") and "
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1096,+ rightKey + " (type " + rightKeyType + ")");
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,939,throw Util.newInternal(
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,941,+ cyclicVertices);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1114,throw Util.newInternal(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1115,e,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1626,throw Util.newInternal("cycle in equivalence tree");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1652,throw Util.newInternal("Relational expression " + rel
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1653,+ " belongs to a different planner than is currently being"
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1654,+ " used.");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1664,throw Util.newInternal(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1666,+ " has calling-convention " + convention
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1667,+ " but does not implement the required interface '"
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1668,+ convention.getInterface() + "' of that convention");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1671,throw Util.newInternal(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1673,+ " does not have the correct number of traits "
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1674,+ traits.size() + " != " + traitDefs.size());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,25,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,151,throw Util.newInternal(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,152,e,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,252,throw Util.newInternal(e,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,254,+ getRule() + ", args " + Arrays.toString(rels));
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,366,throw Util.newInternal("replaceInput called on " + this);
core/src/main/java/org/apache/calcite/rel/BiRel.java,22,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/rel/BiRel.java,73,throw Util.newInternal();
core/src/main/java/org/apache/calcite/rel/convert/ConverterImpl.java,27,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/rel/convert/ConverterImpl.java,70,return Util.newInternal(
core/src/main/java/org/apache/calcite/rel/convert/ConverterImpl.java,71,getClass() + " cannot convert from "
core/src/main/java/org/apache/calcite/rel/convert/ConverterImpl.java,72,+ inTraits + " traits");
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,23,import com.google.common.base.Throwables;
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,138,Throwables.propagateIfPossible(e.getCause());
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,139,throw e;
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,21,import com.google.common.base.Throwables;
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,120,Throwables.propagateIfPossible(e.getCause());
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,121,throw e;
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,51,static CacheLoader<Pair<Class<RelNode>, Class<Metadata>>,
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,28,import com.google.common.base.Throwables;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,216,Throwables.propagateIfPossible(e.getCause());
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,217,throw e;
core/src/main/java/org/apache/calcite/rel/rules/CalcRelSplitter.java,242,Util.permAssert(
core/src/main/java/org/apache/calcite/rel/rules/CalcRelSplitter.java,243,doneCondition || (conditionRef == null),
core/src/main/java/org/apache/calcite/rel/rules/CalcRelSplitter.java,373,throw Util.newInternal("cannot implement " + expr);
core/src/main/java/org/apache/calcite/rel/rules/CalcRelSplitter.java,717,throw Util.newInternal("unknown type " + relTypeName);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,37,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,223,throw Util.newInternal("Bad field offset: index="
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,43,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,228,Util.permAssert(program.getCondition() == null,
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,871,throw Util.newInternal(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,170,throw Util.newInternal(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,191,throw Util.newInternal("Field ordinal " + i + " is invalid for "
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,376,Util.permAssert(physical, "DISALLOW PARTIAL over RANGE");
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,498,throw Util.newInternal(
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,500,+ literal + "'");
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,507,throw Util.newInternal("fromJdbcString: unsupported type");
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,520,throw Util.newInternal("getCalendarFormat: unknown type");
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,644,throw Util.newInternal("not a literal: " + node);
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,25,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,166,throw Util.newInternal("in expression " + expr
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,167,+ ", field reference " + input
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,168,+ " has inconsistent type");
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,172,throw Util.newInternal("in expression " + expr
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,173,+ ", field reference " + input
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,174,+ " is out of bounds");
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,178,throw Util.newInternal("in expression " + expr
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,179,+ ", field reference " + input
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,180,+ " has inconsistent type");
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,956,throw Util.newInternal("expr " + local
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,957,+ " references later expr " + local.index);
core/src/main/java/org/apache/calcite/schema/impl/ViewTable.java,45,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/schema/impl/ViewTable.java,131,throw Util.newInternal(
core/src/main/java/org/apache/calcite/schema/impl/ViewTable.java,132,e, "Error while parsing view definition:  " + queryString);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,32,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,214,throw Util.newInternal("should never come here");
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,354,throw Util.newInternal("invalid string literal: " + node);
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,368,throw Util.newInternal("invalid literal: " + node);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,58,Util.pre(pos != null, "pos != null");
core/src/main/java/org/apache/calcite/sql/SqlNode.java,59,this.pos = pos;
core/src/main/java/org/apache/calcite/sql/SqlNode.java,71,public SqlNode clone(SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlNode.java,75,try {
core/src/main/java/org/apache/calcite/sql/SqlNode.java,76,return (SqlNode) super.clone();
core/src/main/java/org/apache/calcite/sql/SqlNode.java,78,throw Util.newInternal(e, "error while cloning " + this);
core/src/main/java/org/apache/calcite/sql/SqlPostfixOperator.java,72,throw Util.newInternal(
core/src/main/java/org/apache/calcite/sql/SqlPrefixOperator.java,73,throw Util.newInternal(
core/src/main/java/org/apache/calcite/sql/SqlSyntax.java,144,throw Util.newInternal("Internal operator '" + operator
core/src/main/java/org/apache/calcite/sql/SqlSyntax.java,145,+ "' cannot be un-parsed");
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,701,throw Util.newInternal("Unexpected node type");
core/src/main/java/org/apache/calcite/sql/fun/SqlLikeOperator.java,34,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/sql/fun/SqlLikeOperator.java,124,throw Util.newInternal(
core/src/main/java/org/apache/calcite/sql/fun/SqlMinMaxAggFunction.java,27,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/sql/fun/SqlMinMaxAggFunction.java,116,throw Util.newInternal("bad kind: " + minMaxKind);
core/src/main/java/org/apache/calcite/sql/fun/SqlMinMaxAggFunction.java,128,throw Util.newInternal("bad kind: " + minMaxKind);
core/src/main/java/org/apache/calcite/sql/parser/SqlAbstractParserImpl.java,29,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/sql/parser/SqlAbstractParserImpl.java,580,Util.discard(o);
core/src/main/java/org/apache/calcite/sql/parser/SqlAbstractParserImpl.java,581,throw Util.newInternal("expected call to fail");
core/src/main/java/org/apache/calcite/sql/parser/SqlAbstractParserImpl.java,608,throw Util.newInternal(
core/src/main/java/org/apache/calcite/sql/parser/SqlAbstractParserImpl.java,609,e,
core/src/main/java/org/apache/calcite/sql/parser/SqlAbstractParserImpl.java,630,throw Util.newInternal(e);
core/src/main/java/org/apache/calcite/sql/parser/SqlAbstractParserImpl.java,632,throw Util.newInternal(e);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,147,Util.permAssert(
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,148,!intervalQualifier.isYearMonth(),
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,156,throw Util.newInternal(
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,157,e, "while parsing day-to-second interval " + literal);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,189,Util.permAssert(
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,190,intervalQualifier.isYearMonth(),
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,198,throw Util.newInternal(
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,199,e, "error parsing year-to-month interval " + literal);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,531,Util.pre(list != null, "list != null");
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,532,Util.pre(start < end, "start < end");
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,28,import com.google.common.base.Throwables;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,764,Util.pre(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,765,frame == this.frame,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,767,+ " does not match current frame " + this.frame.frameType);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1160,throw Throwables.propagate(e);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1169,throw Throwables.propagate(e);
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,22,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,105,throw Util.newInternal(e);
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,125,throw Util.newInternal(e);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,30,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,623,if (argType0.getCollation().equals(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,624,pickedCollation)) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,627,pickedCollation)) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,630,throw Util.newInternal("should never come here");
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,19,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,342,Set<SqlTypeName> rule = ruleset.get(to);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,343,if (null == rule) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,346,throw Util.newInternal(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,82,throw Util.newInternal("RelDataType object should have been assigned a "
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,83,+ "(default) charset when calling deriveType");
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,89,throw Util.newInternal("RelDataType object should have been assigned a "
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,90,+ "(default) collation when calling deriveType");
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,567,throw Util.newInternal("getMinValue(" + typeName + ")");
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,589,throw Util.newInternal("getMaxValue(" + typeName + ")");
core/src/main/java/org/apache/calcite/sql/validate/AbstractNamespace.java,83,Util.permAssert(
core/src/main/java/org/apache/calcite/sql/validate/AbstractNamespace.java,84,rowType == null,
core/src/main/java/org/apache/calcite/sql/validate/AbstractNamespace.java,87,Util.permAssert(
core/src/main/java/org/apache/calcite/sql/validate/AbstractNamespace.java,88,type != null,
core/src/main/java/org/apache/calcite/sql/validate/AbstractNamespace.java,105,throw Util.newInternal("todo: Cycle detected during type-checking");
core/src/main/java/org/apache/calcite/sql/validate/AbstractNamespace.java,125,Util.permAssert(rowType != null, "validate must set rowType");
core/src/main/java/org/apache/calcite/sql/validate/SetopNamespace.java,23,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/sql/validate/SetopNamespace.java,110,throw Util.newInternal("Not a query: " + call.getKind());
core/src/main/java/org/apache/calcite/sql/validate/SqlIdentifierMoniker.java,20,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/sql/validate/SqlIdentifierMoniker.java,39,Util.pre(id != null, "id != null");
core/src/main/java/org/apache/calcite/sql/validate/SqlIdentifierMoniker.java,40,this.id = id;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,543,throw Util.newInternal("Not a query: " + outermostNode);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1423,Util.pre(type != null, "type != null");
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1424,Util.pre(node != null, "node != null");
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1436,Util.pre(scope != null, "scope != null");
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1437,Util.pre(expr != null, "expr != null");
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1449,Util.permAssert(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2739,Util.pre(targetRowType != null, "targetRowType != null");
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2767,throw Util.newInternal("OVER unexpected in this context");
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2784,Util.permAssert(condition == null, "condition == null");
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2787,Util.permAssert(condition != null, "condition != null");
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2794,Util.permAssert(list.size() > 0, "Empty USING clause");
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3259,Util.permAssert(orderScope != null, "orderScope != null");
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,24,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,41,private final Map<Object, Object> map = new HashMap<Object, Object>();
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,80,map.put(
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,81,parameterType,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,87,return (RexNode) method.invoke(
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,88,ReflectiveConvertletTable.this,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,89,cx,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,90,call);
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,92,throw Util.newInternal(
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,93,e,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,96,throw Util.newInternal(
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,97,e,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,135,map.put(
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,136,opClass,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,138,public RexNode convertCall(
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,139,SqlRexContext cx,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,140,SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,142,return (RexNode) method.invoke(
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,143,ReflectiveConvertletTable.this,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,144,cx,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,145,call.getOperator(),
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,146,call);
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,148,throw Util.newInternal(
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,149,e,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,152,throw Util.newInternal(
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,153,e,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,173,Class<? extends Object> clazz = op.getClass();
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,219,Util.permAssert(
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,220,call.getOperator() == alias,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,223,target.createCall(
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,224,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,225,call.getOperandList());
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,912,throw Util.newInternal(
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,120,Util.permAssert(
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,121,(bitString.getBitCount() % 8) == 0,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1869,Util.permAssert(bb.window == null, "already in window agg mode");
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1948,throw Util.newInternal(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2077,throw Util.newInternal("not a join operator " + from);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2503,Util.permAssert(bb.agg == null, "already in agg mode");
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2889,throw Util.newInternal("not a query: " + query);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3629,throw Util.newInternal("empty values clause");
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3898,throw Util.newInternal("Unknown identifier '" + qualified.identifier
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4152,Util.permAssert(rex != null, "conversion result not null");
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4153,return rex;
core/src/main/java/org/apache/calcite/tools/RelRunners.java,21,import com.google.common.base.Throwables;
core/src/main/java/org/apache/calcite/tools/RelRunners.java,38,throw Throwables.propagate(e);
core/src/main/java/org/apache/calcite/util/ReflectUtil.java,261,throw Util.newInternal(ex);
core/src/main/java/org/apache/calcite/util/ReflectUtil.java,266,Throwable t = ex.getTargetException();
core/src/main/java/org/apache/calcite/util/ReflectUtil.java,267,if (t instanceof RuntimeException) {
core/src/main/java/org/apache/calcite/util/ReflectUtil.java,268,throw (RuntimeException) t;
core/src/main/java/org/apache/calcite/util/ReflectUtil.java,270,throw (Error) t;
core/src/main/java/org/apache/calcite/util/ReflectUtil.java,272,throw new AssertionError(t.getClass().getName());
core/src/main/java/org/apache/calcite/util/ReflectUtil.java,534,throw Util.newInternal(e,
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,143,throw Util.newInternal(e, "while reading from " + file);
core/src/main/java/org/apache/calcite/util/Util.java,453,throw newInternal(e);
core/src/main/java/org/apache/calcite/util/Util.java,770,return newInternal("(unknown cause)");
core/src/main/java/org/apache/calcite/util/Util.java,774,return new AssertionError("Internal error: " + s);
core/src/main/java/org/apache/calcite/util/Util.java,778,return newInternal(e, "(unknown cause)");
core/src/main/java/org/apache/calcite/util/Util.java,782,String message = "Internal error: " + s;
core/src/main/java/org/apache/calcite/util/Util.java,783,if (false) {
core/src/main/java/org/apache/calcite/util/Util.java,786,System.err.println(message);
core/src/main/java/org/apache/calcite/util/Util.java,787,e.printStackTrace(System.err);
core/src/main/java/org/apache/calcite/util/Util.java,789,AssertionError ae = new AssertionError(message);
core/src/main/java/org/apache/calcite/util/Util.java,790,ae.initCause(e);
core/src/main/java/org/apache/calcite/util/Util.java,791,return ae;
core/src/main/java/org/apache/calcite/util/Util.java,851,throw newInternal("pre-condition failed: " + description);
core/src/main/java/org/apache/calcite/util/Util.java,874,throw newInternal("post-condition failed: " + description);
core/src/main/java/org/apache/calcite/util/Util.java,886,throw newInternal("invariant violated: " + description);
core/src/main/java/org/apache/calcite/util/Util.java,1508,throw newInternal(
core/src/main/java/org/apache/calcite/util/javac/JaninoCompiler.java,19,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/util/javac/JaninoCompiler.java,84,throw Util.newInternal(ex, "while compiling " + args.fullClassName);
core/src/main/java/org/apache/calcite/util/javac/JaninoCompiler.java,162,Map<String, byte[]> map = super.generateBytecodes(name);
core/src/main/java/org/apache/calcite/util/javac/JaninoCompiler.java,164,return map;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,226,List<SqlNode> list = Expressions.list();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,229,list.add(result.asSelect());
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,231,final SqlCall node = operator.createCall(new SqlNodeList(list, POS));
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,33,import java.util.WeakHashMap;
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,58,private final WeakHashMap<RelOptPlanner, ConversionData>
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,59,plannerConversionMap =
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,60,new WeakHashMap<RelOptPlanner, ConversionData>();
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,203,ConversionData conversionData = plannerConversionMap.get(planner);
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,204,if (conversionData == null) {
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,206,conversionData = new ConversionData();
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,207,plannerConversionMap.put(planner, conversionData);
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,209,return conversionData;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,891,private static SqlNode pushDownNotForIn(SqlNode sqlNode) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,898,sqlOperands[i] = pushDownNotForIn(sqlOperands[i]);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,900,return sqlNode;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,909,orOperands[i] =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,910,SqlStdOperatorTable.NOT.createCall(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,911,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,912,andOperands[i]);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,915,orOperands[i] = pushDownNotForIn(orOperands[i]);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,917,return SqlStdOperatorTable.OR.createCall(SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,918,orOperands[0], orOperands[1]);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,923,andOperands[i] =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,924,SqlStdOperatorTable.NOT.createCall(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,925,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,926,orOperands[i]);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,929,andOperands[i] = pushDownNotForIn(andOperands[i]);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,931,return SqlStdOperatorTable.AND.createCall(SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,932,andOperands[0], andOperands[1]);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,936,return pushDownNotForIn(notOperands[0]);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,942,return SqlStdOperatorTable.IN.createCall(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,943,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,944,inOperands[0],
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,945,inOperands[1]);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,947,return SqlStdOperatorTable.NOT_IN.createCall(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,948,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,949,inOperands[0],
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,950,inOperands[1]);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,980,SqlNode newWhere = pushDownNotForIn(where);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2597,SqlNode newHaving = pushDownNotForIn(having);
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,25,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,426,new Predicate<Class<? extends RelNode>>() {
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,427,public boolean apply(Class<? extends RelNode> input) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,117,new Predicate<Filter>() {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,118,public boolean apply(Filter filter) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,128,new Predicate<Project>() {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,129,public boolean apply(Project project) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,139,new Predicate<Calc>() {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,140,public boolean apply(Calc calc) {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,2395,new Predicate<LogicalFilter>() {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,2396,public boolean apply(LogicalFilter input) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,258,new Predicate<Integer>() {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,259,public boolean apply(Integer input) {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,77,new Predicate<Aggregate>() {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,78,public boolean apply(Aggregate input) {
core/src/main/java/org/apache/calcite/rel/core/Values.java,68,new Predicate<Values>() {
core/src/main/java/org/apache/calcite/rel/core/Values.java,69,public boolean apply(Values values) {
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,43,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,355,new Predicate<RexFieldCollation>() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,356,public boolean apply(RexFieldCollation rexFieldCollation) {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,53,new Predicate<TableScan>() {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,54,public boolean apply(TableScan scan) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,45,new Predicate<Project>() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,46,public boolean apply(Project input) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,51,new Predicate<TableScan>() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,52,public boolean apply(TableScan scan) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,79,new Predicate<Calc>() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,80,public boolean apply(Calc calc) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,86,new Predicate<Project>() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,87,public boolean apply(Project project) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1559,notTerms = Iterables.filter(
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1560,notTerms, new Predicate<RexNode>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1561,public boolean apply(RexNode input) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1576,return composeConjunction(
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1577,rexBuilder, Iterables.concat(
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1578,ImmutableList.of(e), Iterables.transform(
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1579,notTerms, notFn(rexBuilder))), false);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2053,new Predicate<Project>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2054,public boolean apply(Project project) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2068,new Predicate<Filter>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2069,public boolean apply(Filter filter) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2081,new Predicate<Join>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2082,public boolean apply(Join join) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,36,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,240,new Predicate<SqlNode>() {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,242,public boolean apply(SqlNode input) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,248,new Predicate<SqlNode>() {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,249,public boolean apply(SqlNode input) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,99,logic = Logic.TRUE_FALSE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1552,RelOptTable table =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1553,Prepare.CatalogReader.THREAD_LOCAL.get().getTable(names);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,459,rootSchema = new CachingCalciteSchema(null, schema, "");
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,461,rootSchema = new SimpleCalciteSchema(null, schema, "");
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,226,return createStructType(
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,230,return toSql(a0.getType());
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,236,return createTypeWithNullability(
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,237,createSqlType(type.getSqlTypeName()),
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,19,import org.apache.calcite.adapter.java.JavaTypeFactory;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,73,final CalciteSchema rootSchema;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,74,final JavaTypeFactory typeFactory;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,75,private final List<String> defaultSchema;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,77,private final boolean caseSensitive;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,79,public CalciteCatalogReader(
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,80,CalciteSchema rootSchema,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,81,boolean caseSensitive,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,82,List<String> defaultSchema,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,83,JavaTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,84,super();
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,85,assert rootSchema != defaultSchema;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,86,this.rootSchema = rootSchema;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,87,this.caseSensitive = caseSensitive;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,88,this.defaultSchema = defaultSchema;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,93,return new CalciteCatalogReader(rootSchema, caseSensitive, schemaPath,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,94,typeFactory);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,97,public RelOptTableImpl getTable(final List<String> names) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,99,if (defaultSchema != null) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,100,RelOptTableImpl table = getTableFrom(names, defaultSchema);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,106,return getTableFrom(names, ImmutableList.<String>of());
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,109,private RelOptTableImpl getTableFrom(List<String> names,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,110,List<String> schemaNames) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,112,getSchema(Iterables.concat(schemaNames, Util.skipLast(names)));
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,117,CalciteSchema.TableEntry entry = schema.getTable(name, caseSensitive);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,119,entry = schema.getTableBasedOnNullaryFunction(name, caseSensitive);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,132,final List<? extends List<String>> schemaNameList;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,135,schemaNameList = ImmutableList.of(ImmutableList.<String>of());
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,137,CalciteSchema schema = getSchema(defaultSchema);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,138,if (schema == null) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,139,schemaNameList = ImmutableList.of();
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,141,schemaNameList = schema.getPath();
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,146,getSchema(Iterables.concat(schemaNames, Util.skipLast(names)));
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,155,private CalciteSchema getSchema(Iterable<String> schemaNames) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,158,schema = schema.getSubSchema(schemaName, caseSensitive);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,171,final CalciteSchema schema = getSchema(names);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,179,result.add(
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,180,new SqlMonikerImpl(schema.path(subSchema), SqlMonikerType.SCHEMA));
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,184,result.add(
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,185,new SqlMonikerImpl(schema.path(table), SqlMonikerType.TABLE));
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,190,result.add(
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,191,new SqlMonikerImpl(schema.path(function), SqlMonikerType.FUNCTION));
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,196,public List<String> getSchemaName() {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,197,return defaultSchema;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,200,public RelOptTableImpl getTableForMember(List<String> names) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,215,return Util.matches(caseSensitive, string, name);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,320,return typeFactory.toSql(type);
core/src/main/java/org/apache/calcite/prepare/Prepare.java,392,PreparingTable getTable(List<String> names);
core/src/main/java/org/apache/calcite/runtime/CalciteResource.java,608,ExInst<CalciteException> tableNotFound(String tableName);
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,142,public SqlNode clone(SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,146,public String toString() {
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,147,return Util.sepList(Lists.transform(names, EMPTY_TO_STAR), ".");
core/src/main/java/org/apache/calcite/sql/validate/AbstractNamespace.java,160,return validator.catalogReader.field(rowType, name) != null;
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,154,final Pair<String, SqlValidatorNamespace> pair =
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,155,findQualifyingTableName(columnName, identifier);
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,156,final String tableName = pair.left;
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,157,final SqlValidatorNamespace namespace = pair.right;
core/src/main/java/org/apache/calcite/sql/validate/DelegatingSqlValidatorCatalogReader.java,55,public List<String> getSchemaName() {
core/src/main/java/org/apache/calcite/sql/validate/DelegatingSqlValidatorCatalogReader.java,56,return catalogReader.getSchemaName();
core/src/main/java/org/apache/calcite/sql/validate/IdentifierNamespace.java,80,this.parentScope = parentScope;
core/src/main/java/org/apache/calcite/sql/validate/IdentifierNamespace.java,81,assert parentScope != null;
core/src/main/java/org/apache/calcite/sql/validate/IdentifierNamespace.java,104,resolvedNamespace = parentScope.getTableNamespace(id.names);
core/src/main/java/org/apache/calcite/sql/validate/IdentifierNamespace.java,105,if (resolvedNamespace == null) {
core/src/main/java/org/apache/calcite/sql/validate/IdentifierNamespace.java,106,throw validator.newValidationError(id,
core/src/main/java/org/apache/calcite/sql/validate/IdentifierNamespace.java,107,RESOURCE.tableNameNotFound(id.toString()));
core/src/main/java/org/apache/calcite/sql/validate/IdentifierNamespace.java,120,new ArrayList<SqlParserPos>(
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,112,final SqlValidatorTable table2 =
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,113,validator.catalogReader.getTable(names);
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,114,if (table2 != null
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,115,&& table.getQualifiedName().equals(table2.getQualifiedName())) {
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,120,return -1;
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,164,final int i = findChild(names);
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,165,if (i >= 0) {
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,187,validator.catalogReader.field(childRowType, columnName);
core/src/main/java/org/apache/calcite/sql/validate/OrderByScope.java,86,final RelDataTypeField field = validator.catalogReader.field(rowType, name);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorCatalogReader.java,75,List<String> getSchemaName();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2829,catalogReader.field(leftRowType, name).getType();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2831,catalogReader.field(rightRowType, name).getType();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2892,final RelDataTypeField field = catalogReader.field(rowType, name);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3214,final SqlValidatorNamespace ns = scope.getTableNamespace(id.names);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3215,if (ns == null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3220,if (!(ns instanceof TableNamespace)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3221,throw newValidationError(id, RESOURCE.notASequence(id.toString()));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3223,final SqlValidatorTable table = ns.getTable();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3224,final Table table1 = ((RelOptTable) table).unwrap(Table.class);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3225,switch (table1.getJdbcTableType()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3226,case SEQUENCE:
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3227,case TEMPORARY_SEQUENCE:
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3228,break;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3229,default:
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3230,throw newValidationError(id, RESOURCE.notASequence(id.toString()));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3994,final RelDataTypeField field = catalogReader.field(rowType, name);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4344,field = catalogReader.field(type, name);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4501,RelDataTypeField field =
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4502,catalogReader.field(rowType, alias);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorScope.java,79,Pair<String, SqlValidatorNamespace> findQualifyingTableName(String columnName,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorScope.java,80,SqlNode ctx);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorScope.java,170,SqlValidatorNamespace getTableNamespace(List<String> names);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,288,List<String> x = catalogReader.getSchemaName();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,289,for (;;) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,293,if (x.isEmpty()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,294,break;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,296,x = Util.skipLast(x);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,506,RelDataTypeField field =
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,508,originalFieldName);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2401,final RelDataTypeField field = catalogReader.field(rowType, name);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3088,RelDataTypeField field = catalogReader.field(targetRowType, p.left);
core/src/main/java/org/apache/calcite/jdbc/SimpleCalciteSchema.java,93,for (String functionName : schema.getFunctionNames()) {
core/src/main/java/org/apache/calcite/jdbc/SimpleCalciteSchema.java,94,builder.addAll(schema.getFunctions(functionName));
core/src/main/java/org/apache/calcite/jdbc/SimpleCalciteSchema.java,123,for (String s : schema.getFunctionNames()) {
core/src/main/java/org/apache/calcite/jdbc/SimpleCalciteSchema.java,124,for (Function function : schema.getFunctions(s)) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,264,assert getOperand0().matches(rel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleMatch.java,53,for (RelNode rel : rels) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleMatch.java,54,assert rel != null;
core/src/main/java/org/apache/calcite/rex/RexOver.java,65,assert op.isAggregator() : "precondition: op.isAggregator()";
core/src/main/java/org/apache/calcite/rex/RexOver.java,66,assert window != null : "precondition: window != null";
core/src/main/java/org/apache/calcite/rex/RexOver.java,67,this.window = window;
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,120,Util.pre(SqlTypeUtil.inCharFamily(this), "Not an chartype");
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,567,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,568,SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,579,Util.pre(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,580,SqlTypeUtil.sameNamedType(argType0, argType1),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1466,return scope.nullifyType(operand, type);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2132,assert node != null;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2133,assert enclosingNode != null;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2134,assert usingScope == null || alias != null : usingScope;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3331,assert isRowConstructor(rowConstructor) : rowConstructor;
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,23,import org.apache.calcite.util.Compatible;
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,33,import java.util.NavigableSet;
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,41,private final Cached<NavigableSet<String>> implicitTableCache;
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,42,private final Cached<NavigableSet<String>> implicitFunctionCache;
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,53,Compatible.INSTANCE.navigableSet(
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,54,ImmutableSortedSet.copyOf(COMPARATOR,
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,55,CachingCalciteSchema.this.schema.getSubSchemaNames())));
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,59,new AbstractCached<NavigableSet<String>>() {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,60,public NavigableSet<String> build() {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,61,return Compatible.INSTANCE.navigableSet(
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,62,ImmutableSortedSet.copyOf(COMPARATOR,
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,63,CachingCalciteSchema.this.schema.getTableNames()));
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,67,new AbstractCached<NavigableSet<String>>() {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,68,public NavigableSet<String> build() {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,69,return Compatible.INSTANCE.navigableSet(
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,70,ImmutableSortedSet.copyOf(COMPARATOR,
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,71,CachingCalciteSchema.this.schema.getFunctionNames()));
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,93,if (caseSensitive) {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,95,final long now = System.currentTimeMillis();
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,96,final SubSchemaCache subSchemaCache = implicitSubSchemaCache.get(now);
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,97,if (subSchemaCache.names.contains(schemaName)) {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,98,return subSchemaCache.cache.getUnchecked(schemaName);
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,102,final long now = System.currentTimeMillis();
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,103,final SubSchemaCache subSchemaCache =
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,104,implicitSubSchemaCache.get(now);
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,105,final String schemaName2 = subSchemaCache.names.floor(schemaName);
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,106,if (schemaName2 != null) {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,107,return subSchemaCache.cache.getUnchecked(schemaName2);
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,123,if (caseSensitive) {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,125,final long now = System.currentTimeMillis();
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,126,if (implicitTableCache.get(now).contains(tableName)) {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,127,final Table table = schema.getTable(tableName);
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,128,if (table != null) {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,129,return tableEntry(tableName, table);
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,134,final long now = System.currentTimeMillis();
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,135,final NavigableSet<String> implicitTableNames =
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,136,implicitTableCache.get(now);
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,137,final String tableName2 = implicitTableNames.floor(tableName);
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,138,if (tableName2 != null) {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,139,final Table table = schema.getTable(tableName2);
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,140,if (table != null) {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,141,return tableEntry(tableName2, table);
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,153,for (String name : subSchemaCache.names) {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,165,builder.addAll(implicitTableCache.get(System.currentTimeMillis()));
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,168,protected void addImplicitFunctionToBuilder(
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,169,ImmutableList.Builder<Function> builder) {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,171,for (String name2
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,172,: find(implicitFunctionCache.get(System.currentTimeMillis()), name)) {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,183,builder.addAll(implicitFunctionCache.get(System.currentTimeMillis()));
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,190,for (String s : implicitFunctionCache.get(System.currentTimeMillis())) {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,207,final NavigableSet<String> set =
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,208,implicitFunctionCache.get(System.currentTimeMillis());
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,209,for (String s : find(set, tableName)) {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,267,final NavigableSet<String> names;
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,273,NavigableSet<String> names) {
core/src/main/java/org/apache/calcite/jdbc/CachingCalciteSchema.java,274,this.names = names;
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,34,import com.google.common.collect.LinkedListMultimap;
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,36,import com.google.common.collect.Multimap;
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,40,import java.util.Comparator;
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,46,import java.util.TreeMap;
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,47,import java.util.TreeSet;
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,60,protected static final Comparator<String> COMPARATOR =
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,61,new Comparator<String>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,62,public int compare(String o1, String o2) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,63,int c = o1.compareToIgnoreCase(o2);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,64,if (c == 0) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,65,c = o1.compareTo(o2);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,67,return c;
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,76,public final NavigableMap<String, TableEntry> tableMap =
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,77,new TreeMap<>(COMPARATOR);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,78,protected final Multimap<String, FunctionEntry> functionMap =
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,79,LinkedListMultimap.create();
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,80,protected final NavigableMap<String, LatticeEntry> latticeMap =
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,81,new TreeMap<>(COMPARATOR);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,82,protected final NavigableSet<String> functionNames =
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,83,new TreeSet<>(COMPARATOR);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,84,protected final NavigableMap<String, FunctionEntry> nullaryFunctionMap =
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,85,new TreeMap<>(COMPARATOR);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,86,protected final NavigableMap<String, CalciteSchema> subSchemaMap =
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,87,new TreeMap<>(COMPARATOR);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,123,protected abstract void addImplicitFunctionToBuilder(ImmutableList.Builder<Function> builder);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,168,if (latticeMap.containsKey(name)) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,208,if (caseSensitive) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,210,final CalciteSchema entry = subSchemaMap.get(schemaName);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,211,if (entry != null) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,212,return entry;
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,217,for (Map.Entry<String, CalciteSchema> entry
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,218,: find(subSchemaMap, schemaName).entrySet()) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,219,return entry.getValue();
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,230,for (TableEntry tableEntry : tableMap.values()) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,240,if (caseSensitive) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,242,final TableEntry entry = tableMap.get(tableName);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,243,if (entry != null) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,244,return entry;
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,249,for (Map.Entry<String, TableEntry> entry
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,250,: find(tableMap, tableName).entrySet()) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,251,return entry.getValue();
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,295,new ImmutableSortedMap.Builder<>(COMPARATOR);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,296,builder.putAll(subSchemaMap);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,305,return Compatible.INSTANCE.immutableNavigableMap(latticeMap);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,312,new ImmutableSortedSet.Builder<>(COMPARATOR);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,314,builder.addAll(tableMap.keySet());
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,325,if (caseSensitive) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,327,final Collection<FunctionEntry> functionEntries = functionMap.get(name);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,328,if (functionEntries != null) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,329,for (FunctionEntry functionEntry : functionEntries) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,330,builder.add(functionEntry.getFunction());
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,334,final Collection<Function> functions = schema.getFunctions(name);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,335,if (functions != null) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,336,builder.addAll(functions);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,340,for (String name2 : find(functionNames, name)) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,341,final Collection<FunctionEntry> functionEntries =
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,342,functionMap.get(name2);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,343,if (functionEntries != null) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,344,for (FunctionEntry functionEntry : functionEntries) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,345,builder.add(functionEntry.getFunction());
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,350,addImplicitFunctionToBuilder(builder);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,359,new ImmutableSortedSet.Builder<>(COMPARATOR);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,361,builder.addAll(functionMap.keySet());
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,371,new ImmutableSortedMap.Builder<>(COMPARATOR);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,372,for (Map.Entry<String, FunctionEntry> s : nullaryFunctionMap.entrySet()) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,373,final Function function = s.getValue().getFunction();
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,377,builder.put(s.getKey(), table);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,389,if (caseSensitive) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,390,final FunctionEntry functionEntry = nullaryFunctionMap.get(tableName);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,391,if (functionEntry != null) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,392,final Function function = functionEntry.getFunction();
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,393,if (function instanceof TableMacro) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,394,assert function.getParameters().isEmpty();
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,395,final Table table = ((TableMacro) function).apply(ImmutableList.of());
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,396,return tableEntry(tableName, table);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,399,for (Function function : schema.getFunctions(tableName)) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,400,if (function instanceof TableMacro
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,401,&& function.getParameters().isEmpty()) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,402,final Table table = ((TableMacro) function).apply(ImmutableList.of());
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,403,return tableEntry(tableName, table);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,407,for (Map.Entry<String, FunctionEntry> entry
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,408,: find(nullaryFunctionMap, tableName).entrySet()) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,409,final Function function = entry.getValue().getFunction();
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,410,if (function instanceof TableMacro) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,411,assert function.getParameters().isEmpty();
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,412,final Table table = ((TableMacro) function).apply(ImmutableList.of());
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,413,return tableEntry(tableName, table);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,416,TableEntry tableEntry =
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,417,getImplicitTableBasedOnNullaryFunction(tableName, false);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,419,return null;
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,426,assert map.comparator() == COMPARATOR;
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,433,assert set.comparator() == COMPARATOR;
core/src/main/java/org/apache/calcite/jdbc/SimpleCalciteSchema.java,92,protected void addImplicitFunctionToBuilder(ImmutableList.Builder<Function> builder) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,308,b:
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,309,if (allColumnsInAggregate && newAggCalls.isEmpty()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,312,relBuilder.project(projects);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,313,if (allColumnsInAggregate) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,315,List<RexNode> projects2 = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,316,for (int key : Mappings.apply(mapping, aggregate.getGroupSet())) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,317,projects2.add(relBuilder.field(key));
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,319,for (AggregateCall newAggCall : newAggCalls) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,320,final SqlSplittableAggFunction splitter =
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,322,.unwrap(SqlSplittableAggFunction.class);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,323,if (splitter != null) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,324,projects2.add(
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,325,splitter.singleton(rexBuilder, relBuilder.peek().getRowType(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,326,newAggCall));
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,330,== aggregate.getGroupSet().cardinality() + newAggCalls.size()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,332,relBuilder.project(projects2);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,333,break b;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,350,for (RexNode pred : predicates) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,351,populateEquivalences(equivalence, pred);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,455,assert !frame.corVarOutputPos.isEmpty();
core/src/main/java/org/apache/calcite/tools/PigRelBuilder.java,134,String alias = getAlias();
core/src/main/java/org/apache/calcite/tools/PigRelBuilder.java,141,aggregateCall(SqlStdOperatorTable.COLLECT, false, null, alias, row));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,337,final List<String> aliases = new ArrayList<>();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,354,+ "'; aliases are: " + aliases);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,743,final Iterator<String> nameIterator = fieldNames.iterator();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,744,for (RexNode node : nodes) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,745,final String name = nameIterator.hasNext() ? nameIterator.next() : null;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,759,projectFactory.createProject(build(), ImmutableList.copyOf(exprList),
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,761,push(project);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,780,return peek(0).getRowType().getFieldNames().get(ref.getIndex());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,854,final RelNode r = build();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,878,push(aggregate);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1025,final List<Pair<String, RelDataType>> pairs = new ArrayList<>();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1026,pairs.addAll(left.right);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1027,pairs.addAll(right.right);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1073,public RelBuilder as(String alias) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1076,new Frame(pair.rel,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1310,push(sort2.getInput());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1312,sortFactory.createSort(build(), sort2.collation,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1314,push(sort);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1324,push(sort2.getInput());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1326,sortFactory.createSort(build(), sort2.collation,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1328,push(sort);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1339,sortFactory.createSort(build(), RelCollations.of(fieldCollations),
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1341,push(sort);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1420,protected String getAlias() {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1422,return frame.right.size() == 1
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1423,? frame.right.get(0).left
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1424,: null;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1503,final ImmutableList<Pair<String, RelDataType>> right;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1505,private Frame(RelNode rel, ImmutableList<Pair<String, RelDataType>> pairs) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1507,this.right = pairs;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1511,this(rel, ImmutableList.of(Pair.of(deriveAlias(rel), rel.getRowType())));
core/src/main/java/org/apache/calcite/rel/core/Join.java,153,+ right.getRowType().getFieldCount()) {
core/src/main/java/org/apache/calcite/sql/validate/AbstractNamespace.java,53,private boolean forceNullable;
core/src/main/java/org/apache/calcite/sql/validate/AbstractNamespace.java,90,if (forceNullable) {
core/src/main/java/org/apache/calcite/sql/validate/AbstractNamespace.java,94,type =
core/src/main/java/org/apache/calcite/sql/validate/AbstractNamespace.java,95,validator.getTypeFactory().createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql/validate/AbstractNamespace.java,96,type,
core/src/main/java/org/apache/calcite/sql/validate/AbstractNamespace.java,97,true);
core/src/main/java/org/apache/calcite/sql/validate/AbstractNamespace.java,172,forceNullable = true;
core/src/main/java/org/apache/calcite/sql/validate/DelegatingNamespace.java,101,namespace.makeNullable();
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,70,public void addChild(SqlValidatorNamespace ns, String alias) {
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,186,RelDataType fromRowType = fromNs.getRowType();
core/src/main/java/org/apache/calcite/sql/validate/EmptyScope.java,112,public void addChild(SqlValidatorNamespace ns, String alias) {
core/src/main/java/org/apache/calcite/sql/validate/JoinScope.java,62,public void addChild(SqlValidatorNamespace ns, String alias) {
core/src/main/java/org/apache/calcite/sql/validate/JoinScope.java,63,super.addChild(ns, alias);
core/src/main/java/org/apache/calcite/sql/validate/JoinScope.java,75,usingScope.addChild(ns, alias);
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,41,protected final List<Pair<String, SqlValidatorNamespace>> children =
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,52,public void addChild(SqlValidatorNamespace ns, String alias) {
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,53,assert alias != null;
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,54,children.add(Pair.of(alias, ns));
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,63,return Pair.right(children);
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,124,for (Pair<String, SqlValidatorNamespace> pair : children) {
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,125,addColumnNames(pair.right, result);
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,131,for (Pair<String, SqlValidatorNamespace> pair : children) {
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,132,result.add(new SqlMonikerImpl(pair.left, SqlMonikerType.TABLE));
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,183,for (Pair<String, SqlValidatorNamespace> pair : children) {
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,184,SqlValidatorNamespace childNs = pair.right;
core/src/main/java/org/apache/calcite/sql/validate/OverScope.java,77,final SqlValidatorNamespace child = children.get(0).right;
core/src/main/java/org/apache/calcite/sql/validate/SelectScope.java,183,final SqlValidatorNamespace child = children.get(0).right;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,457,for (Pair<String, SqlValidatorNamespace> p : scope.children) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,502,final RelDataType rowType = fromNs.getRowType();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1741,usingScope.addChild(ns, alias);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2012,for (Pair<String, SqlValidatorNamespace> p : overScope.children) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2013,registerNamespace(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2014,usingScope,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2015,p.left,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2016,p.right,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2949,final SqlValidatorScope fromScope = getFromScope(select);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2950,final List<Pair<String, SqlValidatorNamespace>> children =
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2951,((SelectScope) fromScope).children;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2954,final Pair<String, SqlValidatorNamespace> child =
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2955,children.get(duplicateAliasOrdinal);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2956,throw newValidationError(child.right.getEnclosingNode(),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2957,RESOURCE.fromAliasDuplicate(child.left));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3027,for (Pair<String, SqlValidatorNamespace> namespace : scope.children) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3028,if (!namespace.right.supportsModality(modality)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3030,throw newValidationError(namespace.right.getNode(),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3031,Static.RESOURCE.cannotConvertToStream(namespace.left));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3039,for (Pair<String, SqlValidatorNamespace> namespace : scope.children) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3040,if (namespace.right.supportsModality(modality)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3047,List<String> inputList = new ArrayList<String>();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3048,for (Pair<String, SqlValidatorNamespace> namespace : scope.children) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3049,inputList.add(namespace.left);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3051,String inputs = Joiner.on(", ").join(inputList);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3062,for (Pair<String, SqlValidatorNamespace> namespace : scope.children) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3063,if (!namespace.right.supportsModality(modality)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3065,throw newValidationError(namespace.right.getNode(),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3066,Static.RESOURCE.cannotConvertToRelation(namespace.left));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorScope.java,112,void addChild(SqlValidatorNamespace ns, String alias);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,507,scope.getValidator().getCatalogReader().field(foundNs.getRowType(),
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,97,final RexSubQuery e =
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,98,RexUtil.SubQueryFinder.find(filter.getCondition());
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,99,assert e != null;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,100,final RelOptUtil.Logic logic =
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,101,LogicVisitor.find(RelOptUtil.Logic.TRUE,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,102,ImmutableList.of(filter.getCondition()), e);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,104,final int fieldCount = builder.peek().getRowType().getFieldCount();
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,105,final RexNode target = apply(e, filter.getVariablesSet(), logic,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,106,builder, 1, fieldCount);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,107,final RexShuttle shuttle = new ReplaceSubQueryShuttle(e, target);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,108,builder.filter(shuttle.apply(filter.getCondition()));
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,300,operands.add(builder.isNotNull(builder.field("dt", "i")),
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,205,public boolean isValid(Litmus litmus) {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,210,return isValid(Litmus.THROW);
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,347,assert r.isValid(Litmus.THROW);
core/src/main/java/org/apache/calcite/rel/RelNode.java,362,boolean isValid(Litmus litmus);
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,376,public boolean isValid(Litmus litmus) {
core/src/main/java/org/apache/calcite/rel/core/Calc.java,67,assert isValid(Litmus.THROW);
core/src/main/java/org/apache/calcite/rel/core/Calc.java,113,public boolean isValid(Litmus litmus) {
core/src/main/java/org/apache/calcite/rel/core/Calc.java,121,if (!program.isValid(litmus)) {
core/src/main/java/org/apache/calcite/rel/core/Filter.java,77,assert !CalcitePrepareImpl.DEBUG || isValid(Litmus.THROW);
core/src/main/java/org/apache/calcite/rel/core/Filter.java,118,final RexChecker checker = new RexChecker(getInput().getRowType(), litmus);
core/src/main/java/org/apache/calcite/rel/core/Join.java,146,public boolean isValid_(Litmus litmus) {
core/src/main/java/org/apache/calcite/rel/core/Join.java,147,if (!super.isValid(litmus)) {
core/src/main/java/org/apache/calcite/rel/core/Join.java,172,litmus);
core/src/main/java/org/apache/calcite/rel/core/Project.java,82,assert isValid(Litmus.THROW);
core/src/main/java/org/apache/calcite/rel/core/Project.java,174,public boolean isValid(Litmus litmus) {
core/src/main/java/org/apache/calcite/rel/core/Project.java,175,if (!super.isValid(litmus)) {
core/src/main/java/org/apache/calcite/rel/core/Project.java,183,getInput().getRowType(), litmus);
core/src/main/java/org/apache/calcite/rel/core/Window.java,109,final RexChecker checker =
core/src/main/java/org/apache/calcite/rel/core/Window.java,110,new RexChecker(inputTypes, litmus);
core/src/main/java/org/apache/calcite/rel/logical/LogicalCorrelate.java,74,assert !CalcitePrepareImpl.DEBUG || isValid(Litmus.THROW);
core/src/main/java/org/apache/calcite/rel/rules/CalcRelSplitter.java,125,assert program.isValid(Litmus.THROW);
core/src/main/java/org/apache/calcite/rex/RexChecker.java,77,public RexChecker(final RelDataType inputRowType, Litmus litmus) {
core/src/main/java/org/apache/calcite/rex/RexChecker.java,78,this(RelOptUtil.getFieldTypeList(inputRowType), litmus);
core/src/main/java/org/apache/calcite/rex/RexChecker.java,93,public RexChecker(List<RelDataType> inputTypeList, Litmus litmus) {
core/src/main/java/org/apache/calcite/rex/RexChecker.java,110,public Boolean visitInputRef(RexInputRef ref) {
core/src/main/java/org/apache/calcite/rex/RexChecker.java,126,public Boolean visitLocalRef(RexLocalRef ref) {
core/src/main/java/org/apache/calcite/rex/RexChecker.java,131,public Boolean visitCall(RexCall call) {
core/src/main/java/org/apache/calcite/rex/RexChecker.java,141,public Boolean visitFieldAccess(RexFieldAccess fieldAccess) {
core/src/main/java/org/apache/calcite/rex/RexProgram.java,115,assert isValid(Litmus.THROW);
core/src/main/java/org/apache/calcite/rex/RexProgram.java,402,public boolean isValid(Litmus litmus) {
core/src/main/java/org/apache/calcite/rex/RexProgram.java,444,new Checker(
core/src/main/java/org/apache/calcite/rex/RexProgram.java,445,litmus,
core/src/main/java/org/apache/calcite/rex/RexProgram.java,446,inputRowType,
core/src/main/java/org/apache/calcite/rex/RexProgram.java,447,new AbstractList<RelDataType>() {
core/src/main/java/org/apache/calcite/rex/RexProgram.java,448,public RelDataType get(int index) {
core/src/main/java/org/apache/calcite/rex/RexProgram.java,449,return exprs.get(index).getType();
core/src/main/java/org/apache/calcite/rex/RexProgram.java,453,return exprs.size();
core/src/main/java/org/apache/calcite/rex/RexProgram.java,787,assert isValid(Litmus.THROW);
core/src/main/java/org/apache/calcite/rex/RexProgram.java,809,public Checker(Litmus litmus,
core/src/main/java/org/apache/calcite/rex/RexProgram.java,810,RelDataType inputRowType,
core/src/main/java/org/apache/calcite/rex/RexProgram.java,811,List<RelDataType> internalExprTypeList) {
core/src/main/java/org/apache/calcite/rex/RexProgram.java,812,super(inputRowType, litmus);
core/src/main/java/org/apache/calcite/rex/RexProgram.java,818,public Boolean visitLocalRef(RexLocalRef localRef) {
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,468,assert program.isValid(Litmus.THROW);
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,745,assert bottomProgram.isValid(Litmus.THROW);
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,746,assert topProgram.isValid(Litmus.THROW);
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,764,assert mergedProg.isValid(Litmus.THROW);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,451,new SqlSpecialOperator(
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,453,SqlKind.PLUS,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,454,40,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,455,true,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,457,InferTypes.FIRST_KNOWN,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,458,OperandTypes.PLUS_OPERATOR);
core/src/main/java/org/apache/calcite/adapter/enumerable/ReflectiveCallNotNullImplementor.java,21,import org.apache.calcite.linq4j.tree.NewExpression;
core/src/main/java/org/apache/calcite/adapter/enumerable/ReflectiveCallNotNullImplementor.java,56,final NewExpression target =
linq4j/src/main/java/org/apache/calcite/linq4j/tree/DeterministicCodeOptimizer.java,325,return allMethodsDeterministic((Class) newExpression.type);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,692,final DeclarationStatement declare =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,693,Expressions.declare(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,694,0, "key",
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,695,inputPhysType.selector(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,696,v_,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,698,JavaRowFormat.CUSTOM));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,699,builder2.add(declare);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,700,final ParameterExpression key_ = declare.parameter;
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysType.java,144,Expression selector(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,196,public Expression selector(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,213,return parameter;
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,215,return targetPhysType.record(fieldReferences(parameter, fields));
core/src/main/java/org/apache/calcite/plan/Strong.java,65,case IS_TRUE:
core/src/main/java/org/apache/calcite/plan/Strong.java,66,case IS_NOT_NULL:
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,438,SubqueryType subqueryType,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,441,switch (subqueryType) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3488,public enum SubqueryType {
core/src/main/java/org/apache/calcite/runtime/CalciteResource.java,411,ExInst<SqlValidatorException> onlyScalarSubqueryAllowed();
core/src/main/java/org/apache/calcite/sql/SqlWriter.java,33,enum SubqueryStyle {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,196,List<Token> subqueryList = new ArrayList<Token>();
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,200,subqueryList.add(token);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,203,consumeQuery(iter, subqueryList);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,207,subqueryList.remove(subqueryList.size() - 1);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,216,subqueryList.remove(subqueryList.size() - 1);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,226,outList.add(new Query(subqueryList));
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,233,outList.addAll(subqueryList);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,482,Query foundInSubquery = null;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,514,foundInSubquery = (Query) token;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,584,(query == foundInSubquery) ? hintToken : null);
core/src/main/java/org/apache/calcite/sql/parser/SqlAbstractParserImpl.java,306,ACCEPT_NONQUERY,
core/src/main/java/org/apache/calcite/sql/parser/SqlAbstractParserImpl.java,312,ACCEPT_SUBQUERY,
core/src/main/java/org/apache/calcite/sql/parser/SqlAbstractParserImpl.java,318,ACCEPT_CURSOR
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,155,private SubqueryStyle subqueryStyle;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,202,public void setSubqueryStyle(SubqueryStyle subqueryStyle) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,203,this.subqueryStyle = subqueryStyle;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,268,subqueryStyle = SubqueryStyle.HYDE;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,513,switch (subqueryStyle) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,560,throw Util.unexpected(subqueryStyle);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1930,registerSubqueries(joinScope, join.getCondition());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2152,registerOperandSubqueries(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2185,registerSubqueries(selectScope, select.getGroup());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2186,registerOperandSubqueries(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2190,registerSubqueries(aggScope, select.getSelectList());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2202,registerSubqueries(orderScope, orderList);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2273,registerOperandSubqueries(parentScope, call, i);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2387,registerOperandSubqueries(parentScope, call, 0);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2403,registerSubqueries(parentScope, call);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2421,registerOperandSubqueries(parentScope, call, i);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2529,private void registerSubqueries(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2543,registerOperandSubqueries(parentScope, call, i);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2556,registerSubqueries(parentScope, listNode);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2572,private void registerOperandSubqueries(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2588,registerSubqueries(parentScope, operand);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3518,RESOURCE.onlyScalarSubqueryAllowed());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,216,private SubqueryConverter subqueryConverter;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,293,this.subqueryConverter = new NoOpSubqueryConverter();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,398,public void setSubqueryConverter(SubqueryConverter converter) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,399,subqueryConverter = converter;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1008,findSubqueries(bb, expr, logic, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1106,convertExists(query, RelOptUtil.SubqueryType.IN, subQuery.logic,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1155,converted = convertExists(query, RelOptUtil.SubqueryType.EXISTS,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1172,converted = convertExists(query, RelOptUtil.SubqueryType.SCALAR,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1187,converted = convertExists(subQuery.node, RelOptUtil.SubqueryType.SCALAR,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1194,throw Util.newInternal("unexpected kind of subquery :" + subQuery.node);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1326,subqueryConverter.convertSubquery(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1489,RelOptUtil.SubqueryType subqueryType,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1698,private void findSubqueries(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1702,boolean registerOnlyScalarSubqueries) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1712,if (!registerOnlyScalarSubqueries
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1738,findSubqueries(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1742,kind == SqlKind.IN || registerOnlyScalarSubqueries);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1747,findSubqueries(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1751,kind == SqlKind.IN || registerOnlyScalarSubqueries);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4343,private class NoOpSubqueryConverter implements SubqueryConverter {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4345,public boolean canConvertSubquery() {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4350,public RexNode convertSubquery(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4351,SqlCall subquery,
core/src/main/java/org/apache/calcite/sql2rel/SubqueryConverter.java,26,public interface SubqueryConverter {
core/src/main/java/org/apache/calcite/sql2rel/SubqueryConverter.java,32,boolean canConvertSubquery();
core/src/main/java/org/apache/calcite/sql2rel/SubqueryConverter.java,45,RexNode convertSubquery(
core/src/main/java/org/apache/calcite/sql2rel/SubqueryConverter.java,46,SqlCall subquery,
core/src/main/java/org/apache/calcite/tools/Programs.java,306,return sequence(subquery(metadataProvider),
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,432,implementor.subquery(buf, 0, getChild(), "t");
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2968,TRUE;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,228,if (!variablesSet.isEmpty()) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,250,builder.join(JoinRelType.INNER, builder.literal(true), variablesSet);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,67,Collection<Logic> logicCollection) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,68,node.accept(new LogicVisitor(seek, logicCollection), logic);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,87,logic = logic.negate();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2543,final Correlation correlation =
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2544,new Correlation(var.id,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2545,fieldAccess.getField().getIndex(),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2546,corrIdGenerator++);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2547,mapFieldAccessToCorVar.put(fieldAccess, correlation);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2548,mapRefRelToCorVar.put(rel, correlation);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1029,if (correlate) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1030,filter(condition);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2102,&& Strong.is(filter, leftBitmap)) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2106,&& Strong.is(filter, rightBitmap)) {
core/src/main/java/org/apache/calcite/plan/Strong.java,45,private final ImmutableBitSet nullColumns;
core/src/main/java/org/apache/calcite/plan/Strong.java,47,private Strong(ImmutableBitSet nullColumns) {
core/src/main/java/org/apache/calcite/plan/Strong.java,48,this.nullColumns = nullColumns;
core/src/main/java/org/apache/calcite/plan/Strong.java,51,public static Strong of(ImmutableBitSet nullColumns) {
core/src/main/java/org/apache/calcite/plan/Strong.java,52,return new Strong(nullColumns);
core/src/main/java/org/apache/calcite/plan/Strong.java,57,public static boolean is(RexNode node, ImmutableBitSet nullColumns) {
core/src/main/java/org/apache/calcite/plan/Strong.java,58,return of(nullColumns).strong(node);
core/src/main/java/org/apache/calcite/plan/Strong.java,61,private boolean strong(RexNode node) {
core/src/main/java/org/apache/calcite/plan/Strong.java,74,return anyStrong(((RexCall) node).getOperands());
core/src/main/java/org/apache/calcite/plan/Strong.java,76,return allStrong(((RexCall) node).getOperands());
core/src/main/java/org/apache/calcite/plan/Strong.java,78,return nullColumns.get(((RexInputRef) node).getIndex());
core/src/main/java/org/apache/calcite/plan/Strong.java,84,private boolean allStrong(List<RexNode> operands) {
core/src/main/java/org/apache/calcite/plan/Strong.java,86,if (!strong(operand)) {
core/src/main/java/org/apache/calcite/plan/Strong.java,93,private boolean anyStrong(List<RexNode> operands) {
core/src/main/java/org/apache/calcite/plan/Strong.java,95,if (strong(operand)) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1330,if (!a.getType().isNullable()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1331,switch (kind) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1332,case IS_NULL:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1333,case IS_NOT_NULL:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1336,return rexBuilder.makeLiteral(kind == SqlKind.IS_NOT_NULL);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1337,case IS_TRUE:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1338,case IS_NOT_FALSE:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1342,case IS_FALSE:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1343,case IS_NOT_TRUE:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1366,return call;
core/src/main/java/org/apache/calcite/sql/SqlKind.java,776,FUSION, SINGLE_VALUE);
core/src/main/java/org/apache/calcite/sql/SqlKind.java,800,public static final Set<SqlKind> EXPRESSION =
core/src/main/java/org/apache/calcite/sql/SqlKind.java,801,EnumSet.complementOf(
core/src/main/java/org/apache/calcite/sql/SqlKind.java,802,concat(
core/src/main/java/org/apache/calcite/sql/SqlKind.java,803,EnumSet.of(AS, ARGUMENT_ASSIGNMENT, DEFAULT,
core/src/main/java/org/apache/calcite/sql/SqlKind.java,805,SELECT, JOIN, OTHER_FUNCTION, CAST, TRIM, FLOOR, CEIL,
core/src/main/java/org/apache/calcite/sql/SqlKind.java,806,LITERAL_CHAIN, JDBC_FN, PRECEDING, FOLLOWING, ORDER_BY,
core/src/main/java/org/apache/calcite/sql/SqlKind.java,807,NULLS_FIRST, NULLS_LAST, COLLECTION_TABLE, TABLESAMPLE,
core/src/main/java/org/apache/calcite/sql/SqlKind.java,808,VALUES, WITH, WITH_ITEM),
core/src/main/java/org/apache/calcite/sql/SqlKind.java,809,AGGREGATE));
core/src/main/java/org/apache/calcite/sql/fun/SqlCoalesceFunction.java,45,super(
core/src/main/java/org/apache/calcite/sql/fun/SqlCoalesceFunction.java,47,SqlKind.OTHER_FUNCTION,
core/src/main/java/org/apache/calcite/sql/fun/SqlNullifFunction.java,45,super(
core/src/main/java/org/apache/calcite/sql/fun/SqlNullifFunction.java,47,SqlKind.OTHER_FUNCTION,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModify.java,101,PhysTypeImpl.of(typeFactory, table.getRowType(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModify.java,102,JavaRowFormat.CUSTOM);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,684,SqlParser parser = createParser(query.sql,
core/src/main/java/org/apache/calcite/sql/SqlDataTypeSpec.java,295,String name = typeName.getSimple();
core/src/main/java/org/apache/calcite/sql/SqlDataTypeSpec.java,297,SqlTypeName sqlTypeName = SqlTypeName.get(name);
core/src/main/java/org/apache/calcite/sql/SqlDataTypeSpec.java,328,SqlUtil.translateCharacterSetName(charSetName);
core/src/main/java/org/apache/calcite/sql/SqlDataTypeSpec.java,341,SqlTypeName collectionsSqlTypeName =
core/src/main/java/org/apache/calcite/sql/SqlDataTypeSpec.java,342,SqlTypeName.get(collectionName);
core/src/main/java/org/apache/calcite/sql/SqlDataTypeSpec.java,354,if (nullable != null) {
core/src/main/java/org/apache/calcite/sql/SqlDataTypeSpec.java,355,type = typeFactory.createTypeWithNullability(type, nullable);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,39,import org.apache.calcite.linq4j.tree.Visitor;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,470,private static class TypeFinder extends Visitor {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,478,NewExpression newExpression,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,479,List<Expression> arguments,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,480,List<MemberDeclaration> memberDeclarations) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,482,return super.visit(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,483,newExpression,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,484,arguments,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,485,memberDeclarations);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,489,int dimension, Expression bound, List<Expression> expressions) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,499,return super.visit(newArrayExpression, dimension, bound, expressions);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,30,import org.apache.calcite.linq4j.tree.OptimizeVisitor;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,638,return expression.accept(new OptimizeVisitor());
linq4j/src/main/java/org/apache/calcite/linq4j/tree/AbstractNode.java,67,public Node accept(Visitor visitor) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,35,final List<Statement> statements = new ArrayList<Statement>();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,36,final Set<String> variables = new HashSet<String>();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,41,new HashMap<Expression, DeclarationStatement>();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,46,private static final Visitor OPTIMIZE_VISITOR = new OptimizeVisitor();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,114,new IdentityHashMap<ParameterExpression, Expression>();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,115,final Visitor visitor = new SubstituteVariableVisitor(replacements);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,120,statement = statement.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,306,if (!optimize(createOptimizeVisitor(), true)) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,310,optimize(createFinishingOptimizeVisitor(), false);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,321,private boolean optimize(Visitor optimizer, boolean performInline) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,337,new IdentityHashMap<ParameterExpression, Expression>(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,338,useCounter.map.size());
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,341,final ArrayList<Statement> oldStatements = new ArrayList<Statement>(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,342,statements);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,403,oldStatement = OptimizeVisitor.EMPTY_STATEMENT;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,406,if (oldStatement != OptimizeVisitor.EMPTY_STATEMENT) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,423,if (oldStatement != OptimizeVisitor.EMPTY_STATEMENT) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,438,protected Visitor createOptimizeVisitor() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,439,return OPTIMIZE_VISITOR;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,448,protected Visitor createFinishingOptimizeVisitor() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,487,private static class SubstituteVariableVisitor extends Visitor {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,490,new IdentityHashMap<ParameterExpression, Boolean>();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,547,private static class UseCounter extends Visitor {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,548,private final Map<ParameterExpression, Slot> map =
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,549,new IdentityHashMap<ParameterExpression, Slot>();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockStatement.java,57,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockStatement.java,59,visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockStatement.java,60,return visitor.visit(this, newStatements);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclaration.java,61,public ClassDeclaration accept(Visitor visitor) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclaration.java,62,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclaration.java,64,Expressions.acceptMemberDeclarations(memberDeclarations, visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclaration.java,65,return visitor.visit(this, members1);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,32,public class ClassDeclarationFinder extends Visitor {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConditionalExpression.java,35,private final List<Node> expressionList;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConditionalStatement.java,43,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConditionalStatement.java,44,List<Node> list = Expressions.acceptNodes(expressionList, visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConditionalStatement.java,45,return visitor.visit(this, list);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,51,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,53,final BlockStatement body = this.body.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,54,return visitor.visit(this, body);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/DeclarationStatement.java,39,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/DeclarationStatement.java,44,return visitor.visit(this, initializer);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expression.java,44,public abstract Expression accept(Visitor visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3093,static <T extends Expression> Expression accept(T node, Visitor visitor) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3097,return node.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3100,static <T extends Statement> Statement accept(T node, Visitor visitor) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3104,return node.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3108,Visitor visitor) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3114,Statement newStatement = statement.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3128,static List<Node> acceptNodes(List<Node> nodes, Visitor visitor) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3134,statements1.add(node.accept(visitor));
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3140,List<ParameterExpression> parameterExpressions, Visitor visitor) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3146,parameterExpressions1.add(parameterExpression.accept(visitor));
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3152,List<DeclarationStatement> declarations, Visitor visitor) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3159,declarations1.add(declaration.accept(visitor));
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3165,List<MemberDeclaration> memberDeclarations, Visitor visitor) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3172,memberDeclarations1.add(memberDeclaration.accept(visitor));
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3178,Visitor visitor) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3182,final List<Expression> expressions1 = new ArrayList<Expression>();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3184,expressions1.add(expression.accept(visitor));
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FieldDeclaration.java,38,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FieldDeclaration.java,41,this.initializer == null ? null : this.initializer.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FieldDeclaration.java,42,return visitor.visit(this, initializer);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ForStatement.java,48,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ForStatement.java,50,Expressions.acceptDeclarations(declarations, visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ForStatement.java,52,condition == null ? null : condition.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ForStatement.java,53,final Expression post1 = post == null ? null : post.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ForStatement.java,54,final Statement body1 = body.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ForStatement.java,55,return visitor.visit(this, decls1, condition1, post1, body1);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,71,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,72,BlockStatement body = this.body.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,73,return visitor.visit(this, body);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/GotoStatement.java,56,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/GotoStatement.java,58,expression == null ? null : expression.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/GotoStatement.java,59,return visitor.visit(this, expression1);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/IndexExpression.java,38,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/IndexExpression.java,39,Expression array = this.array.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/IndexExpression.java,41,this.indexExpressions, visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/IndexExpression.java,42,return visitor.visit(this, array, indexExpressions);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MemberDeclaration.java,23,public abstract MemberDeclaration accept(Visitor visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MemberExpression.java,43,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MemberExpression.java,46,: expression.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MemberExpression.java,47,return visitor.visit(this, expression1);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodCallExpression.java,56,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodCallExpression.java,58,visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodCallExpression.java,60,this.expressions, visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodCallExpression.java,61,return visitor.visit(this, targetExpression, expressions);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodDeclaration.java,50,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodDeclaration.java,52,final BlockStatement body = this.body.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodDeclaration.java,53,return visitor.visit(this, body);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/NewArrayExpression.java,44,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/NewArrayExpression.java,48,: Expressions.acceptExpressions(this.expressions, visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/NewArrayExpression.java,49,Expression bound = Expressions.accept(this.bound, visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/NewArrayExpression.java,50,return visitor.visit(this, dimension, bound, expressions);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/NewExpression.java,46,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/NewExpression.java,48,this.arguments, visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/NewExpression.java,50,Expressions.acceptMemberDeclarations(this.memberDeclarations, visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/NewExpression.java,51,return visitor.visit(this, arguments, memberDeclarations);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Node.java,23,Node accept(Visitor visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/OptimizeVisitor.java,39,public class OptimizeVisitor extends Visitor {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/OptimizeVisitor.java,50,private static final Set<Method> KNOWN_NON_NULL_METHODS =
linq4j/src/main/java/org/apache/calcite/linq4j/tree/OptimizeVisitor.java,51,new HashSet<Method>();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/OptimizeVisitor.java,65,private static final Map<ExpressionType, ExpressionType>
linq4j/src/main/java/org/apache/calcite/linq4j/tree/OptimizeVisitor.java,66,NOT_BINARY_COMPLEMENT =
linq4j/src/main/java/org/apache/calcite/linq4j/tree/OptimizeVisitor.java,67,new EnumMap<ExpressionType, ExpressionType>(ExpressionType.class);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/OptimizeVisitor.java,328,List<Node> newList = new ArrayList<Node>(list.size());
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TernaryExpression.java,41,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TernaryExpression.java,42,Expression expression0 = this.expression0.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TernaryExpression.java,43,Expression expression1 = this.expression1.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TernaryExpression.java,44,Expression expression2 = this.expression2.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TernaryExpression.java,45,return visitor.visit(this, expression0, expression1, expression2);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ThrowStatement.java,31,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ThrowStatement.java,32,Expression expression = this.expression.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ThrowStatement.java,33,return visitor.visit(this, expression);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TypeBinaryExpression.java,37,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TypeBinaryExpression.java,38,Expression expression = this.expression.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TypeBinaryExpression.java,39,return visitor.visit(this, expression);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/UnaryExpression.java,34,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/UnaryExpression.java,35,Expression expression = this.expression.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/UnaryExpression.java,36,return visitor.visit(this, expression);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,19,import java.util.List;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,20,import java.util.Objects;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,25,public class Visitor {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,26,public Visitor preVisit(WhileStatement whileStatement) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,27,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,30,public Statement visit(WhileStatement whileStatement, Expression condition,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,31,Statement body) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,32,return condition == whileStatement.condition
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,33,&& body == whileStatement.body
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,34,? whileStatement
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,35,: Expressions.while_(condition, body);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,38,public Visitor preVisit(ConditionalStatement conditionalStatement) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,39,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,42,public Statement visit(ConditionalStatement conditionalStatement,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,43,List<Node> list) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,45,? conditionalStatement
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,46,: Expressions.ifThenElse(list);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,49,public Visitor preVisit(BlockStatement blockStatement) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,50,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,53,public BlockStatement visit(BlockStatement blockStatement,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,54,List<Statement> statements) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,56,? blockStatement
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,57,: Expressions.block(statements);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,60,public Visitor preVisit(GotoStatement gotoStatement) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,61,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,64,public Statement visit(GotoStatement gotoStatement, Expression expression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,65,return expression == gotoStatement.expression
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,66,? gotoStatement
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,67,: Expressions.makeGoto(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,68,gotoStatement.kind, gotoStatement.labelTarget,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,69,expression);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,72,public LabelStatement visit(LabelStatement labelStatement) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,73,return labelStatement;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,76,public Visitor preVisit(ForStatement forStatement) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,77,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,80,public ForStatement visit(ForStatement forStatement,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,81,List<DeclarationStatement> declarations, Expression condition,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,82,Expression post, Statement body) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,84,&& condition == forStatement.condition
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,85,&& post == forStatement.post
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,86,&& body == forStatement.body
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,87,? forStatement
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,88,: Expressions.for_(declarations, condition, post, body);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,91,public Visitor preVisit(ThrowStatement throwStatement) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,92,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,95,public Statement visit(ThrowStatement throwStatement, Expression expression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,96,return expression == throwStatement.expression
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,97,? throwStatement
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,98,: Expressions.throw_(expression);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,101,public Visitor preVisit(DeclarationStatement declarationStatement) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,102,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,105,public DeclarationStatement visit(DeclarationStatement declarationStatement,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,106,Expression initializer) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,107,return declarationStatement.initializer == initializer
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,108,? declarationStatement
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,109,: Expressions.declare(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,110,declarationStatement.modifiers, declarationStatement.parameter,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,111,initializer);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,114,public Expression visit(LambdaExpression lambdaExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,115,return lambdaExpression;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,118,public Visitor preVisit(FunctionExpression functionExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,119,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,122,public Expression visit(FunctionExpression functionExpression,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,123,BlockStatement body) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,125,? functionExpression
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,126,: Expressions.lambda(body, functionExpression.parameterList);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,129,public Visitor preVisit(BinaryExpression binaryExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,130,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,133,public Expression visit(BinaryExpression binaryExpression,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,134,Expression expression0, Expression expression1) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,135,return binaryExpression.expression0 == expression0
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,136,&& binaryExpression.expression1 == expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,137,? binaryExpression
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,138,: Expressions.makeBinary(binaryExpression.nodeType, expression0,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,139,expression1);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,142,public Visitor preVisit(TernaryExpression ternaryExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,143,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,146,public Expression visit(TernaryExpression ternaryExpression,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,147,Expression expression0, Expression expression1, Expression expression2) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,148,return ternaryExpression.expression0 == expression0
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,149,&& ternaryExpression.expression1 == expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,150,&& ternaryExpression.expression2 == expression2
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,151,? ternaryExpression
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,152,: Expressions.makeTernary(ternaryExpression.nodeType, expression0,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,153,expression1, expression2);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,156,public Visitor preVisit(IndexExpression indexExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,157,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,160,public Expression visit(IndexExpression indexExpression, Expression array,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,161,List<Expression> indexExpressions) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,162,return indexExpression.array == array
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,164,? indexExpression
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,165,: new IndexExpression(array, indexExpressions);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,168,public Visitor preVisit(UnaryExpression unaryExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,169,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,172,public Expression visit(UnaryExpression unaryExpression,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,173,Expression expression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,174,return unaryExpression.expression == expression
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,175,? unaryExpression
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,176,: Expressions.makeUnary(unaryExpression.nodeType, expression,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,177,unaryExpression.type, null);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,180,public Visitor preVisit(MethodCallExpression methodCallExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,181,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,184,public Expression visit(MethodCallExpression methodCallExpression,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,185,Expression targetExpression, List<Expression> expressions) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,186,return methodCallExpression.targetExpression == targetExpression
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,188,? methodCallExpression
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,189,: Expressions.call(targetExpression, methodCallExpression.method,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,190,expressions);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,193,public Expression visit(DefaultExpression defaultExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,194,return defaultExpression;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,197,public Expression visit(DynamicExpression dynamicExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,198,return dynamicExpression;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,201,public Visitor preVisit(MemberExpression memberExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,202,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,205,public Expression visit(MemberExpression memberExpression,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,206,Expression expression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,207,return memberExpression.expression == expression
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,208,? memberExpression
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,209,: Expressions.field(expression, memberExpression.field);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,212,public Expression visit(InvocationExpression invocationExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,213,return invocationExpression;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,216,static <T> boolean eq(T t0, T t1) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,217,return t0 == t1 || t0 != null && t1 != null && t0.equals(t1);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,220,public Visitor preVisit(NewArrayExpression newArrayExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,221,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,224,public Expression visit(NewArrayExpression newArrayExpression, int dimension,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,225,Expression bound, List<Expression> expressions) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,228,? newArrayExpression
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,229,: expressions == null
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,230,? Expressions.newArrayBounds(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,232,: Expressions.newArrayInit(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,233,Types.getComponentTypeN(newArrayExpression.type),
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,234,dimension, expressions);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,237,public Expression visit(ListInitExpression listInitExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,238,return listInitExpression;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,241,public Visitor preVisit(NewExpression newExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,242,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,245,public Expression visit(NewExpression newExpression,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,246,List<Expression> arguments, List<MemberDeclaration> memberDeclarations) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,249,? newExpression
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,250,: Expressions.new_(newExpression.type, arguments, memberDeclarations);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,253,public Statement visit(SwitchStatement switchStatement) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,254,return switchStatement;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,257,public Statement visit(TryStatement tryStatement) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,258,return tryStatement;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,261,public Expression visit(MemberInitExpression memberInitExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,262,return memberInitExpression;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,265,public Visitor preVisit(TypeBinaryExpression typeBinaryExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,266,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,269,public Expression visit(TypeBinaryExpression typeBinaryExpression,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,270,Expression expression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,271,return typeBinaryExpression.expression == expression
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,272,? typeBinaryExpression
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,273,: new TypeBinaryExpression(expression.getNodeType(), expression,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,274,expression.type);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,277,public Visitor preVisit(MethodDeclaration methodDeclaration) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,278,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,281,public MemberDeclaration visit(MethodDeclaration methodDeclaration,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,282,BlockStatement body) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,284,? methodDeclaration
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,285,: Expressions.methodDecl(methodDeclaration.modifier,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,286,methodDeclaration.resultType, methodDeclaration.name,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,287,methodDeclaration.parameters, body);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,290,public Visitor preVisit(FieldDeclaration fieldDeclaration) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,291,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,294,public MemberDeclaration visit(FieldDeclaration fieldDeclaration,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,295,Expression initializer) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,297,? fieldDeclaration
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,298,: Expressions.fieldDecl(fieldDeclaration.modifier,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,299,fieldDeclaration.parameter, initializer);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,302,public Expression visit(ParameterExpression parameterExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,303,return parameterExpression;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,306,public ConstantExpression visit(ConstantExpression constantExpression) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,307,return constantExpression;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,310,public Visitor preVisit(ClassDeclaration classDeclaration) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,311,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,314,public ClassDeclaration visit(ClassDeclaration classDeclaration,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,315,List<MemberDeclaration> memberDeclarations) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,316,return Objects.equals(memberDeclarations,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,318,? classDeclaration
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,319,: Expressions.classDecl(classDeclaration.modifier,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,320,classDeclaration.name, classDeclaration.extended,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,321,classDeclaration.implemented, memberDeclarations);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,324,public Visitor preVisit(ConstructorDeclaration constructorDeclaration) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,325,return this;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,328,public MemberDeclaration visit(ConstructorDeclaration constructorDeclaration,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,329,BlockStatement body) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,331,? constructorDeclaration
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,332,: Expressions.constructorDecl(constructorDeclaration.modifier,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,333,constructorDeclaration.resultType,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,334,constructorDeclaration.parameters,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Visitor.java,335,body);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/WhileStatement.java,35,visitor = visitor.preVisit(this);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/WhileStatement.java,36,final Expression condition1 = condition.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/WhileStatement.java,37,final Statement body1 = body.accept(visitor);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/WhileStatement.java,38,return visitor.visit(this, condition1, body1);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModify.java,45,Operation operation, List<String> updateColumnList, boolean flattened) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModify.java,47,updateColumnList, flattened);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,749,updateColumnList, flattened);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,767,isFlattened());
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,69,implements TranslatableTable, ScannableTable {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,300,return result.asQuery().toSqlString(dialect).getSql();
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,34,import java.util.Collections;
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,80,RelTraitSet traits,
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,83,RelNode child,
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,87,super(cluster, traits, child);
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,137,public RelDataType deriveRowType() {
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,143,public RelDataType getExpectedInputRowType(int ordinalInParent) {
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,150,if (isUpdate()) {
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,152,getCluster().getTypeFactory().createJoinType(
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,153,table.getRowType(),
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,154,getCatalogReader().createTypeFromProjection(
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,155,table.getRowType(),
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,159,getCluster().getTypeFactory().createJoinType(
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,160,getCluster().getTypeFactory().createJoinType(
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,161,table.getRowType(),
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,162,table.getRowType()),
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,163,getCatalogReader().createTypeFromProjection(
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,164,table.getRowType(),
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,167,inputRowType = table.getRowType();
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,173,getCluster().getTypeFactory(),
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,181,public RelWriter explainTerms(RelWriter pw) {
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,185,.item(
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,188,? Collections.EMPTY_LIST
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableModify.java,43,Operation operation, List<String> updateColumnList, boolean flattened) {
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableModify.java,45,flattened);
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableModify.java,65,Operation operation, List<String> updateColumnList, boolean flattened) {
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableModify.java,69,operation, updateColumnList, flattened);
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableModify.java,78,sole(inputs), getOperation(), getUpdateColumnList(), isFlattened());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,52,import org.apache.calcite.util.Pair;
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,230,final List<String> fields = e.getRowType().getFieldNames();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,234,final List<SqlSelect> selects = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,236,final List<SqlNode> selectList = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,237,for (Pair<RexLiteral, String> literal : Pair.zip(tuple, fields)) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,238,selectList.add(
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,239,SqlStdOperatorTable.AS.createCall(
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,240,POS,
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,241,context.toSql(null, literal.left),
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,242,new SqlIdentifier(literal.right, POS)));
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,244,selects.add(
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,245,new SqlSelect(POS, SqlNodeList.EMPTY,
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,246,new SqlNodeList(selectList, POS), null, null, null,
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,247,null, null, null, null, null));
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,249,SqlNode query = null;
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,250,for (SqlSelect select : selects) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,251,if (query == null) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,252,query = select;
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,254,query = SqlStdOperatorTable.UNION_ALL.createCall(POS, query,
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,255,select);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,287,public Result visit(TableModify e) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,288,throw new AssertionError("not implemented: " + e);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,410,&& (((SqlCall) node).getOperator() instanceof SqlSetOperator
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,833,public SqlNode asQuery() {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,834,if (node instanceof SqlCall
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,835,&& ((SqlCall) node).getOperator() instanceof SqlSetOperator) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,838,return asSelect();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,144,final ResultSet resultSet = statement.executeQuery(sql);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,145,statement = null;
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,146,connection = null;
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,147,return new ResultSetEnumerator<T>(resultSet, rowBuilderFactory);
core/src/main/java/org/apache/calcite/sql/SqlInsert.java,142,source.unparse(writer, opLeft, opRight);
core/src/main/java/org/apache/calcite/sql/SqlValuesOperator.java,36,final SqlWriter.Frame frame = writer.startList("VALUES", "");
core/src/main/java/org/apache/calcite/sql/fun/SqlRowOperator.java,43,public SqlRowOperator() {
core/src/main/java/org/apache/calcite/sql/fun/SqlRowOperator.java,44,super(
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,893,public static final SqlRowOperator ROW = new SqlRowOperator();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2956,false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2971,LogicalTableModify.Operation.INSERT, null, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3162,LogicalTableModify.Operation.DELETE, null, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3179,LogicalTableModify.Operation.UPDATE, targetColumnNameList, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3256,LogicalTableModify.Operation.MERGE, targetColumnNameList, false);
spark/src/main/java/org/apache/calcite/adapter/spark/JdbcToSparkConverter.java,117,return result.asQuery().toSqlString(dialect).getSql();
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,185,throws IOException {
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,186,CSVReader csvr = new CSVReader(new InputStreamReader(in));
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,187,try {
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,188,String [] header = csvr.readNext();
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,196,while ((line = csvr.readNext()) != null) {
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,208,HttpUtils.close(csvr); // CSVReader closes the input stream too
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,143,return mq.areColumnsUnique(rel.getLeft(), columns, ignoreNulls);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,214,ImmutableBitSet.Builder leftBuilder = ImmutableBitSet.builder();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,215,ImmutableBitSet.Builder rightBuilder = ImmutableBitSet.builder();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,216,int nLeftColumns = left.getRowType().getFieldCount();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,217,for (int bit : columns) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,218,if (bit < nLeftColumns) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,219,leftBuilder.set(bit);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,221,rightBuilder.set(bit - nLeftColumns);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,228,final ImmutableBitSet leftColumns = leftBuilder.build();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,230,final ImmutableBitSet rightColumns = rightBuilder.build();
core/src/main/java/org/apache/calcite/prepare/Prepare.java,123,protected RelRoot optimize(final RelRoot root,
core/src/main/java/org/apache/calcite/prepare/Prepare.java,128,planner.setRoot(root.rel);
core/src/main/java/org/apache/calcite/rel/RelRoot.java,143,if (isRefTrivial()) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1188,SaffronProperties.instance().allowInfiniteCostConverters.get();
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,339,SaffronProperties.instance().defaultCharset.get());
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,105,SaffronProperties.instance().defaultCollation.get(),
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,72,return SaffronProperties.instance().defaultNationalCharset.get();
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,476,SaffronProperties.instance().defaultCollationStrength.get();
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,19,import org.eigenbase.util.property.BooleanProperty;
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,20,import org.eigenbase.util.property.StringProperty;
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,50,public class SaffronProperties extends Properties {
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,56,private static SaffronProperties properties;
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,66,public final BooleanProperty allowInfiniteCostConverters =
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,67,new BooleanProperty(
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,68,this,
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,70,true);
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,77,public final StringProperty defaultCharset =
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,78,new StringProperty(this, "saffron.default.charset", "ISO-8859-1");
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,87,public final StringProperty defaultNationalCharset =
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,88,new StringProperty(
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,89,this,
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,99,public final StringProperty defaultCollation =
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,100,new StringProperty(
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,101,this,
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,111,public final StringProperty defaultCollationStrength =
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,112,new StringProperty(
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,113,this,
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,124,private SaffronProperties() {
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,132,public static SaffronProperties instance() {
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,133,if (properties == null) {
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,134,properties = new SaffronProperties();
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,151,properties.loadSaffronProperties(System.getProperties());
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,153,return properties;
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,163,public void loadSaffronProperties(Properties source) {
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,164,for (Enumeration keys = source.keys(); keys.hasMoreElements();) {
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,165,String key = (String) keys.nextElement();
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,166,String value = source.getProperty(key);
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,168,|| key.startsWith("net.sf.saffron.")) {
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,169,properties.setProperty(key, value);
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,179,public boolean getBooleanProperty(String key) {
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,180,return getBooleanProperty(key, false);
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,189,public boolean getBooleanProperty(
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,190,String key,
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,191,boolean defaultValue) {
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,192,String value = getProperty(key);
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,193,if (value == null) {
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,194,return defaultValue;
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,197,|| value.equalsIgnoreCase("yes");
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,204,public int getIntProperty(String key) {
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,205,String value = getProperty(key);
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,206,if (value == null) {
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,207,return -1;
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,209,int i = Integer.valueOf(value).intValue();
core/src/main/java/org/apache/calcite/util/SaffronProperties.java,210,return i;
core/src/main/java/org/apache/calcite/util/Util.java,766,return Charset.forName(SaffronProperties.instance().defaultCharset.get());
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,62,RelOptPlanner planner) {
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,64,schema,
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,65,EnumerableRel.Prefer.ANY, planner, BindableConvention.INSTANCE);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,301,context.getRootSchema(), null, planner, resultConvention);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,677,context.getRootSchema(), prefer, planner, resultConvention);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,931,new CalciteMaterializer(this, context, catalogReader, schema, planner);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,994,Convention resultConvention) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,796,boolean alreadySorted = false;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersect.java,60,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersect.java,61,intersectExp,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersect.java,62,all
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersect.java,63,? BuiltInMethod.CONCAT.method
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersect.java,64,: BuiltInMethod.INTERSECT.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersect.java,65,childExp);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMinus.java,60,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMinus.java,61,minusExp,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMinus.java,63,childExp);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnion.java,58,unionExp =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnion.java,59,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnion.java,60,unionExp,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnion.java,61,all
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnion.java,62,? BuiltInMethod.CONCAT.method
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnion.java,63,: BuiltInMethod.UNION.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnion.java,64,childExp);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,436,public static Pair<RelNode, Boolean> createExistsPlan(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,440,boolean needsOuterJoin) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,443,return Pair.of(seekRel, false);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,444,default:
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,445,RelNode ret = seekRel;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,446,final RelOptCluster cluster = seekRel.getCluster();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,447,final RexBuilder rexBuilder = cluster.getRexBuilder();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,448,final RelDataTypeFactory typeFactory = rexBuilder.getTypeFactory();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,450,final int keyCount = ret.getRowType().getFieldCount();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,451,if (!needsOuterJoin) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,452,return Pair.<RelNode, Boolean>of(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,453,LogicalAggregate.create(ret, false,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,454,ImmutableBitSet.range(keyCount), null,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,455,ImmutableList.<AggregateCall>of()),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,456,false);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,460,final List<RexNode> exprs = new ArrayList<>();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,461,if (subqueryType == SubqueryType.IN) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,462,for (int i = 0; i < keyCount; i++) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,463,exprs.add(rexBuilder.makeInputRef(ret, i));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,467,final int projectedKeyCount = exprs.size();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,468,exprs.add(rexBuilder.makeLiteral(true));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,470,ret = createProject(ret, exprs, null);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,472,final AggregateCall aggCall =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,473,AggregateCall.create(SqlStdOperatorTable.MIN,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,474,false,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,475,ImmutableList.of(projectedKeyCount),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,476,-1,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,477,projectedKeyCount,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,478,ret,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,479,null,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,480,null);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,482,ret = LogicalAggregate.create(ret, false,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,483,ImmutableBitSet.range(projectedKeyCount), null,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,484,ImmutableList.of(aggCall));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,486,switch (logic) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,487,case TRUE_FALSE_UNKNOWN:
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,488,case UNKNOWN_AS_TRUE:
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,489,return Pair.of(ret, true);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,490,default:
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,491,return Pair.of(ret, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1024,final Pair<RelNode, Boolean> converted;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1099,final boolean outerJoin = bb.subqueryNeedsOuterJoin
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1101,|| subQuery.logic == RelOptUtil.Logic.TRUE_FALSE_UNKNOWN;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1107,outerJoin, targetRowType);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1108,if (converted.right) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1114,final RelNode seek = converted.left.getInput(0); // fragile
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1129,RexNode rex =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1130,bb.register(converted.left,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1131,outerJoin ? JoinRelType.LEFT : JoinRelType.INNER, leftKeys);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1133,subQuery.expr = translateIn(subQuery, bb.root, rex);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1157,assert !converted.right;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1158,if (convertNonCorrelatedSubQuery(subQuery, bb, converted.left, true)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1161,subQuery.expr = bb.register(converted.left, JoinRelType.LEFT);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1174,assert !converted.right;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1175,if (convertNonCorrelatedSubQuery(subQuery, bb, converted.left, false)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1178,rel = convertToSingleValueSubq(query, converted.left);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1189,assert !converted.right;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1190,subQuery.expr = bb.register(converted.left, JoinRelType.LEFT);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1198,private RexNode translateIn(SubQuery subQuery, RelNode root,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1200,switch (subQuery.logic) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1248,final RelDataType nullableBooleanType =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1249,typeFactory.createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1250,typeFactory.createSqlType(SqlTypeName.BOOLEAN), true);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1280,return rexBuilder.makeCall(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1281,nullableBooleanType,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1282,SqlStdOperatorTable.CASE,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1283,args.build());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1286,throw new AssertionError(subQuery.logic);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1487,private Pair<RelNode, Boolean> convertExists(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1491,boolean needsOuterJoin,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1500,return RelOptUtil.createExistsPlan(seekRel, subqueryType, logic,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1501,needsOuterJoin);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1727,if (kind == SqlKind.OR
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1728,|| kind == SqlKind.NOT) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1732,bb.subqueryNeedsOuterJoin = true;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1760,if (logic == RelOptUtil.Logic.TRUE_FALSE_UNKNOWN
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1761,&& !validator.getValidatedNodeType(node).isNullable()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1762,logic = RelOptUtil.Logic.UNKNOWN_AS_FALSE;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1765,if (logic == RelOptUtil.Logic.UNKNOWN_AS_FALSE
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1766,&& !bb.subqueryNeedsOuterJoin) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3670,private boolean subqueryNeedsOuterJoin;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3713,subqueryNeedsOuterJoin = false;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4104,assert subQuery != null;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4105,rex = subQuery.expr;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4106,assert rex != null : "rex != null";
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4107,return rex;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,94,RexCall firstCond = (RexCall) first;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,95,RexCall secondCond = (RexCall) second;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,119,List<RexNode> firstDnfs = RelOptUtil.disjunctions(firstDnf);
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,120,List<RexNode> secondDnfs = RelOptUtil.disjunctions(secondDnf);
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,122,for (RexNode f : firstDnfs) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,123,if (!f.isAlwaysFalse()) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,126,boolean implyOneConjunction = false;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,127,for (RexNode s : secondDnfs) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,128,if (s.isAlwaysFalse()) { // f cannot imply s
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,129,continue;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,132,if (impliesConjunction(f, s)) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,135,implyOneConjunction = true;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,136,break;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,142,if (!implyOneConjunction) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,144,return false;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,158,RexUtil.apply(firstUsageFinder, new ArrayList<RexNode>(), first);
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,159,RexUtil.apply(secondUsageFinder, new ArrayList<RexNode>(), second);
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,186,for (List usageList : usages) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,382,public final Map<RexInputRef, InputRefUsage<SqlOperator, RexNode>>
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,383,usageMap = new HashMap<>();
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,385,public InputUsageFinder() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,190,ImmutableBitSet rCols = RelOptUtil.InputFinder.bits(r);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,191,if (columnsMapped.contains(rCols)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,192,r = r.accept(new RexPermuteInputsShuttle(m, input));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,193,projectPullUpPredicates.add(r);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,243,ValuesReduceRule.PROJECT_INSTANCE);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,218,SqlNode node = call.operand(ordinal);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,219,return SqlLiteral.value(node);
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,287,public static Comparable value(SqlNode node) {
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,329,throw Util.newInternal("invalid literal: " + node);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,71,operand(LogicalValues.class, none())),
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,87,operand(LogicalValues.class, none())),
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,104,operand(LogicalValues.class, none()))),
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,147,List<RexNode> reducibleExps = new ArrayList<RexNode>();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,916,public Void visitInputRef(RexInputRef inputRef) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,924,public Void visitLiteral(RexLiteral literal) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,929,public Void visitOver(RexOver over) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,935,public Void visitCorrelVariable(RexCorrelVariable correlVariable) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,939,public Void visitCall(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1045,public Void visitDynamicParam(RexDynamicParam dynamicParam) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1049,public Void visitRangeRef(RexRangeRef rangeRef) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1053,public Void visitFieldAccess(RexFieldAccess fieldAccess) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,62,public class Interpreter extends AbstractEnumerable<Object[]> {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,121,private void close() {
core/src/main/java/org/apache/calcite/interpreter/Source.java,24,public interface Source {
core/src/main/java/org/apache/calcite/runtime/Hook.java,68,new CopyOnWriteArrayList<Function<Object, Object>>();
core/src/main/java/org/apache/calcite/runtime/Hook.java,73,return new ArrayList<Function<Object, Object>>();
core/src/main/java/org/apache/calcite/runtime/Hook.java,138,public interface Closeable /*extends AutoCloseable*/ {
core/src/main/java/org/apache/calcite/runtime/Hook.java,145,void close(); // override, removing "throws"
core/src/main/java/org/apache/calcite/tools/Planner.java,38,public interface Planner {
core/src/main/java/org/apache/calcite/config/CalciteConnectionProperty.java,45,true),
core/src/main/java/org/apache/calcite/config/CalciteConnectionProperty.java,55,QUOTING("quoting", Type.ENUM, null, false),
core/src/main/java/org/apache/calcite/config/CalciteConnectionProperty.java,59,QUOTED_CASING("quotedCasing", Type.ENUM, null, false),
core/src/main/java/org/apache/calcite/config/CalciteConnectionProperty.java,63,UNQUOTED_CASING("unquotedCasing", Type.ENUM, null, false),
core/src/main/java/org/apache/calcite/config/CalciteConnectionProperty.java,114,assert defaultValue == null || type.valid(defaultValue);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,173,columns.add(columnMetaData(name, index, field.getType()));
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,458,DatabaseMetaData.typeNullable,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,462,DatabaseMetaData.typeSearchable,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,466,sqlTypeName.getMinScale(),
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,467,typeSystem.getMaxScale(sqlTypeName),
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,66,new RelOptPredicateList(EMPTY_LIST, EMPTY_LIST, EMPTY_LIST);
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,80,private RelOptPredicateList(Iterable<RexNode> pulledUpPredicates,
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,81,Iterable<RexNode> leftInferredPredicates,
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,82,Iterable<RexNode> rightInferredPredicates) {
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,83,this.pulledUpPredicates = ImmutableList.copyOf(pulledUpPredicates);
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,84,this.leftInferredPredicates = ImmutableList.copyOf(leftInferredPredicates);
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,86,ImmutableList.copyOf(rightInferredPredicates);
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,97,public static RelOptPredicateList of(Iterable<RexNode> pulledUpPredicates) {
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,103,return new RelOptPredicateList(pulledUpPredicatesList, EMPTY_LIST,
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,104,EMPTY_LIST);
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,116,public static RelOptPredicateList of(Iterable<RexNode> pulledUpPredicates,
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,131,leftInferredPredicateList, rightInferredPredicatesList);
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,134,public RelOptPredicateList union(RelOptPredicateList list) {
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,135,return RelOptPredicateList.of(
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,153,public RelOptPredicateList shift(int offset) {
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,154,return RelOptPredicateList.of(RexUtil.shift(pulledUpPredicates, offset),
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,213,return RelOptPredicateList.of(projectPullUpPredicates);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,224,.union(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,225,RelOptPredicateList.of(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,298,return RelOptPredicateList.of(aggPullUpPredicates);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,353,list = list == null ? list2 : list.union(list2);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,547,return RelOptPredicateList.of(pulledUpPredicates,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,550,return RelOptPredicateList.of(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,554,return RelOptPredicateList.of(
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,39,import com.google.common.collect.ImmutableMap;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,118,final ImmutableMap<RexNode, RexNode> constants =
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,119,ReduceExpressionsRule.predicateConstants(RexNode.class, rexBuilder,
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,120,predicates);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,125,if (constants.containsKey(ref)) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,126,map.put(key, constants.get(ref));
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,69,import java.util.HashMap;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,70,import java.util.HashSet;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,73,import java.util.Set;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,295,leftPredicates.union(rightPredicates.shift(fieldCount));
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,448,findReducibleExps(rel.getCluster().getTypeFactory(), expList, constants,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,449,constExps, addCasts, removableCasts);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,478,if (!constants.isEmpty()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,482,Lists.newArrayList(constants.entrySet());
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,581,final Map<RexNode, C> map = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,582,final Set<RexNode> excludeSet = new HashSet<>();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,583,for (RexNode predicate : predicates.pulledUpPredicates) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,584,gatherConstraints(clazz, predicate, map, excludeSet, rexBuilder);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,586,final ImmutableMap.Builder<RexNode, C> builder =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,587,ImmutableMap.builder();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,588,for (Map.Entry<RexNode, C> entry : map.entrySet()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,589,RexNode rexNode = entry.getKey();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,590,if (!overlap(rexNode, excludeSet)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,591,builder.put(rexNode, entry.getValue());
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,594,return builder.build();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,597,private static boolean overlap(RexNode rexNode, Set<RexNode> set) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,598,if (rexNode instanceof RexCall) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,599,for (RexNode r : ((RexCall) rexNode).getOperands()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,600,if (overlap(r, set)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,601,return true;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,604,return false;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,606,return set.contains(rexNode);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,612,private static void decompose(Set<RexNode> set, RexNode rexNode) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,613,if (rexNode instanceof RexCall) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,614,for (RexNode r : ((RexCall) rexNode).getOperands()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,615,decompose(set, r);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,618,set.add(rexNode);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,622,private static <C extends RexNode> void gatherConstraints(Class<C> clazz,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,623,RexNode predicate, Map<RexNode, C> map, Set<RexNode> excludeSet,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,624,RexBuilder rexBuilder) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,626,decompose(excludeSet, predicate);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,627,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,629,final List<RexNode> operands = ((RexCall) predicate).getOperands();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,631,decompose(excludeSet, predicate);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,632,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,639,gatherConstraint(clazz, left, right, map, excludeSet, rexBuilder);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,640,gatherConstraint(clazz, right, left, map, excludeSet, rexBuilder);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,643,private static <C extends RexNode> void gatherConstraint(Class<C> clazz,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,644,RexNode left, RexNode right, Map<RexNode, C> map, Set<RexNode> excludeSet,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,645,RexBuilder rexBuilder) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,646,if (!clazz.isInstance(right)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,647,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,649,if (!RexUtil.isConstant(right)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,650,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,652,C constant = clazz.cast(right);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,653,if (excludeSet.contains(left)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,654,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,656,final C existedValue = map.get(left);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,657,if (existedValue == null) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,658,switch (left.getKind()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,659,case CAST:
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,662,final RexNode operand = ((RexCall) left).getOperands().get(0);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,663,if (canAssignFrom(left.getType(), operand.getType())) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,664,final RexNode castRight =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,665,rexBuilder.makeCast(operand.getType(), constant);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,666,if (castRight instanceof RexLiteral) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,667,left = operand;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,668,constant = clazz.cast(castRight);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,672,map.put(left, constant);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,674,if (existedValue instanceof RexLiteral
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,675,&& constant instanceof RexLiteral
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,677,.equals(((RexLiteral) constant).getValue())) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,679,map.remove(left);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,680,excludeSet.add(left);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,695,private static boolean canAssignFrom(RelDataType type1, RelDataType type2) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,696,final SqlTypeName name1 = type1.getSqlTypeName();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,697,final SqlTypeName name2 = type2.getSqlTypeName();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,698,if (name1.getFamily() == name2.getFamily()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,699,switch (name1.getFamily()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,700,case NUMERIC:
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,701,return name1.compareTo(name2) >= 0;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,702,default:
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,703,return true;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,706,return false;
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,56,import org.apache.calcite.sql.validate.SqlConformance;
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,408,typeFactory, SqlConformance.DEFAULT);
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,22,public enum SqlConformance {
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,23,DEFAULT, STRICT_92, STRICT_99, PRAGMATIC_99, ORACLE_10, STRICT_2003,
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,24,PRAGMATIC_2003;
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,30,public boolean isSortByOrdinal() {
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,31,switch (this) {
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,32,case DEFAULT:
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,33,case ORACLE_10:
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,34,case STRICT_92:
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,35,case PRAGMATIC_99:
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,36,case PRAGMATIC_2003:
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,37,return true;
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,38,default:
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,39,return false;
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,47,public boolean isSortByAlias() {
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,48,switch (this) {
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,49,case DEFAULT:
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,50,case ORACLE_10:
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,51,case STRICT_92:
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,52,return true;
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,53,default:
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,54,return false;
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,62,public boolean isSortByAliasObscures() {
core/src/main/java/org/apache/calcite/sql/validate/SqlConformance.java,63,return this == SqlConformance.STRICT_92;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1332,return new BigDecimal(((Number) o).doubleValue());
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,41,import com.google.common.collect.ImmutableSet;
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,43,import java.util.Set;
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,56,private final Set<TypeFamilyCast> nonMonotonicPreservingCasts =
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,57,createNonMonotonicPreservingCasts();
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,76,private Set<TypeFamilyCast> createNonMonotonicPreservingCasts() {
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,77,ImmutableSet.Builder<TypeFamilyCast> builder = ImmutableSet.builder();
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,78,add(builder, SqlTypeFamily.EXACT_NUMERIC, SqlTypeFamily.CHARACTER);
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,79,add(builder, SqlTypeFamily.NUMERIC, SqlTypeFamily.CHARACTER);
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,80,add(builder, SqlTypeFamily.APPROXIMATE_NUMERIC, SqlTypeFamily.CHARACTER);
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,81,add(builder, SqlTypeFamily.DATETIME_INTERVAL, SqlTypeFamily.CHARACTER);
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,82,add(builder, SqlTypeFamily.CHARACTER, SqlTypeFamily.EXACT_NUMERIC);
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,83,add(builder, SqlTypeFamily.CHARACTER, SqlTypeFamily.NUMERIC);
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,84,add(builder, SqlTypeFamily.CHARACTER, SqlTypeFamily.APPROXIMATE_NUMERIC);
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,85,add(builder, SqlTypeFamily.CHARACTER, SqlTypeFamily.DATETIME_INTERVAL);
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,86,add(builder, SqlTypeFamily.DATETIME, SqlTypeFamily.TIME);
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,87,add(builder, SqlTypeFamily.TIMESTAMP, SqlTypeFamily.TIME);
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,88,add(builder, SqlTypeFamily.TIME, SqlTypeFamily.DATETIME);
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,89,add(builder, SqlTypeFamily.TIME, SqlTypeFamily.TIMESTAMP);
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,90,return builder.build();
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,93,private void add(ImmutableSet.Builder<TypeFamilyCast> result,
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,94,SqlTypeFamily from, SqlTypeFamily to) {
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,95,result.add(new TypeFamilyCast(from, to));
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,98,private boolean isMonotonicPreservingCast(
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,99,RelDataTypeFamily castFrom,
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,100,RelDataTypeFamily castTo) {
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,101,return !nonMonotonicPreservingCasts.contains(
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,102,new TypeFamilyCast(castFrom, castTo));
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,204,if (isMonotonicPreservingCast(castFrom, castTo)) {
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,205,return call.getOperandMonotonicity(0);
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,214,private class TypeFamilyCast {
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,215,private final RelDataTypeFamily castFrom;
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,216,private final RelDataTypeFamily castTo;
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,218,public TypeFamilyCast(
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,219,RelDataTypeFamily castFrom,
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,220,RelDataTypeFamily castTo) {
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,221,this.castFrom = castFrom;
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,222,this.castTo = castTo;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,742,final List<RexNode> exprList = Lists.newArrayList(nodes);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,746,final String name2 = inferAlias(exprList, node);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,747,names.add(Util.first(name, name2));
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,211,return startPrecision;
core/src/main/java/org/apache/calcite/schema/impl/ReflectiveFunctionBase.java,85,if (method.getName().equals(name)) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,271,return createStructType(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,272,new FieldInfo() {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,273,public int getFieldCount() {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,274,return type.getFieldList().size();
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,277,public String getFieldName(int index) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,278,return type.getFieldList().get(index).getName();
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,281,public RelDataType getFieldType(int index) {
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,86,builder.add(getAccumulator(aggregateCall));
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,104,private AccumulatorFactory getAccumulator(final AggregateCall call) {
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,553,case BINARY:
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,554,return ((ByteBuffer) value).array();
core/src/main/java/org/apache/calcite/sql/fun/SqlPositionFunction.java,44,OperandTypes.STRING_SAME_SAME,
core/src/main/java/org/apache/calcite/sql/fun/SqlPositionFunction.java,63,assert operandsCount == 2;
core/src/main/java/org/apache/calcite/sql/fun/SqlPositionFunction.java,64,return "{0}({1} IN {2})";
core/src/main/java/org/apache/calcite/sql/fun/SqlPositionFunction.java,71,return OperandTypes.SAME_SAME.checkOperandTypes(
core/src/main/java/org/apache/calcite/sql/fun/SqlPositionFunction.java,73,&& super.checkOperandTypes(callBinding, throwOnFailure);
core/src/main/java/org/apache/calcite/sql/type/SameOperandTypeChecker.java,75,private boolean checkOperandTypesImpl(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1531,return Expressions.call(method, translatedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1533,return Expressions.call(translatedOperands.get(0), method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1796,return implementNullSemantics0(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1797,translator, call, nullAs, NullPolicy.STRICT, false,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1798,implementor);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1336,return ((Map) object).get(index);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1339,List list = (List) object;
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1340,return list.get(((Number) index).intValue());
core/src/main/java/org/apache/calcite/util/BuiltInMethod.java,231,ARRAY_ITEM(SqlFunctions.class, "arrayItem", List.class, int.class),
core/src/main/java/org/apache/calcite/util/BuiltInMethod.java,232,MAP_ITEM(SqlFunctions.class, "mapItem", Map.class, Object.class),
core/src/main/java/org/apache/calcite/util/BuiltInMethod.java,233,ANY_ITEM(SqlFunctions.class, "item", Object.class, Object.class),
example/csv/src/main/java/org/apache/calcite/adapter/csv/JsonTable.java,51,typeFactory.createSqlType(SqlTypeName.ANY), true))).build();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,37,import org.apache.calcite.util.Permutation;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,154,if (map.navigableKeySet().first() == newGroupCount) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,156,final List<AggregateCall> newAggCalls = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,157,for (AggregateCall aggCall : aggregate.getAggCallList()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,158,newAggCalls.add(
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,159,aggCall.adaptTo(input, aggCall.getArgList(), aggCall.filterArg,
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,160,groupCount, newGroupCount));
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,162,relBuilder.aggregate(
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,163,relBuilder.groupKey(newGroupSet, false, null),
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,164,newAggCalls);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,168,final Permutation mapping =
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,169,new Permutation(input.getRowType().getFieldCount());
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,170,mapping.identity();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,174,for (int i = 0, groupOrdinal = 0, constOrdinal = newGroupCount;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,175,i < groupCount;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,176,++i) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,177,if (map.containsKey(i)) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,178,mapping.set(i, constOrdinal++);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,180,mapping.set(i, groupOrdinal++);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,185,final List<AggregateCall> newAggCalls = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,186,for (AggregateCall aggCall : aggregate.getAggCallList()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,187,final int argCount = aggCall.getArgList().size();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,188,final List<Integer> args = new ArrayList<>(argCount);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,189,for (int j = 0; j < argCount; j++) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,190,final Integer arg = aggCall.getArgList().get(j);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,191,args.add(mapping.getTarget(arg));
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,193,final int filterArg = aggCall.filterArg < 0 ? aggCall.filterArg
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,194,: mapping.getTarget(aggCall.filterArg);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,195,newAggCalls.add(
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,196,aggCall.adaptTo(relBuilder.peek(), args, filterArg, groupCount,
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,197,newGroupCount));
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,201,relBuilder.aggregate(
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,202,relBuilder.groupKey(newGroupSet, false, null),
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,203,newAggCalls);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,170,RexCall rexCall = (RexCall) newConditionExp;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,175,rexCall = (RexCall) rexCall.getOperands().get(0);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,177,reduceNotNullableFilter(call, filter, rexCall, reverse);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,211,RexCall rexCall,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,217,switch (rexCall.getKind()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,231,RexNode operand = rexCall.getOperands().get(0);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,292,private TrimResult result(RelNode r, final Mapping mapping) {
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,426,private TrimResult dummyProject(int fieldCount, RelNode input) {
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,1013,private Mapping createMapping(ImmutableBitSet fieldsUsed, int fieldCount) {
core/src/main/java/org/apache/calcite/sql/SqlCall.java,84,public SqlNode clone(SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlCall.java,85,return getOperator().createCall(pos, getOperandList());
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,172,final int size = identifier.names.size();
core/src/main/java/org/apache/calcite/sql/SqlPrefixOperator.java,45,leftPrec(0, true),
core/src/main/java/org/apache/calcite/sql/SqlSpecialOperator.java,24,import java.util.List;
core/src/main/java/org/apache/calcite/sql/SqlSpecialOperator.java,84,public int reduceExpr(
core/src/main/java/org/apache/calcite/sql/SqlSpecialOperator.java,86,List<Object> list) {
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,194,public int reduceExpr(
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,195,int opOrdinal,
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,196,List<Object> list) {
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,197,final SqlParserUtil.ToTreeListItem betweenNode =
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,198,(SqlParserUtil.ToTreeListItem) list.get(opOrdinal);
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,199,SqlOperator op = betweenNode.getOperator();
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,211,final SqlParserPos pos =
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,212,((SqlNode) list.get(opOrdinal + 1)).getParserPosition();
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,216,SqlParserPos lastPos =
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,217,((SqlNode) list.get(list.size() - 1)).getParserPosition();
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,223,final Object o = list.get(opOrdinal + 2);
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,224,if (!(o instanceof SqlParserUtil.ToTreeListItem)) {
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,225,SqlParserPos errPos = ((SqlNode) o).getParserPosition();
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,226,throw SqlUtil.newContextException(errPos, RESOURCE.betweenWithoutAnd());
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,229,!= SqlKind.AND) {
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,230,SqlParserPos errPos = ((SqlParserUtil.ToTreeListItem) o).getPos();
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,243,SqlParserUtil.toTreeEx(
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,244,list,
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,250,SqlNode exp0 = (SqlNode) list.get(opOrdinal - 1);
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,253,betweenNode.getPos(),
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,259,SqlParserUtil.replaceSublist(
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,260,list,
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,261,opOrdinal - 1,
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,262,opOrdinal + 4,
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,263,newExp);
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,266,return opOrdinal - 1;
core/src/main/java/org/apache/calcite/sql/fun/SqlInOperator.java,69,30,
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,29,import org.apache.calcite.sql.parser.SqlParserUtil;
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,36,import java.util.List;
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,55,SqlNode left = (SqlNode) list.get(ordinal - 1);
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,56,SqlNode right = (SqlNode) list.get(ordinal + 1);
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,57,final SqlParserUtil.ToTreeListItem treeListItem =
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,58,(SqlParserUtil.ToTreeListItem) list.get(ordinal);
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,59,SqlParserUtil.replaceSublist(
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,60,list,
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,61,ordinal - 1,
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,66,.plus(treeListItem.getPos()),
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,69,return ordinal - 1;
core/src/main/java/org/apache/calcite/sql/fun/SqlLikeOperator.java,36,import java.util.List;
core/src/main/java/org/apache/calcite/sql/fun/SqlLikeOperator.java,79,30,
core/src/main/java/org/apache/calcite/sql/fun/SqlLikeOperator.java,151,public int reduceExpr(
core/src/main/java/org/apache/calcite/sql/fun/SqlLikeOperator.java,153,List<Object> list) {
core/src/main/java/org/apache/calcite/sql/fun/SqlLikeOperator.java,158,SqlNode exp0 = (SqlNode) list.get(opOrdinal - 1);
core/src/main/java/org/apache/calcite/sql/fun/SqlLikeOperator.java,159,SqlOperator op =
core/src/main/java/org/apache/calcite/sql/fun/SqlLikeOperator.java,160,((SqlParserUtil.ToTreeListItem) list.get(opOrdinal)).getOperator();
core/src/main/java/org/apache/calcite/sql/fun/SqlLikeOperator.java,170,final Object o = list.get(opOrdinal + 2);
core/src/main/java/org/apache/calcite/sql/fun/SqlLikeOperator.java,171,if (o instanceof SqlParserUtil.ToTreeListItem) {
core/src/main/java/org/apache/calcite/sql/fun/SqlLikeOperator.java,172,final SqlOperator op2 =
core/src/main/java/org/apache/calcite/sql/fun/SqlLikeOperator.java,173,((SqlParserUtil.ToTreeListItem) o).getOperator();
core/src/main/java/org/apache/calcite/sql/fun/SqlLikeOperator.java,194,SqlParserUtil.replaceSublist(list, opOrdinal - 1, end, call);
core/src/main/java/org/apache/calcite/sql/fun/SqlLikeOperator.java,195,return opOrdinal - 1;
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,139,28,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,428,26,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,526,30,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,535,30,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,544,30,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,553,30,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,562,30,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,571,30,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,580,30,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,589,30,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,598,30,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,630,30,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1033,new SqlSpecialOperator("Escape", SqlKind.ESCAPE, 30);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,23,import org.apache.calcite.sql.SqlCall;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,547,final SqlNode node = toTreeEx(list, 0, 0, SqlKind.OTHER);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,570,public static SqlNode toTreeEx(
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,571,List<Object> list,
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,572,int start,
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,573,int minPrec,
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,574,SqlKind stopperKind) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,577,outer:
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,578,while (true) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,579,final int count = list.size();
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,580,if (count <= (start + 1)) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,581,break;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,583,int i = start + 1;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,584,while (i < count) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,585,SqlOperator previous;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,586,SqlOperator current = ((ToTreeListItem) list.get(i)).op;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,587,SqlParserPos currentPos = ((ToTreeListItem) list.get(i)).pos;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,589,&& (current.getKind() == stopperKind)) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,590,break outer;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,592,SqlOperator next;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,593,int previousRight;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,594,int left = current.getLeftPrec();
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,595,int right = current.getRightPrec();
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,596,if (left < minPrec) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,597,break outer;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,599,int nextLeft;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,600,if (current instanceof SqlBinaryOperator) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,601,if (i == (start + 1)) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,602,previous = null;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,603,previousRight = 0;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,605,previous = ((ToTreeListItem) list.get(i - 2)).op;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,606,previousRight = previous.getRightPrec();
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,608,if (i == (count - 2)) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,609,next = null;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,610,nextLeft = 0;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,612,next = ((ToTreeListItem) list.get(i + 2)).op;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,613,nextLeft = next.getLeftPrec();
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,615,&& (stopperKind != SqlKind.OTHER)) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,622,nextLeft = 0;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,625,if ((previousRight < left) && (right >= nextLeft)) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,634,SqlNode leftExp = (SqlNode) list.get(i - 1);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,644,SqlNode rightExp = (SqlNode) list.get(i + 1);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,645,SqlParserPos callPos =
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,646,currentPos.plusAll(
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,647,new SqlNode[]{leftExp, rightExp});
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,648,final SqlCall newExp =
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,649,current.createCall(callPos, leftExp, rightExp);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,656,replaceSublist(list, i - 1, i + 2, newExp);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,657,break;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,659,i += 2;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,661,if (i == (start + 1)) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,662,previous = null;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,663,previousRight = 0;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,665,previous = ((ToTreeListItem) list.get(i - 2)).op;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,666,previousRight = previous.getRightPrec();
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,668,if (previousRight < left) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,678,SqlNode leftExp = (SqlNode) list.get(i - 1);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,680,SqlParserPos callPos =
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,681,currentPos.plusAll(new SqlNode[]{leftExp});
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,682,final SqlCall newExp =
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,683,current.createCall(callPos, leftExp);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,689,list.remove(i);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,690,list.set(i - 1, newExp);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,691,break;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,693,++i;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,697,SqlSpecialOperator specOp = (SqlSpecialOperator) current;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,702,if (i == (start + 1)) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,703,previous = null;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,704,previousRight = 0;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,706,previous = ((ToTreeListItem) list.get(i - 2)).op;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,707,previousRight = previous.getRightPrec();
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,709,int nextOrdinal = i + 2;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,710,if (i == (count - 2)) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,711,next = null;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,712,nextLeft = 0;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,715,next = null;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,716,nextLeft = 0;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,717,for (; nextOrdinal < count; nextOrdinal++) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,718,Object listItem = list.get(nextOrdinal);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,719,if (listItem instanceof ToTreeListItem) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,720,next = ((ToTreeListItem) listItem).op;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,721,nextLeft = next.getLeftPrec();
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,723,&& (next.getKind() == stopperKind)) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,724,break outer;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,726,break;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,731,if (nextLeft < minPrec) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,732,break outer;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,734,if ((previousRight < left) && (right >= nextLeft)) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,735,i = specOp.reduceExpr(i, list);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,739,break;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,741,i = nextOrdinal;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,743,throw Util.newInternal("Unexpected operator type: " + current);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,749,assert list.size() < count;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,751,return (SqlNode) list.get(start);
core/src/main/java/org/apache/calcite/util/Util.java,2023,return list.subList(fromIndex, list.size());
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,381,assert getConvention() == input.getConvention();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2638,optimize, RelFactories.DEFAULT_PROJECT_FACTORY);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2650,public static RelNode createProject(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2651,RelNode child, List<Pair<RexNode, String>> projectList,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2652,boolean optimize, RelFactories.ProjectFactory projectFactory) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2653,return createProject(child, Pair.left(projectList), Pair.right(projectList),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2654,optimize, projectFactory);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2695,RelFactories.DEFAULT_PROJECT_FACTORY);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2720,RelFactories.ProjectFactory projectFactory) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,72,LogicalProject origProj;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,73,LogicalFilter filter;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,97,origProj, origFilter, rel, preserveExprCondition);
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,24,import org.apache.calcite.rel.logical.LogicalProject;
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,39,new ProjectJoinTransposeRule(PushProjector.ExprCondition.FALSE);
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,57,PushProjector.ExprCondition preserveExprCondition) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,59,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,60,operand(Join.class, any())));
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,68,LogicalProject origProj = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,83,preserveExprCondition);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,40,new ProjectSetOpTransposeRule(PushProjector.ExprCondition.FALSE);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,58,PushProjector.ExprCondition preserveExprCondition) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,62,operand(SetOp.class, any())));
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,80,new PushProjector(origProj, null, setOp, preserveExprCondition);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,94,LogicalProject p =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,95,pushProject.createProjectRefsAndExprs(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,96,input, true, false);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,97,newSetOpInputs.add(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,98,pushProject.createNewProject(p, adjustments));
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,25,import org.apache.calcite.rel.logical.LogicalProject;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,63,private final LogicalProject origProj;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,191,LogicalProject origProj,
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,194,ExprCondition preserveExprCondition) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,311,projChild = RelOptUtil.createFilter(newProject, newFilter);
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,414,public LogicalProject createProjectRefsAndExprs(
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,477,return (LogicalProject) RelOptUtil.createProject(
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,480,Pair.right(newProjects));
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,568,true /* optimize to avoid trivial projections, as per javadoc */);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,739,public RelBuilder project(Iterable<? extends RexNode> nodes,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,740,Iterable<String> fieldNames) {
core/src/main/java/org/apache/calcite/sql/SqlKind.java,838,CREATE_INDEX, ALTER_INDEX, DROP_INDEX);
core/src/main/java/org/apache/calcite/sql/fun/SqlExtractFunction.java,43,super(
core/src/main/java/org/apache/calcite/sql/fun/SqlExtractFunction.java,45,SqlKind.OTHER_FUNCTION,
core/src/main/java/org/apache/calcite/sql/fun/SqlExtractFunction.java,46,ReturnTypes.BIGINT_NULLABLE,
core/src/main/java/org/apache/calcite/sql/fun/SqlExtractFunction.java,47,null,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1075,new SqlSpecialOperator("EXTRACT_DATE", SqlKind.OTHER);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,167,push(filter.getInput()).filter(expList.get(0)).build());
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,171,boolean reverse =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,173,== SqlStdOperatorTable.NOT;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,296,if (!reduceExpressions(join, expList, predicates)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,446,final ImmutableMap<RexNode, RexLiteral> constants =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,447,predicateConstants(RexLiteral.class, rexBuilder, predicates);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,546,List<RexNode> exps, ImmutableMap<RexNode, ? extends RexNode> constants,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,569,protected static <C extends RexNode> ImmutableMap<RexNode, C>
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,570,predicateConstants(Class<C> clazz,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,571,RexBuilder rexBuilder, RelOptPredicateList predicates) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,625,if (predicate.getKind() != SqlKind.EQUALS) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,630,if (operands.size() != 2) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,635,final RexNode left = operands.get(0);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,636,final RexNode right = operands.get(1);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,818,replacement = rexBuilder.makeCast(call.getType(), replacement, true);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,837,private final List<Constancy> stack;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,839,private final ImmutableMap<RexNode, ? extends RexNode> constants;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,850,ImmutableMap<RexNode, ? extends RexNode> constants,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,851,List<RexNode> constExprs,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,860,this.stack = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1295,return simplifyCase(rexBuilder, (RexCall) e);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1297,switch (e.getKind()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1390,private static RexNode simplifyCase(RexBuilder rexBuilder, RexCall call) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1398,newOperands.add(operands.get(i + 1));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1401,if (operand.isAlwaysFalse()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1410,switch (newOperands.size()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1411,case 1:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1412,return newOperands.get(0);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1424,final List<Pair<RexNode, RexNode>> pairs =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1425,casePairs(rexBuilder, newOperands);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1428,&& !pair.e.getValue().isAlwaysFalse()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1092,return new CnfHelper(rexBuilder).toCnf(rex);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1220,return new CnfHelper(rexBuilder).pull(node);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1784,private CnfHelper(RexBuilder rexBuilder) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1793,return and(toCnfs(operands));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1797,final RexNode headCnf = toCnf(head);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1800,final RexNode tailCnf = toCnf(tail);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1813,return toCnf(((RexCall) arg).getOperands().get(0));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1816,return toCnf(and(Lists.transform(flattenOr(operands), ADD_NOT)));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1819,return toCnf(or(Lists.transform(flattenAnd(operands), ADD_NOT)));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1828,private List<RexNode> toCnfs(List<RexNode> nodes) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1829,final List<RexNode> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1830,for (RexNode node : nodes) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1831,RexNode cnf = toCnf(node);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1832,switch (cnf.getKind()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1833,case AND:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1834,list.addAll(((RexCall) cnf).getOperands());
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1835,break;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1836,default:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1837,list.add(cnf);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1840,return list;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1859,return and(
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1860,Iterables.concat(factors.values(), ImmutableList.of(or(list))));
core/src/main/java/org/apache/calcite/model/ModelHandler.java,238,builder.put(extraOperand.camelName, file.getParentFile());
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,876,relType =
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,877,typeFactory.createSqlType(SqlTypeName.DECIMAL, precision, scale);
core/src/main/java/org/apache/calcite/sql/SqlAggFunction.java,81,boolean requireOver) {
core/src/main/java/org/apache/calcite/sql/SqlAggFunction.java,85,this.requiresOver =  requireOver;
core/src/main/java/org/apache/calcite/sql/SqlAggFunction.java,123,public final boolean requiresOver() {
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,82,if (isGroupExpr(id)) {
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,87,if (id.isStar()) {
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,88,assert false : "star should have been expanded";
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,152,if (call.getOperator().getKind() == SqlKind.OVER) {
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,154,if (windowFunction.getOperandList().size() != 0) {
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,155,windowFunction.operand(0).accept(this);
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,90,if (operator.isAggregator()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,36,import org.apache.calcite.sql.SqlAggFunction;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2486,return getAggregate(select) != null;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3266,if (SqlUtil.isCallTo(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3267,orderItem,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3268,SqlStdOperatorTable.DESC)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3442,if (selectScope instanceof AggregatingScope) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3443,AggregatingScope aggScope = (AggregatingScope) selectScope;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3444,for (SqlNode selectItem : expandedSelectItems) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3445,boolean matches = aggScope.checkAggregateExpr(selectItem, true);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3446,Util.discard(matches);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3482,final SqlCall sqlCall = (SqlCall) expr;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3484,&& ((SqlAggFunction) sqlCall.getOperator()).requiresOver()) {
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,113,AggregateFunctionImpl.create(IntSum.class), call);
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,137,List<Expression> accumulator =
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,138,new ArrayList<Expression>(stateSize);
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,147,List<RexNode> args = new ArrayList<RexNode>();
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,189,public CountAccumulator(AggregateCall call) {
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,284,builder.set(i, row.getObject(i));
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,308,rb.set(index, key.getObject(groupPos));
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,379,public long add(long accumulator, int v) {
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,392,public final AggregateFunctionImpl aggFunction;
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,393,public final int argOrdinal;
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,396,public UdaAccumulatorFactory(AggregateFunctionImpl aggFunction,
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,410,throw Throwables.propagate(e);
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,427,public UdaAccumulator(UdaAccumulatorFactory factory) {
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,432,throw Throwables.propagate(e);
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,448,throw Throwables.propagate(e);
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,459,throw Throwables.propagate(e);
core/src/main/java/org/apache/calcite/schema/impl/AggregateFunctionImpl.java,98,final List<Class<?>> addParamTypes =
core/src/main/java/org/apache/calcite/schema/impl/AggregateFunctionImpl.java,99,ImmutableList.copyOf(addMethod.getParameterTypes());
core/src/main/java/org/apache/calcite/schema/impl/AggregateFunctionImpl.java,108,final Class<?> type = addParamTypes.get(i);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1414,rexBuilder.makeCall(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1415,SqlStdOperatorTable.EQUALS,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1417,rexBuilder.ensureType(leftKeys.get(0).getType(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1418,bb.convertExpression(rightVals), true));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1433,rexBuilder.ensureType(pair.left.getType(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1434,bb.convertExpression(pair.right), true));
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,72,import org.apache.calcite.sql.fun.SqlStdOperatorTable;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,111,static final ImmutableList<SqlAggFunction> AGG_FUNCS;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,112,static final ImmutableList<SqlAggFunction> MYSQL_AGG_FUNCS;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,115,ImmutableList.Builder<SqlAggFunction> builder = ImmutableList.builder();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,116,builder.add(SqlStdOperatorTable.COUNT);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,117,builder.add(SqlStdOperatorTable.SUM);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,118,builder.add(SqlStdOperatorTable.SUM0);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,119,builder.add(SqlStdOperatorTable.MIN);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,120,builder.add(SqlStdOperatorTable.MAX);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,122,builder.add(SqlStdOperatorTable.SINGLE_VALUE);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,478,private static boolean canImplement(SqlAggFunction aggregation,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,479,SqlDialect sqlDialect) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,482,return MYSQL_AGG_FUNCS.contains(aggregation);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,484,return AGG_FUNCS.contains(aggregation);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcImplementor.java,25,import java.util.Collections;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcImplementor.java,39,Collections.singletonList(Clause.FROM), scan);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTableScan.java,25,import java.util.Collections;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTableScan.java,52,Collections.singletonList(JdbcImplementor.Clause.FROM), this);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,59,import java.util.Collections;
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,180,return result(identifier, Collections.singletonList(Clause.FROM), e);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,231,final List<Clause> clauses = Collections.singletonList(Clause.SELECT);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,232,final List<Pair<String, RelDataType>> pairs = ImmutableList.of();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,258,return result(query, clauses, e);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,62,import org.apache.calcite.util.Pair;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,73,import java.util.Collections;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,234,return result(node, clauses, rel);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,383,public Result result(SqlNode node, Collection<Clause> clauses, RelNode rel) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,389,final String alias5 = alias2 == null || !alias2.equals(alias4) ? alias4
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,390,: null;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,392,Collections.singletonList(Pair.of(alias4, rel.getRowType())));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,398,final List<Pair<String, RelDataType>> list = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,399,list.addAll(leftResult.aliases);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,400,list.addAll(rightResult.aliases);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,401,return new Result(join, Expressions.list(Clause.FROM), null, list);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,644,List<Pair<String, RelDataType>> aliases) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,646,for (Pair<String, RelDataType> alias : aliases) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,647,x += alias.right.getFieldCount();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,652,public Context aliasContext(List<Pair<String, RelDataType>> aliases,
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,665,private final List<Pair<String, RelDataType>> aliases;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,668,protected AliasContext(List<Pair<String, RelDataType>> aliases,
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,676,for (Pair<String, RelDataType> alias : aliases) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,677,final List<RelDataTypeField> fields = alias.right.getFieldList();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,687,: ImmutableList.of(alias.left, field.getName()),
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,723,private final List<Pair<String, RelDataType>> aliases;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,727,List<Pair<String, RelDataType>> aliases) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,789,newContext = aliasContext(aliases, aliases.size() > 1);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,791,return new Builder(rel, clauseList, select, newContext);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,857,Context context) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,908,return SqlImplementor.this.result(select, clauses, rel);
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,81,getSqlToRelConverter(getSqlValidator(), catalogReader);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,303,preparingStmt.getSqlToRelConverter(validator, catalogReader);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,304,if (analyze) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,305,converter.enableTableAccessConversion(false);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1077,CatalogReader catalogReader) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1081,StandardConvertletTable.INSTANCE);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1082,sqlToRelConverter.setTrimUnusedFields(true);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1119,getSqlToRelConverter(validator, catalogReader);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,206,createCatalogReader(), cluster, convertletTable);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,207,sqlToRelConverter.setTrimUnusedFields(false);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,208,sqlToRelConverter.enableTableAccessConversion(false);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,241,catalogReader, cluster, convertletTable);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,243,sqlToRelConverter.setTrimUnusedFields(false);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,244,sqlToRelConverter.enableTableAccessConversion(false);
core/src/main/java/org/apache/calcite/prepare/Prepare.java,214,SqlToRelConverter sqlToRelConverter =
core/src/main/java/org/apache/calcite/prepare/Prepare.java,215,getSqlToRelConverter(validator, catalogReader);
core/src/main/java/org/apache/calcite/prepare/Prepare.java,216,sqlToRelConverter.setExpand(THREAD_EXPAND.get());
core/src/main/java/org/apache/calcite/prepare/Prepare.java,223,sqlToRelConverter.setIsExplain(sqlExplain.getDynamicParamCount());
core/src/main/java/org/apache/calcite/prepare/Prepare.java,325,CatalogReader catalogReader);
core/src/main/java/org/apache/calcite/prepare/Prepare.java,349,getSqlToRelConverter(
core/src/main/java/org/apache/calcite/prepare/Prepare.java,350,getSqlValidator(), catalogReader);
core/src/main/java/org/apache/calcite/prepare/Prepare.java,351,converter.setTrimUnusedFields(shouldTrim(root.rel));
core/src/main/java/org/apache/calcite/prepare/Prepare.java,352,converter.setExpand(THREAD_EXPAND.get());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,207,public static final int IN_SUBQUERY_THRESHOLD = 20;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,220,private boolean shouldConvertTableAccess;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,223,private boolean decorrelationEnabled;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,224,private boolean trimUnusedFields;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,225,private boolean shouldCreateValuesRel;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,226,private boolean isExplain;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,227,private int nDynamicParamsInExplain;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,253,private boolean expand = true;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,275,RelOptCluster.create(planner, rexBuilder), convertletTable);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,297,this.shouldConvertTableAccess = true;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,298,this.exprConverter =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,299,new SqlNodeToRexConverterImpl(convertletTable);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,300,decorrelationEnabled = true;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,301,trimUnusedFields = false;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,302,shouldCreateValuesRel = true;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,303,isExplain = false;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,304,nDynamicParamsInExplain = 0;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,355,int retVal = nDynamicParamsInExplain;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,357,++nDynamicParamsInExplain;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,407,public void setIsExplain(int nDynamicParams) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,408,isExplain = true;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,409,nDynamicParamsInExplain = nDynamicParams;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,423,public void enableTableAccessConversion(boolean enabled) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,424,shouldConvertTableAccess = enabled;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,436,public void enableValuesRelCreation(boolean enabled) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,437,shouldCreateValuesRel = enabled;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1040,if (!expand && !(query instanceof SqlNodeList)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1152,if (!expand) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1167,if (!expand) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1330,isExplain);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1467,return IN_SUBQUERY_THRESHOLD;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1567,if ((rexLiteral == null) || !shouldCreateValuesRel) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1585,if ((rexLiteral != null) && shouldCreateValuesRel) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1970,if (shouldConvertTableAccess) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2828,return decorrelationEnabled;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2840,public void setTrimUnusedFields(boolean trim) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2841,this.trimUnusedFields = trim;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2850,return trimUnusedFields;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2853,public void setExpand(boolean expand) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2854,this.expand = expand;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4046,if (!expand) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,463,case MYSQL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1919,final Expression trop0 = translatedOperands.get(0);
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,289,SqlLiteral literal = (SqlLiteral) node;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3281,return new OrderExpressionExpander(select, orderExpr).go();
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,111,public SqlBetweenOperator(
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,112,Flag flag,
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,113,boolean negated) {
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,114,super(
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,115,negated ? NOT_BETWEEN_NAMES : BETWEEN_NAMES,
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,116,SqlKind.BETWEEN,
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,117,30,
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,118,null,
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,119,null, OTC_CUSTOM);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,294,final RelNode input = peek(inputCount, inputOrdinal);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,295,final RelDataType rowType = input.getRowType();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,296,final int ordinal = rowType.getFieldNames().indexOf(fieldName);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,297,if (ordinal < 0) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,299,+ "] not found; input fields are: " + rowType.getFieldNames());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,301,return field(inputCount, inputOrdinal, ordinal);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,311,return field(1, 0, fieldOrdinal);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,322,final RelNode input = peek(inputCount, inputOrdinal);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,399,RexNode node = field(ordinal.intValue());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,749,if (RexUtil.isIdentity(exprList, peek().getRowType())) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,750,return this;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,754,&& names.equals(inputRowType.getFieldNames())) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,756,return this;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1077,ImmutableList.of(Pair.of(alias, pair.rel.getRowType()))));
core/src/main/java/org/apache/calcite/util/CompositeList.java,39,private final ImmutableList<List<? extends T>> lists;
core/src/main/java/org/apache/calcite/util/CompositeList.java,46,private CompositeList(ImmutableList<List<? extends T>> lists) {
core/src/main/java/org/apache/calcite/util/CompositeList.java,58,return new CompositeList<T>(ImmutableList.copyOf(lists));
core/src/main/java/org/apache/calcite/util/CompositeList.java,92,return new CompositeList<T>(ImmutableList.of(list0, list1));
core/src/main/java/org/apache/calcite/util/CompositeList.java,107,return new CompositeList<T>(ImmutableList.of(list0, list1, list2));
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,199,!= null;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,162,if (planner.root != null
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,163,&& planner.root.set == this) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,164,planner.ensureRootConverters();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,697,public boolean canConvert(RelTraitSet fromTraits, RelTraitSet toTraits) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,698,assert fromTraits.size() >= toTraits.size();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,700,boolean canConvert = true;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,701,for (int i = 0; (i < toTraits.size()) && canConvert; i++) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,702,RelTrait fromTrait = fromTraits.getTrait(i);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,703,RelTrait toTrait = toTraits.getTrait(i);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,705,assert fromTrait.getTraitDef() == toTrait.getTraitDef();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,706,assert traitDefs.contains(fromTrait.getTraitDef());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,707,assert traitDefs.contains(toTrait.getTraitDef());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,709,canConvert =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,710,fromTrait.getTraitDef().canConvert(this, fromTrait, toTrait);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,713,return canConvert;
core/src/main/java/org/apache/calcite/rel/RelCollationTraitDef.java,85,RelOptPlanner planner, RelCollation fromTrait, RelCollation toTrait) {
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,199,server.addStatement(this, calcitePreparedStatement.handle);
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,303,public CalciteQueryable(CalciteConnection connection, Type elementType,
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,324,statementMap.put(h.id, new CalciteServerStatementImpl(c));
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,429,public ContextImpl(CalciteConnectionImpl connection) {
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,489,public CalciteServerStatementImpl(CalciteConnectionImpl connection) {
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,64,private CancelFlag cancelFlag;
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,80,protected AbstractRelOptPlanner(RelOptCostFactory costFactory, //
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,91,cancelFlag = new CancelFlag();
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,112,this.cancelFlag = cancelFlag;
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,120,if (cancelFlag.isCancelRequested()) {
core/src/main/java/org/apache/calcite/util/CancelFlag.java,25,private boolean cancelRequested;
core/src/main/java/org/apache/calcite/util/CancelFlag.java,33,return cancelRequested;
core/src/main/java/org/apache/calcite/util/CancelFlag.java,40,cancelRequested = true;
core/src/main/java/org/apache/calcite/util/CancelFlag.java,47,cancelRequested = false;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,64,public CsvEnumerator(File file, List<CsvFieldType> fieldTypes) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,65,this(file, fieldTypes, identityList(fieldTypes.size()));
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,68,public CsvEnumerator(File file, List<CsvFieldType> fieldTypes, int[] fields) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,70,this(file, null, (RowConverter<E>) converter(fieldTypes, fields));
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,73,public CsvEnumerator(File file, String[] filterValues,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,74,RowConverter<E> rowConverter) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,78,this.reader = openCsv(file);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFilterableTable.java,63,return new CsvEnumerator<Object[]>(file, filterValues,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvScannableTable.java,49,return new CsvEnumerator<Object[]>(file,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchemaFactory.java,36,public CsvSchemaFactory() {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTranslatableTable.java,53,public Enumerable<Object> project(final int[] fields) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTranslatableTable.java,56,return new CsvEnumerator<Object>(file, fieldTypes, fields);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,98,List<CsvFieldType> fieldTypes) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,153,private static CSVReader openCsv(File file) throws IOException {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTable.java,34,private final RelProtoDataType protoRowType;
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,59,if (names.equals(withItem.name.getSimple())) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,331,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,608,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,183,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,903,case INTERVAL_YEAR_MONTH:
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,904,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,906,return "INTERVAL_"
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,907,+ type.getIntervalQualifier().toString().replace(' ', '_');
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,914,return sqlTypeName.getName(); // e.g. "DECIMAL"
core/src/main/java/org/apache/calcite/rel/metadata/RelMdSize.java,284,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/rel/metadata/RelMdSize.java,285,case INTERVAL_YEAR_MONTH:
core/src/main/java/org/apache/calcite/rel/metadata/RelMdSize.java,330,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/rel/metadata/RelMdSize.java,331,case INTERVAL_YEAR_MONTH:
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystemImpl.java,40,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystemImpl.java,58,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystemImpl.java,102,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystemImpl.java,128,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,41,import org.apache.calcite.sql.type.IntervalSqlType;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,76,public static final Function<RelDataTypeField, RexInputRef> TO_INPUT_REF =
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,525,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,610,scale + intervalType.getPrecision(),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1070,intervalQualifier.isYearMonth() ? SqlTypeName.INTERVAL_YEAR_MONTH
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1071,: SqlTypeName.INTERVAL_DAY_TIME);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1248,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1321,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,217,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,385,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,468,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,132,? SqlTypeName.INTERVAL_YEAR_MONTH
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,133,: SqlTypeName.INTERVAL_DAY_TIME;
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,199,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,633,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,684,SqlTypeName typeName =
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,685,intervalQualifier.isYearMonth() ? SqlTypeName.INTERVAL_YEAR_MONTH
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,686,: SqlTypeName.INTERVAL_DAY_TIME;
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,687,return new SqlIntervalLiteral(
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,688,sign,
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,689,intervalStr,
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,690,intervalQualifier,
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,691,typeName,
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,692,pos);
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,48,? SqlTypeName.INTERVAL_YEAR_MONTH
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,49,: SqlTypeName.INTERVAL_DAY_TIME,
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,50,isNullable,
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,51,null);
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,90,== that.intervalQualifier.isYearMonth();
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,92,TimeUnit thisStart =
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,93,this.intervalQualifier.getStartUnit();
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,94,TimeUnit thisEnd =
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,95,this.intervalQualifier.getEndUnit();
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,96,TimeUnit thatStart =
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,97,that.intervalQualifier.getStartUnit();
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,98,TimeUnit thatEnd =
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,99,that.intervalQualifier.getEndUnit();
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,101,assert null != thisStart;
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,102,assert null != thatStart;
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,106,int fracPrec =
core/src/main/java/org/apache/calcite/sql/type/MatchReturnTypeInference.java,52,public MatchReturnTypeInference(int start, List<SqlTypeName> typeNames) {
core/src/main/java/org/apache/calcite/sql/type/MatchReturnTypeInference.java,53,assert start >= 0;
core/src/main/java/org/apache/calcite/sql/type/MatchReturnTypeInference.java,54,assert null != typeNames;
core/src/main/java/org/apache/calcite/sql/type/MatchReturnTypeInference.java,55,assert typeNames.size() > 0;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,43,rules = new HashMap<SqlTypeName, Set<SqlTypeName>>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,48,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,49,rule.add(SqlTypeName.INTERVAL_YEAR_MONTH);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,50,rules.put(SqlTypeName.INTERVAL_YEAR_MONTH, rule);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,53,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,54,rule.add(SqlTypeName.INTERVAL_DAY_TIME);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,55,rules.put(SqlTypeName.INTERVAL_DAY_TIME, rule);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,58,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,59,rule.add(SqlTypeName.MULTISET);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,60,rules.put(SqlTypeName.MULTISET, rule);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,63,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,64,rule.add(SqlTypeName.TINYINT);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,65,rules.put(SqlTypeName.TINYINT, rule);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,68,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,74,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,81,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,89,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,99,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,110,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,122,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,133,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,139,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,140,rule.add(SqlTypeName.CHAR);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,141,rules.put(SqlTypeName.CHAR, rule);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,144,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,150,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,151,rule.add(SqlTypeName.BOOLEAN);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,152,rules.put(SqlTypeName.BOOLEAN, rule);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,155,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,161,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,167,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,173,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,174,rule.add(SqlTypeName.TIMESTAMP);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,175,rules.put(SqlTypeName.TIMESTAMP, rule);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,178,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,196,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,243,rule.add(SqlTypeName.INTERVAL_DAY_TIME);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,244,rule.add(SqlTypeName.INTERVAL_YEAR_MONTH);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,248,rule = coerceRules.get(SqlTypeName.INTERVAL_DAY_TIME);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,249,rule.add(SqlTypeName.TINYINT);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,250,rule.add(SqlTypeName.SMALLINT);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,251,rule.add(SqlTypeName.INTEGER);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,252,rule.add(SqlTypeName.BIGINT);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,253,rule.add(SqlTypeName.DECIMAL);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,254,rule.add(SqlTypeName.VARCHAR);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,257,rule = coerceRules.get(SqlTypeName.INTERVAL_YEAR_MONTH);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,258,rule.add(SqlTypeName.TINYINT);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,259,rule.add(SqlTypeName.SMALLINT);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,260,rule.add(SqlTypeName.INTEGER);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,261,rule.add(SqlTypeName.BIGINT);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,262,rule.add(SqlTypeName.DECIMAL);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,263,rule.add(SqlTypeName.VARCHAR);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,272,rule.add(SqlTypeName.INTERVAL_DAY_TIME);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,273,rule.add(SqlTypeName.INTERVAL_YEAR_MONTH);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,281,rule.add(SqlTypeName.INTERVAL_DAY_TIME);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,282,rule.add(SqlTypeName.INTERVAL_YEAR_MONTH);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,292,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,300,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,308,rule = new HashSet<SqlTypeName>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,336,if (to.equals(SqlTypeName.NULL)) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeAssignmentRules.java,355,Map<K, V> copy = new HashMap<K, V>();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeExplicitPrecedenceList.java,91,.put(SqlTypeName.INTERVAL_DAY_TIME,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeExplicitPrecedenceList.java,101,public SqlTypeExplicitPrecedenceList(List<SqlTypeName> typeNames) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeExplicitPrecedenceList.java,107,private static SqlTypeExplicitPrecedenceList list(SqlTypeName... array) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeExplicitPrecedenceList.java,108,return new SqlTypeExplicitPrecedenceList(ImmutableList.copyOf(array));
core/src/main/java/org/apache/calcite/sql/type/SqlTypeFactoryImpl.java,211,assert typeName != SqlTypeName.INTERVAL_DAY_TIME
core/src/main/java/org/apache/calcite/sql/type/SqlTypeFactoryImpl.java,212,: "use createSqlIntervalType() instead";
core/src/main/java/org/apache/calcite/sql/type/SqlTypeFactoryImpl.java,213,assert typeName != SqlTypeName.INTERVAL_YEAR_MONTH
core/src/main/java/org/apache/calcite/sql/type/SqlTypeFamily.java,26,import java.util.List;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeFamily.java,121,public List<SqlTypeName> getTypeNames() {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeFamily.java,138,return ImmutableList.of(SqlTypeName.INTERVAL_YEAR_MONTH);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeFamily.java,140,return ImmutableList.of(SqlTypeName.INTERVAL_DAY_TIME);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,64,INTERVAL_DAY_TIME(PrecScale.NO_NO | PrecScale.YES_NO | PrecScale.YES_YES,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,115,DOUBLE, SYMBOL, INTERVAL_YEAR_MONTH, INTERVAL_DAY_TIME,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,148,public static final List<SqlTypeName> INTERVAL_TYPES =
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,149,ImmutableList.of(INTERVAL_DAY_TIME, INTERVAL_YEAR_MONTH);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,207,private SqlTypeName(int signatures, boolean special, int jdbcType,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,308,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,681,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,699,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,258,List<SqlTypeName> typeNames,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2648,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/sql2rel/SqlNodeToRexConverterImpl.java,142,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,543,case INTERVAL_DAY_TIME:
core/src/main/java/org/apache/calcite/util/Util.java,1856,return null;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1641,return Expressions.makeBinary(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1642,expressionType, expressions.get(0), expressions.get(1));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1923,trop1 =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1924,Expressions.convert_(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1925,Expressions.divide(trop1,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1926,Expressions.constant(DateTimeUtils.MILLIS_PER_DAY)),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1927,int.class);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,527,BigDecimal value2 = (BigDecimal) value;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,530,.multiplier;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,550,&& SqlTypeUtil.isExactNumeric(exp.getType())) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,551,return makeCastExactToInterval(type, exp);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,586,IntervalSqlType intervalType = (IntervalSqlType) exp.getType();
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,587,TimeUnit endUnit = intervalType.getIntervalQualifier().getEndUnit();
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,588,if (endUnit == null) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,589,endUnit = intervalType.getIntervalQualifier().getStartUnit();
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,591,int scale = 0;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,592,if (endUnit == TimeUnit.SECOND) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,593,scale = Math.min(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,595,.getFractionalSecondPrecision(typeFactory.getTypeSystem()),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,596,3);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,600,RexNode value = decodeIntervalOrDecimal(exp);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,601,if (multiplier.longValue() != 1) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,602,value = makeCall(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,603,SqlStdOperatorTable.DIVIDE_INTEGER,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,604,value, makeBigintLiteral(multiplier));
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,617,private RexNode makeCastExactToInterval(RelDataType toType, RexNode exp) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,618,IntervalSqlType intervalType = (IntervalSqlType) toType;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,619,TimeUnit endUnit = intervalType.getIntervalQualifier().getEndUnit();
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,620,if (endUnit == null) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,621,endUnit = intervalType.getIntervalQualifier().getStartUnit();
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,623,int scale = 0;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,624,if (endUnit == TimeUnit.SECOND) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,625,scale = Math.min(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,627,.getFractionalSecondPrecision(typeFactory.getTypeSystem()),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,628,3);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,632,RelDataType decimalType =
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,633,getTypeFactory().createSqlType(SqlTypeName.DECIMAL,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,634,scale + intervalType.getPrecision(),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,635,scale);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,636,RexNode value = decodeIntervalOrDecimal(ensureType(decimalType, exp, true));
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,637,if (multiplier.longValue() != 1) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,638,value = makeCall(SqlStdOperatorTable.MULTIPLY,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,639,value, makeExactLiteral(multiplier));
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,641,return encodeIntervalOrDecimal(value, toType, false);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,729,public RexNode makeNotNullCast(RexNode expr) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,730,RelDataType type = expr.getType();
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,731,if (!type.isNullable()) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,732,return expr;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,734,RelDataType typeNotNull =
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,735,getTypeFactory().createTypeWithNullability(type, false);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,736,return new RexCall(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,737,typeNotNull,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,738,SqlStdOperatorTable.CAST,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,739,ImmutableList.of(expr));
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,177,protected void registerEquivOp(final SqlOperator op) {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,178,registerOp(
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,179,op,
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,180,new RexSqlConvertlet() {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,181,public SqlNode convertCall(
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,182,RexToSqlNodeConverter converter,
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,183,RexCall call) {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,184,SqlNode[] operands =
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,185,convertExpressionList(converter, call.operands);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,186,if (operands == null) {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,187,return null;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,189,return new SqlBasicCall(
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,190,op,
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,191,operands,
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,192,SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,141,ReturnTypes.ARG0_NULLABLE, // more efficient than BOOLEAN_NULLABLE
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,430,ReturnTypes.ARG0_NULLABLE, // more efficient than BOOLEAN_NULLABLE
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,456,ReturnTypes.NULLABLE_SUM,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,905,public static final SqlOperator MINUS_DATE =
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,36,private SqlIntervalQualifier intervalQualifier;
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,52,this.typeSystem = typeSystem;
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,53,this.intervalQualifier = intervalQualifier;
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,62,SqlDialect dialect = null;
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,63,dialect = SqlDialect.DUMMY;
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,64,SqlPrettyWriter writer = new SqlPrettyWriter(dialect);
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,74,public SqlIntervalQualifier getIntervalQualifier() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,107,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,112,public RelDataType inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,113,final int n = opBinding.getOperandCount();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,114,RelDataType type1 = null;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,115,for (int i = 0; i < n; i++) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,116,type1 = opBinding.getOperandType(i);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,117,if (type1.isNullable()) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,118,break;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,121,return type1;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,77,import java.math.MathContext;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,406,if (left instanceof SqlIntervalLiteral
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,407,|| left instanceof SqlNumericLiteral) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,414,sourceValue.multiply(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,417,MathContext.UNLIMITED),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,639,for (RexNode expr : exprs) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,640,if (SqlTypeName.INTERVAL_YEAR_MONTH
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,641,== expr.getType().getSqlTypeName()) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,642,throw Util.needToImplement(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,661,final RexNode minus =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,662,rexBuilder.makeCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,663,SqlStdOperatorTable.MINUS,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,664,casts);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,667,return rexBuilder.makeReinterpretCast(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,668,resType,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,669,minus,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,670,rexBuilder.makeLiteral(false));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,875,return convertCall(cx, call, SqlStdOperatorTable.DATETIME_PLUS);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1441,return composeDisjunction(rexBuilder, terms, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModify.java,127,convertedChildExp, "into", collectionParameter)));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModify.java,134,Expressions.subtract(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModify.java,135,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModify.java,136,collectionParameter, "size"),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModify.java,137,countParameter),
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,639,return Meta.StatementType.INSERT;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,51,fieldNames == null ? null
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,52,: SqlValidatorUtil.uniquify(fieldNames,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,53,SqlValidatorUtil.F_SUGGESTER));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,145,SqlValidatorUtil.uniquify(Lists.transform(columns, GET_ALIAS)));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1447,RexBuilder rexBuilder = leftRel.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1518,SqlValidatorUtil.uniquify(newLeftFieldNames));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1523,SqlValidatorUtil.uniquify(newRightFieldNames));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2722,final List<String> fieldNames2 =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2723,fieldNames == null
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2724,? null
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2725,: SqlValidatorUtil.uniquify(fieldNames,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2726,SqlValidatorUtil.F_SUGGESTER);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2730,final RelDataType rowType =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2731,RexUtil.createStructType(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2732,cluster.getTypeFactory(),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2733,exprs,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2734,fieldNames2);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2742,return projectFactory.createProject(child, exprs, fieldNames2);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1683,fieldNameList == null
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1684,? null
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1685,: SqlValidatorUtil.uniquify(fieldNameList,
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1686,SqlValidatorUtil.F_SUGGESTER));
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,2022,Join.deriveJoinRowType(left.getRowType(), right.getRowType(),
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,2023,joinType, cluster.getTypeFactory(), null, fieldList);
core/src/main/java/org/apache/calcite/rel/core/Join.java,42,import java.util.ArrayList;
core/src/main/java/org/apache/calcite/rel/core/Join.java,44,import java.util.HashSet;
core/src/main/java/org/apache/calcite/rel/core/Join.java,217,return deriveJoinRowType(
core/src/main/java/org/apache/calcite/rel/core/Join.java,218,left.getRowType(),
core/src/main/java/org/apache/calcite/rel/core/Join.java,219,right.getRowType(),
core/src/main/java/org/apache/calcite/rel/core/Join.java,220,joinType,
core/src/main/java/org/apache/calcite/rel/core/Join.java,221,getCluster().getTypeFactory(),
core/src/main/java/org/apache/calcite/rel/core/Join.java,222,null,
core/src/main/java/org/apache/calcite/rel/core/Join.java,270,assert systemFieldList != null;
core/src/main/java/org/apache/calcite/rel/core/Join.java,271,switch (joinType) {
core/src/main/java/org/apache/calcite/rel/core/Join.java,272,case LEFT:
core/src/main/java/org/apache/calcite/rel/core/Join.java,273,rightType = typeFactory.createTypeWithNullability(rightType, true);
core/src/main/java/org/apache/calcite/rel/core/Join.java,274,break;
core/src/main/java/org/apache/calcite/rel/core/Join.java,275,case RIGHT:
core/src/main/java/org/apache/calcite/rel/core/Join.java,276,leftType = typeFactory.createTypeWithNullability(leftType, true);
core/src/main/java/org/apache/calcite/rel/core/Join.java,277,break;
core/src/main/java/org/apache/calcite/rel/core/Join.java,278,case FULL:
core/src/main/java/org/apache/calcite/rel/core/Join.java,279,leftType = typeFactory.createTypeWithNullability(leftType, true);
core/src/main/java/org/apache/calcite/rel/core/Join.java,280,rightType = typeFactory.createTypeWithNullability(rightType, true);
core/src/main/java/org/apache/calcite/rel/core/Join.java,281,break;
core/src/main/java/org/apache/calcite/rel/core/Join.java,282,default:
core/src/main/java/org/apache/calcite/rel/core/Join.java,283,break;
core/src/main/java/org/apache/calcite/rel/core/Join.java,285,return createJoinType(
core/src/main/java/org/apache/calcite/rel/core/Join.java,286,typeFactory, leftType, rightType, fieldNameList, systemFieldList);
core/src/main/java/org/apache/calcite/rel/core/Join.java,318,+ rightType.getFieldCount()));
core/src/main/java/org/apache/calcite/rel/core/Join.java,319,List<String> nameList = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/core/Join.java,320,final List<RelDataType> typeList = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/core/Join.java,326,final HashSet<String> uniqueNameList = new HashSet<>();
core/src/main/java/org/apache/calcite/rel/core/Join.java,327,addFields(systemFieldList, typeList, nameList, uniqueNameList);
core/src/main/java/org/apache/calcite/rel/core/Join.java,328,addFields(leftType.getFieldList(), typeList, nameList, uniqueNameList);
core/src/main/java/org/apache/calcite/rel/core/Join.java,329,if (rightType != null) {
core/src/main/java/org/apache/calcite/rel/core/Join.java,330,addFields(
core/src/main/java/org/apache/calcite/rel/core/Join.java,331,rightType.getFieldList(), typeList, nameList, uniqueNameList);
core/src/main/java/org/apache/calcite/rel/core/Join.java,333,if (fieldNameList != null) {
core/src/main/java/org/apache/calcite/rel/core/Join.java,334,assert fieldNameList.size() == nameList.size();
core/src/main/java/org/apache/calcite/rel/core/Join.java,335,nameList = fieldNameList;
core/src/main/java/org/apache/calcite/rel/core/Join.java,337,return typeFactory.createStructType(typeList, nameList);
core/src/main/java/org/apache/calcite/rel/core/Join.java,340,private static void addFields(
core/src/main/java/org/apache/calcite/rel/core/Join.java,341,List<RelDataTypeField> fieldList,
core/src/main/java/org/apache/calcite/rel/core/Join.java,342,List<RelDataType> typeList,
core/src/main/java/org/apache/calcite/rel/core/Join.java,343,List<String> nameList,
core/src/main/java/org/apache/calcite/rel/core/Join.java,344,HashSet<String> uniqueNameList) {
core/src/main/java/org/apache/calcite/rel/core/Join.java,345,for (RelDataTypeField field : fieldList) {
core/src/main/java/org/apache/calcite/rel/core/Join.java,346,String name = field.getName();
core/src/main/java/org/apache/calcite/rel/core/Join.java,349,if (uniqueNameList.contains(name)) {
core/src/main/java/org/apache/calcite/rel/core/Join.java,350,String nameBase = name;
core/src/main/java/org/apache/calcite/rel/core/Join.java,351,for (int j = 0;; j++) {
core/src/main/java/org/apache/calcite/rel/core/Join.java,352,name = nameBase + j;
core/src/main/java/org/apache/calcite/rel/core/Join.java,353,if (!uniqueNameList.contains(name)) {
core/src/main/java/org/apache/calcite/rel/core/Join.java,354,break;
core/src/main/java/org/apache/calcite/rel/core/Join.java,358,nameList.add(name);
core/src/main/java/org/apache/calcite/rel/core/Join.java,359,uniqueNameList.add(name);
core/src/main/java/org/apache/calcite/rel/core/Join.java,360,typeList.add(field.getType());
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,117,return deriveJoinRowType(
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,83,fieldNames));
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,100,final List<String> fieldNames2 =
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,101,fieldNames == null
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,102,? null
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,103,: SqlValidatorUtil.uniquify(fieldNames,
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,104,SqlValidatorUtil.F_SUGGESTER);
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,107,fieldNames2);
core/src/main/java/org/apache/calcite/rel/rules/CalcRelSplitter.java,597,RexUtil.createStructType(
core/src/main/java/org/apache/calcite/rel/rules/CalcRelSplitter.java,598,typeFactory,
core/src/main/java/org/apache/calcite/rel/rules/CalcRelSplitter.java,599,projectRefs,
core/src/main/java/org/apache/calcite/rel/rules/CalcRelSplitter.java,600,fieldNames);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,183,Join.deriveJoinRowType(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,22,import org.apache.calcite.rel.core.Join;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,128,Join.deriveJoinRowType(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,159,Join.deriveJoinRowType(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,292,public interface FieldInfo {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,321,public static class FieldInfoBuilder implements FieldInfo {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,322,private final List<String> names = new ArrayList<String>();
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,323,private final List<RelDataType> types = new ArrayList<RelDataType>();
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystemImpl.java,48,public int getDefaultPrecision(SqlTypeName typeName) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystemImpl.java,89,public int getMaxPrecision(SqlTypeName typeName) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystemImpl.java,110,public int getMaxNumericScale() {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystemImpl.java,114,public int getMaxNumericPrecision() {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystemImpl.java,118,public String getLiteral(SqlTypeName typeName, boolean isPrefix) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystemImpl.java,143,public boolean isCaseSensitive(SqlTypeName typeName) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystemImpl.java,153,public boolean isAutoincrement(SqlTypeName typeName) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystemImpl.java,157,public int getNumTypeRadix(SqlTypeName typeName) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystemImpl.java,165,public RelDataType deriveSumType(
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,426,return RexUtil.createStructType(
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,427,rexBuilder.typeFactory,
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,428,projectRefList,
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,429,projectNameList);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,595,return createStructType(typeFactory, exprs, null);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,614,final List<String> names) {
core/src/main/java/org/apache/calcite/sql/SqlCall.java,149,if (!this.getOperator().getName().equals(that.getOperator().getName())) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,336,new LinkedHashSet<String>(),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,197,public static String uniquify(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,198,String name,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,199,Set<String> nameList,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,202,if (nameList.add(name)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,208,name = suggester.apply(originalName, j, nameList.size());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,209,if (nameList.add(name)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,218,public static SqlValidatorWithHints newValidator(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,219,SqlOperatorTable opTab,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,220,SqlValidatorCatalogReader catalogReader,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,221,RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,226,SqlConformance.DEFAULT);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,238,public static List<String> uniquify(List<String> nameList) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,239,return uniquify(nameList, EXPR_SUGGESTER);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,244,Suggester suggester) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,669,interface Suggester {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,454,SqlValidatorUtil.uniquify(Pair.left(validatedFields)));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3502,fieldNames = SqlValidatorUtil.uniquify(fieldNames);
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,412,new Function<Tuple2<String, List<String>>, Object>() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,414,return pair._1() + ":" + pair._2().size();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRuntime.java,66,extends FlatMapFunction<T, R>
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRuntime.java,67,implements org.apache.calcite.linq4j.function.Function {
core/src/main/java/org/apache/calcite/model/ModelHandler.java,214,parentSchema, jsonSchema.name, operandMap(jsonSchema.operand));
core/src/main/java/org/apache/calcite/model/ModelHandler.java,223,protected Map<String, Object> operandMap(Map<String, Object> operand) {
core/src/main/java/org/apache/calcite/model/ModelHandler.java,339,operandMap(jsonTable.operand), null);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,429,BASE_DIRECTORY("baseDirectory");
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,417,new EnumerableRules.EnumerableTableAccessRel(
core/src/main/java/org/apache/calcite/sql/SqlSetOption.java,63,new SqlSpecialOperator("SET_OPTION", SqlKind.SET_OPTION);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,118,final Class<?> clazz = Class.forName((String) dataSourceName);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,119,dataSource = (DataSource) clazz.newInstance();
core/src/main/java/org/apache/calcite/jdbc/Driver.java,94,final String model = connection.config().model();
core/src/main/java/org/apache/calcite/jdbc/Driver.java,108,final List<ConnectionProperty> list = new ArrayList<ConnectionProperty>();
core/src/main/java/org/apache/calcite/model/ModelHandler.java,210,final Class clazz = Class.forName(jsonSchema.factory);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,211,final SchemaFactory schemaFactory = (SchemaFactory) clazz.newInstance();
core/src/main/java/org/apache/calcite/model/ModelHandler.java,335,final Class clazz = Class.forName(jsonTable.factory);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,336,final TableFactory tableFactory = (TableFactory) clazz.newInstance();
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,450,try {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,451,return (SqlOperator) Class.forName(class_).newInstance();
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,453,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,455,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,457,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,359,inputPhysType.generateSelector(parameter, groupSet.toList(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,360,set.toList(), keyPhysType.getFormat()));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,416,groupSet.toList(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,697,group.keys.toList(),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,25,import org.apache.calcite.util.IntList;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,127,IntList.toArray(Pair.right(list)));
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,57,import org.apache.calcite.util.IntList;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1320,final IntList targetGroupList = target.getGroupSet().toList();
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,42,import org.apache.calcite.util.IntList;
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,333,final IntList groupList = groupSet.toList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,78,relBuilder.project(relBuilder.fields(aggregate.getGroupSet().toList()));
core/src/main/java/org/apache/calcite/rel/rules/CalcRelSplitter.java,39,import org.apache.calcite.util.IntList;
core/src/main/java/org/apache/calcite/rel/rules/CalcRelSplitter.java,183,IntList projectExprOrdinalList = new IntList();
core/src/main/java/org/apache/calcite/rel/rules/CalcRelSplitter.java,197,projectExprOrdinals = projectExprOrdinalList.toIntArray();
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,33,import org.apache.calcite.util.IntList;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,579,final IntList list = factorRefs.toList();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,33,import org.apache.calcite.util.IntList;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,82,final IntList aggregateKeys = aggregate.getGroupSet().toList();
core/src/main/java/org/apache/calcite/util/BitSets.java,122,public static IntList toList(final BitSet bitSet) {
core/src/main/java/org/apache/calcite/util/BitSets.java,123,final IntList list = new IntList();
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,598,public IntList toList() {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,599,final IntList list = new IntList();
core/src/main/java/org/apache/calcite/util/IntList.java,19,import java.util.AbstractList;
core/src/main/java/org/apache/calcite/util/IntList.java,32,return toArray(this);
core/src/main/java/org/apache/calcite/util/IntList.java,43,final int[] ints = new int[integers.size()];
core/src/main/java/org/apache/calcite/util/IntList.java,44,for (int i = 0; i < ints.length; i++) {
core/src/main/java/org/apache/calcite/util/IntList.java,45,ints[i] = integers.get(i);
core/src/main/java/org/apache/calcite/util/IntList.java,47,return ints;
core/src/main/java/org/apache/calcite/util/IntList.java,60,return new AbstractList<Integer>() {
core/src/main/java/org/apache/calcite/util/IntList.java,61,public Integer get(int index) {
core/src/main/java/org/apache/calcite/util/IntList.java,62,return args[index];
core/src/main/java/org/apache/calcite/util/IntList.java,65,public int size() {
core/src/main/java/org/apache/calcite/util/IntList.java,66,return args.length;
core/src/main/java/org/apache/calcite/util/IntList.java,69,public Integer set(int index, Integer element) {
core/src/main/java/org/apache/calcite/util/IntList.java,70,return args[index] = element;
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,21,import org.apache.calcite.util.IntList;
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,399,return new Permutation(IntList.toArray(targets));
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,410,return new Permutation(IntList.toArray(targetList));
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,327,public CalciteServerStatement getStatement(Meta.StatementHandle h) {
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,328,return statementMap.get(h.id);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,154,CalciteServerStatement stmt = calciteConnection.server.getStatement(h);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,556,CalciteServerStatement statement = calciteConnection.server.getStatement(h);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,565,String sql, long maxRowCount, PrepareCallback callback) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,610,List<TypedValue> parameterValues, long maxRowCount) {
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,51,return iface.cast(getConnection().server.getStatement(handle));
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,68,final CalciteServerStatement serverStatement =
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,69,calciteConnection.server.getStatement(handle);
core/src/main/java/org/apache/calcite/server/CalciteServer.java,33,CalciteServerStatement getStatement(Meta.StatementHandle h);
core/src/main/java/org/apache/calcite/sql/SqlOverOperator.java,70,validator.validateWindow(call.operand(1), scope, aggCall);
core/src/main/java/org/apache/calcite/sql/SqlOverOperator.java,71,validator.validateAggregateParams(aggCall, null, scope);
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,53,AggFinder(SqlOperatorTable opTab, boolean over) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,298,aggFinder = new AggFinder(opTab, false);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,299,aggOrOverFinder = new AggFinder(opTab, true);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4031,if (aggOrOverFinder.findAgg(param) != null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4036,if (aggOrOverFinder.findAgg(filter) != null) {
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,91,throw new Util.FoundOne(call);
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,102,throw new Util.FoundOne(call);
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,118,return super.visit(call);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4521,return null;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4524,translateAgg(call, null, call);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4525,return null;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,328,return cluster.getRexBuilder().makeInputRef(input, fieldOrdinal);
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,207,validator.validateQuery(this, scope);
core/src/main/java/org/apache/calcite/sql/SqlSetOperator.java,90,validator.validateQuery(call, operandScope);
core/src/main/java/org/apache/calcite/sql/SqlUpdate.java,74,sourceExpressionList, condition, sourceSelect, alias);
core/src/main/java/org/apache/calcite/sql/SqlUpdate.java,80,targetTable = (SqlIdentifier) operand;
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorValidator.java,188,protected void validateNamespace(final SqlValidatorNamespace namespace) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorValidator.java,192,super.validateNamespace(namespace);
core/src/main/java/org/apache/calcite/sql/type/ExplicitOperandTypeInference.java,47,assert operandTypes.length == paramTypes.size();
core/src/main/java/org/apache/calcite/sql/validate/AbstractNamespace.java,78,public final void validate() {
core/src/main/java/org/apache/calcite/sql/validate/AbstractNamespace.java,86,RelDataType type = validateImpl();
core/src/main/java/org/apache/calcite/sql/validate/AbstractNamespace.java,120,protected abstract RelDataType validateImpl();
core/src/main/java/org/apache/calcite/sql/validate/AbstractNamespace.java,124,validator.validateNamespace(this);
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,66,protected RelDataType validateImpl() {
core/src/main/java/org/apache/calcite/sql/validate/CollectNamespace.java,67,protected RelDataType validateImpl() {
core/src/main/java/org/apache/calcite/sql/validate/DelegatingNamespace.java,71,public void validate() {
core/src/main/java/org/apache/calcite/sql/validate/DelegatingNamespace.java,72,namespace.validate();
core/src/main/java/org/apache/calcite/sql/validate/FieldNamespace.java,52,protected RelDataType validateImpl() {
core/src/main/java/org/apache/calcite/sql/validate/IdentifierNamespace.java,103,public RelDataType validateImpl() {
core/src/main/java/org/apache/calcite/sql/validate/JoinNamespace.java,41,protected RelDataType validateImpl() {
core/src/main/java/org/apache/calcite/sql/validate/ParameterNamespace.java,45,public RelDataType validateImpl() {
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,51,public RelDataType validateImpl() {
core/src/main/java/org/apache/calcite/sql/validate/SchemaNamespace.java,43,protected RelDataType validateImpl() {
core/src/main/java/org/apache/calcite/sql/validate/SelectNamespace.java,59,public RelDataType validateImpl() {
core/src/main/java/org/apache/calcite/sql/validate/SelectNamespace.java,60,validator.validateSelect(select, validator.unknownType);
core/src/main/java/org/apache/calcite/sql/validate/SetopNamespace.java,92,public RelDataType validateImpl() {
core/src/main/java/org/apache/calcite/sql/validate/SetopNamespace.java,103,validator.validateQuery(operand, scope);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidator.java,171,void validateQuery(SqlNode node, SqlValidatorScope scope);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,820,public void validateQuery(SqlNode node, SqlValidatorScope scope) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,834,validateNamespace(ns);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,847,protected void validateNamespace(final SqlValidatorNamespace namespace) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,848,namespace.validate();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1604,SqlCase caseCall = (SqlCase) node;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1605,RelDataType returnType = deriveType(scope, node);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1607,SqlNodeList whenList = caseCall.getWhenOperands();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1608,for (int i = 0; i < whenList.size(); i++) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1609,SqlNode sqlNode = whenList.get(i);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1610,inferUnknownTypes(unknownType, scope, sqlNode);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1612,SqlNodeList thenList = caseCall.getThenOperands();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1613,for (int i = 0; i < thenList.size(); i++) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1614,SqlNode sqlNode = thenList.get(i);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1618,if (!SqlUtil.isNullLiteral(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1619,caseCall.getElseOperand(),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1620,false)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2757,validateQuery(node, scope);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2763,getNamespace(node, scope).validate();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3178,validateNamespace(namespace);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3591,validateNamespace(targetNamespace);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3609,validateQuery(source, scope);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3748,validateNamespace(targetNamespace);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3758,validateNamespace(targetNamespace);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3792,validateNamespace(targetNamespace);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorNamespace.java,109,void validate();
core/src/main/java/org/apache/calcite/sql/validate/TableConstructorNamespace.java,21,import org.apache.calcite.sql.SqlInsert;
core/src/main/java/org/apache/calcite/sql/validate/TableConstructorNamespace.java,57,protected RelDataType validateImpl() {
core/src/main/java/org/apache/calcite/sql/validate/TableConstructorNamespace.java,60,final RelDataType targetRowType;
core/src/main/java/org/apache/calcite/sql/validate/TableConstructorNamespace.java,61,if (enclosingNode instanceof SqlInsert) {
core/src/main/java/org/apache/calcite/sql/validate/TableConstructorNamespace.java,62,SqlInsert node = (SqlInsert) enclosingNode;
core/src/main/java/org/apache/calcite/sql/validate/TableConstructorNamespace.java,63,targetRowType = validator.getValidatedNodeType(node);
core/src/main/java/org/apache/calcite/sql/validate/TableConstructorNamespace.java,65,targetRowType = validator.getUnknownType();
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,47,protected RelDataType validateImpl() {
core/src/main/java/org/apache/calcite/sql/validate/UnnestNamespace.java,50,protected RelDataType validateImpl() {
core/src/main/java/org/apache/calcite/sql/validate/WithNamespace.java,51,protected RelDataType validateImpl() {
core/src/main/java/org/apache/calcite/sql/validate/WithNamespace.java,57,validator.validateQuery(with.body, scope2);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,184,ArrayList<SqlNode> list = new ArrayList<SqlNode>(0);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,186,list.add(0, ((SqlCall) node).operand(1));
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,187,node = ((SqlCall) node).operand(0);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,232,if (select.orderBy != null) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,791,return new CalciteSqlValidator(opTab, catalogReader, typeFactory);
core/src/main/java/org/apache/calcite/prepare/CalciteSqlValidator.java,28,public CalciteSqlValidator(
core/src/main/java/org/apache/calcite/prepare/CalciteSqlValidator.java,29,SqlOperatorTable opTab,
core/src/main/java/org/apache/calcite/prepare/CalciteSqlValidator.java,30,CalciteCatalogReader catalogReader,
core/src/main/java/org/apache/calcite/prepare/CalciteSqlValidator.java,31,JavaTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/prepare/CalciteSqlValidator.java,32,super(opTab, catalogReader, typeFactory, SqlConformance.DEFAULT);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,175,new CalciteSqlValidator(
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,176,operatorTable, createCatalogReader(), typeFactory);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,232,final SqlValidator validator = new CalciteSqlValidator(operatorTable,
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,233,catalogReader, typeFactory);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,222,return new SqlValidatorImpl(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,223,opTab,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,224,catalogReader,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,225,typeFactory,
core/src/main/java/org/apache/calcite/config/CalciteConnectionProperty.java,87,TYPE_SYSTEM("typeSystem", Type.PLUGIN, null, false);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2161,final SqlNode newFrom =
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2162,registerFrom(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2163,parentScope,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2164,selectScope,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2165,from,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2166,from,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2167,null,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2168,null,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2169,false);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2170,if (newFrom != from) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2171,select.setFrom(newFrom);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2960,validateFrom(select.getFrom(), fromType, fromScope);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3504,RelNode inputRel = bb.root;
core/src/main/java/org/apache/calcite/util/Pair.java,232,return Pair.of(kIterator.next(), vIterator.next());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,355,switch (sourceType.getSqlTypeName()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,356,case CHAR:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,357,switch (targetType.getSqlTypeName()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,358,case VARCHAR:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,359,convert = Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,360,BuiltInMethod.RTRIM.method, convert);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,362,break;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,363,case BINARY:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,364,switch (targetType.getSqlTypeName()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,365,case VARBINARY:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,366,convert = Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,367,BuiltInMethod.RTRIM.method, convert);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,369,break;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,373,truncate:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,376,case VARCHAR:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,391,break truncate;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,394,convert =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,395,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,396,BuiltInMethod.TRUNCATE.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,397,convert,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,398,Expressions.constant(targetPrecision));
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,498,&& (type.getSqlTypeName() == typeName
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,505,>= ((ByteString) value).length()))) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,507,case CHAR:
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,508,if (value instanceof NlsString) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,509,value = ((NlsString) value).rtrim();
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,511,break;
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1224,return s == null ? null
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1226,: s;
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1231,return s == null ? null
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1233,: s;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,22,import org.apache.calcite.linq4j.tree.ParameterExpression;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,28,import org.apache.calcite.util.ImmutableIntList;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,30,import java.lang.reflect.Modifier;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,90,final Expression lambda;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,91,if (withOrdinality) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,92,final BlockBuilder builder2 = new BlockBuilder();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,93,final ParameterExpression o_ = Expressions.parameter(Modifier.FINAL,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,94,result.physType.getJavaRowType(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,96,final Expression list_ = builder2.append("list",
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,97,Expressions.new_(ArrayList.class));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,98,final ParameterExpression i_ = Expressions.parameter(int.class, "i");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,99,final BlockBuilder builder3 = new BlockBuilder();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,100,final Expression v_ =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,101,builder3.append("v",
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,102,Expressions.call(o_, BuiltInMethod.LIST_GET.method, i_));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,103,final List<Expression> expressions = new ArrayList<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,104,final PhysType componentPhysType = result.physType.component(0);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,105,final int fieldCount = componentPhysType.getRowType().getFieldCount();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,106,expressions.addAll(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,107,componentPhysType.accessors(v_,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,108,ImmutableIntList.identity(fieldCount)));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,109,expressions.add(Expressions.add(i_, Expressions.constant(1)));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,110,builder3.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,111,Expressions.statement(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,112,Expressions.call(list_, BuiltInMethod.COLLECTION_ADD.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,113,physType.record(expressions))));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,114,builder2.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,115,Expressions.for_(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,116,Expressions.declare(0, i_, Expressions.constant(0)),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,117,Expressions.lessThan(i_,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,118,Expressions.call(o_, BuiltInMethod.COLLECTION_SIZE.method)),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,119,Expressions.postIncrementAssign(i_),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,120,builder3.toBlock()));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,121,builder2.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,122,Expressions.return_(null,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,123,Expressions.call(BuiltInMethod.AS_ENUMERABLE2.method, list_)));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,124,lambda = Expressions.lambda(builder2.toBlock(), o_);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,126,lambda = Expressions.call(BuiltInMethod.LIST_TO_ENUMERABLE.method);
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,114,private static <T extends Comparable> List<T> flatList_(T[] t, boolean copy) {
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,120,return Collections.singletonList(t[0]);
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,122,return new Flat2List<T>(t[0], t[1]);
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,124,return new Flat3List<T>(t[0], t[1], t[2]);
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,174,return Collections.singletonList(t.get(0));
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1422,public static <E> Function1<List<E>, Enumerable<E>> listToEnumerable() {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1424,return (Function1<List<E>, Enumerable<E>>) (Function1) LIST_AS_ENUMERABLE;
core/src/main/java/org/apache/calcite/sql/SqlUnnestOperator.java,47,OperandTypes.SCALAR_OR_RECORD_COLLECTION);
core/src/main/java/org/apache/calcite/sql/SqlUnnestOperator.java,53,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/SqlUnnestOperator.java,54,SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/SqlUnnestOperator.java,55,RelDataType type = opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/SqlUnnestOperator.java,56,if (type.isStruct()) {
core/src/main/java/org/apache/calcite/sql/SqlUnnestOperator.java,57,type = type.getFieldList().get(0).getType();
core/src/main/java/org/apache/calcite/sql/SqlUnnestOperator.java,59,assert type instanceof ArraySqlType || type instanceof MultisetSqlType;
core/src/main/java/org/apache/calcite/sql/SqlUnnestOperator.java,60,if (withOrdinality) {
core/src/main/java/org/apache/calcite/sql/SqlUnnestOperator.java,61,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/sql/SqlUnnestOperator.java,62,opBinding.getTypeFactory().builder();
core/src/main/java/org/apache/calcite/sql/SqlUnnestOperator.java,66,builder.add(SqlUtil.deriveAliasFromOrdinal(0), type.getComponentType());
core/src/main/java/org/apache/calcite/sql/SqlUnnestOperator.java,68,return builder
core/src/main/java/org/apache/calcite/sql/SqlUnnestOperator.java,70,.build();
core/src/main/java/org/apache/calcite/sql/SqlUnnestOperator.java,72,return type.getComponentType();
core/src/main/java/org/apache/calcite/sql/type/ComparableOperandTypeChecker.java,22,import org.apache.calcite.sql.SqlOperator;
core/src/main/java/org/apache/calcite/sql/type/ComparableOperandTypeChecker.java,24,import org.apache.calcite.sql.SqlUtil;
core/src/main/java/org/apache/calcite/sql/type/ComparableOperandTypeChecker.java,28,import java.util.Collections;
core/src/main/java/org/apache/calcite/sql/type/ComparableOperandTypeChecker.java,102,boolean result;
core/src/main/java/org/apache/calcite/sql/type/ComparableOperandTypeChecker.java,104,< requiredComparability.ordinal()) {
core/src/main/java/org/apache/calcite/sql/type/ComparableOperandTypeChecker.java,105,result = false;
core/src/main/java/org/apache/calcite/sql/type/ComparableOperandTypeChecker.java,107,result = true;
core/src/main/java/org/apache/calcite/sql/type/ComparableOperandTypeChecker.java,109,if (!result) {
core/src/main/java/org/apache/calcite/sql/type/ComparableOperandTypeChecker.java,119,public String getAllowedSignatures(SqlOperator op, String opName) {
core/src/main/java/org/apache/calcite/sql/type/ComparableOperandTypeChecker.java,120,return SqlUtil.getAliasedSignature(op, opName,
core/src/main/java/org/apache/calcite/sql/type/ComparableOperandTypeChecker.java,121,Collections.nCopies(nOperands, "COMPARABLE_TYPE"));
core/src/main/java/org/apache/calcite/sql/type/CompositeOperandTypeChecker.java,83,AND, OR, SEQUENCE
core/src/main/java/org/apache/calcite/sql/type/CompositeOperandTypeChecker.java,105,assert allowedRules.size() > 1;
core/src/main/java/org/apache/calcite/sql/type/CompositeSingleOperandTypeChecker.java,44,super(composition, allowedRules, allowedSignatures);
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,90,ImmutableList.copyOf(rules), null);
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,100,ImmutableList.copyOf(rules), null);
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,132,ImmutableList.copyOf(rules), allowedSignatures);
core/src/main/java/org/apache/calcite/sql/type/SameOperandTypeChecker.java,142,: Collections.nCopies(nOperands, "EQUIVALENT_TYPE"));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2051,final SqlNode node = call.operand(0);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2053,replaceSubqueries(bb, node, RelOptUtil.Logic.TRUE_FALSE_UNKNOWN);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2054,final RelNode childRel =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2057,Collections.singletonList(bb.convertExpression(node)),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2058,Collections.singletonList(validator.deriveAlias(node, 0)),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2059,true);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2063,childRel, operator.withOrdinality);
core/src/main/java/org/apache/calcite/util/BuiltInMethod.java,188,LIST_TO_ENUMERABLE(SqlFunctions.class, "listToEnumerable"),
linq4j/src/main/java/org/apache/calcite/linq4j/CartesianProductEnumerator.java,19,import java.util.Arrays;
linq4j/src/main/java/org/apache/calcite/linq4j/CartesianProductEnumerator.java,27,class CartesianProductEnumerator<T> implements Enumerator<List<T>> {
linq4j/src/main/java/org/apache/calcite/linq4j/CartesianProductEnumerator.java,29,private final T[] elements;
linq4j/src/main/java/org/apache/calcite/linq4j/CartesianProductEnumerator.java,32,public CartesianProductEnumerator(List<Enumerator<T>> enumerators) {
linq4j/src/main/java/org/apache/calcite/linq4j/CartesianProductEnumerator.java,38,public List<T> current() {
linq4j/src/main/java/org/apache/calcite/linq4j/CartesianProductEnumerator.java,39,return Arrays.asList(elements.clone());
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,387,return new CartesianProductEnumerator<>(enumerators);
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,400,new CartesianProductEnumerator<>(enumerators));
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,450,public IterableEnumerator(Iterable<? extends T> iterable) {
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,662,public EnumeratorIterator(Enumerator<T> enumerator) {
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,691,public ListEnumerator(List<? extends V> list) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3926,assert isParent;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4102,List<String> origin = getFieldOrigin(sqlQuery, i);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4104,list.add(origin);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4106,return list;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4135,return null;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,479,throw new AssertionError("interpreter: no implementation for "
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,480,+ p.getClass());
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,128,operandList);
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,147,operandList);
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,167,return new RelOptRuleOperand(clazz, trait, predicate, operandList);
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,188,return new RelOptRuleOperand(clazz, trait, predicate, some(first, rest));
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,232,return new RelOptRuleOperandChildren(
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,233,RelOptRuleOperandChildPolicy.SOME,
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,235,.add(rest).build());
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,271,.add(rest).build());
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,560,public static List<RelNode> convertList(
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,561,List<RelNode> rels,
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperand.java,85,switch (children.policy) {
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperand.java,89,assert children.operands.size() == 0;
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperand.java,92,assert children.operands.size() == 1;
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperand.java,95,assert children.operands.size() > 0;
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperand.java,97,this.childPolicy = children.policy;
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperand.java,102,this.children = children.operands;
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperandChildren.java,47,ImmutableList<RelOptRuleOperand> operands) {
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperandChildren.java,49,this.operands = operands;
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,22,import org.apache.calcite.plan.RelOptRuleOperand;
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,68,super(new ConverterRelOptRuleOperand(clazz, in, predicate),
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,128,private static class ConverterRelOptRuleOperand extends RelOptRuleOperand {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,129,public <R extends RelNode> ConverterRelOptRuleOperand(Class<R> clazz,
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,130,RelTrait in, Predicate<? super R> predicate) {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,131,super(clazz, in, predicate, any());
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,134,public boolean matches(RelNode rel) {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,138,if (rel instanceof Converter) {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,140,== ((Converter) rel).getTraitDef()) {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,141,return false;
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,144,return super.matches(rel);
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,36,new AggregateRemoveRule();
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,43,private AggregateRemoveRule() {
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,51,operand(LogicalAggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,58,final LogicalAggregate aggregate = call.rel(0);
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,52,throw Throwables.propagate(e);
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,74,if (e.getCause() instanceof RuntimeException) {
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,75,throw (RuntimeException) e.getCause();
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,77,throw (Error) e.getCause();
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,279,final SqlValidator validator =
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,280,createSqlValidator(catalogReader, typeFactory);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,717,createSqlValidator(catalogReader, typeFactory);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,786,private SqlValidator createSqlValidator(CalciteCatalogReader catalogReader,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,787,JavaTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,789,ChainedSqlOperatorTable.of(SqlStdOperatorTable.instance(),
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,790,catalogReader);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1128,return prepare.createSqlValidator(
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1129,(CalciteCatalogReader) catalogReader,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1130,(JavaTypeFactory) typeFactory);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,193,final SqlAvgAggFunction.Subtype subtype =
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,194,((SqlAvgAggFunction) oldCall.getAggregation()).getSubtype();
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,195,switch (subtype) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,226,throw Util.unexpected(subtype);
core/src/main/java/org/apache/calcite/sql/SqlKind.java,870,EnumSet.of(OTHER_FUNCTION, ROW, TRIM, CAST, JDBC_FN);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1100,public static final SqlFunction TRIM = new SqlTrimFunction();
core/src/main/java/org/apache/calcite/sql/fun/SqlTrimFunction.java,79,public SqlTrimFunction() {
core/src/main/java/org/apache/calcite/sql/fun/SqlTrimFunction.java,80,super(
core/src/main/java/org/apache/calcite/sql/fun/SqlTrimFunction.java,82,SqlKind.TRIM,
core/src/main/java/org/apache/calcite/sql/fun/SqlTrimFunction.java,83,ReturnTypes.cascade(
core/src/main/java/org/apache/calcite/sql/fun/SqlTrimFunction.java,84,ReturnTypes.ARG2,
core/src/main/java/org/apache/calcite/sql/fun/SqlTrimFunction.java,85,SqlTypeTransforms.TO_NULLABLE,
core/src/main/java/org/apache/calcite/sql/fun/SqlTrimFunction.java,86,SqlTypeTransforms.TO_VARYING),
core/src/main/java/org/apache/calcite/sql/fun/SqlTrimFunction.java,87,null,
core/src/main/java/org/apache/calcite/sql/fun/SqlTrimFunction.java,88,OperandTypes.and(
core/src/main/java/org/apache/calcite/sql/fun/SqlTrimFunction.java,89,OperandTypes.family(
core/src/main/java/org/apache/calcite/sql/fun/SqlTrimFunction.java,90,SqlTypeFamily.ANY, SqlTypeFamily.STRING, SqlTypeFamily.STRING),
core/src/main/java/org/apache/calcite/sql/fun/SqlTrimFunction.java,92,new SameOperandTypeChecker(3) {
core/src/main/java/org/apache/calcite/sql/fun/SqlTrimFunction.java,94,getOperandList(int operandCount) {
core/src/main/java/org/apache/calcite/sql/fun/SqlTrimFunction.java,95,return ImmutableList.of(1, 2);
core/src/main/java/org/apache/calcite/sql/fun/SqlTrimFunction.java,161,return SqlTypeUtil.isCharTypeComparable(callBinding,
core/src/main/java/org/apache/calcite/sql/fun/SqlTrimFunction.java,162,ImmutableList.of(callBinding.operand(1), callBinding.operand(2)),
core/src/main/java/org/apache/calcite/sql/fun/SqlTrimFunction.java,163,throwOnFailure);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,52,import org.apache.calcite.sql.fun.SqlAvgAggFunction;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,222,new AvgVarianceConvertlet(SqlAvgAggFunction.Subtype.AVG));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,225,new AvgVarianceConvertlet(SqlAvgAggFunction.Subtype.STDDEV_POP));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,228,new AvgVarianceConvertlet(SqlAvgAggFunction.Subtype.STDDEV_SAMP));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,231,new AvgVarianceConvertlet(SqlAvgAggFunction.Subtype.VAR_POP));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,234,new AvgVarianceConvertlet(SqlAvgAggFunction.Subtype.VAR_SAMP));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,300,final List<RexNode> exprList = new ArrayList<RexNode>();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,795,List<Integer> list = new ArrayList<Integer>();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,991,final List<RexNode> columns = new ArrayList<RexNode>();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1091,private final SqlAvgAggFunction.Subtype subtype;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1093,public AvgVarianceConvertlet(SqlAvgAggFunction.Subtype subtype) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1094,this.subtype = subtype;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1101,switch (subtype) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1118,throw Util.unexpected(subtype);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1890,map.keySet().retainAll(
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1891,Lists.transform(RelOptUtil.conjunctions(node), TO_STRING));
core/src/main/java/org/apache/calcite/plan/RelOptCluster.java,84,setMetadataProvider(new DefaultRelMetadataProvider());
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,207,new DefaultRelMetadataProvider());
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,276,new DefaultRelMetadataProvider());
core/src/main/java/org/apache/calcite/rel/metadata/DefaultRelMetadataProvider.java,35,public DefaultRelMetadataProvider() {
core/src/main/java/org/apache/calcite/rel/metadata/NullSentinel.java,21,enum NullSentinel {
core/src/main/java/org/apache/calcite/rel/metadata/NullSentinel.java,22,INSTANCE;
core/src/main/java/org/apache/calcite/rel/metadata/NullSentinel.java,24,static Comparable mask(Comparable value) {
core/src/main/java/org/apache/calcite/rel/metadata/NullSentinel.java,31,static Object mask(Object value) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,30,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,31,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,32,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,77,Class<? extends Metadata> metadataClass0) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,101,Object target) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,107,public static RelMetadataProvider reflectiveSource(Object target,
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,112,private static RelMetadataProvider reflectiveSource(final Object target,
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,114,assert methods.size() > 0;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,115,final Method method0 = methods.get(0);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,117,final Class<Metadata> metadataClass0 = (Class) method0.getDeclaringClass();
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,118,assert Metadata.class.isAssignableFrom(metadataClass0);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,119,for (Method method : methods) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,120,assert method.getDeclaringClass() == metadataClass0;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,125,final Set<Class<RelNode>> classes = Sets.newHashSet();
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,126,final Map<Pair<Class<RelNode>, Method>, Method> handlerMap =
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,127,Maps.newHashMap();
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,128,for (final Method handlerMethod : target.getClass().getMethods()) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,129,for (Method method : methods) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,130,if (couldImplement(handlerMethod, method)) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,132,(Class<RelNode>) handlerMethod.getParameterTypes()[0];
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,133,classes.add(relNodeClass);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,134,handlerMap.put(Pair.of(relNodeClass, method), handlerMethod);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,144,for (Class<RelNode> key : classes) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,148,builder.add(find(handlerMap, key, method));
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,156,metadataClass0.getClassLoader(),
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,157,new Class[]{metadataClass0},
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,173,return metadataClass0.getSimpleName() + "(" + rel
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,209,if (!mq.set.add(key)) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,219,mq.set.remove(key);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,227,return new ReflectiveRelMetadataProvider(methodsMap, metadataClass0);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,234,private static Method find(Map<Pair<Class<RelNode>, Method>,
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,235,Method> handlerMap, Class<RelNode> relNodeClass, Method method) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,236,List<Class<RelNode>> newSources = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,237,Method implementingMethod;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,238,while (relNodeClass != null) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,239,implementingMethod = handlerMap.get(Pair.of(relNodeClass, method));
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,240,if (implementingMethod != null) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,241,return implementingMethod;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,243,newSources.add(relNodeClass);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,245,for (Class<?> clazz : relNodeClass.getInterfaces()) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,246,if (RelNode.class.isAssignableFrom(clazz)) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,247,implementingMethod = handlerMap.get(Pair.of(clazz, method));
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,248,if (implementingMethod != null) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,249,return implementingMethod;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,253,if (RelNode.class.isAssignableFrom(relNodeClass.getSuperclass())) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,254,relNodeClass = (Class<RelNode>) relNodeClass.getSuperclass();
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,256,relNodeClass = null;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,259,return null;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,70,public class RelMdCollation {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnOrigins.java,45,public class RelMdColumnOrigins {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,58,public class RelMdColumnUniqueness {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistinctRowCount.java,48,public class RelMdDistinctRowCount {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistribution.java,49,public class RelMdDistribution {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExplainVisibility.java,27,public class RelMdExplainVisibility {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdMaxRowCount.java,41,public class RelMdMaxRowCount {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdMemory.java,30,public class RelMdMemory {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdParallelism.java,33,public class RelMdParallelism {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPercentageOriginalRows.java,36,public class RelMdPercentageOriginalRows {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPopulationSize.java,39,public class RelMdPopulationSize {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,118,public class RelMdPredicates {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,47,public class RelMdRowCount {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdSelectivity.java,41,public class RelMdSelectivity {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdSize.java,59,public class RelMdSize {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,46,public class RelMdUniqueKeys {
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,33,import java.util.HashSet;
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,72,public abstract class RelMetadataQuery {
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,74,public final Set<List> set = new HashSet<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,83,return new RelMetadataQuery() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,97,final BuiltInMetadata.RowCount metadata =
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,98,rel.metadata(BuiltInMetadata.RowCount.class, this);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,99,Double result = metadata.getRowCount();
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,100,return validateResult(result);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,112,final BuiltInMetadata.MaxRowCount metadata =
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,113,rel.metadata(BuiltInMetadata.MaxRowCount.class, this);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,114,return metadata.getMaxRowCount();
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,126,final BuiltInMetadata.CumulativeCost metadata =
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,127,rel.metadata(BuiltInMetadata.CumulativeCost.class, this);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,128,return metadata.getCumulativeCost();
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,140,final BuiltInMetadata.NonCumulativeCost metadata =
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,141,rel.metadata(BuiltInMetadata.NonCumulativeCost.class, this);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,142,return metadata.getNonCumulativeCost();
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,155,final BuiltInMetadata.PercentageOriginalRows metadata =
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,156,rel.metadata(BuiltInMetadata.PercentageOriginalRows.class, this);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,157,Double result = metadata.getPercentageOriginalRows();
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,158,assert isPercentage(result, true);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,159,return result;
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,174,final BuiltInMetadata.ColumnOrigin metadata =
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,175,rel.metadata(BuiltInMetadata.ColumnOrigin.class, this);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,176,return metadata.getColumnOrigins(column);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,232,final BuiltInMetadata.Selectivity metadata =
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,233,rel.metadata(BuiltInMetadata.Selectivity.class, this);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,234,Double result = metadata.getSelectivity(predicate);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,235,assert isPercentage(result, true);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,236,return result;
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,249,final BuiltInMetadata.UniqueKeys metadata =
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,250,rel.metadata(BuiltInMetadata.UniqueKeys.class, this);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,251,return metadata.getUniqueKeys(false);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,268,final BuiltInMetadata.UniqueKeys metadata =
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,269,rel.metadata(BuiltInMetadata.UniqueKeys.class, this);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,270,return metadata.getUniqueKeys(ignoreNulls);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,285,final BuiltInMetadata.ColumnUniqueness metadata =
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,286,rel.metadata(BuiltInMetadata.ColumnUniqueness.class, this);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,289,return metadata.areColumnsUnique(columns, false);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,305,final BuiltInMetadata.ColumnUniqueness metadata =
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,306,rel.metadata(BuiltInMetadata.ColumnUniqueness.class, this);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,307,return metadata.areColumnsUnique(columns, false);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,325,final BuiltInMetadata.ColumnUniqueness metadata =
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,326,rel.metadata(BuiltInMetadata.ColumnUniqueness.class, this);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,327,return metadata.areColumnsUnique(columns, ignoreNulls);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,340,final BuiltInMetadata.Collation metadata =
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,341,rel.metadata(BuiltInMetadata.Collation.class, this);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,342,return metadata.collations();
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,355,final BuiltInMetadata.Distribution metadata =
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,356,rel.metadata(BuiltInMetadata.Distribution.class, this);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,357,return metadata.distribution();
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,374,final BuiltInMetadata.PopulationSize metadata =
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,375,rel.metadata(BuiltInMetadata.PopulationSize.class, this);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,376,Double result = metadata.getPopulationSize(groupKey);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,377,return validateResult(result);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,389,final BuiltInMetadata.Size metadata =
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,390,rel.metadata(BuiltInMetadata.Size.class, this);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,391,return metadata.averageRowSize();
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,405,final BuiltInMetadata.Size metadata =
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,406,rel.metadata(BuiltInMetadata.Size.class, this);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,407,return metadata.averageColumnSizes();
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,413,final BuiltInMetadata.Size metadata =
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,414,rel.metadata(BuiltInMetadata.Size.class, this);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,415,final List<Double> averageColumnSizes = metadata.averageColumnSizes();
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,432,final BuiltInMetadata.Parallelism metadata =
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,433,rel.metadata(BuiltInMetadata.Parallelism.class, this);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,434,return metadata.isPhaseTransition();
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,446,final BuiltInMetadata.Parallelism metadata =
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,447,rel.metadata(BuiltInMetadata.Parallelism.class, this);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,448,return metadata.splitCount();
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,462,final BuiltInMetadata.Memory metadata =
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,463,rel.metadata(BuiltInMetadata.Memory.class, this);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,464,return metadata.memory();
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,478,final BuiltInMetadata.Memory metadata =
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,479,rel.metadata(BuiltInMetadata.Memory.class, this);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,480,return metadata.cumulativeMemoryWithinPhase();
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,494,final BuiltInMetadata.Memory metadata =
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,495,rel.metadata(BuiltInMetadata.Memory.class, this);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,496,return metadata.cumulativeMemoryWithinPhaseSplit();
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,514,final BuiltInMetadata.DistinctRowCount metadata =
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,515,rel.metadata(BuiltInMetadata.DistinctRowCount.class, this);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,516,Double result = metadata.getDistinctRowCount(groupKey, predicate);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,517,return validateResult(result);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,529,final BuiltInMetadata.Predicates metadata =
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,530,rel.metadata(BuiltInMetadata.Predicates.class, this);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,531,return metadata.getPredicates();
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,546,final BuiltInMetadata.ExplainVisibility metadata =
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,547,rel.metadata(BuiltInMetadata.ExplainVisibility.class, this);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,548,Boolean b = metadata.isVisibleInExplain(explainLevel);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,549,return b == null || b;
core/src/main/java/org/apache/calcite/tools/Programs.java,105,calc(new DefaultRelMetadataProvider());
core/src/main/java/org/apache/calcite/tools/Programs.java,109,subquery(new DefaultRelMetadataProvider());
core/src/main/java/org/apache/calcite/tools/Programs.java,236,of(hep, false, new DefaultRelMetadataProvider());
core/src/main/java/org/apache/calcite/tools/Programs.java,282,return standard(new DefaultRelMetadataProvider());
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,150,return Collections.singletonList(t[0]);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,255,initBlock.add(accPhysType.record(initExpressions));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,188,for (Types.RecordField field : type.getRecordFields()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,189,final ParameterExpression parameter =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,190,Expressions.parameter(field.getType(), field.getName());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,191,parameters.add(parameter);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,192,blockBuilder.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,193,Expressions.statement(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,194,Expressions.assign(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,195,Expressions.field(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,196,thisParameter,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,197,field),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,198,parameter)));
avatica/src/main/java/org/apache/calcite/avatica/AvaticaConnection.java,520,statement.updateCount =
avatica/src/main/java/org/apache/calcite/avatica/AvaticaConnection.java,521,((Number) ((List<Object>) obj).get(0)).intValue();
avatica/src/main/java/org/apache/calcite/avatica/MetaImpl.java,121,Iterable<Object> iterable, List<List<Object>> list) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,601,final List<List<Object>> list = new ArrayList<>();
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,602,List<List<Object>> rows =
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,604,LimitIterator.of(iterator, fetchMaxRowCount), list);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,605,boolean done = fetchMaxRowCount == 0 || list.size() < fetchMaxRowCount;
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,606,return new Meta.Frame(offset, done, (List<Object>) (List) rows);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,614,final Iterator<Object> iterator;
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,616,final Iterable<Object> iterable =
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,617,_createIterable(h, signature, parameterValues, null);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,618,iterator = iterable.iterator();
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,619,stmt.setResultSet(iterator);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,626,final List<List<Object>> list = new ArrayList<>();
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,627,List<List<Object>> rows =
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,628,MetaImpl.collect(signature.cursorFactory,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,629,LimitIterator.of(iterator, maxRowCount), list);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,630,final boolean done = maxRowCount == 0 || list.size() < maxRowCount;
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,632,new Meta.Frame(0, done, (List<Object>) (List) rows);
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,202,public static Enumerable<Row> toRow(final Enumerable<Object[]> enumerator) {
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,203,return enumerator.select(ARRAY_TO_ROW);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,230,return litmus.fail("contains " + correlationId);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1669,return litmus.fail("type mismatch:\n"
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1670,+ desc1 + ":\n"
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1671,+ type1.getFullTypeString() + "\n"
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1672,+ desc2 + ":\n"
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1673,+ type2.getFullTypeString());
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1697,return litmus.fail("Type mismatch:\n"
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1698,+ desc1 + ":\n"
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1699,+ type1.getFullTypeString() + "\n"
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1700,+ desc2 + ":\n"
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1701,+ type2.getFullTypeString());
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,378,&& litmus.check(Util.isDistinct(getRowType().getFieldNames()), getRowType());
core/src/main/java/org/apache/calcite/rel/core/Join.java,158,return litmus.fail("condition must be boolean: "
core/src/main/java/org/apache/calcite/rel/core/Join.java,159,+ condition.getType());
core/src/main/java/org/apache/calcite/rel/core/Project.java,188,+ " failures in expression " + exp);
core/src/main/java/org/apache/calcite/rel/core/Project.java,192,return litmus.fail("field names not distinct: " + rowType);
core/src/main/java/org/apache/calcite/rel/core/Project.java,208,return litmus.fail("duplicate expressions: " + exps);
core/src/main/java/org/apache/calcite/rex/RexChecker.java,114,return litmus.fail("RexInputRef index " + index
core/src/main/java/org/apache/calcite/rex/RexChecker.java,115,+ " out of range 0.." + (inputTypeList.size() - 1));
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,277,return litmus.fail("not a constant: " + o1);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,285,return litmus.fail("not a constant: " + entry.getKey());
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,288,return litmus.fail("not a constant: " + entry.getValue());
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,293,return litmus.fail("not a constant: " + o);
core/src/main/java/org/apache/calcite/rex/RexProgram.java,769,return litmus.fail("Program is not normalized:\n"
core/src/main/java/org/apache/calcite/rex/RexProgram.java,770,+ "program:    " + string + "\n"
core/src/main/java/org/apache/calcite/rex/RexProgram.java,771,+ "normalized: " + normalized + "\n");
core/src/main/java/org/apache/calcite/rex/RexUtil.java,524,return litmus.fail("illegal forward reference in " + expr);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,545,return litmus.fail("contains non trivial agg: " + operand);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,683,return litmus.fail("expr[" + i + "] is not a RexInputRef");
core/src/main/java/org/apache/calcite/rex/RexUtil.java,687,return litmus.fail("expr[" + i + "] has ordinal "
core/src/main/java/org/apache/calcite/rex/RexUtil.java,688,+ inputRef.getIndex());
core/src/main/java/org/apache/calcite/sql/SqlBinaryOperator.java,220,return litmus.fail("wrong operand count " + count + " for " + this);
core/src/main/java/org/apache/calcite/sql/SqlCall.java,143,return litmus.fail(this + "!=" + node);
core/src/main/java/org/apache/calcite/sql/SqlCall.java,150,return litmus.fail(this + "!=" + node);
core/src/main/java/org/apache/calcite/sql/SqlDataTypeSpec.java,240,return litmus.fail(this + "!=" + node);
core/src/main/java/org/apache/calcite/sql/SqlDataTypeSpec.java,252,return litmus.fail(this + "!=" + node);
core/src/main/java/org/apache/calcite/sql/SqlDataTypeSpec.java,255,return litmus.fail(this + "!=" + node);
core/src/main/java/org/apache/calcite/sql/SqlDataTypeSpec.java,258,return litmus.fail(this + "!=" + node);
core/src/main/java/org/apache/calcite/sql/SqlDataTypeSpec.java,262,return litmus.fail(this + "!=" + node);
core/src/main/java/org/apache/calcite/sql/SqlDynamicParam.java,82,return litmus.fail(this + "!=" + node);
core/src/main/java/org/apache/calcite/sql/SqlDynamicParam.java,86,return litmus.fail(this + "!=" + node);
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,292,return litmus.fail(this + "!=" + node);
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,296,return litmus.fail(this + "!=" + node);
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,300,return litmus.fail(this + "!=" + node);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,150,return litmus.fail(this + "!=" + node);
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,409,return litmus.fail(this + "!=" + node);
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,413,return litmus.fail(this + "!=" + node);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,158,return litmus.fail(this + "!=" + node);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,162,return litmus.fail(this + "!=" + node);
core/src/main/java/org/apache/calcite/sql/SqlPostfixOperator.java,94,return litmus.fail("wrong operand count " + count + " for " + this);
core/src/main/java/org/apache/calcite/sql/SqlPrefixOperator.java,103,return litmus.fail("wrong operand count " + count + " for " + this);
core/src/main/java/org/apache/calcite/sql/fun/SqlInOperator.java,90,return litmus.fail("wrong operand count " + count + " for " + this);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,620,return litmus.fail("wrong operand count " + count + " for " + this);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1329,return ret.fail("out of range; value: " + value + ", limit: " + limit);
core/src/main/java/org/apache/calcite/util/Litmus.java,26,public boolean fail(String message) {
core/src/main/java/org/apache/calcite/util/Litmus.java,27,throw new AssertionError(message);
core/src/main/java/org/apache/calcite/util/Litmus.java,34,public boolean check(boolean condition, Object info) {
core/src/main/java/org/apache/calcite/util/Litmus.java,38,return fail(info == null ? null : info.toString());
core/src/main/java/org/apache/calcite/util/Litmus.java,46,public boolean fail(String message) {
core/src/main/java/org/apache/calcite/util/Litmus.java,54,public boolean check(boolean condition, Object info) {
core/src/main/java/org/apache/calcite/util/Litmus.java,60,boolean fail(String message);
core/src/main/java/org/apache/calcite/util/Litmus.java,71,boolean check(boolean condition, Object info);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistribution.java,66,public RelDistribution distribution(RelMetadataQuery mq, RelNode rel) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistribution.java,70,public RelDistribution distribution(RelMetadataQuery mq, SingleRel rel) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistribution.java,74,public RelDistribution distribution(RelMetadataQuery mq, BiRel rel) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistribution.java,78,public RelDistribution distribution(RelMetadataQuery mq, SetOp rel) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistribution.java,82,public RelDistribution distribution(RelMetadataQuery mq, TableScan scan) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistribution.java,86,public RelDistribution distribution(RelMetadataQuery mq, Project project) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistribution.java,90,public RelDistribution distribution(RelMetadataQuery mq, Values values) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistribution.java,94,public RelDistribution distribution(RelMetadataQuery mq, Exchange exchange) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistribution.java,98,public RelDistribution distribution(RelMetadataQuery mq, HepRelVertex rel) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,376,final RexBuilder rexBuilder = oldAggRel.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,397,oldAggRel.getGroupCount(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,398,oldAggRel.getInput(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,399,null,
avatica/src/main/java/org/apache/calcite/avatica/AvaticaParameter.java,75,final int prime = 31;
avatica/src/main/java/org/apache/calcite/avatica/AvaticaParameter.java,76,int result = 1;
avatica/src/main/java/org/apache/calcite/avatica/AvaticaParameter.java,77,result = prime * result + ((className == null) ? 0 : className.hashCode());
avatica/src/main/java/org/apache/calcite/avatica/AvaticaParameter.java,78,result = prime * result + ((name == null) ? 0 : name.hashCode());
avatica/src/main/java/org/apache/calcite/avatica/AvaticaParameter.java,79,result = prime * result + parameterType;
avatica/src/main/java/org/apache/calcite/avatica/AvaticaParameter.java,80,result = prime * result + precision;
avatica/src/main/java/org/apache/calcite/avatica/AvaticaParameter.java,81,result = prime * result + scale;
avatica/src/main/java/org/apache/calcite/avatica/AvaticaParameter.java,82,result = prime * result + (signed ? 1231 : 1237);
avatica/src/main/java/org/apache/calcite/avatica/AvaticaParameter.java,83,result = prime * result + ((typeName == null) ? 0 : typeName.hashCode());
avatica/src/main/java/org/apache/calcite/avatica/AvaticaParameter.java,84,return result;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,217,final int prime = 31;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,218,int result = 1;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,219,result = prime * result + (autoIncrement ? 1231 : 1237);
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,220,result = prime * result + (caseSensitive ? 1231 : 1237);
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,221,result = prime * result + ((catalogName == null) ? 0 : catalogName.hashCode());
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,222,result = prime * result + ((columnClassName == null) ? 0 : columnClassName.hashCode());
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,223,result = prime * result + ((columnName == null) ? 0 : columnName.hashCode());
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,224,result = prime * result + (currency ? 1231 : 1237);
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,225,result = prime * result + (definitelyWritable ? 1231 : 1237);
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,226,result = prime * result + displaySize;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,227,result = prime * result + ((label == null) ? 0 : label.hashCode());
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,228,result = prime * result + nullable;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,229,result = prime * result + ordinal;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,230,result = prime * result + precision;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,231,result = prime * result + (readOnly ? 1231 : 1237);
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,232,result = prime * result + scale;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,233,result = prime * result + ((schemaName == null) ? 0 : schemaName.hashCode());
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,234,result = prime * result + (searchable ? 1231 : 1237);
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,235,result = prime * result + (signed ? 1231 : 1237);
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,236,result = prime * result + ((tableName == null) ? 0 : tableName.hashCode());
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,237,result = prime * result + ((type == null) ? 0 : type.hashCode());
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,238,result = prime * result + (writable ? 1231 : 1237);
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,239,return result;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,243,if (obj == this) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,244,return true;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,246,if (obj instanceof ColumnMetaData) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,247,ColumnMetaData other = (ColumnMetaData) obj;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,249,if (autoIncrement != other.autoIncrement) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,250,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,253,if (caseSensitive != other.caseSensitive) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,254,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,257,if (null == catalogName) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,258,if (null != other.catalogName) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,259,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,262,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,265,if (null == columnClassName) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,266,if (null != other.columnClassName) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,267,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,270,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,273,if (null == columnName) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,274,if (null != other.columnName) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,275,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,278,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,281,if (currency != other.currency) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,282,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,285,if (definitelyWritable != other.definitelyWritable) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,286,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,289,if (displaySize != other.displaySize) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,290,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,293,if (null == label) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,294,if (null != other.label) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,295,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,298,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,301,if (nullable != other.nullable) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,302,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,305,if (ordinal != other.ordinal) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,306,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,309,if (precision != other.precision) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,310,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,313,if (readOnly != other.readOnly) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,314,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,317,if (scale != other.scale) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,318,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,321,if (null == schemaName) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,322,if (null != other.schemaName) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,323,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,326,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,329,if (searchable != other.searchable) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,330,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,333,if (signed != other.signed) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,334,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,337,if (null == tableName) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,338,if (null != other.tableName) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,339,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,342,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,345,if (null == type) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,346,if (null != other.type) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,347,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,350,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,353,if (writable != other.writable) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,354,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,357,return true;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,360,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,606,final int prime = 31;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,607,int result = 1;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,608,result = prime * result + id;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,609,result = prime * result + ((name == null) ? 0 : name.hashCode());
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,610,result = prime * result + ((rep == null) ? 0 : rep.hashCode());
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,611,return result;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,615,if (o == this) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,616,return true;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,618,if (o instanceof AvaticaType) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,619,AvaticaType other = (AvaticaType) o;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,621,if (id != other.id) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,622,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,625,if (name == null) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,626,if (other.name != null) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,627,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,630,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,633,if (rep != other.rep) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,634,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,637,return true;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,640,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,677,return 31 * (super.hashCode() + (null == columns ? 0 : columns.hashCode()));
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,681,if (o == this) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,682,return true;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,684,if (!super.equals(o)) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,685,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,688,if (o instanceof StructType) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,689,StructType other = (StructType) o;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,691,if (null == columns) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,692,if (null != other.columns) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,693,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,697,return columns.equals(other.columns);
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,700,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,727,return 31 * (super.hashCode() + (null == component ? 0 : component.hashCode()));
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,731,if (o == this) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,732,return true;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,734,if (!super.equals(o)) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,735,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,738,if (o instanceof ArrayType) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,739,ArrayType other = (ArrayType) o;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,741,if (null == component) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,742,if (null != other.component) {
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,743,return false;
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,747,return component.equals(other.component);
avatica/src/main/java/org/apache/calcite/avatica/ColumnMetaData.java,750,return false;
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,184,final int prime = 31;
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,185,int result = 1;
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,186,result = prime * result + ((autoCommit == null) ? 0 : autoCommit.hashCode());
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,187,result = prime * result + ((catalog == null) ? 0 : catalog.hashCode());
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,188,result = prime * result + (isDirty ? 1231 : 1237);
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,189,result = prime * result + ((readOnly == null) ? 0 : readOnly.hashCode());
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,190,result = prime * result + ((schema == null) ? 0 : schema.hashCode());
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,191,result = prime * result
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,192,+ ((transactionIsolation == null) ? 0 : transactionIsolation.hashCode());
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,193,return result;
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,197,if (o == this) {
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,198,return true;
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,200,if (o instanceof ConnectionPropertiesImpl) {
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,201,ConnectionPropertiesImpl other = (ConnectionPropertiesImpl) o;
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,203,if (null == autoCommit) {
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,204,if (null != other.autoCommit) {
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,205,return false;
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,208,return false;
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,211,if (null == catalog) {
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,212,if (null != other.catalog) {
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,213,return false;
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,216,return false;
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,219,if (isDirty != other.isDirty) {
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,220,return false;
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,223,if (null == readOnly) {
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,224,if (null != other.readOnly) {
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,225,return false;
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,228,return false;
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,231,if (null == schema) {
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,232,if (null != other.schema) {
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,233,return false;
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,236,return false;
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,239,if (null == transactionIsolation) {
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,240,if (null != other.transactionIsolation) {
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,241,return false;
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,244,return false;
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,247,return true;
avatica/src/main/java/org/apache/calcite/avatica/ConnectionPropertiesImpl.java,250,return false;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,602,final int prime = 31;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,603,int result = 1;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,604,result = prime * result + ((clazz == null) ? 0 : clazz.hashCode());
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,605,result = prime * result + ((fieldNames == null) ? 0 : fieldNames.hashCode());
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,606,result = prime * result + ((fields == null) ? 0 : fields.hashCode());
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,607,result = prime * result + ((style == null) ? 0 : style.hashCode());
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,608,return result;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,612,if (o == this) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,613,return true;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,615,if (o instanceof CursorFactory) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,616,CursorFactory other = (CursorFactory) o;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,618,if (null == clazz) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,619,if (null != other.clazz) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,620,return false;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,623,return false;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,626,if (null == fieldNames) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,627,if (null != other.fieldNames) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,628,return false;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,631,return false;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,634,if (null == fields) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,635,if (null != other.fields) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,636,return false;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,639,return false;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,642,return style == other.style;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,645,return false;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,669,public class Signature {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,787,final int prime = 31;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,788,int result = 1;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,789,result = prime * result + ((columns == null) ? 0 : columns.hashCode());
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,790,result = prime * result + ((cursorFactory == null) ? 0 : cursorFactory.hashCode());
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,791,result = prime * result + ((parameters == null) ? 0 : parameters.hashCode());
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,792,result = prime * result + ((sql == null) ? 0 : sql.hashCode());
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,793,return result;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,797,if (o == this) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,798,return true;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,800,if (o instanceof Signature) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,801,Signature other = (Signature) o;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,803,if (null == columns) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,804,if (null != other.columns) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,805,return false;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,808,return false;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,811,if (null == cursorFactory) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,812,if (null != other.cursorFactory) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,813,return false;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,816,return false;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,819,if (null == parameters) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,820,if (null != other.parameters) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,821,return false;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,824,return false;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,827,if (null == sql) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,828,if (null != other.sql) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,829,return false;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,832,return false;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,835,return true;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,838,return false;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,843,public class Frame {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,949,.setStringValue(((Character) element).toString());
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1080,return Double.valueOf(protoElement.getDoubleValue());
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1101,final int prime = 31;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1102,int result = 1;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1103,result = prime * result + (done ? 1231 : 1237);
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1104,result = prime * result + (int) (offset ^ (offset >>> 32));
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1105,result = prime * result + ((rows == null) ? 0 : rows.hashCode());
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1106,return result;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1110,if (o == this) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1111,return true;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1113,if (o instanceof Frame) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1114,Frame other = (Frame) o;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1116,if (null == rows) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1117,if (null != other.rows) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1118,return false;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1121,Iterator<Object> iter1 = rows.iterator();
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1122,Iterator<Object> iter2 = other.rows.iterator();
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1123,while (iter1.hasNext() && iter2.hasNext()) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1124,Object obj1 = iter1.next();
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1125,Object obj2 = iter2.next();
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1128,if (obj1 instanceof Object[]) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1129,if (obj2 instanceof Object[]) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1131,if (!Arrays.equals((Object[]) obj1, (Object[]) obj2)) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1132,return false;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1137,List<Object> obj2List = (List<Object>) obj2;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1138,if (!Arrays.equals((Object[]) obj1, obj2List.toArray(new Object[0]))) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1139,return false;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1146,if (obj2 instanceof Object[]) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1149,List<Object> obj1List = (List<Object>) obj1;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1150,if (!Arrays.equals(obj1List.toArray(new Object[0]), (Object[]) obj2)) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1151,return false;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1164,if (iter1.hasNext() || iter2.hasNext()) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1169,return offset == other.offset && done == other.done;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1172,return false;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1224,final int prime = 31;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1225,int result = 1;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1226,result = prime * result + ((connectionId == null) ? 0 : connectionId.hashCode());
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1227,result = prime * result + id;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1228,result = prime * result + ((signature == null) ? 0 : signature.hashCode());
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1229,return result;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1233,if (o == this) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1234,return true;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1236,if (o instanceof StatementHandle) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1237,StatementHandle other = (StatementHandle) o;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1239,if (null == connectionId) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1240,if (null != other.connectionId) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1241,return false;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1244,return false;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1247,if (null == signature) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1248,if (null != other.signature) {
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1249,return false;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1252,return false;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1255,return id == other.id;
avatica/src/main/java/org/apache/calcite/avatica/Meta.java,1258,return false;
avatica/src/main/java/org/apache/calcite/avatica/QueryState.java,43,public static enum StateType {
avatica/src/main/java/org/apache/calcite/avatica/QueryState.java,454,final int prime = 31;
avatica/src/main/java/org/apache/calcite/avatica/QueryState.java,455,int result = 1;
avatica/src/main/java/org/apache/calcite/avatica/QueryState.java,456,result = prime * result + ((metaDataOperation == null) ? 0 : metaDataOperation.hashCode());
avatica/src/main/java/org/apache/calcite/avatica/QueryState.java,457,result = prime * result + Arrays.hashCode(operationArgs);
avatica/src/main/java/org/apache/calcite/avatica/QueryState.java,458,result = prime * result + ((sql == null) ? 0 : sql.hashCode());
avatica/src/main/java/org/apache/calcite/avatica/QueryState.java,459,return result;
avatica/src/main/java/org/apache/calcite/avatica/QueryState.java,463,if (this == obj) {
avatica/src/main/java/org/apache/calcite/avatica/QueryState.java,464,return true;
avatica/src/main/java/org/apache/calcite/avatica/QueryState.java,466,if (!(obj instanceof QueryState)) {
avatica/src/main/java/org/apache/calcite/avatica/QueryState.java,467,return false;
avatica/src/main/java/org/apache/calcite/avatica/QueryState.java,470,QueryState other = (QueryState) obj;
avatica/src/main/java/org/apache/calcite/avatica/QueryState.java,471,if (metaDataOperation != other.metaDataOperation) {
avatica/src/main/java/org/apache/calcite/avatica/QueryState.java,472,return false;
avatica/src/main/java/org/apache/calcite/avatica/QueryState.java,474,if (!Arrays.deepEquals(operationArgs, other.operationArgs)) {
avatica/src/main/java/org/apache/calcite/avatica/QueryState.java,475,return false;
avatica/src/main/java/org/apache/calcite/avatica/QueryState.java,477,if (sql == null) {
avatica/src/main/java/org/apache/calcite/avatica/QueryState.java,478,if (other.sql != null) {
avatica/src/main/java/org/apache/calcite/avatica/QueryState.java,479,return false;
avatica/src/main/java/org/apache/calcite/avatica/QueryState.java,482,return false;
avatica/src/main/java/org/apache/calcite/avatica/QueryState.java,485,return true;
avatica/src/main/java/org/apache/calcite/avatica/util/TimeUnitRange.java,65,return MAP.get(new Pair<TimeUnit>(startUnit, endUnit));
avatica/src/main/java/org/apache/calcite/avatica/util/TimeUnitRange.java,69,Map<Pair<TimeUnit>, TimeUnitRange> map =
avatica/src/main/java/org/apache/calcite/avatica/util/TimeUnitRange.java,70,new HashMap<Pair<TimeUnit>, TimeUnitRange>();
avatica/src/main/java/org/apache/calcite/avatica/util/TimeUnitRange.java,72,map.put(new Pair<TimeUnit>(value.startUnit, value.endUnit), value);
avatica/src/main/java/org/apache/calcite/avatica/util/TimeUnitRange.java,102,&& equals(right, ((Pair) obj).right);
avatica/src/main/java/org/apache/calcite/avatica/util/TimeUnitRange.java,105,private static boolean equals(Object a, Object b) {
avatica/src/main/java/org/apache/calcite/avatica/util/TimeUnitRange.java,106,return (a == b) || (a != null && a.equals(b));
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,45,import com.google.common.base.Objects;
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,230,if (Objects.equal(projects, originalProjects)) {
core/src/main/java/org/apache/calcite/jdbc/JavaRecordType.java,49,return fieldList.hashCode() ^ clazz.hashCode();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,236,final ImmutableBitSet.Builder columnSetBuilder =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,237,ImmutableBitSet.builder(groupSet);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,484,return com.google.common.base.Objects.hashCode(agg, args);
core/src/main/java/org/apache/calcite/materialize/MaterializationActor.java,108,return com.google.common.base.Objects.hashCode(sql, schema, path);
core/src/main/java/org/apache/calcite/materialize/TileKey.java,21,import com.google.common.base.Objects;
core/src/main/java/org/apache/calcite/materialize/TileKey.java,44,return Objects.hashCode(lattice, dimensions);
core/src/main/java/org/apache/calcite/plan/RelOptCostImpl.java,19,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/plan/RelOptCostImpl.java,73,return Util.hashCode(getRows());
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperand.java,20,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperand.java,148,int h = clazz.hashCode();
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperand.java,149,h = Util.hash(h, trait);
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperand.java,150,h = Util.hash(h, children);
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperand.java,151,return h;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,68,import com.google.common.base.Objects;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1699,return Objects.hashCode(input,
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1745,return Objects.hashCode(input, condition.toString());
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1796,return Objects.hashCode(input, groupSet, aggCalls);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1851,return Objects.hashCode(input, collation, offset, fetch);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1919,return Objects.hashCode(type, inputs);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,2039,return Objects.hashCode(left, right, condition.toString(), joinType);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoCost.java,22,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoCost.java,122,return Util.hashCode(rowCount) + Util.hashCode(cpu) + Util.hashCode(io);
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,100,return Util.hash(type.hashCode(), keys);
core/src/main/java/org/apache/calcite/rel/RelFieldCollation.java,223,public boolean equals(Object obj) {
core/src/main/java/org/apache/calcite/rel/RelFieldCollation.java,224,if (!(obj instanceof RelFieldCollation)) {
core/src/main/java/org/apache/calcite/rel/RelFieldCollation.java,225,return false;
core/src/main/java/org/apache/calcite/rel/RelFieldCollation.java,227,RelFieldCollation other = (RelFieldCollation) obj;
core/src/main/java/org/apache/calcite/rel/RelFieldCollation.java,230,&& (nullDirection == other.nullDirection);
core/src/main/java/org/apache/calcite/rel/RelFieldCollation.java,234,public int hashCode() {
core/src/main/java/org/apache/calcite/rel/RelFieldCollation.java,235,return this.fieldIndex
core/src/main/java/org/apache/calcite/rel/RelFieldCollation.java,237,| (this.nullDirection.ordinal() << 8);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,27,import com.google.common.base.Objects;
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,187,if (Objects.equal(this.name, name)) {
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,228,return aggFunction.hashCode() + argList.hashCode();
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,42,import com.google.common.base.Objects;
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,328,return com.google.common.base.Objects.hashCode(groupSet,
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,329,orderKeys,
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,330,isRows,
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,331,lowerBound,
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,332,upperBound);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,611,return com.google.common.base.Objects.hashCode(value, type);
core/src/main/java/org/apache/calcite/rex/RexLocalRef.java,21,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/rex/RexLocalRef.java,71,return Util.hash(
core/src/main/java/org/apache/calcite/rex/RexLocalRef.java,72,type.hashCode(),
core/src/main/java/org/apache/calcite/rex/RexLocalRef.java,73,index);
core/src/main/java/org/apache/calcite/runtime/Utilities.java,45,return h * 37 + (v ? 2 : 1);
core/src/main/java/org/apache/calcite/runtime/Utilities.java,49,return h * 37 + v;
core/src/main/java/org/apache/calcite/runtime/Utilities.java,53,return h * 37 + v;
core/src/main/java/org/apache/calcite/runtime/Utilities.java,57,return h * 37 + v;
core/src/main/java/org/apache/calcite/runtime/Utilities.java,61,return h * 37 + v;
core/src/main/java/org/apache/calcite/runtime/Utilities.java,65,return h * 37 + (int) (v ^ (v >>> 32));
core/src/main/java/org/apache/calcite/runtime/Utilities.java,69,return hash(h, Float.floatToIntBits(v));
core/src/main/java/org/apache/calcite/runtime/Utilities.java,73,return hash(h, Double.doubleToLongBits(v));
core/src/main/java/org/apache/calcite/runtime/Utilities.java,77,return h * 37 + (v == null ? 1 : v.hashCode());
core/src/main/java/org/apache/calcite/sql/SqlDataTypeSpec.java,32,import com.google.common.base.Objects;
core/src/main/java/org/apache/calcite/sql/SqlDataTypeSpec.java,257,if (!Objects.equal(this.timeZone, that.timeZone)) {
core/src/main/java/org/apache/calcite/sql/SqlDataTypeSpec.java,260,if (!com.google.common.base.Objects.equal(this.charSetName,
core/src/main/java/org/apache/calcite/sql/SqlDataTypeSpec.java,261,that.charSetName)) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,21,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,129,int h = Util.hash(sign, intervalStr);
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,474,return com.google.common.base.Objects.equal(value, that.value);
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,361,public int hashCode() {
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,362,return kind.hashCode() + name.hashCode();
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,227,if (obj.getClass() != TypeFamilyCast.class) {
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,228,return false;
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,230,TypeFamilyCast other = (TypeFamilyCast) obj;
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,232,&& this.castTo.equals(other.castTo);
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,237,return castFrom.hashCode() + castTo.hashCode();
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,84,return lineNumber
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,87,^ (endColumnNumber << 7);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,90,public boolean equals(Object obj) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,91,if (obj instanceof SqlParserPos) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,92,final SqlParserPos that = (SqlParserPos) obj;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,96,&& (that.endColumnNumber == this.endColumnNumber);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,98,return false;
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,51,return obj instanceof SqlString
core/src/main/java/org/apache/calcite/sql/validate/SqlMonikerImpl.java,64,return Util.hash(type.ordinal(), names);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2432,return com.google.common.base.Objects.hashCode(mapRefRelToCorVar,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2433,mapCorVarToCorRel,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2434,mapFieldAccessToCorVar);
core/src/main/java/org/apache/calcite/util/NlsString.java,23,import com.google.common.base.Objects;
core/src/main/java/org/apache/calcite/util/NlsString.java,98,int h = value.hashCode();
core/src/main/java/org/apache/calcite/util/NlsString.java,99,h = Util.hash(h, charsetName);
core/src/main/java/org/apache/calcite/util/NlsString.java,100,h = Util.hash(h, collation);
core/src/main/java/org/apache/calcite/util/NlsString.java,101,return h;
core/src/main/java/org/apache/calcite/util/NlsString.java,111,&& Objects.equal(collation, that.collation);
core/src/main/java/org/apache/calcite/util/Pair.java,19,import com.google.common.base.Objects;
core/src/main/java/org/apache/calcite/util/Pair.java,24,import java.util.Collection;
core/src/main/java/org/apache/calcite/util/Pair.java,74,return new Pair<T1, T2>(left, right);
core/src/main/java/org/apache/calcite/util/Pair.java,83,&& com.google.common.base.Objects.equal(this.right, ((Pair) obj).right);
core/src/main/java/org/apache/calcite/util/Pair.java,86,public int hashCode() {
core/src/main/java/org/apache/calcite/util/Pair.java,87,int h1 = Util.hash(0, left);
core/src/main/java/org/apache/calcite/util/Pair.java,88,return Util.hash(h1, right);
core/src/main/java/org/apache/calcite/util/Pair.java,91,public int compareTo(Pair<T1, T2> that) {
core/src/main/java/org/apache/calcite/util/Pair.java,150,public static <K, V> Map<K, V> toMap(Collection<Pair<K, V>> pairs) {
core/src/main/java/org/apache/calcite/util/Pair.java,151,HashMap<K, V> map = new HashMap<K, V>();
core/src/main/java/org/apache/calcite/util/Util.java,32,import com.google.common.base.Objects;
core/src/main/java/org/apache/calcite/util/Util.java,293,if (a == null) {
core/src/main/java/org/apache/calcite/util/Util.java,294,return hash(h, 19690429);
core/src/main/java/org/apache/calcite/util/Util.java,296,if (a.length == 0) {
core/src/main/java/org/apache/calcite/util/Util.java,297,return hash(h, 19690721);
core/src/main/java/org/apache/calcite/util/Util.java,299,for (int i = 0; i < a.length; i++) {
core/src/main/java/org/apache/calcite/util/Util.java,300,h = hash(h, a[i]);
core/src/main/java/org/apache/calcite/util/Util.java,302,return h;
core/src/main/java/org/apache/calcite/util/Util.java,2081,if (Objects.equal(e, e1)) {
core/src/main/java/org/apache/calcite/util/Util.java,2130,if (!Objects.equal(list0.get(i), list1.get(i))) {
core/src/main/java/org/apache/calcite/util/mapping/IntPair.java,59,return this.source ^ (this.target << 4);
linq4j/src/main/java/org/apache/calcite/linq4j/GroupingImpl.java,34,this.key = key;
linq4j/src/main/java/org/apache/calcite/linq4j/GroupingImpl.java,35,this.values = values;
linq4j/src/main/java/org/apache/calcite/linq4j/GroupingImpl.java,43,return (11 + key.hashCode()) * 37 + values.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/AbstractNode.java,98,int result = nodeType != null ? nodeType.hashCode() : 0;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/AbstractNode.java,99,result = 31 * result + (type != null ? type.hashCode() : 0);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/AbstractNode.java,100,return result;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ArrayLengthRecordField.java,81,int result = fieldName.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ArrayLengthRecordField.java,82,result = 31 * result + clazz.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ArrayLengthRecordField.java,83,return result;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,194,int result = super.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,195,result = 31 * result + expression0.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,196,result = 31 * result + expression1.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,197,result = 31 * result + (primitive != null ? primitive.hashCode() : 0);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,198,return result;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockStatement.java,43,Set<String> names = new HashSet<String>();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockStatement.java,106,result = super.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockStatement.java,107,result = 31 * result + statements.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/CatchBlock.java,54,int result = parameter != null ? parameter.hashCode() : 0;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/CatchBlock.java,55,result = 31 * result + (body != null ? body.hashCode() : 0);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/CatchBlock.java,56,return result;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclaration.java,104,int result = modifier;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclaration.java,105,result = 31 * result + classClass.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclaration.java,106,result = 31 * result + name.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclaration.java,107,result = 31 * result + (memberDeclarations != null ? memberDeclarations
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclaration.java,108,.hashCode() : 0);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclaration.java,109,result = 31 * result + (extended != null ? extended.hashCode() : 0);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclaration.java,110,result = 31 * result + (implemented != null ? implemented.hashCode() : 0);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclaration.java,111,return result;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConditionalExpression.java,78,int result = super.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConditionalExpression.java,79,result = 31 * result + expressionList.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConditionalExpression.java,80,return result;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConditionalStatement.java,91,int result = super.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConditionalStatement.java,92,result = 31 * result + expressionList.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConditionalStatement.java,93,return result;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,282,int result = super.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,283,result = 31 * result + (value != null ? value.hashCode() : 0);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,284,return result;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,109,result = modifier;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,110,result = 31 * result + resultType.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,111,result = 31 * result + parameters.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,112,result = 31 * result + body.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/DeclarationStatement.java,104,int result = super.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/DeclarationStatement.java,105,result = 31 * result + modifiers;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/DeclarationStatement.java,106,result = 31 * result + parameter.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/DeclarationStatement.java,107,result = 31 * result + (initializer != null ? initializer.hashCode() : 0);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/DeclarationStatement.java,108,return result;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FieldDeclaration.java,84,int result = modifier;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FieldDeclaration.java,85,result = 31 * result + parameter.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FieldDeclaration.java,86,result = 31 * result + (initializer != null ? initializer.hashCode() : 0);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FieldDeclaration.java,87,return result;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ForStatement.java,107,result = super.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ForStatement.java,108,result = 31 * result + declarations.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ForStatement.java,109,result = 31 * result + (condition != null ? condition.hashCode() : 0);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ForStatement.java,110,result = 31 * result + (post != null ? post.hashCode() : 0);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ForStatement.java,111,result = 31 * result + body.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,257,result = super.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,258,result = 31 * result + (function != null ? function.hashCode() : 0);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,259,result = 31 * result + (body != null ? body.hashCode() : 0);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,260,result = 31 * result + parameterList.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/GotoStatement.java,126,int result = super.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/GotoStatement.java,127,result = 31 * result + kind.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/GotoStatement.java,128,result = 31 * result + (labelTarget != null ? labelTarget.hashCode() : 0);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/GotoStatement.java,129,result = 31 * result + (expression != null ? expression.hashCode() : 0);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/GotoStatement.java,130,return result;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/IndexExpression.java,75,int result = super.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/IndexExpression.java,76,result = 31 * result + array.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/IndexExpression.java,77,result = 31 * result + indexExpressions.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/IndexExpression.java,78,return result;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/LabelStatement.java,60,int result = super.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/LabelStatement.java,61,result = 31 * result + (defaultValue != null ? defaultValue.hashCode() : 0);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/LabelStatement.java,62,return result;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/LabelTarget.java,47,return name != null ? name.hashCode() : 0;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MemberExpression.java,99,int result = super.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MemberExpression.java,100,result = 31 * result + (expression != null ? expression.hashCode() : 0);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MemberExpression.java,101,result = 31 * result + field.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MemberExpression.java,102,return result;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodCallExpression.java,79,throw new RuntimeException("error while evaluating " + this, e);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodCallExpression.java,137,result = super.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodCallExpression.java,138,result = 31 * result + method.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodCallExpression.java,139,result = 31 * result + (targetExpression != null ? targetExpression
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodCallExpression.java,140,.hashCode() : 0);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodCallExpression.java,141,result = 31 * result + expressions.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodDeclaration.java,108,int result = modifier;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodDeclaration.java,109,result = 31 * result + name.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodDeclaration.java,110,result = 31 * result + resultType.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodDeclaration.java,111,result = 31 * result + parameters.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodDeclaration.java,112,result = 31 * result + body.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodDeclaration.java,113,return result;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/NewArrayExpression.java,97,result = super.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/NewArrayExpression.java,98,result = 31 * result + dimension;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/NewArrayExpression.java,99,result = 31 * result + (bound != null ? bound.hashCode() : 0);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/NewArrayExpression.java,100,result = 31 * result + (expressions != null ? expressions.hashCode() : 0);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/NewExpression.java,93,result = super.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/NewExpression.java,94,result = 31 * result + type.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/NewExpression.java,95,result = 31 * result + (arguments != null ? arguments.hashCode() : 0);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/NewExpression.java,96,result = 31 * result + (
linq4j/src/main/java/org/apache/calcite/linq4j/tree/NewExpression.java,97,memberDeclarations != null ? memberDeclarations.hashCode() : 0);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TernaryExpression.java,86,int result = super.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TernaryExpression.java,87,result = 31 * result + expression0.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TernaryExpression.java,88,result = 31 * result + expression1.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TernaryExpression.java,89,result = 31 * result + expression2.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TernaryExpression.java,90,return result;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ThrowStatement.java,62,int result = super.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ThrowStatement.java,63,result = 31 * result + (expression != null ? expression.hashCode() : 0);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ThrowStatement.java,64,return result;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TryStatement.java,32,assert body != null : "body should not be null";
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TryStatement.java,33,assert catchBlocks != null : "catchBlocks should not be null";
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TryStatement.java,34,this.body = body;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TryStatement.java,35,this.catchBlocks = catchBlocks;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TryStatement.java,84,int result = super.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TryStatement.java,85,result = 31 * result + body.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TryStatement.java,86,result = 31 * result + catchBlocks.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TryStatement.java,87,result = 31 * result + (fynally != null ? fynally.hashCode() : 0);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TryStatement.java,88,return result;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TypeBinaryExpression.java,75,int result = super.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TypeBinaryExpression.java,76,result = 31 * result + expression.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TypeBinaryExpression.java,77,result = 31 * result + (type != null ? type.hashCode() : 0);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TypeBinaryExpression.java,78,return result;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/UnaryExpression.java,78,int result = super.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/UnaryExpression.java,79,result = 31 * result + expression.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/UnaryExpression.java,80,return result;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/WhileStatement.java,70,int result = super.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/WhileStatement.java,71,result = 31 * result + condition.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/WhileStatement.java,72,result = 31 * result + body.hashCode();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/WhileStatement.java,73,return result;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,59,TIME_FORMAT_TIME = FastDateFormat.getInstance("hh:mm:ss", gmt);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,60,TIME_FORMAT_TIMESTAMP = FastDateFormat.getInstance(
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,99,final List<RelDataType> types = new ArrayList<RelDataType>();
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,100,final List<String> names = new ArrayList<String>();
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,46,import org.apache.calcite.util.Stacks;
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,55,import java.util.ArrayList;
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,69,ThreadLocal<ArrayList<Context>> THREAD_CONTEXT_STACK =
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,70,new ThreadLocal<ArrayList<Context>>() {
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,72,return new ArrayList<>();
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,177,Stacks.push(THREAD_CONTEXT_STACK.get(), context);
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,181,return Stacks.peek(THREAD_CONTEXT_STACK.get());
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,185,Stacks.pop(THREAD_CONTEXT_STACK.get(), context);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,50,import java.util.ArrayList;
core/src/main/java/org/apache/calcite/model/ModelHandler.java,56,import static org.apache.calcite.util.Stacks.peek;
core/src/main/java/org/apache/calcite/model/ModelHandler.java,57,import static org.apache.calcite.util.Stacks.pop;
core/src/main/java/org/apache/calcite/model/ModelHandler.java,58,import static org.apache.calcite.util.Stacks.push;
core/src/main/java/org/apache/calcite/model/ModelHandler.java,65,private final List<Pair<String, SchemaPlus>> schemaStack = new ArrayList<>();
core/src/main/java/org/apache/calcite/model/ModelHandler.java,142,push(schemaStack, pair);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,146,pop(schemaStack, pair);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,202,push(schemaStack, pair);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,204,pop(schemaStack, pair);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,359,return Collections.singletonList(peek(schemaStack).left);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,363,return peek(schemaStack).right;
core/src/main/java/org/apache/calcite/model/ModelHandler.java,367,return peek(schemaStack).left;
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,25,import org.apache.calcite.util.Stacks;
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,71,final Map<RelSubset, Double> subsetImportances =
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,72,new HashMap<RelSubset, Double>();
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,79,final Set<RelSubset> boostedSubsets = new HashSet<RelSubset>();
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,90,new EnumMap<VolcanoPlannerPhase, PhaseMatchList>(
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,91,VolcanoPlannerPhase.class);
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,118,phaseRuleMapping = new EnumMap<VolcanoPlannerPhase, Set<String>>(
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,119,VolcanoPlannerPhase.class);
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,228,ArrayList<RelSubset> boostRemovals = new ArrayList<RelSubset>();
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,229,Iterator<RelSubset> iter = boostedSubsets.iterator();
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,541,final List<RelSubset> subsets = new ArrayList<RelSubset>();
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,566,private void checkDuplicateSubsets(List<RelSubset> subsets,
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,573,Stacks.push(subsets, subset);
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,577,Stacks.pop(subsets, subset);
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,699,final Set<String> names = new HashSet<String>();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,111,import static org.apache.calcite.util.Stacks.peek;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,112,import static org.apache.calcite.util.Stacks.pop;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,113,import static org.apache.calcite.util.Stacks.push;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,266,private final List<VolcanoRuleCall> ruleCallStack = new ArrayList<>();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1681,final VolcanoRuleCall ruleCall;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1683,ruleCall = null;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1686,ruleCall = peek(ruleCallStack);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1960,push(ruleCallStack, ruleCall);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1962,pop(ruleCallStack, ruleCall);
core/src/main/java/org/apache/calcite/rel/RelShuttleImpl.java,33,import org.apache.calcite.util.Stacks;
core/src/main/java/org/apache/calcite/rel/RelShuttleImpl.java,45,protected final List<RelNode> stack = new ArrayList<RelNode>();
core/src/main/java/org/apache/calcite/rel/RelShuttleImpl.java,51,Stacks.push(stack, parent);
core/src/main/java/org/apache/calcite/rel/RelShuttleImpl.java,55,final List<RelNode> newInputs =
core/src/main/java/org/apache/calcite/rel/RelShuttleImpl.java,56,new ArrayList<RelNode>(parent.getInputs());
core/src/main/java/org/apache/calcite/rel/RelShuttleImpl.java,62,Stacks.pop(stack, parent);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,61,import org.apache.calcite.util.Stacks;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,847,private final List<SqlOperator> parentCallTypeStack;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,861,this.parentCallTypeStack = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,907,addCasts.add(isUdf(Stacks.peek(parentCallTypeStack)));
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,946,Stacks.push(parentCallTypeStack, call.getOperator());
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1000,Stacks.pop(parentCallTypeStack, call.getOperator());
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,125,&& this.intervalQualifier.equalsDeep(that.intervalQualifier, false);
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,130,int i = Util.hash(h, intervalQualifier);
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,131,return i;
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,27,import org.apache.calcite.util.Stacks;
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,29,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,42,private final List<SqlValidatorScope> scopes = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,67,Stacks.push(this.scopes, scope);
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,74,if (groupExpr.equalsDeep(expr, false)) {
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,104,final SqlQualified fqId = Stacks.peek(scopes).fullyQualify(id);
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,117,final SqlValidatorScope scope = Stacks.peek(scopes);
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,130,if (validator.expand(sqlNode, scope).equalsDeep(call, false)) {
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,153,SqlCall windowFunction = (SqlCall) call.operand(0);
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,170,Stacks.push(scopes, newScope);
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,177,Stacks.pop(scopes, newScope);
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,179,if (groupExpr.e.equalsDeep(node, false)) {
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,275,if (operand.equalsDeep(groupExpr.e, false)) {
core/src/main/java/org/apache/calcite/sql/validate/OverScope.java,81,if (expr.equalsDeep(pair.left, false)) {
core/src/main/java/org/apache/calcite/sql/validate/SelectScope.java,91,protected final List<String> windowNames = new ArrayList<String>();
core/src/main/java/org/apache/calcite/sql/validate/SelectScope.java,170,if (expr.equalsDeep(order0, false)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1074,if (stripAs(sel.e).equalsDeep(sqlNode, false)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3166,if (window1.equalsDeep(window2, false)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,245,Set<String> used = new LinkedHashSet<String>();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,255,: new ArrayList<String>(used);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,332,List<String> naturalColumnNames = new ArrayList<String>();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,351,new ArrayList<RelDataTypeField>(columnNameList.size());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,519,if (node.e.equalsDeep(expr, false)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,84,import org.apache.calcite.util.Stacks;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2477,final List<RelNode> stack = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2488,Stacks.push(stack, join);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2491,Stacks.pop(stack, join);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2517,Stacks.push(stack, filter);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2520,Stacks.pop(stack, filter);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2527,Stacks.push(stack, project);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2532,Stacks.pop(stack, project);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2794,if (converted.equalsDeep(stripAs(selectItem), false)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2795,return new RelFieldCollation(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2796,ordinal, direction, nullDirection);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2802,if (converted.equalsDeep(extraExpr, false)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2803,return new RelFieldCollation(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2804,ordinal, direction, nullDirection);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3993,if (node.equalsDeep(subQuery.node, false)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4002,if (expr.equalsDeep(subQuery.node, false)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4632,if (expr.equalsDeep(groupExpr, false)) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,61,import org.apache.calcite.util.Stacks;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,121,private final List<Frame> stack = new ArrayList<>();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,213,Stacks.push(stack, new Frame(node));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,230,return Stacks.pop(stack).rel;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,236,return Stacks.peek(stack).rel;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,242,return Stacks.peek(n, stack).rel;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,248,return Stacks.peek(inputCount - 1 - inputOrdinal, stack).rel;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,336,final Frame frame = Stacks.peek(stack);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,698,final Frame frame = Stacks.pop(stack);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,700,Stacks.push(stack, new Frame(filter, frame.right));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1007,final Frame right = Stacks.pop(stack);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1008,final Frame left = Stacks.pop(stack);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1028,Stacks.push(stack, new Frame(join, ImmutableList.copyOf(pairs)));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1057,final Frame right = Stacks.pop(stack);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1058,final Frame left = Stacks.pop(stack);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1063,Stacks.push(stack, new Frame(semiJoin, left.right));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1074,final Frame pair = Stacks.pop(stack);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1075,Stacks.push(stack,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1172,final Frame frame = Stacks.pop(stack);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1309,Stacks.pop(stack);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1323,Stacks.pop(stack);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1421,final Frame frame = Stacks.peek(stack);
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,29,import java.util.NoSuchElementException;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,105,this.topNode = new TopBottomNode<E>(true);
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,106,this.bottomNode = new TopBottomNode<E>(false);
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,189,node = new Node<E>(e);
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,216,final Set<Node<E>> childSet = new HashSet<Node<E>>(node.childList);
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,242,final ArrayDeque<Node<E>> deque = new ArrayDeque<Node<E>>();
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,243,final Set<Node<E>> seen = new HashSet<Node<E>>();
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,260,ArrayDeque<Node<E>> descendants = new ArrayDeque<Node<E>>();
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,266,ArrayDeque<Node<E>> ancestors = new ArrayDeque<Node<E>>();
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,273,ArrayDeque<Node<E>> ancestors,
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,275,final Set<Node<E>> parents = new HashSet<Node<E>>();
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,403,final Map<Node, Integer> distanceToRoot =
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,404,new HashMap<Node, Integer>();
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,415,Map<Node<E>, Set<E>> nodeAncestors = new HashMap<Node<E>, Set<E>>();
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,416,Map<Node<E>, Set<E>> nodeDescendants = new HashMap<Node<E>, Set<E>>();
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,418,nodeAncestors.put(
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,419,node,
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,420,new HashSet<E>(getAncestors(node.e)));
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,421,nodeDescendants.put(
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,422,node,
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,423,new HashSet<E>(getDescendants(node.e)));
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,507,final HashSet<E> seen = new HashSet<E>();
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,508,final ArrayDeque<E> unseen = new ArrayDeque<E>();
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,552,return new StripList<E>(node.childList);
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,577,return new StripList<E>(node.parentList);
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,586,return new StripList<E>(topNode.childList);
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,594,return new StripList<E>(bottomNode.parentList);
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,642,ArrayDeque<Node<E>> deque = new ArrayDeque<Node<E>>(c);
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,644,final Set<Node<E>> seen = new HashSet<Node<E>>();
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,645,final List<E> list = new ArrayList<E>();
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,673,final List<Node<E>> parentList = new ArrayList<Node<E>>();
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,674,final List<Node<E>> childList = new ArrayList<Node<E>>();
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,760,private static class ArrayDeque<E> {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,761,private E[] es; // length must be multiple of 2
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,762,private int first;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,763,private int last;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,765,public ArrayDeque() {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,766,this(16);
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,769,public ArrayDeque(Collection<E> nodes) {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,770,this(nextPowerOf2(nodes.size()));
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,771,addAll(nodes);
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,774,private ArrayDeque(int capacity) {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,775,first = last = 0;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,777,es = (E[]) new Object[capacity];
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,780,private static int nextPowerOf2(int v) {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,783,v--;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,784,v |= v >> 1;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,785,v |= v >> 2;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,786,v |= v >> 4;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,787,v |= v >> 8;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,788,v |= v >> 16;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,789,v++;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,790,return v;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,794,private void expand() {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,795,Object[] olds = es;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,796,es = (E[]) new Object[es.length * 2];
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,797,System.arraycopy(olds, 0, es, 0, olds.length);
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,798,if (last <= first) {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,799,final int x = last & (olds.length - 1);
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,800,System.arraycopy(olds, 0, es, olds.length, x);
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,801,last += olds.length;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,805,public void add(E e) {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,806,es[last] = e;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,807,last = (last + 1) & (es.length - 1);
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,808,if (last == first) {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,809,expand();
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,813,public boolean isEmpty() {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,814,return last == first;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,818,public E pop() {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,819,if (last == first) {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,820,throw new NoSuchElementException();
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,822,E e = es[first];
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,823,first = (first + 1) & (es.length - 1);
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,824,return e;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,828,public void addAll(Collection<E> list) {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,829,for (E e : list) {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,830,add(e);
core/src/main/java/org/apache/calcite/util/StackWriter.java,23,import java.util.ArrayList;
core/src/main/java/org/apache/calcite/util/StackWriter.java,24,import java.util.List;
core/src/main/java/org/apache/calcite/util/StackWriter.java,109,private final List<Character> quoteStack = new ArrayList<Character>();
core/src/main/java/org/apache/calcite/util/StackWriter.java,152,Stacks.push(quoteStack, quoteChar);
core/src/main/java/org/apache/calcite/util/StackWriter.java,156,Stacks.pop(quoteStack, quoteChar);
core/src/main/java/org/apache/calcite/util/XmlOutput.java,28,import java.util.List;
core/src/main/java/org/apache/calcite/util/XmlOutput.java,45,private final List<String> tagStack = new ArrayList<String>();
core/src/main/java/org/apache/calcite/util/XmlOutput.java,213,Stacks.push(tagStack, tagName);
core/src/main/java/org/apache/calcite/util/XmlOutput.java,248,Stacks.pop(tagStack, tagName);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,38,import org.apache.calcite.rel.core.Join;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,809,RelNode r2 = r.getInput(0);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,810,if (r2 instanceof Join) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,811,r2 = r2.getInput(0);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,813,return r2;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2249,RelDataTypeField field =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2250,catalogReader.field(foundNs.getRowType(), originalFieldName);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3278,final RexNode e0 = bb.lookupExp(qualified);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3279,RexNode e = e0;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3281,final boolean caseSensitive = true; // name already fully-qualified
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3282,e = rexBuilder.makeFieldAccess(e, name, caseSensitive);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3289,if (e0 instanceof RexCorrelVariable) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3292,bb.mapCorrelateToRex.put(((RexCorrelVariable) e0).id,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3894,RexNode lookupExp(SqlQualified qualified) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3901,return node;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3920,return lookup(offset, rels);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3929,final CorrelationId correlName = cluster.createCorrel();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3930,mapCorrelToDeferred.put(correlName, lookup);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3931,final RelDataType rowType = foundNs.getRowType();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3932,return rexBuilder.makeCorrel(rowType, correlName);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,681,return projectFactory.createProject(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,682,rel,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,683,castExps,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,687,return projectFactory.createProject(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,688,rel,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,689,castExps,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1931,notList.add(e);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1464,final List<RexNode> terms = RelOptUtil.conjunctions(e);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1466,for (int i = 0; i < terms.size(); i++) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1467,final RexNode term = terms.get(i);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1468,switch (term.getKind()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1469,case NOT:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1470,notTerms.add(
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1471,((RexCall) term).getOperands().get(0));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1472,terms.remove(i);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1473,--i;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1474,break;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1475,case LITERAL:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1476,if (!RexLiteral.isNullLiteral(term)) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1477,if (!RexLiteral.booleanValue(term)) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1478,return term; // false
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1480,terms.remove(i);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1481,--i;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1505,rexBuilder.makeCall(
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1506,SqlStdOperatorTable.NOT, notDisjunction));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,457,return RexUtil.composeConjunction(cluster.getRexBuilder(), operands, false);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,695,final RexNode x = RexUtil.simplify(cluster.getRexBuilder(),
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,696,RexUtil.composeConjunction(cluster.getRexBuilder(), predicates, false));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,994,return join(joinType,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,995,RexUtil.composeConjunction(cluster.getRexBuilder(), conditions, false),
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1060,semiJoinFactory.createSemiJoin(left.rel, right.rel,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1061,RexUtil.composeConjunction(cluster.getRexBuilder(), conditions,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1062,false));
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,74,final List<RelNode> childRels = call.getChildRels(union);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,75,assert childRels != null;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,76,final List<RelNode> newChildRels = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,77,for (RelNode childRel : childRels) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,78,if (!isEmpty(childRel)) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,79,newChildRels.add(childRel);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,84,RelNode newRel;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,85,switch (newChildRels.size()) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,87,newRel = empty(union);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,90,newRel =
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,92,newChildRels.get(0),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,94,true);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,97,newRel = LogicalUnion.create(newChildRels, union.all);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,100,call.transformTo(newRel);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,120,new RemoveEmptySingleRule(Project.class, "PruneEmptyProject");
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,165,call.transformTo(empty(sort));
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,181,new RemoveEmptySingleRule(Aggregate.class, "PruneEmptyAggregate");
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,207,call.transformTo(empty(join));
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,235,call.transformTo(empty(join));
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,241,private static Values empty(RelNode node) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,242,return LogicalValues.createEmpty(node.getCluster(), node.getRowType());
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,247,private static class RemoveEmptySingleRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,248,public RemoveEmptySingleRule(Class<? extends SingleRel> clazz,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,251,operand(clazz,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,253,description);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,258,call.transformTo(empty(single));
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,142,private final RelBuilder relBuilder;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,147,private final ReflectUtil.MethodDispatcher<Frame> dispatcher =
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,148,ReflectUtil.createMethodDispatcher(Frame.class, this, "decorrelateRel",
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,154,private RelNode currentRel;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,156,private final Context context;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,161,private final Map<RelNode, Frame> map = new HashMap<>();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,249,.build();
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,29,import java.util.ArrayList;
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,72,final List<SqlNode> columnNames = Util.skip(operands, 2);
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,73,for (final SqlNode operand : columnNames) {
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,74,String name = ((SqlIdentifier) operand).getSimple();
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,75,if (nameList.contains(name)) {
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,76,throw validator.newValidationError(operand,
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,77,RESOURCE.aliasListDuplicate(name));
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,79,nameList.add(name);
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,81,if (nameList.size() != rowType.getFieldCount()) {
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,83,final SqlNode node = operands.size() == 3
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,85,: new SqlNodeList(columnNames, SqlParserPos.sum(columnNames));
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,86,throw validator.newValidationError(node,
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,87,RESOURCE.aliasListDegree(rowType.getFieldCount(), getString(rowType),
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,88,nameList.size()));
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,91,for (RelDataTypeField field : rowType.getFieldList()) {
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,92,typeList.add(field.getType());
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,95,typeList,
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,96,nameList);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,606,currentRel = parent;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,797,for (RelCollation inputCollation : mq.collations(input)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,799,alreadySorted = true;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,800,break;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,804,boolean alreadySmaller = true;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,806,if (rowCount != null && fetch != null) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,807,final int offsetVal = offset == null ? 0 : RexLiteral.intValue(offset);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,808,final int limit = RexLiteral.intValue(fetch);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,809,if ((double) offsetVal + (double) limit < rowCount) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,810,alreadySmaller = false;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,813,return alreadySorted && alreadySmaller;
core/src/main/java/org/apache/calcite/sql/type/CompositeOperandTypeChecker.java,215,min = Math.min(min, range.getMax());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4419,this.bb = bb;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4420,this.aggregatingSelectScope =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4421,(AggregatingSelectScope) bb.getValidator().getSelectScope(select);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1982,final SqlJoin join = (SqlJoin) from;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1983,final SqlValidatorScope scope = validator.getJoinScope(from);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1984,final Blackboard fromBlackboard = createBlackboard(scope, null, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1985,SqlNode left = join.getLeft();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1986,SqlNode right = join.getRight();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1987,final boolean isNatural = join.isNatural();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1988,final JoinType joinType = join.getJoinType();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1989,final SqlValidatorScope leftScope =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1990,Util.first(validator.getJoinScope(left),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1991,((DelegatingScope) bb.scope).getParent());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1992,final Blackboard leftBlackboard =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1993,createBlackboard(leftScope, null, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1994,final SqlValidatorScope rightScope =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1995,Util.first(validator.getJoinScope(right),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1996,((DelegatingScope) bb.scope).getParent());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1997,final Blackboard rightBlackboard =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1998,createBlackboard(rightScope, null, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1999,convertFrom(leftBlackboard, left);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2000,RelNode leftRel = leftBlackboard.root;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2001,convertFrom(rightBlackboard, right);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2002,RelNode rightRel = rightBlackboard.root;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2003,JoinRelType convertedJoinType = convertJoinType(joinType);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2004,RexNode conditionExp;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2005,final SqlValidatorNamespace leftNamespace = validator.getNamespace(left);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2006,final SqlValidatorNamespace rightNamespace = validator.getNamespace(right);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2007,if (isNatural) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2008,final RelDataType leftRowType = leftNamespace.getRowType();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2009,final RelDataType rightRowType = rightNamespace.getRowType();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2010,final List<String> columnList =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2016,conditionExp =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2017,convertJoinCondition(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2018,fromBlackboard,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2019,leftNamespace,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2020,rightNamespace,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2021,join.getCondition(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2022,join.getConditionType(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2023,leftRel,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2024,rightRel);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2027,final RelNode joinRel =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2028,createJoin(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2029,fromBlackboard,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2030,leftRel,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2031,rightRel,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2032,conditionExp,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2033,convertedJoinType);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2034,bb.setRoot(joinRel, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2350,private RexNode convertJoinCondition(Blackboard bb,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2352,SqlValidatorNamespace rightNamespace,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2353,SqlNode condition,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2354,JoinConditionType conditionType,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2357,if (condition == null) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2358,return rexBuilder.makeLiteral(true);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2362,switch (conditionType) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2363,case ON:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2364,bb.setRoot(ImmutableList.of(leftRel, rightRel));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2365,return bb.convertExpression(condition);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2366,case USING:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2367,final SqlNodeList list = (SqlNodeList) condition;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2368,final List<String> nameList = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2369,for (SqlNode columnName : list) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2370,final SqlIdentifier id = (SqlIdentifier) columnName;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2371,String name = id.getSimple();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2372,nameList.add(name);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2374,return convertUsing(leftNamespace, rightNamespace, nameList);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2375,default:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2376,throw Util.unexpected(conditionType);
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,33,import io.airlift.tpch.TpchColumn;
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,34,import io.airlift.tpch.TpchEntity;
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,35,import io.airlift.tpch.TpchTable;
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,120,return tpchColumn.getLong(current);
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,157,return column.getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,84,RelTraitSet traitSet = cluster.traitSet();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnOrigins.java,60,return mq.getColumnOrigins(rel.getInput(), iOutputColumn);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,638,public SqlImplementor implementor() {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,779,public SqlNode field(int ordinal) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,35,import org.apache.calcite.sql.SqlBinaryOperator;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,259,SqlNode sqlCondition = null;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,261,SqlNode x = convertConditionToSqlNode(operand, leftContext,
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,263,if (sqlCondition == null) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,264,sqlCondition = x;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,266,sqlCondition = op.createCall(POS, sqlCondition, x);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,269,return sqlCondition;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,528,if (op instanceof SqlBinaryOperator && nodeList.size() > 2) {
core/src/main/java/org/apache/calcite/config/Lex.java,30,ORACLE(Quoting.DOUBLE_QUOTE, Casing.TO_UPPER, Casing.UNCHANGED, true),
core/src/main/java/org/apache/calcite/config/Lex.java,37,MYSQL(Quoting.BACK_TICK, Casing.UNCHANGED, Casing.UNCHANGED, false),
core/src/main/java/org/apache/calcite/config/Lex.java,45,MYSQL_ANSI(Quoting.DOUBLE_QUOTE, Casing.UNCHANGED, Casing.UNCHANGED, false),
core/src/main/java/org/apache/calcite/config/Lex.java,51,SQL_SERVER(Quoting.BRACKET, Casing.UNCHANGED, Casing.UNCHANGED, false),
core/src/main/java/org/apache/calcite/config/Lex.java,58,JAVA(Quoting.BACK_TICK, Casing.UNCHANGED, Casing.UNCHANGED, true);
core/src/main/java/org/apache/calcite/config/Lex.java,68,boolean caseSensitive) {
core/src/main/java/org/apache/calcite/config/Lex.java,69,this.quoting = quoting;
core/src/main/java/org/apache/calcite/config/Lex.java,70,this.unquotedCasing = unquotedCasing;
core/src/main/java/org/apache/calcite/config/Lex.java,71,this.quotedCasing = quotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlAbstractParserImpl.java,465,public abstract void switchTo(String stateName);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,433,return SqlParser.create(sql, parserConfig.build());
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,77,return create(s, configBuilder().build());
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,190,Config DEFAULT = configBuilder().build();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,202,private Casing quotedCasing = Lex.ORACLE.quotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,203,private Casing unquotedCasing = Lex.ORACLE.unquotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,204,private Quoting quoting = Lex.ORACLE.quoting;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,205,private int identifierMaxLength = DEFAULT_IDENTIFIER_MAX_LENGTH;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,206,private boolean caseSensitive = Lex.ORACLE.caseSensitive;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,207,private SqlParserImplFactory parserFactory = SqlParserImpl.FACTORY;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,213,this.quotedCasing = config.quotedCasing();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,214,this.unquotedCasing = config.unquotedCasing();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,215,this.quoting = config.quoting();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,216,this.identifierMaxLength = config.identifierMaxLength();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,217,this.parserFactory = config.parserFactory();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,223,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,228,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,233,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,237,this.caseSensitive = caseSensitive;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,238,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,242,this.identifierMaxLength = identifierMaxLength;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,243,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,248,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,252,setCaseSensitive(lex.caseSensitive);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,253,setUnquotedCasing(lex.unquotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,254,setQuotedCasing(lex.quotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,255,setQuoting(lex.quoting);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,256,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,270,private static class ConfigImpl implements Config {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,271,private final int identifierMaxLength;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,272,private final boolean caseSensitive;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,273,private final Casing quotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,274,private final Casing unquotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,275,private final Quoting quoting;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,276,private final SqlParserImplFactory parserFactory;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,278,private ConfigImpl(int identifierMaxLength, Casing quotedCasing,
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,279,Casing unquotedCasing, Quoting quoting, boolean caseSensitive,
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,281,this.identifierMaxLength = identifierMaxLength;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,282,this.caseSensitive = caseSensitive;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,289,public int identifierMaxLength() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,290,return identifierMaxLength;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,293,public Casing quotedCasing() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,294,return quotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,297,public Casing unquotedCasing() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,298,return unquotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,301,public Quoting quoting() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,302,return quoting;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,305,public boolean caseSensitive() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,306,return caseSensitive;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,309,public SqlParserImplFactory parserFactory() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,310,return parserFactory;
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,249,public final ImmutableList<ImmutableBitSet> groupSets;
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,257,this.groupSets = ImmutableList.copyOf(groupSets);
core/src/main/java/org/apache/calcite/tools/PigRelBuilder.java,118,ImmutableList.copyOf((Iterable) groupKeys);
core/src/main/java/org/apache/calcite/tools/PigRelBuilder.java,122,final int groupCount = groupKeyList.get(0).nodes.size();
core/src/main/java/org/apache/calcite/tools/PigRelBuilder.java,129,for (Ord<GroupKeyImpl> groupKey : Ord.reverse(groupKeyList)) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,822,final SortedSet<ImmutableBitSet> groupSetSet =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,823,new TreeSet<>(ImmutableBitSet.ORDERING);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,831,groupSetSet.add(groupSet2);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,833,groupSets = ImmutableList.copyOf(groupSetSet);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,843,if (aggCall instanceof AggCallImpl) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,844,final AggCallImpl aggCall1 = (AggCallImpl) aggCall;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,846,if (aggCall1.filter != null) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,857,final AggregateCall aggregateCall;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,858,if (aggCall instanceof AggCallImpl) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,859,final AggCallImpl aggCall1 = (AggCallImpl) aggCall;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,861,final int filterArg = aggCall1.filter == null ? -1
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,863,aggregateCall =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,867,aggregateCall = ((AggCallImpl2) aggCall).aggregateCall;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,869,aggregateCalls.add(aggregateCall);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1489,private static class AggCallImpl2 implements AggCall {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1196,boolean allowCast) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1211,return makeCharLiteral(padRight((NlsString) value, type.getPrecision()));
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,43,import java.util.AbstractList;
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,323,Comparable value,
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,325,SqlTypeName typeName,
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,390,assert value == null;
core/src/main/java/org/apache/calcite/util/Util.java,2074,if (size < 15) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoFilter.java,71,new Translator(MongoRules.mongoFieldNames(getRowType()));
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoFilter.java,85,Translator(List<String> fieldNames) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoFilter.java,97,for (RexNode node : RelOptUtil.disjunctions(condition)) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverter.java,83,final MongoRel.Implementor mongoImplementor = new MongoRel.Implementor();
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,202,RelDataTypeFamily castFrom = call.getOperandType(0).getFamily();
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,203,RelDataTypeFamily castTo = call.getOperandType(1).getFamily();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3295,inferUnknownTypes(unknownType, groupScope, groupList);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,27,import org.apache.calcite.schema.Function;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,28,import org.apache.calcite.schema.FunctionParameter;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,38,import org.apache.calcite.sql.type.FamilyOperandTypeChecker;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,59,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,130,private Collection<Function> getFunctionsFrom(List<String> names) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,248,private SqlOperator toOp(SqlIdentifier name, final Function function) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,249,List<RelDataType> argTypes = new ArrayList<>();
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,250,List<SqlTypeFamily> typeFamilies = new ArrayList<>();
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,251,for (FunctionParameter o : function.getParameters()) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,252,final RelDataType type = o.getType(typeFactory);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,253,argTypes.add(type);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,254,typeFamilies.add(
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,255,Util.first(type.getSqlTypeName().getFamily(), SqlTypeFamily.ANY));
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,263,final FamilyOperandTypeChecker typeChecker =
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,267,return new SqlUserDefinedFunction(name, infer((ScalarFunction) function),
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,268,InferTypes.explicit(argTypes), typeChecker, paramTypes, function);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,270,return new SqlUserDefinedAggFunction(name,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,271,infer((AggregateFunction) function), InferTypes.explicit(argTypes),
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,274,return new SqlUserDefinedTableMacro(name, ReturnTypes.CURSOR,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,275,InferTypes.explicit(argTypes), typeChecker, paramTypes,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,276,(TableMacro) function);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,278,return new SqlUserDefinedTableFunction(name, ReturnTypes.CURSOR,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,279,InferTypes.explicit(argTypes), typeChecker, paramTypes,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,280,(TableFunction) function);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,324,return null;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,331,public void registerRules(RelOptPlanner planner) throws Exception {
core/src/main/java/org/apache/calcite/sql/SqlAggFunction.java,83,operandTypeChecker, null, funcType);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,124,if (hasAssignment() && !(call.getOperator() instanceof SqlUnresolvedFunction)) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,128,if (call.getOperator() instanceof SqlFunction) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,129,final List<RelDataType> paramTypes =
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,130,((SqlFunction) call.getOperator()).getParamTypes();
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,131,if (paramTypes != null && operandList.size() < paramTypes.size()) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,132,final List<SqlNode> list = Lists.newArrayList(operandList);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,133,while (list.size() < paramTypes.size()) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,134,list.add(DEFAULT_CALL);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,136,return list;
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,139,return operandList;
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,157,final SqlFunction operator = (SqlFunction) call.getOperator();
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,32,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,57,private final List<RelDataType> paramTypes;
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,81,operandTypeChecker, null, category);
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,121,List<RelDataType> paramTypes,
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,128,this.paramTypes =
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,129,paramTypes == null ? null : ImmutableList.copyOf(paramTypes);
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,162,return paramTypes;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,19,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,22,import org.apache.calcite.schema.FunctionParameter;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,33,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,35,import java.util.List;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,50,super(Util.last(opName.names), opName, SqlKind.OTHER_FUNCTION,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,51,returnTypeInference, operandTypeInference, operandTypeChecker,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,56,public List<RelDataType> getParameterTypes(
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,57,final RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,58,return Lists.transform(function.getParameters(),
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,66,public RelDataType getReturnType(RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,67,return function.getReturnType(typeFactory);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,50,super(Util.last(opName.names), opName, SqlKind.OTHER_FUNCTION,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,51,returnTypeInference, operandTypeInference, operandTypeChecker,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,42,List<RelDataType> paramTypes,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,44,super(opName, returnTypeInference, operandTypeInference, operandTypeChecker,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,70,super(Util.last(opName.names), opName, SqlKind.OTHER_FUNCTION,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,71,returnTypeInference, operandTypeInference, operandTypeChecker,
core/src/main/java/org/apache/calcite/rex/RexFieldAccess.java,63,assert expr.getType().getFieldList().get(field.getIndex()) == field;
core/src/main/java/org/apache/calcite/model/ModelHandler.java,113,for (Map.Entry<String, ScalarFunction> entry
core/src/main/java/org/apache/calcite/model/ModelHandler.java,114,: ScalarFunctionImpl.createAll(clazz).entries()) {
core/src/main/java/org/apache/calcite/sql/SqlAsOperator.java,54,OperandTypes.ANY_ANY);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,223,return SqlUtil.isNullLiteral(call.operand(ordinal), allowCast);
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,224,public SqlKind getKind() {
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,312,if (node instanceof SqlIntervalQualifier) {
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,313,SqlIntervalQualifier qualifier = (SqlIntervalQualifier) node;
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,314,return qualifier.timeUnitRange;
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,363,if (node instanceof SqlLiteral) {
core/src/main/java/org/apache/calcite/sql/SqlOverOperator.java,54,OperandTypes.ANY_ANY);
core/src/main/java/org/apache/calcite/sql/fun/SqlArgumentAssignmentOperator.java,40,InferTypes.RETURN_TYPE, OperandTypes.ANY_ANY);
core/src/main/java/org/apache/calcite/sql/fun/SqlCollectionTableOperator.java,40,OperandTypes.ANY);
core/src/main/java/org/apache/calcite/sql/type/FamilyOperandTypeChecker.java,66,SqlTypeFamily family = families.get(iFormalOperand);
core/src/main/java/org/apache/calcite/sql/type/FamilyOperandTypeChecker.java,67,if (family == SqlTypeFamily.ANY) {
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,57,if (operator instanceof SqlUserDefinedTableFunction) {
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,58,assert type.getSqlTypeName() == SqlTypeName.CURSOR
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,59,: "User-defined table function should have CURSOR type, not " + type;
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,60,final SqlUserDefinedTableFunction udf =
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,61,(SqlUserDefinedTableFunction) operator;
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,62,return udf.getRowType(validator.typeFactory, callBinding.operands());
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,64,assert type.getSqlTypeName() == SqlTypeName.CURSOR
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,65,: "User-defined table macro should have CURSOR type, not " + type;
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,66,final SqlUserDefinedTableMacro udf =
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,67,(SqlUserDefinedTableMacro) operator;
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,69,.getRowType(validator.typeFactory);
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,71,return type;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,20,import org.apache.calcite.rel.type.RelDataTypeFactory;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,23,import org.apache.calcite.sql.SqlNode;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,37,public class SqlUserDefinedTableFunction extends SqlUserDefinedFunction {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,66,public RelDataType getRowType(RelDataTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,67,List<SqlNode> operandList) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,71,return getFunction().getRowType(typeFactory, arguments);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,83,public Type getElementType(RelDataTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,84,List<SqlNode> operandList) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,20,import org.apache.calcite.linq4j.tree.BlockBuilder;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,21,import org.apache.calcite.linq4j.tree.Expression;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,22,import org.apache.calcite.linq4j.tree.Expressions;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,23,import org.apache.calcite.linq4j.tree.FunctionExpression;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,27,import org.apache.calcite.rel.type.RelDataTypeFactoryImpl;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,32,import org.apache.calcite.sql.SqlCall;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,37,import org.apache.calcite.sql.SqlLiteral;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,38,import org.apache.calcite.sql.SqlNode;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,39,import org.apache.calcite.sql.SqlUtil;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,43,import org.apache.calcite.util.ImmutableNullableList;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,44,import org.apache.calcite.util.NlsString;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,45,import org.apache.calcite.util.Pair;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,49,import com.google.common.collect.ImmutableMap;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,53,import java.util.Collections;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,62,public class SqlUserDefinedTableMacro extends SqlFunction {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,83,public TranslatableTable getTable(RelDataTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,84,List<SqlNode> operandList) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,85,List<Object> arguments = convertArguments(typeFactory, operandList,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,86,tableMacro, getNameAsId(), true);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,101,public static List<Object> convertArguments(RelDataTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,102,List<SqlNode> operandList, Function function,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,103,SqlIdentifier opName,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,104,boolean failOnNonLiteral) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,105,List<Object> arguments = new ArrayList<>(operandList.size());
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,107,for (Pair<FunctionParameter, SqlNode> pair
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,108,: Pair.zip(function.getParameters(), operandList)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,109,try {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,110,final Object o = getValue(pair.right);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,111,final Object o2 = coerce(o, pair.left.getType(typeFactory));
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,112,arguments.add(o2);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,118,+ ") is not literal: " + pair.right);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,126,private static Object getValue(SqlNode right) throws NonLiteralException {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,127,switch (right.getKind()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,128,case ARRAY_VALUE_CONSTRUCTOR:
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,130,for (SqlNode o : ((SqlCall) right).getOperandList()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,131,list.add(getValue(o));
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,133,return ImmutableNullableList.copyOf(list);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,134,case MAP_VALUE_CONSTRUCTOR:
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,135,final ImmutableMap.Builder<Object, Object> builder2 =
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,136,ImmutableMap.builder();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,137,final List<SqlNode> operands = ((SqlCall) right).getOperandList();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,138,for (int i = 0; i < operands.size(); i += 2) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,139,final SqlNode key = operands.get(i);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,140,final SqlNode value = operands.get(i + 1);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,141,builder2.put(getValue(key), getValue(value));
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,143,return builder2.build();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,144,default:
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,145,if (SqlUtil.isNullLiteral(right, true)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,146,return null;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,148,if (SqlUtil.isLiteral(right)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,149,return ((SqlLiteral) right).getValue();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,151,if (right.getKind() == SqlKind.DEFAULT) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,152,return null; // currently NULL is the only default value
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,154,throw new NonLiteralException();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,158,private static Object coerce(Object o, RelDataType type) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,159,if (o == null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,160,return null;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,162,if (!(type instanceof RelDataTypeFactoryImpl.JavaType)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,163,return null;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,165,final RelDataTypeFactoryImpl.JavaType javaType =
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,166,(RelDataTypeFactoryImpl.JavaType) type;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,167,final Class clazz = javaType.getJavaClass();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,169,if (clazz.isAssignableFrom(o.getClass())) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,170,return o;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,179,BlockBuilder bb = new BlockBuilder();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,180,final Expression expr =
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,182,bb.add(Expressions.return_(null, expr));
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,183,final FunctionExpression convert =
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,186,return convert.compile().dynamicInvoke();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,191,private static class NonLiteralException extends Exception {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2105,final TranslatableTable table =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2106,udf.getTable(typeFactory, callBinding.operands());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2117,elementType = udtf.getElementType(typeFactory, callBinding.operands());
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFilterableTable.java,60,final int[] fields = CsvEnumerator.identityList(fieldTypes.size());
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFilterableTable.java,64,new CsvEnumerator.ArrayRowConverter(fieldTypes, fields));
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvScannableTable.java,46,final int[] fields = CsvEnumerator.identityList(fieldTypes.size());
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,17,package org.apache.calcite.adapter.csv;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,46,class CsvEnumerator<E> implements Enumerator<E> {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,48,private final String[] filterValues;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,76,this.filterValues = filterValues;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,86,int[] fields) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,87,if (fields.length == 1) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,88,final int field = fields[0];
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,91,return new ArrayRowConverter(fieldTypes, fields);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,181,String filterValue = filterValues[i];
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,210,static int[] identityList(int n) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,301,private final CsvFieldType[] fieldTypes;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,302,private final int[] fields;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,304,ArrayRowConverter(List<CsvFieldType> fieldTypes, int[] fields) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,310,final Object[] objects = new Object[fields.length];
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,311,for (int i = 0; i < fields.length; i++) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,312,int field = fields[i];
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,313,objects[i] = convert(fieldTypes[field], strings[field]);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,320,private static class SingleColumnRowConverter extends RowConverter {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFieldType.java,17,package org.apache.calcite.adapter.csv;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFieldType.java,33,enum CsvFieldType {
example/csv/src/main/java/org/apache/calcite/adapter/csv/JsonEnumerator.java,17,package org.apache.calcite.adapter.csv;
example/csv/src/main/java/org/apache/calcite/adapter/csv/JsonTable.java,17,package org.apache.calcite.adapter.csv;
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,407,protected void notifyDiscard(
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,408,RelNode rel) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,559,RelNode joinRel, ImmutableBitSet groupKey) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,562,RelNode left = joinRel.getInputs().get(0);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,563,RelNode right = joinRel.getInputs().get(1);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,574,return numDistinctVals(population, mq.getRowCount(joinRel));
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,374,Join joinRel,
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,377,JoinRelType joinType = joinRel.getJoinType();
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,384,filters.add(joinRel.getCondition());
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,394,shiftRightFilter(joinRel, left, multiJoin,
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,750,return selfJoin.getLeftFactor();
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,752,return selfJoin.getRightFactor();
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,766,return selfJoin.getLeftFactor() == factIdx;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,779,return selfJoin.getRightFactor() == factIdx;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,795,assert selfJoin.getRightFactor() == rightFactor;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,796,return selfJoin.getColumnMapping().get(rightOffset);
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,830,private class RemovableSelfJoin {
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,834,private int leftFactor;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,840,private int rightFactor;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,847,private Map<Integer, Integer> columnMapping;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,858,public int getLeftFactor() {
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,859,return leftFactor;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,862,public int getRightFactor() {
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,863,return rightFactor;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,866,public Map<Integer, Integer> getColumnMapping() {
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,867,return columnMapping;
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,63,return getNlsString().getCollation();
core/src/main/java/org/apache/calcite/sql/fun/SqlLiteralChainOperator.java,169,NlsString nls = ((SqlCharStringLiteral) rand).getNlsString();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,31,EnumerableAggregateRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,32,super(LogicalAggregate.class, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,33,EnumerableConvention.INSTANCE, "EnumerableAggregateRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,36,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,88,public static final EnumerableToBindableConverterRule INSTANCE =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,30,EnumerableCalcRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,37,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCollectRule.java,30,EnumerableCollectRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCollectRule.java,31,super(Collect.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCollectRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelateRule.java,34,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,20,import org.apache.calcite.plan.RelOptUtil;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,30,EnumerableFilterRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterToCalcRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterToCalcRule.java,29,public class EnumerableFilterToCalcRule extends RelOptRule {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterToCalcRule.java,34,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,29,public static final EnumerableInterpreterRule INSTANCE =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersectRule.java,31,EnumerableIntersectRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersectRule.java,32,super(LogicalIntersect.class, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersectRule.java,33,EnumerableConvention.INSTANCE, "EnumerableIntersectRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersectRule.java,36,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableJoinRule.java,36,EnumerableJoinRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableJoinRule.java,37,super(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableJoinRule.java,38,LogicalJoin.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableJoinRule.java,39,Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableJoinRule.java,40,EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,31,class EnumerableLimitRule extends RelOptRule {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,33,super(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,34,operand(Sort.class, any()),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,44,EnumerableMergeJoinRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,45,super(LogicalJoin.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,46,Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,47,EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMinusRule.java,30,EnumerableMinusRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMinusRule.java,31,super(LogicalMinus.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMinusRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,20,import org.apache.calcite.plan.RelOptUtil;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,30,EnumerableProjectRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectToCalcRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectToCalcRule.java,26,public class EnumerableProjectToCalcRule extends RelOptRule {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectToCalcRule.java,31,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,34,new EnumerableJoinRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,37,new EnumerableMergeJoinRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,49,new EnumerableProjectRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,52,new EnumerableFilterRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,55,new EnumerableCalcRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,58,new EnumerableAggregateRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,61,new EnumerableSortRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,64,new EnumerableLimitRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,67,new EnumerableUnionRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,70,new EnumerableIntersectRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,73,new EnumerableMinusRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,82,new EnumerableWindowRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,85,new EnumerableCollectRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,88,new EnumerableUncollectRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSortRule.java,29,EnumerableSortRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSortRule.java,30,super(Sort.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,30,public EnumerableTableFunctionScanRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,38,LogicalTableFunctionScan tbl = (LogicalTableFunctionScan) rel;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,41,tbl.getCall(), tbl.getColumnMappings());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,32,public EnumerableTableScanRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollectRule.java,30,EnumerableUncollectRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollectRule.java,31,super(Uncollect.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollectRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnionRule.java,30,EnumerableUnionRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnionRule.java,31,super(LogicalUnion.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnionRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindowRule.java,30,EnumerableWindowRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindowRule.java,31,super(LogicalWindow.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindowRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,27,import org.apache.calcite.plan.RelTrait;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,128,protected final JdbcConvention out;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,131,JdbcConvention out, String description) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,133,this.out = out;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,352,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,413,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,456,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,539,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,587,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,630,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,674,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,30,import org.apache.calcite.plan.RelOptUtil;
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,249,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,312,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,362,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,413,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,476,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,615,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,673,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,30,public static final ConverterRule INSTANCE =
core/src/main/java/org/apache/calcite/plan/CommonRelSubExprRule.java,25,public abstract class CommonRelSubExprRule extends RelOptRule {
core/src/main/java/org/apache/calcite/plan/CommonRelSubExprRule.java,34,super(operand);
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,405,protected boolean equals(RelOptRule that) {
core/src/main/java/org/apache/calcite/plan/hep/HepProgramBuilder.java,115,instruction.rule = rule;
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,22,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,101,public static class ExpandConversionRule extends RelOptRule {
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,112,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,35,public abstract class ConverterRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,76,assert in.getTraitDef() == out.getTraitDef();
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,81,public Convention getOutConvention() {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,113,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,31,public class TraitMatchingRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,34,private final ConverterRule converter;
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,45,super(
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,46,operand(
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,47,converterRule.getOperand().getMatchedClass(),
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,48,operand(RelNode.class, any())),
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,50,assert converterRule.getOperand().childPolicy
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,51,== RelOptRuleOperandChildPolicy.ANY;
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,52,this.converter = converterRule;
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,59,return converter.getOutConvention();
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,62,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,64,if (input.getTraitSet().contains(converter.getOutTrait())) {
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,65,converter.onMatch(call);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,79,public static final AggregateExpandDistinctAggregatesRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,85,public static final AggregateExpandDistinctAggregatesRule JOIN =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,90,public final boolean useGroupingSets;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,98,super(operand(clazz, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,99,this.useGroupingSets = useGroupingSets;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,119,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,149,if (useGroupingSets) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,56,public static final AggregateFilterTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,61,operand(Aggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,65,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,66,public static final AggregateJoinTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,71,public static final AggregateJoinTransposeRule EXTENDED =
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,75,private final boolean allowFunctions;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,81,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,84,this.allowFunctions = allowFunctions;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,201,if (!allowFunctions) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,51,public static final AggregateProjectMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,58,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,59,operand(aggregateClass,
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,60,operand(projectClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,61,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,64,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,66,public static final AggregateProjectPullUpConstantsRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,72,public static final AggregateProjectPullUpConstantsRule INSTANCE2 =
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,91,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,93,operand(inputClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,94,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,99,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,84,public static final AggregateReduceFunctionsRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,92,super(operand, relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,105,public void onMatch(RelOptRuleCall ruleCall) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,35,public static final AggregateRemoveRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,50,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,57,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,24,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,59,public static final AggregateStarTableRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,65,public static final AggregateStarTableRule INSTANCE2 =
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,42,public static final AggregateUnionAggregateRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,53,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,55,operand(unionClass,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,72,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,54,public static final AggregateUnionTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,71,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,72,operand(aggregateClass,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,73,operand(unionClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,74,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,86,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,44,super(
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,45,operand(
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,46,Calc.class,
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,52,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,23,import org.apache.calcite.rex.RexProgram;
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,38,public static final CalcRemoveRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,49,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,50,LogicalCalc calc = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,51,RexProgram program = calc.getProgram();
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,52,if (!program.isTrivial()) {
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,53,return;
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,42,public static final CalcSplitRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,46,super(operand(Calc.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,37,private final Class consumerRelClass;
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,39,private final boolean coerceNames;
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,53,super(
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,54,operand(consumerRelClass, any()),
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,56,this.consumerRelClass = consumerRelClass;
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,57,this.coerceNames = coerceNames;
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,68,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,70,if (consumerRel.getClass() != consumerRelClass) {
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,84,coerceNames);
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,92,coerceNames);
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,51,public static final FilterAggregateTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,65,RelBuilderFactory builderFactory,
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,68,operand(filterClass,
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,69,operand(aggregateClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,84,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,40,public static final FilterCalcMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,46,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,47,operand(
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,48,Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,54,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,61,if (calc.getProgram().containsAggs()) {
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,44,public static final FilterCorrelateRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,52,public FilterCorrelateRule(RelBuilderFactory builderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,53,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,54,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,55,operand(Correlate.class, RelOptRule.any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,56,builderFactory, "FilterCorrelateRule");
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,71,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,21,import org.apache.calcite.plan.RelOptRuleOperand;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,60,public static final FilterJoinRule FILTER_ON_JOIN =
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,67,public static final FilterJoinRule DUMB_FILTER_ON_JOIN =
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,72,public static final FilterJoinRule JOIN =
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,76,private final boolean smart;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,81,private final Predicate predicate;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,89,protected FilterJoinRule(RelOptRuleOperand operand, String id,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,90,boolean smart, RelBuilderFactory relBuilderFactory, Predicate predicate) {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,91,super(operand, relBuilderFactory, "FilterJoinRule:" + id);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,92,this.smart = smart;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,101,protected FilterJoinRule(RelOptRuleOperand operand, String id,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,102,boolean smart, RelFactories.FilterFactory filterFactory,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,103,RelFactories.ProjectFactory projectFactory) {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,104,this(operand, id, smart, RelBuilder.proto(filterFactory, projectFactory),
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,113,protected FilterJoinRule(RelOptRuleOperand operand, String id,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,114,boolean smart, RelFactories.FilterFactory filterFactory,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,115,RelFactories.ProjectFactory projectFactory,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,116,Predicate predicate) {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,117,this(operand, id, smart, RelBuilder.proto(filterFactory, projectFactory),
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,118,predicate);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,146,if (smart
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,305,public static class JoinConditionPushRule extends FilterJoinRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,308,super(RelOptRule.operand(Join.class, RelOptRule.any()),
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,310,predicate);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,327,public static class FilterIntoJoinRule extends FilterJoinRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,330,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,331,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,332,operand(Join.class, RelOptRule.any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,334,predicate);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,342,this(smart, RelBuilder.proto(filterFactory, projectFactory), predicate);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,36,public static final FilterMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,45,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,46,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,47,operand(Filter.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,48,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,58,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,21,import org.apache.calcite.rel.logical.LogicalFilter;
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,32,public static final FilterMultiJoinMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,41,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,48,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,29,import org.apache.calcite.rex.RexOver;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,45,public static final FilterProjectTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,49,private final boolean copyFilter;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,50,private final boolean copyProject;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,80,projectFactory == null,
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,81,RelBuilder.proto(filterFactory, projectFactory));
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,86,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,90,if (RexOver.containsOver(project.getProjects(), null)) {
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,126,RelNode newProjRel =
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,127,copyProject
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,134,call.transformTo(newProjRel);
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,42,public static final FilterRemoveIsNotDistinctFromRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,53,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,85,private class RemoveIsNotDistinctFromRexShuttle extends RexShuttle {
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,86,RexBuilder rexBuilder;
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,94,public RexNode visitCall(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,41,public static final FilterSetOpTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,50,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,51,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,52,operand(SetOp.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,53,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,58,this(RelBuilder.proto(Contexts.of(filterFactory)));
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,64,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,41,public static final FilterTableFunctionTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,50,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,51,operand(LogicalFilter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,58,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,51,public abstract class FilterTableScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,64,public static final FilterTableScanRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,77,public static final FilterTableScanRule INTERPRETER =
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,56,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,38,public static final JoinAddRedundantSemiJoinRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,52,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,60,super(
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,61,operand(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,62,operand(Join.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,68,public void onMatch(final RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,62,private final boolean swapOuter;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,72,this.swapOuter = swapOuter;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,76,this(LogicalJoin.class, RelFactories.LOGICAL_BUILDER, swapOuter);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,137,public void onMatch(final RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinExtractFilterRule.java,45,public static final JoinExtractFilterRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,28,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,60,public static final JoinProjectTransposeRule BOTH_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,67,public static final JoinProjectTransposeRule LEFT_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,73,public static final JoinProjectTransposeRule RIGHT_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,81,public static final JoinProjectTransposeRule BOTH_PROJECT_INCLUDE_OUTER =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,89,public static final JoinProjectTransposeRule LEFT_PROJECT_INCLUDE_OUTER =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,96,public static final JoinProjectTransposeRule RIGHT_PROJECT_INCLUDE_OUTER =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,105,private final boolean includeOuter;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,113,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,114,this.includeOuter = includeOuter;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,121,this(operand, description, false, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,127,this(operand, description, false,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,128,RelBuilder.proto(Contexts.of(projectFactory)));
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,135,this(operand, description, includeOuter,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,136,RelBuilder.proto(Contexts.of(projectFactory)));
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,142,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,143,Join joinRel = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,144,JoinRelType joinType = joinRel.getJoinType();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,146,Project leftProj;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,147,Project rightProj;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,154,&& (includeOuter || !joinType.generatesNullsOnLeft())) {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,155,leftProj = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,156,leftJoinChild = getProjectChild(call, leftProj, true);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,158,leftProj = null;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,162,&& (includeOuter || !joinType.generatesNullsOnRight())) {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,163,rightProj = getRightChild(call);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,164,rightJoinChild = getProjectChild(call, rightProj, false);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,166,rightProj = null;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,167,rightJoinChild = joinRel.getRight();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,169,if ((leftProj == null) && (rightProj == null)) {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,182,RelDataType joinChildrenRowType =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,187,joinRel.getCluster().getTypeFactory(),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,196,int nProjExprs = joinRel.getRowType().getFieldCount();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,198,final RexBuilder rexBuilder = joinRel.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,201,leftProj,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,208,List<RelDataTypeField> leftFields =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,210,int nFieldsLeft = leftFields.size();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,212,rightProj,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,229,RexProgram bottomProgram =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,236,RexProgramBuilder topProgramBuilder =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,241,topProgramBuilder.addCondition(joinRel.getCondition());
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,242,RexProgram topProgram = topProgramBuilder.getProgram();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,243,RexProgram mergedProgram =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,252,RexNode newCondition =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,255,Join newJoinRel =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,256,joinRel.copy(joinRel.getTraitSet(), newCondition,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,257,leftJoinChild, rightJoinChild, joinRel.getJoinType(),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,258,joinRel.isSemiJoinDone());
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,263,List<RexLocalRef> projList = mergedProgram.getProjectList();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,264,List<RelDataTypeField> newJoinFields =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,265,newJoinRel.getRowType().getFieldList();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,266,int nJoinFields = newJoinFields.size();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,284,relBuilder.push(newJoinRel);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,285,relBuilder.project(newProjExprs, joinRel.getRowType().getFieldNames());
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,289,relBuilder.convert(joinRel.getRowType(), false);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,351,Project projRel,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,359,if (projRel != null) {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,361,projRel.getNamedProjects();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,386,(RexNode) rexBuilder.makeInputRef(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,387,field.getType(),
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,40,public static final JoinPushExpressionsRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,44,public JoinPushExpressionsRule(Class<? extends Join> clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,46,super(operand(clazz, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,50,public JoinPushExpressionsRule(Class<? extends Join> clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,52,this(clazz, RelBuilder.proto(projectFactory));
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,26,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,67,public static final RelOptRule RIGHT =
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,68,new JoinPushThroughJoinRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,70,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,74,public static final RelOptRule LEFT =
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,75,new JoinPushThroughJoinRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,77,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,79,private final boolean right;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,85,Class<? extends Join> clazz, RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,86,super(
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,87,operand(clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,88,operand(clazz, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,90,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,91,this.right = right;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,96,Class<? extends Join> clazz, ProjectFactory projectFactory) {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,97,this(description, right, clazz, RelBuilder.proto(projectFactory));
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,101,if (right) {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,27,import org.apache.calcite.rex.RexBuilder;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,44,public static final JoinPushTransitivePredicatesRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,49,public JoinPushTransitivePredicatesRule(Class<? extends Join> clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,51,super(operand(clazz, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,55,public JoinPushTransitivePredicatesRule(Class<? extends Join> clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,57,this(clazz, RelBuilder.proto(Contexts.of(filterFactory)));
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,70,final RexBuilder rexBuilder = join.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,73,RelNode lChild = join.getLeft();
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,75,RelNode curr = lChild;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,78,call.getPlanner().onCopy(curr, lChild);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,81,RelNode rChild = join.getRight();
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,83,RelNode curr = rChild;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,86,call.getPlanner().onCopy(curr, rChild);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,90,lChild, rChild, join.getJoinType(), join.isSemiJoinDone());
core/src/main/java/org/apache/calcite/rel/rules/JoinToCorrelateRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinToCorrelateRule.java,77,this(RelBuilder.proto(Contexts.of(filterFactory)));
core/src/main/java/org/apache/calcite/rel/rules/JoinToCorrelateRule.java,82,public boolean matches(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinToCorrelateRule.java,96,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,104,public static final JoinToMultiJoinRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,113,super(
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,114,operand(clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,115,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,121,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,37,public static final JoinUnionTransposeRule LEFT_UNION =
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,44,public static final JoinUnionTransposeRule RIGHT_UNION =
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,56,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,71,public static final LoptOptimizeJoinRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,76,super(operand(MultiJoin.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,88,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,297,final TreeSet<Integer> sortedFactors = new TreeSet<>();
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,298,sortedFactors.addAll(simpleFactors.keySet());
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,1626,Pair.of(
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,1627,(RexNode) rexBuilder.makeInputRef(currFields.get(i).getType(), i),
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,69,public static final MultiJoinOptimizeBushyRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,77,super(operand(MultiJoin.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,60,public static final MultiJoinProjectTransposeRule MULTI_BOTH_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,61,new MultiJoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,62,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,63,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,64,operand(MultiJoin.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,65,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,66,operand(MultiJoin.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,69,public static final MultiJoinProjectTransposeRule MULTI_LEFT_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,70,new MultiJoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,71,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,72,some(
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,73,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,74,operand(MultiJoin.class, any())))),
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,77,public static final MultiJoinProjectTransposeRule MULTI_RIGHT_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,78,new MultiJoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,79,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,80,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,81,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,82,operand(MultiJoin.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,46,public static final ProjectCalcMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,52,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,53,operand(
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,54,LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,60,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,61,final LogicalProject project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,62,final LogicalCalc calc = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,28,import org.apache.calcite.rex.RexOver;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,45,private final PushProjector.ExprCondition preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,55,public ProjectFilterTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,56,Class<? extends Project> projectClass,
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,57,Class<? extends Filter> filterClass,
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,58,RelBuilderFactory relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,61,operand(
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,62,projectClass,
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,63,operand(filterClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,65,this.preserveExprCondition = preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,71,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,38,public static final ProjectJoinTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,46,private final PushProjector.ExprCondition preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,61,this.preserveExprCondition = preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,67,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,78,PushProjector pushProject =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,80,origProj,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,84,if (pushProject.locateAllRefs()) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,90,RelNode leftProjRel =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,91,pushProject.createProjectRefsAndExprs(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,95,RelNode rightProjRel =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,96,pushProject.createProjectRefsAndExprs(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,103,int[] adjustments = pushProject.getAdjustments();
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,107,projJoinFieldList.addAll(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,109,projJoinFieldList.addAll(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,110,leftProjRel.getRowType().getFieldList());
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,111,projJoinFieldList.addAll(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,112,rightProjRel.getRowType().getFieldList());
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,114,pushProject.convertRefsAndExprs(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,116,projJoinFieldList,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,121,Join newJoinRel =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,125,leftProjRel,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,126,rightProjRel,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,132,RelNode topProject =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,133,pushProject.createNewProject(newJoinRel, adjustments);
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,40,public static final ProjectMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,46,private final boolean force;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,56,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,57,operand(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,58,operand(Project.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,59,relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,61,this.force = force;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,66,this(force, RelBuilder.proto(projectFactory));
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,71,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,101,if (!force) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,112,if (force
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,36,public static final ProjectMultiJoinMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,43,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,44,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,45,operand(MultiJoin.class, any())), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,50,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,64,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,39,public static final ProjectSetOpTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,47,private PushProjector.ExprCondition preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,59,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,60,operand(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,61,LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,63,this.preserveExprCondition = preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,69,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,70,LogicalProject origProj = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,71,SetOp setOp = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,79,PushProjector pushProject =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,81,pushProject.locateAllRefs();
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,84,int[] adjustments = pushProject.getAdjustments();
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,17,package org.apache.calcite.rel.rules;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,20,import org.apache.calcite.plan.RelOptRuleCall;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,21,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,22,import org.apache.calcite.rel.core.Project;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,23,import org.apache.calcite.rel.core.Sort;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,25,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,35,public static final ProjectSortTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,51,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,52,final Project project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,53,final Sort sort = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,54,if (sort.getClass() != Sort.class) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,55,return;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,57,RelNode newProject =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,58,project.copy(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,59,project.getTraitSet(), ImmutableList.of(sort.getInput()));
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,60,final Sort newSort =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,61,sort.copy(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,62,sort.getTraitSet(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,63,newProject,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,64,sort.getCollation(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,65,sort.offset,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,66,sort.fetch);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,67,call.transformTo(newSort);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,49,public abstract class ProjectTableScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,60,public static final ProjectTableScanRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,73,public static final ProjectTableScanRule INTERPRETER =
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,53,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,23,import org.apache.calcite.plan.RelOptRuleOperand;
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,48,public static final ProjectWindowTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,52,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,53,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,58,final LogicalProject project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,59,final LogicalWindow window = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,171,final LogicalProject newTopProj = project.copy(
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,184,private ImmutableBitSet findReference(final LogicalProject project,
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,185,final LogicalWindow window) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,37,import static org.apache.calcite.plan.RelOptRule.any;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,38,import static org.apache.calcite.plan.RelOptRule.none;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,39,import static org.apache.calcite.plan.RelOptRule.operand;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,40,import static org.apache.calcite.plan.RelOptRule.some;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,41,import static org.apache.calcite.plan.RelOptRule.unordered;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,69,operand(LogicalUnion.class,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,72,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,133,new RemoveEmptySingleRule(Filter.class, "PruneEmptyFilter");
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,146,new RemoveEmptySingleRule(Sort.class, "PruneEmptySort");
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,160,operand(Sort.class, any()), "PruneSortLimit0") {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,162,Sort sort = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,163,if (sort.fetch != null
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,164,&& RexLiteral.intValue(sort.fetch) == 0) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,195,operand(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,196,some(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,198,operand(RelNode.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,201,Join join = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,202,if (join.getJoinType().generatesNullsOnLeft()) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,205,return;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,223,operand(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,224,some(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,225,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,229,Join join = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,230,if (join.getJoinType().generatesNullsOnRight()) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,233,return;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,250,super(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,256,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,82,public Convention getOutConvention() {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,87,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,121,public class DecimalShuttle extends RexShuttle {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,126,public DecimalShuttle(RexBuilder rexBuilder) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,219,private class ExpanderMap {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,268,public RexExpander getExpander(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,290,public abstract class RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,294,RexBuilder builder;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,300,RelDataType int8;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,306,RelDataType real8;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,311,public RexExpander(RexBuilder builder) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,722,private class CastExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,821,private class BinaryArithmeticExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,832,public RexNode expand(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1013,private class FloorExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1062,private class CeilExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1113,private class CaseExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1150,private class PassThroughExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1155,public boolean canExpand(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1185,private class CastArgAsDoubleExpander extends CastArgAsTypeExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1205,private abstract class CastArgAsTypeExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1212,public RexNode expand(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1245,private class ReinterpretExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1250,public boolean canExpand(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1255,public RexNode expand(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,109,public static final ReduceExpressionsRule PROJECT_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,116,public static final ReduceExpressionsRule JOIN_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,123,public static final ReduceExpressionsRule CALC_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,131,public static class FilterReduceExpressionsRule extends ReduceExpressionsRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,248,public static class ProjectReduceExpressionsRule extends ReduceExpressionsRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,278,public static class JoinReduceExpressionsRule extends ReduceExpressionsRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,325,public static class CalcReduceExpressionsRule extends ReduceExpressionsRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,420,protected ReduceExpressionsRule(Class<? extends RelNode> clazz,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,835,private final RelDataTypeFactory typeFactory;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,855,this.typeFactory = typeFactory;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,39,public static final SemiJoinFilterTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,48,super(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,56,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,58,LogicalFilter filter = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,60,RelNode newSemiJoin =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,47,public static final SemiJoinJoinTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,56,super(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,64,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,76,int nFieldsX = join.getLeft().getRowType().getFieldList().size();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,77,int nFieldsY = join.getRight().getRowType().getFieldList().size();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,78,int nFieldsZ = semiJoin.getRight().getRowType().getFieldList().size();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,79,int nTotalFields = nFieldsX + nFieldsY + nFieldsZ;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,109,RexNode newSemiJoinFilter;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,151,RelNode leftSemiJoinOp;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,164,RelNode leftJoinRel;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,165,RelNode rightJoinRel;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,167,leftJoinRel = newSemiJoin;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,168,rightJoinRel = join.getRight();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,170,leftJoinRel = join.getLeft();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,171,rightJoinRel = newSemiJoin;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,174,RelNode newJoinRel =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,178,leftJoinRel,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,179,rightJoinRel,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,183,call.transformTo(newJoinRel);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,36,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,56,public static final SemiJoinProjectTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,65,super(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,67,some(operand(LogicalProject.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,68,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,73,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,75,LogicalProject project = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,121,RexBuilder rexBuilder = project.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,122,RelDataTypeFactory typeFactory = rexBuilder.getTypeFactory();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,123,RelNode rightChild = semiJoin.getRight();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,35,public static final SemiJoinRemoveRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,47,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,48,super(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,50,some(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,52,some(operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,45,public static final SortJoinTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,54,super(
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,55,operand(sortClass,
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,46,public static final SortProjectTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,64,operand(sortClass,
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,71,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,112,equiv = ImmutableMap.of((RelNode) newSort, project.getInput());
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,22,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,52,private final boolean matchNullFetch;
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,57,this(Sort.class, Union.class, matchNullFetch, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,70,super(
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,71,operand(sortClass,
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,72,operand(unionClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,73,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,74,this.matchNullFetch = matchNullFetch;
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,87,&& (matchNullFetch || sort.fetch != null);
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,90,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,21,import org.apache.calcite.plan.RelOptRuleOperand;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,42,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,64,public static final SubQueryRemoveRule PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,89,public static final SubQueryRemoveRule FILTER =
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,114,public static final SubQueryRemoveRule JOIN =
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,140,RelBuilderFactory relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,141,String description) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,142,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,44,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,30,public static final UnionEliminatorRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,35,public static final UnionMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,43,super(
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,44,operand(unionClazz,
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,45,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,46,operand(RelNode.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,51,public UnionMergeRule(Class<? extends Union> unionClazz,
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,58,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,36,public static final UnionToDistinctRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,44,public UnionToDistinctRule(Class<? extends Union> unionClazz,
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,52,this(unionClazz, RelBuilder.proto(setOpFactory));
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,57,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,68,public static final ValuesReduceRule FILTER_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,84,public static final ValuesReduceRule PROJECT_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,100,public static final ValuesReduceRule PROJECT_FILTER_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,123,Util.discard(LOGGER);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,70,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,71,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,90,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,91,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,109,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,110,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,131,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,132,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,151,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,152,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,179,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,180,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,210,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,211,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,241,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,242,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,246,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,24,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1583,private final class RemoveSingleAggregateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1585,super(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1586,operand(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1588,operand(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1593,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1636,private final class RemoveCorrelationForScalarProjectRule extends RelOptRule {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1638,super(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1640,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1646,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1654,setCurrent(call.getPlanner().getRoot(), correlate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1760,if (!checkCorVars(correlate, project, filter, correlatedKeyList)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1774,removeCorrelationExpr(filter.getCondition(), false);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1785,if (!checkCorVars(correlate, project, null, null)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1800,createProjectWithAdditionalExprs(right,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1825,projectJoinOutputWithNullability(join, project, nullIndicatorPos);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1829,removeCorVarFromTree(correlate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1834,private final class RemoveCorrelationForScalarAggregateRule
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1835,extends RelOptRule {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1837,super(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1839,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1846,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1855,setCurrent(call.getPlanner().getRoot(), correlate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1946,removeCorrelationExpr(joinKey, false);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1970,if (!checkCorVars(correlate,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1971,aggInputProject,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1972,filter,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2020,joinCond =
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2021,removeCorrelationExpr(filter.getCondition(), false);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2029,if (!checkCorVars(correlate, aggInputProject, null, null)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2093,right =
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2094,createProjectWithAdditionalExprs(right,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2095,ImmutableList.of(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2127,removeCorrelationExpr(aggInputProjExpr,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2188,removeCorrelationExpr(aggOutputProjects.get(0), false);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2204,removeCorVarFromTree(correlate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2217,private final class AdjustProjectForCountAggregateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2218,final boolean flavor;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2221,super(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2222,flavor
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2224,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2228,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2230,this.flavor = flavor;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2233,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2238,if (flavor) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2266,if (generatedCorRels.contains(correlate)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2272,setCurrent(call.getPlanner().getRoot(), correlate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2332,generatedCorRels.add(newCorrelate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2342,aggregateCorrelatorOutput(newCorrelate, aggOutputProject, isCount);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,19,import org.apache.calcite.plan.RelOptRule;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,32,public class CsvProjectTableScanRule extends RelOptRule {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,33,public static final CsvProjectTableScanRule INSTANCE =
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,37,super(
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,38,operand(LogicalProject.class,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,39,operand(CsvTableScan.class, none())),
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,24,import org.apache.calcite.plan.RelTrait;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,248,protected final Convention out;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,254,super(clazz, in, out, description);
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,255,this.out = out;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,264,public static final MongoSortRule INSTANCE = new MongoSortRule();
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,266,private MongoSortRule() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,267,super(Sort.class, Convention.NONE, MongoRel.CONVENTION,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,271,public RelNode convert(RelNode rel) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,287,private static final MongoFilterRule INSTANCE = new MongoFilterRule();
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,289,private MongoFilterRule() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,290,super(LogicalFilter.class, Convention.NONE, MongoRel.CONVENTION,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,294,public RelNode convert(RelNode rel) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,310,private static final MongoProjectRule INSTANCE = new MongoProjectRule();
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,312,private MongoProjectRule() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,313,super(LogicalProject.class, Convention.NONE, MongoRel.CONVENTION,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,317,public RelNode convert(RelNode rel) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,500,public static final RelOptRule INSTANCE = new MongoAggregateRule();
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,502,private MongoAggregateRule() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,503,super(LogicalAggregate.class, Convention.NONE, MongoRel.CONVENTION,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,507,public RelNode convert(RelNode rel) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,29,public static final ConverterRule INSTANCE =
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,17,package org.apache.calcite.adapter.spark;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,19,import org.apache.calcite.adapter.enumerable.EnumerableConvention;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,20,import org.apache.calcite.plan.RelTraitSet;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,21,import org.apache.calcite.rel.RelNode;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,22,import org.apache.calcite.rel.convert.ConverterRule;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,29,public class EnumerableToSparkConverterRule extends ConverterRule {
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,30,public static final EnumerableToSparkConverterRule INSTANCE =
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,39,public RelNode convert(RelNode rel) {
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,40,RelTraitSet newTraitSet = rel.getTraitSet().replace(getOutTrait());
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,41,return new EnumerableToSparkConverter(
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,42,rel.getCluster(), newTraitSet, rel);
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,90,EnumerableToSparkConverterRule.INSTANCE,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,91,SparkToEnumerableConverterRule.INSTANCE,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,98,public static final EnumerableToSparkConverterRule INSTANCE =
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,99,new EnumerableToSparkConverterRule();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,101,private EnumerableToSparkConverterRule() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,102,super(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,103,RelNode.class, EnumerableConvention.INSTANCE, SparkRel.CONVENTION,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,115,public static final SparkToEnumerableConverterRule INSTANCE =
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,116,new SparkToEnumerableConverterRule();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,118,private SparkToEnumerableConverterRule() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,119,super(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,120,RelNode.class, SparkRel.CONVENTION, EnumerableConvention.INSTANCE,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,130,public static final SparkValuesRule SPARK_VALUES_RULE =
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,131,new SparkValuesRule();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,135,private SparkValuesRule() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,136,super(LogicalValues.class, Convention.NONE, SparkRel.CONVENTION,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,210,public static final SparkCalcRule SPARK_CALC_RULE =
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,211,new SparkCalcRule();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,217,private static class SparkCalcRule
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,218,extends ConverterRule {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,219,private SparkCalcRule() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,220,super(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,221,LogicalCalc.class,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,222,Convention.NONE,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,223,SparkRel.CONVENTION,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,227,public RelNode convert(RelNode rel) {
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,20,import org.apache.calcite.plan.RelOptRule;
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,54,extends RelOptRule {
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,73,new SplunkPushDownRule(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,80,operand(SplunkTableScan.class, none())))),
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,84,new SplunkPushDownRule(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,89,operand(SplunkTableScan.class, none()))),
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,93,new SplunkPushDownRule(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,99,new SplunkPushDownRule(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,102,operand(SplunkTableScan.class, none())),
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,113,public void onMatch(RelOptRuleCall call) {
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,298,s = s.append(" NOT ");
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,235,defineUnary(UNARY_MINUS, Negate, NullPolicy.STRICT);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,236,defineUnary(UNARY_PLUS, UnaryPlus, NullPolicy.STRICT);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,299,jdbcImplementor.visitChild(0, getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,125,Result x = visitChild(0, e.getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,127,return x;
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,129,final Builder builder =
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,130,x.builder(e, Clause.SELECT);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,131,final List<SqlNode> selectList = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,133,SqlNode sqlExpr = builder.context.toSql(null, ref);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,134,addSelect(selectList, sqlExpr, e.getRowType());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,137,builder.setSelect(new SqlNodeList(selectList, POS));
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,144,final Result x = visitChild(0, e.getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,173,return builder.result();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,206,Result x = visitChild(0, e.getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,208,Builder builder =
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,211,: x.builder(e);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,263,Result x = visitChild(0, e.getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,264,Builder builder = x.builder(e, Clause.ORDER_BY);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,271,x = builder.result();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,276,x = builder.result();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,281,x = builder.result();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,283,return x;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,228,final Result result = visitChild(input.i, input.e);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,724,final Expressions.FluentList<Clause> clauses;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,731,this.clauses = Expressions.list(clauses);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,783,return ((SqlCall) selectItem).operand(0);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,796,Clause maxClause = null;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,797,for (Clause clause : clauses) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,798,if (maxClause == null || clause.ordinal() > maxClause.ordinal()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,799,maxClause = clause;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,802,assert maxClause != null;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,803,return maxClause;
spark/src/main/java/org/apache/calcite/adapter/spark/JdbcToSparkConverter.java,116,jdbcImplementor.visitChild(0, getInput());
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcConvention.java,23,import org.apache.calcite.rel.rules.FilterSetOpTransposeRule;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcConvention.java,24,import org.apache.calcite.rel.rules.ProjectRemoveRule;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcConvention.java,69,planner.addRule(FilterSetOpTransposeRule.INSTANCE);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcConvention.java,70,planner.addRule(ProjectRemoveRule.INSTANCE);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,114,ImmutableList.of(
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,115,NoneToBindableConverterRule.INSTANCE,
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,31,import org.apache.calcite.rel.rules.CalcSplitRule;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,32,import org.apache.calcite.rel.rules.FilterTableScanRule;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,33,import org.apache.calcite.rel.rules.ProjectTableScanRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,28,import org.apache.calcite.rel.rules.AggregateFilterTransposeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,29,import org.apache.calcite.rel.rules.AggregateProjectMergeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,30,import org.apache.calcite.rel.rules.FilterJoinRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,31,import org.apache.calcite.rel.rules.JoinProjectTransposeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,32,import org.apache.calcite.rel.rules.ProjectFilterTransposeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,33,import org.apache.calcite.rel.rules.ProjectMergeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,203,ImmutableList.of(ProjectFilterTransposeRule.INSTANCE,
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,204,AggregateProjectMergeRule.INSTANCE,
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,205,AggregateFilterTransposeRule.INSTANCE),
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,270,ImmutableList.of(
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,271,JoinProjectTransposeRule.RIGHT_PROJECT,
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,272,JoinProjectTransposeRule.LEFT_PROJECT,
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,273,FilterJoinRule.FilterIntoJoinRule.FILTER_ON_JOIN,
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,274,ProjectMergeRule.INSTANCE),
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,165,public boolean isDistinct() {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,170,public boolean isKey(ImmutableBitSet columns) {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,184,public final RelOptQuery getQuery() {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,209,public boolean isValid(boolean fail) {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,241,public final double getRows() {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,249,public final Set<String> getVariablesStopped() {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,281,public final RelOptCost computeSelfCost(RelOptPlanner planner) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,80,new AggregateExpandDistinctAggregatesRule(LogicalAggregate.class, true,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,81,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,86,new AggregateExpandDistinctAggregatesRule(LogicalAggregate.class, false,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,87,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,57,new AggregateFilterTransposeRule();
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,59,private AggregateFilterTransposeRule() {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,29,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,30,import org.apache.calcite.rel.logical.LogicalJoin;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,67,new AggregateJoinTransposeRule(LogicalAggregate.class, LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,68,RelFactories.LOGICAL_BUILDER, false);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,72,new AggregateJoinTransposeRule(LogicalAggregate.class, LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,73,RelFactories.LOGICAL_BUILDER, true);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,25,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,52,new AggregateProjectMergeRule(Aggregate.class, Project.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,25,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,26,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,67,new AggregateProjectPullUpConstantsRule(LogicalAggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,68,LogicalProject.class, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,73,new AggregateProjectPullUpConstantsRule(LogicalAggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,74,RelNode.class, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,25,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,26,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,85,new AggregateReduceFunctionsRule(operand(LogicalAggregate.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,86,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,22,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,32,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,60,new AggregateStarTableRule(
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,62,some(operand(StarTable.StarTableScan.class, none()))),
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,66,new AggregateStarTableRule(
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,68,operand(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,69,operand(StarTable.StarTableScan.class, none()))),
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,72,final Aggregate aggregate = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,73,final Project project = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,74,final StarTable.StarTableScan scan = call.rel(2);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,75,final RelNode rel =
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,76,AggregateProjectMergeRule.apply(call, aggregate, project);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,77,final Aggregate aggregate2;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,78,final Project project2;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,79,if (rel instanceof Aggregate) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,80,project2 = null;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,81,aggregate2 = (Aggregate) rel;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,83,project2 = (Project) rel;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,84,aggregate2 = (Aggregate) project2.getInput();
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,86,return;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,88,apply(call, project2, aggregate2, scan);
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,25,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,26,import org.apache.calcite.rel.logical.LogicalUnion;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,43,new AggregateUnionAggregateRule(LogicalAggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,27,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,28,import org.apache.calcite.rel.logical.LogicalUnion;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,55,new AggregateUnionTransposeRule(LogicalAggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,56,LogicalUnion.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,43,new CalcSplitRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,52,new FilterAggregateTransposeRule(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,53,RelFactories.LOGICAL_BUILDER, Aggregate.class);
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,45,new FilterCorrelateRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,61,new FilterIntoJoinRule(true, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,68,new FilterIntoJoinRule(false, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,37,new FilterMergeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,47,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,42,new FilterSetOpTransposeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,19,import org.apache.calcite.adapter.enumerable.EnumerableInterpreter;
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,65,new FilterTableScanRule(
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,66,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,69,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,70,final Filter filter = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,71,final TableScan scan = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,72,apply(call, filter, scan);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,78,new FilterTableScanRule(
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,79,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,80,operand(EnumerableInterpreter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,83,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,84,final Filter filter = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,85,final TableScan scan = call.rel(2);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,86,apply(call, filter, scan);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,57,public static final JoinCommuteRule INSTANCE = new JoinCommuteRule(false);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,60,public static final JoinCommuteRule SWAP_OUTER = new JoinCommuteRule(true);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,75,private JoinCommuteRule(boolean swapOuter) {
core/src/main/java/org/apache/calcite/rel/rules/JoinExtractFilterRule.java,25,import org.apache.calcite.rel.logical.LogicalJoin;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,30,import org.apache.calcite.rel.logical.LogicalJoin;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,31,import org.apache.calcite.rel.logical.LogicalProject;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,61,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,62,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,63,operand(LogicalProject.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,64,operand(LogicalProject.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,68,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,69,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,70,some(operand(LogicalProject.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,74,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,75,operand(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,76,LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,77,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,78,operand(LogicalProject.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,82,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,83,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,84,operand(LogicalProject.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,85,operand(LogicalProject.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,87,true, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,90,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,91,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,92,some(operand(LogicalProject.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,94,true, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,97,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,98,operand(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,99,LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,100,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,101,operand(LogicalProject.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,103,true, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,41,new JoinPushExpressionsRule(Join.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,45,new JoinPushTransitivePredicatesRule(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,46,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,25,import org.apache.calcite.rel.logical.LogicalJoin;
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,38,new JoinUnionTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,39,operand(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,40,operand(Union.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,41,operand(RelNode.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,45,new JoinUnionTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,46,operand(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,47,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,48,operand(Union.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,72,new LoptOptimizeJoinRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,70,new MultiJoinOptimizeBushyRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,25,import org.apache.calcite.rel.logical.LogicalFilter;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,26,import org.apache.calcite.rel.logical.LogicalProject;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,22,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,37,new ProjectMultiJoinMergeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,19,import org.apache.calcite.adapter.enumerable.EnumerableInterpreter;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,61,new ProjectTableScanRule(
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,62,operand(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,66,final Project project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,67,final TableScan scan = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,68,apply(call, project, scan);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,74,new ProjectTableScanRule(
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,75,operand(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,76,operand(EnumerableInterpreter.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,80,final Project project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,81,final TableScan scan = call.rel(2);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,82,apply(call, project, scan);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,30,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,31,import org.apache.calcite.rel.logical.LogicalCalc;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,32,import org.apache.calcite.rel.logical.LogicalFilter;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,33,import org.apache.calcite.rel.logical.LogicalProject;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,102,public static final ReduceExpressionsRule FILTER_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,57,new SemiJoinProjectTransposeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,64,private SemiJoinProjectTransposeRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,29,import org.apache.calcite.rel.logical.LogicalJoin;
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,30,import org.apache.calcite.rel.logical.LogicalSort;
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,46,new SortJoinTransposeRule(LogicalSort.class,
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,29,import org.apache.calcite.rel.logical.LogicalProject;
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,42,public static final SortUnionTransposeRule INSTANCE = new SortUnionTransposeRule(false);
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,48,public static final SortUnionTransposeRule MATCH_NULL_FETCH = new SortUnionTransposeRule(true);
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,56,private SortUnionTransposeRule(boolean matchNullFetch) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,30,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,22,import org.apache.calcite.rel.logical.LogicalUnion;
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,24,import org.apache.calcite.rel.logical.LogicalUnion;
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,23,import org.apache.calcite.rel.logical.LogicalUnion;
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,37,new UnionToDistinctRule(LogicalUnion.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,69,new ValuesReduceRule(
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,70,operand(LogicalFilter.class,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,73,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,74,LogicalFilter filter = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,75,LogicalValues values = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,76,apply(call, null, filter, values);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,85,new ValuesReduceRule(
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,86,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,89,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,90,LogicalProject project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,91,LogicalValues values = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,92,apply(call, project, null, values);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,101,new ValuesReduceRule(
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,102,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,103,operand(LogicalFilter.class,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,106,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,107,LogicalProject project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,108,LogicalFilter filter = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,109,LogicalValues values = call.rel(2);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,110,apply(call, project, filter, values);
core/src/main/java/org/apache/calcite/tools/Programs.java,38,import org.apache.calcite.rel.rules.AggregateExpandDistinctAggregatesRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,39,import org.apache.calcite.rel.rules.AggregateReduceFunctionsRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,40,import org.apache.calcite.rel.rules.AggregateStarTableRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,42,import org.apache.calcite.rel.rules.FilterAggregateTransposeRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,44,import org.apache.calcite.rel.rules.FilterJoinRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,45,import org.apache.calcite.rel.rules.FilterProjectTransposeRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,46,import org.apache.calcite.rel.rules.FilterTableScanRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,48,import org.apache.calcite.rel.rules.JoinAssociateRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,49,import org.apache.calcite.rel.rules.JoinCommuteRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,51,import org.apache.calcite.rel.rules.JoinToMultiJoinRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,52,import org.apache.calcite.rel.rules.LoptOptimizeJoinRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,53,import org.apache.calcite.rel.rules.MultiJoinOptimizeBushyRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,55,import org.apache.calcite.rel.rules.ProjectMergeRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,57,import org.apache.calcite.rel.rules.SemiJoinRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,58,import org.apache.calcite.rel.rules.SortProjectTransposeRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,59,import org.apache.calcite.rel.rules.SubQueryRemoveRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,131,? JoinAssociateRule.INSTANCE
core/src/main/java/org/apache/calcite/tools/Programs.java,132,: ProjectMergeRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,133,AggregateStarTableRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,134,AggregateStarTableRule.INSTANCE2,
core/src/main/java/org/apache/calcite/tools/Programs.java,135,FilterTableScanRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,136,FilterProjectTransposeRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,137,FilterJoinRule.FILTER_ON_JOIN,
core/src/main/java/org/apache/calcite/tools/Programs.java,138,AggregateExpandDistinctAggregatesRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,139,AggregateReduceFunctionsRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,140,FilterAggregateTransposeRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,141,JoinCommuteRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,144,SortProjectTransposeRule.INSTANCE);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTableScan.java,79,planner.addRule(CsvProjectTableScanRule.INSTANCE);
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,49,import org.apache.calcite.rel.rules.FilterToCalcRule;
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,50,import org.apache.calcite.rel.rules.ProjectToCalcRule;
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,88,ProjectToCalcRule.INSTANCE,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,89,FilterToCalcRule.INSTANCE,
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,440,final SimpleDateFormat format =
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,441,new SimpleDateFormat(
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,220,map.put("agg", toJson(node.getAggregation()));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,227,return type.isNullable() ? Integer.class : int.class;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,229,return type.isNullable() ? Long.class : long.class;
core/src/main/java/org/apache/calcite/adapter/enumerable/NullPolicy.java,34,AND,
core/src/main/java/org/apache/calcite/adapter/enumerable/NullPolicy.java,37,OR,
core/src/main/java/org/apache/calcite/adapter/enumerable/NullPolicy.java,40,NOT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,22,import org.apache.calcite.linq4j.Ord;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,76,import static org.apache.calcite.linq4j.tree.ExpressionType.AndAlso;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,85,import static org.apache.calcite.linq4j.tree.ExpressionType.Not;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,87,import static org.apache.calcite.linq4j.tree.ExpressionType.OrElse;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,94,import static org.apache.calcite.sql.fun.SqlStdOperatorTable.CASE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,191,private final Map<SqlOperator, CallImplementor> map = new HashMap<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,198,defineMethod(ROW, BuiltInMethod.ARRAY.method, NullPolicy.ANY);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,212,final TrimImplementor trimImplementor = new TrimImplementor();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,213,defineImplementor(TRIM, NullPolicy.STRICT, trimImplementor, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,216,defineBinary(AND, AndAlso, NullPolicy.AND, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,217,defineBinary(OR, OrElse, NullPolicy.OR, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,218,defineUnary(NOT, Not, NullPolicy.NOT);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,246,defineImplementor(DATETIME_PLUS, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,247,new DatetimeArithmeticImplementor(), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,250,defineImplementor(FLOOR, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,253,BuiltInMethod.UNIX_DATE_FLOOR.method), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,254,defineImplementor(CEIL, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,257,BuiltInMethod.UNIX_DATE_CEIL.method), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,259,map.put(IS_NULL, new IsXxxImplementor(null, false));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,260,map.put(IS_NOT_NULL, new IsXxxImplementor(null, true));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,261,map.put(IS_TRUE, new IsXxxImplementor(true, false));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,262,map.put(IS_NOT_TRUE, new IsXxxImplementor(true, true));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,263,map.put(IS_FALSE, new IsXxxImplementor(false, false));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,264,map.put(IS_NOT_FALSE, new IsXxxImplementor(false, true));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,268,new MethodImplementor(BuiltInMethod.LIKE.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,269,defineImplementor(LIKE, NullPolicy.STRICT, likeImplementor, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,270,defineImplementor(NOT_LIKE, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,271,NotImplementor.of(likeImplementor), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,273,new MethodImplementor(BuiltInMethod.SIMILAR.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,274,defineImplementor(SIMILAR_TO, NullPolicy.STRICT, similarImplementor, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,275,defineImplementor(NOT_SIMILAR_TO, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,276,NotImplementor.of(similarImplementor), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,284,map.put(CASE, new CaseImplementor());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,286,map.put(CAST, new CastOptimizedImplementor());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,288,defineImplementor(REINTERPRET, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,289,new ReinterpretImplementor(), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,291,final CallImplementor value = new ValueConstructorImplementor();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,371,private void defineImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,372,SqlOperator operator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,373,NullPolicy nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,374,NotNullImplementor implementor,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,375,boolean harmonize) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,376,CallImplementor callImplementor =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,377,createImplementor(implementor, nullPolicy, harmonize);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,378,map.put(operator, callImplementor);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,381,private static RexCall call2(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,382,boolean harmonize,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,383,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,384,RexCall call) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,385,if (!harmonize) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,386,return call;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,388,final List<RexNode> operands2 =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,389,harmonize(translator, call.getOperands());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,390,if (operands2.equals(call.getOperands())) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,391,return call;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,393,return call.clone(call.getType(), operands2);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,400,switch (nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,401,case ANY:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,402,case STRICT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,411,case AND:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,413,if (nullAs == NullAs.FALSE) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,414,nullPolicy2 = NullPolicy.ANY;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,461,case OR:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,506,case NOT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,510,return new CallImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,511,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,512,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,513,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,514,case NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,515,return Expressions.call(BuiltInMethod.NOT.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,516,translator.translateList(call.getOperands(), nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,517,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,518,return Expressions.not(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,519,translator.translate(call.getOperands().get(0),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,520,negate(nullAs)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,524,private NullAs negate(NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,525,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,526,case FALSE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,527,return NullAs.TRUE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,528,case TRUE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,529,return NullAs.FALSE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,530,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,531,return nullAs;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,535,case NONE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,544,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,545,throw new AssertionError(nullPolicy);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,549,private void defineMethod(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,550,SqlOperator operator, String functionName, NullPolicy nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,551,defineImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,552,operator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,553,nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,554,new MethodNameImplementor(functionName),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,555,false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,558,private void defineMethod(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,559,SqlOperator operator, Method method, NullPolicy nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,560,defineImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,561,operator, nullPolicy, new MethodImplementor(method), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,564,private void defineUnary(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,565,SqlOperator operator, ExpressionType expressionType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,566,NullPolicy nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,567,defineImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,568,operator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,569,nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,570,new UnaryImplementor(expressionType), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,573,private void defineBinary(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,574,SqlOperator operator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,575,ExpressionType expressionType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,576,NullPolicy nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,577,String backupMethodName) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,578,defineImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,579,operator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,580,nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,581,new BinaryImplementor(expressionType, backupMethodName),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,582,true);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,585,public static final RexImpTable INSTANCE = new RexImpTable();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,587,public CallImplementor get(final SqlOperator operator) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,595,return ((ImplementableFunction) udf).getImplementor();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,629,static Expression maybeNegate(boolean negate, Expression expression) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,630,if (!negate) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,631,return expression;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,633,return Expressions.not(expression);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,648,Expressions.equal(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,649,operand,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,650,NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,656,private static boolean nullable(RexCall call, int i) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,657,return call.getOperands().get(i).getType().isNullable();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,661,private static List<RexNode> harmonize(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,662,final RexToLixTranslator translator, final List<RexNode> operands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,663,int nullCount = 0;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,664,final List<RelDataType> types = new ArrayList<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,665,final RelDataTypeFactory typeFactory =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,666,translator.builder.getTypeFactory();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,667,for (RexNode operand : operands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,668,RelDataType type = operand.getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,669,type = toSql(typeFactory, type);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,670,if (translator.isNullable(operand)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,671,++nullCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,673,type = typeFactory.createTypeWithNullability(type, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,675,types.add(type);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,677,if (allSame(types)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,680,return operands;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,682,final RelDataType type = typeFactory.leastRestrictive(types);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,683,if (type == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,687,return operands;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,689,assert (nullCount > 0) == type.isNullable();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,690,final List<RexNode> list = new ArrayList<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,691,for (RexNode operand : operands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,692,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,693,translator.builder.ensureType(type, operand, false));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,695,return list;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,722,private static Expression implementNullSemantics0(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,723,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,724,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,725,NullAs nullAs,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,726,NullPolicy nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,727,boolean harmonize,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,728,NotNullImplementor implementor) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,729,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,730,case IS_NOT_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,734,return Expressions.foldAnd(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,735,translator.translateList(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,736,call.getOperands(), nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,738,break;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,739,case IS_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,743,return Expressions.foldOr(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,744,translator.translateList(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,745,call.getOperands(), nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,747,break;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,749,final RexCall call2 = call2(harmonize, translator, call);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,750,try {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,751,return implementNullSemantics(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,752,translator, call2, nullAs, nullPolicy, implementor);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,754,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,755,case NOT_POSSIBLE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,756,throw e;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,757,case FALSE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,758,return FALSE_EXPR;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,759,case TRUE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,760,return TRUE_EXPR;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,761,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,762,return NULL_EXPR;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,767,private static Expression implementNullSemantics(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,768,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,769,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,770,NullAs nullAs,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,771,NullPolicy nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,772,NotNullImplementor implementor) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,773,final List<Expression> list = new ArrayList<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,774,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,775,case NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,778,if (translator.isNullable(operand.e)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,779,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,780,translator.translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,781,operand.e, NullAs.IS_NULL));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,782,translator = translator.setNullable(operand.e, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,785,final Expression box =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,786,Expressions.box(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,787,implementCall(translator, call, implementor, nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,788,return optimize(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,789,Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,790,Expressions.foldOr(list),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,792,box));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,793,case FALSE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,796,if (translator.isNullable(operand.e)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,797,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,798,translator.translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,799,operand.e, NullAs.IS_NOT_NULL));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,800,translator = translator.setNullable(operand.e, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,803,list.add(implementCall(translator, call, implementor, nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,804,return Expressions.foldAnd(list);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,805,case TRUE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,808,if (translator.isNullable(operand.e)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,809,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,810,translator.translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,811,operand.e, NullAs.IS_NULL));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,812,translator = translator.setNullable(operand.e, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,815,list.add(implementCall(translator, call, implementor, nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,816,return Expressions.foldOr(list);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,817,case NOT_POSSIBLE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,824,final Map<RexNode, Boolean> nullable = new HashMap<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,828,for (RexNode arg : call.getOperands()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,829,if (translator.isNullable(arg) && !nullable.containsKey(arg)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,830,nullable.put(arg, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,834,nullable.put(call, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,835,translator = translator.setNullable(nullable);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,837,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,838,return implementCall(translator, call, implementor, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,842,private static Expression implementCall(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,844,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,845,NotNullImplementor implementor,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,848,translator.translateList(call.getOperands());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,849,Expression result =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,850,implementor.implement(translator, call, translatedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,909,x,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,919,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,920,BuiltInMethod.IS_TRUE.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,921,x);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,923,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,924,BuiltInMethod.IS_NOT_FALSE.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,925,x);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1438,private static class TrimImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1439,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1440,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1441,final Object value =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1442,((ConstantExpression) translatedOperands.get(0)).value;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1452,translatedOperands.get(1),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1464,super(methodName);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1469,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1470,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1478,return translatedOperands.get(0);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1493,final ConstantExpression tur =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1494,(ConstantExpression) translatedOperands.get(1);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1495,final TimeUnitRange timeUnitRange = (TimeUnitRange) tur.value;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1519,private static class MethodImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1522,MethodImplementor(Method method) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1526,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1527,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1528,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1529,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1563,private static class MethodNameImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1566,MethodNameImplementor(String methodName) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1570,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1571,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1572,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1573,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1577,translatedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1582,private static class BinaryImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1605,BinaryImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1606,ExpressionType expressionType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1607,String backupMethodName) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1612,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1613,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1614,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1615,List<Expression> expressions) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1647,private static class UnaryImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1650,UnaryImplementor(ExpressionType expressionType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1654,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1655,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1656,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1657,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1665,private static class CaseImplementor implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1666,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1667,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1668,return implementRecurse(translator, call, nullAs, 0);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1671,private Expression implementRecurse(RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1672,RexCall call, NullAs nullAs, int i) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1673,List<RexNode> operands = call.getOperands();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1674,if (i == operands.size() - 1) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1676,return translator.translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1677,translator.builder.ensureType(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1678,call.getType(), operands.get(i), false), nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1680,Expression ifTrue;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1681,try {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1682,ifTrue = translator.translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1683,translator.builder.ensureType(call.getType(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1684,operands.get(i + 1),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1685,false), nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1687,ifTrue = null;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1690,Expression ifFalse;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1691,try {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1692,ifFalse = implementRecurse(translator, call, nullAs, i + 2);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1694,if (ifTrue == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1695,throw RexToLixTranslator.AlwaysNull.INSTANCE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1697,ifFalse = null;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1700,Expression test = translator.translate(operands.get(i), NullAs.FALSE);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1702,return ifTrue == null || ifFalse == null
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1704,: Expressions.condition(test, ifTrue, ifFalse);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1711,private static class CastOptimizedImplementor implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1712,private final CallImplementor accurate;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1714,private CastOptimizedImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1715,accurate = createImplementor(new CastImplementor(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1716,NullPolicy.STRICT, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1719,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1720,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1723,if (call.getType().equals(arg.getType())) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1725,return translator.translate(arg, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1729,&& nullAs == NullAs.NULL
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1733,translator.typeFactory, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1735,return accurate.implement(translator, call, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1740,private static class CastImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1741,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1742,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1743,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1744,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1745,assert call.getOperands().size() == 1;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1746,final RelDataType sourceType = call.getOperands().get(0).getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1751,final boolean nullable =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1754,&& !Primitive.is(translatedOperands.get(0).getType());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1756,translator.nullifyType(call.getType(), nullable);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1758,targetType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1759,translatedOperands.get(0));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1764,private static class ReinterpretImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1765,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1766,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1767,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1768,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1770,return translatedOperands.get(0);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1776,implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1777,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1778,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1779,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1780,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1781,return translator.translateConstructor(call.getOperands(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1782,call.getOperator().getKind());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1787,private static class ItemImplementor
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1788,implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1789,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1790,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1791,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1792,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1794,getImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1795,call.getOperands().get(0).getType().getSqlTypeName());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1804,return new MethodImplementor(BuiltInMethod.ARRAY_ITEM.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1806,return new MethodImplementor(BuiltInMethod.MAP_ITEM.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1808,return new MethodImplementor(BuiltInMethod.ANY_ITEM.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1818,implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1819,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1820,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1821,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1822,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1823,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1824,case IS_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1825,return Expressions.constant(false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1826,case IS_NOT_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1827,return Expressions.constant(true);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1866,private static class IsXxxImplementor
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1867,implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1868,private final Boolean seek;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1869,private final boolean negate;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1872,this.seek = seek;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1873,this.negate = negate;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1876,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1877,RexToLixTranslator translator, RexCall call, NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1878,List<RexNode> operands = call.getOperands();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1879,assert operands.size() == 1;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1880,if (seek == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1881,return translator.translate(operands.get(0),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1882,negate ? NullAs.IS_NOT_NULL : NullAs.IS_NULL);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1884,return maybeNegate(negate == seek,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1885,translator.translate(operands.get(0),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1886,seek ? NullAs.FALSE : NullAs.TRUE));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1892,private static class NotImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1893,private final NotNullImplementor implementor;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1899,private static NotNullImplementor of(NotNullImplementor implementor) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1903,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1904,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1905,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1906,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1908,implementor.implement(translator, call, translatedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1915,implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1916,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1917,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1920,Expression trop1 = translatedOperands.get(1);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,33,import org.apache.calcite.rel.type.RelDataTypeFactoryImpl;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,46,import org.apache.calcite.sql.SqlKind;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,54,import com.google.common.collect.ImmutableMap;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,62,import java.util.Collections;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,63,import java.util.LinkedHashMap;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,76,public class RexToLixTranslator {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,94,private final Map<? extends RexNode, Boolean> exprNullableMap;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,95,private final RexToLixTranslator parent;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,145,Map<? extends RexNode, Boolean> exprNullableMap,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,147,RexToLixTranslator parent,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,219,Expression expression = translate0(expr, nullAs, storageType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,221,assert expression != null;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,222,return list.append("v", expression);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,428,private Expression translate0(RexNode expr, RexImpTable.NullAs nullAs,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,429,Type storageType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,430,if (nullAs == RexImpTable.NullAs.NULL && !expr.getType().isNullable()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,431,nullAs = RexImpTable.NullAs.NOT_POSSIBLE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,433,switch (expr.getKind()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,471,case LOCAL_REF:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,472,return translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,473,deref(expr),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,474,nullAs,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,475,storageType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,476,case LITERAL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,477,return translateLiteral(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,478,(RexLiteral) expr,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,479,nullifyType(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,480,expr.getType(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,482,&& nullAs != RexImpTable.NullAs.NOT_POSSIBLE),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,483,typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,484,nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,485,case DYNAMIC_PARAM:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,486,return translateParameter((RexDynamicParam) expr, nullAs, storageType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,487,case CORREL_VARIABLE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,488,throw new RuntimeException("Cannot translate " + expr + ". Correlated"
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,489,+ " variables should always be referenced by field access");
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,491,RexFieldAccess fieldAccess = (RexFieldAccess) expr;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,492,RexNode target = deref(fieldAccess.getReferenceExpr());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,505,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,506,if (expr instanceof RexCall) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,507,return translateCall((RexCall) expr, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,509,throw new RuntimeException(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,528,private Expression translateCall(RexCall call, RexImpTable.NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,529,final SqlOperator operator = call.getOperator();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,530,CallImplementor implementor =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,531,RexImpTable.INSTANCE.get(operator);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,532,if (implementor == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,533,throw new RuntimeException("cannot translate call " + call);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,535,return implementor.implement(this, call, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,539,private Expression translateParameter(RexDynamicParam expr,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,540,RexImpTable.NullAs nullAs, Type storageType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,541,if (storageType == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,542,storageType = typeFactory.getJavaClass(expr.getType());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,544,return nullAs.handle(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,546,Expressions.call(root, BuiltInMethod.DATA_CONTEXT_GET.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,547,Expressions.constant("?" + expr.getIndex())),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,548,storageType));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,571,throw AlwaysNull.INSTANCE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,904,public Expression translateConstructor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,905,List<RexNode> operandList, SqlKind kind) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,906,switch (kind) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,907,case MAP_VALUE_CONSTRUCTOR:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,908,Expression map =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,909,list.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,911,Expressions.new_(LinkedHashMap.class),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,912,false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,913,for (int i = 0; i < operandList.size(); i++) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,914,RexNode key = operandList.get(i++);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,915,RexNode value = operandList.get(i);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,916,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,917,Expressions.statement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,918,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,919,map,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,920,BuiltInMethod.MAP_PUT.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,921,Expressions.box(translate(key)),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,922,Expressions.box(translate(value)))));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,924,return map;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,925,case ARRAY_VALUE_CONSTRUCTOR:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,926,Expression lyst =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,927,list.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,929,Expressions.new_(ArrayList.class),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,930,false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,931,for (RexNode value : operandList) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,932,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,933,Expressions.statement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,934,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,935,lyst,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,936,BuiltInMethod.COLLECTION_ADD.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,937,Expressions.box(translate(value)))));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,939,return lyst;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,940,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,941,throw new AssertionError("unexpected: " + kind);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,957,if (!e.getType().isNullable()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,958,return false;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,960,final Boolean b = isKnownNullable(e);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,961,return b == null || b;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,970,protected Boolean isKnownNullable(RexNode node) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,971,if (!exprNullableMap.isEmpty()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,972,Boolean nullable = exprNullableMap.get(node);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,973,if (nullable != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,974,return nullable;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,977,return parent == null ? null : parent.isKnownNullable(node);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,982,public RexToLixTranslator setNullable(RexNode e, boolean nullable) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,983,return setNullable(Collections.singletonMap(e, nullable));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,990,if (nullable == null || nullable.isEmpty()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,991,return this;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,993,return new RexToLixTranslator(program, typeFactory, root, inputGetter, list,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1014,public RelDataType nullifyType(RelDataType type, boolean nullable) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1015,if (!nullable) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1016,final Primitive primitive = javaPrimitive(type);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1017,if (primitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1018,return typeFactory.createJavaType(primitive.primitiveClass);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1021,return typeFactory.createTypeWithNullability(type, nullable);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1024,private Primitive javaPrimitive(RelDataType type) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1025,if (type instanceof RelDataTypeFactoryImpl.JavaType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1026,return Primitive.ofBox(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1027,((RelDataTypeFactoryImpl.JavaType) type).getJavaClass());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1029,return null;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1070,static class AlwaysNull extends ControlFlowException {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1072,public static final AlwaysNull INSTANCE = new AlwaysNull();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1074,private AlwaysNull() {}
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,19,import org.apache.calcite.runtime.FlatLists;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,41,private final String string;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,58,this.string = computeString();
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,472,List<RelTrait> newTraits;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,473,switch (traits.length) {
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,474,case 0:
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,475,newTraits = ImmutableList.of(canonizedTrait);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,476,break;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,477,case 1:
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,478,newTraits = FlatLists.of(traits[0], canonizedTrait);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,479,break;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,480,case 2:
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,481,newTraits = FlatLists.of(traits[0], traits[1], canonizedTrait);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,482,break;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,483,default:
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,485,.add(canonizedTrait).build();
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,487,return cache.getOrAdd(newTraits);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,548,RelTraitSet getOrAdd(List<RelTrait> traits) {
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,549,RelTraitSet traitSet1 = map.get(traits);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,550,if (traitSet1 != null) {
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,551,return traitSet1;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,555,map.put(traits, traitSet);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,556,return traitSet;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFieldImpl.java,50,return index
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFieldImpl.java,52,^ type.hashCode();
core/src/main/java/org/apache/calcite/sql/SqlOverOperator.java,94,SqlWindow w = validator.resolveWindow(window, scope, false);
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,522,SqlWindow win = validator.resolveWindow(this, operandScope, false);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2517,public boolean isAggregate(SqlNode selectNode) {
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,65,connector.setSoLingerTime(-1);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,389,return dummyProject(fieldCount, newInput);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,416,return result(relBuilder.build(), mapping);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,438,relBuilder.project(ImmutableList.<RexNode>of(expr), ImmutableList.of("DUMMY"));
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,439,return result(relBuilder.build(), mapping);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,880,return result(relBuilder.build(), mapping);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,59,PushProjector.ExprCondition preserveExprCondition) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,76,origProj = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,79,origProj = null;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,82,RelNode rel = filter.getInput();
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,83,RexNode origFilter = filter.getCondition();
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,86,&& RexOver.containsOver(origProj.getProjects(), null)) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,95,PushProjector pushProjector =
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,96,new PushProjector(
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,98,RelNode topProject = pushProjector.convertProject(null);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2166,final ImmutableBitSet inputBits = inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2400,final List<RexNode> list = new ArrayList<>();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2401,pushShuttle(project).visitList(nodes, list);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2402,return list;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3333,super(true);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3334,this.inputBitSet = ImmutableBitSet.builder();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3335,this.extraFields = extraFields;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3349,return analyze(node).inputBitSet.build();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3359,return inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3363,inputBitSet.set(inputRef.getIndex());
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,35,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,122,for (RexNode expr : program.getExprList()) {
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,123,expr.accept(vuv);
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,267,final List<RexNode> rexNodesWindow = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,268,for (RexNode rexNode : program.getExprList()) {
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,269,rexNodesWindow.add(rexNode.accept(shuttle));
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,271,final List<RexNode> refToWindow = toInputRefs(rexNodesWindow);
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,135,.visitList(bottom, newBottomList);
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,457,return inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,19,import org.apache.calcite.linq4j.Ord;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,38,import org.apache.calcite.rex.RexVisitorImpl;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,346,for (final Ord<RexNode> expr : Ord.zip(exprs)) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,347,expr.e.accept(
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,348,new RexVisitorImpl<Void>(true) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,349,public Void visitLocalRef(RexLocalRef localRef) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,350,graph.addEdge(localRef.getIndex(), expr.i);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,351,return null;
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,166,final List<RexNode> topProjExps = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,167,for (RexNode rexNode : project.getChildExps()) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,168,topProjExps.add(rexNode.accept(indexAdjustment));
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,200,for (RexNode rexNode : project.getChildExps()) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,201,rexNode.accept(referenceFinder);
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,221,for (Window.RexWinAggCall rexWinAggCall : group.aggCalls) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,222,rexWinAggCall.accept(referenceFinder);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,31,public class LogicVisitor implements RexBiVisitor<Logic, Logic> {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,71,public Logic visitCall(RexCall call, Logic logic) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,108,private Logic end(RexNode node, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,115,public Logic visitInputRef(RexInputRef inputRef, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,116,return end(inputRef, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,119,public Logic visitLocalRef(RexLocalRef localRef, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,120,return end(localRef, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,123,public Logic visitLiteral(RexLiteral literal, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,124,return end(literal, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,127,public Logic visitOver(RexOver over, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,131,public Logic visitCorrelVariable(RexCorrelVariable correlVariable,
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,132,Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,133,return end(correlVariable, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,136,public Logic visitDynamicParam(RexDynamicParam dynamicParam, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,137,return end(dynamicParam, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,140,public Logic visitRangeRef(RexRangeRef rangeRef, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,141,return end(rangeRef, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,144,public Logic visitFieldAccess(RexFieldAccess fieldAccess, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,148,public Logic visitSubQuery(RexSubQuery subQuery, Logic arg) {
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,105,for (RexNode expr : exprList) {
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,106,expr.accept(shuttle);
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,156,public void visitList(
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,157,List<? extends RexNode> exprs, List<RexNode> outExprs) {
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,158,for (RexNode expr : exprs) {
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,159,outExprs.add(expr.accept(this));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,924,public static Iterable<RexNode> apply(Mappings.TargetMapping mapping,
core/src/main/java/org/apache/calcite/rex/RexUtil.java,926,final RexPermuteInputsShuttle shuttle = RexPermuteInputsShuttle.of(mapping);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1176,public static Iterable<RexNode> shift(Iterable<RexNode> nodes, int offset) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1177,return new RexShiftShuttle(offset).apply(nodes);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1769,for (RexNode operand : call.operands) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1770,operand.accept(this);
core/src/main/java/org/apache/calcite/rex/RexVisitorImpl.java,61,for (RexNode partitionKey : window.partitionKeys) {
core/src/main/java/org/apache/calcite/rex/RexVisitorImpl.java,62,partitionKey.accept(this);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,371,ImmutableBitSet inputFieldsUsed = inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,460,new RelOptUtil.InputFinder(inputExtraFields);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,461,inputFinder.inputBitSet.addAll(fieldsUsed);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,463,final ImmutableBitSet inputFieldsUsed = inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,563,new RelOptUtil.InputFinder(combinedInputExtraFields);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,564,inputFinder.inputBitSet.addAll(fieldsUsed);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,566,final ImmutableBitSet fieldsUsedPlus = inputFinder.inputBitSet.build();
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,50,import java.util.ArrayList;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,236,public List<String> visitList(List<RexNode> list) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,238,for (RexNode node : list) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,239,strings.add(node.accept(this));
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,241,return strings;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1156,public RelSubset getSubset(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1157,RelNode rel,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1158,RelTraitSet traits) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1159,return getSubset(rel, traits, false);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1162,public RelSubset getSubset(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1163,RelNode rel,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1164,RelTraitSet traits,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1165,boolean createIfMissing) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1173,if (createIfMissing) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1174,return set.getOrCreateSubset(rel.getCluster(), traits);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1595,root =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1596,set.getOrCreateSubset(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1597,root.getCluster(),
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1598,root.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1519,subset.getCluster(), subset.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1864,return subset;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,203,private static final BigDecimal TWO = BigDecimal.valueOf(2L);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2176,final Join originalJoin =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2177,(Join) RelFactories.DEFAULT_JOIN_FACTORY.createJoin(leftRel, rightRel,
core/src/main/java/org/apache/calcite/sql/SqlInsert.java,65,return ImmutableNullableList.of(keywords, targetTable, source, columnList);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,89,operand(RelNode.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,75,public final class AggregateExpandDistinctAggregatesRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,55,public class AggregateFilterTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,65,public class AggregateJoinTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,50,public class AggregateProjectMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,62,public class AggregateProjectPullUpConstantsRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,80,public class AggregateReduceFunctionsRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,58,public class AggregateStarTableRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,41,public class AggregateUnionAggregateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,53,public class AggregateUnionTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,36,public class CalcMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,41,public class CalcSplitRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,34,public class CoerceInputsRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,45,public class FilterAggregateTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,37,public class FilterCalcMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,42,public class FilterCorrelateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,49,public abstract class FilterJoinRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,31,public class FilterMultiJoinMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,39,public class FilterProjectTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,38,public final class FilterRemoveIsNotDistinctFromRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,40,public class FilterSetOpTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,40,public class FilterTableFunctionTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,43,public class FilterToCalcRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,37,public class JoinAddRedundantSemiJoinRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,48,public class JoinAssociateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,53,public class JoinCommuteRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,57,public class JoinProjectTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,38,public class JoinPushExpressionsRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,64,public class JoinPushThroughJoinRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,42,public class JoinPushTransitivePredicatesRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinToCorrelateRule.java,60,public class JoinToCorrelateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,103,public class JoinToMultiJoinRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,36,public class JoinUnionTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,70,public class LoptOptimizeJoinRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,68,public class MultiJoinOptimizeBushyRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,43,public class ProjectCalcMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,35,public class ProjectFilterTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,37,public class ProjectJoinTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,39,public class ProjectMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,35,public class ProjectMultiJoinMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,38,public class ProjectSetOpTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,34,public class ProjectSortTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,40,public class ProjectToCalcRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,75,public abstract class ProjectToWindowRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,45,public class ProjectWindowTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,67,public class ReduceDecimalsRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,38,public class SemiJoinFilterTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,46,public class SemiJoinJoinTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,55,public class SemiJoinProjectTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,34,public class SemiJoinRemoveRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,43,public class SortJoinTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,45,public class SortProjectTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,32,public class SortRemoveRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,37,public class SortUnionTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,63,public abstract class SubQueryRemoveRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,31,public class TableScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,34,public class UnionMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,35,public class UnionToDistinctRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,59,public abstract class ValuesReduceRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,68,public static class DeltaProjectTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,88,public static class DeltaFilterTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,107,public static class DeltaAggregateTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,129,public static class DeltaSortTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,149,public static class DeltaUnionTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,177,public static class DeltaTableScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,208,public static class DeltaTableScanToEmptyRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,238,public static class DeltaJoinTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,35,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,56,import org.apache.calcite.sql.fun.SqlStdOperatorTable;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,450,if (constExps.isEmpty() && removableCasts.isEmpty()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,458,if (!removableCasts.isEmpty()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,460,for (RexNode exp : removableCasts) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,461,RexCall call = (RexCall) exp;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,462,reducedExprs.add(call.getOperands().get(0));
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,464,RexReplacer replacer =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,469,Collections.nCopies(removableCasts.size(), false));
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,470,replacer.mutate(expList);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,474,return true;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,547,List<RexNode> constExps, List<Boolean> addCasts,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,548,List<RexNode> removableCasts) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,551,addCasts, removableCasts);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,845,private final List<RexNode> removableCasts;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,852,List<Boolean> addCasts, List<RexNode> removableCasts) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,859,this.removableCasts = removableCasts;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,991,if (call.getOperator() == SqlStdOperatorTable.CAST) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,992,reduceCasts(call);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1006,private void reduceCasts(RexCall outerCast) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1007,List<RexNode> operands = outerCast.getOperands();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1008,if (operands.size() != 1) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1009,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1011,RelDataType outerCastType = outerCast.getType();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1012,RelDataType operandType = operands.get(0).getType();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1013,if (operandType.equals(outerCastType)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1014,removableCasts.add(outerCast);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1015,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1023,if (!(operands.get(0) instanceof RexCall)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1024,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1026,RexCall innerCast = (RexCall) operands.get(0);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1027,if (innerCast.getOperator() != SqlStdOperatorTable.CAST) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1028,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1030,if (innerCast.getOperands().size() != 1) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1031,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1033,RelDataType outerTypeNullable =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1034,typeFactory.createTypeWithNullability(outerCastType, true);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1035,RelDataType innerTypeNullable =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1036,typeFactory.createTypeWithNullability(operandType, true);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1037,if (outerTypeNullable != innerTypeNullable) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1038,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1040,if (operandType.isNullable()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1041,removableCasts.add(innerCast);
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,64,ImmutableIntList list = ImmutableIntList.copyOf(numbers);
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,65,if (numbers.size() > 1
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,66,&& !Ordering.natural().isOrdered(list)) {
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,67,list = ImmutableIntList.copyOf(Ordering.natural().sortedCopy(list));
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,134,return getTraitDef().canonize(
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,135,new RelDistributionImpl(type,
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,136,ImmutableIntList.copyOf(
core/src/main/java/org/apache/calcite/rex/RexUtil.java,909,newFieldCollations.add(apply(mapping, fieldCollation));
core/src/main/java/org/apache/calcite/util/Permutation.java,418,try {
core/src/main/java/org/apache/calcite/util/Permutation.java,419,return targets[source];
core/src/main/java/org/apache/calcite/util/Permutation.java,421,throw new Mappings.NoElementException("invalid source " + source);
core/src/main/java/org/apache/calcite/util/Permutation.java,429,try {
core/src/main/java/org/apache/calcite/util/Permutation.java,430,return sources[target];
core/src/main/java/org/apache/calcite/util/Permutation.java,432,throw new Mappings.NoElementException("invalid target " + target);
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,849,int getTarget(int target);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,24,import org.apache.calcite.rex.RexBuilder;
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,25,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,26,import org.apache.calcite.rex.RexProgram;
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,27,import org.apache.calcite.rex.RexProgramBuilder;
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,65,RexBuilder rexBuilder = topFilter.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,66,RexProgram bottomProgram = createProgram(bottomFilter);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,67,RexProgram topProgram = createProgram(topFilter);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,69,RexProgram mergedProgram =
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,70,RexProgramBuilder.mergePrograms(
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,71,topProgram,
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,72,bottomProgram,
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,73,rexBuilder);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,75,RexNode newCondition =
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,76,mergedProgram.expandLocalRef(
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,77,mergedProgram.getCondition());
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,81,.filter(newCondition);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,92,private RexProgram createProgram(Filter filterRel) {
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,93,RexProgramBuilder programBuilder =
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,94,new RexProgramBuilder(
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,95,filterRel.getRowType(),
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,96,filterRel.getCluster().getRexBuilder());
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,97,programBuilder.addIdentity();
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,98,programBuilder.addCondition(filterRel.getCondition());
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,99,return programBuilder.getProgram();
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,254,planner.reregister(this, otherRel);
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,220,return rexBuilder.makeInputRef(field.getType(), arg);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,81,return create(getCluster(), rowType, tuples);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,35,LogicalValues values = (LogicalValues) rel;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,36,return EnumerableValues.create(values.getCluster(), values.getRowType(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,37,values.getTuples());
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,257,SingleRel single = call.rel(0);
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,69,RelDistributionImpl trait =
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,70,new RelDistributionImpl(RelDistribution.Type.HASH_DISTRIBUTED, list);
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,71,return RelDistributionTraitDef.INSTANCE.canonize(trait);
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,77,RelDistributionImpl trait =
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,78,new RelDistributionImpl(RelDistribution.Type.RANGE_DISTRIBUTED, list);
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,79,return RelDistributionTraitDef.INSTANCE.canonize(trait);
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,418,protected MulticastRelOptListener getListener() {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,167,if (planner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,181,planner.listener.relEquivalenceFound(event);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,200,if (planner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,260,if (planner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,267,planner.listener.relEquivalenceFound(event);
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,295,if (planner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,300,planner.listener.relChosen(event);
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,455,if (planner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,460,planner.listener.relChosen(event);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,30,import org.apache.calcite.plan.RelOptListener;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,242,RelOptListener listener;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1868,public void addListener(RelOptListener newListener) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1871,if (listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1872,throw Util.needToImplement("multiple VolcanoPlanner listeners");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1874,listener = newListener;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,122,if (volcanoPlanner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,129,volcanoPlanner.listener.ruleProductionSucceeded(event);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,141,if (volcanoPlanner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,148,volcanoPlanner.listener.ruleProductionSucceeded(event);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,215,if (volcanoPlanner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,222,volcanoPlanner.listener.ruleAttempted(event);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,242,if (volcanoPlanner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,249,volcanoPlanner.listener.ruleAttempted(event);
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,179,if (withDetail) {
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,183,printPrecision = true;
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,185,if (typeName.getDefaultScale() > -1) {
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,186,printScale = true;
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,580,MetaResultSet.create(h.connectionId, h.id, false, signature, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,38,final RelTraitSet traitSet =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,39,agg.getTraitSet().replace(EnumerableConvention.INSTANCE);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,44,convert(agg.getInput(), EnumerableConvention.INSTANCE),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnionRule.java,38,final RelTraitSet traitSet = union.getTraitSet().replace(out);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnionRule.java,40,convertList(union.getInputs(), out), union.all);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,145,final RelSubset subset = getOrCreateSubset(rel.getCluster(), traitSet);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,151,RelOptCluster cluster,
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,152,RelTraitSet traits) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,157,final VolcanoPlanner planner =
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,158,(VolcanoPlanner) cluster.getPlanner();
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,245,RelSubset subset =
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,246,getOrCreateSubset(
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,247,otherSubset.getCluster(),
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,248,otherSubset.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,98,boolean boosted;
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,108,this.boosted = false;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,725,return rel2.set.getOrCreateSubset(rel.getCluster(), toTraits.simplify());
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,32,import org.apache.calcite.rex.RexCall;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,39,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,118,RexNode condition = variableReplacer.go(oldCondition);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,184,private static class VariableReplacer {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,198,public RexNode go(RexNode rex) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,199,if (rex instanceof RexCall) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,200,ImmutableList.Builder<RexNode> builder =
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,201,ImmutableList.builder();
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,202,final RexCall call = (RexCall) rex;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,203,for (RexNode operand : call.operands) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,204,builder.add(go(operand));
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,206,return call.clone(call.getType(), builder.build());
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,208,RexInputRef var = (RexInputRef) rex;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,209,int index = var.getIndex();
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,210,if (index < leftFields.size()) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,212,return rexBuilder.makeInputRef(
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,213,leftFields.get(index).getType(),
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,214,rightFields.size() + index);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,216,index -= leftFields.size();
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,217,if (index < rightFields.size()) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,219,return rexBuilder.makeInputRef(
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,220,rightFields.get(index).getType(),
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,221,index);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,226,+ ", rightFieldCount=" + rightFields.size());
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,228,return rex;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,509,List<RelDataType> argTypes) {
core/src/main/java/org/apache/calcite/rel/core/Window.java,233,assert orderKeys != null : "precondition: ordinals != null";
core/src/main/java/org/apache/calcite/rel/core/Window.java,234,assert keys != null;
core/src/main/java/org/apache/calcite/rel/core/Window.java,235,this.keys = keys;
core/src/main/java/org/apache/calcite/rel/core/Window.java,237,this.lowerBound = lowerBound;
core/src/main/java/org/apache/calcite/rel/core/Window.java,238,this.upperBound = upperBound;
core/src/main/java/org/apache/calcite/rel/core/Window.java,239,this.orderKeys = orderKeys;
core/src/main/java/org/apache/calcite/rel/core/Window.java,249,final StringBuilder buf = new StringBuilder();
core/src/main/java/org/apache/calcite/rel/core/Window.java,250,buf.append("window(partition ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,251,buf.append(keys);
core/src/main/java/org/apache/calcite/rel/core/Window.java,252,buf.append(" order by ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,253,buf.append(orderKeys);
core/src/main/java/org/apache/calcite/rel/core/Window.java,254,buf.append(isRows ? " rows " : " range ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,255,if (lowerBound != null) {
core/src/main/java/org/apache/calcite/rel/core/Window.java,256,if (upperBound != null) {
core/src/main/java/org/apache/calcite/rel/core/Window.java,257,buf.append("between ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,258,buf.append(lowerBound);
core/src/main/java/org/apache/calcite/rel/core/Window.java,259,buf.append(" and ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,260,buf.append(upperBound);
core/src/main/java/org/apache/calcite/rel/core/Window.java,262,buf.append(lowerBound);
core/src/main/java/org/apache/calcite/rel/core/Window.java,267,buf.append(" aggs ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,268,buf.append(aggCalls);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,327,RelDataType type,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,328,SqlAggFunction operator,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,329,List<RexNode> exprs,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,330,List<RexNode> partitionKeys,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,331,ImmutableList<RexFieldCollation> orderKeys,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,332,RexWindowBound lowerBound,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,333,RexWindowBound upperBound,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,334,boolean physical,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,337,assert operator != null;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,338,assert exprs != null;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,339,assert partitionKeys != null;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,340,assert orderKeys != null;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,347,physical);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,416,boolean isRows) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,422,isRows);
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,65,RexWindowBound lowerBound = window.getLowerBound().accept(this);
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,66,RexWindowBound upperBound = window.getUpperBound().accept(this);
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,67,if (update[0]
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,69,|| (upperBound != window.getUpperBound() && upperBound != null)) {
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,70,return new RexWindow(
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,71,clonedPartitionKeys,
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,72,clonedOrderKeys,
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,73,lowerBound,
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,74,upperBound,
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,75,window.isRows());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,21,import java.io.PrintWriter;
core/src/main/java/org/apache/calcite/rex/RexWindow.java,22,import java.io.StringWriter;
core/src/main/java/org/apache/calcite/rex/RexWindow.java,59,this.lowerBound = lowerBound;
core/src/main/java/org/apache/calcite/rex/RexWindow.java,60,this.upperBound = upperBound;
core/src/main/java/org/apache/calcite/rex/RexWindow.java,84,StringWriter sw = new StringWriter();
core/src/main/java/org/apache/calcite/rex/RexWindow.java,85,PrintWriter pw = new PrintWriter(sw);
core/src/main/java/org/apache/calcite/rex/RexWindow.java,86,int clauseCount = 0;
core/src/main/java/org/apache/calcite/rex/RexWindow.java,88,if (clauseCount++ > 0) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,89,pw.print(' ');
core/src/main/java/org/apache/calcite/rex/RexWindow.java,91,pw.print("PARTITION BY ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,94,pw.print(", ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,96,RexNode partitionKey = partitionKeys.get(i);
core/src/main/java/org/apache/calcite/rex/RexWindow.java,97,pw.print(partitionKey.toString());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,101,if (clauseCount++ > 0) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,102,pw.print(' ');
core/src/main/java/org/apache/calcite/rex/RexWindow.java,104,pw.print("ORDER BY ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,107,pw.print(", ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,109,RexFieldCollation orderKey = orderKeys.get(i);
core/src/main/java/org/apache/calcite/rex/RexWindow.java,110,pw.print(orderKey.toString());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,113,if (lowerBound == null) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,116,if (clauseCount++ > 0) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,117,pw.print(' ');
core/src/main/java/org/apache/calcite/rex/RexWindow.java,119,if (isRows) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,120,pw.print("ROWS ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,122,pw.print("RANGE ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,124,pw.print(lowerBound.toString());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,126,if (clauseCount++ > 0) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,127,pw.print(' ');
core/src/main/java/org/apache/calcite/rex/RexWindow.java,129,if (isRows) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,130,pw.print("ROWS BETWEEN ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,132,pw.print("RANGE BETWEEN ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,134,pw.print(lowerBound.toString());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,135,pw.print(" AND ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,136,pw.print(upperBound.toString());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,138,return sw.toString();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,19,import org.apache.calcite.sql.SqlKind;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,20,import org.apache.calcite.sql.SqlLiteral;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,22,import org.apache.calcite.sql.SqlWindow;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,38,|| SqlWindow.isUnboundedFollowing(node)) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,39,return new RexWindowBoundUnbounded(node);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,41,if (SqlWindow.isCurrentRow(node)) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,42,return new RexWindowBoundCurrentRow();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,44,return new RexWindowBoundBounded(rexNode);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,109,private static class RexWindowBoundUnbounded extends RexWindowBound {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,110,private final SqlNode node;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,113,this.node = node;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,117,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,121,return SqlWindow.isUnboundedPreceding(node);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,125,return SqlWindow.isUnboundedFollowing(node);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,129,return ((SqlLiteral) node).getValue().toString();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,133,return isPreceding() ? 0 : 2;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,137,if (this == o) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,138,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,140,if (o == null || getClass() != o.getClass()) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,141,return false;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,144,RexWindowBoundUnbounded that = (RexWindowBoundUnbounded) o;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,146,if (!node.equals(that.node)) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,147,return false;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,150,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,154,return node.hashCode();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,161,private static class RexWindowBoundCurrentRow extends RexWindowBound {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,163,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,167,return "CURRENT ROW";
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,171,return 1;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,175,return getClass() == obj.getClass();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,179,return 123;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,186,private static class RexWindowBoundBounded extends RexWindowBound {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,187,private final SqlKind sqlKind;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,188,private final RexNode offset;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,191,assert node instanceof RexCall
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,192,: "RexWindowBoundBounded window bound should be either 'X preceding'"
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,193,+ " or 'X following' call. Actual type is " + node;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,194,RexCall call = (RexCall) node;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,195,this.offset = call.getOperands().get(0);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,196,this.sqlKind = call.getKind();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,197,assert this.offset != null
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,198,: "RexWindowBoundBounded offset should not be null";
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,201,private RexWindowBoundBounded(SqlKind sqlKind, RexNode offset) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,202,this.sqlKind = sqlKind;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,203,this.offset = offset;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,207,return sqlKind == SqlKind.PRECEDING;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,211,return sqlKind == SqlKind.FOLLOWING;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,215,return offset;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,219,R r = offset.accept(visitor);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,220,if (r instanceof RexNode && r != offset) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,221,return new RexWindowBoundBounded(sqlKind, (RexNode) r);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,223,return this;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,227,return offset.toString() + " " + sqlKind.toString();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,231,if (this == o) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,232,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,234,if (o == null || getClass() != o.getClass()) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,235,return false;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,238,RexWindowBoundBounded that = (RexWindowBoundBounded) o;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,240,if (!offset.equals(that.offset)) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,241,return false;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,243,if (sqlKind != that.sqlKind) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,244,return false;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,247,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,251,int result = sqlKind.hashCode();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,252,result = 31 * result + offset.hashCode();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,253,return result;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,233,final SqlWindow tmp;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,234,if (lowerBound == null || upperBound == null) {
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,236,tmp = new SqlWindow(getParserPosition(), null, null, partitionList,
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,237,orderList, isRows, lowerBound, upperBound, allowPartial);
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,238,tmp.populateBounds();
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,240,tmp = this;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,242,if (tmp.lowerBound instanceof SqlLiteral
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,243,&& tmp.upperBound instanceof SqlLiteral) {
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,244,int lowerKey = RexWindowBound.create(tmp.lowerBound, null).getOrderKey();
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,245,int upperKey = RexWindowBound.create(tmp.upperBound, null).getOrderKey();
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,246,return lowerKey > -1 && lowerKey <= upperKey;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,248,return false;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,755,setLowerBound(
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,756,SqlWindow.createUnboundedPreceding(getParserPosition()));
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,759,setLowerBound(
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,760,SqlWindow.createCurrentRow(getParserPosition()));
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,763,SqlParserPos pos = orderList.getParserPosition();
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,764,setUpperBound(
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,765,orderList.size() == 0
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,767,: SqlWindow.createCurrentRow(pos));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidator.java,370,SqlWindow resolveWindow(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidator.java,373,boolean populateBounds);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3951,SqlValidatorScope scope,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3952,boolean populateBounds) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3972,if (populateBounds) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3973,window.populateBounds();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1834,validator.resolveWindow(windowOrRef, bb.scope, true);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1837,window.setLowerBound(SqlWindow.createUnboundedPreceding(SqlParserPos.ZERO));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1838,window.setUpperBound(SqlWindow.createCurrentRow(SqlParserPos.ZERO));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1839,window.setRows(SqlLiteral.createBoolean(true, SqlParserPos.ZERO));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1847,RexNode lowerBound = bb.convertExpression(window.getLowerBound());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1848,RexNode upperBound = bb.convertExpression(window.getUpperBound());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1849,SqlNodeList orderList = window.getOrderList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1850,if ((orderList.size() == 0) && !window.isRows()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1882,RexWindowBound.create(window.getLowerBound(), lowerBound),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1883,RexWindowBound.create(window.getUpperBound(), upperBound),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4797,private final SqlWindow window;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4808,this.window = window;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4862,window.isRows(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4863,window.isAllowPartial(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4902,window.isRows(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4903,window.isAllowPartial(),
core/src/main/java/org/apache/calcite/rex/RexOver.java,125,public static boolean containsOver(List<RexNode> exprs, RexNode condition) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,158,joinType.generatesNullsOnRight())))).toBlock());
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,812,return SqlStdOperatorTable.AS.createCall(POS, node,
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,813,new SqlIdentifier(neededAlias, POS));
core/src/main/java/org/apache/calcite/sql/fun/SqlMinMaxAggFunction.java,71,super(kind.name(),
core/src/main/java/org/apache/calcite/sql/fun/SqlMinMaxAggFunction.java,76,OperandTypes.COMPARABLE_ORDERED,
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,946,return s.replaceAll("0*E", "E").replace("E+", "E");
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,957,return s.replaceAll("0*E", "E").replace("E+", "E");
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,963,if (s.startsWith("0")) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,259,if (identifierQuoteString == null) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,260,return val; // quoting is not supported
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,262,String val2 =
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,263,val.replaceAll(
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,264,identifierEndQuoteString,
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,265,identifierEscapedQuote);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,266,return identifierQuoteString + val2 + identifierEndQuoteString;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,231,s = s.replaceAll(" ", "");
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,232,s = s.replaceAll("\n", "");
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,233,s = s.replaceAll("\t", "");
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,234,s = s.replaceAll("\r", "");
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,235,s = s.replaceAll("\f", "");
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,236,s = s.replaceAll("'", "");
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,896,String qName = name;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,899,qName = dialect.quoteIdentifier(name);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,901,maybeWhitespace(qName);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,773,sig = sig.replaceAll("'", "");
core/src/main/java/org/apache/calcite/util/BitString.java,51,assert bits.replaceAll("1", "").replaceAll("0", "").length() == 0
core/src/main/java/org/apache/calcite/util/Util.java,694,return s.replaceAll("\r\n", "\n");
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoTable.java,197,private static Integer parseIntString(String valueString) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoTable.java,198,return Integer.parseInt(valueString.replaceAll("[^0-9]", ""));
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,399,value = value.replaceAll("%", "*");
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1499,return Expressions.call(floorMethod, tur,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,59,import org.apache.calcite.rex.RexMultisetUtil;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,84,import com.google.common.collect.LinkedHashMultimap;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,89,import com.google.common.collect.SetMultimap;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,274,private final SetMultimap<String, Class> ruleNames =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,275,LinkedHashMultimap.create();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,615,if (ruleNames.put(ruleName, rule.getClass())) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,616,Set<Class> x = ruleNames.get(ruleName);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,617,if (x.size() > 1) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,618,throw new RuntimeException("Rule description '" + ruleName
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,619,+ "' is not unique; classes: " + x);
