File,Line_number,SRC
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/FileRenameAction.java,75,if (renameEmptyFiles || source.length() > 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/FileRenameAction.java,77,if (parent != null && !parent.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/FileRenameAction.java,97,return true;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/FileRenameAction.java,111,LOGGER.error("Unable to delete empty file " + source.getAbsolutePath());
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,37,private RollingFileManager manager;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,45,this.manager = manager;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,100,public static OnStartupTriggeringPolicy createPolicy() {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,101,return new OnStartupTriggeringPolicy();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,77,if (layout == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,34,private static long JVM_START_TIME = initStartTime();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,36,private boolean evaluated = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,46,if (JVM_START_TIME == 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,47,evaluated = true;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,55,private static long initStartTime() {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,62,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,63,final Class<?> factoryClass = Loader.loadSystemClass("java.lang.management.ManagementFactory");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,64,final Method getRuntimeMXBean = factoryClass.getMethod("getRuntimeMXBean");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,65,final Object runtimeMXBean = getRuntimeMXBean.invoke(null);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,67,final Class<?> runtimeMXBeanClass = Loader.loadSystemClass("java.lang.management.RuntimeMXBean");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,68,final Method getStartTime = runtimeMXBeanClass.getMethod("getStartTime");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,69,final Long result = (Long) getStartTime.invoke(runtimeMXBean);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,71,return result.longValue();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,73,StatusLogger.getLogger().error("Unable to call ManagementFactory.getRuntimeMXBean().getStartTime(), " //
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,74,+ "using system time for OnStartupTriggeringPolicy", t);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,76,return System.currentTimeMillis();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,87,if (evaluated) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,88,return false;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,90,evaluated = true;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,91,return manager.getFileTime() < JVM_START_TIME;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/AbstractFilterable.java,75,if (this.filter == filter) {
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/AbstractFilterable.java,78,CompositeFilter composite = (CompositeFilter) filter;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/CompositeFilter.java,75,filterList.remove(filter);
log4j-api/src/main/java/org/apache/logging/log4j/message/AbstractMessageFactory.java,27,public abstract class AbstractMessageFactory implements MessageFactory, Serializable {
log4j-api/src/main/java/org/apache/logging/log4j/message/AbstractMessageFactory.java,57,public abstract Message newMessage(String message, Object... params);
log4j-api/src/main/java/org/apache/logging/log4j/message/FormattedMessageFactory.java,25,private static final long serialVersionUID = 1L;
log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterizedMessageFactory.java,35,public static final ParameterizedMessageFactory INSTANCE = new ParameterizedMessageFactory();
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java,93,RingBufferLogEvent evt = (RingBufferLogEvent) other;
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java,94,evt.initializeBuilder(this);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,58,private transient AsyncLogger asyncLogger;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,59,private String loggerName;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,60,private Marker marker;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,61,private String fqcn;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,67,private ContextStack contextStack;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,68,private String threadName;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,70,private long currentTimeMillis;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,71,private boolean endOfBatch;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,72,private boolean includeLocation;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,73,private long nanoTime;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/JacksonFactory.java,102,return new DefaultXmlPrettyPrinter();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java,173,return new DefaultLoggerComponentBuilder(this, name, level.toString(), "AsyncLogger");
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java,183,return new DefaultRootLoggerComponentBuilder(this, level.toString(), "AsyncRoot");
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java,188,return new DefaultRootLoggerComponentBuilder(this, level, "AsyncRoot");
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java,225,return new DefaultLoggerComponentBuilder(this, name, level.toString());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java,230,return new DefaultLoggerComponentBuilder(this, name, level);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java,235,return new DefaultRootLoggerComponentBuilder(this, level.toString());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java,240,return new DefaultRootLoggerComponentBuilder(this, level);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,129,XY(".xy") {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,42,private static LoggerFactory loggerFactory = new PrivateFactory();
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,447,private static class PrivateFactory implements LoggerFactory {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,450,public Logger makeNewLoggerInstance(final LoggerContext context, final String name) {
log4j-1.2-api/src/main/java/org/apache/log4j/spi/LoggerFactory.java,30,Logger makeNewLoggerInstance(org.apache.logging.log4j.core.LoggerContext context, String name);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,41,import org.apache.logging.log4j.message.TimestampMessage;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,205,return currentTimeMillis;
log4j-api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContext.java,22,import java.util.concurrent.ConcurrentHashMap;
log4j-api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContext.java,23,import java.util.concurrent.ConcurrentMap;
log4j-api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContext.java,63,private final ConcurrentMap<String, ExtendedLogger> loggers = new ConcurrentHashMap<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,25,import java.util.concurrent.ConcurrentHashMap;
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,124,private final ConcurrentMap<String, Logger> loggers = new ConcurrentHashMap<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,341,return loggers.values();
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,362,return prev == null ? logger : prev;
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,525,for (final Logger logger : loggers.values()) {
log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/Log4jTaglibLoggerContext.java,38,private static final WeakHashMap<ServletContext, Log4jTaglibLoggerContext> CONTEXTS =
log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/Log4jTaglibLoggerContext.java,39,new WeakHashMap<>();
log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/Log4jTaglibLoggerContext.java,41,private final WeakHashMap<String, Log4jTaglibLogger> loggers =
log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/Log4jTaglibLoggerContext.java,42,new WeakHashMap<>();
log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/Log4jTaglibLoggerContext.java,68,synchronized (this.loggers) {
log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/SLF4JLoggerContext.java,19,import java.util.concurrent.ConcurrentHashMap;
log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/SLF4JLoggerContext.java,20,import java.util.concurrent.ConcurrentMap;
log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/SLF4JLoggerContext.java,31,private final ConcurrentMap<String, SLF4JLogger> loggers = new ConcurrentHashMap<>();
log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/SLF4JLoggerContext.java,40,if (!loggers.containsKey(name)) {
log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/SLF4JLoggerContext.java,41,loggers.putIfAbsent(name, new SLF4JLogger(name, LoggerFactory.getLogger(name)));
log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/SLF4JLoggerContext.java,43,return loggers.get(name);
log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/SLF4JLoggerContext.java,48,if (!loggers.containsKey(name)) {
log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/SLF4JLoggerContext.java,49,loggers.putIfAbsent(name, new SLF4JLogger(name, messageFactory, LoggerFactory.getLogger(name)));
log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/SLF4JLoggerContext.java,51,return loggers.get(name);
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/JndiLookup.java,55,return jndiManager.lookup(jndiName);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,17,package org.apache.logging.log4j.core.config.json;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,19,import com.fasterxml.jackson.core.JsonParser;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,20,import com.fasterxml.jackson.databind.JsonNode;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,21,import com.fasterxml.jackson.databind.ObjectMapper;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,22,import org.apache.logging.log4j.core.config.AbstractConfiguration;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,23,import org.apache.logging.log4j.core.config.Configuration;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,24,import org.apache.logging.log4j.core.config.ConfigurationSource;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,26,import org.apache.logging.log4j.core.config.Node;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,27,import org.apache.logging.log4j.core.config.Reconfigurable;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,28,import org.apache.logging.log4j.core.config.plugins.util.PluginType;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,29,import org.apache.logging.log4j.core.config.plugins.util.ResolverUtil;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,30,import org.apache.logging.log4j.core.config.status.StatusConfiguration;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,31,import org.apache.logging.log4j.core.util.Patterns;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,46,public class JsonConfiguration extends AbstractConfiguration implements Reconfigurable {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,49,private static final String[] VERBOSE_CLASSES = new String[] { ResolverUtil.class.getName() };
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,50,private final List<Status> status = new ArrayList<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,51,private JsonNode root;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,53,public JsonConfiguration(final ConfigurationSource configSource) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,54,super(configSource);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,55,final File configFile = configSource.getFile();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,56,byte[] buffer;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,57,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,58,try (final InputStream configStream = configSource.getInputStream()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,59,buffer = toByteArray(configStream);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,61,final InputStream is = new ByteArrayInputStream(buffer);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,62,root = getObjectMapper().readTree(is);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,63,if (root.size() == 1) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,64,for (final JsonNode node : root) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,65,root = node;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,68,processAttributes(rootNode, root);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,70,.withStatus(getDefaultStatus());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,71,for (final Map.Entry<String, String> entry : rootNode.getAttributes().entrySet()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,72,final String key = entry.getKey();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,73,final String value = getStrSubstitutor().replace(entry.getValue());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,75,if ("status".equalsIgnoreCase(key)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,76,statusConfig.withStatus(value);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,78,statusConfig.withDestination(value);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,80,isShutdownHookEnabled = !"disable".equalsIgnoreCase(value);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,82,statusConfig.withVerbosity(value);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,84,pluginPackages.addAll(Arrays.asList(value.split(Patterns.COMMA_SEPARATOR)));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,86,setName(value);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,88,final int intervalSeconds = Integer.parseInt(value);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,93,createAdvertiser(value, configSource, buffer, "application/json");
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,96,statusConfig.initialize();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,97,if (getName() == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,98,setName(configSource.getLocation());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,101,LOGGER.error("Error parsing {}", configSource.getLocation(), ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,105,protected ObjectMapper getObjectMapper() {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,106,return new ObjectMapper().configure(JsonParser.Feature.ALLOW_COMMENTS, true);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,110,public void setup() {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,111,final Iterator<Map.Entry<String, JsonNode>> iter = root.fields();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,112,final List<Node> children = rootNode.getChildren();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,113,while (iter.hasNext()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,114,final Map.Entry<String, JsonNode> entry = iter.next();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,115,final JsonNode n = entry.getValue();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,116,if (n.isObject()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,117,LOGGER.debug("Processing node for object {}", entry.getKey());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,118,children.add(constructNode(entry.getKey(), rootNode, n));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,120,LOGGER.error("Arrays are not supported at the root configuration.");
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,123,LOGGER.debug("Completed parsing configuration");
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,124,if (status.size() > 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,125,for (final Status s : status) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,126,LOGGER.error("Error processing element " + s.name + ": " + s.errorType);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,132,public Configuration reconfigure() {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,133,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,134,final ConfigurationSource source = getConfigurationSource().resetInputStream();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,135,if (source == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,136,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,138,return new JsonConfiguration(source);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,140,LOGGER.error("Cannot locate file {}", getConfigurationSource(), ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,142,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,145,private Node constructNode(final String name, final Node parent, final JsonNode jsonNode) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,146,final PluginType<?> type = pluginManager.getPluginType(name);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,147,final Node node = new Node(parent, name, type);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,148,processAttributes(node, jsonNode);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,149,final Iterator<Map.Entry<String, JsonNode>> iter = jsonNode.fields();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,150,final List<Node> children = node.getChildren();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,151,while (iter.hasNext()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,152,final Map.Entry<String, JsonNode> entry = iter.next();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,153,final JsonNode n = entry.getValue();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,154,if (n.isArray() || n.isObject()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,155,if (type == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,156,status.add(new Status(name, n, ErrorType.CLASS_NOT_FOUND));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,158,if (n.isArray()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,159,LOGGER.debug("Processing node for array {}", entry.getKey());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,160,for (int i = 0; i < n.size(); ++i) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,161,final String pluginType = getType(n.get(i), entry.getKey());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,162,final PluginType<?> entryType = pluginManager.getPluginType(pluginType);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,163,final Node item = new Node(node, entry.getKey(), entryType);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,164,processAttributes(item, n.get(i));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,165,if (pluginType.equals(entry.getKey())) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,166,LOGGER.debug("Processing {}[{}]", entry.getKey(), i);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,168,LOGGER.debug("Processing {} {}[{}]", pluginType, entry.getKey(), i);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,170,final Iterator<Map.Entry<String, JsonNode>> itemIter = n.get(i).fields();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,171,final List<Node> itemChildren = item.getChildren();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,172,while (itemIter.hasNext()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,173,final Map.Entry<String, JsonNode> itemEntry = itemIter.next();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,174,if (itemEntry.getValue().isObject()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,175,LOGGER.debug("Processing node for object {}", itemEntry.getKey());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,176,itemChildren.add(constructNode(itemEntry.getKey(), item, itemEntry.getValue()));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,178,final JsonNode array = itemEntry.getValue();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,179,final String entryName = itemEntry.getKey();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,180,LOGGER.debug("Processing array for object {}", entryName);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,181,for (int j = 0; j < array.size(); ++j) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,182,itemChildren.add(constructNode(entryName, item, array.get(j)));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,187,children.add(item);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,190,LOGGER.debug("Processing node for object {}", entry.getKey());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,191,children.add(constructNode(entry.getKey(), node, n));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,194,LOGGER.debug("Node {} is of type {}", entry.getKey(), n.getNodeType());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,198,String t;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,199,if (type == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,200,t = "null";
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,202,t = type.getElementName() + ':' + type.getPluginClass();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,207,LOGGER.debug("Returning {} with parent {} of type {}", node.getName(), p, t);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,208,return node;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,211,private String getType(final JsonNode node, final String name) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,212,final Iterator<Map.Entry<String, JsonNode>> iter = node.fields();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,213,while (iter.hasNext()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,214,final Map.Entry<String, JsonNode> entry = iter.next();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,215,if (entry.getKey().equalsIgnoreCase("type")) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,216,final JsonNode n = entry.getValue();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,217,if (n.isValueNode()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,218,return n.asText();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,222,return name;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,225,private void processAttributes(final Node parent, final JsonNode node) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,226,final Map<String, String> attrs = parent.getAttributes();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,227,final Iterator<Map.Entry<String, JsonNode>> iter = node.fields();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,228,while (iter.hasNext()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,229,final Map.Entry<String, JsonNode> entry = iter.next();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,230,if (!entry.getKey().equalsIgnoreCase("type")) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,231,final JsonNode n = entry.getValue();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,232,if (n.isValueNode()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,233,attrs.put(entry.getKey(), n.asText());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,240,public String toString() {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,241,return getClass().getSimpleName() + "[location=" + getConfigurationSource() + "]";
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,247,private enum ErrorType {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,248,CLASS_NOT_FOUND
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,254,private static class Status {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,255,private final JsonNode node;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,256,private final String name;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,257,private final ErrorType errorType;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,259,public Status(final String name, final JsonNode node, final ErrorType errorType) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,260,this.name = name;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,261,this.node = node;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,262,this.errorType = errorType;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,266,public String toString() {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,267,return "Status [name=" + name + ", errorType=" + errorType + ", node=" + node + "]";
log4j-web/src/main/java/org/apache/logging/log4j/web/Log4jServletContextListener.java,55,throw new IllegalStateException("Context destroyed before it was initialized.");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/JdbcAppender.java,39,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/JpaAppender.java,42,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/JmsAppender.java,47,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/jeromq/JeroMqAppender.java,72,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/kafka/KafkaAppender.java,44,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rewrite/RewriteAppender.java,42,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,48,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/DefaultAdvertiser.java,19,import java.io.Serializable;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/DefaultAdvertiser.java,29,public class DefaultAdvertiser implements Advertiser, Serializable {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/DefaultAdvertiser.java,31,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,33,import java.io.ByteArrayInputStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,34,import java.io.File;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,35,import java.io.IOException;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,36,import java.io.InputStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,37,import java.util.ArrayList;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,38,import java.util.Arrays;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,39,import java.util.Iterator;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,40,import java.util.List;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,41,import java.util.Map;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JsonConfiguration.java,48,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfiguration.java,25,import java.io.IOException;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfiguration.java,33,private static final long serialVersionUID = 5198216024278070407L;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,63,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/yaml/YamlConfiguration.java,31,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,20,import java.io.Serializable;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,40,public class DefaultShutdownCallbackRegistry implements ShutdownCallbackRegistry, LifeCycle, Runnable, Serializable {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/KeyValuePair.java,20,import java.io.InvalidObjectException;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/KeyValuePair.java,21,import java.io.ObjectInputStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/KeyValuePair.java,22,import java.io.ObjectStreamException;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/KeyValuePair.java,37,public final class KeyValuePair implements Serializable {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/KeyValuePair.java,39,private static final long serialVersionUID = 4331228262821046866L;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/KeyValuePair.java,80,protected Object writeReplace() throws ObjectStreamException {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/KeyValuePair.java,81,return newBuilder().setKey(this.key).setValue(this.value);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/KeyValuePair.java,84,private void readObject(final ObjectInputStream stream) throws InvalidObjectException {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/KeyValuePair.java,85,throw new InvalidObjectException("Builder proxy required");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/KeyValuePair.java,88,public static class Builder implements org.apache.logging.log4j.core.util.Builder<KeyValuePair>, Serializable {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/KeyValuePair.java,90,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/KeyValuePair.java,113,protected Object readResolve() throws ObjectStreamException {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/KeyValuePair.java,114,return new KeyValuePair(key, value);
log4j-web/src/main/java/org/apache/logging/log4j/web/Log4jWebInitializerImpl.java,49,private static final long serialVersionUID = 1L;
log4j-web/src/main/java/org/apache/logging/log4j/web/appender/ServletAppender.java,41,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/AbstractLifeCycle.java,19,import java.io.Serializable;
log4j-core/src/main/java/org/apache/logging/log4j/core/AbstractLifeCycle.java,29,public class AbstractLifeCycle implements LifeCycle, Serializable {
log4j-core/src/main/java/org/apache/logging/log4j/core/AbstractLifeCycle.java,36,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractAppender.java,36,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractOutputStreamAppender.java,35,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AsyncAppender.java,52,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,54,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/DefaultErrorHandler.java,19,import java.io.Serializable;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/DefaultErrorHandler.java,31,public class DefaultErrorHandler implements ErrorHandler, Serializable {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/DefaultErrorHandler.java,33,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FailoverAppender.java,47,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileAppender.java,42,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/MemoryMappedFileAppender.java,45,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RandomAccessFileAppender.java,43,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingFileAppender.java,49,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppender.java,28,import org.apache.logging.log4j.core.appender.rolling.RollingFileManager;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppender.java,50,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/SmtpAppender.java,55,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/SocketAppender.java,49,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/SyslogAppender.java,47,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/AbstractDatabaseAppender.java,39,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,71,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,214,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerContext.java,30,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,69,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AppenderControl.java,33,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,59,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/AbstractFilter.java,35,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/AbstractFilterable.java,30,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,60,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/CompositeFilter.java,43,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilter.java,43,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/LevelRangeFilter.java,42,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/MapFilter.java,45,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/MarkerFilter.java,37,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/RegexFilter.java,47,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/StructuredDataFilter.java,44,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/ThreadContextMapFilter.java,45,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/ThresholdFilter.java,41,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,37,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractCsvLayout.java,36,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractLayout.java,33,public abstract class AbstractLayout<T extends Serializable> implements Layout<T>, Serializable {
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/CsvLogEventLayout.java,46,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/CsvParameterLayout.java,52,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/GelfLayout.java,105,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/JsonLayout.java,799,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/SerializedLayout.java,36,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/XmlLayout.java,192,private static final long serialVersionUID = 1L;
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeAppender.java,43,private static final long serialVersionUID = 1L;
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/NoSqlAppender.java,53,private static final long serialVersionUID = 1L;
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,77,private static final String THROWING = "throwing";
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,79,private static final String CATCHING = "catching";
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/ContextMapLookup.java,27,public class ContextMapLookup implements StrLookup {
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/DateLookup.java,34,public class DateLookup implements StrLookup {
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/MapLookup.java,31,public class MapLookup implements StrLookup {
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StructuredDataLookup.java,27,public class StructuredDataLookup implements StrLookup {
log4j-samples/loggerProperties/src/main/java/org/apache/logging/log4j/lookup/CustomLookup.java,28,import java.lang.Override;
log4j-samples/loggerProperties/src/main/java/org/apache/logging/log4j/lookup/CustomLookup.java,29,import java.util.Map;
log4j-samples/loggerProperties/src/main/java/org/apache/logging/log4j/lookup/CustomLookup.java,30,import java.util.concurrent.ConcurrentHashMap;
log4j-samples/loggerProperties/src/main/java/org/apache/logging/log4j/lookup/CustomLookup.java,31,import java.util.concurrent.ConcurrentMap;
log4j-samples/loggerProperties/src/main/java/org/apache/logging/log4j/lookup/MapMessageLookup.java,30,import java.util.Map;
log4j-samples/loggerProperties/src/main/java/org/apache/logging/log4j/lookup/MapMessageLookup.java,31,import java.util.concurrent.ConcurrentHashMap;
log4j-samples/loggerProperties/src/main/java/org/apache/logging/log4j/lookup/MapMessageLookup.java,32,import java.util.concurrent.ConcurrentMap;
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,135,private Cancellable shutdownCallback;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationSource.java,32,public class ConfigurationSource {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/CustomLevelConfig.java,31,public final class CustomLevelConfig {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginManager.java,20,import org.apache.logging.log4j.Logger;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginManager.java,21,import org.apache.logging.log4j.status.StatusLogger;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginManager.java,22,import org.apache.logging.log4j.util.Strings;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginManager.java,34,public class PluginManager {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DummyNanoClock.java,22,public final class DummyNanoClock implements NanoClock {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/SystemNanoClock.java,22,public final class SystemNanoClock implements NanoClock {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AsyncAppender.java,64,private AsyncThread thread;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FailoversPlugin.java,30,public final class FailoversPlugin {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/DataSourceConnectionSource.java,37,public final class DataSourceConnectionSource implements ConnectionSource {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/FactoryMethodConnectionSource.java,39,public final class FactoryMethodConnectionSource implements ConnectionSource {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/JdbcDatabaseManager.java,46,private Connection connection;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/JdbcDatabaseManager.java,47,private PreparedStatement statement;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/JdbcDatabaseManager.java,241,private static final class Column {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/JpaDatabaseManager.java,41,private EntityManagerFactory entityManagerFactory;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/JpaDatabaseManager.java,43,private EntityManager entityManager;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/JpaDatabaseManager.java,44,private EntityTransaction transaction;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/kafka/KafkaManager.java,40,private Producer<byte[], byte[]> producer = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/AbstractRolloverStrategy.java,25,public abstract class AbstractRolloverStrategy implements RolloverStrategy {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CompositeTriggeringPolicy.java,30,public final class CompositeTriggeringPolicy implements TriggeringPolicy {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,81,public class DefaultRolloverStrategy implements RolloverStrategy {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,141,private FileExtensions(final String extension) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,33,public class OnStartupTriggeringPolicy implements TriggeringPolicy {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/PatternProcessor.java,39,public class PatternProcessor {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/SizeBasedTriggeringPolicy.java,36,public class SizeBasedTriggeringPolicy implements TriggeringPolicy {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy.java,29,public final class TimeBasedTriggeringPolicy implements TriggeringPolicy {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/AbstractAction.java,28,public abstract class AbstractAction implements Action {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AppenderRef.java,34,public final class AppenderRef {
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/AbstractLookup.java,24,public abstract class AbstractLookup implements StrLookup {
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrMatcher.java,31,public abstract class StrMatcher {
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,139,public class StrSubstitutor {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SmtpManager.java,153,throw new LoggingException("Error occurred while sending email", e);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SmtpManager.java,156,throw new LoggingException("Error occurred while sending email", e);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SmtpManager.java,248,private static class FactoryData {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,55,private Reconnector connector;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,57,private Socket socket;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,88,connector = new Reconnector(this);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,89,connector.setDaemon(true);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,90,connector.setPriority(Thread.MIN_PRIORITY);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,91,connector.start();
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,134,connector = new Reconnector(this);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,135,connector.setDaemon(true);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,136,connector.setPriority(Thread.MIN_PRIORITY);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,137,connector.start();
log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/AbstractKeyStoreConfiguration.java,31,private final KeyStore keyStore;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/SslConfiguration.java,42,public class SslConfiguration {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/SslConfiguration.java,46,private final SSLContext sslContext;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/StoreConfiguration.java,24,public class StoreConfiguration<T> {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/CyclicBuffer.java,26,public final class CyclicBuffer<T> {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/Agent.java,30,public final class Agent {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/BatchEvent.java,27,public class BatchEvent {
log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeAvroManager.java,52,private RpcClient rpcClient = null;
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/couchdb/CouchDbProvider.java,38,public final class CouchDbProvider implements NoSqlProvider<CouchDbConnection> {
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/mongodb/MongoDbProvider.java,41,public final class MongoDbProvider implements NoSqlProvider<MongoDbConnection> {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractManager.java,30,public abstract class AbstractManager {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/MulticastDnsAdvertiser.java,39,public class MulticastDnsAdvertiser implements Advertiser {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,43,public final class PatternParser {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/RegexReplacement.java,31,public final class RegexReplacement {
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableFormatOptions.java,30,public final class ThrowableFormatOptions {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/AbstractPatternConverter.java,30,public abstract class AbstractPatternConverter implements PatternConverter {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/FileDatePatternConverter.java,28,public final class FileDatePatternConverter {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/FormattingInfo.java,23,public final class FormattingInfo {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/NameAbbreviator.java,26,public abstract class NameAbbreviator {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/NameAbbreviator.java,200,private static class PatternAbbreviatorFragment {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternFormatter.java,25,public class PatternFormatter {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FixedDateFormat.java,30,public class FixedDateFormat {
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,48,public static final Marker ENTRY_MARKER = MarkerManager.getMarker("ENTRY").setParents(FLOW_MARKER);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1010,final Object message = LambdaUtil.get(msgSupplier);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1011,logMessage(fqcn, level, marker, messageFactory.newMessage(message), t);
log4j-api/src/main/java/org/apache/logging/log4j/util/LambdaUtil.java,61,return supplier.get();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FixedDateFormat.java,151,private final int dateLength;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FixedDateFormat.java,182,this.dateLength = fixedFormat.getDatePatternLength();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FixedDateFormat.java,228,final char[] result = new char[length];
log4j-core/src/main/java/org/apache/logging/log4j/core/osgi/Activator.java,59,if (bundle.getState() == Bundle.ACTIVE) {
log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java,148,return factory.getContext(FQCN, null, null, true);
log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java,162,return factory.getContext(FQCN, null, null, currentContext, null, null);
log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java,177,return factory.getContext(FQCN, loader, null, currentContext);
log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java,194,return factory.getContext(FQCN, loader, externalContext, currentContext);
log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java,211,return factory.getContext(FQCN, loader, null, currentContext, configLocation, null);
log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java,230,return factory.getContext(FQCN, loader, externalContext, currentContext, configLocation, null);
log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java,251,return factory.getContext(FQCN, loader, externalContext, currentContext, configLocation, name);
log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java,264,return factory.getContext(fqcn, null, null, currentContext);
log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java,280,return factory.getContext(fqcn, loader, null, currentContext);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,19,import java.nio.charset.Charset;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,27,private String message;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,28,private int messageLengthInBytes;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,31,setMessage(message);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,38,public void setMessage(final String message) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,39,this.message = message;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,40,setLengthInBytes();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,43,private void setLengthInBytes() {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,44,messageLengthInBytes = message.length();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,47,public byte[] getBytes() {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,48,final String frame = toString();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,49,return frame.getBytes(Charset.defaultCharset());
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,54,final String length = Integer.toString(messageLengthInBytes);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,55,return length + Chars.SPACE + message;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,58,public boolean equals(final TlsSyslogFrame frame) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,59,return isLengthEquals(frame) && isMessageEquals(frame);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,62,private boolean isLengthEquals(final TlsSyslogFrame frame) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,63,return this.messageLengthInBytes == frame.messageLengthInBytes;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,66,private boolean isMessageEquals(final TlsSyslogFrame frame) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,67,return this.message.equals(frame.message);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilter.java,118,private Result filter(final Level level) {
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilter.java,119,final Object value = ThreadContext.get(key);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilter.java,133,return filter(event.getLevel());
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilter.java,139,return filter(level);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilter.java,145,return filter(level);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilter.java,151,return filter(level);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,59,final Message message = logger.getMessageFactory().newMessage(record.getMessage(), record.getParameters());
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,43,import org.apache.logging.log4j.core.util.NanoClockFactory;
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,438,Log4jLogEvent.setNanoClock(NanoClockFactory.createNanoClock());
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,32,import org.apache.logging.log4j.core.util.NanoClockFactory;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,176,NanoClockFactory.setMode(NanoClockFactory.Mode.Dummy); // LOG4J2-1074 use dummy clock by default
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,181,NanoClockFactory.setMode(NanoClockFactory.Mode.System);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,18,package org.apache.logging.log4j.core.util;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,20,import java.util.Objects;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,30,public static enum Mode {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,34,Dummy {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,36,public NanoClock createNanoClock() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,37,return new DummyNanoClock();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,43,System  {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,45,public NanoClock createNanoClock() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,46,return new SystemNanoClock();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,51,public abstract NanoClock createNanoClock();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,54,private static volatile Mode mode = Mode.Dummy;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,61,public static NanoClock createNanoClock() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,62,return mode.createNanoClock();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,70,public static Mode getMode() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,71,return mode;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,79,public static void setMode(Mode mode) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NanoClockFactory.java,80,NanoClockFactory.mode = Objects.requireNonNull(mode, "mode must be non-null");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractOutputStreamAppender.java,50,private final ReadWriteLock rwLock = new ReentrantReadWriteLock();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractOutputStreamAppender.java,51,private final Lock readLock = rwLock.readLock();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractOutputStreamAppender.java,106,readLock.lock();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractOutputStreamAppender.java,109,if (bytes.length > 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractOutputStreamAppender.java,110,manager.write(bytes);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractOutputStreamAppender.java,111,if (this.immediateFlush || event.isEndOfBatch()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractOutputStreamAppender.java,112,manager.flush();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractOutputStreamAppender.java,119,readLock.unlock();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileManager.java,79,protected synchronized void write(final byte[] bytes, final int offset, final int length)  {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileManager.java,93,super.write(bytes, offset, length);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileManager.java,102,super.write(bytes, offset, length);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/MemoryMappedFileManager.java,112,protected synchronized void write(final byte[] bytes, int offset, int length) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/MemoryMappedFileManager.java,113,super.write(bytes, offset, length); // writes to dummy output stream
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,120,protected synchronized void write(final byte[] bytes, final int offset, final int length)  {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,136,write(bytes, 0, bytes.length);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RandomAccessFileManager.java,88,protected synchronized void write(final byte[] bytes, int offset, int length) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RandomAccessFileManager.java,89,super.write(bytes, offset, length); // writes to dummy output stream
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RandomAccessFileManager.java,102,if (isImmediateFlush || isEndOfBatch.get() == Boolean.TRUE) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,84,protected synchronized void write(final byte[] bytes, final int offset, final int length) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,86,super.write(bytes, offset, length);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,99,protected synchronized void write(final byte[] bytes, int offset, int length) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,100,super.write(bytes, offset, length); // writes to dummy output stream, needed to track file size
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,113,if (isImmediateFlush || isEndOfBatch.get() == Boolean.TRUE) {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,119,protected void write(final byte[] bytes, final int offset, final int length)  {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,131,getOutputStream().write(bytes, offset, length);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,281,LOGGER.error("Could not find address of " + data.host, ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,292,LOGGER.error("TcpSocketManager (" + name + ") " + ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractJacksonLayout.java,24,import com.fasterxml.jackson.core.JsonProcessingException;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractJacksonLayout.java,54,return this.objectWriter.writeValueAsString(event) + eol;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/JsonLayout.java,801,protected JsonLayout(final boolean locationInfo, final boolean properties, final boolean complete, final boolean compact,
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/JsonLayout.java,802,final boolean eventEol, final Charset charset) {
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/JsonLayout.java,803,super(new JacksonFactory.JSON().newWriter(locationInfo, properties, compact), charset, compact, complete, eventEol);
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/MapLookup.java,121,final boolean isMapMessage = event.getMessage() instanceof MapMessage;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/FileRenameAction.java,21,import java.nio.file.Files;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/FileRenameAction.java,94,destination.getAbsolutePath(), iex.getMessage());
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/FileRenameAction.java,104,destination.getAbsolutePath(), iex.getMessage());
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/FileRenameAction.java,122,Files.copy(source.toPath(), destination.toPath());
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/kafka/KafkaAppender.java,20,import java.io.Serializable;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/kafka/KafkaAppender.java,21,import java.nio.charset.StandardCharsets;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/kafka/KafkaAppender.java,70,if (getLayout() != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/kafka/KafkaAppender.java,71,manager.send(getLayout().toByteArray(event));
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,20,import java.util.Objects;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,35,import org.apache.logging.log4j.core.util.DummyNanoClock;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,82,public class AsyncLogger extends Logger {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,247,public void logMessage(final String fqcn, final Level level, final Marker marker, final Message message,
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,248,final Throwable thrown) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,251,if (temp == null) { // LOG4J2-639
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,252,LOGGER.fatal("Ignoring log event after log4j was shut down");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,254,logMessage0(temp, fqcn, level, marker, message, thrown);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,258,private void logMessage0(final Disruptor<RingBufferLogEvent> theDisruptor, final String fqcn, final Level level,
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,259,final Marker marker, final Message message, final Throwable thrown) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,261,logMessageInAppropriateThread(info, theDisruptor, fqcn, level, marker, message, thrown);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,264,private void logMessageInAppropriateThread(final Info info, final Disruptor<RingBufferLogEvent> theDisruptor,
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,265,final String fqcn, final Level level, final Marker marker, final Message message, final Throwable thrown) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,266,if (!logMessageInCurrentThread(info, theDisruptor, fqcn, level, marker, message, thrown)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,267,logMessageInBackgroundThread(info, fqcn, level, marker, message, thrown);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,285,private boolean logMessageInCurrentThread(Info info, final Disruptor<RingBufferLogEvent> theDisruptor,
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,286,final String fqcn, final Level level, final Marker marker, final Message message, final Throwable thrown) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,287,if (info.isAppenderThread && theDisruptor.getRingBuffer().remainingCapacity() == 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,289,final ReliabilityStrategy strategy = privateConfig.loggerConfig.getReliabilityStrategy();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,290,strategy.log(this, getName(), fqcn, marker, level, message, thrown);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,291,return true;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,293,return false;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,306,private void logMessageInBackgroundThread(Info info, final String fqcn, final Level level, final Marker marker,
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,311,initLogMessageInfo(info, fqcn, level, marker, message, thrown);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,315,private void initLogMessageInfo(Info info, final String fqcn, final Level level, final Marker marker,
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,317,info.translator.setValues(this, getName(), marker, fqcn, level, message, //
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,319,thrown, //
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,332,info.threadName(), //
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,360,return includeLocation ? location(fqcn) : null;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,375,private static StackTraceElement location(final String fqcnOfLogger) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,376,return Log4jLogEvent.calcLocation(fqcnOfLogger);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,438,public static NanoClock getNanoClock() {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,439,return nanoClock;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,450,public static void setNanoClock(NanoClock nanoClock) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,451,AsyncLogger.nanoClock = Objects.requireNonNull(nanoClock, "NanoClock must be non-null");
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,32,import org.apache.logging.log4j.core.async.AsyncLogger;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,246,int asyncAppenderCount = 0;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,247,for (int i = array.length - 1; i >= 0; --i) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,248,if (array[i] instanceof AsyncAppender) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,249,array[i].stop();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,250,asyncAppenderCount++;
log4j-api/src/main/java/org/apache/logging/log4j/spi/Provider.java,51,private final ClassLoader classLoader;
log4j-api/src/main/java/org/apache/logging/log4j/spi/Provider.java,55,this.classLoader = classLoader;
log4j-api/src/main/java/org/apache/logging/log4j/spi/Provider.java,91,final Class<?> clazz = classLoader.loadClass(className);
log4j-api/src/main/java/org/apache/logging/log4j/spi/Provider.java,121,final Class<?> clazz = classLoader.loadClass(threadContextMap);
log4j-api/src/main/java/org/apache/logging/log4j/util/ProviderUtil.java,81,PROVIDERS.add(new Provider(props, url, cl));
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,46,private final TriggeringPolicy triggeringPolicy;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,47,private final RolloverStrategy rolloverStrategy;
log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/Log4jTaglibLoggerContext.java,61,public Log4jTaglibLogger getLogger(final String name, final MessageFactory factory) {
log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/Log4jTaglibLoggerContext.java,62,Log4jTaglibLogger logger = this.loggers.get(name);
log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/Log4jTaglibLoggerContext.java,64,AbstractLogger.checkMessageFactory(logger, factory);
log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/Log4jTaglibLoggerContext.java,69,logger = this.loggers.get(name);
log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/Log4jTaglibLoggerContext.java,72,final ExtendedLogger original = factory == null ?
log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/Log4jTaglibLoggerContext.java,73,context.getLogger(name) : context.getLogger(name, factory);
log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/Log4jTaglibLoggerContext.java,76,this.loggers.put(name, logger);
log4j-api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContext.java,102,final ExtendedLogger extendedLogger = loggers.get(name);
log4j-api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContext.java,107,loggers.putIfAbsent(name, new SimpleLogger(name, defaultLevel, showLogName, showShortName, showDateTime,
log4j-api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContext.java,108,showContextMap, dateTimeFormat, messageFactory, props, stream));
log4j-api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContext.java,109,return loggers.get(name);
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,354,Logger logger = loggers.get(name);
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,361,final Logger prev = loggers.putIfAbsent(name, logger);
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,372,return loggers.containsKey(name);
log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/Log4jTaglibLoggerContext.java,26,import org.apache.logging.log4j.spi.LoggerContext;
log4j-taglib/src/main/java/org/apache/logging/log4j/taglib/Log4jTaglibLoggerContext.java,85,return this.loggers.containsKey(name);
log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/SLF4JLoggerContext.java,23,import org.apache.logging.log4j.spi.LoggerContext;
log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/SLF4JLoggerContext.java,56,return loggers.containsKey(name);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java,27,public abstract class AbstractStringLayout extends AbstractLayout<String> {
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java,66,protected Charset getCharset() {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,109,return new ConsoleAppender("Console", layout, null, getManager(DEFAULT_TARGET, false, layout), true);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,439,setName(DefaultConfiguration.DEFAULT_NAME);
log4j-api/src/main/java/org/apache/logging/log4j/status/StatusLogger.java,61,private static final StatusLogger STATUS_LOGGER = new StatusLogger();
log4j-api/src/main/java/org/apache/logging/log4j/status/StatusLogger.java,77,private StatusLogger() {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy.java,75,if (nowMillis > nextRolloverMillis) {
log4j-web/src/main/java/org/apache/logging/log4j/web/Log4jWebInitializerImpl.java,154,return;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,131,this.setStarting();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,132,if (helper == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,135,AsyncLoggerConfigHelper.claim(); // LOG4J2-336
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,143,this.setStopping();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,144,AsyncLoggerConfigHelper.release();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,32,import com.lmax.disruptor.EventHandler;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,68,private static ThreadFactory threadFactory = new DaemonThreadFactory("AsyncLoggerConfig-");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,69,private static volatile Disruptor<Log4jEventWrapper> disruptor;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,70,private static ExecutorService executor;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,72,private static volatile int count = 0;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,73,private static ThreadLocal<Boolean> isAppenderThread = new ThreadLocal<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,104,claim();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,107,private static synchronized void initDisruptor() {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,112,LOGGER.trace("AsyncLoggerConfigHelper creating new disruptor. Ref count is {}.", count);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,116,initThreadLocalForExecutorThread();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,118,final EventHandler<Log4jEventWrapper>[] handlers = new Log4jEventWrapperHandler[] {//
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,186,private static class Log4jEventWrapper {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,187,private AsyncLoggerConfig loggerConfig;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,188,private LogEvent event;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,194,public void clear() {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,195,loggerConfig = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,196,event = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,205,private static final int NOTIFY_PROGRESS_THRESHOLD = 50;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,206,private Sequence sequenceCallback;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,207,private int counter;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,210,public void setSequenceCallback(final Sequence sequenceCallback) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,211,this.sequenceCallback = sequenceCallback;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,217,event.event.setEndOfBatch(endOfBatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,218,event.loggerConfig.asyncCallAppenders(event.event);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,219,event.clear();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,221,notifyIntermediateProgress(sequence);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,229,private void notifyIntermediateProgress(final long sequence) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,230,if (++counter > NOTIFY_PROGRESS_THRESHOLD) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,231,sequenceCallback.set(sequence);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,232,counter = 0;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,244,count++;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,245,initDisruptor();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,254,if (--count > 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,255,LOGGER.trace("AsyncLoggerConfigHelper: not shutting down disruptor: ref count is {}.", count);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,256,return;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,260,LOGGER.trace("AsyncLoggerConfigHelper: disruptor already shut down: ref count is {}. (Resetting to zero.)",
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,261,count);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,262,count = 0; // ref count must not be negative or #claim() will not work correctly
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,265,LOGGER.trace("AsyncLoggerConfigHelper: shutting down disruptor: ref count is {}.", count);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,298,private static void initThreadLocalForExecutorThread() {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,37,import org.apache.logging.log4j.LogManager;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,45,import org.apache.logging.log4j.core.async.AsyncLoggerContextSelector;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,50,import org.apache.logging.log4j.core.impl.Log4jContextFactory;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,57,import org.apache.logging.log4j.core.selector.ContextSelector;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,61,import org.apache.logging.log4j.spi.LoggerContextFactory;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,207,final LoggerContextFactory factory = LogManager.getFactory();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,208,if (factory instanceof Log4jContextFactory) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,209,final ContextSelector selector = ((Log4jContextFactory) factory).getSelector();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,210,if (selector instanceof AsyncLoggerContextSelector) { // all loggers are async
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,221,final Set<LoggerConfig> alreadyStopped = new HashSet<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,222,int asyncLoggerConfigCount = 0;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,224,if (logger instanceof AsyncLoggerConfig) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,230,logger.stop();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,231,asyncLoggerConfigCount++;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,232,alreadyStopped.add(logger);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,235,if (root instanceof AsyncLoggerConfig & !alreadyStopped.contains(root)) { // LOG4J2-807
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,237,asyncLoggerConfigCount++;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,238,alreadyStopped.add(root);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,270,int loggerCount = 0;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,276,if (!alreadyStopped.contains(loggerConfig)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,277,loggerConfig.stop();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,278,loggerCount++;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,287,if (!alreadyStopped.contains(root)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,288,root.stop();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/Configuration.java,28,import java.util.List;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/Configuration.java,29,import java.util.Map;
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/RingBufferAdmin.java,19,import java.util.Objects;
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/RingBufferAdmin.java,48,this.ringBuffer = Objects.requireNonNull(ringBuffer, "ringbuffer");
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/RingBufferAdmin.java,58,return ringBuffer.getBufferSize();
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/RingBufferAdmin.java,63,return ringBuffer.remainingCapacity();
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,175,register(mbs, rbmbean, rbmbean.getObjectName());
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,134,if ("Sleep".equals(strategy)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,135,return new SleepingWaitStrategy();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,137,return new YieldingWaitStrategy();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,139,return new BlockingWaitStrategy();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,73,private AsyncLoggerConfigHelper helper;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,78,public AsyncLoggerConfig() {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,79,super();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,89,public AsyncLoggerConfig(final String name, final Level level,
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,90,final boolean additive) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,91,super(name, level, additive);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,114,if (!helper.callAppendersFromAnotherThread(event)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,133,helper = new AsyncLoggerConfigHelper(this);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,60,class AsyncLoggerConfigHelper {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,100,private final AsyncLoggerConfig asyncLoggerConfig;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,102,public AsyncLoggerConfigHelper(final AsyncLoggerConfig asyncLoggerConfig) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,103,this.asyncLoggerConfig = asyncLoggerConfig;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,320,public boolean callAppendersFromAnotherThread(final LogEvent event) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,330,enqueueEvent(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,346,private void enqueueEvent(final LogEvent event) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,350,enqueue(logEvent);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,362,private void enqueue(LogEvent logEvent) {
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,37,import org.apache.logging.log4j.core.async.AsyncLogger;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerContext.java,40,public AsyncLoggerContext(final String name, final Object externalContext,
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerContext.java,41,final URI configLocn) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerContext.java,45,public AsyncLoggerContext(final String name, final Object externalContext,
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerContext.java,46,final String configLocn) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerContext.java,51,protected Logger newInstance(final LoggerContext ctx, final String name,
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerContext.java,52,final MessageFactory messageFactory) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerContextSelector.java,20,import java.util.ArrayList;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerContextSelector.java,22,import java.util.List;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerContextSelector.java,25,import org.apache.logging.log4j.core.selector.ContextSelector;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerContextSelector.java,30,public class AsyncLoggerContextSelector implements ContextSelector {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerContextSelector.java,37,public LoggerContext getContext(final String fqcn, final ClassLoader loader, final boolean currentContext) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerContextSelector.java,42,public List<LoggerContext> getLoggerContexts() {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerContextSelector.java,49,public LoggerContext getContext(final String fqcn, final ClassLoader loader, final boolean currentContext,
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerContextSelector.java,50,final URI configLocation) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerContextSelector.java,55,public void removeContext(final LoggerContext context) {
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,48,private static final AtomicReference<LoggerContext> CONTEXT = new AtomicReference<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,53,new ConcurrentHashMap<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,62,final URI configLocation) {
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,145,LoggerContext ctx = new LoggerContext(name, null, configLocation);
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,146,final AtomicReference<WeakReference<LoggerContext>> r =
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,147,new AtomicReference<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,160,!ctx.getConfigLocation().equals(configLocation)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,162,ctx.getConfigLocation());
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,166,ctx = new LoggerContext(name, null, configLocation);
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,171,private String toContextMapKey(final ClassLoader loader) {
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,176,final LoggerContext ctx = CONTEXT.get();
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,180,CONTEXT.compareAndSet(null, new LoggerContext("Default"));
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,181,return CONTEXT.get();
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,174,final RingBufferAdmin rbmbean = AsyncLogger.createRingBufferAdmin(ctx.getName());
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,32,import org.apache.logging.log4j.core.jmx.RingBufferAdmin;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,430,public static RingBufferAdmin createRingBufferAdmin(final String contextName) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerContext.java,53,return new AsyncLogger(ctx, name, messageFactory);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerContextSelector.java,21,import java.util.Collections;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerContextSelector.java,33,private static final AsyncLoggerContext CONTEXT = new AsyncLoggerContext("AsyncLoggerContext@"
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerContextSelector.java,38,return CONTEXT;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerContextSelector.java,43,final List<LoggerContext> list = new ArrayList<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerContextSelector.java,44,list.add(CONTEXT);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerContextSelector.java,45,return Collections.unmodifiableList(list);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerContextSelector.java,51,return CONTEXT;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,21,import java.util.concurrent.ExecutorService;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,43,import org.apache.logging.log4j.util.PropertiesUtil;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,91,static enum ThreadNameStrategy { // LOG4J2-467
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,92,CACHED {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,94,public String getThreadName(final Info info) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,95,return info.cachedThreadName;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,98,UNCACHED {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,100,public String getThreadName(final Info info) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,101,return Thread.currentThread().getName();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,104,abstract String getThreadName(Info info);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,106,static ThreadNameStrategy create() {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,108,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,111,LOGGER.debug("Using AsyncLogger.ThreadNameStrategy.CACHED: '{}' not valid: {}", name, ex.toString());
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,112,return CACHED;
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,439,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,440,AsyncLogger.setNanoClock(NanoClockFactory.createNanoClock());
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,443,LOGGER.debug("Could not set AsyncLogger NanoClock. Ignoring: " + ignored.toString());
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,22,import java.util.concurrent.Executors;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,36,import org.apache.logging.log4j.core.util.Integers;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,37,import org.apache.logging.log4j.core.util.Loader;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,45,import com.lmax.disruptor.BlockingWaitStrategy;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,46,import com.lmax.disruptor.ExceptionHandler;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,47,import com.lmax.disruptor.RingBuffer;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,48,import com.lmax.disruptor.SleepingWaitStrategy;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,49,import com.lmax.disruptor.WaitStrategy;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,50,import com.lmax.disruptor.YieldingWaitStrategy;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,52,import com.lmax.disruptor.dsl.ProducerType;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,83,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,84,private static final int SLEEP_MILLIS_BETWEEN_DRAIN_ATTEMPTS = 50;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,85,private static final int MAX_DRAIN_ATTEMPTS_BEFORE_SHUTDOWN = 200;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,86,private static final int RINGBUFFER_MIN_SIZE = 128;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,87,private static final int RINGBUFFER_DEFAULT_SIZE = 256 * 1024;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,88,private static final StatusLogger LOGGER = StatusLogger.getLogger();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,89,private static final ThreadNameStrategy THREAD_NAME_STRATEGY = ThreadNameStrategy.create();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,109,return ThreadNameStrategy.valueOf(name);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,116,private static volatile Disruptor<RingBufferLogEvent> disruptor;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,117,private static final Clock CLOCK = ClockFactory.getClock();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,118,private static volatile NanoClock nanoClock = new DummyNanoClock();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,123,static {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,124,initInfoForExecutorThread();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,125,LOGGER.debug("AsyncLogger.ThreadNameStrategy={}", THREAD_NAME_STRATEGY);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,126,final int ringBufferSize = calculateRingBufferSize();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,128,final WaitStrategy waitStrategy = createWaitStrategy();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,130,waitStrategy);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,131,disruptor.handleExceptionsWith(getExceptionHandler());
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,132,disruptor.handleEventsWith(new RingBufferLogEventHandler());
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,135,.getBufferSize());
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,136,disruptor.start();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,139,private static int calculateRingBufferSize() {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,140,int ringBufferSize = RINGBUFFER_DEFAULT_SIZE;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,143,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,144,int size = Integer.parseInt(userPreferredRBSize);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,145,if (size < RINGBUFFER_MIN_SIZE) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,146,size = RINGBUFFER_MIN_SIZE;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,147,LOGGER.warn("Invalid RingBufferSize {}, using minimum size {}.", userPreferredRBSize,
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,148,RINGBUFFER_MIN_SIZE);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,150,ringBufferSize = size;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,152,LOGGER.warn("Invalid RingBufferSize {}, using default size {}.", userPreferredRBSize, ringBufferSize);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,154,return Integers.ceilingNextPowerOfTwo(ringBufferSize);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,164,private static void initInfoForExecutorThread() {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,167,public void run() {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,168,final boolean isAppenderThread = true;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,169,final Info info = new Info(new RingBufferLogEventTranslator(), //
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,170,Thread.currentThread().getName(), isAppenderThread);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,176,private static WaitStrategy createWaitStrategy() {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,177,final String strategy = PropertiesUtil.getProperties().getStringProperty("AsyncLogger.WaitStrategy");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,178,LOGGER.debug("property AsyncLogger.WaitStrategy={}", strategy);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,179,if ("Sleep".equals(strategy)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,180,return new SleepingWaitStrategy();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,182,return new YieldingWaitStrategy();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,184,return new BlockingWaitStrategy();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,186,LOGGER.debug("disruptor event handler uses BlockingWaitStrategy");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,187,return new BlockingWaitStrategy();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,190,private static ExceptionHandler<RingBufferLogEvent> getExceptionHandler() {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,191,final String cls = PropertiesUtil.getProperties().getStringProperty("AsyncLogger.ExceptionHandler");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,192,if (cls == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,193,LOGGER.debug("No AsyncLogger.ExceptionHandler specified");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,194,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,196,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,199,LOGGER.debug("AsyncLogger.ExceptionHandler={}", result);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,200,return result;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,202,LOGGER.debug("AsyncLogger.ExceptionHandler not set: error creating " + cls + ": ", ignored);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,203,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,225,protected Info initialValue() {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,227,return new Info(new RingBufferLogEventTranslator(), Thread.currentThread().getName(), false);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,250,final Disruptor<RingBufferLogEvent> temp = disruptor;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,312,enqueueLogMessageInfo(info);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,363,private void enqueueLogMessageInfo(Info info) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,365,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,369,disruptor.publishEvent(info.translator);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,371,LOGGER.fatal("Ignoring log event after log4j was shut down.");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,392,public static void stop() {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,393,final Disruptor<RingBufferLogEvent> temp = disruptor;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,397,disruptor = null; // client code fails with NPE if log after stop = OK
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,398,if (temp == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,399,return; // stop() has already been called
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,405,for (int i = 0; hasBacklog(temp) && i < MAX_DRAIN_ATTEMPTS_BEFORE_SHUTDOWN; i++) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,406,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,407,Thread.sleep(SLEEP_MILLIS_BETWEEN_DRAIN_ATTEMPTS); // give up the CPU for a while
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,411,temp.shutdown(); // busy-spins until all events currently in the disruptor have been processed
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,421,return !ringBuffer.hasAvailableCapacity(ringBuffer.getBufferSize());
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,431,return RingBufferAdmin.forAsyncLogger(disruptor.getRingBuffer(), contextName);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerContext.java,58,AsyncLogger.stop();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,436,final boolean sync = !AsyncLoggerContextSelector.class.getName().equals(
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,437,PropertiesUtil.getProperties().getStringProperty(Constants.LOG4J_CONTEXT_SELECTOR));
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLoggerAdapter.java,18,package org.apache.logging.log4j.jul;
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLoggerAdapter.java,20,import java.util.logging.Logger;
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLoggerAdapter.java,22,import org.apache.logging.log4j.message.MessageFactory;
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLoggerAdapter.java,23,import org.apache.logging.log4j.message.MessageFormatMessageFactory;
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLoggerAdapter.java,24,import org.apache.logging.log4j.spi.LoggerContext;
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLoggerAdapter.java,32,public class ApiLoggerAdapter extends AbstractLoggerAdapter {
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLoggerAdapter.java,34,private static final MessageFactory MESSAGE_FACTORY = new MessageFormatMessageFactory();
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLoggerAdapter.java,37,protected Logger newLogger(final String name, final LoggerContext context) {
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLoggerAdapter.java,38,return new ApiLogger(context.getLogger(name, MESSAGE_FACTORY));
log4j-jul/src/main/java/org/apache/logging/log4j/jul/CoreLoggerAdapter.java,18,package org.apache.logging.log4j.jul;
log4j-jul/src/main/java/org/apache/logging/log4j/jul/CoreLoggerAdapter.java,20,import java.util.logging.Logger;
log4j-jul/src/main/java/org/apache/logging/log4j/jul/CoreLoggerAdapter.java,22,import org.apache.logging.log4j.message.MessageFactory;
log4j-jul/src/main/java/org/apache/logging/log4j/jul/CoreLoggerAdapter.java,23,import org.apache.logging.log4j.message.MessageFormatMessageFactory;
log4j-jul/src/main/java/org/apache/logging/log4j/jul/CoreLoggerAdapter.java,24,import org.apache.logging.log4j.spi.LoggerContext;
log4j-jul/src/main/java/org/apache/logging/log4j/jul/CoreLoggerAdapter.java,31,public class CoreLoggerAdapter extends AbstractLoggerAdapter {
log4j-jul/src/main/java/org/apache/logging/log4j/jul/CoreLoggerAdapter.java,33,private static final MessageFactory MESSAGE_FACTORY = new MessageFormatMessageFactory();
log4j-jul/src/main/java/org/apache/logging/log4j/jul/CoreLoggerAdapter.java,36,protected Logger newLogger(final String name, final LoggerContext context) {
log4j-jul/src/main/java/org/apache/logging/log4j/jul/CoreLoggerAdapter.java,37,return new CoreLogger((org.apache.logging.log4j.core.Logger) context.getLogger(name, MESSAGE_FACTORY));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationFactory.java,131,if (appenderProp != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java,354,this.charset = charset;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,314,final boolean writeHeader = !data.append || !file.exists();
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/DatePatternConverter.java,176,final FastDateFormat tempFormat = FastDateFormat.getInstance(patternOption, tz);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/DatePatternConverter.java,179,LOGGER.warn("Could not instantiate FastDateFormat with pattern " + patternOption, e);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/server/InputStreamLogEventBridge.java,48,this.objectReader = mapper.reader(Log4jLogEvent.class);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,86,private enum FileExtensions {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,91,return new ZipCompressAction(new File(baseName(renameTo)), new File(compressedName), deleteSource,
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,92,compressionLevel);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,95,GZIP(".gz") {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,99,return new GzCompressAction(new File(baseName(renameTo)), new File(compressedName), deleteSource);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,107,return new CommonsCompressAction("bzip2", new File(baseName(renameTo)), new File(compressedName),
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,108,deleteSource);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,116,return new CommonsCompressAction("deflate", new File(baseName(renameTo)), new File(compressedName),
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,117,deleteSource);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,125,return new CommonsCompressAction("pack200", new File(baseName(renameTo)), new File(compressedName),
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,126,deleteSource);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,134,return new CommonsCompressAction("xy", new File(baseName(renameTo)), new File(compressedName),
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,135,deleteSource);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,158,String baseName(final String name) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,159,return name.substring(0, name.length() - length());
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,492,final String renameTo = buf.toString();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,496,if (FileExtensions.GZIP.isExtensionFor(renameTo)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,497,compressAction = FileExtensions.GZIP.createCompressAction(renameTo, compressedName, true, compressionLevel);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,499,compressAction = FileExtensions.ZIP.createCompressAction(renameTo, compressedName, true, compressionLevel);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,501,compressAction = FileExtensions.BZIP2.createCompressAction(renameTo, compressedName, true, compressionLevel);
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/couchdb/CouchDbConnection.java,17,package org.apache.logging.log4j.nosql.appender.couchdb;
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/couchdb/CouchDbConnection.java,19,import java.util.Map;
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/couchdb/CouchDbConnection.java,20,import java.util.concurrent.atomic.AtomicBoolean;
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/couchdb/CouchDbConnection.java,22,import org.apache.logging.log4j.core.appender.AppenderLoggingException;
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/couchdb/CouchDbConnection.java,23,import org.apache.logging.log4j.nosql.appender.DefaultNoSqlObject;
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/couchdb/CouchDbConnection.java,24,import org.apache.logging.log4j.nosql.appender.NoSqlConnection;
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/couchdb/CouchDbConnection.java,25,import org.apache.logging.log4j.nosql.appender.NoSqlObject;
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/couchdb/CouchDbConnection.java,26,import org.apache.logging.log4j.util.Strings;
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/couchdb/CouchDbConnection.java,27,import org.lightcouch.CouchDbClient;
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/couchdb/CouchDbConnection.java,28,import org.lightcouch.Response;
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/couchdb/CouchDbConnection.java,33,public final class CouchDbConnection implements NoSqlConnection<Map<String, Object>, DefaultNoSqlObject> {
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/couchdb/CouchDbConnection.java,34,private final CouchDbClient client;
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/couchdb/CouchDbConnection.java,35,private final AtomicBoolean closed = new AtomicBoolean(false);
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/couchdb/CouchDbConnection.java,37,public CouchDbConnection(final CouchDbClient client) {
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/couchdb/CouchDbConnection.java,38,this.client = client;
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/couchdb/CouchDbConnection.java,42,public DefaultNoSqlObject createObject() {
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/couchdb/CouchDbConnection.java,43,return new DefaultNoSqlObject();
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/couchdb/CouchDbConnection.java,47,public DefaultNoSqlObject[] createList(final int length) {
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/couchdb/CouchDbConnection.java,48,return new DefaultNoSqlObject[length];
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/couchdb/CouchDbConnection.java,52,public void insertObject(final NoSqlObject<Map<String, Object>> object) {
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/couchdb/CouchDbConnection.java,53,try {
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/couchdb/CouchDbConnection.java,54,final Response response = this.client.save(object.unwrap());
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/couchdb/CouchDbConnection.java,55,if (Strings.isNotEmpty(response.getError())) {
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/couchdb/CouchDbConnection.java,56,throw new AppenderLoggingException("Failed to write log event to CouchDB due to error: " +
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/couchdb/CouchDbConnection.java,57,response.getError() + '.');
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/couchdb/CouchDbConnection.java,60,throw new AppenderLoggingException("Failed to write log event to CouchDB due to error: " + e.getMessage(),
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/couchdb/CouchDbConnection.java,61,e);
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/couchdb/CouchDbConnection.java,66,public void close() {
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/couchdb/CouchDbConnection.java,67,if (this.closed.compareAndSet(false, true)) {
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/couchdb/CouchDbConnection.java,68,this.client.shutdown();
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/couchdb/CouchDbConnection.java,73,public boolean isClosed() {
log4j-nosql/src/main/java/org/apache/logging/log4j/nosql/appender/couchdb/CouchDbConnection.java,74,return this.closed.get();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AppenderControl.java,150,handleAppenderError(ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AppenderControl.java,152,handleAppenderError(new AppenderLoggingException(ex));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AppenderControl.java,156,private void handleAppenderError(final RuntimeException ex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AppenderControl.java,157,appender.getHandler().error(createErrorMsg("An exception occurred processing Appender "), ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginRegistry.java,189,LOGGER.info("Plugin [{}] could not be loaded due to verification error.", className, e);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/NameAbbreviator.java,292,pos = fragments[i].abbreviate(sb, pos);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/NameAbbreviator.java,298,final PatternAbbreviatorFragment terminalFragment = fragments[fragments.length - 1];
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/NameAbbreviator.java,301,pos = terminalFragment.abbreviate(sb, pos);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,261,return level == null ? parent.getLevel() : level;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,120,void asyncCallAppenders(final LogEvent event) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,121,super.callAppenders(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,362,processLogEvent(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,376,private void processLogEvent(final LogEvent event) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,378,callAppenders(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,379,logParent(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,382,private void logParent(final LogEvent event) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,384,parent.log(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,434,protected static boolean includeLocation(final String includeLocationConfigValue) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,438,return sync;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,463,properties, config, includeLocation(includeLocation));
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,226,Level level;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,230,LOGGER.error(
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,232,levelName);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,198,final MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,199,unregisterMBeans(mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,207,public static void unregisterMBeans(final MBeanServer mbs) {
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,208,unregisterStatusLogger("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,209,unregisterContextSelector("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,210,unregisterContexts(mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,211,unregisterLoggerConfigs("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,212,unregisterAsyncLoggerRingBufferAdmins("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,213,unregisterAsyncLoggerConfigRingBufferAdmins("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,214,unregisterAppenders("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,215,unregisterAsyncAppenders("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,332,for (final ObjectName objectName : found) {
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,334,mbs.unregisterMBean(objectName);
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/EnvironmentLookup.java,36,return System.getenv(key);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,78,final StringBuilder sb = new StringBuilder();
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,80,final int limit = options.minLines(array.length) - 1;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,81,for (int i = 0; i <= limit; ++i) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,82,sb.append(array[i]);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,83,if (i < limit) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,84,sb.append(options.getSeparator());
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,87,toAppendTo.append(sb.toString());
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,90,toAppendTo.append(extStackTrace);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultCompositeFilterComponentBuilder.java,33,addAttribute("onMatch", onMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultFilterComponentBuilder.java,31,addAttribute("onMatch", onMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,229,public static class Builder implements org.apache.logging.log4j.core.util.Builder<BurstFilter> {
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,241,private Result onMatch = Result.NEUTRAL;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,244,private Result onMismatch = Result.DENY;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,274,public Builder setOnMatch(final Result onMatch) {
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,275,this.onMatch = onMatch;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,276,return this;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,282,public Builder setOnMismatch(final Result onMismatch) {
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,283,this.onMismatch = onMismatch;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,284,return this;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,295,return new BurstFilter(this.level, this.rate, this.maxBurst, this.onMatch, this.onMismatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/api/ConfigurationBuilder.java,155,FilterComponentBuilder newFilter(String pluginName, Filter.Result onMatch, Filter.Result onMisMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/api/ConfigurationBuilder.java,164,FilterComponentBuilder newFilter(String pluginName, String onMatch, String onMisMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultCompositeFilterComponentBuilder.java,31,final String onMatch, final String onMisMatch) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultCompositeFilterComponentBuilder.java,34,addAttribute("onMisMatch", onMisMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java,209,return new DefaultFilterComponentBuilder(this, type, onMatch.name(), onMisMatch.name());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java,213,public FilterComponentBuilder newFilter(final String type, final String onMatch, final String onMisMatch) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java,214,return new DefaultFilterComponentBuilder(this, type, onMatch, onMisMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultFilterComponentBuilder.java,29,final String onMatch, final String onMisMatch) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultFilterComponentBuilder.java,32,addAttribute("onMisMatch", onMisMatch);
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,81,public void start(final BundleContext context) throws Exception {
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,84,final BundleWiring self = context.getBundle().adapt(BundleWiring.class);
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,89,context.addBundleListener(this);
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,90,final Bundle[] bundles = context.getBundles();
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,105,public void stop(final BundleContext context) throws Exception {
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,106,context.removeBundleListener(this);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultLoggerComponentBuilder.java,39,addAttribute("level", level);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultLoggerComponentBuilder.java,52,addAttribute("level", level);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultRootLoggerComponentBuilder.java,38,addAttribute("level", level);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultRootLoggerComponentBuilder.java,50,addAttribute("level", level);
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,319,private String asXml() {
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,320,final StringBuilder sb = new StringBuilder();
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,321,final StructuredDataId sdId = getId();
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,322,if (sdId == null || sdId.getName() == null || type == null) {
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,323,return sb.toString();
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,325,sb.append("<StructuredData>\n");
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,326,sb.append("<type>").append(type).append("</type>\n");
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,327,sb.append("<id>").append(sdId).append("</id>\n");
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,328,super.asXml(sb);
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,329,sb.append("</StructuredData>\n");
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,330,return sb.toString();
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,232,return asString();
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,241,return asString();
log4j-core/src/main/java/org/apache/logging/log4j/core/jackson/LevelMixIn.java,38,public static Level getLevel(@JsonProperty("name") final String name) {
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,45,PropertiesUtil.getProperties().getBooleanProperty(ShutdownCallbackRegistry.SHUTDOWN_HOOK_ENABLED, true);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,120,if (SHUTDOWN_HOOK_ENABLED && this.shutdownCallbackRegistry instanceof LifeCycle) {
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,271,return SHUTDOWN_HOOK_ENABLED ? shutdownCallbackRegistry.addShutdownCallback(callback) : null;
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java,115,if (Loader.isClassAvailable("javax.servlet.ServletContext")) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,210,LOGGER.warn("Unable to instantiate {}", JANSI_CLASS);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,268,final int begin = i++;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,269,int end;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,270,int depth = 0;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,271,do {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,272,end = pattern.indexOf('}', i);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,273,if (end == -1) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,274,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,276,final int next = pattern.indexOf("{", i);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,277,if (next != -1 && next < end) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,278,i = end + 1;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,279,++depth;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,281,--depth;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,285,if (end == -1) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,286,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,289,final String r = pattern.substring(begin + 1, end);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,290,options.add(r);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,291,i = end + 1;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,42,import org.apache.logging.log4j.status.StatusLogger;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,139,this.mdcId = mdcId;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/HighlightConverter.java,154,final Level level = Level.toLevel(key);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/HighlightConverter.java,156,LOGGER.error("Unknown level name: " + key + ". Use one of " +
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/HighlightConverter.java,157,Arrays.toString(DEFAULT_STYLES.keySet().toArray()));
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/StyleConverter.java,46,if (options.length < 1) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/StyleConverter.java,51,LOGGER.error("No pattern supplied on style");
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/StyleConverter.java,55,LOGGER.error("No style attributes provided");
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,19,import java.io.ByteArrayOutputStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,26,import java.net.UnknownHostException;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,31,import org.apache.logging.log4j.Level;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,33,import org.apache.logging.log4j.core.appender.ManagerFactory;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,101,return (SslSocketManager) getManager("TLS:" + host + ':' + port, new SslFactoryData(sslConfig, host, port,
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,127,private static class SslSocketManagerFactory implements ManagerFactory<SslSocketManager, SslFactoryData> {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,131,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,135,public SslSocketManager createManager(final String name, final SslFactoryData data) {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,136,InetAddress inetAddress = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,137,OutputStream os = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,138,Socket socket = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,140,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,141,inetAddress = resolveAddress(data.host);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,142,socket = createSocket(data);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,143,os = socket.getOutputStream();
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,147,LOGGER.error("SslSocketManager ({})", name, e);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,148,os = new ByteArrayOutputStream();
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,151,LOGGER.catching(Level.DEBUG, e);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,152,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,158,private InetAddress resolveAddress(final String hostName) throws TlsSocketManagerFactoryException {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,159,InetAddress address;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,161,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,162,address = InetAddress.getByName(hostName);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,164,LOGGER.error("Could not find address of {}", hostName, ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,165,throw new TlsSocketManagerFactoryException();
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,168,return address;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,171,private void checkDelay(final int delay, final OutputStream os) throws TlsSocketManagerFactoryException {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,172,if (delay == 0 && os == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,173,throw new TlsSocketManagerFactoryException();
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,177,private Socket createSocket(final SslFactoryData data) throws IOException {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,178,SSLSocketFactory socketFactory;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,179,SSLSocket socket;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,183,return socket;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,67,private static class SslFactoryData {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,69,private final String host;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,70,private final int port;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,71,private final int connectTimeoutMillis;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,72,private final int delayMillis;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,73,private final boolean immediateFail;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,74,private final Layout<? extends Serializable> layout;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,77,final int connectTimeoutMillis, final int delayMillis, final boolean immediateFail,
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,79,this.host = host;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,80,this.port = port;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,81,this.connectTimeoutMillis = connectTimeoutMillis;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,82,this.delayMillis = delayMillis;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,83,this.immediateFail = immediateFail;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,84,this.layout = layout;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,144,checkDelay(data.delayMillis, os);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,49,super.setLevel(LevelTranslator.toJavaLevel(logger.getLevel()));
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/CommonsCompressAction.java,35,private static final int BUF_SIZE = 8102;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/CommonsCompressAction.java,127,return CommonsCompressAction.class.getSimpleName() + '[' + source + " to " + destination //
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/FileRenameAction.java,127,return FileRenameAction.class.getSimpleName() + '[' + source + " to " + destination //
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/GzCompressAction.java,32,private static final int BUF_SIZE = 8102;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/GzCompressAction.java,124,return GzCompressAction.class.getSimpleName() + '[' + source + " to " + destination //
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/ZipCompressAction.java,33,private static final int BUF_SIZE = 8102;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AsyncAppender.java,232,private volatile boolean shutdown = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FailoverAppender.java,63,private volatile long nextCheckNanos = 0;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/status/StatusConfiguration.java,50,private volatile boolean initialized = false;
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/ClocksBenchmark.java,155,private volatile short count = 0;
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/LoggerConfigBenchmark.java,55,private volatile Filter filter = null;
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/TimeFormatBenchmark.java,60,volatile long midnightToday = 0;
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/TimeFormatBenchmark.java,61,volatile long midnightTomorrow = 0;
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,106,logger.log(LevelTranslator.toLevel(level), msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,111,logger.log(LevelTranslator.toLevel(level), msg, param1);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,116,logger.log(LevelTranslator.toLevel(level), msg, params);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,121,logger.log(LevelTranslator.toLevel(level), msg, thrown);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,203,logger.logIfEnabled(FQCN, org.apache.logging.log4j.Level.ERROR, null, msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,208,logger.logIfEnabled(FQCN, org.apache.logging.log4j.Level.WARN, null, msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,213,logger.logIfEnabled(FQCN, org.apache.logging.log4j.Level.INFO, null, msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,218,logger.logIfEnabled(FQCN, LevelTranslator.CONFIG, null, msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,223,logger.logIfEnabled(FQCN, org.apache.logging.log4j.Level.DEBUG, null, msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,228,logger.logIfEnabled(FQCN, org.apache.logging.log4j.Level.TRACE, null, msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,233,logger.logIfEnabled(FQCN, LevelTranslator.FINEST, null, msg);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,55,return addr.getHostName();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,59,while (interfaces.hasMoreElements()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,60,final NetworkInterface nic = interfaces.nextElement();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,61,final Enumeration<InetAddress> addresses = nic.getInetAddresses();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,62,while (addresses.hasMoreElements()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,63,final InetAddress address = addresses.nextElement();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,64,if (!address.isLoopbackAddress()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,65,final String hostname = address.getHostName();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,66,if (hostname != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,67,return hostname;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,70,file = new File(path);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,71,if (file.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,72,return file;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,21,import java.io.UnsupportedEncodingException;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,22,import java.net.MalformedURLException;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,26,import java.net.URLDecoder;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,27,import java.nio.charset.StandardCharsets;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,63,if (uri.getScheme() == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,64,File file = new File(uri.toString());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,65,if (file.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,66,return file;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,74,uri = new File(path).toURI();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,77,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,80,final String charsetName = StandardCharsets.UTF_8.name();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,81,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,82,String fileName = uri.toURL().getFile();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,83,if (new File(fileName).exists()) { // LOG4J2-466
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,84,return new File(fileName); // allow files with '+' char in name
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,86,fileName = URLDecoder.decode(fileName, charsetName);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,87,return new File(fileName);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,89,LOGGER.warn("Invalid URL {}", uri, ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,91,LOGGER.warn("Invalid encoding: {}", charsetName, uee);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,19,import java.text.ParseException;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,20,import java.text.SimpleDateFormat;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,21,import java.util.Calendar;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,22,import java.util.TimeZone;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,47,private static final long MINUTE_MS = 60000;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,52,private static final long SECOND_MS = 1000;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,57,private final long start;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,61,private final long end;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,69,final Result onMismatch) {
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,71,this.start = start;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,72,this.end = end;
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,148,r.set(new WeakReference<>(ctx));
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,149,CONTEXT_MAP.putIfAbsent(name, r);
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java,39,private static final char PREFIX_SEPARATOR = ':';
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,159,public static final StrMatcher DEFAULT_VALUE_DELIMITER = StrMatcher.stringMatcher(":-");
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,303,this(variableResolver, prefixMatcher, suffixMatcher, escape, DEFAULT_VALUE_DELIMITER);
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,316,public StrSubstitutor(
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,317,final StrLookup variableResolver, final StrMatcher prefixMatcher, final StrMatcher suffixMatcher, final char escape, final StrMatcher valueDelimiterMatcher) {
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,937,if ((valueDelimiterMatchLen = valueDelimiterMatcher.isMatch(varNameExprChars, i)) != 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,938,varName = varNameExpr.substring(0, i);
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,940,break;
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,258,sb.append('{');
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,261,sb.append(", ");
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,267,sb.append('}');
log4j-api/src/main/java/org/apache/logging/log4j/util/LoaderUtil.java,115,return getThreadContextClassLoader().loadClass(className);
log4j-api/src/main/java/org/apache/logging/log4j/util/LoaderUtil.java,117,return Class.forName(className);
log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLogger.java,47,private transient EventDataConverter converter;
log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLogger.java,53,this.converter = createConverter();
log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLogger.java,365,if (eventLogger && marker != null && marker.contains(EVENT_MARKER) && converter != null) {
log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLogger.java,366,msg = converter.convertEvent(message, params, throwable);
log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLogger.java,402,converter = createConverter();
log4j-jul/src/main/java/org/apache/logging/log4j/jul/LogManager.java,89,return loggerAdapter.getLogger(name);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEventHandler.java,43,event.execute(endOfBatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEventHandler.java,44,event.clear();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/UuidUtil.java,70,static {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/UuidUtil.java,126,private UuidUtil() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/UuidUtil.java,85,System.arraycopy(mac, index, node, index + 2, length);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLoggerAdapter.java,20,import java.util.WeakHashMap;
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLoggerAdapter.java,24,import org.apache.logging.log4j.LogManager;
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLoggerAdapter.java,25,import org.apache.logging.log4j.util.LoaderUtil;
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLoggerAdapter.java,32,public abstract class AbstractLoggerAdapter<L> implements LoggerAdapter<L> {
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,46,public class ClassLoaderContextSelector implements ContextSelector {
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,150,ctx = CONTEXT_MAP.get(name).get().get();
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,151,return ctx;
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,167,ref.compareAndSet(weakRef, new WeakReference<>(ctx));
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,29,import org.apache.logging.log4j.core.LoggerContext;
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,54,private final org.apache.logging.log4j.core.Logger logger;
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,73,private Category(final org.apache.logging.log4j.core.Logger logger) {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,108,org.apache.logging.log4j.core.Logger getLogger() {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,113,final org.apache.logging.log4j.core.Logger parent = logger.getParent();
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,114,if (parent == null) {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,117,final ConcurrentMap<String, Logger> loggers = getLoggersMap(logger.getContext());
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,173,case OFF:
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,174,return Level.OFF;
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,190,logger.setLevel(org.apache.logging.log4j.Level.toLevel(level.levelStr));
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,198,logger.setLevel(org.apache.logging.log4j.Level.toLevel(priority.levelStr));
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,345,logger.logMessage(fqcn, lvl, null, msg, t);
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,353,return logger.isAdditive();
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,357,logger.setAdditive(additivity);
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,369,final ConcurrentMap<String, Logger> loggers = getLoggersMap(logger.getContext());
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,370,while ((name = NameUtil.getSubName(name)) != null) {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,371,final Logger subLogger = loggers.get(name);
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,372,if (subLogger != null) {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,373,final ResourceBundle rb = subLogger.bundle;
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,374,if (rb != null) {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,375,return rb;
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,439,if (logger.isEnabled(level, null, message, throwable)) {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,440,logger.logMessage(FQCN, level, null, new ObjectMessage(message), throwable);
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,462,return (LoggerContext) getContext(FQCN, false);
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,471,return logger.isEnabled(level, null, null);
log4j-1.2-api/src/main/java/org/apache/log4j/Logger.java,21,import org.apache.logging.log4j.core.LoggerContext;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,509,&& method.getName().equals("newInstance")) {
log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLoggerFactory.java,37,return new Log4jLogger(context.getLogger(key), name);
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,407,private Configuration setConfiguration(final Configuration config) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,488,final StringBuilder buf = new StringBuilder(255);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,38,super(new LoggerInputStream(in, charset, logger, fqcn == null ? FQCN : fqcn, level, marker));
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,44,super(new LoggerInputStream(in, charset, logger, fqcn == null ? FQCN : fqcn, level, marker), size);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,49,super.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,54,return super.read();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,59,return super.read(b, 0, b.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,64,return super.read(b, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,69,return LoggerBufferedInputStream.class.getSimpleName() + "{stream=" + this.in + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,38,super(new LoggerReader(reader, logger, fqcn == null ? FQCN : fqcn, level, marker));
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,43,super(new LoggerReader(reader, logger, fqcn == null ? FQCN : fqcn, level, marker), size);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,48,super.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,53,return super.read();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,58,return super.read(cbuf, 0, cbuf.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,63,return super.read(cbuf, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,68,final int len = target.remaining();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,69,final char[] cbuf = new char[len];
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,70,final int charsRead = read(cbuf, 0, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,71,if (charsRead > 0) {
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,72,target.put(cbuf, 0, charsRead);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,74,return charsRead;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,79,return super.readLine();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,40,private final ByteStreamLogger logger;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,41,private final String fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,46,this.logger = new ByteStreamLogger(logger, level, marker, charset);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,47,this.fqcn = fqcn == null ? FQCN : fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,52,this.out.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,53,this.logger.close(this.fqcn);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,58,this.out.flush();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,63,return LoggerFilterOutputStream.class.getSimpleName() + "{stream=" + this.out + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,68,this.out.write(b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,69,this.logger.put(this.fqcn, b, 0, b.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,74,this.out.write(b, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,75,this.logger.put(this.fqcn, b, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,80,this.out.write(b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,81,this.logger.put(this.fqcn, (byte) (b & 0xFF));
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,37,private final CharStreamLogger logger;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,38,private final String fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,43,this.logger = new CharStreamLogger(logger, level, marker);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,44,this.fqcn = fqcn == null ? FQCN : fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,49,this.out.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,50,this.logger.close(this.fqcn);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,55,this.out.flush();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,60,return LoggerFilterWriter.class.getSimpleName() + "{writer=" + this.out + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,65,this.out.write(cbuf);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,66,this.logger.put(this.fqcn, cbuf, 0, cbuf.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,71,this.out.write(cbuf, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,72,this.logger.put(this.fqcn, cbuf, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,77,this.out.write(c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,78,this.logger.put(this.fqcn, (char) c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,83,this.out.write(str);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,84,this.logger.put(this.fqcn, str, 0, str.length());
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,89,this.out.write(str, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,90,this.logger.put(this.fqcn, str, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,37,private final String fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,38,private final ByteStreamLogger logger;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,43,this.logger = new ByteStreamLogger(logger, level, marker, charset);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,44,this.fqcn = fqcn == null ? FQCN : fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,49,this.logger.close(this.fqcn);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,50,super.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,55,final int b = super.read();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,56,this.logger.put(this.fqcn, b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,57,return b;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,62,return read(b, 0, b.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,67,final int bytesRead = super.read(b, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,68,this.logger.put(this.fqcn, b, off, bytesRead);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,69,return bytesRead;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,74,return LoggerInputStream.class.getSimpleName() + "{stream=" + this.in + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,39,private final ByteStreamLogger logger;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,40,private final String fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,44,this.logger = new ByteStreamLogger(logger, level, marker, charset);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,45,this.fqcn = fqcn == null ? FQCN : fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,50,this.logger.close(this.fqcn);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,60,this.logger.put(this.fqcn, b, 0, b.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,65,this.logger.put(this.fqcn, b, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,70,this.logger.put(this.fqcn, (byte) (b & 0xFF));
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,45,super(new LoggerOutputStream(logger, level, marker, ensureNonNull(charset), fqcn == null ? FQCN : fqcn),
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,46,autoFlush, ensureNonNull(charset).name());
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,52,super(new LoggerFilterOutputStream(out, ensureNonNull(charset), logger, fqcn == null ? FQCN : fqcn, level,
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,53,marker), autoFlush, ensureNonNull(charset).name());
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,62,super.append(c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,68,super.append(csq);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,74,super.append(csq, start, end);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,80,return super.checkError();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,85,super.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,90,super.flush();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,95,super.format(l, format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,101,super.format(format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,107,super.print(b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,112,super.print(c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,117,super.print(s);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,122,super.print(d);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,127,super.print(f);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,132,super.print(i);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,137,super.print(l);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,142,super.print(obj);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,147,super.print(s);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,152,super.printf(l, format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,158,super.printf(format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,164,super.println();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,169,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,174,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,179,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,184,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,189,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,194,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,199,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,204,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,209,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,214,return LoggerPrintStream.class.getSimpleName() + "{stream=" + this.out + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,219,super.write(b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,224,super.write(b, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,229,super.write(b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,51,super(new LoggerWriter(logger, fqcn == null ? FQCN : fqcn, level, marker), autoFlush);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,56,super(new LoggerFilterWriter(writer, logger, fqcn == null ? FQCN : fqcn, level, marker), autoFlush);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,61,super.append(c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,67,super.append(csq);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,73,super.append(csq, start, end);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,79,return super.checkError();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,84,super.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,89,super.flush();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,94,super.format(l, format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,100,super.format(format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,106,super.print(b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,111,super.print(c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,116,super.print(s);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,121,super.print(d);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,126,super.print(f);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,131,super.print(i);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,136,super.print(l);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,141,super.print(obj);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,146,super.print(s);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,151,super.printf(l, format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,157,super.printf(format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,163,super.println();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,168,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,173,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,178,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,183,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,188,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,193,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,198,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,203,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,208,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,213,return LoggerPrintWriter.class.getSimpleName() + "{stream=" + this.out + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,218,super.write(buf);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,223,super.write(buf, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,228,super.write(c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,233,super.write(s);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,238,super.write(s, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,37,private final CharStreamLogger logger;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,38,private final String fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,43,this.logger = new CharStreamLogger(logger, level, marker);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,44,this.fqcn = fqcn == null ? FQCN : fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,49,super.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,50,this.logger.close(this.fqcn);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,55,final int c = super.read();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,56,this.logger.put(this.fqcn, c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,57,return c;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,62,return read(cbuf, 0, cbuf.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,67,final int charsRead = super.read(cbuf, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,68,this.logger.put(this.fqcn, cbuf, off, charsRead);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,69,return charsRead;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,74,final int len = target.remaining();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,75,final char[] cbuf = new char[len];
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,76,final int charsRead = read(cbuf, 0, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,77,if (charsRead > 0) {
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,78,target.put(cbuf, 0, charsRead);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,80,return charsRead;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,85,return LoggerReader.class.getSimpleName() + "{stream=" + this.in + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,36,private final CharStreamLogger logger;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,37,private final String fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,40,this.logger = new CharStreamLogger(logger, level, marker);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,41,this.fqcn = fqcn == null ? FQCN : fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,46,this.logger.close(this.fqcn);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,56,return this.getClass().getSimpleName() + "[fqcn=" + this.fqcn + ", logger=" + this.logger + "]";
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,61,this.logger.put(this.fqcn, cbuf, 0, cbuf.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,66,this.logger.put(this.fqcn, cbuf, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,71,this.logger.put(this.fqcn, (char) c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,76,this.logger.put(this.fqcn, str, 0, str.length());
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,81,this.logger.put(this.fqcn, str, off, len);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java,46,private MapPatternConverter(final String[] options) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java,58,return new MapPatternConverter(options);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java,77,toAppendTo.append("{}");
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java,78,return;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy.java,71,if (manager.getFileSize() == 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy.java,72,return false;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,19,import java.io.IOException;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,20,import java.io.OutputStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,21,import java.io.PrintStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,22,import java.io.Serializable;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,23,import java.io.UnsupportedEncodingException;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,24,import java.lang.reflect.Constructor;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,25,import java.nio.charset.Charset;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,270,throws ClassNotFoundException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,271,IllegalAccessException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,272,InstantiationException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,273,NoSuchMethodException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,274,InvocationTargetException {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,275,return LoaderUtil.newInstanceOf(className);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,293,throws ClassNotFoundException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,294,NoSuchMethodException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,295,IllegalAccessException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,296,InvocationTargetException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,297,InstantiationException {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,298,return LoaderUtil.newCheckedInstanceOf(className, clazz);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,499,return (T) appenders.get(appenderName);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,517,appenders.putIfAbsent(appender.getName(), appender);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,630,final Appender app = appenders.remove(appenderName);
log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/MDCContextMap.java,50,return MDC.getCopyOfContextMap().containsKey(key);
log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/MDCContextMap.java,67,return MDC.getCopyOfContextMap().isEmpty();
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java,109,final String font, final String fontSize, final String headerSize) {
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java,139,sbuf.append(event.getTimeMillis() - jvmStartTime);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java,332,return new HtmlLayout(locationInfo, title, contentType, charset, font, fontSize, headerSize);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java,409,fontSize.larger().getFontSize());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,256,loggerConfig.getReliabilityStrategy().beforeStopAppenders();
log4j-api/src/main/java/org/apache/logging/log4j/message/FormattedMessage.java,175,stringArgs[i] = obj.toString();
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java,162,if (escapedLogger.isEmpty()) {
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/PatternLayoutComparisonBenchmark.java,106,patternLayoutEncoder.init(baos);
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/PatternLayoutComparisonBenchmark.java,117,patternLayoutEncoder.doEncode(LOGBACKEVENT);
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/PatternLayoutComparisonBenchmark.java,119,return baos.toByteArray();
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,186,private boolean enableSubstitutionInVariables;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,22,import java.util.Objects;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,28,import org.apache.logging.log4j.core.appender.rolling.action.CommonsCompressAction;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,30,import org.apache.logging.log4j.core.appender.rolling.action.GzCompressAction;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,31,import org.apache.logging.log4j.core.appender.rolling.action.ZipCompressAction;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,191,final boolean useMax = fileIndex == null ? true : fileIndex.equalsIgnoreCase("max");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,192,int minIndex = MIN_WINDOW_SIZE;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,193,if (min != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,194,minIndex = Integer.parseInt(min);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,195,if (minIndex < 1) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,196,LOGGER.error("Minimum window size too small. Limited to " + MIN_WINDOW_SIZE);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,197,minIndex = MIN_WINDOW_SIZE;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,200,int maxIndex = DEFAULT_WINDOW_SIZE;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,201,if (max != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,202,maxIndex = Integer.parseInt(max);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,203,if (maxIndex < minIndex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,204,maxIndex = minIndex < DEFAULT_WINDOW_SIZE ? DEFAULT_WINDOW_SIZE : minIndex;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,205,LOGGER.error("Maximum window size must be greater than the minimum windows size. Set to " + maxIndex);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,266,final List<FileRenameAction> renames = new ArrayList<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,267,final StringBuilder buf = new StringBuilder();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,272,final int suffixLength = suffixLength(highFilename);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,275,for (int i = highIndex; i >= lowIndex; i--) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,276,File toRename = new File(highFilename);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,277,if (i == highIndex && toRename.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,284,boolean isBase = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,286,if (suffixLength > 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,290,if (toRename.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,291,if (toRenameBase.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,292,LOGGER.debug("DefaultRolloverStrategy.purgeAscending deleting {} base of {}.", //
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,293,toRenameBase, toRename);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,294,toRenameBase.delete();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,297,toRename = toRenameBase;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,298,isBase = true;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,302,if (toRename.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,307,if (i == lowIndex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,309,toRename, i);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,310,if (!toRename.delete()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,311,return -1;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,314,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,325,String renameTo = lowFilename;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,327,if (isBase) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,328,renameTo = lowFilename.substring(0, lowFilename.length() - suffixLength);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,331,renames.add(new FileRenameAction(toRename, new File(renameTo), true));
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,332,highFilename = lowFilename;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,334,buf.setLength(0);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,348,for (int i = renames.size() - 1; i >= 0; i--) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,349,final Action action = renames.get(i);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,350,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,351,LOGGER.debug("DefaultRolloverStrategy.purgeAscending executing {} of {}: {}", //
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,352,i, renames.size(), action);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,353,if (!action.execute()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,357,LOGGER.warn("Exception during purge in RollingFileAppender", ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,358,return -1;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,374,final List<FileRenameAction> renames = new ArrayList<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,375,final StringBuilder buf = new StringBuilder();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,381,final int suffixLength = suffixLength(lowFilename);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,383,for (int i = lowIndex; i <= highIndex; i++) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,384,File toRename = new File(lowFilename);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,385,boolean isBase = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,387,if (suffixLength > 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,391,if (toRename.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,392,if (toRenameBase.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,393,LOGGER.debug("DefaultRolloverStrategy.purgeDescending deleting {} base of {}.", //
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,394,toRenameBase, toRename);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,395,toRenameBase.delete();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,398,toRename = toRenameBase;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,399,isBase = true;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,403,if (toRename.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,408,if (i == highIndex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,410,toRename, i);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,411,if (!toRename.delete()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,412,return -1;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,415,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,421,buf.setLength(0);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,426,String renameTo = highFilename;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,428,if (isBase) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,429,renameTo = highFilename.substring(0, highFilename.length() - suffixLength);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,432,renames.add(new FileRenameAction(toRename, new File(renameTo), true));
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,433,lowFilename = highFilename;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,442,for (int i = renames.size() - 1; i >= 0; i--) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,443,final Action action = renames.get(i);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,445,LOGGER.debug("DefaultRolloverStrategy.purgeDescending executing {} of {}: {}", //
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,446,i, renames.size(), action);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,476,if (maxIndex < 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,477,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,479,final long startNanos = System.nanoTime();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,480,final int fileIndex = purge(minIndex, maxIndex, manager);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,481,if (fileIndex < 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,482,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,484,if (LOGGER.isTraceEnabled()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,485,final double durationMillis = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startNanos);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,486,LOGGER.trace("DefaultRolloverStrategy.purge() took {} milliseconds", durationMillis);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,512,return "DefaultRolloverStrategy(min=" + minIndex + ", max=" + maxIndex + ')';
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/processor/PluginProcessor.java,127,entry.setKey(plugin.name().toLowerCase());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/processor/PluginProcessor.java,158,entry.setKey(alias.toLowerCase());
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java,150,final String prefix = var.substring(0, prefixPos);
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,923,final int endPos = pos;
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,939,varDefaultValue = varNameExpr.substring(i + valueDelimiterMatchLen);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,182,socket = (SSLSocket) socketFactory.createSocket(data.host, data.port);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,76,LOGGER.error(SHUTDOWN_HOOK_MARKER, "Caught exception executing shutdown hook {}", hook, t);
log4j-api/src/main/java/org/apache/logging/log4j/message/LocalizedMessageFactory.java,76,return new LocalizedMessage(baseName,  key, params);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,180,logIfEnabled(FQCN, Level.DEBUG, marker, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,215,logIfEnabled(FQCN, Level.DEBUG, null, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,342,logIfEnabled(FQCN, Level.ERROR, marker, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,377,logIfEnabled(FQCN, Level.ERROR, null, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,624,logIfEnabled(FQCN, Level.INFO, marker, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,659,logIfEnabled(FQCN, Level.INFO, null, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,814,logIfEnabled(FQCN, level, marker, msg, (Throwable) null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,851,logIfEnabled(FQCN, level, null, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1084,logIfEnabled(FQCN, Level.TRACE, marker, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1119,logIfEnabled(FQCN, Level.TRACE, null, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1204,logIfEnabled(FQCN, Level.WARN, marker, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1239,logIfEnabled(FQCN, Level.WARN, null, msg, null);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/DatePatternConverter.java,71,return fastDateFormat.toPattern();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/DatePrinter.java,66,StringBuilder format(long millis, StringBuilder buf);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/DatePrinter.java,76,StringBuilder format(Date date, StringBuilder buf);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/DatePrinter.java,88,StringBuilder format(Calendar calendar, StringBuilder buf);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,19,import java.io.Serializable;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,32,public class FastDateFormat extends Format implements DatePrinter, DateParser, Serializable {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,370,return printer.format(obj, toAppendTo, pos);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,417,public StringBuilder format(final long millis, final StringBuilder buf) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,430,public StringBuilder format(final Date date, final StringBuilder buf) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,443,public StringBuilder format(final Calendar calendar, final StringBuilder buf) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,522,public String toPattern() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,523,return printer.getPattern();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,573,protected StringBuilder applyRules(final Calendar calendar, final StringBuilder buf) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,574,return printer.applyRules(calendar, buf);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,28,import java.util.GregorianCalendar;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,393,private GregorianCalendar newCalendar() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,395,return new GregorianCalendar(mTimeZone, mLocale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,420,public StringBuilder format(final long millis, final StringBuilder buf) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,421,return format(new Date(millis), buf);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,428,public StringBuilder format(final Date date, final StringBuilder buf) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,438,public StringBuilder format(final Calendar calendar, final StringBuilder buf) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,440,return format(calendar.getTime(), buf);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,451,protected StringBuilder applyRules(final Calendar calendar, final StringBuilder buf) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,452,for (final Rule rule : mRules) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,453,rule.appendTo(buf, calendar);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,557,private static void appendDigits(final StringBuilder buffer, final int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,581,void appendTo(StringBuilder buffer, Calendar calendar);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,594,void appendTo(StringBuilder buffer, int value);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,625,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,658,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,701,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,733,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,741,public final void appendTo(final StringBuilder buffer, final int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,747,buffer.append(value);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,778,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,786,public final void appendTo(final StringBuilder buffer, final int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,829,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,837,public final void appendTo(final StringBuilder buffer, int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,843,int index = buffer.length();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,877,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,885,public final void appendTo(final StringBuilder buffer, final int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,889,buffer.append(value);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,919,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,927,public final void appendTo(final StringBuilder buffer, final int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,957,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,965,public final void appendTo(final StringBuilder buffer, final int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,998,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1010,public void appendTo(final StringBuilder buffer, final int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1043,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1055,public void appendTo(final StringBuilder buffer, final int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1126,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1167,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1246,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,80,if (format == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,197,formatter = DateFormat.getTimeInstance(timeStyle.intValue(), locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,200,formatter = DateFormat.getDateInstance(dateStyle.intValue(), locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,57,private final boolean lenient;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,60,private transient Pattern parsePattern;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,61,private transient Strategy[] strategies;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,64,private transient String currentFormatField;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,65,private transient Strategy nextStrategy;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,79,this(pattern, timeZone, locale, null, true);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,93,protected FastDateParser(final String pattern, final TimeZone timeZone, final Locale locale, final Date centuryStart) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,94,this(pattern, timeZone, locale, centuryStart, true);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,110,protected FastDateParser(final String pattern, final TimeZone timeZone, final Locale locale,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,111,final Date centuryStart, final boolean lenient) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,115,this.lenient = lenient;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,158,patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,160,nextStrategy = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,161,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,164,nextStrategy = getStrategy(nextFormatField, definingCalendar);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,166,collector.add(currentStrategy);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,171,if (patternMatcher.regionStart() != patternMatcher.regionEnd()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,175,collector.add(currentStrategy);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,213,Pattern getParsePattern() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,214,return parsePattern;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,323,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,328,cal.setLenient(lenient);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,332,strategy.setCalendar(this, cal, matcher.group(i));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,335,return cal.getTime();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,372,private static StringBuilder escapeRegex(final StringBuilder regex, final String value, final boolean unquote) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,373,regex.append("\\Q");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,377,case '\'':
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,380,return regex;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,384,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,385,case '\\':
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,387,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,396,regex.append(c); // we always want the original \
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,397,c = value.charAt(i); // Is it followed by E ?
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,398,if (c == 'E') { // \E detected
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,402,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,403,default:
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,404,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,406,regex.append(c);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,408,regex.append("\\E");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,409,return regex;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,421,return definingCalendar.getDisplayNames(field, Calendar.ALL_STYLES, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,438,boolean isNextNumber() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,446,int getFieldWidth() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,447,return currentFormatField.length();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,474,void setCalendar(final FastDateParser parser, final Calendar cal, final String value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,486,abstract boolean addRegex(FastDateParser parser, StringBuilder regex);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,502,private Strategy getStrategy(final String formatField, final Calendar definingCalendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,504,case '\'':
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,510,return new CopyQuotedStrategy(formatField);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,546,return ISO8601TimeZoneStrategy.getStrategy(formatField.length());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,548,if (formatField.equals("ZZ")) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,549,return ISO_8601_STRATEGY;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,599,private final String formatField;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,618,return Character.isDigit(c);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,625,boolean addRegex(final FastDateParser parser, final StringBuilder regex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,626,escapeRegex(regex, formatField, true);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,627,return false;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,636,private final Locale locale;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,648,final Map<String, Integer> keyValues = getDisplayNames(field, definingCalendar, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,652,lKeyValues.put(entry.getKey().toLowerCase(locale), entry.getValue());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,660,boolean addRegex(final FastDateParser parser, final StringBuilder regex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,663,simpleQuote(regex, textKeyValue).append('|');
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,666,return true;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,677,sb.append(" not in (");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,679,sb.append(textKeyValue).append(' ');
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,682,throw new IllegalArgumentException(sb.toString());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,715,boolean addRegex(final FastDateParser parser, final StringBuilder regex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,718,regex.append("(\\p{Nd}{").append(parser.getFieldWidth()).append("}+)");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,721,regex.append("(\\p{Nd}++)");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,723,return true;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,730,void setCalendar(final FastDateParser parser, final Calendar cal, final String value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,731,cal.set(field, modify(Integer.parseInt(value)));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,739,int modify(final int iValue) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,761,static class TimeZoneStrategy extends Strategy {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,767,private final String validTimeZoneChars;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,794,tzNames.put(zoneName, tz);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,795,simpleQuote(sb.append('|'), zoneName);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,800,sb.append(')');
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,801,validTimeZoneChars = sb.toString();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,808,boolean addRegex(final FastDateParser parser, final StringBuilder regex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,809,regex.append(validTimeZoneChars);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,810,return true;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,818,TimeZone tz;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,828,throw new IllegalArgumentException(value + " is not a supported timezone name");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,831,cal.setTimeZone(tz);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,835,private static class ISO8601TimeZoneStrategy extends Strategy {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,837,private final String pattern;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,844,this.pattern = pattern;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,851,boolean addRegex(final FastDateParser parser, final StringBuilder regex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,852,regex.append(pattern);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,853,return true;
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java,719,private final Message message;
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java,755,final Log4jLogEvent result = new Log4jLogEvent(loggerName, marker, loggerFQCN, level, message, thrown,
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,17,package org.apache.logging.log4j.util;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,19,import java.io.IOException;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,20,import java.io.InputStream;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,21,import java.net.URL;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,22,import java.util.ArrayList;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,23,import java.util.List;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,24,import java.util.Properties;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,36,public final class PropertiesUtil {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,38,private static final PropertiesUtil LOG4J_PROPERTIES = new PropertiesUtil("log4j2.component.properties");
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,42,private final Properties props;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,49,public PropertiesUtil(final Properties props) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,50,this.props = props;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,145,public int getIntegerProperty(final String name, final int defaultValue) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,155,if (prop != null) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,156,try {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,157,return Integer.parseInt(prop);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,159,return defaultValue;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,162,return defaultValue;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,173,public long getLongProperty(final String name, final long defaultValue) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,183,if (prop != null) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,184,try {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,185,return Long.parseLong(prop);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,187,return defaultValue;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,190,return defaultValue;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,225,final String prop = getStringProperty(name);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,233,public static Properties getSystemProperties() {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,234,try {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,235,return new Properties(System.getProperties());
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,239,return new Properties();
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,253,if (prefix == null || prefix.length() == 0) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,254,return subset;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,262,if (key.startsWith(prefixToMatch)) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,263,subset.setProperty(key.substring(prefixToMatch.length()), properties.getProperty(key));
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,264,keys.add(key);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,268,properties.remove(key);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,271,return subset;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,64,SYSTEM_OUT,
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,66,SYSTEM_ERR
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,436,LOGGER.error("Could not reconfigure JMX", t);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java,623,sb.append(" Message=").append(message.getFormattedMessage());
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,276,LOGGER.error("Unable to unregister MBeans", ex);
log4j-web/src/main/java/org/apache/logging/log4j/web/appender/ServletAppender.java,53,servletContext.log(((AbstractStringLayout) getLayout()).toSerializable(event));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,244,return Arrays.equals(keys, ((MultipartKey) obj).keys);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,31,import org.apache.logging.log4j.core.LifeCycle;
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,153,logMessage(fqcn, level, CATCHING_MARKER, catchingMsg(t), t);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,160,logMessage(FQCN, Level.ERROR, CATCHING_MARKER, catchingMsg(t), t);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,938,logMessage(fqcn, level, marker, msg, t);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,999,logMessage(fqcn, level, marker, messageFactory.newMessage(message), t);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1005,logMessage(fqcn, level, marker, message, t);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1016,logMessage(fqcn, level, marker, messageFactory.newMessage(message), t);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1021,logMessage(fqcn, level, marker, msg, msg.getThrowable());
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1027,logMessage(fqcn, level, marker, msg, msg.getThrowable());
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1033,logMessage(fqcn, level, marker, msg, msg.getThrowable());
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1040,logMessage(FQCN, level, marker, msg, msg.getThrowable());
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1048,logMessage(FQCN, level, null, msg, msg.getThrowable());
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1073,logMessage(fqcn, level, THROWING_MARKER, throwingMsg(t), t);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,352,log(logEventFactory.createEvent(loggerName, marker, fqcn, level, data, props, t));
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java,67,LOGGER.error("Unable to create Lookup for {}", entry.getKey(), ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java,109,LOGGER.warn(
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java,120,LOGGER.info("Log4j appears to be running in a Servlet environment, but there's no log4j-web module " +
log4j-core/src/main/java/org/apache/logging/log4j/core/config/Property.java,55,return value;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/Property.java,77,return name + '=' + value;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/visitors/PluginValueVisitor.java,36,final StringBuilder log) {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,293,os = new ByteArrayOutputStream();
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/LevelRangeFilter.java,64,final Level actualMaxLevel = minLevel == null ? Level.ERROR : maxLevel;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/ResolverUtil.java,237,final List<String> neverDecode = Arrays.asList(VFSZIP, BUNDLE_RESOURCE);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,182,InputStream is = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,183,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,184,is = Loader.getResourceAsStream(schemaResource, XmlConfiguration.class.getClassLoader());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,186,LOGGER.error("Unable to access schema {}", this.schemaResource, ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,188,if (is != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,189,final Source src = new StreamSource(is, LOG4J_XSD);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,190,final SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,191,Schema schema = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,192,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,193,schema = factory.newSchema(src);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,195,LOGGER.error("Error parsing Log4j schema", ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,197,if (schema != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,198,final Validator validator = schema.newValidator();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,200,validator.validate(new StreamSource(new ByteArrayInputStream(buffer)));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,202,LOGGER.error("Error reading configuration for validation", ioe);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,204,LOGGER.error("Error validating configuration", ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AppenderControl.java,88,return getFilter() != null && Filter.Result.DENY == getFilter().filter(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,307,file.createNewFile();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,315,OutputStream os;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,317,os = new FileOutputStream(name, data.append);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,324,final long time = file.lastModified(); // LOG4J2-531 create file first so time has valid value
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,325,return new RollingFileManager(name, data.pattern, os, data.append, size, time, data.policy,
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileAppender.java,43,private static final int DEFAULT_BUFFER_SIZE = 8192;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileAppender.java,148,final FileManager manager = FileManager.getFileManager(fileName, isAppend, isLocking, isBuffered, advertiseUri,
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileManager.java,68,final boolean bufferedIo, final String advertiseUri, final Layout<? extends Serializable> layout,
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileManager.java,74,return (FileManager) getManager(fileName, new FactoryData(append, locking, bufferedIo, bufferSize,
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileManager.java,82,final FileChannel channel = ((FileOutputStream) getOutputStream()).getChannel();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,42,this.os.write(header, 0, header.length);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,94,protected OutputStream getOutputStream() {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,123,os.write(bytes, offset, length);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,125,final String msg = "Error writing to stream " + getName();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,126,throw new AppenderLoggingException(msg, ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,141,if (stream == System.out || stream == System.err) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,792,final String zoneName = zoneNames[i].toLowerCase(locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/visitors/PluginValueVisitor.java,38,final String rawValue = node.getValue() != null ? node.getValue() :
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/visitors/PluginValueVisitor.java,39,removeAttributeValue(node.getAttributes(), "value");
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,65,loadProvider(bundle.adapt(BundleWiring.class));
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,87,loadProvider(wire.getProviderWiring());
log4j-core/src/main/java/org/apache/logging/log4j/core/osgi/Activator.java,61,scanBundleForPlugins(bundle);
log4j-core/src/main/java/org/apache/logging/log4j/core/osgi/Activator.java,67,LOGGER.trace("Scanning bundle [{}] for plugins.", bundle.getSymbolicName());
log4j-core/src/main/java/org/apache/logging/log4j/core/osgi/Activator.java,68,PluginRegistry.getInstance().loadFromBundle(bundle.getBundleId(),
log4j-core/src/main/java/org/apache/logging/log4j/core/osgi/Activator.java,69,bundle.adapt(BundleWiring.class).getClassLoader());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginBuilder.java,127,LOGGER.error("Unable to inject fields into builder class for plugin type {}, element {}.", this.clazz,
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginBuilder.java,128,node.getName(), e);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginBuilder.java,140,LOGGER.error("Unable to invoke factory method in class {} for element {}.", this.clazz, this.node.getName(),
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginBuilder.java,141,e);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,383,final StructuredDataElement formattedContextMap = new StructuredDataElement(contextMap, false);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,399,final StructuredDataElement formattedData = new StructuredDataElement(map, false);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,494,private void formatStructuredElement(final String id, final String prefix, final StructuredDataElement data,
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,503,appendMap(prefix, data.getFields(), sb, noopChecker);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,505,appendMap(prefix, data.getFields(), sb, checker);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,680,return new StructuredDataElement(map, discardIfEmpty);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,689,public StructuredDataElement(final Map<String, String> fields, final boolean discardIfEmpty) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,47,private final Collection<Cancellable> hooks = new CopyOnWriteArrayList<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,72,for (final Runnable hook : hooks) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,73,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,74,hook.run();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,110,hooks.add(receipt);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/JacksonFactory.java,120,final Set<String> except = new HashSet<>(2);
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,30,import org.apache.logging.log4j.core.util.NameUtil;
log4j-1.2-api/src/main/java/org/apache/log4j/Logger.java,59,return (LoggerContext) getContext(FQCN, false);
