File,Line_number,SRC
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,73,int nextMinutes = getNext(minutes, currentMinutes);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,79,int nextHour = getNext(hours, currentHours);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,103,int nextHour = getNext(hours, currentHours);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,109,int nextMinutes = getNext(minutes, currentMinutes);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,126,int nextMonth = getNext(month, currentMonth);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,153,nextWeekDay = getNext(dayOfWeek, currentDayOfWeek);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,157,nextCalendarDay = getNext(dayOfMonth, currentDayOfMonth);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,193,static int getNext(final CronEntry entry, final int current) throws MessageFormatException {
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,212,result = entry.end + first - entry.start - current;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1427,BrokerSupport.resend(context, m.getMessage(), dest);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1428,removeMessage(context, m);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1429,messagesLock.writeLock().lock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1431,messages.rollback(m.getMessageId());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1432,if (isDLQ()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1433,DeadLetterStrategy stratagy = getDeadLetterStrategy();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1434,stratagy.rollback(m.getMessage());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1437,messagesLock.writeLock().unlock();
activemq-osgi/src/main/java/org/apache/activemq/osgi/ActiveMQServiceFactory.java,141,broker.waitUntilStarted();
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormatFactory.java,47,private String platformDetails = ActiveMQConnectionMetaData.PLATFORM_DETAILS;
activemq-http/src/main/java/org/apache/activemq/transport/ws/StompWSConnection.java,71,connection.getRemote().sendString(frame.format());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,78,public void marshal(Object command, DataOutput os) throws IOException {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,79,StompFrame stomp = (org.apache.activemq.transport.stomp.StompFrame)command;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,81,if (stomp.getAction().equals(Stomp.Commands.KEEPALIVE)) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,82,os.write(Stomp.BREAK);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,83,return;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,86,StringBuilder buffer = new StringBuilder();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,101,os.write(buffer.toString().getBytes("UTF-8"));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,215,HashMap<String, String> headers = new HashMap<String, String>(25);
activemq-broker/src/main/java/org/apache/activemq/transport/auto/nio/AutoNIOSSLTransportServer.java,114,in.start();
activemq-broker/src/main/java/org/apache/activemq/transport/auto/nio/AutoNIOSSLTransportServer.java,115,SSLEngine engine = in.getSslSession();
activemq-broker/src/main/java/org/apache/activemq/transport/auto/nio/AutoNIOSSLTransportServer.java,140,Transport transport = createTransport(socket, format, engine, initBuffer, in.getInputBuffer(), protocolInfo.detectedTransportFactory);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,52,protected final LinkedHashMap<MessageId, MessageDispatch> dispatchedMessage = new LinkedHashMap<MessageId, MessageDispatch>();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,53,protected final LinkedList<MessageDispatch> unconsumedMessage = new LinkedList<MessageDispatch>();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,68,if (ackMode == CLIENT_ACK) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,69,synchronized (this) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,70,dispatchedMessage.put(message.getMessageId(), md);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,186,dispatchedMessage.remove(msgId);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,34,public class MQTTSocket extends AbstractMQTTSocket implements WebSocketListener {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,40,final AtomicBoolean receivedDisconnect = new AtomicBoolean();
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,75,MQTTFrame frame = (MQTTFrame)wireFormat.unmarshal(new ByteSequence(bytes, offset, length));
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,76,if (frame.messageType() == DISCONNECT.TYPE) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,77,receivedDisconnect.set(true);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,79,getProtocolConverter().onMQTTCommand(frame);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpWireFormat.java,49,private int maxAmqpFrameSize = NO_AMQP_MAX_FRAME_SIZE;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpWireFormatFactory.java,29,private int maxAmqpFrameSize = AmqpWireFormat.NO_AMQP_MAX_FRAME_SIZE;
activemq-http/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,150,super.setTransportOption(socketOptions);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/WSServlet.java,115,((MQTTSocket) socket).setTransportOptions(new HashMap<String, Object>(transportOptions));
activemq-broker/src/main/java/org/apache/activemq/transport/protocol/MqttProtocolVerifier.java,30,boolean mqtt311 = value[4] == 77 && // M
activemq-broker/src/main/java/org/apache/activemq/transport/protocol/MqttProtocolVerifier.java,31,value[5] == 81 && // Q
activemq-broker/src/main/java/org/apache/activemq/transport/protocol/MqttProtocolVerifier.java,32,value[6] == 84 && // T
activemq-broker/src/main/java/org/apache/activemq/transport/protocol/MqttProtocolVerifier.java,33,value[7] == 84;   // T
activemq-broker/src/main/java/org/apache/activemq/transport/protocol/MqttProtocolVerifier.java,35,boolean mqtt31  = value[4] == 77  && // M
activemq-broker/src/main/java/org/apache/activemq/transport/protocol/MqttProtocolVerifier.java,36,value[5] == 81  && // Q
activemq-broker/src/main/java/org/apache/activemq/transport/protocol/MqttProtocolVerifier.java,37,value[6] == 73  && // I
activemq-broker/src/main/java/org/apache/activemq/transport/protocol/MqttProtocolVerifier.java,38,value[7] == 115;   // s
activemq-broker/src/main/java/org/apache/activemq/transport/protocol/MqttProtocolVerifier.java,40,return mqtt311 || mqtt31;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1733,gcCandidateSet.remove(lastUpdate.getDataFileId());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1721,pageFile.flush();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1518,if (enableSubscriptionStatistics && location.getSize() != previousKeys.location.getSize()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2962,public long getStoredMessageCount(Transaction tx, StoredDestination sd, String subscriptionKey) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2963,SequenceSet messageSequences = sd.ackPositions.get(tx, subscriptionKey);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2964,if (messageSequences != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2965,long result = messageSequences.rangeSize();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2967,return result > 0 ? result - 1 : 0;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2973,public long getStoredMessageSize(Transaction tx, StoredDestination sd, String subscriptionKey) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2975,SequenceSet messageSequences = sd.ackPositions.get(tx, subscriptionKey);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2978,if (messageSequences != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2979,Sequence head = messageSequences.getHead();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2980,if (head != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2983,Iterator<Entry<Long, MessageKeys>> iterator = sd.orderIndex.iterator(tx,
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2984,new MessageOrderCursor(head.getFirst()));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2986,while (iterator.hasNext()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2987,Entry<Long, MessageKeys> entry = iterator.next();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2988,locationSize += entry.getValue().location.getSize();
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,64,protected final ConcurrentMap<ConnectionId, ConnectionState> connectionStates = new ConcurrentHashMap<ConnectionId, ConnectionState>();
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,206,Vector<TransactionInfo> toRollback = new Vector<TransactionInfo>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2594,List<TransportConnector> al = new ArrayList<TransportConnector>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1135,LOG.error("KahaDB failed to store to Journal", ioe);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,180,firstAsyncException = null;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,183,if (firstAsyncException != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,184,throw firstAsyncException;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,252,final byte[] end = new byte[]{0};
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,289,logger.trace("Syning file {} on rotate", dataFile.getFile().getName());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,359,logger.info("Journal failed while writing at: " + wb.offset);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,361,firstAsyncException = e;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,362,if (wb != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,363,wb.exception.set(e);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,364,wb.latch.countDown();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,366,if (nextWriteBatch != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,367,nextWriteBatch.exception.set(e);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,368,nextWriteBatch.latch.countDown();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,399,if (write.onComplete != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1689,pageFile.tx().execute(new Transaction.Closure<IOException>() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1691,public void execute(Transaction tx) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1692,checkpointUpdate(tx, cleanup);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1708,void checkpointUpdate(Transaction tx, boolean cleanup) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1898,journal.removeDataFiles(gcCandidateSet);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2260,protected ObjectName createNetworkConnectorObjectName(NetworkConnector connector) throws MalformedObjectNameException {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2593,Set<ActiveMQDestination> durableDestinations = getBroker().getDurableDestinations();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2632,connector.setBrokerName(getBrokerName());
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2633,connector.setDurableDestinations(durableDestinations);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2634,if (getDefaultSocketURIString() != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2635,connector.setBrokerURL(getDefaultSocketURIString());
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2637,if (networkConnectorStartExecutor != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2638,networkConnectorStartExecutor.execute(new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2640,public void run() {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2641,try {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2642,LOG.info("Async start of {}", connector);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2643,connector.start();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2645,LOG.error("Async start of network connector: {} failed", connector, e);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2650,connector.start();
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/NetworkConnectorProcessor.java,24,import java.util.TreeMap;
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/NetworkConnectorProcessor.java,39,nc.start();
activemq-runtime-config/src/main/java/org/apache/activemq/plugin/java/JavaRuntimeConfigurationBroker.java,107,nc.start();
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,45,private ExecutorService executor;
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,84,if (initDone.compareAndSet(false, true)) {
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,87,if (dedicatedTaskRunner || "true".equalsIgnoreCase(System.getProperty("org.apache.activemq.UseDedicatedTaskRunner"))) {
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,88,executor = null;
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,90,executor = createDefaultExecutor();
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,92,LOG.debug("Initialized TaskRunnerFactory[{}] using ExecutorService: {}", name, executor);
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,104,executor = null;
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,106,initDone.set(false);
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,117,executor = null;
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,119,initDone.set(false);
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,130,executor = null;
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,132,initDone.set(false);
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,201,return executor;
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,205,this.executor = executor;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,184,IntrospectionSupport.setProperties(socket, transportOptions);
activemq-client/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,139,public static boolean setProperties(Object target, Map props) {
activemq-client/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,152,iter.remove();
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,425,subscriptions.put(info.getConsumerId(), sub);
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,299,boolean isActive = destinationStatistics.getConsumers().getCount() != 0 ||
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,300,destinationStatistics.getProducers().getCount() != 0;
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,301,if (isActive && isGcWithNetworkConsumers() && destinationStatistics.getConsumers().getCount() != 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,193,super.removeSubscription(context, sub, lastDeliveredSequenceId);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,195,consumers.remove(sub);
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,269,if (sub.matches(destination)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,270,throw new JMSException("Destination still has an active subscription: " + destination);
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,165,addSubscriptionsForDestination(context, dest);
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,781,if (isGcIfInactive() && this.lastActiveTime != 0l && destinationStatistics.messages.getCount() == 0L ) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,782,if ((System.currentTimeMillis() - this.lastActiveTime) >= getInactiveTimeoutBeforeGC()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1752,LOG.trace("gc candidates after producerSequenceIdTrackerLocation:" + dataFileId + ", " + gcCandidateSet);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1760,LOG.trace("gc candidates after ackMessageFileMapLocation:" + dataFileId + ", " + gcCandidateSet);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1771,LOG.trace("gc candidates after tx range:" + Arrays.asList(inProgressTxRange) + ", " + gcCandidateSet);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2038,LOG.trace("Reserved now file for forwarded acks: {}", forwardsFile);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2051,Location nextLocation = getNextLocationForAckForward(new Location(journalToRead, 0));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2052,while (nextLocation != null && nextLocation.getDataFileId() == journalToRead) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2066,nextLocation = getNextLocationForAckForward(nextLocation);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2096,private Location getNextLocationForAckForward(final Location nextLocation) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2102,location = journal.getNextLocation(nextLocation);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2104,LOG.warn("Failed to load next journal location: {}", e.getMessage());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2106,LOG.debug("Failed to load next journal location", e);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,427,if (writeFile.length() < PAGE_FILE_HEADER_SIZE) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,428,writeFile.setLength(PAGE_FILE_HEADER_SIZE);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,430,nextFreePageId.set((writeFile.length() - PAGE_FILE_HEADER_SIZE) / pageSize);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,237,getSubscriptionStatistics().getDispatched().increment();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1236,long originalMessageCount = this.destinationStatistics.getMessages().getCount();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1237,do {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1238,doPageIn(true, false, getMaxPageSize());  // signal no expiry processing needed.
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1239,pagedInMessagesLock.readLock().lock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1240,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1241,list = new ArrayList<MessageReference>(pagedInMessages.values());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1243,pagedInMessagesLock.readLock().unlock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1246,for (MessageReference ref : list) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1248,QueueMessageReference r = (QueueMessageReference) ref;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1249,removeMessage(c, r);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1257,if (this.destinationStatistics.getMessages().getCount() > 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1258,LOG.warn("{} after purge of {} messages, message count stats report: {}", getActiveMQDestination().getQualifiedName(), originalMessageCount, this.destinationStatistics.getMessages().getCount());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1260,gc();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1261,this.destinationStatistics.getMessages().setCount(0);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1262,getMessages().clear();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,311,if (totalLength.get() > maxFileLength && lastAppendLocation.get().getOffset() > 0) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,312,totalLength.addAndGet(lastAppendLocation.get().getOffset() - maxFileLength);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,151,protected transient Map<Integer, Set<Integer>> ackMessageFileMap = new HashMap<Integer, Set<Integer>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,157,destinations = new BTreeIndex<String, StoredDestination>(pageFile, is.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,320,metadata.destinations = new BTreeIndex<String, StoredDestination>(pageFile, tx.allocate().getPageId());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,471,IOHelper.mkdirs(directory);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,491,if( opened.compareAndSet(true, false)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,580,HashMap<KahaDestination, opCount> destinationOpCount = new HashMap<KahaDestination, opCount>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,623,ArrayList<TranInfo> infos = new ArrayList<TranInfo>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,719,Set<TransactionId> toRollback = new HashSet<TransactionId>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,720,Set<TransactionId> toDiscard = new HashSet<TransactionId>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,827,final ArrayList<Long> matches = new ArrayList<Long>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,894,HashSet<Integer> missingJournalFiles = new HashSet<Integer>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,912,ArrayList<BTreeVisitor.Predicate<Location>> knownCorruption = new ArrayList<BTreeVisitor.Predicate<Location>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,913,ArrayList<BTreeVisitor.Predicate<Location>> missingPredicates = new ArrayList<BTreeVisitor.Predicate<Location>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,927,new BTreeVisitor.BetweenVisitor<Location, Long>(new Location(id, (int) seq.getFirst()), new Location(id, (int) seq.getLast() + 1));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1416,final TreeSet<Integer> completeFileSet = new TreeSet<Integer>(journal.getFileMap().keySet());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1434,private final HashSet<Integer> journalFilesBeingReplicated = new HashSet<Integer>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1591,referenceFileIds = new HashSet<Integer>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1725,final TreeSet<Integer> completeFileSet = new TreeSet<Integer>(journal.getFileMap().keySet());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1726,final TreeSet<Integer> gcCandidateSet = new TreeSet<Integer>(completeFileSet);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1952,Set<Integer> journalLogsReferenced = new HashSet<Integer>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1982,List<Integer> journalFileIds = new ArrayList<Integer>(metadata.ackMessageFileMap.keySet());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2040,Map<Integer, Set<Integer>> updatedAckLocations = new HashMap<Integer, Set<Integer>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2079,referenceFileIds = new HashSet<Integer>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2174,protected final HashMap<String, StoredDestination> storedDestinations = new HashMap<String, StoredDestination>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2283,final TreeMap<Long, Long> messageReferences = new TreeMap<Long, Long>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2284,final HashSet<String> subscriptionCache = new LinkedHashSet<String>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2307,value.orderIndex.defaultPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2308,value.locationIndex = new BTreeIndex<Location, Long>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2309,value.messageIdIndex = new BTreeIndex<String, Long>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2312,value.subscriptions = new BTreeIndex<String, KahaSubscriptionCommand>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2313,value.subscriptionAcks = new BTreeIndex<String, LastAck>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2315,value.ackPositions = new ListIndex<String, SequenceSet>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2321,LinkedHashMap<String, SequenceSet> temp = new LinkedHashMap<String, SequenceSet>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2326,new BTreeIndex<Long, HashSet<String>>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2351,value.ackPositions = new ListIndex<String, SequenceSet>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2364,value.subLocations = new ListIndex<String, Location>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2370,value.subLocations = new ListIndex<String, Location>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2379,value.orderIndex.lowPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2380,value.orderIndex.highPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2386,value.orderIndex.lowPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2391,value.orderIndex.highPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2474,rc.locationIndex = new BTreeIndex<Location, Long>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2475,rc.messageIdIndex = new BTreeIndex<String, Long>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2478,rc.subscriptions = new BTreeIndex<String, KahaSubscriptionCommand>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2479,rc.subscriptionAcks = new BTreeIndex<String, LastAck>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2480,rc.ackPositions = new ListIndex<String, SequenceSet>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2481,rc.subLocations = new ListIndex<String, Location>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2535,rc.subscriptionCursors = new HashMap<String, MessageOrderCursor>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2699,new ConcurrentHashMap<String, MessageStore>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2874,ArrayList<Long> unreferenced = new ArrayList<Long>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2892,ArrayList<Entry<Long, MessageKeys>> deletes = new ArrayList<Entry<Long, MessageKeys>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2944,ArrayList<Entry<Long, MessageKeys>> deletes = new ArrayList<Entry<Long, MessageKeys>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,3004,private final LinkedHashMap<TransactionId, List<Operation>> inflightTransactions = new LinkedHashMap<TransactionId, List<Operation>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,3006,protected final LinkedHashMap<TransactionId, List<Operation>> preparedTransactions = new LinkedHashMap<TransactionId, List<Operation>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,3007,protected final Set<String> ackedAndPrepared = new HashSet<String>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,3008,protected final Set<String> rolledBackAcks = new HashSet<String>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,3489,final List<Long> pendingAdditions = new LinkedList<Long>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,3516,defaultPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,3518,lowPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,3519,highPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,3525,TreeSet<Long> orderedSet = new TreeSet<Long>();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,856,if (e instanceof SecurityException) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,858,delayedStop(2000, "Failed with SecurityException: " + e.getLocalizedMessage(), e);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,144,private boolean starting;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,145,private boolean pendingStop;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,235,if (!stopping.get() && !pendingStop) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,314,if (pendingStop) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,332,if (!pendingStop) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1004,if (pendingStop || stopping.get()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1062,starting = true;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1083,pendingStop = true;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1111,pendingStop = true;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1140,pendingStop = true;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1141,if (starting) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1352,public synchronized boolean isStarting() {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1353,return starting;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1366,protected synchronized void setStarting(boolean starting) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1367,this.starting = starting;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1373,public synchronized boolean isPendingStop() {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1374,return pendingStop;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1377,protected synchronized void setPendingStop(boolean pendingStop) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1378,this.pendingStop = pendingStop;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,39,import java.util.concurrent.atomic.AtomicBoolean;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,133,private final AtomicBoolean started = new AtomicBoolean();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,600,this.subscriptionRecoveryPolicy.start();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,601,if (memoryUsage != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,602,memoryUsage.start();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,605,if (getExpireMessagesPeriod() > 0 && !AdvisorySupport.isAdvisoryTopic(getActiveMQDestination())) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,606,scheduler.executePeriodically(expireMessagesTask, getExpireMessagesPeriod());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,612,if (taskRunner != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,613,taskRunner.shutdown();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,615,this.subscriptionRecoveryPolicy.stop();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,616,if (memoryUsage != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,617,memoryUsage.stop();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,619,if (this.topicStore != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,620,this.topicStore.stop();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,623,scheduler.cancel(expireMessagesTask);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,983,if (currentDataFile.get().getLength() + capacity >= maxFileLength) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,984,rotateWriteFile();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,986,return currentDataFile.get();
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoTcpTransportServer.java,29,import java.util.concurrent.ExecutorService;
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoTcpTransportServer.java,30,import java.util.concurrent.Executors;
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoTcpTransportServer.java,80,protected int protocolDetectionTimeOut = 30000;
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoTcpTransportServer.java,153,service = new ThreadPoolExecutor(maxConnectionThreadPoolSize,
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoTcpTransportServer.java,158,service.allowCoreThreadTimeOut(true);
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoTcpTransportServer.java,171,service.setCorePoolSize(maxConnectionThreadPoolSize);
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoTcpTransportServer.java,172,service.setMaximumPoolSize(maxConnectionThreadPoolSize);
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoTcpTransportServer.java,216,protected final ThreadPoolExecutor service;
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoTcpTransportServer.java,230,service.submit(new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoTcpTransportServer.java,241,ExecutorService executor = Executors.newSingleThreadExecutor();
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoTcpTransportServer.java,246,Future<?> future = executor.submit(new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoTcpTransportServer.java,264,waitForProtocolDetectionFinish(future, readBytes);
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoTcpTransportServer.java,327,if (service != null) {
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoTcpTransportServer.java,328,service.shutdown();
activemq-broker/src/main/java/org/apache/activemq/transport/auto/nio/AutoNIOSSLTransportServer.java,9,import java.util.concurrent.ExecutorService;
activemq-broker/src/main/java/org/apache/activemq/transport/auto/nio/AutoNIOSSLTransportServer.java,10,import java.util.concurrent.Executors;
activemq-broker/src/main/java/org/apache/activemq/transport/auto/nio/AutoNIOSSLTransportServer.java,107,ExecutorService executor = Executors.newSingleThreadExecutor();
activemq-broker/src/main/java/org/apache/activemq/transport/auto/nio/AutoNIOSSLTransportServer.java,117,Future<?> future = executor.submit(new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/transport/auto/nio/AutoNIOSSLTransportServer.java,127,waitForProtocolDetectionFinish(future, in.getReadSize());
activemq-broker/src/main/java/org/apache/activemq/transport/nio/AutoInitNioSSLTransport.java,140,protected void finishHandshake() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/transport/nio/AutoInitNioSSLTransport.java,141,if (handshakeInProgress) {
activemq-broker/src/main/java/org/apache/activemq/transport/nio/AutoInitNioSSLTransport.java,142,handshakeInProgress = false;
activemq-broker/src/main/java/org/apache/activemq/transport/nio/AutoInitNioSSLTransport.java,143,nextFrameSize = -1;
activemq-broker/src/main/java/org/apache/activemq/transport/nio/AutoInitNioSSLTransport.java,148,sslSession = sslEngine.getSession();
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,216,selection = SelectorManager.getInstance().register(channel, new SelectorManager.Listener() {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,218,public void onSelect(SelectorSelection selection) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,219,serviceRead();
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,223,public void onError(SelectorSelection selection, Throwable error) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,224,if (error instanceof IOException) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,225,onException((IOException) error);
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,227,onException(IOExceptionSupport.create(error));
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,128,contextHandler.setHandler(handler);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,96,private long lastUpdated;
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,225,protected void query() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,694,entries.clear();
activemq-broker/src/main/java/org/apache/activemq/plugin/StatisticsBroker.java,123,statsMessage.setLong("averageMessageSize", (long) stats.getMessageSize().getAveragePerSecond());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,938,final ArrayList<Long> matches = new ArrayList<Long>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,942,matches.add(value);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,953,for (Long sequenceId : matches) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,963,LOG.error("[" + sdEntry.getKey() + "] references corrupt locations. " + matches.size() + " messages affected.");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,68,private static final int MAX_BATCH_SIZE = 32*1024*1024;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,556,if (size > MAX_BATCH_SIZE) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1432,private Runnable listener;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1453,this.listener = listener;
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,35,import org.eclipse.jetty.servlets.gzip.GzipHandler;
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,127,Handler handler = new GzipHandler();
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/WSServlet.java,88,getServletContext().getNamedDispatcher("default").forward(request, response);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,23,import java.util.concurrent.atomic.AtomicInteger;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,281,if (ack.isStandardAck() || ack.isPoisonAck() || ack.isIndividualAck()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,282,if (context.isInTransaction()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,283,context.getTransaction().addSynchronization(new Synchronization() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,285,public void afterCommit() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,286,updateStatsOnAck(ack);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,287,dispatchMatched();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,291,updateStatsOnAck(ack);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,293,updatePrefetch(ack);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,294,dispatchMatched();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,295,return;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,298,prefetchExtension.addAndGet(ack.getMessageCount());
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,299,dispatchMatched();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,300,return;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,303,updatePrefetch(ack);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,304,dispatchMatched();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,305,return;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,310,throw new JMSException("Invalid acknowledgment: " + ack);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,403,private void updatePrefetch(MessageAck ack) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,406,int newExtension = Math.max(0, currentExtension - ack.getMessageCount());
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,433,prefetchExtension.get() - getSubscriptionStatistics().getDequeues().getCount());
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,532,return getDispatchedQueueSize() >= info.getPrefetchSize();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,545,return getDispatchedQueueSize() <= (info.getPrefetchSize() * .4);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,553,return getDispatchedQueueSize() >= (info.getPrefetchSize() * .9);
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoSslTransportFactory.java,106,throws IOException {
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoSslTransportFactory.java,110,return super.createTransport(socket, format);
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoTcpTransportFactory.java,91,throws IOException {
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoTcpTransportFactory.java,95,return super.createTransport(socket, format);
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoTcpTransportServer.java,222,public InitBuffer initBuffer;
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoTcpTransportServer.java,268,initBuffer = new InitBuffer(readBytes.get(), ByteBuffer.allocate(readBytes.get()));
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoTcpTransportServer.java,296,protected TcpTransport createTransport(Socket socket, WireFormat format) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoTcpTransportServer.java,297,return new TcpTransport(format, socket, this.initBuffer);
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoTcpTransportServer.java,307,TcpTransportFactory detectedTransportFactory) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoTcpTransportServer.java,308,return createTransport(socket, format);
activemq-broker/src/main/java/org/apache/activemq/transport/auto/nio/AutoNIOSSLTransportServer.java,130,initBuffer = new InitBuffer(in.getReadSize().get(), ByteBuffer.allocate(in.getReadData().length));
activemq-broker/src/main/java/org/apache/activemq/transport/auto/nio/AutoNioTransportFactory.java,63,protected TcpTransport createTransport(Socket socket, WireFormat format, TcpTransportFactory detectedTransportFactory) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/transport/auto/nio/AutoNioTransportFactory.java,66,nioTransport = new AutoNIOTransport(format, socket,this.initBuffer);
activemq-broker/src/main/java/org/apache/activemq/transport/auto/nio/AutoNioTransportFactory.java,69,format, socket, this.initBuffer);
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/memory/InMemoryJobScheduler.java,57,private final TreeMap<Long, ScheduledTask> jobs = new TreeMap<Long, ScheduledTask>();
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/memory/InMemoryJobScheduler.java,60,private final List<JobListener> jobListeners = new CopyOnWriteArrayList<JobListener>();
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/memory/InMemoryJobScheduler.java,168,List<Job> result = new ArrayList<Job>();
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/memory/InMemoryJobScheduler.java,182,final List<Job> result = new ArrayList<Job>();
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/memory/InMemoryJobScheduler.java,197,final List<Job> result = new ArrayList<Job>();
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/memory/InMemoryJobScheduler.java,226,startTime = (startTime / 1000) * 1000;
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/memory/InMemoryJobScheduler.java,372,private final Map<String, InMemoryJob> jobs = new TreeMap<String, InMemoryJob>();
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/memory/InMemoryJobScheduler.java,387,return new ArrayList<InMemoryJob>(jobs.values());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,60,private final List<JobListener> jobListeners = new CopyOnWriteArrayList<JobListener>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,135,final List<Job> result = new ArrayList<Job>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,172,final List<Job> result = new ArrayList<Job>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,201,final List<Job> result = new ArrayList<Job>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,232,startTime = (startTime / 1000) * 1000;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,332,values = new ArrayList<JobLocation>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,410,target = new ArrayList<JobLocation>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,571,List<Long> keys = new ArrayList<Long>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,665,List<JobLocation> references = new ArrayList<JobLocation>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,712,List<JobLocation> list = new ArrayList<JobLocation>(first.getValue());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,713,List<JobLocation> toRemove = new ArrayList<JobLocation>(list.size());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,855,this.index = new BTreeIndex<Long, List<JobLocation>>(this.store.getPageFile(), tx.allocate().getPageId());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,866,this.index = new BTreeIndex<Long, List<JobLocation>>(this.store.getPageFile(), in.readLong());
activemq-http/src/main/java/org/apache/activemq/transport/ws/WSTransportProxy.java,240,session.getRemote().sendString(data);
activemq-http/src/main/java/org/apache/activemq/transport/ws/WSTransportProxy.java,256,session.getRemote().sendBytes(data);
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/MQTTSocket.java,49,session.getRemote().sendBytes(ByteBuffer.wrap(bytes.getData(), 0, bytes.getLength()));
activemq-http/src/main/java/org/apache/activemq/transport/ws/jetty9/StompSocket.java,47,session.getRemote().sendString(command.format());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,208,if (!delivery.remotelySettled()) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,209,sendToActiveMQ(message, new ResponseHandler() {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,212,public void onResponse(AmqpProtocolConverter converter, Response response) throws IOException {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,213,if (response.isException()) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,214,ExceptionResponse error = (ExceptionResponse) response;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,215,Rejected rejected = new Rejected();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,216,ErrorCondition condition = new ErrorCondition();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,218,if (error.getException() instanceof SecurityException) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,219,condition.setCondition(AmqpError.UNAUTHORIZED_ACCESS);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,221,condition.setCondition(AmqpError.RESOURCE_LIMIT_EXCEEDED);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,223,condition.setCondition(Symbol.valueOf("failed"));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,226,condition.setDescription(error.getException().getMessage());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,227,rejected.setError(condition);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,228,delivery.disposition(rejected);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,230,if (getEndpoint().getCredit() <= (getConfiguredReceiverCredit() * .3)) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,231,LOG.debug("Sending more credit ({}) to producer: {}", getConfiguredReceiverCredit() - getEndpoint().getCredit(), getProducerId());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,232,getEndpoint().flow(getConfiguredReceiverCredit() - getEndpoint().getCredit());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,235,if (remoteState != null && remoteState instanceof TransactionalState) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,236,TransactionalState txAccepted = new TransactionalState();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,237,txAccepted.setOutcome(Accepted.getInstance());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,238,txAccepted.setTxnId(((TransactionalState) remoteState).getTxnId());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,240,delivery.disposition(txAccepted);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,242,delivery.disposition(Accepted.getInstance());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,246,delivery.settle();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,247,session.pumpProtonToSocket();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,251,if (getEndpoint().getCredit() <= (getConfiguredReceiverCredit() * .3)) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,252,LOG.debug("Sending more credit ({}) to producer: {}", getConfiguredReceiverCredit() - getEndpoint().getCredit(), getProducerId());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,253,getEndpoint().flow(getConfiguredReceiverCredit() - getEndpoint().getCredit());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,254,session.pumpProtonToSocket();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,258,sendToActiveMQ(message);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,79,private boolean disposed;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,95,private boolean started;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,130,private boolean shuttingDown = false;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,932,return pageFile.tx().execute(new Transaction.CallableClosure<Integer, IOException>() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,934,public Integer execute(Transaction tx) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,939,return 0;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,942,return (int) getStoredMessageSize(tx, sd, subscriptionKey);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,840,if (isReduceMemoryFootprint()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,841,message.clearMarshalledState();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,516,if (isReduceMemoryFootprint()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,517,message.clearMarshalledState();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMapMessage.java,133,public void clearMarshalledState() throws JMSException {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMapMessage.java,134,super.clearMarshalledState();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQObjectMessage.java,227,public void clearMarshalledState() throws JMSException {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQObjectMessage.java,228,super.clearMarshalledState();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,156,public void clearMarshalledState() throws JMSException {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,157,super.clearMarshalledState();
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,649,staticDestinationsLatch.await();
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,650,BrokerSubscriptionInfo subInfo = (BrokerSubscriptionInfo) command;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,651,LOG.debug("Received Remote BrokerSubscriptionInfo on {} from {}",
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,652,this.brokerService.getBrokerName(), subInfo.getBrokerName());
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,656,if (started.get()) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,665,for (Iterator<DemandSubscription> i = subscriptionMapByLocalId.values().iterator(); i.hasNext(); ) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,666,DemandSubscription ds = i.next();
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,668,cleanupDurableSub(ds, i);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,248,md.setRedeliveryCounter(md.getRedeliveryCounter() + 1);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,249,LOG.trace("onDelivery: Rejected state = {}, delivery count now {}", state, md.getRedeliveryCounter());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,250,settle(delivery, -1);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,40,import javax.jms.Destination;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,47,import javax.jms.Queue;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,49,import javax.jms.TemporaryQueue;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,50,import javax.jms.TemporaryTopic;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,52,import javax.jms.Topic;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,384,private static byte destinationType(Destination destination) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,385,if (destination instanceof Queue) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,386,if (destination instanceof TemporaryQueue) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,392,if (destination instanceof TemporaryTopic) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpAbstractReceiver.java,81,public void commit() throws Exception {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpAbstractReceiver.java,85,public void rollback() throws Exception {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpLink.java,65,void commit() throws Exception;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpLink.java,73,void rollback() throws Exception;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,78,private final LinkedList<MessageDispatch> dispatchedInTx = new LinkedList<MessageDispatch>();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,232,txAccepted.setTxnId(((TransactionalState) state).getTxnId());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,236,settle(delivery, MessageAck.DELIVERED_ACK_TYPE);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,277,public void commit() throws Exception {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,279,for (MessageDispatch md : dispatchedInTx) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,280,MessageAck pendingTxAck = new MessageAck(md, MessageAck.INDIVIDUAL_ACK_TYPE, 1);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,281,pendingTxAck.setFirstMessageId(md.getMessage().getMessageId());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,282,pendingTxAck.setTransactionId(md.getMessage().getTransactionId());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,304,public void rollback() throws Exception {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,309,for (MessageDispatch dispatch : dispatchedInTx) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,310,dispatch.setRedeliveryCounter(dispatch.getRedeliveryCounter() + 1);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,312,outbound.addFirst(dispatch);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,496,DeliveryState remoteState = delivery.getRemoteState();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,497,if (remoteState != null && remoteState instanceof TransactionalState) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,498,TransactionalState txState = (TransactionalState) remoteState;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,499,TransactionId txId = new LocalTransactionId(session.getConnection().getConnectionId(), toLong(txState.getTxnId()));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,500,ack.setTransactionId(txId);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,503,session.enlist(txId);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,504,md.getMessage().setTransactionId(txId);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,505,dispatchedInTx.addFirst(md);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSession.java,128,public void commit() throws Exception {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSession.java,130,consumer.commit();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSession.java,141,public void rollback() throws Exception {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSession.java,143,consumer.rollback();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpTransactionCoordinator.java,101,LOG.trace("started transaction {}", txId.getValue());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpTransactionCoordinator.java,113,LOG.trace("rollback transaction {}", txId.getValue());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpTransactionCoordinator.java,116,LOG.trace("commit transaction {}", txId.getValue());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpTransactionCoordinator.java,122,txSession.rollback();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpTransactionCoordinator.java,124,txSession.commit();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeInboundTransformer.java,19,import javax.jms.Message;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeInboundTransformer.java,23,public AMQPNativeInboundTransformer(ActiveMQJMSVendor vendor) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeInboundTransformer.java,24,super(vendor);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeInboundTransformer.java,34,return new AMQPRawInboundTransformer(getVendor());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeInboundTransformer.java,38,protected Message doTransform(EncodedMessage amqpMessage) throws Exception {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeInboundTransformer.java,41,Message result = super.doTransform(amqpMessage);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,19,import java.nio.ByteBuffer;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,21,import javax.jms.BytesMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,23,import javax.jms.Message;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,28,import org.apache.qpid.proton.codec.CompositeWritableBuffer;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,29,import org.apache.qpid.proton.codec.DroppingWritableBuffer;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,30,import org.apache.qpid.proton.codec.WritableBuffer;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,33,public class AMQPNativeOutboundTransformer extends OutboundTransformer {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,35,public AMQPNativeOutboundTransformer(ActiveMQJMSVendor vendor) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,36,super(vendor);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,40,public EncodedMessage transform(Message msg) throws Exception {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,41,if (msg == null || !(msg instanceof BytesMessage)) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,42,return null;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,45,try {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,46,if (!msg.getBooleanProperty(prefixVendor + "NATIVE")) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,47,return null;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,53,return transform(this, (BytesMessage) msg);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,56,static EncodedMessage transform(OutboundTransformer options, BytesMessage msg) throws JMSException {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,59,messageFormat = msg.getLongProperty(options.prefixVendor + "MESSAGE_FORMAT");
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,63,byte data[] = new byte[(int) msg.getBodyLength()];
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,64,int dataSize = data.length;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,65,msg.readBytes(data);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,66,msg.reset();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,68,try {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,69,int count = msg.getIntProperty("JMSXDeliveryCount");
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,70,if (count > 1) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,73,ProtonJMessage amqp = (ProtonJMessage) org.apache.qpid.proton.message.Message.Factory.create();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,74,int offset = 0;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,75,int len = data.length;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,76,while (len > 0) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,77,final int decoded = amqp.decode(data, offset, len);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,78,assert decoded > 0 : "Make progress decoding the message";
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,79,offset += decoded;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,80,len -= decoded;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,86,if (amqp.getHeader() == null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,87,amqp.setHeader(new Header());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,90,amqp.getHeader().setDeliveryCount(new UnsignedInteger(count - 1));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,93,ByteBuffer buffer = ByteBuffer.wrap(new byte[1024 * 4]);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,94,final DroppingWritableBuffer overflow = new DroppingWritableBuffer();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,95,int c = amqp.encode(new CompositeWritableBuffer(new WritableBuffer.ByteBufferWrapper(buffer), overflow));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,96,if (overflow.position() > 0) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,97,buffer = ByteBuffer.wrap(new byte[1024 * 4 + overflow.position()]);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,98,c = amqp.encode(new WritableBuffer.ByteBufferWrapper(buffer));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,100,data = buffer.array();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,101,dataSize = c;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,106,return new EncodedMessage(messageFormat, data, 0, dataSize);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPRawInboundTransformer.java,19,import javax.jms.BytesMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPRawInboundTransformer.java,20,import javax.jms.DeliveryMode;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPRawInboundTransformer.java,23,public class AMQPRawInboundTransformer extends InboundTransformer {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPRawInboundTransformer.java,25,public AMQPRawInboundTransformer(ActiveMQJMSVendor vendor) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPRawInboundTransformer.java,26,super(vendor);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPRawInboundTransformer.java,40,protected Message doTransform(EncodedMessage amqpMessage) throws Exception {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPRawInboundTransformer.java,41,BytesMessage result = vendor.createBytesMessage(amqpMessage.getArray(), amqpMessage.getArrayOffset(), amqpMessage.getLength());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPRawInboundTransformer.java,45,result.setJMSDeliveryMode(DeliveryMode.PERSISTENT);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPRawInboundTransformer.java,46,result.setJMSPriority(defaultPriority);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPRawInboundTransformer.java,49,result.setJMSTimestamp(now);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPRawInboundTransformer.java,50,if (defaultTtl > 0) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPRawInboundTransformer.java,51,result.setJMSExpiration(now + defaultTtl);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPRawInboundTransformer.java,54,result.setLongProperty(prefixVendor + "MESSAGE_FORMAT", amqpMessage.getMessageFormat());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPRawInboundTransformer.java,55,result.setBooleanProperty(prefixVendor + "NATIVE", true);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,17,package org.apache.activemq.transport.amqp.message;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,19,import java.io.DataInputStream;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,20,import java.util.HashMap;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,21,import java.util.Map;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,22,import java.util.Set;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,23,import java.util.zip.InflaterInputStream;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,25,import javax.jms.BytesMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,26,import javax.jms.Destination;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,27,import javax.jms.JMSException;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,28,import javax.jms.MapMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,29,import javax.jms.Message;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,30,import javax.jms.MessageNotWriteableException;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,31,import javax.jms.ObjectMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,32,import javax.jms.StreamMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,33,import javax.jms.TextMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,35,import org.apache.activemq.command.ActiveMQBytesMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,36,import org.apache.activemq.command.ActiveMQDestination;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,37,import org.apache.activemq.command.ActiveMQMapMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,38,import org.apache.activemq.command.ActiveMQMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,39,import org.apache.activemq.command.ActiveMQObjectMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,40,import org.apache.activemq.command.ActiveMQStreamMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,41,import org.apache.activemq.command.ActiveMQTextMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,42,import org.apache.activemq.command.MessageId;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,43,import org.apache.activemq.transport.amqp.AmqpProtocolException;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,44,import org.apache.activemq.util.ByteArrayInputStream;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,45,import org.apache.activemq.util.ByteArrayOutputStream;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,46,import org.apache.activemq.util.ByteSequence;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,47,import org.apache.activemq.util.JMSExceptionSupport;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,48,import org.apache.qpid.proton.amqp.Binary;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,50,public class ActiveMQJMSVendor {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,52,final public static ActiveMQJMSVendor INSTANCE = new ActiveMQJMSVendor();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,54,private ActiveMQJMSVendor() {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,60,public Message createMessage() {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,61,return new ActiveMQMessage();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,67,public BytesMessage createBytesMessage() {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,68,return new ActiveMQBytesMessage();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,74,public BytesMessage createBytesMessage(byte[] content, int offset, int length) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,75,ActiveMQBytesMessage message = new ActiveMQBytesMessage();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,76,message.setContent(new ByteSequence(content, offset, length));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,77,return message;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,83,public StreamMessage createStreamMessage() {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,84,return new ActiveMQStreamMessage();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,90,public TextMessage createTextMessage() {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,91,return new ActiveMQTextMessage();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,97,public TextMessage createTextMessage(String text) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,98,ActiveMQTextMessage message = new ActiveMQTextMessage();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,99,try {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,100,message.setText(text);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,103,return message;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,109,public ObjectMessage createObjectMessage() {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,110,return new ActiveMQObjectMessage();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,116,public ObjectMessage createObjectMessage(byte[] content, int offset, int length) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,117,ActiveMQObjectMessage message = new ActiveMQObjectMessage();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,118,message.setContent(new ByteSequence(content, offset, length));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,119,return message;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,125,public MapMessage createMapMessage() {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,126,return new ActiveMQMapMessage();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,132,public MapMessage createMapMessage(Map<String, Object> content) throws JMSException {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,133,ActiveMQMapMessage message = new ActiveMQMapMessage();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,134,final Set<Map.Entry<String, Object>> set = content.entrySet();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,135,for (Map.Entry<String, Object> entry : set) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,136,message.setObject(entry.getKey(), entry.getValue());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,138,return message;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,149,public Destination createDestination(String name) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,150,return ActiveMQDestination.createDestination(name, ActiveMQDestination.QUEUE_TYPE);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,161,public void setJMSXUserID(Message msg, String value) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,162,((ActiveMQMessage) msg).setUserID(value);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,173,public void setJMSXGroupID(Message msg, String value) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,174,((ActiveMQMessage) msg).setGroupID(value);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,185,public void setJMSXGroupSequence(Message msg, int value) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,186,((ActiveMQMessage) msg).setGroupSequence(value);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,197,public void setJMSXDeliveryCount(Message msg, long value) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,198,((ActiveMQMessage) msg).setRedeliveryCounter((int) value);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,210,public String toAddress(Destination dest) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,211,return ((ActiveMQDestination) dest).getQualifiedName();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,225,public Object getOriginalMessageId(Message message) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,226,Object result;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,227,MessageId msgId = ((ActiveMQMessage)message).getMessageId();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,228,if (msgId.getTextView() != null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,229,try {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,230,result = AMQPMessageIdHelper.INSTANCE.toIdObject(msgId.getTextView());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,232,result = msgId.getTextView().toString();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,235,result = msgId.toString();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,238,return result;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,251,public Binary getBinaryFromMessageBody(BytesMessage message) throws JMSException {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,252,ActiveMQBytesMessage bytesMessage = (ActiveMQBytesMessage) message;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,253,Binary result = null;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,255,if (bytesMessage.getContent() != null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,256,ByteSequence contents = bytesMessage.getContent();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,258,if (bytesMessage.isCompressed()) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,259,int length = (int) bytesMessage.getBodyLength();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,260,byte[] uncompressed = new byte[length];
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,261,bytesMessage.readBytes(uncompressed);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,263,result = new Binary(uncompressed);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,265,return new Binary(contents.getData(), contents.getOffset(), contents.getLength());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,269,return result;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,282,public Binary getBinaryFromMessageBody(ObjectMessage message) throws JMSException {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,283,ActiveMQObjectMessage objectMessage = (ActiveMQObjectMessage) message;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,284,Binary result = null;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,286,if (objectMessage.getContent() != null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,287,ByteSequence contents = objectMessage.getContent();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,289,if (objectMessage.isCompressed()) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,290,try (ByteArrayOutputStream os = new ByteArrayOutputStream();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,291,ByteArrayInputStream is = new ByteArrayInputStream(contents);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,292,InflaterInputStream iis = new InflaterInputStream(is);) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,294,byte value;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,295,while ((value = (byte) iis.read()) != -1) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,296,os.write(value);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,299,ByteSequence expanded = os.toByteSequence();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,300,result = new Binary(expanded.getData(), expanded.getOffset(), expanded.getLength());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,302,throw JMSExceptionSupport.create(cause);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,305,return new Binary(contents.getData(), contents.getOffset(), contents.getLength());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,309,return result;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,322,public Binary getBinaryFromMessageBody(TextMessage message) throws JMSException {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,323,ActiveMQTextMessage textMessage = (ActiveMQTextMessage) message;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,324,Binary result = null;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,326,if (textMessage.getContent() != null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,327,ByteSequence contents = textMessage.getContent();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,329,if (textMessage.isCompressed()) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,330,try (ByteArrayInputStream is = new ByteArrayInputStream(contents);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,331,InflaterInputStream iis = new InflaterInputStream(is);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,332,DataInputStream dis = new DataInputStream(iis);) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,334,int size = dis.readInt();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,335,byte[] uncompressed = new byte[size];
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,336,dis.readFully(uncompressed);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,338,result = new Binary(uncompressed);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,340,throw JMSExceptionSupport.create(cause);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,344,result = new Binary(contents.getData(), contents.getOffset() + 4, contents.getLength() - 4);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,348,return result;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,361,public Map<String, Object> getMapFromMessageBody(MapMessage message) throws JMSException {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,362,final HashMap<String, Object> map = new HashMap<String, Object>();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,363,final ActiveMQMapMessage mapMessage = (ActiveMQMapMessage) message;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,365,final Map<String, Object> contentMap = mapMessage.getContentMap();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,366,if (contentMap != null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,367,map.putAll(contentMap);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,370,return contentMap;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,386,public void setMessageProperty(Message message, String key, Object value) throws JMSException {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,387,final ActiveMQMessage amqMessage = (ActiveMQMessage) message;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,389,boolean oldValue = amqMessage.isReadOnlyProperties();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,391,amqMessage.setReadOnlyProperties(false);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,392,amqMessage.setObjectProperty(key, value);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/ActiveMQJMSVendor.java,393,amqMessage.setReadOnlyProperties(oldValue);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AmqpMessageSupport.java,19,import java.io.ByteArrayOutputStream;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AmqpMessageSupport.java,41,public static final String AMQP_ORIGINAL_ENCODING_KEY = "JMS_AMQP_ORIGINAL_ENCODING";
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AutoOutboundTransformer.java,19,import javax.jms.BytesMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AutoOutboundTransformer.java,20,import javax.jms.Message;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AutoOutboundTransformer.java,22,public class AutoOutboundTransformer extends JMSMappingOutboundTransformer {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AutoOutboundTransformer.java,24,private final JMSMappingOutboundTransformer transformer;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AutoOutboundTransformer.java,26,public AutoOutboundTransformer(ActiveMQJMSVendor vendor) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AutoOutboundTransformer.java,27,super(vendor);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AutoOutboundTransformer.java,29,transformer = new JMSMappingOutboundTransformer(vendor);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AutoOutboundTransformer.java,33,public EncodedMessage transform(Message msg) throws Exception {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AutoOutboundTransformer.java,34,if (msg == null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AutoOutboundTransformer.java,38,if (msg.getBooleanProperty(prefixVendor + "NATIVE")) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AutoOutboundTransformer.java,39,if (msg instanceof BytesMessage) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AutoOutboundTransformer.java,40,return AMQPNativeOutboundTransformer.transform(this, (BytesMessage) msg);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AutoOutboundTransformer.java,45,return transformer.transform(msg);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,22,import javax.jms.DeliveryMode;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,45,protected final ActiveMQJMSVendor vendor;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,51,protected String prefixVendor = "JMS_AMQP_";
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,52,protected String prefixDeliveryAnnotations = "DA_";
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,53,protected String prefixMessageAnnotations = "MA_";
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,54,protected String prefixFooter = "FT_";
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,56,protected int defaultDeliveryMode = javax.jms.DeliveryMode.NON_PERSISTENT;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,57,protected int defaultPriority = javax.jms.Message.DEFAULT_PRIORITY;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,58,protected long defaultTtl = javax.jms.Message.DEFAULT_TIME_TO_LIVE;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,60,public InboundTransformer(ActiveMQJMSVendor vendor) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,61,this.vendor = vendor;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,68,public final Message transform(EncodedMessage amqpMessage) throws Exception {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,70,Message message = null;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,88,protected abstract Message doTransform(EncodedMessage amqpMessage) throws Exception;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,90,public int getDefaultDeliveryMode() {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,91,return defaultDeliveryMode;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,94,public void setDefaultDeliveryMode(int defaultDeliveryMode) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,95,this.defaultDeliveryMode = defaultDeliveryMode;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,98,public int getDefaultPriority() {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,99,return defaultPriority;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,102,public void setDefaultPriority(int defaultPriority) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,103,this.defaultPriority = defaultPriority;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,106,public long getDefaultTtl() {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,107,return defaultTtl;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,110,public void setDefaultTtl(long defaultTtl) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,111,this.defaultTtl = defaultTtl;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,114,public String getPrefixVendor() {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,115,return prefixVendor;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,118,public void setPrefixVendor(String prefixVendor) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,119,this.prefixVendor = prefixVendor;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,122,public ActiveMQJMSVendor getVendor() {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,123,return vendor;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,127,protected void populateMessage(Message jms, org.apache.qpid.proton.message.Message amqp) throws Exception {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,129,if (header == null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,130,header = new Header();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,133,if (header.getDurable() != null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,134,jms.setJMSDeliveryMode(header.getDurable().booleanValue() ? DeliveryMode.PERSISTENT : DeliveryMode.NON_PERSISTENT);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,136,jms.setJMSDeliveryMode(defaultDeliveryMode);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,139,if (header.getPriority() != null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,140,jms.setJMSPriority(header.getPriority().intValue());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,142,jms.setJMSPriority(defaultPriority);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,145,if (header.getFirstAcquirer() != null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,146,jms.setBooleanProperty(prefixVendor + "FirstAcquirer", header.getFirstAcquirer());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,149,if (header.getDeliveryCount() != null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,150,vendor.setJMSXDeliveryCount(jms, header.getDeliveryCount().longValue());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,157,if ("x-opt-jms-type".equals(key) && entry.getValue() != null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,159,jms.setJMSType(entry.getValue().toString());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,188,setProperty(jms, prefixVendor + prefixMessageAnnotations + key, entry.getValue());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,195,String key = entry.getKey().toString();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,196,if ("JMSXGroupID".equals(key)) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,197,vendor.setJMSXGroupID(jms, entry.getValue().toString());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,199,vendor.setJMSXGroupSequence(jms, ((Number) entry.getValue()).intValue());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,201,vendor.setJMSXUserID(jms, entry.getValue().toString());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,203,setProperty(jms, key, entry.getValue());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,215,vendor.setJMSXUserID(jms, new String(userId.getArray(), userId.getArrayOffset(), userId.getLength(), "UTF-8"));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,218,jms.setJMSDestination(vendor.createDestination(properties.getTo()));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,221,jms.setJMSType(properties.getSubject());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,224,jms.setJMSReplyTo(vendor.createDestination(properties.getReplyTo()));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,227,jms.setJMSCorrelationID(AMQPMessageIdHelper.INSTANCE.toBaseMessageIdString(properties.getCorrelationId()));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,230,jms.setStringProperty(prefixVendor + "ContentType", properties.getContentType().toString());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,233,jms.setStringProperty(prefixVendor + "ContentEncoding", properties.getContentEncoding().toString());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,236,jms.setJMSTimestamp(properties.getCreationTime().getTime());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,239,vendor.setJMSXGroupID(jms, properties.getGroupId());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,242,vendor.setJMSXGroupSequence(jms, properties.getGroupSequence().intValue());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,245,jms.setStringProperty(prefixVendor + "ReplyToGroupID", properties.getReplyToGroupId());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,248,jms.setJMSExpiration(properties.getAbsoluteExpiryTime().getTime());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,253,if (jms.getJMSExpiration() == 0) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,255,long ttl = defaultTtl;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,260,if (ttl == 0) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,261,jms.setJMSExpiration(0);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,263,jms.setJMSExpiration(System.currentTimeMillis() + ttl);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/InboundTransformer.java,271,setProperty(jms, prefixVendor + prefixFooter + key, entry.getValue());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,21,import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.AMQP_ORIGINAL_ENCODING_KEY;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,41,import javax.jms.StreamMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,53,public JMSMappingInboundTransformer(ActiveMQJMSVendor vendor) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,54,super(vendor);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,64,return new AMQPNativeInboundTransformer(getVendor());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,68,protected javax.jms.Message doTransform(EncodedMessage amqpMessage) throws Exception {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,71,javax.jms.Message result = createMessage(amqp, amqpMessage);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,73,result.setJMSDeliveryMode(defaultDeliveryMode);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,74,result.setJMSPriority(defaultPriority);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,75,result.setJMSExpiration(defaultTtl);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,79,result.setLongProperty(prefixVendor + "MESSAGE_FORMAT", amqpMessage.getMessageFormat());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,80,result.setBooleanProperty(prefixVendor + "NATIVE", false);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,86,private javax.jms.Message createMessage(Message message, EncodedMessage original) throws Exception {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,89,javax.jms.Message result;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,93,result = vendor.createObjectMessage();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,95,result = vendor.createBytesMessage();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,99,result = vendor.createTextMessage();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,101,result = vendor.createMessage();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,105,result.setShortProperty(AMQP_ORIGINAL_ENCODING_KEY, AMQP_NULL);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,110,result = vendor.createObjectMessage(payload.getArray(), payload.getArrayOffset(), payload.getLength());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,112,result = vendor.createBytesMessage(payload.getArray(), payload.getArrayOffset(), payload.getLength());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,120,result = vendor.createTextMessage(String.valueOf(chars));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,122,result = vendor.createBytesMessage(payload.getArray(), payload.getArrayOffset(), payload.getLength());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,125,result = vendor.createBytesMessage(payload.getArray(), payload.getArrayOffset(), payload.getLength());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,129,result.setShortProperty(AMQP_ORIGINAL_ENCODING_KEY, AMQP_DATA);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,132,StreamMessage m = vendor.createStreamMessage();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,138,result.setShortProperty(AMQP_ORIGINAL_ENCODING_KEY, AMQP_SEQUENCE);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,142,result = vendor.createTextMessage((String) value);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,144,result.setShortProperty(AMQP_ORIGINAL_ENCODING_KEY, value == null ? AMQP_VALUE_NULL : AMQP_VALUE_STRING);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,149,result = vendor.createObjectMessage(payload.getArray(), payload.getArrayOffset(), payload.getLength());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,151,result = vendor.createBytesMessage(payload.getArray(), payload.getArrayOffset(), payload.getLength());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,154,result.setShortProperty(AMQP_ORIGINAL_ENCODING_KEY, AMQP_VALUE_BINARY);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,156,StreamMessage m = vendor.createStreamMessage();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,161,result.setShortProperty(AMQP_ORIGINAL_ENCODING_KEY, AMQP_VALUE_LIST);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,163,result = vendor.createMapMessage((Map<String, Object>) value);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingInboundTransformer.java,164,result.setShortProperty(AMQP_ORIGINAL_ENCODING_KEY, AMQP_VALUE_MAP);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,21,import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.AMQP_ORIGINAL_ENCODING_KEY;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,30,import java.io.UnsupportedEncodingException;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,31,import java.nio.ByteBuffer;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,34,import java.util.Enumeration;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,38,import javax.jms.BytesMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,39,import javax.jms.DeliveryMode;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,42,import javax.jms.MapMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,45,import javax.jms.MessageFormatException;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,46,import javax.jms.ObjectMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,48,import javax.jms.StreamMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,69,import org.apache.qpid.proton.codec.CompositeWritableBuffer;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,70,import org.apache.qpid.proton.codec.DroppingWritableBuffer;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,71,import org.apache.qpid.proton.codec.WritableBuffer;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,72,import org.apache.qpid.proton.message.ProtonJMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,74,public class JMSMappingOutboundTransformer extends OutboundTransformer {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,86,public static final Symbol LEGACY_JMS_DEST_TYPE_MSG_ANNOTATION = Symbol.valueOf("x-opt-to-type");
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,87,public static final Symbol LEGACY_JMS_REPLY_TO_TYPE_MSG_ANNOTATION = Symbol.valueOf("x-opt-reply-type");
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,89,public static final String LEGACY_QUEUE_TYPE = "queue";
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,90,public static final String LEGACY_TOPIC_TYPE = "topic";
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,91,public static final String LEGACY_TEMP_QUEUE_TYPE = "temporary,queue";
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,92,public static final String LEGACY_TEMP_TOPIC_TYPE = "temporary,topic";
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,94,public JMSMappingOutboundTransformer(ActiveMQJMSVendor vendor) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,95,super(vendor);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,99,public EncodedMessage transform(Message msg) throws Exception {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,100,if (msg == null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,101,return null;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,104,try {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,105,if (msg.getBooleanProperty(prefixVendor + "NATIVE")) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,106,return null;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,111,ProtonJMessage amqp = convert(msg);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,113,long messageFormat;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,114,try {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,115,messageFormat = msg.getLongProperty(this.messageFormatKey);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,117,return null;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,120,ByteBuffer buffer = ByteBuffer.wrap(new byte[1024 * 4]);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,121,final DroppingWritableBuffer overflow = new DroppingWritableBuffer();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,122,int c = amqp.encode(new CompositeWritableBuffer(new WritableBuffer.ByteBufferWrapper(buffer), overflow));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,123,if (overflow.position() > 0) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,124,buffer = ByteBuffer.wrap(new byte[1024 * 4 + overflow.position()]);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,125,c = amqp.encode(new WritableBuffer.ByteBufferWrapper(buffer));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,128,return new EncodedMessage(messageFormat, buffer.array(), 0, c);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,143,public ProtonJMessage convert(Message message) throws JMSException, UnsupportedEncodingException {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,144,Header header = new Header();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,145,Properties props = new Properties();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,151,Section body = null;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,153,body = convertBody(message);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,155,header.setDurable(message.getJMSDeliveryMode() == DeliveryMode.PERSISTENT ? true : false);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,156,header.setPriority(new UnsignedByte((byte) message.getJMSPriority()));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,157,if (message.getJMSType() != null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,158,props.setSubject(message.getJMSType());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,160,if (message.getJMSMessageID() != null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,161,props.setMessageId(vendor.getOriginalMessageId(message));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,163,if (message.getJMSDestination() != null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,164,props.setTo(vendor.toAddress(message.getJMSDestination()));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,168,maMap.put(JMS_DEST_TYPE_MSG_ANNOTATION, destinationType(message.getJMSDestination()));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,171,maMap.put(LEGACY_JMS_DEST_TYPE_MSG_ANNOTATION, destinationAttributes(message.getJMSDestination()));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,173,if (message.getJMSReplyTo() != null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,174,props.setReplyTo(vendor.toAddress(message.getJMSReplyTo()));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,178,maMap.put(JMS_REPLY_TO_TYPE_MSG_ANNOTATION, destinationType(message.getJMSReplyTo()));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,181,maMap.put(LEGACY_JMS_REPLY_TO_TYPE_MSG_ANNOTATION, destinationAttributes(message.getJMSReplyTo()));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,183,if (message.getJMSCorrelationID() != null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,184,String correlationId = message.getJMSCorrelationID();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,186,props.setCorrelationId(AMQPMessageIdHelper.INSTANCE.toIdObject(correlationId));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,188,props.setCorrelationId(correlationId);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,191,if (message.getJMSExpiration() != 0) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,192,long ttl = message.getJMSExpiration() - System.currentTimeMillis();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,198,props.setAbsoluteExpiryTime(new Date(message.getJMSExpiration()));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,200,if (message.getJMSTimestamp() != 0) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,201,props.setCreationTime(new Date(message.getJMSTimestamp()));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,205,final Enumeration<String> keys = message.getPropertyNames();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,207,while (keys.hasMoreElements()) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,208,String key = keys.nextElement();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,209,if (key.equals(messageFormatKey) || key.equals(nativeKey) || key.equals(AMQP_ORIGINAL_ENCODING_KEY)) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,212,header.setFirstAcquirer(message.getBooleanProperty(key));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,216,int amqpDeliveryCount = message.getIntProperty(key) - 1;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,217,if (amqpDeliveryCount > 0) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,218,header.setDeliveryCount(new UnsignedInteger(amqpDeliveryCount));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,221,String value = message.getStringProperty(key);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,222,props.setUserId(new Binary(value.getBytes("UTF-8")));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,224,String value = message.getStringProperty(key);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,225,props.setGroupId(value);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,226,if (apMap == null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,227,apMap = new HashMap<String, Object>();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,229,apMap.put(key, value);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,231,UnsignedInteger value = new UnsignedInteger(message.getIntProperty(key));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,232,props.setGroupSequence(value);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,233,if (apMap == null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,234,apMap = new HashMap<String, Object>();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,236,apMap.put(key, value);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,238,if (daMap == null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,239,daMap = new HashMap<Symbol, Object>();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,241,String name = key.substring(prefixDeliveryAnnotationsKey.length());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,242,daMap.put(Symbol.valueOf(name), message.getObjectProperty(key));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,244,if (maMap == null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,245,maMap = new HashMap<Symbol, Object>();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,247,String name = key.substring(prefixMessageAnnotationsKey.length());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,248,maMap.put(Symbol.valueOf(name), message.getObjectProperty(key));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,250,props.setContentType(Symbol.getSymbol(message.getStringProperty(key)));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,252,props.setContentEncoding(Symbol.getSymbol(message.getStringProperty(key)));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,254,props.setReplyToGroupId(message.getStringProperty(key));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,256,if (footerMap == null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,257,footerMap = new HashMap<Object, Object>();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,259,String name = key.substring(prefixFooterKey.length());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,260,footerMap.put(name, message.getObjectProperty(key));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,262,if (apMap == null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,263,apMap = new HashMap<String, Object>();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,265,apMap.put(key, message.getObjectProperty(key));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,269,MessageAnnotations ma = null;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,270,if (maMap != null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,271,ma = new MessageAnnotations(maMap);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,273,DeliveryAnnotations da = null;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,275,da = new DeliveryAnnotations(daMap);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,277,ApplicationProperties ap = null;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,279,ap = new ApplicationProperties(apMap);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,281,Footer footer = null;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,283,footer = new Footer(footerMap);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,286,return (ProtonJMessage) org.apache.qpid.proton.message.Message.Factory.create(header, da, ma, props, ap, body, footer);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,289,private Section convertBody(Message message) throws JMSException {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,294,if (message.propertyExists(AMQP_ORIGINAL_ENCODING_KEY)) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,295,try {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,296,orignalEncoding = message.getShortProperty(AMQP_ORIGINAL_ENCODING_KEY);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,301,if (message instanceof BytesMessage) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,302,Binary payload = vendor.getBinaryFromMessageBody((BytesMessage) message);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,325,body = new Data(vendor.getBinaryFromMessageBody((TextMessage) message));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,334,body = new AmqpValue(vendor.getMapFromMessageBody((MapMessage) message));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,337,final StreamMessage m = (StreamMessage) message;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,356,Binary payload = vendor.getBinaryFromMessageBody((ObjectMessage) message);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,376,if (!message.propertyExists(contentTypeKey)) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,377,vendor.setMessageProperty(message, contentTypeKey, SERIALIZED_JAVA_OBJECT_CONTENT_TYPE);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,404,private static String destinationAttributes(Destination destination) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,405,if (destination instanceof Queue) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,406,if (destination instanceof TemporaryQueue) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,407,return LEGACY_TEMP_QUEUE_TYPE;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,409,return LEGACY_QUEUE_TYPE;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,412,if (destination instanceof TemporaryTopic) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,413,return LEGACY_TEMP_TOPIC_TYPE;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,415,return LEGACY_TOPIC_TYPE;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,419,throw new IllegalArgumentException("Unknown Destination Type passed to JMS Transformer.");
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,19,import javax.jms.Message;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,21,public abstract class OutboundTransformer {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,23,protected final ActiveMQJMSVendor vendor;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,25,protected String prefixVendor;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,27,protected String prefixDeliveryAnnotations = "DA_";
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,28,protected String prefixMessageAnnotations= "MA_";
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,29,protected String prefixFooter = "FT_";
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,31,protected String messageFormatKey;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,32,protected String nativeKey;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,33,protected String firstAcquirerKey;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,34,protected String prefixDeliveryAnnotationsKey;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,35,protected String prefixMessageAnnotationsKey;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,36,protected String contentTypeKey;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,37,protected String contentEncodingKey;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,38,protected String replyToGroupIDKey;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,39,protected String prefixFooterKey;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,41,public OutboundTransformer(ActiveMQJMSVendor vendor) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,42,this.vendor = vendor;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,43,this.setPrefixVendor("JMS_AMQP_");
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,46,public abstract EncodedMessage transform(Message jms) throws Exception;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,48,public String getPrefixVendor() {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,49,return prefixVendor;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,52,public void setPrefixVendor(String prefixVendor) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,53,this.prefixVendor = prefixVendor;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,55,messageFormatKey = prefixVendor + "MESSAGE_FORMAT";
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,56,nativeKey = prefixVendor + "NATIVE";
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,57,firstAcquirerKey = prefixVendor + "FirstAcquirer";
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,58,prefixDeliveryAnnotationsKey = prefixVendor + prefixDeliveryAnnotations;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,59,prefixMessageAnnotationsKey = prefixVendor + prefixMessageAnnotations;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,60,contentTypeKey = prefixVendor + "ContentType";
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,61,contentEncodingKey = prefixVendor + "ContentEncoding";
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,62,replyToGroupIDKey = prefixVendor + "ReplyToGroupID";
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,63,prefixFooterKey = prefixVendor + prefixFooter;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,66,public ActiveMQJMSVendor getVendor() {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/OutboundTransformer.java,67,return vendor;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,40,import org.apache.activemq.transport.amqp.message.ActiveMQJMSVendor;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,141,inboundTransformer = new JMSMappingInboundTransformer(ActiveMQJMSVendor.INSTANCE);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,143,inboundTransformer = new AMQPNativeInboundTransformer(ActiveMQJMSVendor.INSTANCE);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,145,inboundTransformer = new AMQPRawInboundTransformer(ActiveMQJMSVendor.INSTANCE);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,148,inboundTransformer = new AMQPNativeInboundTransformer(ActiveMQJMSVendor.INSTANCE);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpReceiver.java,160,ActiveMQMessage message = (ActiveMQMessage) transformer.transform(em);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,40,import org.apache.activemq.transport.amqp.message.ActiveMQJMSVendor;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,75,private final OutboundTransformer outboundTransformer = new AutoOutboundTransformer(ActiveMQJMSVendor.INSTANCE);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,79,private final String MESSAGE_FORMAT_KEY = outboundTransformer.getPrefixVendor() + "MESSAGE_FORMAT";
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,418,if (!temp.getProperties().containsKey(MESSAGE_FORMAT_KEY)) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,419,temp.setProperty(MESSAGE_FORMAT_KEY, 0);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,174,ConsumerControl control = new ConsumerControl();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,175,control.setConsumerId(getConsumerId());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,176,control.setDestination(getDestination());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,177,control.setPrefetch(0);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,179,LOG.trace("Flow: Pull case -> consumer control with prefetch (0) to control output");
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,181,sendToActiveMQ(control);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,183,if (endpoint.getCredit() > 0) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,194,pullRequest.setQuantity(endpoint.getCredit());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,196,LOG.trace("Pull case -> consumer pull request quantity = {}", endpoint.getCredit());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,207,ConsumerControl control = new ConsumerControl();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,208,control.setConsumerId(getConsumerId());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,209,control.setDestination(getDestination());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,212,LOG.trace("Flow: update -> consumer control with prefetch {}", control.getPrefetch());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,214,sendToActiveMQ(control);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,470,int newCredit = Math.max(0, getEndpoint().getCredit() - 1);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,471,LOG.trace("Sender:[{}] updating conumser prefetch:{} after delivery settled.",
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,472,getEndpoint().getName(), newCredit);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,474,ConsumerControl control = new ConsumerControl();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,475,control.setConsumerId(getConsumerId());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,476,control.setDestination(getDestination());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,477,control.setPrefetch(newCredit);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,479,sendToActiveMQ(control);
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,691,LOG.debug("setting prefetch: {}, on subscription: {}; resulting value: {}", new Object[]{ control.getPrefetch(), control.getConsumerId(), sub.getConsumerInfo().getCurrentPrefetchSize()});
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,26,import java.util.concurrent.atomic.AtomicInteger;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,60,protected final AtomicInteger prefetchExtension = new AtomicInteger();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,434,for (Destination dest : destinations) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,435,dest.wakeup();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,907,protected int getPrefetchExtension() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,908,return this.prefetchExtension.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,72,+ this.prefetchExtension + ", pending=" + getPendingQueueSize();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,67,private final AtomicInteger prefetchExtension = new AtomicInteger(0);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,715,+ getDequeueCounter() + ", matched=" + matched() + ", discarded=" + discarded();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,166,LOG.trace("Flow: draining={}, drain={} credit={}, remoteCredit={}, queued={}",
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,167,draining, getEndpoint().getDrain(),
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,168,getEndpoint().getCredit(), getEndpoint().getRemoteCredit(), getEndpoint().getQueued());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,171,if (getEndpoint().getDrain() && !draining) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,210,control.setPrefetch(getEndpoint().getCredit());
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,487,protected Region getRegion(ActiveMQDestination destination) throws JMSException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/plist/PListStoreImpl.java,276,this.directory = new File(IOHelper.getDefaultDataDirectory() + File.pathSeparator + "delayedDB");
activemq-client/src/main/java/org/apache/activemq/util/BitArrayBin.java,147,longFirstIndex = (int) (index - (index % BitArray.LONG_SIZE));
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,214,private boolean hasDurableSubChanged(SubscriptionInfo info1, ConsumerInfo info2) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,222,private boolean hasNoLocalChanged(SubscriptionInfo info1, ConsumerInfo info2) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,224,if (brokerService.getStoreOpenWireVersion() >= 11) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,369,private boolean hasDurableSubChanged(ConsumerInfo info1, ConsumerInfo info2) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryPersistenceAdapter.java,46,public class MemoryPersistenceAdapter implements PersistenceAdapter {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBPersistenceAdapter.java,64,public class KahaDBPersistenceAdapter extends LockableServiceSupport implements PersistenceAdapter, JournaledStore, TransactionIdTransformerAware {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,89,public class KahaDBStore extends MessageDatabase implements PersistenceAdapter {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,72,public class MultiKahaDBPersistenceAdapter extends LockableServiceSupport implements PersistenceAdapter, BrokerServiceAware {
activemq-client/src/main/java/org/apache/activemq/util/TypeConversionSupport.java,53,public boolean equals(Object o) {
activemq-client/src/main/java/org/apache/activemq/util/TypeConversionSupport.java,54,ConversionKey x = (ConversionKey)o;
activemq-client/src/main/java/org/apache/activemq/util/TypeConversionSupport.java,55,return x.from == from && x.to == to;
activemq-client/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,145,return;
activemq-client/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,150,if (!done) {
activemq-client/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,151,queued = true;
activemq-client/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,154,if (queued) {
activemq-client/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,155,executor.execute(runable);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1976,LOG.warn("{}, duplicate message {} paged in, is cursor audit disabled? Removing from store and redirecting to dlq", this, ref.getMessage());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1979,store.removeMessage(connectionContext, new MessageAck(ref.getMessage(), MessageAck.POSION_ACK_TYPE, 1));
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1980,broker.getRoot().sendToDeadLetterQueue(connectionContext, ref.getMessage(), null, new Throwable("duplicate paged in from store for " + destination));
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,124,if (message.getMessageId().getEntryLocator() instanceof Long) {
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoSslTransportFactory.java,107,if (format.getClass().toString().contains("MQTT") && !allowLinkStealingSet) {
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoSslTransportFactory.java,108,this.setAllowLinkStealing(true);
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoTcpTransportFactory.java,92,if (format.getClass().toString().contains("MQTT") && !allowLinkStealingSet) {
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoTcpTransportFactory.java,93,this.setAllowLinkStealing(true);
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoSslTransportFactory.java,32,import org.apache.activemq.transport.Transport;
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoSslTransportFactory.java,35,import org.apache.activemq.transport.tcp.SslTransportServer;
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoSslTransportFactory.java,41,import org.slf4j.Logger;
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoSslTransportFactory.java,42,import org.slf4j.LoggerFactory;
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoSslTransportFactory.java,46,private static final Logger LOG = LoggerFactory.getLogger(AutoSslTransportFactory.class);
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoTcpTransportServer.java,92,IntrospectionSupport.setProperties(wff, options.get(AutoTransportUtils.ALL));
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoTcpTransportServer.java,93,IntrospectionSupport.setProperties(wff, options.get(scheme));
activemq-client/src/main/java/org/apache/activemq/transport/TransportFactory.java,21,import java.net.Socket;
activemq-client/src/main/java/org/apache/activemq/transport/TransportFactory.java,25,import java.nio.ByteBuffer;
activemq-client/src/main/java/org/apache/activemq/transport/TransportFactory.java,32,import javax.net.ssl.SSLEngine;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpTransportFilter.java,161,X509Certificate[] peerCerts = ((SslTransport) next).getPeerCertificates();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpTransportFilter.java,162,if (trace && peerCerts != null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpTransportFilter.java,163,LOG.debug("Peer Identity has been verified\n");
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpTransportFilter.java,165,return peerCerts;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpTransportFilter.java,167,return null;
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoSslTransportServer.java,26,import javax.net.ServerSocketFactory;
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoSslTransportServer.java,29,import javax.net.ssl.SSLSocket;
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoSslTransportServer.java,32,import org.apache.activemq.transport.Transport;
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoSslTransportServer.java,33,import org.apache.activemq.transport.tcp.SslTransport;
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoSslTransportServer.java,140,protected TcpTransport createTransport(Socket socket, WireFormat format) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoSslTransportServer.java,141,return new SslTransport(format, (SSLSocket)socket, this.initBuffer);
activemq-broker/src/main/java/org/apache/activemq/transport/auto/AutoTcpTransportServer.java,276,Transport transport = createTransport(socket, format,protocolInfo.detectedTransportFactory);
activemq-broker/src/main/java/org/apache/activemq/transport/auto/nio/AutoNIOSSLTransportServer.java,12,import java.util.concurrent.atomic.AtomicInteger;
activemq-broker/src/main/java/org/apache/activemq/transport/auto/nio/AutoNIOSSLTransportServer.java,29,import org.slf4j.Logger;
activemq-broker/src/main/java/org/apache/activemq/transport/auto/nio/AutoNIOSSLTransportServer.java,30,import org.slf4j.LoggerFactory;
activemq-broker/src/main/java/org/apache/activemq/transport/auto/nio/AutoNIOSSLTransportServer.java,50,private static final Logger LOG = LoggerFactory.getLogger(AutoNIOSSLTransportServer.class);
activemq-broker/src/main/java/org/apache/activemq/transport/auto/nio/AutoNioTransportFactory.java,32,import org.apache.activemq.transport.Transport;
activemq-broker/src/main/java/org/apache/activemq/transport/auto/nio/AutoNioTransportFactory.java,36,import org.apache.activemq.transport.nio.NIOTransport;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioSslTransport.java,72,protected void doInit() {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioSslTransport.java,75,serviceRead();
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,187,protected void doInit() throws Exception {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,193,if (initBuffer != null && this.wireFormat instanceof OpenWireFormat) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,21,import java.util.Iterator;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,24,import java.util.Map.Entry;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,33,import org.apache.activemq.store.AbstractMessageStore;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,95,if( removed !=null ) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,110,for (Iterator<Message> iter = messageTable.values().iterator(); iter.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,111,Message msg = iter.next();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,112,listener.recoverMessage(msg);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,136,int count = 0;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,137,for (Iterator iter = messageTable.entrySet().iterator(); iter.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,138,Map.Entry entry = (Entry)iter.next();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,140,count++;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,142,lastBatchId = (MessageId)entry.getKey();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,144,listener.recoverMessageReference((MessageId)msg);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,146,listener.recoverMessage((Message)msg);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,186,for (Iterator<Message> iter = messageTable.values().iterator(); iter
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,187,.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,188,Message msg = iter.next();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,189,size += msg.getSize();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryPersistenceAdapter.java,179,return (MemoryMessageStore)value;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryPersistenceAdapter.java,182,MessageStore delegate = ((ProxyMessageStore)value).getDelegate();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryPersistenceAdapter.java,213,public File getDirectory(){
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryPersistenceAdapter.java,222,public long size(){
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,22,import java.util.Iterator;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,24,import java.util.Map.Entry;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,57,public MemoryTopicMessageStore(ActiveMQDestination destination, Map<MessageId, Message> messageTable, Map<SubscriptionKey, SubscriptionInfo> subscriberDatabase) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,77,for (Iterator<MemoryTopicSub> i = topicSubMap.values().iterator(); i.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,78,MemoryTopicSub sub = i.next();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,84,public synchronized void acknowledge(ConnectionContext context, String clientId, String subscriptionName,
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,85,MessageId messageId, MessageAck ack) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,101,MemoryTopicSub sub = new MemoryTopicSub();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,104,for (Iterator i = messageTable.entrySet().iterator(); i.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,105,Map.Entry entry = (Entry)i.next();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,106,sub.addMessage((MessageId)entry.getKey(), (Message)entry.getValue());
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,114,org.apache.activemq.util.SubscriptionKey key = new SubscriptionKey(clientId, subscriptionName);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,192,public MemoryTopicMessageStoreLRUCache(int initialCapacity, int maximumCacheSize,
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,193,float loadFactor, boolean accessOrder) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,197,public void setMessageStoreStatistics(
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,198,MessageStoreStatistics messageStoreStatistics) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicSub.java,34,private Map<MessageId, Message> map = new LinkedHashMap<MessageId, Message>();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicSub.java,38,synchronized(this) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicSub.java,46,synchronized(this) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicSub.java,52,if( removed!=null ) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,137,this.persistenceAdapter=persistenceAdapter;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,216,public void acknowledge(ConnectionContext context, String clientId, String subscriptionName,
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,217,MessageId messageId, MessageAck ack) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,218,MemoryTransactionStore.this.acknowledge((TopicMessageStore)getDelegate(), clientId,
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,219,subscriptionName, messageId, ack);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,260,public void commit(TransactionId txid, boolean wasPrepared, Runnable preCommit,Runnable postCommit) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,305,listener.recover((XATransactionId)txid, tx.getMessages(), tx.getAcks());
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,388,public void acknowledge(final TopicMessageStore destination, final String clientId, final String subscriptionName,
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,389,final MessageId messageId, final MessageAck ack) throws IOException {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,274,Message msg = (Message) wireFormat.unmarshal(new ByteSequence(data));
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,275,msg.getMessageId().setBrokerSequenceId(sequenceId);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,276,return listener.recoverMessage(msg);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,280,return listener.recoverMessageReference(new MessageId(reference));
activemq-camel/src/main/java/org/apache/activemq/camel/component/OriginalDestinationPropagateStrategy.java,43,if (message instanceof ActiveMQMessage) {
activemq-http/src/main/java/org/apache/activemq/transport/ws/AbstractMQTTSocket.java,147,protocolConverter = new MQTTProtocolConverter(this, brokerService);
activemq-http/src/main/java/org/apache/activemq/transport/ws/AbstractMQTTSocket.java,148,IntrospectionSupport.setProperties(protocolConverter, transportOptions);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,619,LOG.error("Network connection between {} and {} shutdown due to a remote error: {}", new Object[]{
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,620,localBroker, remoteBroker, error
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,623,LOG.warn("Network connection between {} and {} shutdown due to a remote error: {}", new Object[]{
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,624,localBroker, remoteBroker, error
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,362,LOG.error("Failed to create TopicSubscription ", e);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,285,LOG.warn("Exception occurred processing: {} -> {}", safeGetAction(command), exception.toString());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,250,long seq = ack.getLastMessageId().getFutureOrSequenceLong() != null ?
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,341,Message msg = (Message)wireFormat.unmarshal(new ByteSequence(data));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransport.java,55,protected void initializeStreams() throws IOException {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransport.java,56,codec = new StompCodec(this);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransport.java,57,super.initializeStreams();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransport.java,58,if (inputBuffer.position() != 0 && inputBuffer.hasRemaining()) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransport.java,59,serviceRead();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,788,getAdapter().doRemoveMessage(c, (Long)ack.getLastMessageId().getFutureOrSequenceLong(), null);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,235,connection = connectionsPool.borrowObject(key);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,236,synchronized (connection) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,237,if (connection.getConnection() != null) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,238,connection.incrementReferenceCount();
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,239,break;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,243,connectionsPool.returnObject(key, connection);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,244,connection = null;
activemq-partition/src/main/java/org/apache/activemq/partition/PartitionBroker.java,251,if( !targetScores.isEmpty() ) {
activemq-partition/src/main/java/org/apache/activemq/partition/PartitionBroker.java,253,int bestScore=0;
activemq-partition/src/main/java/org/apache/activemq/partition/PartitionBroker.java,255,if( entry.getValue().value > bestScore ) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,911,public void setObjectProperty(String name, Object value) throws JMSException {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,912,initializeWriting();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,913,super.setObjectProperty(name, value);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,495,public int getMaxProducersToAudit() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,506,public int getMaxAuditDepth() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,242,public int getMaxProducersToAudit() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,261,public int getMaxAuditDepth() {
activemq-client/src/main/java/org/apache/activemq/management/SizeStatisticImpl.java,22,private long maxSize;
activemq-client/src/main/java/org/apache/activemq/management/SizeStatisticImpl.java,23,private long minSize;
activemq-client/src/main/java/org/apache/activemq/management/SizeStatisticImpl.java,97,public synchronized long getMinSize() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/HashIndex.java,125,private Marshaller<Key> keyMarshaller;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/HashIndex.java,395,public synchronized void setKeyMarshaller(Marshaller<Key> marshaller) {
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,43,serializablePackages = System.getProperty("org.apache.activemq.SERIALIZABLE_PACKAGES",
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,136,PreparedStatement statement = connection.prepareStatement(getStatements().getCurrentDateTime());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,137,ResultSet resultSet = statement.executeQuery();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,138,long result = 0l;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,139,if (resultSet.next()) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,140,Timestamp timestamp = resultSet.getTimestamp(1);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,141,long diff = System.currentTimeMillis() - timestamp.getTime();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,142,if (Math.abs(diff) > maxAllowableDiffFromDBTime) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,144,result = (-diff);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,146,LOG.info(getLeaseHolderId() + " diff adjust from db: " + result + ", db time: " + timestamp);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,148,return result;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,405,class BrowserDispatch {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,406,QueueBrowserSubscription browser;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,408,public BrowserDispatch(QueueBrowserSubscription browserSubscription) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,409,browser = browserSubscription;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,410,browser.incrementQueueRef();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,413,public QueueBrowserSubscription getBrowser() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,414,return browser;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,418,ConcurrentLinkedQueue<BrowserDispatch> browserDispatches = new ConcurrentLinkedQueue<BrowserDispatch>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,467,BrowserDispatch browserDispatch = new BrowserDispatch(browserSubscription);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,468,browserDispatches.add(browserDispatch);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,581,browserDispatches.remove(sub);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1597,boolean hasBrowsers = !browserDispatches.isEmpty();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1617,Iterator<BrowserDispatch> browsers = browserDispatches.iterator();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1619,BrowserDispatch browserDispatch = browsers.next();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1624,QueueBrowserSubscription browser = browserDispatch.getBrowser();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1640,browserDispatches.remove(browserDispatch);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1643,LOG.warn("exception on dispatch to browser: {}", browserDispatch.getBrowser(), e);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1996,return consumers.size() - browserDispatches.size() > 0;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,27,import javax.jms.Destination;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,561,destination = activeMQDestinationMap.get(command.topicName());
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,277,Security.insertProviderAt(bouncycastle,
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,278,Integer.getInteger("org.apache.activemq.broker.BouncyCastlePosition", 2));
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,279,LOG.info("Loaded the Bouncy Castle security provider.");
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,132,String clientId = activationSpec.getClientId();
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,135,if (!AdvisorySupport.isAdvisoryTopic(info.getDestination()) && !info.getDestination().isTemporary()) {
activemq-http/src/main/java/org/apache/activemq/transport/SecureSocketConnectorFactory.java,95,factory.setSslKeyManagerFactoryAlgorithm(keyCertificateAlgorithm);
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpClientTransport.java,73,public static final int MAX_CLIENT_TIMEOUT = 30000;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,61,final Set<TransactionId> recoveredPendingCommit = new HashSet<TransactionId>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,323,recoveredPendingCommit.addAll(inflightTransactions.keySet());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,324,LOG.info("pending local transactions: " + recoveredPendingCommit);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,380,if (recoveredPendingCommit.contains(txid)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,320,process(load(location));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,339,public void process(JournalCommand<?> command) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,343,getTx(TransactionIdConversion.convert(prepareCommand.getTransactionInfo()));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java,321,if (name.endsWith(".data") || name.endsWith(".redo") || name.endsWith(".log")) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,119,private final IdGenerator ACK_ID_GENERATOR = new IdGenerator();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,133,private static class AckEntry {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,135,private final String messageId;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,136,private final StompSubscription subscription;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,138,public AckEntry(String messageId, StompSubscription subscription) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,139,this.messageId = messageId;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,140,this.subscription = subscription;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,143,public MessageAck onMessageAck(TransactionId transactionId) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,144,return subscription.onStompMessageAck(messageId, transactionId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,147,public MessageAck onMessageNack(TransactionId transactionId) throws ProtocolException {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,148,return subscription.onStompMessageNack(messageId, transactionId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,151,public String getMessageId() {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,152,return this.messageId;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,156,public StompSubscription getSubscription() {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,157,return this.subscription;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,385,AckEntry pendingAck = this.pedingAcks.remove(ackId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,387,messageId = pendingAck.getMessageId();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,441,AckEntry pendingAck = this.pedingAcks.remove(ackId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,443,messageId = pendingAck.getMessageId();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,524,pedingAcks.clear();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,555,pedingAcks.clear();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,617,stompSubscription = new StompSubscription(this, subscriptionId, consumerInfo, headers.get(Stomp.Headers.TRANSFORMATION));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,619,stompSubscription = new StompQueueBrowserSubscription(this, subscriptionId, consumerInfo, headers.get(Stomp.Headers.TRANSFORMATION));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,873,String ackId = null;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,874,if (version.equals(Stomp.V1_2) && sub.getAckMode() != Stomp.Headers.Subscribe.AckModeValues.AUTO && md.getMessage() != null) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,875,AckEntry pendingAck = new AckEntry(md.getMessage().getMessageId().toString(), sub);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,876,ackId = this.ACK_ID_GENERATOR.generateId();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,877,this.pedingAcks.put(ackId, pendingAck);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,879,try {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,880,sub.onMessageDispatch(md, ackId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,882,if (ackId != null) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,883,this.pedingAcks.remove(ackId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompQueueBrowserSubscription.java,30,public StompQueueBrowserSubscription(ProtocolConverter stompTransport, String subscriptionId, ConsumerInfo consumerInfo, String transformation) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompQueueBrowserSubscription.java,31,super(stompTransport, subscriptionId, consumerInfo, transformation);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompQueueBrowserSubscription.java,35,void onMessageDispatch(MessageDispatch md, String ackId) throws IOException, JMSException {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompQueueBrowserSubscription.java,38,super.onMessageDispatch(md, ackId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,24,import java.util.Map.Entry;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,59,public StompSubscription(ProtocolConverter stompTransport, String subscriptionId, ConsumerInfo consumerInfo, String transformation) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,66,void onMessageDispatch(MessageDispatch md, String ackId) throws IOException, JMSException {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,74,dispatchedMessage.put(message.getMessageId(), md);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,99,if (ackId != null) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,103,protocolConverter.getStompTransport().sendToStomp(command);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,107,unconsumedMessage.clear();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,113,for (Iterator<?> iter = dispatchedMessage.entrySet().iterator(); iter.hasNext();) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,115,Map.Entry entry = (Entry)iter.next();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,116,MessageDispatch msg = (MessageDispatch)entry.getValue();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,117,if (unconsumedMessage.contains(msg)) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,118,iter.remove();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,123,ack = new MessageAck(unconsumedMessage.getLast(), MessageAck.STANDARD_ACK_TYPE, unconsumedMessage.size());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,124,unconsumedMessage.clear();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,137,if (!dispatchedMessage.containsKey(msgId)) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,145,if (ackMode == CLIENT_ACK) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,152,for (Iterator<?> iter = dispatchedMessage.entrySet().iterator(); iter.hasNext();) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,155,Map.Entry entry = (Entry)iter.next();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,156,MessageId id = (MessageId)entry.getKey();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,157,MessageDispatch msg = (MessageDispatch)entry.getValue();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,160,if (!unconsumedMessage.contains(msg)) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,161,unconsumedMessage.add(msg);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,165,iter.remove();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,169,if (id.equals(msgId)) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,170,ack.setLastMessageId(id);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,183,unconsumedMessage.add(dispatchedMessage.get(msgId));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,205,unconsumedMessage.add(dispatchedMessage.get(msgId));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,208,dispatchedMessage.remove(msgId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,664,protected List<JobLocation> getAllScheduledJobs(Transaction tx) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,667,for (Iterator<Map.Entry<Long, List<JobLocation>>> i = this.index.iterator(tx); i.hasNext();) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,668,Map.Entry<Long, List<JobLocation>> entry = i.next();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,669,List<JobLocation> scheduled = entry.getValue();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,670,for (JobLocation job : scheduled) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,671,references.add(job);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,675,return references;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java,825,List<JobLocation> jobs = scheduler.getAllScheduledJobs(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java,826,for (JobLocation job : jobs) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java,853,List<JobLocation> jobs = scheduler.getAllScheduledJobs(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java,854,for (JobLocation job : jobs) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java,936,List<JobLocation> jobs = scheduler.getAllScheduledJobs(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java,937,for (JobLocation job : jobs) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,996,sd.orderIndex.setBatch(tx, cursorPos);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1034,sd.orderIndex.setBatch(tx, pos);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,589,if (counter >= maxReturned) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1060,try {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1061,synchronized (this) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1063,if (taskRunnerFactory != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1064,taskRunner = taskRunnerFactory.createTaskRunner(this, "ActiveMQ Connection Dispatcher: "
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1065,+ getRemoteAddress());
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1067,taskRunner = null;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1069,transport.start();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1070,active = true;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1071,BrokerInfo info = connector.getBrokerInfo().copy();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1072,if (connector.isUpdateClusterClients()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1073,info.setPeerBrokerInfos(this.broker.getPeerBrokerInfos());
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1075,info.setPeerBrokerInfos(null);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1077,dispatchAsync(info);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1079,connector.onStarted(this);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1084,throw e;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1089,setStarting(false);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1090,if (isPendingStop()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1091,LOG.debug("Calling the delayed stop() after start() {}", this);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1092,stop();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1110,synchronized (this) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1112,transportException.set(cause);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1139,synchronized (this) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1142,LOG.debug("stopAsync() called in the middle of start(). Delaying till start completes..");
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1143,return;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,81,onException(new InactivityIOException("Channel was inactive for too (>" + (readKeepAliveTime + readGraceTime) + ") long: "
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1717,metadata.ackMessageFileMapLocation = checkpointAckMessageFileMap();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2553,Iterator<Entry<String, SequenceSet>> subscriptions = rc.ackPositions.iterator(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2554,while (subscriptions.hasNext()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2555,Entry<String, SequenceSet> subscription = subscriptions.next();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2556,SequenceSet pendingAcks = subscription.getValue();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2557,if (pendingAcks != null && !pendingAcks.isEmpty()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2558,Long lastPendingAck = pendingAcks.getTail().getLast();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2559,for (Long sequenceId : pendingAcks) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2560,Long current = rc.messageReferences.get(sequenceId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2561,if (current == null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2562,current = new Long(0);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2567,if (!sequenceId.equals(lastPendingAck)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2568,current = current.longValue() + 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2570,current = Long.valueOf(0L);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2573,rc.messageReferences.put(sequenceId, current);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2595,if (!rc.messageReferences.isEmpty()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2596,Long nextMessageId = (Long) rc.messageReferences.keySet().toArray()[rc.messageReferences.size() - 1];
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2597,rc.orderIndex.nextMessageId =
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2598,Math.max(rc.orderIndex.nextMessageId, nextMessageId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2805,Long count = sd.messageReferences.get(messageSequence);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2806,if (count == null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2807,count = Long.valueOf(0L);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2809,count = count.longValue() + 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2810,sd.messageReferences.put(messageSequence, count);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2825,for (Long ackPosition : allOutstanding) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2826,Long count = sd.messageReferences.get(ackPosition);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2831,if (count != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2832,count = count.longValue() + 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2833,sd.messageReferences.put(ackPosition, count);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2853,incrementAndAddSizeToStoreStat(kahaDest, subscriptionKey,
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2854,key.location.getSize());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2856,Long count = sd.messageReferences.get(messageSequence);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2857,if (count == null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2858,count = Long.valueOf(0L);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2860,count = count.longValue() + 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2861,sd.messageReferences.put(messageSequence, count);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2862,sd.messageReferences.put(messageSequence + 1, Long.valueOf(0L));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2877,Long references = sd.messageReferences.get(sequenceId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2878,if (references != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2879,references = references.longValue() - 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2881,if (references.longValue() > 0) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2882,sd.messageReferences.put(sequenceId, references);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2884,sd.messageReferences.remove(sequenceId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2885,unreferenced.add(sequenceId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2932,Long count = sd.messageReferences.get(messageSequence);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2933,if (count != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2934,long references = count.longValue() - 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2935,if (references > 0) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2936,sd.messageReferences.put(messageSequence, Long.valueOf(references));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2937,return;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2939,sd.messageReferences.remove(messageSequence);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,463,metaData.setCleanShutdown(true);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2060,if (command != null && command instanceof KahaRemoveMessageCommand) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,414,freeList = new SequenceSet();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,415,for (Iterator<Page> i = tx().iterator(true); i.hasNext(); ) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,416,Page page = i.next();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,417,if (page.getType() == Page.PAGE_FREE_TYPE) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,418,freeList.add(page.getPageId());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1396,List<Operation> tx = inflightTransactions.remove(key);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,282,destinationMap.removeAll(destination);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,297,destinationMap.removeAll(destination);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,54,import org.apache.activemq.filter.MessageEvaluationContext;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,216,MessageEvaluationContext ctx = new MessageEvaluationContext();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,259,MessageEvaluationContext ctx = new MessageEvaluationContext();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,300,MessageEvaluationContext ctx = new MessageEvaluationContext();
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,831,ConnectionContext answer = new ConnectionContext(new NonCachedMessageEvaluationContext());
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,88,import org.apache.activemq.filter.MessageEvaluationContext;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1155,MessageEvaluationContext messageEvalContext = new MessageEvaluationContext();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,57,long messageFormat;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,58,try {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/AMQPNativeOutboundTransformer.java,61,return null;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,166,maMap = new HashMap<Symbol, Object>();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,176,maMap = new HashMap<Symbol, Object>();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/message/JMSMappingOutboundTransformer.java,336,ArrayList<Object> list = new ArrayList<Object>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1185,&& messages.hasSpace();
activemq-broker/src/main/java/org/apache/activemq/broker/ProducerBrokerExchange.java,19,import java.io.IOException;
activemq-broker/src/main/java/org/apache/activemq/broker/ProducerBrokerExchange.java,20,import java.util.concurrent.atomic.AtomicBoolean;
activemq-broker/src/main/java/org/apache/activemq/broker/ProducerBrokerExchange.java,21,import java.util.concurrent.atomic.AtomicLong;
activemq-broker/src/main/java/org/apache/activemq/broker/ProducerBrokerExchange.java,215,double value = flowControlInfo.getSendsBlocked() / flowControlInfo.getTotalSends();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/Stomp.java,52,String SUBSCRIBE = "SUB";
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/Stomp.java,53,String UNSUBSCRIBE = "UNSUB";
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,110,private final ConcurrentMap<Integer, ResponseHandler> resposeHandlers = new ConcurrentHashMap<Integer, ResponseHandler>();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,111,private final ConcurrentMap<ConsumerId, StompSubscription> subscriptionsByConsumerId = new ConcurrentHashMap<ConsumerId, StompSubscription>();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,112,private final ConcurrentMap<String, StompSubscription> subscriptions = new ConcurrentHashMap<String, StompSubscription>();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,113,private final ConcurrentMap<String, ActiveMQDestination> tempDestinations = new ConcurrentHashMap<String, ActiveMQDestination>();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,114,private final ConcurrentMap<String, String> tempDestinationAmqToStompMap = new ConcurrentHashMap<String, String>();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,115,private final Map<String, LocalTransactionId> transactions = new ConcurrentHashMap<String, LocalTransactionId>();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,118,private final ConcurrentMap<String, AckEntry> pedingAcks = new ConcurrentHashMap<String, AckEntry>();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,302,HashMap<String, String> headers = new HashMap<String, String>();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,802,HashMap<String, String> responseHeaders = new HashMap<String, String>();
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,223,getInternalScheduler().schedule(msg.getMessageId().toString(),
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,224,new ByteSequence(packet.data, packet.offset, packet.length), cronEntry, delay, period, repeat);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,410,if (md.getDestination().isTopic()) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,411,synchronized (md.getMessage()) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,412,temp = (ActiveMQMessage) md.getMessage().copy();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java,415,temp = (ActiveMQMessage) md.getMessage();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,120,public final ConcurrentMap<ActiveMQTempDestination, ActiveMQTempDestination> activeTempDestinations = new ConcurrentHashMap<ActiveMQTempDestination, ActiveMQTempDestination>();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,173,private final CopyOnWriteArrayList<ActiveMQSession> sessions = new CopyOnWriteArrayList<ActiveMQSession>();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,174,private final CopyOnWriteArrayList<ActiveMQConnectionConsumer> connectionConsumers = new CopyOnWriteArrayList<ActiveMQConnectionConsumer>();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,175,private final CopyOnWriteArrayList<TransportListener> transportListeners = new CopyOnWriteArrayList<TransportListener>();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,178,private final ConcurrentMap<ConsumerId, ActiveMQDispatcher> dispatchers = new ConcurrentHashMap<ConsumerId, ActiveMQDispatcher>();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,179,private final ConcurrentMap<ProducerId, ActiveMQMessageProducer> producers = new ConcurrentHashMap<ProducerId, ActiveMQMessageProducer>();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,211,private List<String> trustedPackages = new ArrayList<String>();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,213,private int connectResponseTimeout;
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,821,Map<String, String> options = new HashMap<String, String>(info.getDestination().getOptions());
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1240,Map<String, String> options = new HashMap<String, String>(consumerInfo.getDestination().getOptions());
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1343,if(exception!=null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1347,if (isClosed()||closing.get()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1358,forceCloseOnSecurityException(exception);
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1360,if (jmsEx !=null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1394,if (isClosed()||closing.get()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1404,forceCloseOnSecurityException(er.getException());
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1406,if (jmsEx !=null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2589,return connectResponseTimeout;
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2592,public void setConnectResponseTimeout(int connectResponseTimeout) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2593,this.connectResponseTimeout = connectResponseTimeout;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,264,getSubscriptionStatistics().getInflightMessageSize().addSize(node.getSize());
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,370,synchronized(dispatchLock) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,371,boolean inAckRange = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,374,MessageId messageId = node.getMessageId();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,375,if (ack.getFirstMessageId() == null
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,376,|| ack.getFirstMessageId().equals(messageId)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,377,inAckRange = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,379,if (inAckRange) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,380,removeList.add(node);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,381,if (ack.getLastMessageId().equals(messageId)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,382,break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,388,dispatched.remove(node);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,389,getSubscriptionStatistics().getInflightMessageSize().addSize(-node.getSize());
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,390,getSubscriptionStatistics().getDequeues().increment();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,645,getSubscriptionStatistics().getInflightMessageSize().addSize(node.getSize());
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,79,protected final List<MessageReference> dispatched = new ArrayList<MessageReference>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,263,dispatched.add(node);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,372,List<MessageReference> removeList = new ArrayList<MessageReference>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,373,for (final MessageReference node : dispatched) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,387,for (final MessageReference node : removeList) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,391,((Destination)node.getRegionDestination()).getDestinationStatistics().getDequeues().increment();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,392,((Destination)node.getRegionDestination()).getDestinationStatistics().getInflight().decrement();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,393,if (info.isNetworkSubscription()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,394,((Destination)node.getRegionDestination()).getDestinationStatistics().getForwards().add(ack.getMessageCount());
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,396,if (ack.isExpiredAck()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,397,destination.getDestinationStatistics().getExpired().add(ack.getMessageCount());
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,644,dispatched.add(node);
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,19,import java.util.Enumeration;
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,20,import java.util.HashMap;
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,21,import java.util.Map;
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,41,public MessageQuery(BrokerFacade brokerFacade, SessionPool sessionPool) throws JMSException {
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,42,super(brokerFacade, sessionPool);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,24,import org.springframework.beans.factory.DisposableBean;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,31,private SessionPool sessionPool;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,33,private Session session;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,37,public QueueBrowseQuery(BrokerFacade brokerFacade, SessionPool sessionPool) throws JMSException {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,39,this.sessionPool = sessionPool;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,40,this.session = sessionPool.borrowSession();
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,48,sessionPool.returnSession(session);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,49,session = null;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,65,queue = session.createQueue(getValidDestination());
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,82,public Session getSession() {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,83,return session;
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,607,info.setDestination(virtualDestination.getVirtualDestination());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,619,info.setDestination(virtualDestination.getVirtualDestination());
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,892,RemoveSubscriptionInfo info = ((RemoveSubscriptionInfo) data);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,893,SubscriptionInfo subscriptionInfo = new SubscriptionInfo(info.getClientId(), info.getSubscriptionName());
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,897,if (removed) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,898,cleanupDurableSub(ds, i);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,470,localClientId = configuration.getName() + "_" + remoteBrokerName + "_inbound_" + configuration.getBrokerName();
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,498,duplexLocalConnectionInfo.setClientId(configuration.getName() + "_" + remoteBrokerName + "_inbound_duplex_"
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,499,+ configuration.getBrokerName());
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,586,remoteConnectionInfo.setClientId(configuration.getName() + "_" + configuration.getBrokerName() + "_outbound");
activemq-broker/src/main/java/org/apache/activemq/network/ConduitBridge.java,79,ds.getDurableRemoteSubs().add(new SubscriptionInfo(info.getClientId(), info.getSubscriptionName()));
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,96,import org.apache.activemq.transport.tcp.SslTransport;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1302,sub.getDurableRemoteSubs().add(new SubscriptionInfo(sub.getRemoteInfo().getClientId(), consumerInfo.getSubscriptionName()));
activemq-broker/src/main/java/org/apache/activemq/network/ConduitBridge.java,60,if (info.isNetworkSubscription()) {
activemq-broker/src/main/java/org/apache/activemq/network/ConduitBridge.java,91,return ds.isStaticallyIncluded() || !ds.getRemoteInfo().isNetworkSubscription();
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,921,i.remove();
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1020,localBroker.oneway(sub.getLocalInfo().createRemoveCommand());
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1279,sub.setStaticallyIncluded(true);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1280,try {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1281,addSubscription(sub);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1283,LOG.error("Failed to add static destination {}", dest, e);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1285,LOG.trace("{}, bridging messages for static destination: {}", configuration.getBrokerName(), dest);
activemq-broker/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,78,if (subName != null && subName.equals(candidateSubName)) {
activemq-broker/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,80,sub.getLocalInfo().setSubscriptionName(getSubscriberName(dest));
activemq-broker/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,81,sub.setStaticallyIncluded(true);
activemq-broker/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,82,addSubscription(sub);
activemq-broker/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,83,break;
activemq-broker/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,112,info.setConsumerId(new ConsumerId(localSessionInfo.getSessionId(),
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,270,while (true) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,271,int currentExtension = prefetchExtension.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,272,int newExtension = Math.max(currentExtension, currentExtension + 1);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,273,if (prefetchExtension.compareAndSet(currentExtension, newExtension)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,274,break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,295,while (true) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,296,int currentExtension = prefetchExtension.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,297,int newExtension = Math.max(currentExtension, index + 1);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,298,if (prefetchExtension.compareAndSet(currentExtension, newExtension)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,299,break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,335,while (true) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,336,int currentExtension = prefetchExtension.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,337,int newExtension = Math.max(currentExtension, index + 1);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,338,if (prefetchExtension.compareAndSet(currentExtension, newExtension)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,339,break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,405,while (true) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,406,int currentExtension = prefetchExtension.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,407,int newExtension = Math.max(0, currentExtension - (index + 1));
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,408,if (prefetchExtension.compareAndSet(currentExtension, newExtension)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,409,break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,450,public void beforeEnd() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,452,while (true) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,453,int currentExtension = prefetchExtension.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,454,int newExtension = Math.max(0, currentExtension - 1);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,455,if (prefetchExtension.compareAndSet(currentExtension, newExtension)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,456,break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,466,synchronized(dispatchLock) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,478,synchronized(dispatchLock) {
activemq-client/src/main/java/org/apache/activemq/command/MessagePull.java,28,public class MessagePull extends BaseCommand {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,47,e.printStackTrace();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQStreamMessage.java,746,return rc;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,3129,private Journal createJournal() throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,129,location.setLatch(batch.latch);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,156,WriteBatch batch = enqueue(write);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,158,location.setLatch(batch.latch);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpConnection.java,251,rescheduleAt = protonTransport.tick(now) - now;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpConnection.java,254,rescheduleAt = 0;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpConnection.java,256,throw new InactivityIOException("Channel was inactive for to long");
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpConnection.java,824,if (nextIdleCheck > 0) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpConnection.java,825,long delay = nextIdleCheck - now;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,90,private final AtomicBoolean connectorStarting = new AtomicBoolean(false);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,144,connectorStarting.set(true);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,153,connectorStarting.set(false);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,201,if (!connectorStarting.get()) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,329,return connectorStarting.get() || (connectorServer != null && connectorServer.isActive());
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,54,if (ignoreAllErrors) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,94,lockable.getBrokerService().handleIOException(IOExceptionSupport.create(e));
activemq-broker/src/main/java/org/apache/activemq/security/JaasAuthenticationBroker.java,68,SecurityContext s = authenticate(info.getUserName(), info.getPassword(), null);
activemq-broker/src/main/java/org/apache/activemq/security/JaasAuthenticationBroker.java,69,context.setSecurityContext(s);
activemq-broker/src/main/java/org/apache/activemq/security/JaasAuthenticationBroker.java,70,securityContexts.add(s);
activemq-broker/src/main/java/org/apache/activemq/security/JaasAuthenticationBroker.java,75,super.addConnection(context, info);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,835,if (getBrokerService().isStarted()) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,837,advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_NAME, getBrokerName());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,838,String id = getBrokerId() != null ? getBrokerId().getValue() : "NOT_SET";
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,839,advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_ID, id);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,841,String url = getBrokerService().getVmConnectorURI().toString();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,844,if (context.getConnector() instanceof TransportConnector
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,845,&& ((TransportConnector) context.getConnector()).getPublishableConnectString() != null) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,846,url = ((TransportConnector) context.getConnector()).getPublishableConnectString();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,848,url = getBrokerService().getDefaultSocketURIString();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,850,advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_URL, url);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,853,advisoryMessage.setDataStructure(command);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,854,advisoryMessage.setPersistent(false);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,855,advisoryMessage.setType(AdvisorySupport.ADIVSORY_MESSAGE_TYPE);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,856,advisoryMessage.setMessageId(new MessageId(advisoryProducerId, messageIdGenerator.getNextSequenceId()));
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,857,advisoryMessage.setTargetConsumerId(targetConsumerId);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,858,advisoryMessage.setDestination(topic);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,859,advisoryMessage.setResponseRequired(false);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,860,advisoryMessage.setProducerId(advisoryProducerId);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,861,boolean originalFlowControl = context.isProducerFlowControl();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,862,final ProducerBrokerExchange producerExchange = new ProducerBrokerExchange();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,863,producerExchange.setConnectionContext(context);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,864,producerExchange.setMutable(true);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,865,producerExchange.setProducerState(new ProducerState(new ProducerInfo()));
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,866,try {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,867,context.setProducerFlowControl(false);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,868,next.send(producerExchange, advisoryMessage);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,870,context.setProducerFlowControl(originalFlowControl);
activemq-http/src/main/java/org/apache/activemq/transport/ws/WSTransportProxy.java,154,transport.setTransportListener(getTransportListener());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,122,if (!unconsumedMessage.isEmpty()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,358,ActiveMQConnection connection = makeConnection();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,359,connection.start();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1422,this.future.setException(e);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1438,public void setException(final Exception e) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1539,this.future.setException(e);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,59,public void purge() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,667,LOG.error("expired waiting for space..");
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,71,public int removeMatchingMessages(String selector) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,75,public int removeMatchingMessages(String selector, int maximumMessages) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,103,public int moveMatchingMessagesTo(String selector, String destinationName) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,109,public int moveMatchingMessagesTo(String selector, String destinationName, int maximumMessages) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,115,public int retryMessages() throws Exception {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1240,default:
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1164,throw new IOException("Could not load journal record. Invalid location: "+location);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,216,if (!isCacheEnabled() && size==0 && isStarted() && useCache) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,217,if (LOG.isTraceEnabled()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,218,LOG.trace("{} - enabling cache for empty store {} {}", this, node.getMessageId(), node.getMessageId().getFutureOrSequenceLong());
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,220,setCacheEnabled(true);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,247,if (lastCachedIds[SYNC_ADD] == null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,249,for (ListIterator<MessageId> it = pendingCachedIds.listIterator(pendingCachedIds.size()); it.hasPrevious(); ) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,250,MessageId lastPending = it.previous();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,251,Object futureOrLong = lastPending.getFutureOrSequenceLong();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,252,if (futureOrLong instanceof Future) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,253,Future future = (Future) futureOrLong;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,254,if (future.isCancelled()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,255,continue;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,257,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,258,future.get(5, TimeUnit.SECONDS);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,259,setLastCachedId(ASYNC_ADD, lastPending);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,261,continue;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,263,LOG.debug("{} timed out waiting for async add", this, potentialDeadlock);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,265,LOG.debug("{} exception waiting for async add", this, worstCaseWeReplay);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,270,break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,272,if (lastCachedIds[ASYNC_ADD] != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,274,if (isAsync(currentAdd) || Long.compare(((Long) currentAdd.getMessageId().getFutureOrSequenceLong()), ((Long) lastCachedIds[ASYNC_ADD].getFutureOrSequenceLong())) > 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,275,setBatch(lastCachedIds[ASYNC_ADD]);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,279,setBatch(lastCachedIds[SYNC_ADD]);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,478,if (originalTransport instanceof SslTransport) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,479,X509Certificate[] peerCerts = ((SslTransport) originalTransport).getPeerCertificates();
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,503,if (originalTransport instanceof SslTransport) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,504,X509Certificate[] peerCerts = ((SslTransport) originalTransport).getPeerCertificates();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1969,if (!closing.get() && !closed.get()) {
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobDownloadStrategy.java,49,connection.connect();
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobDownloadStrategy.java,50,connection.disconnect();
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,69,throw new IOException("PUT was not successful: " + connection.getResponseCode() + " "
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,51,if (!sub.getActiveMQDestination().isPattern() || sub.getActiveMQDestination().equals(next.getActiveMQDestination())) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,54,if (noSubs && !getConsumers().isEmpty()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,56,final RegionBroker regionBroker = (RegionBroker) context.getBroker().getAdaptor(RegionBroker.class);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,57,final Set<Destination> virtualDests = regionBroker.getDestinations(virtualDestination);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,59,final ActiveMQDestination newDestination = sub.getActiveMQDestination();
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,60,final BaseDestination regionDest = getBaseDestination((Destination) regionBroker.getDestinations(newDestination).toArray()[0]);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,62,for (Destination virtualDest : virtualDests) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,63,if (virtualDest.getActiveMQDestination().isTopic() &&
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,64,(virtualDest.isAlwaysRetroactive() || sub.getConsumerInfo().isRetroactive())) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,66,Topic topic = (Topic) getBaseDestination(virtualDest);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,67,if (topic != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,69,final Message[] messages = topic.getSubscriptionRecoveryPolicy().browse(topic.getActiveMQDestination());
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,72,for (Message message : messages) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,73,final Message copy = message.copy();
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,74,copy.setOriginalDestination(message.getDestination());
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,75,copy.setDestination(newDestination);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,76,copy.setRegionDestination(regionDest);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/MappedQueueFilter.java,77,sub.addRecoveredMessage(context, newDestination.isQueue() ? new IndirectMessageReference(copy) : copy);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2606,URI uri = getVmConnectorURI();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2608,map.put("async", "false");
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2609,map.put("create","false");
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2610,uri = URISupport.createURIWithQuery(uri, URISupport.createQueryString(map));
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2631,connector.setLocalUri(uri);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1453,Transport localTransport = NetworkBridgeFactory.createLocalTransport(broker);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,193,duplexInboundLocalBroker = NetworkBridgeFactory.createLocalTransport(brokerService.getBroker());
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,790,MessageAck ack = new MessageAck(message, MessageAck.STANDARD_ACK_TYPE, demandConsumerDispatched);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,792,remoteBroker.oneway(ack);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,997,localBroker.request(sub.getLocalInfo());
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,999,localBroker.oneway(sub.getLocalInfo());
activemq-broker/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,61,public static Transport createLocalTransport(Broker broker) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,62,URI uri = broker.getVmConnectorURI();
activemq-broker/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,64,map.put("async", "true");
activemq-broker/src/main/java/org/apache/activemq/network/NetworkConnector.java,143,return TransportFactory.connect(localURI);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,752,addConsumerInfo((ConsumerInfo) command);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,834,synchronized (brokerService.getVmConnectorURI()) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,995,if (isDuplex()) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1325,&& !configuration.isSuppressDuplicateTopicSubscriptions()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,69,protected boolean warnOnProducerFlowControl = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,683,long nextWarn = start;
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,691,long now = System.currentTimeMillis();
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,692,if (now >= nextWarn) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,693,getLog().info("{}: {} (blocking for: {}s)", new Object[]{ usage, warning, new Long(((now - start) / 1000))});
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,694,nextWarn = now + blockedProducerWarningInterval;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,631,if (warnOnProducerFlowControl) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,632,warnOnProducerFlowControl = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,634,memoryUsage.getLimit(), getActiveMQDestination().getQualifiedName(), destinationStatistics.getMessages().getCount());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,379,if (warnOnProducerFlowControl) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,380,warnOnProducerFlowControl = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,61,protected boolean usePrefetchExtension = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,268,if (usePrefetchExtension && getPrefetchSize() != 0 && ack.isInTransaction()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,293,if (usePrefetchExtension && getPrefetchSize() != 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,333,if (usePrefetchExtension && getPrefetchSize() != 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,451,if (usePrefetchExtension && getPrefetchSize() != 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,899,public boolean isUsePrefetchExtension() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,900,return usePrefetchExtension;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,903,public void setUsePrefetchExtension(boolean usePrefetchExtension) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,904,this.usePrefetchExtension = usePrefetchExtension;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,691,while (pending.hasNext() && !isFull() && count < numberToDispatch) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,113,if (message.isRecievedByDFBridge()) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,183,private final List<TransportConnector> transportConnectors = new CopyOnWriteArrayList<TransportConnector>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,184,private final List<NetworkConnector> networkConnectors = new CopyOnWriteArrayList<NetworkConnector>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,185,private final List<ProxyConnector> proxyConnectors = new CopyOnWriteArrayList<ProxyConnector>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,186,private final List<JmsConnector> jmsConnectors = new CopyOnWriteArrayList<JmsConnector>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,187,private final List<Service> services = new ArrayList<Service>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,232,private final List<Runnable> shutdownHooks = new ArrayList<Runnable>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,626,LOG.error("Failed to start Apache ActiveMQ ({}, {})", new Object[]{ getBrokerName(), brokerId }, e);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1377,Map<String, String> answer = new HashMap<String, String>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1498,return new ArrayList<TransportConnector>(transportConnectors);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1533,return new ArrayList<NetworkConnector>(networkConnectors);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1537,return new ArrayList<ProxyConnector>(proxyConnectors);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2380,List<DestinationInterceptor> answer = new ArrayList<DestinationInterceptor>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2607,Map<String, String> map = new HashMap<String, String>(URISupport.parseParameters(uri));
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2732,Set <ActiveMQQueue> consumerDestinations = new HashSet<ActiveMQQueue>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,116,import org.apache.activemq.usage.Usage;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2044,protected void checkUsageLimit(File dir, Usage<?> storeUsage, int percentLimit) throws ConfigurationException {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2050,long totalSpace = dir.getTotalSpace();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2051,long totalUsableSpace = dir.getUsableSpace() + storeCurrent;
activemq-broker/src/main/java/org/apache/activemq/usage/TempUsage.java,20,import java.io.File;
activemq-broker/src/main/java/org/apache/activemq/usage/TempUsage.java,23,import org.apache.activemq.util.StoreUtil;
activemq-broker/src/main/java/org/apache/activemq/usage/TempUsage.java,79,if (percentLimit > 0 && store != null) {
activemq-broker/src/main/java/org/apache/activemq/usage/TempUsage.java,80,File dir = StoreUtil.findParentDirectory(store.getDirectory());
activemq-broker/src/main/java/org/apache/activemq/usage/TempUsage.java,82,if (dir != null) {
activemq-broker/src/main/java/org/apache/activemq/usage/TempUsage.java,83,this.setLimit(dir.getTotalSpace() * percentLimit / 100);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompCodec.java,104,transport.doConsume(new StompFrameError(new ProtocolException("The maximum data length was exceeded", true)));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompCodec.java,108,transport.doConsume(new StompFrameError(new ProtocolException("The maximum frame size was exceeded", true)));
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,20,import java.io.IOException;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,21,import java.io.PrintWriter;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,22,import java.util.Enumeration;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,23,import java.util.HashMap;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,24,import java.util.HashSet;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,26,import javax.jms.Destination;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,27,import javax.jms.JMSException;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,28,import javax.jms.Message;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,29,import javax.jms.MessageConsumer;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,30,import javax.jms.ObjectMessage;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,31,import javax.jms.TextMessage;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,32,import javax.servlet.ServletConfig;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,33,import javax.servlet.ServletException;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,34,import javax.servlet.http.HttpServletRequest;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,35,import javax.servlet.http.HttpServletResponse;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,253,MessageAvailableConsumer consumer, long deadline) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,304,String type = getContentType(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,305,if (type != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,306,response.setContentType(type);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,308,if (isXmlContent(message)) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,309,response.setContentType(defaultContentType);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,311,response.setContentType("text/plain");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,398,for (Enumeration names = message.getPropertyNames(); names.hasMoreElements();) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBPersistenceAdapter.java,779,return "KahaDBPersistenceAdapter[" + path + "]";
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,150,private String nameFromDestinationFilter(ActiveMQDestination destination) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,399,File defaultDir = MessageDatabase.DEFAULT_DIRECTORY;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,509,posionAck(md, "dispatch to " + getConsumerId() + " exceeds redelivery policy limit:" + redeliveryPolicy);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1256,ack.setPoisonCause(new Throwable("Exceeded redelivery policy limit:" + redeliveryPolicy
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1393,posionAck(md, "dispatch to " + getConsumerId() + " exceeds redelivery policy limit:" + redeliveryPolicy);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,279,if (preallocationScope != PreallocationScope.NONE && preallocationStrategy == PreallocationStrategy.OS_KERNEL_COPY) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,281,if (osKernelCopyTemplateFile == null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,282,osKernelCopyTemplateFile = createJournalTemplateFile();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,330,if (PreallocationStrategy.OS_KERNEL_COPY == preallocationStrategy) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,331,doPreallocationKernelCopy(file);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,333,doPreallocationZeros(file);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,335,doPreallocationChunkedZeros(file);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,337,doPreallocationSparseFile(file);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,361,ByteBuffer buffer = ByteBuffer.allocate(maxFileLength);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,362,buffer.put(EOF_RECORD);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,363,buffer.rewind();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,366,channel.write(buffer);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,407,ByteBuffer buffer = ByteBuffer.allocate(PREALLOC_CHUNK_SIZE);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,408,buffer.put(EOF_RECORD);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,409,buffer.rewind();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,416,if (remLen < buffer.remaining()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,417,buffer.limit(remLen);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,419,int writeLen = channel.write(buffer);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,421,buffer.rewind();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,44,import org.apache.activemq.broker.region.DurableTopicSubscription;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,46,import org.apache.activemq.broker.region.TopicRegion;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,107,import org.apache.activemq.util.SubscriptionKey;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,196,if (!brokerService.isStopping()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,197,Response response = service(command);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,198,if (response != null && !brokerService.isStopping()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,199,dispatchSync(response);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,202,throw new BrokerStoppedException("Broker " + brokerService + " is being stopped");
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,335,response = new ExceptionResponse(transportException.get());
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,465,Collection<TransactionState> transactions = cs.getTransactionStates();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,466,for (TransactionState transaction : transactions) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,467,rc++;
activemq-broker/src/main/java/org/apache/activemq/transport/TransportLoggerFactory.java,67,private static int defaultJmxPort = 1099;
activemq-broker/src/main/java/org/apache/activemq/transport/TransportLoggerFactory.java,140,int id = getNextId();
activemq-broker/src/main/java/org/apache/activemq/transport/TransportLoggerFactory.java,186,return LoggerFactory.getLogger(TransportLogger.class.getName()+".Connection:" + id);
activemq-broker/src/main/java/org/apache/activemq/transport/logwriters/DefaultLogWriter.java,40,log.debug("SENDING REQUEST: "+command);
activemq-broker/src/main/java/org/apache/activemq/transport/logwriters/DefaultLogWriter.java,45,log.debug("GOT RESPONSE: "+response);
activemq-broker/src/main/java/org/apache/activemq/transport/logwriters/DefaultLogWriter.java,50,log.debug("SENDING ASNYC REQUEST: "+command);
activemq-broker/src/main/java/org/apache/activemq/transport/logwriters/DefaultLogWriter.java,55,log.debug("SENDING: "+command);
activemq-broker/src/main/java/org/apache/activemq/transport/logwriters/DefaultLogWriter.java,60,log.debug("RECEIVED: " + command);
activemq-broker/src/main/java/org/apache/activemq/transport/logwriters/DefaultLogWriter.java,65,log.debug("RECEIVED Exception: "+error, error);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,377,try {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,378,RandomAccessFile templateRaf = new RandomAccessFile(osKernelCopyTemplateFile, "rw");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,380,templateRaf.close();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,303,RandomAccessFile templateFile = new RandomAccessFile(tmpFile, "rw");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,304,templateFile.setLength(size);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,305,templateFile.getChannel().force(true);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,306,templateFile.getChannel().transferTo(0, size, raf.getChannel());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,307,templateFile.close();
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,93,synchronized (transactionStore) {
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,94,transactionStore.rollback(getTransactionId());
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,96,try {
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,97,fireAfterRollback();
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,99,LOG.warn("POST ROLLBACK FAILED: ", e);
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,100,XAException xae = new XAException("POST ROLLBACK FAILED");
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,101,xae.errorCode = XAException.XAER_RMERR;
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,102,xae.initCause(e);
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,103,throw xae;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1052,if (enableRecoveryFile) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1053,Checksum checksum = new Adler32();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1055,recoveryFile.seek(RECOVERY_FILE_HEADER_SIZE);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1057,for (PageWrite w : batch) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1058,try {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1059,checksum.update(w.getDiskBound(), 0, pageSize);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1061,throw IOExceptionSupport.create("Cannot create recovery file. Reason: " + t, t);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1063,recoveryFile.writeLong(w.page.getPageId());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1064,recoveryFile.write(w.getDiskBound(), 0, pageSize);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1068,if (recoveryPageCount > recoveryFileMaxPageCount) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1069,int t = Math.max(recoveryFileMinPageCount, batch.size());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1070,recoveryFile.setLength(recoveryFileSizeForPages(t));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1074,recoveryFile.seek(0);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1076,recoveryFile.writeLong(nextTxid.get());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1080,recoveryFile.writeLong(checksum.getValue());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1082,recoveryFile.writeInt(batch.size());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1084,if (enableDiskSyncs) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1085,recoveryFile.sync();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1089,try {
activemq-broker/src/main/java/org/apache/activemq/broker/PublishedAddressPolicy.java,38,private HashMap<Integer, Integer> portMapping = new HashMap<Integer, Integer>();
activemq-broker/src/main/java/org/apache/activemq/broker/PublishedAddressPolicy.java,218,public void setPortMapping(HashMap<Integer, Integer> portMapping) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/IntrospectionSupport.java,97,if (boolean.class.isAssignableFrom(to) && value instanceof String) {
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,69,private ConcurrentMap<String, Set<String>> subSelectorCache = new ConcurrentHashMap<String, Set<String>>();
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,267,if (subSelectorCache.containsKey(destinationName)) {
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,268,return new HashSet<String>(subSelectorCache.get(destinationName));
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,283,if (subSelectorCache.containsKey(destinationName)) {
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,284,Set<String> cachedSelectors = subSelectorCache.get(destinationName);
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,285,return cachedSelectors.remove(selector);
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,288,return false;
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,292,if (subSelectorCache.containsKey(destinationName)) {
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,293,Set<String> cachedSelectors = subSelectorCache.get(destinationName);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,80,final Set<String> selectors = selectorCachePlugin.getSelector(dest.getActiveMQDestination().getQualifiedName());
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,236,public Set<String> getSelector(final String destination) {
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,237,return subSelectorCache.get(destination);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,59,private int serverSessionId = getNextLogId();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,60,private final Logger log = LoggerFactory.getLogger(ServerSessionImpl.class.getName() + ":" + serverSessionId);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,259,return "ServerSessionImpl:" + serverSessionId + "{" + session +"}";
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,790,private XAException toXAException(JMSException e) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,809,private int parseFromMessageOr(String message, int fallbackCode) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,738,private void checkReadOnlyProperties() throws MessageNotWriteableException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,289,store(new KahaTraceCommand().setMessage("LOADED " + new Date()));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,318,Location location = journal.getNextLocation(null);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,319,while (location != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,321,location = journal.getNextLocation(location);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,379,try {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,381,LOG.info("delivering pending commit outcome for tid: " + txid);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,382,broker.commitTransaction(null, txid, false);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,385,LOG.info("delivering rollback outcome to store for tid: " + txid);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,386,broker.forgetTransaction(null, txid);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,388,persistCompletion(txid);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,390,LOG.error("failed to deliver pending outcome for tid: " + txid, ex);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,469,if (size == 0) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,471,break;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,481,Sequence sequence = new Sequence(location.getOffset(), nextOffset - 1);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,502,if (!dataFile.corruptedBlocks.isEmpty()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,504,if (dataFile.corruptedBlocks.getTail().getLast() + 1 == location.getOffset()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,505,dataFile.setLength((int) dataFile.corruptedBlocks.removeLastSequence().getFirst());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,591,private void rotateWriteFile() throws IOException {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,794,xae.errorCode = original.errorCode;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,795,if (xae.errorCode == XA_OK) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,799,xae.initCause(original);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,885,final ActiveMQMessage message = (ActiveMQMessage)md.getMessage();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,749,this.transactionContext = null;
activemq-client/src/main/java/org/apache/activemq/command/Message.java,82,protected ByteSequence marshalledProperties;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnector.java,246,LOG.debug("Reason: " + error, error);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,276,((JDBCPersistenceAdapter)persistenceAdapter).rollbackLastAck(context, priority, jdbcTopicMessageStore.getDestination(), subName, clientId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,552,recoverRolledBackAcks(sd, tx, Integer.MAX_VALUE, listener);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,557,if (ackedAndPrepared.contains(entry.getValue().messageId)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,579,int counter = recoverRolledBackAcks(sd, tx, maxReturned, listener);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,582,if (ackedAndPrepared.contains(entry.getValue().messageId)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,601,protected int recoverRolledBackAcks(StoredDestination sd, Transaction tx, int maxReturned, MessageRecoveryListener listener) throws Exception {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,616,LOG.info("rolledback ack message {} with seq {} will be picked up in future batch {}", id, sequence, sd.orderIndex.cursor);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,997,recoverRolledBackAcks(sd, tx, Integer.MAX_VALUE, listener);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1001,if (ackedAndPrepared.contains(entry.getValue().messageId)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1041,int counter = recoverRolledBackAcks(sd, tx, maxReturned, listener);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1045,if (ackedAndPrepared.contains(entry.getValue().messageId)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1437,StoredDestination sd = getStoredDestination(command.getDestination(), tx);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,67,public boolean removeMessage(String messageId) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,79,public boolean copyMessageTo(String messageId, String destinationName) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,85,public int copyMatchingMessagesTo(String selector, String destinationName) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,91,public int copyMatchingMessagesTo(String selector, String destinationName, int maximumMessages) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,97,public boolean moveMessageTo(String messageId, String destinationName) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1322,set.addAll(pagedInMessages.values());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1389,set.addAll(pagedInMessages.values());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1481,set.addAll(pagedInMessages.values());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1510,set.addAll(pagedInMessages.values());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,127,private PreviouslyDeliveredMap<MessageId, Boolean> previouslyDeliveredMessages;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,147,private boolean clearDeliveredList;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,766,inProgressClearRequiredFlag.decrementAndGet();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,773,clearDeliveredList();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1141,for (Entry<MessageId, Boolean> entry: previouslyDeliveredMessages.entrySet()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1142,if (!entry.getValue()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1169,for (Entry<MessageId, Boolean> entry: previouslyDeliveredMessages.entrySet()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1170,if (!entry.getValue()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1173,previouslyDeliveredMessages.transactionId, entry.getKey());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1245,session.connection.rollbackDuplicate(this, md.getMessage());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1276,if (nonBlockingRedelivery) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1277,if (!unconsumedMessages.isClosed()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1279,final LinkedList<MessageDispatch> pendingRedeliveries =
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1280,new LinkedList<MessageDispatch>(deliveredMessages);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1282,Collections.reverse(pendingRedeliveries);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1284,deliveredCounter -= deliveredMessages.size();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1285,deliveredMessages.clear();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1293,for(MessageDispatch dispatch : pendingRedeliveries) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1305,unconsumedMessages.stop();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1307,for (MessageDispatch md : deliveredMessages) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1308,unconsumedMessages.enqueueFirst(md);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1311,deliveredCounter -= deliveredMessages.size();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1312,deliveredMessages.clear();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1314,if (redeliveryDelay > 0 && !unconsumedMessages.isClosed()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1316,session.getScheduler().executeAfterDelay(new Runnable() {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1320,if (started.get()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1321,start();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1329,start();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1335,if (messageListener.get() != null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1336,session.redispatch(this, unconsumedMessages);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1347,for (Entry<MessageId, Boolean> entry: previouslyDeliveredMessages.entrySet()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1348,if (!entry.getValue()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1349,LOG.trace("rollback non redelivered: {}" + entry.getKey());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1350,removeFromDeliveredMessages(entry.getKey());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1390,if (this.info.isBrowser() || !session.connection.isDuplicate(this, md.getMessage())) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1416,if (!unconsumedMessages.isRunning()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1418,session.connection.rollbackDuplicate(this, md.getMessage());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1476,if (previouslyDeliveredMessages.containsKey(md.getMessage().getMessageId())) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1478,previouslyDeliveredMessages.put(md.getMessage().getMessageId(), true);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1507,if (previouslyDeliveredMessages == null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1508,previouslyDeliveredMessages = new PreviouslyDeliveredMap<MessageId, Boolean>(session.getTransactionContext().getTransactionId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1510,for (MessageDispatch delivered : deliveredMessages) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1511,previouslyDeliveredMessages.put(delivered.getMessage().getMessageId(), false);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1513,LOG.debug("{} tracking existing transacted {} delivered list ({}) on transport interrupt",
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1514,getConsumerId(), previouslyDeliveredMessages.transactionId, deliveredMessages.size());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,2091,for (MessageDispatch md : c) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,2092,this.connection.rollbackDuplicate(dispatcher, md.getMessage());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1383,int oldMaxSize = getMaxPageSize();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1384,setMaxPageSize((int) this.destinationStatistics.getMessages().getCount());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1385,doPageIn(true);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1386,setMaxPageSize(oldMaxSize);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,299,exception.printStackTrace(stream);
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,324,protected void acknowledge(ConnectionContext context, MessageAck ack, MessageReference node) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnector.java,223,String remoteHost = transport.getRemoteAddress();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnector.java,230,String remoteHost = transport.getRemoteAddress();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnector.java,243,LOG.info("Could not accept connection during shutdown {} : {}", (remoteHost == null ? "" : "from " + remoteHost), error);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnector.java,245,LOG.error("Could not accept connection {} : {}", (remoteHost == null ? "" : "from " + remoteHost), error);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,280,LOG.warn("Transport ({}) failed {} attempting to automatically reconnect: {}",
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,293,updated.remove(failedConnectTransportURI);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,794,if (!updated.isEmpty()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,795,return updated;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,797,ArrayList<URI> l = new ArrayList<URI>(uris);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,800,removed = l.remove(failedConnectTransportURI);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,816,LOG.debug("urlList connectionList:{}, from: {}", l, uris);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,939,List<URI> connectList = getConnectList();
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1080,LOG.error("Failed to connect to {} after: {} attempt(s)", uris, connectFailures);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,253,return new XAResource[]{
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,254,new TransactionContext() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,257,public boolean isSameRM(XAResource xaresource) throws XAException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,258,ActiveMQConnection original = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,259,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,260,original = setConnection(newConnection());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,261,boolean result = super.isSameRM(xaresource);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,262,LOG.trace("{}.recover({})={}", getConnection(), xaresource, result);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,263,return result;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,266,LOG.trace("isSameRM({}) failed", xaresource, e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,267,XAException xaException = new XAException(e.getMessage());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,268,throw xaException;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,270,closeConnection(original);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,275,protected String getResourceManagerId() throws JMSException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,276,ActiveMQConnection original = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,277,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,278,original = setConnection(newConnection());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,279,return super.getResourceManagerId();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,281,closeConnection(original);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,286,public void commit(Xid xid, boolean onePhase) throws XAException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,287,ActiveMQConnection original = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,288,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,289,setConnection(newConnection());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,290,super.commit(xid, onePhase);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,291,LOG.trace("{}.commit({},{})", getConnection(), xid);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,294,LOG.trace("{}.commit({},{}) failed", getConnection(), xid, onePhase, e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,295,throwXAException(e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,297,closeConnection(original);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,302,public void rollback(Xid xid) throws XAException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,303,ActiveMQConnection original = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,304,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,305,original = setConnection(newConnection());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,306,super.rollback(xid);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,307,LOG.trace("{}.rollback({})", getConnection(), xid);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,310,LOG.trace("{}.rollback({}) failed", getConnection(), xid, e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,311,throwXAException(e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,313,closeConnection(original);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,318,public Xid[] recover(int flags) throws XAException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,319,Xid[] result = new Xid[]{};
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,320,ActiveMQConnection original = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,321,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,322,original = setConnection(newConnection());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,323,result = super.recover(flags);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,324,LOG.trace("{}.recover({})={}", getConnection(), flags, result);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,327,LOG.trace("{}.recover({}) failed", getConnection(), flags, e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,328,throwXAException(e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,330,closeConnection(original);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,332,return result;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,336,public void forget(Xid xid) throws XAException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,337,ActiveMQConnection original = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,338,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,339,original = setConnection(newConnection());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,340,super.forget(xid);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,341,LOG.trace("{}.forget({})", getConnection(), xid);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,344,LOG.trace("{}.forget({}) failed", getConnection(), xid, e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,345,throwXAException(e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,347,closeConnection(original);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,351,private void throwXAException(JMSException e) throws XAException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,352,XAException xaException = new XAException(e.getMessage());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,353,xaException.errorCode = XAException.XAER_RMFAIL;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,354,throw xaException;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,357,private ActiveMQConnection newConnection() throws JMSException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,360,return connection;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,363,private void closeConnection(ActiveMQConnection original) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,364,ActiveMQConnection connection = getConnection();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,365,if (connection != null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,366,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,367,connection.close();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,370,setConnection(original);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,653,boolean willSent = false;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,655,if (connect != null) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,656,if (connected.get()) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,657,if (connect.willTopic() != null && connect.willMessage() != null && !willSent) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,658,willSent = true;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,659,try {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,660,PUBLISH publish = new PUBLISH();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,661,publish.topicName(connect.willTopic());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,662,publish.qos(connect.willQos());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,663,publish.messageId(packetIdGenerator.getNextSequenceId(getClientId()));
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,664,publish.payload(connect.willMessage());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,665,publish.retain(connect.willRetain());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,666,ActiveMQMessage message = convertMessage(publish);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,667,message.setProducerId(producerId);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,668,message.onSend();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,670,sendToActiveMQ(message, null);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,672,LOG.warn("Failed to publish Will Message " + connect.willMessage());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,676,sendToActiveMQ(connectionInfo.createRemoveCommand(), null);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,162,lastBatchId = messageId;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualDestinationInterceptor.java,81,public synchronized void create(Broker broker, ConnectionContext context, ActiveMQDestination destination) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualDestinationInterceptor.java,88,public synchronized void remove(Destination destination) {
activemq-broker/src/main/java/org/apache/activemq/store/PersistenceAdapter.java,190,void checkpoint(boolean sync) throws IOException;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/AbstractKahaDBStore.java,669,LOG.info("periodic checkpoint/cleanup disabled, will ocurr on clean shutdown/restart");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBPersistenceAdapter.java,83,public void checkpoint(boolean sync) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBPersistenceAdapter.java,84,this.letter.checkpoint(sync);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,363,LOG.info("periodic checkpoint/cleanup disabled, will ocurr on clean shutdown/restart");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,495,checkpointUpdate(true);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1130,if (scheduler == null && opened.get()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1131,startCheckpoint();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,170,public void checkpoint(final boolean sync) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,172,persistenceAdapter.checkpoint(sync);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerStoreImpl.java,233,checkpointUpdate(true);
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowAckConsumerStrategy.java,19,import java.util.ArrayList;
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowAckConsumerStrategy.java,20,import java.util.HashMap;
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowAckConsumerStrategy.java,21,import java.util.List;
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowAckConsumerStrategy.java,22,import java.util.Map;
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowAckConsumerStrategy.java,76,if (getMaxSlowDuration() > 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowAckConsumerStrategy.java,79,for (SlowConsumerEntry entry : slowConsumers.values()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowAckConsumerStrategy.java,80,entry.mark();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,68,import org.apache.activemq.command.MessageAck;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1993,if (journalToAdvance == -1 || journalToAdvance == journal.getCurrentDataFileId()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2034,LOG.trace("Attempting to move all acks in journal:{} to the front.", journalToRead);
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,861,public void duplicateFromStore(Message message, Subscription durableSub) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,863,getLog().warn("duplicate message from store {}, redirecting for dlq processing", message.getMessageId());
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,864,Throwable cause = new Throwable("duplicate from store for " + destination);
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,870,acknowledge(connectionContext, durableSub, messageAck, message);
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,131,if (messageReference.isExpired()) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1743,if (tempDataStore == null) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1897,if (jobSchedulerStore == null) {
activemq-client/src/main/java/org/apache/activemq/broker/SslContext.java,120,if( sslContext == null ) {
activemq-client/src/main/java/org/apache/activemq/broker/SslContext.java,121,if( provider == null ) {
activemq-client/src/main/java/org/apache/activemq/broker/SslContext.java,122,sslContext = SSLContext.getInstance(protocol);
activemq-client/src/main/java/org/apache/activemq/broker/SslContext.java,124,sslContext = SSLContext.getInstance(protocol, provider);
activemq-client/src/main/java/org/apache/activemq/broker/SslContext.java,126,sslContext.init(getKeyManagersAsArray(), getTrustManagersAsArray(), getSecureRandom());
activemq-client/src/main/java/org/apache/activemq/broker/SslContext.java,130,public void setSSLContext(SSLContext sslContext) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,305,if (future.isCancelled()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,306,it.remove();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,1044,LOG.error("error dispatching message: ", e);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,2164,return "ActiveMQSession {id=" + info.getSessionId() + ",started=" + started.get() + "} " + sendMutex;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,143,private final Runnable expireMessagesTask = new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,118,purgeInactiveDestinations();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,773,private final Runnable expireMessagesTask = new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,49,private boolean started=false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,48,private boolean cacheEnabled=true;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,772,public void commitAdd(ConnectionContext context, MessageId messageId, long preparedSequenceId) throws IOException {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,775,long sequence = (Long)messageId.getEntryLocator();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,776,getAdapter().doCommitAddOp(c, preparedSequenceId, sequence);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,87,persistenceAdapter.commitTransaction(ctx);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,132,message.getMessageId().setEntryLocator(jdbcPersistenceAdapter.getNextSequenceId());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,137,message.getMessageId().setFutureOrSequenceLong(message.getMessageId().getEntryLocator());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,146,jdbcPersistenceAdapter.commitAdd(context, message.getMessageId(), preparedEntrySequence);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,181,((JDBCPersistenceAdapter) persistenceAdapter).commitAdd(ctx, messageId, (Long)messageId.getEntryLocator());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,87,close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,155,try {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,158,if (connection != null && !connection.getAutoCommit()) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,169,try {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,170,if (connection != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,171,connection.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,175,LOG.trace("Closing connection failed due: " + e.getMessage() + ". This exception is ignored.", e);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,177,connection = null;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,201,if (!connection.getAutoCommit()) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,233,private void doRollback() throws SQLException {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,234,if (addMessageStatement != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,235,addMessageStatement.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,236,addMessageStatement = null;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,238,if (removedMessageStatement != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,239,removedMessageStatement.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,240,removedMessageStatement = null;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,242,if (updateLastAckStatement != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,243,updateLastAckStatement.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,244,updateLastAckStatement = null;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,167,private final Set<TransactionStore> stores = new HashSet<TransactionStore>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,171,stores.add(store);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,174,public Set<TransactionStore> getStores() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,218,for (TransactionStore store : tx.getStores()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,219,store.commit(txid, true, null, null);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,267,for (TransactionStore store : tx.getStores()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,268,store.rollback(txid);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,365,getTx(xid).trackStore(adapter.createTransactionStore());
activemq-broker/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,382,public void clearPendingMessages() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,383,next.clearPendingMessages();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,468,dispatched.remove(node);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,469,getSubscriptionStatistics().getInflightMessageSize().addSize(-node.getSize());
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,470,nodeDest.getDestinationStatistics().getInflight().decrement();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1266,public void clearPendingMessages() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,838,public void clearPendingMessages() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,82,resetSize();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,349,setCacheEnabled(false);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,114,persistenceAdapter.commitTransaction(ctx);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,266,tx = preparedTransactions.remove(txid);
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,120,queue.clearPendingMessages();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,87,private MemoryTransactionStore transactionStore;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,194,MessageStore rc = new JDBCMessageStore(this, getAdapter(), wireFormat, destination, audit);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,195,if (transactionStore != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,196,rc = transactionStore.proxy(rc);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,203,TopicMessageStore rc = new JDBCTopicMessageStore(this, getAdapter(), wireFormat, destination, audit);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,204,if (transactionStore != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,205,rc = transactionStore.proxy(rc);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,250,if (transactionStore == null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,251,transactionStore = new JdbcMemoryTransactionStore(this);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,21,import java.util.HashMap;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,33,import org.apache.activemq.store.ProxyTopicMessageStore;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,52,private HashMap<ActiveMQDestination, MessageStore> topicStores = new HashMap<ActiveMQDestination, MessageStore>();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,53,private HashMap<ActiveMQDestination, MessageStore> queueStores = new HashMap<ActiveMQDestination, MessageStore>();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,309,protected void onProxyTopicStore(ProxyTopicMessageStore proxyTopicMessageStore) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,310,topicStores.put(proxyTopicMessageStore.getDestination(), proxyTopicMessageStore.getDelegate());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,314,protected void onProxyQueueStore(ProxyMessageStore proxyQueueMessageStore) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,315,queueStores.put(proxyQueueMessageStore.getDestination(), proxyQueueMessageStore.getDelegate());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,323,JDBCTopicMessageStore jdbcTopicMessageStore = (JDBCTopicMessageStore) topicStores.get(lastAckCommand.getMessageAck().getDestination());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,330,((JDBCPersistenceAdapter)persistenceAdapter).getBrokerService().getRegionBroker().getDestinationMap().get(removeMessageCommand.getMessageAck().getDestination()).getDestinationStatistics().getMessages().increment();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,334,ActiveMQDestination destination = addMessageCommand.getMessage().getDestination();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,335,addMessageCommand.setMessageStore(destination.isQueue() ? queueStores.get(destination) : topicStores.get(destination));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,3013,public void trackRecoveredAcks(ArrayList<MessageAck> acks) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,3014,this.indexLock.writeLock().lock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,3015,try {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,3016,for (MessageAck ack : acks) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,3017,ackedAndPrepared.add(ack.getLastMessageId().toProducerKey());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,3020,this.indexLock.writeLock().unlock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,3024,public void forgetRecoveredAcks(ArrayList<MessageAck> acks, boolean rollback) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,3025,if (acks != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,3026,this.indexLock.writeLock().lock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,3027,try {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,3028,for (MessageAck ack : acks) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,3029,final String id = ack.getLastMessageId().toProducerKey();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,3030,ackedAndPrepared.remove(id);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,3031,if (rollback) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,3032,rolledBackAcks.add(id);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,3036,this.indexLock.writeLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,208,Message msg = (Message) ((JDBCPersistenceAdapter)persistenceAdapter).getWireFormat().unmarshal(new ByteSequence(message));
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,213,tx.add(new RemoveMessageCommand() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,226,return null;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,109,private final Map<Destination, String> mqttTopicMap = new LRUCache<Destination, String>(DEFAULT_CACHE_SIZE);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,597,topicName = mqttTopicMap.get(message.getJMSDestination());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,599,String amqTopicName = findSubscriptionStrategy().onSend(message.getDestination());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,601,mqttTopicMap.put(message.getJMSDestination(), topicName);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,176,diskBoundLocation = -1;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,864,serialExecutor.execute(new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,866,public void run() {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,867,try {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,868,localBroker.oneway(destInfo);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,870,LOG.warn("failed to deliver remove command for destination: {}", destInfo.getDestination(), e);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,875,localBroker.oneway(destInfo);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,993,protected void addSubscription(DemandSubscription sub) throws IOException {
