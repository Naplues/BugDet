File,Line_number,SRC
storm-core/src/jvm/backtype/storm/utils/VersionedStore.java,84,if(tokenFile.exists()) {
storm-core/src/jvm/backtype/storm/utils/VersionedStore.java,85,FileUtils.forceDelete(tokenFile);
storm-core/src/jvm/backtype/storm/spout/ShellSpout.java,9,import java.io.IOException;
storm-core/src/jvm/backtype/storm/spout/ShellSpout.java,22,public ShellSpout(ShellComponent component) {
storm-core/src/jvm/backtype/storm/spout/ShellSpout.java,86,if (command.equals("sync")) {
storm-core/src/jvm/backtype/storm/task/ShellBolt.java,10,import java.util.ArrayList;
storm-core/src/jvm/backtype/storm/task/ShellBolt.java,16,import java.util.Map;
storm-core/src/jvm/backtype/storm/task/ShellBolt.java,17,import java.util.Random;
storm-core/src/jvm/backtype/storm/task/ShellBolt.java,50,public static Logger LOG = LoggerFactory.getLogger(ShellBolt.class);
storm-core/src/jvm/backtype/storm/task/ShellBolt.java,65,public ShellBolt(ShellComponent component) {
storm-core/src/jvm/backtype/storm/task/ShellBolt.java,92,_readerThread = new Thread(new Runnable() {
storm-core/src/jvm/backtype/storm/task/ShellBolt.java,93,public void run() {
storm-core/src/jvm/backtype/storm/task/ShellBolt.java,94,while (_running) {
storm-core/src/jvm/backtype/storm/task/ShellBolt.java,95,try {
storm-core/src/jvm/backtype/storm/task/ShellBolt.java,102,if(command.equals("ack")) {
storm-core/src/jvm/backtype/storm/task/ShellBolt.java,116,die(t);
storm-core/src/jvm/backtype/storm/task/ShellBolt.java,124,_writerThread = new Thread(new Runnable() {
storm-core/src/jvm/backtype/storm/task/ShellBolt.java,125,public void run() {
storm-core/src/jvm/backtype/storm/task/ShellBolt.java,126,while (_running) {
storm-core/src/jvm/backtype/storm/task/ShellBolt.java,127,try {
storm-core/src/jvm/backtype/storm/task/ShellBolt.java,128,Object write = _pendingWrites.poll(1, SECONDS);
storm-core/src/jvm/backtype/storm/task/ShellBolt.java,136,die(t);
storm-core/src/jvm/backtype/storm/task/ShellBolt.java,166,public void cleanup() {
storm-core/src/jvm/backtype/storm/task/ShellBolt.java,225,private void die(Throwable exception) {
storm-core/src/jvm/backtype/storm/utils/LocalState.java,25,String latestPath = _vs.mostRecentVersionPath();
storm-core/src/jvm/backtype/storm/utils/LocalState.java,26,if(latestPath==null) return new HashMap<Object, Object>();
storm-core/src/jvm/backtype/storm/utils/LocalState.java,27,try {
storm-core/src/jvm/backtype/storm/utils/LocalState.java,28,return (Map<Object, Object>) Utils.deserialize(FileUtils.readFileToByteArray(new File(latestPath)));
storm-core/src/jvm/backtype/storm/utils/LocalState.java,30,attempts++;
storm-core/src/jvm/backtype/storm/utils/LocalState.java,31,if(attempts >= 10) {
storm-core/src/jvm/backtype/storm/utils/LocalState.java,32,throw e;
storm-core/src/jvm/backtype/storm/Config.java,3,import backtype.storm.ConfigValidation;
storm-core/src/jvm/backtype/storm/Config.java,39,public static final Object STORM_MESSAGING_NETTY_BUFFER_SIZE_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,45,public static final Object STORM_MESSAGING_NETTY_MAX_RETRIES_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,51,public static final Object STORM_MESSAGING_NETTY_MIN_SLEEP_MS_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,57,public static final Object STORM_MESSAGING_NETTY_MAX_SLEEP_MS_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,63,public static final Object STORM_MESSAGING_NETTY_SERVER_WORKER_THREADS_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,69,public static final Object STORM_MESSAGING_NETTY_CLIENT_WORKER_THREADS_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,81,public static final Object STORM_ZOOKEEPER_PORT_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,150,public static final Object STORM_ZOOKEEPER_SESSION_TIMEOUT_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,156,public static final Object STORM_ZOOKEEPER_CONNECTION_TIMEOUT_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,162,public static final Object STORM_ZOOKEEPER_RETRY_TIMES_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,168,public static final Object STORM_ZOOKEEPER_RETRY_INTERVAL_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,174,public static final Object STORM_ZOOKEEPER_RETRY_INTERVAL_CEILING_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,205,public static final Object NIMBUS_THRIFT_PORT_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,221,public static final Object NIMBUS_TASK_TIMEOUT_SECS_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,231,public static final Object NIMBUS_MONITOR_FREQ_SECS_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,238,public static final Object NIMBUS_CLEANUP_INBOX_FREQ_SECS_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,250,public static final Object NIMBUS_INBOX_JAR_EXPIRATION_SECS_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,257,public static final Object NIMBUS_SUPERVISOR_TIMEOUT_SECS_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,267,public static final Object NIMBUS_TASK_LAUNCH_SECS_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,281,public static final Object NIMBUS_FILE_COPY_EXPIRATION_SECS_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,301,public static final Object UI_PORT_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,307,public static final Object LOGVIEWER_PORT_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,337,public static final Object DRPC_PORT_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,343,public static final Object DRPC_WORKER_THREADS_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,349,public static final Object DRPC_QUEUE_SIZE_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,355,public static final Object DRPC_INVOCATIONS_PORT_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,363,public static final Object DRPC_REQUEST_TIMEOUT_SECS_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,382,public static final Object SUPERVISOR_SLOTS_PORTS_SCHEMA = ConfigValidation.NumbersValidator;
storm-core/src/jvm/backtype/storm/Config.java,398,public static final Object SUPERVISOR_WORKER_TIMEOUT_SECS_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,408,public static final Object SUPERVISOR_WORKER_START_TIMEOUT_SECS_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,424,public static final Object SUPERVISOR_HEARTBEAT_FREQUENCY_SECS_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,432,public static final Object SUPERVISOR_MONITOR_FREQUENCY_SECS_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,446,public static final Object WORKER_HEARTBEAT_FREQUENCY_SECS_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,452,public static final Object TASK_HEARTBEAT_FREQUENCY_SECS_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,463,public static final Object TASK_REFRESH_POLL_SECS_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,495,public static final Object TOPOLOGY_WORKERS_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,506,public static final Object TOPOLOGY_TASKS_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,515,public static final Object TOPOLOGY_ACKER_EXECUTORS_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,525,public static final Object TOPOLOGY_MESSAGE_TIMEOUT_SECS_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,583,public static final Object TOPOLOGY_MAX_TASK_PARALLELISM_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,595,public static final Object TOPOLOGY_MAX_SPOUT_PENDING_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,611,public static final Object TOPOLOGY_SLEEP_SPOUT_WAIT_STRATEGY_TIME_MS_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,618,public static final Object TOPOLOGY_STATE_SYNCHRONIZATION_TIMEOUT_SECS_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,624,public static final Object TOPOLOGY_STATS_SAMPLE_RATE_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,630,public static final Object TOPOLOGY_BUILTIN_METRICS_BUCKET_SIZE_SECS_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,684,public static final Object TOPOLOGY_TRANSFER_BUFFER_SIZE_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,691,public static final Object TOPOLOGY_TICK_TUPLE_FREQ_SECS_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,706,public static final Object TOPOLOGY_WORKER_SHARED_THREAD_POOL_SIZE_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,714,public static final Object TOPOLOGY_ERROR_THROTTLE_INTERVAL_SECS_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,720,public static final Object TOPOLOGY_MAX_ERROR_REPORT_PER_INTERVAL_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,727,public static final Object TOPOLOGY_TRIDENT_BATCH_EMIT_INTERVAL_MILLIS_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,739,public static final Object TOPOLOGY_SHELLBOLT_MAX_PENDING_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,759,public static final Object TRANSACTIONAL_ZOOKEEPER_PORT_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,765,public static final Object ZMQ_THREADS_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,773,public static final Object ZMQ_LINGER_MILLIS_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/Config.java,780,public static final Object ZMQ_HWM_SCHEMA = Number.class;
storm-core/src/jvm/backtype/storm/utils/DisruptorQueue.java,18,import java.util.logging.Level;
storm-core/src/jvm/backtype/storm/utils/DisruptorQueue.java,19,import java.util.logging.Logger;
storm-core/src/jvm/backtype/storm/utils/DisruptorQueue.java,113,if(consumerStartedFlag) {
storm-core/src/jvm/backtype/storm/utils/DisruptorQueue.java,114,final long id;
storm-core/src/jvm/backtype/storm/utils/DisruptorQueue.java,115,if(block) {
storm-core/src/jvm/backtype/storm/utils/DisruptorQueue.java,116,id = _buffer.next();
storm-core/src/jvm/backtype/storm/utils/DisruptorQueue.java,118,id = _buffer.tryNext(1);
storm-core/src/jvm/backtype/storm/utils/DisruptorQueue.java,120,final MutableObject m = _buffer.get(id);
storm-core/src/jvm/backtype/storm/utils/DisruptorQueue.java,121,m.setObject(obj);
storm-core/src/jvm/backtype/storm/utils/DisruptorQueue.java,122,_buffer.publish(id);
storm-core/src/jvm/backtype/storm/utils/DisruptorQueue.java,124,_cache.add(obj);
storm-core/src/jvm/backtype/storm/utils/DisruptorQueue.java,125,if(consumerStartedFlag) flushCache();
storm-core/src/jvm/backtype/storm/utils/DisruptorQueue.java,129,public void consumerStarted() {
storm-core/src/jvm/backtype/storm/utils/DisruptorQueue.java,130,if(!consumerStartedFlag) {
storm-core/src/jvm/backtype/storm/utils/DisruptorQueue.java,131,consumerStartedFlag = true;
storm-core/src/jvm/backtype/storm/utils/DisruptorQueue.java,132,flushCache();
storm-core/src/jvm/backtype/storm/utils/DisruptorQueue.java,136,private void flushCache() {
storm-core/src/jvm/backtype/storm/utils/DisruptorQueue.java,137,publish(FLUSH_CACHE);
storm-core/src/jvm/storm/trident/util/TridentUtils.java,94,private static TSerializer ser = new TSerializer();
storm-core/src/jvm/storm/trident/util/TridentUtils.java,95,private static TDeserializer des = new TDeserializer();
storm-core/src/jvm/backtype/storm/spout/RawMultiScheme.java,14,return asList(tuple(ser));
storm-core/src/jvm/storm/trident/topology/TridentBoltExecutor.java,56,return singleCount == ((CoordType) o).singleCount;
storm-core/src/jvm/backtype/storm/spout/MultiScheme.java,9,public Iterable<List<Object>> deserialize(byte[] ser);
storm-core/src/jvm/backtype/storm/spout/RawMultiScheme.java,13,public Iterable<List<Object>> deserialize(byte[] ser) {
storm-core/src/jvm/backtype/storm/spout/RawScheme.java,8,public List<Object> deserialize(byte[] ser) {
storm-core/src/jvm/backtype/storm/spout/RawScheme.java,9,return tuple(ser);
storm-core/src/jvm/backtype/storm/spout/Scheme.java,9,public List<Object> deserialize(byte[] ser);
storm-core/src/jvm/storm/trident/spout/IBatchSpout.java,9,public interface IBatchSpout extends Serializable {
storm-core/src/jvm/storm/trident/spout/IOpaquePartitionedTridentSpout.java,16,public interface IOpaquePartitionedTridentSpout<Partitions, Partition extends ISpoutPartition, M> extends Serializable {
storm-core/src/jvm/storm/trident/spout/IPartitionedTridentSpout.java,16,public interface IPartitionedTridentSpout<Partitions, Partition extends ISpoutPartition, T> extends Serializable {
storm-core/src/jvm/storm/trident/spout/ITridentSpout.java,11,public interface ITridentSpout<T> extends Serializable {
storm-core/src/jvm/backtype/storm/topology/TopologyBuilder.java,109,public BoltDeclarer setBolt(String id, IRichBolt bolt) {
storm-core/src/jvm/backtype/storm/topology/TopologyBuilder.java,121,public BoltDeclarer setBolt(String id, IRichBolt bolt, Number parallelism_hint) {
storm-core/src/jvm/backtype/storm/topology/TopologyBuilder.java,138,public BoltDeclarer setBolt(String id, IBasicBolt bolt) {
storm-core/src/jvm/backtype/storm/topology/TopologyBuilder.java,153,public BoltDeclarer setBolt(String id, IBasicBolt bolt, Number parallelism_hint) {
storm-core/src/jvm/backtype/storm/topology/TopologyBuilder.java,163,public SpoutDeclarer setSpout(String id, IRichSpout spout) {
storm-core/src/jvm/backtype/storm/topology/TopologyBuilder.java,176,public SpoutDeclarer setSpout(String id, IRichSpout spout, Number parallelism_hint) {
storm-core/src/jvm/backtype/storm/topology/TopologyBuilder.java,183,public void setStateSpout(String id, IRichStateSpout stateSpout) {
storm-core/src/jvm/backtype/storm/topology/TopologyBuilder.java,187,public void setStateSpout(String id, IRichStateSpout stateSpout, Number parallelism_hint) {
storm-core/src/jvm/backtype/storm/topology/TopologyBuilder.java,214,private void initCommon(String id, IComponent component, Number parallelism) {
storm-core/src/jvm/backtype/storm/topology/TopologyBuilder.java,217,if(parallelism!=null) common.set_parallelism_hint(parallelism.intValue());
storm-core/src/jvm/backtype/storm/utils/Utils.java,227,String id = client.getClient().beginFileDownload(file);
storm-core/src/jvm/backtype/storm/utils/Utils.java,229,while(true) {
storm-core/src/jvm/backtype/storm/utils/Utils.java,230,ByteBuffer chunk = client.getClient().downloadChunk(id);
storm-core/src/jvm/backtype/storm/utils/Utils.java,231,int written = out.write(chunk);
storm-core/src/jvm/backtype/storm/utils/Utils.java,232,if(written==0) break;
storm-core/src/jvm/backtype/storm/utils/Utils.java,234,out.close();
storm-core/src/jvm/backtype/storm/security/serialization/BlowfishTupleSerializer.java,5,import org.apache.log4j.Logger;
storm-core/src/jvm/backtype/storm/security/serialization/BlowfishTupleSerializer.java,29,private static final Logger LOG = Logger.getLogger(BlowfishTupleSerializer.class);
storm-core/src/jvm/backtype/storm/utils/ShellProcess.java,13,import org.apache.commons.io.IOUtils;
storm-core/src/jvm/backtype/storm/utils/ShellProcess.java,16,import org.apache.log4j.Logger;
storm-core/src/jvm/backtype/storm/utils/ShellProcess.java,19,public static Logger LOG = Logger.getLogger(ShellProcess.class);
storm-core/src/jvm/backtype/storm/security/auth/SimpleTransportPlugin.java,63,TTransport conn = new TFramedTransport(transport);
storm-core/src/jvm/backtype/storm/utils/Utils.java,110,HashSet<URL> resources = new HashSet<URL>(findResources(name));
storm-core/src/jvm/backtype/storm/utils/Utils.java,111,if(resources.isEmpty()) {
storm-core/src/jvm/backtype/storm/utils/Utils.java,112,if(mustExist) throw new RuntimeException("Could not find config file on classpath " + name);
storm-core/src/jvm/backtype/storm/utils/Utils.java,113,else return new HashMap();
storm-core/src/jvm/backtype/storm/utils/Utils.java,115,if(resources.size() > 1) {
storm-core/src/jvm/backtype/storm/utils/Utils.java,116,throw new RuntimeException("Found multiple " + name + " resources. You're probably bundling the Storm jars with your topology jar. "
storm-core/src/jvm/backtype/storm/utils/Utils.java,117,+ resources);
storm-core/src/jvm/backtype/storm/utils/Utils.java,119,URL resource = resources.iterator().next();
storm-core/src/jvm/backtype/storm/utils/Utils.java,122,if(ret==null) ret = new HashMap();
storm-core/src/jvm/backtype/storm/utils/Utils.java,125,return new HashMap(ret);
storm-core/src/jvm/backtype/storm/utils/Utils.java,243,return (IFn) RT.var(namespace, name).deref();
storm-core/src/jvm/backtype/storm/Config.java,671,public static final String TOPOLOGY_RECEIVER_BUFFER_SIZE="topology.receiver.buffer.size";
storm-core/src/jvm/backtype/storm/Config.java,672,public static final Object TOPOLOGY_RECEIVER_BUFFER_SIZE_SCHEMA = ConfigValidation.PowerOf2Validator;
storm-core/src/jvm/backtype/storm/Config.java,38,public static final String STORM_MESSAGING_NETTY_BUFFER_SIZE = "storm.messaging.netty.buffer_size";
storm-core/src/jvm/backtype/storm/Config.java,44,public static final String STORM_MESSAGING_NETTY_MAX_RETRIES = "storm.messaging.netty.max_retries";
storm-core/src/jvm/backtype/storm/Config.java,50,public static final String STORM_MESSAGING_NETTY_MIN_SLEEP_MS = "storm.messaging.netty.min_wait_ms";
storm-core/src/jvm/backtype/storm/Config.java,56,public static final String STORM_MESSAGING_NETTY_MAX_SLEEP_MS = "storm.messaging.netty.max_wait_ms";
storm-core/src/jvm/backtype/storm/Config.java,62,public static final String STORM_MESSAGING_NETTY_SERVER_WORKER_THREADS = "storm.messaging.netty.server_worker_threads";
storm-core/src/jvm/backtype/storm/Config.java,68,public static final String STORM_MESSAGING_NETTY_CLIENT_WORKER_THREADS = "storm.messaging.netty.client_worker_threads";
storm-core/src/jvm/backtype/storm/Config.java,594,public static final String TOPOLOGY_MAX_SPOUT_PENDING="topology.max.spout.pending";
storm-core/src/jvm/backtype/storm/Config.java,604,public static final String TOPOLOGY_SPOUT_WAIT_STRATEGY="topology.spout.wait.strategy";
storm-core/src/jvm/backtype/storm/Config.java,854,getRegisteredSerializations(conf).add(register);
storm-core/src/jvm/backtype/storm/Config.java,953,ret = new ArrayList((List) conf.get(Config.TOPOLOGY_KRYO_DECORATORS));
storm-core/src/jvm/backtype/storm/security/auth/AuthUtils.java,18,public static final String LOGIN_CONTEXT_SERVER = "StormServer";
storm-core/src/jvm/backtype/storm/security/auth/AuthUtils.java,19,public static final String LOGIN_CONTEXT_CLIENT = "StormClient";
storm-core/src/jvm/backtype/storm/security/auth/AuthUtils.java,32,if ((loginConfigurationFile != null) && (loginConfigurationFile.length()>0)) {
storm-core/src/jvm/backtype/storm/security/auth/AuthUtils.java,74,Object val = entry.getOptions().get(key);
