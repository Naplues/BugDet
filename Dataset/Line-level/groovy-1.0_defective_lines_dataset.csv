File,Line_number,SRC
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,2111,processClassVariable(variableName);
src/main/org/codehaus/groovy/ast/ClassHelper.java,94,Object.class, Boolean.TYPE, Character.TYPE, Byte.TYPE, Short.TYPE,
src/main/org/codehaus/groovy/ast/ClassHelper.java,95,Integer.TYPE, Long.TYPE, Double.TYPE, Float.TYPE, Void.TYPE,
src/main/org/codehaus/groovy/ast/ClassHelper.java,96,Closure.class, GString.class, List.class, Map.class, Range.class,
src/main/org/codehaus/groovy/ast/ClassHelper.java,97,Pattern.class, Script.class, String.class,  Boolean.class,
src/main/org/codehaus/groovy/ast/ClassHelper.java,98,Character.class, Byte.class, Short.class, Integer.class, Long.class,
src/main/org/codehaus/groovy/ast/ClassHelper.java,103,public static final ClassNode
src/main/org/codehaus/groovy/ast/ClassHelper.java,127,OBJECT_TYPE,
src/main/org/codehaus/groovy/ast/ClassHelper.java,128,boolean_TYPE, char_TYPE, byte_TYPE, short_TYPE,
src/main/org/codehaus/groovy/ast/ClassHelper.java,129,int_TYPE, long_TYPE, double_TYPE, float_TYPE,
src/main/org/codehaus/groovy/ast/ClassHelper.java,130,VOID_TYPE, CLOSURE_TYPE, GSTRING_TYPE,
src/main/org/codehaus/groovy/ast/ClassHelper.java,131,LIST_TYPE, MAP_TYPE, RANGE_TYPE, PATTERN_TYPE,
src/main/org/codehaus/groovy/ast/ClassHelper.java,132,SCRIPT_TYPE, STRING_TYPE, Boolean_TYPE, Character_TYPE,
src/main/org/codehaus/groovy/ast/ClassHelper.java,133,Byte_TYPE, Short_TYPE, Integer_TYPE, Long_TYPE,
src/main/org/codehaus/groovy/ast/ClassHelper.java,177,for (int i=0; i<classes.length; i++) {
src/main/org/codehaus/groovy/ast/ClassHelper.java,178,if (c==classes[i]) return types[i];
src/main/org/codehaus/groovy/ast/ClassHelper.java,198,public static ClassNode makeWithoutCaching(String name) {
src/main/org/codehaus/groovy/ast/ClassHelper.java,199,ClassNode cn = new ClassNode(name,Opcodes.ACC_PUBLIC,OBJECT_TYPE);
src/main/org/codehaus/groovy/ast/ClassHelper.java,215,for (int i=0; i<classes.length; i++) {
src/main/org/codehaus/groovy/ast/ClassHelper.java,242,if (cn==boolean_TYPE) {
src/main/org/codehaus/groovy/ast/ClassHelper.java,277,return  cn == boolean_TYPE ||
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,127,msg.append("You are not allowed to overwrite the final ");
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,128,msg.append(getDescription(superCN));
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,129,msg.append(".");
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,130,addError(msg.toString(), cn);
src/main/org/codehaus/groovy/classgen/Verifier.java,461,for (Iterator iter = methods.iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/classgen/Verifier.java,462,MethodNode method = (MethodNode) iter.next();
src/main/org/codehaus/groovy/ast/ClassNode.java,847,&& method.getParameters().length == 0) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,453,if (left instanceof Comparable) {
src/main/groovy/util/NodeBuilder.java,48,import java.util.ArrayList;
src/main/groovy/util/NodeBuilder.java,68,return new Node(getCurrentNode(), name, new ArrayList());
src/main/groovy/util/NodeBuilder.java,76,return new Node(getCurrentNode(), name, attributes, new ArrayList());
src/main/groovy/lang/ObjectRange.java,229,size = toNum - fromNum + 1;
src/main/groovy/lang/ObjectRange.java,236,size = sizeNum.intValue();
src/main/groovy/lang/ObjectRange.java,104,if (from instanceof String || to instanceof String) {
src/main/groovy/lang/ObjectRange.java,109,if (start.length() > end.length()) {
src/main/groovy/lang/ObjectRange.java,110,throw new IllegalArgumentException("Incompatible Strings for Range: starting String is longer than ending string");
src/main/groovy/lang/ObjectRange.java,112,int length = Math.min(start.length(), end.length());
src/main/org/codehaus/groovy/ast/ClassNode.java,381,if (!result.containsKey(methSig)) {
src/main/org/codehaus/groovy/ast/ClassNode.java,383,result.put(methSig, methNode);
src/main/org/codehaus/groovy/ast/ClassNode.java,391,String sig = method.getTypeDescriptor();
src/main/org/codehaus/groovy/ast/ClassNode.java,392,result.put(sig, method);
src/main/org/codehaus/groovy/ast/ClassNode.java,394,return result;
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,199,msg.append(") from ").append(getDescription(superCN));
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,200,msg.append(".");
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,201,addError(msg.toString(), method);
src/main/org/codehaus/groovy/ast/ClassCodeVisitorSupport.java,32,public abstract class ClassCodeVisitorSupport extends CodeVisitorSupport implements GroovyClassVisitor {
src/main/org/codehaus/groovy/ast/ClassCodeVisitorSupport.java,82,protected void addError(String msg, ASTNode expr) {
src/main/org/codehaus/groovy/control/CompilationUnit.java,907,min = j;
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,496,if (left == null || right == null) return false;
src/main/org/codehaus/groovy/ast/ClassNode.java,848,return method;
src/main/groovy/util/BuilderSupport.java,179,closure.call();
src/main/org/codehaus/groovy/runtime/InvokerHelper.java,600,arg = arg.replaceAll("\\r", "\\\\r");      // carriage return
src/main/org/codehaus/groovy/runtime/InvokerHelper.java,601,arg = arg.replaceAll("\\t", "\\\\t");      // tab
src/main/org/codehaus/groovy/runtime/InvokerHelper.java,602,arg = arg.replaceAll("\\f", "\\\\f");      // form feed
src/main/groovy/lang/GroovyClassLoader.java,818,URL[] urls = getURLs();
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,409,else if (value instanceof String) {
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,2032,ConstantExpression constantLongExpression = new ConstantExpression(Numbers.parseInteger("-" + text));
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,2090,loadThis();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,2102,loadThis();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,2117,private void loadThis() {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,2156,PropertyExpression pexp = new PropertyExpression(VariableExpression.THIS_EXPRESSION, name);
src/main/groovy/lang/GString.java,111,return new GString(newValues) {
src/main/groovy/lang/GString.java,112,public String[] getStrings() {
src/main/groovy/lang/GString.java,113,return newStrings;
src/main/groovy/lang/GString.java,131,final String[] finalStrings = newStrings;
src/main/groovy/lang/GString.java,132,return new GString(newValues) {
src/main/groovy/lang/GString.java,134,public String[] getStrings() {
src/main/groovy/lang/GString.java,135,return finalStrings;
src/main/groovy/util/GroovyScriptEngine.java,122,groovyScriptConn = scriptURL.openConnection();
src/main/org/codehaus/groovy/ast/ModuleNode.java,226,name += extractClassFromFileDescription();
src/main/org/codehaus/groovy/classgen/GeneratorContext.java,97,methodName = enclosingMethod.getName() + "_";
src/main/org/codehaus/groovy/classgen/GeneratorContext.java,102,methodName = methodName.replace('<', '_');
src/main/org/codehaus/groovy/classgen/GeneratorContext.java,103,methodName = methodName.replace('>', '_');
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,70,addError("Can't have an abstract method in a non-abstract class." +
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,117,if ("xml".equals(System.getProperty("antlr.ast"))) {
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,122,if ("groovy".equals(System.getProperty("antlr.ast"))) {
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,135,if ("mindmap".equals(System.getProperty("antlr.ast"))) {
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,147,if ("html".equals(System.getProperty("antlr.ast"))) {
src/main/groovy/util/Node.java,121,String childText = (String) child;
src/main/groovy/lang/GroovyClassLoader.java,816,File f = new File(path);
src/main/groovy/lang/GroovyClassLoader.java,817,URL newURL = f.toURI().toURL();
src/main/groovy/lang/GroovyClassLoader.java,822,addURL(newURL);
src/main/groovy/lang/Script.java,112,Object boundClosure = binding.getVariable(name);
src/main/groovy/lang/SpreadMap.java,62,private Map mapData;
src/main/groovy/lang/SpreadMap.java,66,mapData = new HashMap(values.length / 2);
src/main/groovy/lang/SpreadMap.java,69,mapData.put(values[i++], values[i++]);
src/main/groovy/lang/SpreadMap.java,74,this.mapData = map;
src/main/groovy/lang/SpreadMap.java,77,public Object get(Object obj) {
src/main/groovy/lang/SpreadMap.java,78,return mapData.get(obj);
src/main/groovy/lang/SpreadMap.java,96,public int size() {
src/main/groovy/lang/SpreadMap.java,97,return mapData.keySet().size();
src/main/groovy/lang/SpreadMap.java,112,Iterator iter = mapData.keySet().iterator();
src/main/groovy/lang/SpreadMap.java,113,for (; iter.hasNext(); ) {
src/main/groovy/lang/SpreadMap.java,114,Object key = iter.next();
src/main/groovy/lang/SpreadMap.java,127,Iterator iter = mapData.keySet().iterator();
src/main/groovy/lang/SpreadMap.java,128,for (; iter.hasNext(); ) {
src/main/groovy/lang/SpreadMap.java,129,Object key = iter.next();
src/main/groovy/lang/SpreadMap.java,143,if (mapData.isEmpty()) {
src/main/groovy/lang/SpreadMap.java,146,StringBuffer buff = new StringBuffer("*:[");
src/main/groovy/lang/SpreadMap.java,147,Iterator iter = mapData.keySet().iterator();
src/main/groovy/lang/SpreadMap.java,148,for (; iter.hasNext(); ) {
src/main/groovy/lang/SpreadMap.java,150,buff.append(key + ":" + mapData.get(key));
src/main/groovy/lang/SpreadMap.java,152,buff.append(", ");
src/main/groovy/lang/SpreadMap.java,154,buff.append("]");
src/main/groovy/lang/SpreadMap.java,155,return buff.toString();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1729,Label defaultLabel = new Label();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1730,Label afterSwitch = new Label();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1750,Parameter[] parameters = cn.getParameters();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1755,ClassNode type = parameters[p].getType();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1782,Comparator comp = new Comparator() {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1783,public int compare(Object arg0, Object arg1) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1784,ConstructorNode c0 = (ConstructorNode) arg0;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1785,ConstructorNode c1 = (ConstructorNode) arg1;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1788,return descriptor0.compareTo(descriptor1);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1792,return constructors;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1799,visitSpecialConstructorCall(call);
src/main/org/codehaus/groovy/ast/expr/ArgumentListExpression.java,80,addExpression(new VariableExpression(parameter.getName()));
src/main/groovy/lang/IntRange.java,226,value = value + step;
src/main/groovy/lang/IntRange.java,233,value = value + step;
src/main/groovy/lang/IntRange.java,122,return from;
src/main/groovy/lang/IntRange.java,126,return to;
src/main/groovy/lang/IntRange.java,130,return reverse;
src/main/groovy/lang/IntRange.java,145,return to - from + 1;
src/main/groovy/lang/IntRange.java,195,return new IntRange(fromIndex + this.from, toIndex + this.from - 1, reverse);
src/main/groovy/lang/IntRange.java,208,Integer integer = (Integer) value;
src/main/groovy/lang/IntRange.java,209,int i = integer.intValue();
src/main/groovy/lang/IntRange.java,210,return i >= from && i <= to;
src/main/groovy/lang/IntRange.java,219,if (reverse) {
src/main/groovy/lang/IntRange.java,223,int value = from;
src/main/groovy/lang/IntRange.java,224,while (value <= to) {
src/main/groovy/lang/IntRange.java,230,int value = to;
src/main/groovy/lang/IntRange.java,231,while (value >= from) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,2484,if (!elementType.equals(elementExpression.getType())) {
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,240,AST node = importNode.getFirstChild();
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,242,String alias = null;
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,243,if (isType(LITERAL_as, node)) {
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,245,node = node.getFirstChild();
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,246,AST aliasNode = node.getNextSibling();
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,247,alias = identifier(aliasNode);
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,253,ClassNode type = ClassHelper.make(name);
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,256,return;
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,259,AST packageNode = node.getFirstChild();
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,260,String packageName = qualifiedName(packageNode);
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,261,AST nameNode = packageNode.getNextSibling();
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,262,if (isType(STAR, nameNode)) {
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,270,String name = identifier(nameNode);
src/main/org/codehaus/groovy/ast/ModuleNode.java,137,public void addImport(String alias, ClassNode type) {
src/main/org/codehaus/groovy/syntax/ASTHelper.java,20,import org.codehaus.groovy.ast.ClassNode;
src/main/org/codehaus/groovy/syntax/ASTHelper.java,21,import org.codehaus.groovy.ast.ModuleNode;
src/main/org/codehaus/groovy/runtime/InvokerHelper.java,459,try {
src/main/org/codehaus/groovy/runtime/InvokerHelper.java,460,mc.setProperty(object, key, value);
src/main/org/codehaus/groovy/syntax/TokenException.java,10,? message + ". No token"
src/main/org/codehaus/groovy/syntax/TokenException.java,11,: message,
src/main/org/codehaus/groovy/syntax/TokenException.java,12,getLine(token),
src/main/org/codehaus/groovy/syntax/TokenException.java,13,getColumn(token));
src/main/org/codehaus/groovy/syntax/TokenException.java,20,public int getEndColumn() {
src/main/org/codehaus/groovy/syntax/TokenException.java,21,int length = 1;
src/main/org/codehaus/groovy/syntax/TokenException.java,25,return getStartColumn() + length;
src/main/groovy/xml/QName.java,57,import java.io.IOException;
src/main/groovy/xml/QName.java,58,import java.io.ObjectInputStream;
src/main/groovy/xml/QName.java,292,private void readObject(ObjectInputStream in) throws
src/main/groovy/xml/QName.java,293,IOException, ClassNotFoundException {
src/main/groovy/xml/QName.java,294,in.defaultReadObject();
src/main/groovy/xml/QName.java,296,namespaceURI = namespaceURI.intern();
src/main/groovy/xml/QName.java,297,localPart = localPart.intern();
src/main/groovy/xml/QName.java,298,prefix = prefix.intern();
src/main/groovy/ui/GroovyMain.java,61,import java.util.Iterator;
src/main/groovy/ui/GroovyMain.java,62,import java.util.List;
src/main/groovy/ui/GroovyMain.java,71,import org.apache.commons.cli.PosixParser;
src/main/groovy/ui/GroovyMain.java,165,CommandLineParser parser = new PosixParser();
src/main/org/codehaus/groovy/classgen/Verifier.java,432,MethodCallExpression expression = new MethodCallExpression(VariableExpression.THIS_EXPRESSION, method.getName(), arguments);
src/main/org/codehaus/groovy/classgen/Verifier.java,433,expression.setImplicitThis(true);
src/main/org/codehaus/groovy/classgen/Verifier.java,434,Statement code = null;
src/main/org/codehaus/groovy/classgen/Verifier.java,435,if (method.isVoidMethod()) {
src/main/org/codehaus/groovy/classgen/Verifier.java,436,code = new ExpressionStatement(expression);
src/main/org/codehaus/groovy/classgen/Verifier.java,438,code = new ReturnStatement(expression);
src/main/groovy/lang/Closure.java,48,import org.codehaus.groovy.runtime.CurriedClosure;
src/main/groovy/lang/Closure.java,49,import org.codehaus.groovy.runtime.InvokerHelper;
src/main/groovy/lang/Closure.java,174,return DefaultTypeTransformation.castToBoolean(call(candidate));
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,747,MetaClass metaClass = InvokerHelper.getMetaClass(filter);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,750,if (DefaultTypeTransformation.castToBoolean(metaClass.invokeMethod(filter, "isCase", object))) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,729,if (DefaultTypeTransformation.castToBoolean(closure.call(iter.next()))) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,730,return true;
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,440,MethodNode methodNode = new MethodNode(name, modifiers, returnType, parameters, exceptions, code);
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,485,Statement code = statementList(node);
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,487,ConstructorNode constructorNode = classNode.addConstructor(modifiers, parameters, exceptions, code);
src/main/groovy/util/GroovyScriptEngine.java,138,String message = "Cannot open URL: " + scriptURL;
src/main/org/codehaus/groovy/control/SourceUnit.java,143,this(source.getPath(), new URLReaderSource(source, configuration), configuration, loader, er);
src/main/org/codehaus/groovy/antlr/ASTParserException.java,32,super(e.getMessage(), e, e.getLine(), e.getColumn());
src/main/org/codehaus/groovy/antlr/ASTParserException.java,37,super(message, e, e.getLine(), e.getColumn());
src/main/org/codehaus/groovy/ast/ClassCodeVisitorSupport.java,83,int line = expr.getLineNumber();
src/main/org/codehaus/groovy/ast/ClassCodeVisitorSupport.java,84,int col = expr.getColumnNumber();
src/main/org/codehaus/groovy/syntax/RuntimeParserException.java,22,throw new SyntaxException(getMessage(), getNode().getLineNumber(), getNode().getColumnNumber());
src/main/org/codehaus/groovy/syntax/SyntaxException.java,66,public SyntaxException(String message, int line, int column) {
src/main/org/codehaus/groovy/syntax/SyntaxException.java,68,this.line = line;
src/main/org/codehaus/groovy/syntax/SyntaxException.java,69,this.column = column;
src/main/org/codehaus/groovy/syntax/SyntaxException.java,72,public SyntaxException(String message, Throwable cause, int line, int column) {
src/main/org/codehaus/groovy/syntax/SyntaxException.java,74,this.line = line;
src/main/org/codehaus/groovy/syntax/SyntaxException.java,75,this.column = column;
src/main/org/codehaus/groovy/syntax/SyntaxException.java,93,return line;
src/main/org/codehaus/groovy/syntax/SyntaxException.java,101,return column;
src/main/org/codehaus/groovy/syntax/SyntaxException.java,107,public int getStartLine() {
src/main/org/codehaus/groovy/syntax/SyntaxException.java,108,return getLine();
src/main/org/codehaus/groovy/syntax/SyntaxException.java,115,return getStartColumn() + 1;
src/main/org/codehaus/groovy/syntax/Numbers.java,241,return new Long( Long.parseLong(text, radix) );
src/main/org/codehaus/groovy/syntax/Numbers.java,244,return new BigInteger( text, radix );
src/main/org/codehaus/groovy/syntax/Numbers.java,252,BigInteger value = new BigInteger( text, radix );
src/main/groovy/util/Node.java,264,answer.addAll(children);
src/main/groovy/util/Node.java,291,answer.add(childNode);
src/main/groovy/util/Node.java,292,List children = childNode.getDirectChildren();
src/main/groovy/util/Node.java,293,nextLevelChildren.addAll(children);
src/main/org/codehaus/groovy/ast/ClassNode.java,541,return (cn.getName().equals(getName()));
src/main/groovy/sql/SqlWhereVisitor.java,66,case Types.COMPARE_EQUAL :
src/main/groovy/sql/SqlWhereVisitor.java,68,case Types.LOGICAL_AND :
src/main/groovy/sql/SqlWhereVisitor.java,70,case Types.LOGICAL_OR :
src/main/groovy/sql/SqlWhereVisitor.java,72,default :
src/main/groovy/sql/GroovyRowResult.java,77,Object value = result.get(property);
src/main/groovy/sql/GroovyRowResult.java,79,return value;
src/main/groovy/sql/GroovyRowResult.java,87,return value;
src/main/groovy/sql/GroovyRowResult.java,183,public Object remove(Object key) {
src/main/groovy/sql/GroovyRowResult.java,184,return result.remove(key);
src/main/groovy/sql/GroovyRowResult.java,82,return null;
src/main/groovy/sql/GroovyRowResult.java,84,String propertyUpper = property.toUpperCase();
src/main/groovy/sql/GroovyRowResult.java,85,value = result.get(propertyUpper);
src/main/groovy/sql/GroovyRowResult.java,90,return null;
src/main/groovy/sql/GroovyRowResult.java,120,return (obj);
src/main/groovy/sql/GroovyRowResult.java,128,return (result.toString());
src/main/groovy/sql/GroovyRowResult.java,141,return result.containsKey(key);
src/main/groovy/sql/GroovyRowResult.java,159,else
src/main/groovy/sql/GroovyRowResult.java,160,return null;
src/main/groovy/servlet/TemplateServlet.java,46,import java.io.FileReader;
src/main/groovy/servlet/TemplateServlet.java,47,import java.io.IOException;
src/main/groovy/servlet/TemplateServlet.java,142,if (file == null) {
src/main/groovy/servlet/TemplateServlet.java,143,throw new NullPointerException("file");
src/main/groovy/servlet/TemplateServlet.java,154,this.lastModified = file.lastModified();
src/main/groovy/servlet/TemplateServlet.java,155,this.length = file.length();
src/main/groovy/servlet/TemplateServlet.java,167,if (file == null) {
src/main/groovy/servlet/TemplateServlet.java,168,throw new NullPointerException("file");
src/main/groovy/servlet/TemplateServlet.java,170,if (file.lastModified() != this.lastModified) {
src/main/groovy/servlet/TemplateServlet.java,171,return false;
src/main/groovy/servlet/TemplateServlet.java,173,if (file.length() != this.length) {
src/main/groovy/servlet/TemplateServlet.java,174,return false;
src/main/groovy/servlet/TemplateServlet.java,192,private final Map cache;
src/main/groovy/servlet/TemplateServlet.java,208,this.cache = new WeakHashMap();
src/main/groovy/servlet/TemplateServlet.java,232,protected Template getTemplate(File file) throws ServletException {
src/main/groovy/servlet/TemplateServlet.java,234,String key = file.getAbsolutePath();
src/main/groovy/servlet/TemplateServlet.java,257,log("Cache miss.");
src/main/groovy/servlet/TemplateServlet.java,264,if (template == null) {
src/main/groovy/servlet/TemplateServlet.java,265,if (verbose) {
src/main/groovy/servlet/TemplateServlet.java,266,log("Creating new template from file " + file + "...");
src/main/groovy/servlet/TemplateServlet.java,269,try {
src/main/groovy/servlet/TemplateServlet.java,271,template = engine.createTemplate(reader);
src/main/groovy/servlet/TemplateServlet.java,273,throw new ServletException("Creation of template failed: " + e, e);
src/main/groovy/servlet/TemplateServlet.java,275,if (reader != null) {
src/main/groovy/servlet/TemplateServlet.java,276,try {
src/main/groovy/servlet/TemplateServlet.java,277,reader.close();
src/main/groovy/servlet/TemplateServlet.java,285,log("Created and added template to cache. [key=" + key + "]");
src/main/groovy/servlet/TemplateServlet.java,293,throw new ServletException("Template is null? Should not happen here!");
src/main/groovy/servlet/TemplateServlet.java,385,String name = file.getName();
src/main/groovy/servlet/TemplateServlet.java,386,if (!file.exists()) {
src/main/groovy/servlet/TemplateServlet.java,387,response.sendError(HttpServletResponse.SC_NOT_FOUND);
src/main/groovy/servlet/TemplateServlet.java,388,return; // throw new IOException(file.getAbsolutePath());
src/main/groovy/servlet/TemplateServlet.java,390,if (!file.canRead()) {
src/main/groovy/servlet/TemplateServlet.java,391,response.sendError(HttpServletResponse.SC_FORBIDDEN, "Can not read \"" + name + "\"!");
src/main/groovy/servlet/TemplateServlet.java,392,return; // throw new IOException(file.getAbsolutePath());
src/main/groovy/servlet/TemplateServlet.java,398,long getMillis = System.currentTimeMillis();
src/main/groovy/servlet/TemplateServlet.java,399,Template template = getTemplate(file);
src/main/groovy/servlet/TemplateServlet.java,400,getMillis = System.currentTimeMillis() - getMillis;
src/main/groovy/util/Node.java,117,StringBuffer buffer = null;
src/main/groovy/util/Node.java,126,if (buffer == null) {
src/main/groovy/util/Node.java,127,buffer = new StringBuffer();
src/main/groovy/util/Node.java,128,buffer.append(previousText);
src/main/groovy/util/Node.java,130,buffer.append(childText);
src/main/groovy/util/Node.java,134,if (buffer != null) {
src/main/groovy/util/Node.java,135,return buffer.toString();
src/main/groovy/util/Node.java,143,return "";
src/main/groovy/util/slurpersupport/Node.java,155,while (iter.hasNext()) {
src/main/groovy/xml/dom/DOMCategory.java,166,StringBuffer sb = new StringBuffer();
src/main/groovy/xml/dom/DOMCategory.java,261,StringBuffer sb = new StringBuffer();
src/main/groovy/xml/dom/DOMCategory.java,299,for (int i = 0; i < nodeLists.size(); i++) {
src/main/groovy/xml/dom/DOMCategory.java,300,NodeList nl = (NodeList) nodeLists.get(i);
src/main/groovy/xml/dom/DOMCategory.java,308,for (int i = 0; i < nodeLists.size(); i++) {
src/main/groovy/xml/dom/DOMCategory.java,309,NodeList nl = (NodeList) nodeLists.get(i);
src/main/groovy/util/Node.java,118,for (Iterator iter = coll.iterator(); iter.hasNext();) {
src/main/groovy/util/Node.java,119,Object child = iter.next();
src/main/groovy/util/Node.java,209,for (Iterator iter = children().iterator(); iter.hasNext();) {
src/main/groovy/util/Node.java,210,Object child = iter.next();
src/main/groovy/util/Node.java,230,for (Iterator iter = children().iterator(); iter.hasNext();) {
src/main/groovy/util/Node.java,231,Object child = iter.next();
src/main/groovy/util/Node.java,287,List working = new NodeList(nextLevelChildren);
src/main/groovy/util/Node.java,290,Node childNode = (Node) iter.next();
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,783,statement = labelledStatement(node);
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,784,break;
src/main/org/codehaus/groovy/ast/expr/BooleanExpression.java,76,return ret;    }
src/main/org/codehaus/groovy/control/ResolveVisitor.java,767,currentClass = node;
src/main/org/codehaus/groovy/runtime/InvokerHelper.java,605,return "\"" + arg + "\"";
src/main/org/codehaus/groovy/classgen/GeneratorContext.java,105,return "_" + classShortName + methodName + "closure" + getNextInnerClassIdx();
src/main/org/codehaus/groovy/classgen/Verifier.java,526,if (!statements.isEmpty()) {
src/main/org/codehaus/groovy/classgen/Verifier.java,527,Statement code = constructorNode.getCode();
src/main/org/codehaus/groovy/classgen/Verifier.java,528,BlockStatement block = new BlockStatement();
src/main/org/codehaus/groovy/classgen/Verifier.java,530,if (code instanceof BlockStatement) {
src/main/org/codehaus/groovy/classgen/Verifier.java,531,block = (BlockStatement) code;
src/main/org/codehaus/groovy/classgen/Verifier.java,535,otherStatements.add(code);
src/main/org/codehaus/groovy/classgen/Verifier.java,537,if (!otherStatements.isEmpty()) {
src/main/org/codehaus/groovy/classgen/Verifier.java,540,otherStatements.remove(0);
src/main/org/codehaus/groovy/classgen/Verifier.java,541,statements.add(0, firstStatement);
src/main/org/codehaus/groovy/classgen/Verifier.java,543,statements.addAll(otherStatements);
src/main/org/codehaus/groovy/classgen/VariableScopeVisitor.java,448,super.visitConstructorOrMethod(node, isConstructor);
src/main/org/codehaus/groovy/runtime/ConvertedMap.java,7,package org.codehaus.groovy.runtime;
src/main/org/codehaus/groovy/runtime/ConvertedMap.java,9,import java.lang.reflect.Method;
src/main/org/codehaus/groovy/runtime/ConvertedMap.java,10,import java.util.Map;
src/main/org/codehaus/groovy/runtime/ConvertedMap.java,12,import groovy.lang.Closure;
src/main/org/codehaus/groovy/runtime/ConvertedMap.java,20,public class ConvertedMap extends ConversionHandler {
src/main/org/codehaus/groovy/runtime/ConvertedMap.java,26,protected ConvertedMap(Map closures) {
src/main/org/codehaus/groovy/runtime/ConvertedMap.java,27,super(closures);
src/main/org/codehaus/groovy/runtime/ConvertedMap.java,32,Map m = (Map) getDelegate();
src/main/org/codehaus/groovy/runtime/ConvertedMap.java,33,Closure cl = (Closure) m.get(method.getName());
src/main/org/codehaus/groovy/runtime/ConvertedMap.java,34,return cl.call(args);
src/main/org/codehaus/groovy/runtime/ConvertedMap.java,37,public String toString() {
src/main/org/codehaus/groovy/ast/ClassHelper.java,289,return make(Reference.class);
src/main/org/codehaus/groovy/ast/expr/ClosureExpression.java,72,super.setType(ClassHelper.CLOSURE_TYPE);
src/main/org/codehaus/groovy/ast/expr/MethodPointerExpression.java,108,return ClassHelper.CLOSURE_TYPE;
src/main/groovy/text/SimpleTemplateEngine.java,189,sw.write("/* Generated by SimpleTemplateEngine */\n");
src/main/org/codehaus/groovy/tools/RootLoader.java,138,protected Class loadClass(final String name, boolean resolve) throws ClassNotFoundException {
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,35,public class ClassCompletionVerifier extends ClassCodeVisitorSupport {
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,126,StringBuffer msg = new StringBuffer();
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,187,StringBuffer msg = new StringBuffer();
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,291,if ((node.getModifiers() & (Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC | Opcodes.ACC_FINAL)) == 0) {
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,292,addError("The " + getDescription(node) + " is not 'public final static' but is defined in the " +
src/main/groovy/ui/GroovyMain.java,305,if (debug) {
src/main/groovy/ui/GroovyMain.java,306,e.printStackTrace();
src/main/groovy/ui/GroovyMain.java,308,StackTraceElement[] stackTrace = e.getStackTrace();
src/main/groovy/ui/GroovyMain.java,309,for (int i = 0; i < stackTrace.length; i++) {
src/main/groovy/ui/GroovyMain.java,310,StackTraceElement element = stackTrace[i];
src/main/groovy/ui/GroovyMain.java,311,String fileName = element.getFileName();
src/main/groovy/ui/GroovyMain.java,312,if (fileName!=null && !fileName.endsWith(".java")) {
src/main/groovy/ui/GroovyMain.java,313,System.err.println("\tat " + element);
src/main/groovy/xml/MarkupBuilder.java,350,out.print(" />");
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,323,String outerClassName = owner.getName();
src/main/groovy/lang/SpreadMap.java,111,SpreadMap other = (SpreadMap) that;
src/main/groovy/lang/SpreadMap.java,115,if (! DefaultTypeTransformation.compareEqual(get(key), other.get(key)) ) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,555,self.clear();
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,556,self.addAll(answer);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,557,return self;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,644,self.clear();
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,645,self.addAll(answer);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,646,return self;
src/main/groovy/sql/Sql.java,1179,statement.setObject(i, value);
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,67,GroovyLexer lexer = new GroovyLexer(unicodeReader);
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,18,import org.codehaus.groovy.ast.ClassCodeVisitorSupport;
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,19,import org.codehaus.groovy.ast.ClassHelper;
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,20,import org.codehaus.groovy.ast.ClassNode;
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,21,import org.codehaus.groovy.ast.FieldNode;
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,22,import org.codehaus.groovy.ast.MethodNode;
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,23,import org.codehaus.groovy.ast.Parameter;
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,14,import java.lang.reflect.Modifier;
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,64,if (Modifier.isAbstract(node.getModifiers())) return;
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,82,if (!Modifier.isAbstract(node.getModifiers())) return;
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,83,if (!Modifier.isFinal(node.getModifiers())) return;
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,93,checkClassForModifier(node, Modifier.isTransient(node.getModifiers()), "transient");
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,94,checkClassForModifier(node, Modifier.isVolatile(node.getModifiers()), "volatile");
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,115,if (!Modifier.isAbstract(methodNode.getModifiers())) return;
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,116,if (Modifier.isAbstract(currentClass.getModifiers())) return;
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,125,if (!Modifier.isFinal(superCN.getModifiers())) return;
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,152,if (Modifier.isFinal(method.getModifiers())) {
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,156,if (Modifier.isStatic(method.getModifiers()) && !isConstructor(method)) {
src/main/groovy/lang/Closure.java,433,return (new CurriedClosure(this,arguments)).asWritable();
src/main/groovy/lang/Closure.java,272,public Closure curry(final Object arguments[]) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1854,if (field != null) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,793,onLineNumber(statement, "visitTryCatchFinally");
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,6365,new Thread(new Runnable() {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,6366,public void run() {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,6368,closure.call(socket);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,6378,return socket;
src/main/groovy/ui/GroovyMain.java,238,GroovyMain main = new GroovyMain();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,582,onLineNumber(block, "visitBlockStatement");
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,298,classNode = new ClassNode(dot(getPackageName(), name), modifiers, superClass, interfaces, null);
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,305,classNode = null;
src/main/groovy/util/slurpersupport/NoChildren.java,40,super(parent, name, "*", namespaceTagHints);
src/main/groovy/util/slurpersupport/NoChildren.java,46,public int size() {
src/main/groovy/util/slurpersupport/NoChildren.java,47,return 0;
src/main/groovy/util/slurpersupport/NoChildren.java,53,public String text() {
src/main/groovy/util/slurpersupport/NoChildren.java,54,return "";
src/main/groovy/util/slurpersupport/NoChildren.java,60,public GPathResult parents() {
src/main/groovy/util/slurpersupport/NoChildren.java,62,throw new GroovyRuntimeException("parents() not implemented yet");
src/main/groovy/util/slurpersupport/NoChildren.java,68,public Iterator childNodes() {
src/main/groovy/util/slurpersupport/NoChildren.java,69,return iterator();
src/main/groovy/util/slurpersupport/NoChildren.java,75,public Iterator iterator() {
src/main/groovy/util/slurpersupport/NoChildren.java,76,return new Iterator() {
src/main/groovy/util/slurpersupport/NoChildren.java,77,public boolean hasNext() {
src/main/groovy/util/slurpersupport/NoChildren.java,81,public Object next() {
src/main/groovy/util/slurpersupport/NoChildren.java,82,return null;
src/main/groovy/util/slurpersupport/NoChildren.java,85,public void remove() {
src/main/groovy/util/slurpersupport/NoChildren.java,86,throw new UnsupportedOperationException();
src/main/groovy/util/slurpersupport/NoChildren.java,94,public GPathResult find(final Closure closure) {
src/main/groovy/util/slurpersupport/NoChildren.java,95,return this;
src/main/groovy/util/slurpersupport/NoChildren.java,101,public GPathResult findAll(final Closure closure) {
src/main/groovy/util/slurpersupport/NoChildren.java,102,return this;
src/main/groovy/util/slurpersupport/NoChildren.java,108,public Iterator nodeIterator() {
src/main/groovy/util/slurpersupport/NoChildren.java,109,return iterator();
src/main/groovy/util/slurpersupport/NoChildren.java,115,public Writer writeTo(final Writer out) throws IOException {
src/main/groovy/util/slurpersupport/NoChildren.java,116,return out;
src/main/groovy/util/slurpersupport/NoChildren.java,122,public void build(final GroovyObject builder) {
src/main/groovy/util/slurpersupport/NoChildren.java,125,protected void replaceNode(final Closure newValue) {
src/main/groovy/util/slurpersupport/NoChildren.java,129,protected void replaceBody(final Object newValue) {
src/main/groovy/util/slurpersupport/NoChildren.java,133,protected void appendNode(final Object newValue) {
src/main/org/codehaus/groovy/classgen/BytecodeHelper.java,446,if (n instanceof Integer) {
src/main/org/codehaus/groovy/runtime/CurriedClosure.java,23,final Object newCurriedParams[] = new Object[curriedParams.length + arguments.length];
src/main/groovy/lang/ReadOnlyPropertyException.java,57,public ReadOnlyPropertyException(String property, Class type) {
src/main/groovy/servlet/GroovyServlet.java,148,response.setStatus(HttpServletResponse.SC_OK);
src/main/groovy/servlet/GroovyServlet.java,192,response.flushBuffer();
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1028,defaultStatement = statement(child.getNextSibling());
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,6645,protected static class ProcessRunner implements Runnable {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,6646,Process process;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,6647,private boolean finished;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,6649,public ProcessRunner(Process process) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,6650,this.process = process;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,6654,try {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,6655,process.waitFor();
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,6658,synchronized (this) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,6659,notifyAll();
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,6660,finished = true;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,6664,public synchronized void waitForOrKill(long millis) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,6665,if (!finished) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,6666,try {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,6667,wait(millis);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,6670,if (!finished) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,6671,process.destroy();
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,6692,this.in = in;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,6695,public void run() {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,6696,InputStreamReader isr = new InputStreamReader(in);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,6697,BufferedReader br = new BufferedReader(isr);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,6698,try {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,6702,throw new GroovyRuntimeException("exception while reading process stream", e);
src/main/org/codehaus/groovy/ant/Groovyc.java,396,m.setFrom("*.groovy");
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,3015,int tempIdx = compileStack.defineTemporaryVariable("postfix_" + method, true);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,539,return self;
src/main/org/codehaus/groovy/ast/ModuleNode.java,228,String baseClassName = null;
src/main/org/codehaus/groovy/ast/ModuleNode.java,229,if (unit != null) baseClassName = unit.getConfig().getScriptBaseClass();
src/main/org/codehaus/groovy/ast/ModuleNode.java,230,ClassNode baseClass = null;
src/main/org/codehaus/groovy/ast/ModuleNode.java,231,if (baseClassName!=null) {
src/main/org/codehaus/groovy/ast/ModuleNode.java,232,baseClass = ClassHelper.make(baseClassName);
src/main/org/codehaus/groovy/ast/ModuleNode.java,234,if (baseClass == null) {
src/main/org/codehaus/groovy/ast/ModuleNode.java,235,baseClass = ClassHelper.SCRIPT_TYPE;
src/main/groovy/lang/GroovyClassLoader.java,669,try {
src/main/groovy/lang/GroovyClassLoader.java,672,URL source = resourceLoader.loadGroovySource(name);
src/main/groovy/lang/GroovyClassLoader.java,678,removeClassCacheEntry(name);
src/main/groovy/lang/GroovyClassLoader.java,680,setClassCacheEntry(cls);
src/main/groovy/lang/GroovyClassLoader.java,713,sourceCache.remove(className);
src/main/groovy/util/OrderBy.java,89,if (value1 == value2) {
src/main/groovy/util/OrderBy.java,90,continue;
src/main/groovy/util/OrderBy.java,92,if (value1 == null) {
src/main/groovy/util/OrderBy.java,93,return -1;
src/main/groovy/util/OrderBy.java,95,if (value1 instanceof Comparable) {
src/main/groovy/util/OrderBy.java,96,Comparable c1 = (Comparable) value1;
src/main/groovy/util/OrderBy.java,99,if (value1.equals(value2)) {
src/main/groovy/util/OrderBy.java,100,continue;
src/main/groovy/util/OrderBy.java,102,return value1.hashCode() - value2.hashCode();
src/main/org/codehaus/groovy/ast/ImportNode.java,72,return "import " + type.getName();
src/main/org/codehaus/groovy/ast/ImportNode.java,88,return type.getName();
src/main/org/codehaus/groovy/control/ResolveVisitor.java,686,if (left instanceof ClassExpression && be.getRightExpression() instanceof ListExpression) {
src/main/org/codehaus/groovy/control/ResolveVisitor.java,688,ListExpression list = (ListExpression) be.getRightExpression();
src/main/org/codehaus/groovy/control/ResolveVisitor.java,690,if (list.getExpressions().isEmpty()) {
src/main/org/codehaus/groovy/control/ResolveVisitor.java,691,return new ClassExpression(left.getType().makeArray());
src/main/org/codehaus/groovy/ant/Groovy.java,335,if ("org.apache.commons.grant.GrantProject".equals(project.getClass().getName())) {
src/main/org/codehaus/groovy/ant/Groovy.java,347,Thread.currentThread().setContextClassLoader(GroovyShell.class.getClassLoader());
src/main/org/codehaus/groovy/runtime/MethodClosure.java,3,import java.lang.reflect.Method;
src/main/org/codehaus/groovy/runtime/MethodClosure.java,4,import java.security.AccessController;
src/main/org/codehaus/groovy/runtime/MethodClosure.java,5,import java.security.PrivilegedAction;
src/main/org/codehaus/groovy/runtime/MethodClosure.java,29,Method[] methods = (Method[]) AccessController.doPrivileged(new  PrivilegedAction() {
src/main/org/codehaus/groovy/runtime/MethodClosure.java,30,public Object run() {
src/main/org/codehaus/groovy/runtime/MethodClosure.java,31,return clazz.getMethods();
src/main/org/codehaus/groovy/runtime/MethodClosure.java,34,for (int j = 0; j < methods.length; j++) {
src/main/org/codehaus/groovy/runtime/MethodClosure.java,35,if (method.equals(methods[j].getName()) && methods[j].getParameterTypes().length > maximumNumberOfParameters) {
src/main/org/codehaus/groovy/runtime/MethodClosure.java,39,methods = (Method[]) AccessController.doPrivileged(new  PrivilegedAction() {
src/main/org/codehaus/groovy/runtime/MethodClosure.java,40,public Object run() {
src/main/org/codehaus/groovy/runtime/MethodClosure.java,41,return clazz.getDeclaredMethods();
src/main/org/codehaus/groovy/runtime/MethodClosure.java,44,for (int j = 0; j < methods.length; j++) {
src/main/org/codehaus/groovy/runtime/MethodClosure.java,45,if (method.equals(methods[j].getName()) && methods[j].getParameterTypes().length > maximumNumberOfParameters) {
src/main/groovy/sql/DataSet.java,58,import java.util.logging.Level;
src/main/groovy/sql/Sql.java,57,import java.util.logging.Level;
src/main/groovy/sql/Sql.java,372,log.fine(sql);
src/main/groovy/sql/Sql.java,377,log.log(Level.FINE, "Failed to execute: " + sql, e);
src/main/groovy/sql/Sql.java,394,log.fine(sql);
src/main/groovy/sql/Sql.java,402,log.log(Level.FINE, "Failed to execute: " + sql, e);
src/main/groovy/sql/Sql.java,437,log.fine(sql);
src/main/groovy/sql/Sql.java,446,log.log(Level.FINE, "Failed to execute: " + sql, e);
src/main/groovy/sql/Sql.java,470,log.fine(sql);
src/main/groovy/sql/Sql.java,482,log.log(Level.FINE, "Failed to execute: " + sql, e);
src/main/groovy/sql/Sql.java,600,log.fine(sql);
src/main/groovy/sql/Sql.java,608,log.log(Level.FINE, "Failed to execute: " + sql, e);
src/main/groovy/sql/Sql.java,632,log.log(Level.FINE, "Failed to execute: " + sql, e);
src/main/groovy/sql/Sql.java,694,log.fine(sql);
src/main/groovy/sql/Sql.java,703,log.log(Level.FINE, "Failed to execute: " + sql, e);
src/main/groovy/sql/Sql.java,728,log.log(Level.FINE, "Failed to execute: " + sql, e);
src/main/groovy/sql/Sql.java,862,log.fine(sql);
src/main/groovy/sql/Sql.java,868,log.log(Level.FINE, "Failed to execute: " + sql, e);
src/main/groovy/sql/Sql.java,884,log.fine(sql);
src/main/groovy/sql/Sql.java,909,log.log(Level.WARNING, "Failed to execute: " + sql, e);
src/main/groovy/sql/Sql.java,943,public void close() throws SQLException {
src/main/groovy/sql/Sql.java,1035,log.warning("In Groovy SQL please do not use quotes around dynamic expressions " +
src/main/groovy/util/GroovyTestCase.java,286,fail("Closure " + code + " should have failed with an exception of type " + clazz.getName());
src/main/groovy/util/GroovyTestCase.java,288,fail("Closure " + code + " should have failed with an exception of type " + clazz.getName() + ", instead got Exception " + th);
src/main/groovy/lang/ObjectRange.java,75,this.reverse = ScriptBytecodeAdapter.compareGreaterThan(from, to);
src/main/groovy/lang/IntRange.java,222,if (step >= 0) {
src/main/groovy/lang/ObjectRange.java,295,if (step >= 0) {
src/main/groovy/util/slurpersupport/Attributes.java,65,return new Attribute(Attributes.this.attributeName,
src/main/org/codehaus/groovy/tools/LoaderConfiguration.java,246,String[] paths = path.split(File.pathSeparator);
src/main/org/codehaus/groovy/tools/LoaderConfiguration.java,248,addFile(new File(paths[i]));
src/main/groovy/servlet/AbstractHttpServlet.java,191,Matcher matcher = resourceNameMatcher;
src/main/groovy/servlet/AbstractHttpServlet.java,192,if (matcher != null) {
src/main/groovy/servlet/AbstractHttpServlet.java,193,matcher.reset(name);
src/main/groovy/servlet/AbstractHttpServlet.java,194,String replaced;
src/main/groovy/servlet/AbstractHttpServlet.java,195,if (resourceNameReplaceAll) {
src/main/groovy/servlet/AbstractHttpServlet.java,196,replaced = resourceNameMatcher.replaceAll(resourceNameReplacement);
src/main/groovy/servlet/AbstractHttpServlet.java,198,replaced = resourceNameMatcher.replaceFirst(resourceNameReplacement);
src/main/groovy/servlet/AbstractHttpServlet.java,200,if (!name.equals(replaced)) {
src/main/groovy/servlet/AbstractHttpServlet.java,201,if (verbose) {
src/main/groovy/servlet/AbstractHttpServlet.java,202,log("Replaced resource name \"" + name + "\" with \"" + replaced + "\".");
src/main/groovy/servlet/AbstractHttpServlet.java,275,return uri;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1509,makeCall(new ClassExpression(getOutermostClass().getSuperClass()),
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,56,checkMethodsForOverwritingFinal(node);
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,167,private void checkMethodsForOverwritingFinal(ClassNode cn) {
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,188,msg.append("You are not allowed to overwrite the final method ").append(method.getName());
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,481,methodName.startsWith("super$");
src/main/groovy/text/XmlTemplateEngine.java,63,out.print("out.print(\"");
src/main/groovy/text/XmlTemplateEngine.java,68,out.print("\\n\");");
src/main/groovy/util/AntBuilder.java,173,Object task = node;
src/main/groovy/util/AntBuilder.java,175,if (node instanceof UnknownElement) {
src/main/groovy/util/AntBuilder.java,176,final UnknownElement unknownElement = (UnknownElement) node;
src/main/groovy/util/AntBuilder.java,177,unknownElement.maybeConfigure();
src/main/groovy/util/AntBuilder.java,178,task = unknownElement.getRealThing();
src/main/groovy/util/AntBuilder.java,181,lastCompletedNode = task;
src/main/groovy/util/AntBuilder.java,183,if (task instanceof Task) {
src/main/org/codehaus/groovy/control/CompilationUnit.java,509,List classes = module.getClasses();
src/main/org/codehaus/groovy/control/CompilationUnit.java,510,for (Iterator iter = classes.iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/control/CompilationUnit.java,511,ClassNode start = (ClassNode) iter.next();
src/main/org/codehaus/groovy/control/CompilationUnit.java,512,ClassNode cn = start;
src/main/org/codehaus/groovy/control/CompilationUnit.java,514,do {
src/main/org/codehaus/groovy/control/CompilationUnit.java,515,if (parents.contains(cn.getName())) {
src/main/org/codehaus/groovy/control/CompilationUnit.java,516,getErrorCollector().addErrorAndContinue(
src/main/org/codehaus/groovy/control/CompilationUnit.java,518,);
src/main/org/codehaus/groovy/control/CompilationUnit.java,521,parents.add(cn.getName());
src/main/org/codehaus/groovy/control/CompilationUnit.java,522,cn = cn.getSuperClass();
src/main/org/codehaus/groovy/control/CompilationUnit.java,526,errorCollector.failIfErrors();
src/main/groovy/servlet/AbstractHttpServlet.java,204,name = replaced;
src/main/groovy/servlet/AbstractHttpServlet.java,212,URL url = servletContext.getResource("/" + name);
src/main/org/codehaus/groovy/runtime/CurriedClosure.java,17,super(uncurriedClosure);
src/main/org/codehaus/groovy/control/CompilationUnit.java,475,for (Iterator it = phaseOperations[phase].iterator(); it.hasNext();) {
src/main/org/codehaus/groovy/control/CompilationUnit.java,476,Object operation = it.next();
src/main/org/codehaus/groovy/control/CompilationUnit.java,477,if (operation instanceof PrimaryClassNodeOperation) {
src/main/org/codehaus/groovy/control/CompilationUnit.java,478,applyToPrimaryClassNodes((PrimaryClassNodeOperation) operation);
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,660,annotations.add(annotation(node));
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,325,interfaceClassLoadingClass = new InnerClassNode(owner, name, 4128, ClassHelper.OBJECT_TYPE);
src/main/groovy/sql/DataSet.java,125,Connection connection = createConnection();
src/main/groovy/sql/DataSet.java,126,PreparedStatement statement = null;
src/main/groovy/sql/DataSet.java,127,try {
src/main/groovy/sql/DataSet.java,128,statement = connection.prepareStatement(buffer.toString());
src/main/groovy/sql/DataSet.java,129,int i = 1;
src/main/groovy/sql/DataSet.java,134,int answer = statement.executeUpdate();
src/main/groovy/sql/DataSet.java,135,if (answer != 1) {
src/main/groovy/sql/DataSet.java,139,catch (SQLException e) {
src/main/groovy/sql/DataSet.java,141,throw e;
src/main/groovy/sql/DataSet.java,143,finally {
src/main/groovy/sql/DataSet.java,144,closeResources(connection, statement);
src/main/groovy/sql/Sql.java,625,log.fine(sql);
src/main/groovy/sql/Sql.java,720,log.fine(sql);
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,342,output.addClass(classNode);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,6653,public void run() {
src/main/groovy/lang/Script.java,196,GroovyShell shell = new GroovyShell(binding);
src/main/groovy/lang/Script.java,207,GroovyShell shell = new GroovyShell(binding);
src/main/groovy/lang/Script.java,215,GroovyShell shell = new GroovyShell(binding);
src/main/org/codehaus/groovy/classgen/Verifier.java,472,paramValues.add(parameter.getInitialExpression());
src/main/org/codehaus/groovy/classgen/Verifier.java,484,arguments.addExpression(parameters[i].getInitialExpression());
src/main/org/codehaus/groovy/classgen/Verifier.java,489,arguments.addExpression(new VariableExpression(parameters[i].getName()));
src/main/org/codehaus/groovy/classgen/Verifier.java,494,arguments.addExpression(new VariableExpression(parameters[i].getName()));
src/main/org/codehaus/groovy/classgen/Verifier.java,310,if (s == null) return;
src/main/groovy/sql/Sql.java,1235,if (dataSource != null) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,5062,List vals = Arrays.asList(line.split(sep));
src/main/groovy/lang/GroovyClassLoader.java,221,return parseClass(new GroovyCodeSource(file));
src/main/groovy/lang/GroovyClassLoader.java,231,public Class parseClass(String text, String fileName) throws CompilationFailedException {
src/main/groovy/lang/GroovyShell.java,435,public Object evaluate(String scriptText, String fileName, String codeBase) throws CompilationFailedException {
src/main/groovy/lang/GroovyShell.java,449,return evaluate(new GroovyCodeSource(file));
src/main/groovy/lang/GroovyShell.java,457,public Object evaluate(String scriptText) throws CompilationFailedException {
src/main/groovy/lang/GroovyShell.java,534,return parse(new GroovyCodeSource(file));
src/main/org/codehaus/groovy/tools/Utilities.java,34,private static String eol = System.getProperty( "line.separator", "\n" );
src/main/org/codehaus/groovy/classgen/Verifier.java,394,new MethodNode(getterName, node.getModifiers(), node.getType(), Parameter.EMPTY_ARRAY, ClassNode.EMPTY_ARRAY, getterBlock);
src/main/org/codehaus/groovy/classgen/Verifier.java,402,new MethodNode(secondGetterName, node.getModifiers(), node.getType(), Parameter.EMPTY_ARRAY, ClassNode.EMPTY_ARRAY, getterBlock);
src/main/org/codehaus/groovy/classgen/Verifier.java,411,new MethodNode(setterName, node.getModifiers(), ClassHelper.VOID_TYPE, setterParameterTypes, ClassNode.EMPTY_ARRAY, setterBlock);
src/main/groovy/lang/GroovyShell.java,266,try {
src/main/org/codehaus/groovy/syntax/RuntimeParserException.java,18,super(message + ".\nNode: " + node.getClass().getName(), node);
src/main/org/codehaus/groovy/runtime/InvokerHelper.java,341,String stringToCompare = toString(left);
src/main/groovy/sql/Sql.java,192,public static final OutParameter ARRAY         = new OutParameter(){ public int getType() { return Types.ARRAY; }};
src/main/groovy/sql/Sql.java,193,public static final OutParameter BIGINT        = new OutParameter(){ public int getType() { return Types.BIGINT; }};
src/main/groovy/sql/Sql.java,194,public static final OutParameter BINARY        = new OutParameter(){ public int getType() { return Types.BINARY; }};
src/main/groovy/sql/Sql.java,195,public static final OutParameter BIT           = new OutParameter(){ public int getType() { return Types.BIT; }};
src/main/groovy/sql/Sql.java,196,public static final OutParameter BLOB          = new OutParameter(){ public int getType() { return Types.BLOB; }};
src/main/groovy/sql/Sql.java,197,public static final OutParameter BOOLEAN       = new OutParameter(){ public int getType() { return Types.BOOLEAN; }};
src/main/groovy/sql/Sql.java,198,public static final OutParameter CHAR          = new OutParameter(){ public int getType() { return Types.CHAR; }};
src/main/groovy/sql/Sql.java,199,public static final OutParameter CLOB          = new OutParameter(){ public int getType() { return Types.CLOB; }};
src/main/groovy/sql/Sql.java,200,public static final OutParameter DATALINK      = new OutParameter(){ public int getType() { return Types.DATALINK; }};
src/main/groovy/sql/Sql.java,201,public static final OutParameter DATE          = new OutParameter(){ public int getType() { return Types.DATE; }};
src/main/groovy/sql/Sql.java,202,public static final OutParameter DECIMAL       = new OutParameter(){ public int getType() { return Types.DECIMAL; }};
src/main/groovy/sql/Sql.java,203,public static final OutParameter DISTINCT      = new OutParameter(){ public int getType() { return Types.DISTINCT; }};
src/main/groovy/sql/Sql.java,204,public static final OutParameter DOUBLE        = new OutParameter(){ public int getType() { return Types.DOUBLE; }};
src/main/groovy/sql/Sql.java,205,public static final OutParameter FLOAT         = new OutParameter(){ public int getType() { return Types.FLOAT; }};
src/main/groovy/sql/Sql.java,206,public static final OutParameter INTEGER       = new OutParameter(){ public int getType() { return Types.INTEGER; }};
src/main/groovy/sql/Sql.java,207,public static final OutParameter JAVA_OBJECT   = new OutParameter(){ public int getType() { return Types.JAVA_OBJECT; }};
src/main/groovy/sql/Sql.java,208,public static final OutParameter LONGVARBINARY = new OutParameter(){ public int getType() { return Types.LONGVARBINARY; }};
src/main/groovy/sql/Sql.java,209,public static final OutParameter LONGVARCHAR   = new OutParameter(){ public int getType() { return Types.LONGVARCHAR; }};
src/main/groovy/sql/Sql.java,210,public static final OutParameter NULL          = new OutParameter(){ public int getType() { return Types.NULL; }};
src/main/groovy/sql/Sql.java,211,public static final OutParameter NUMERIC       = new OutParameter(){ public int getType() { return Types.NUMERIC; }};
src/main/groovy/sql/Sql.java,212,public static final OutParameter OTHER         = new OutParameter(){ public int getType() { return Types.OTHER; }};
src/main/groovy/sql/Sql.java,213,public static final OutParameter REAL          = new OutParameter(){ public int getType() { return Types.REAL; }};
src/main/groovy/sql/Sql.java,214,public static final OutParameter REF           = new OutParameter(){ public int getType() { return Types.REF; }};
src/main/groovy/sql/Sql.java,215,public static final OutParameter SMALLINT      = new OutParameter(){ public int getType() { return Types.SMALLINT; }};
src/main/groovy/sql/Sql.java,216,public static final OutParameter STRUCT        = new OutParameter(){ public int getType() { return Types.STRUCT; }};
src/main/groovy/sql/Sql.java,217,public static final OutParameter TIME          = new OutParameter(){ public int getType() { return Types.TIME; }};
src/main/groovy/sql/Sql.java,218,public static final OutParameter TIMESTAMP     = new OutParameter(){ public int getType() { return Types.TIMESTAMP; }};
src/main/groovy/sql/Sql.java,219,public static final OutParameter TINYINT       = new OutParameter(){ public int getType() { return Types.TINYINT; }};
src/main/groovy/sql/Sql.java,220,public static final OutParameter VARBINARY     = new OutParameter(){ public int getType() { return Types.VARBINARY; }};
src/main/groovy/sql/Sql.java,221,public static final OutParameter VARCHAR       = new OutParameter(){ public int getType() { return Types.VARCHAR; }};
src/main/groovy/sql/Sql.java,223,public static InParameter ARRAY(Object value) { return in(Types.ARRAY, value); }
src/main/groovy/sql/Sql.java,224,public static InParameter BIGINT(Object value) { return in(Types.BIGINT, value); }
src/main/groovy/sql/Sql.java,225,public static InParameter BINARY(Object value) { return in(Types.BINARY, value); }
src/main/groovy/sql/Sql.java,226,public static InParameter BIT(Object value) { return in(Types.BIT, value); }
src/main/groovy/sql/Sql.java,227,public static InParameter BLOB(Object value) { return in(Types.BLOB, value); }
src/main/groovy/sql/Sql.java,228,public static InParameter BOOLEAN(Object value) { return in(Types.BOOLEAN, value); }
src/main/groovy/sql/Sql.java,229,public static InParameter CHAR(Object value) { return in(Types.CHAR, value); }
src/main/groovy/sql/Sql.java,230,public static InParameter CLOB(Object value) { return in(Types.CLOB, value); }
src/main/groovy/sql/Sql.java,231,public static InParameter DATALINK(Object value) { return in(Types.DATALINK, value); }
src/main/groovy/sql/Sql.java,232,public static InParameter DATE(Object value) { return in(Types.DATE, value); }
src/main/groovy/sql/Sql.java,233,public static InParameter DECIMAL(Object value) { return in(Types.DECIMAL, value); }
src/main/groovy/sql/Sql.java,234,public static InParameter DISTINCT(Object value) { return in(Types.DISTINCT, value); }
src/main/groovy/sql/Sql.java,235,public static InParameter DOUBLE(Object value) { return in(Types.DOUBLE, value); }
src/main/groovy/sql/Sql.java,236,public static InParameter FLOAT(Object value) { return in(Types.FLOAT, value); }
src/main/groovy/sql/Sql.java,237,public static InParameter INTEGER(Object value) { return in(Types.INTEGER, value); }
src/main/groovy/sql/Sql.java,238,public static InParameter JAVA_OBJECT(Object value) { return in(Types.JAVA_OBJECT, value); }
src/main/groovy/sql/Sql.java,239,public static InParameter LONGVARBINARY(Object value) { return in(Types.LONGVARBINARY, value); }
src/main/groovy/sql/Sql.java,240,public static InParameter LONGVARCHAR(Object value) { return in(Types.LONGVARCHAR, value); }
src/main/groovy/sql/Sql.java,241,public static InParameter NULL(Object value) { return in(Types.NULL, value); }
src/main/groovy/sql/Sql.java,242,public static InParameter NUMERIC(Object value) { return in(Types.NUMERIC, value); }
src/main/groovy/sql/Sql.java,243,public static InParameter OTHER(Object value) { return in(Types.OTHER, value); }
src/main/groovy/sql/Sql.java,244,public static InParameter REAL(Object value) { return in(Types.REAL, value); }
src/main/groovy/sql/Sql.java,245,public static InParameter REF(Object value) { return in(Types.REF, value); }
src/main/groovy/sql/Sql.java,246,public static InParameter SMALLINT(Object value) { return in(Types.SMALLINT, value); }
src/main/groovy/sql/Sql.java,247,public static InParameter STRUCT(Object value) { return in(Types.STRUCT, value); }
src/main/groovy/sql/Sql.java,248,public static InParameter TIME(Object value) { return in(Types.TIME, value); }
src/main/groovy/sql/Sql.java,249,public static InParameter TIMESTAMP(Object value) { return in(Types.TIMESTAMP, value); }
src/main/groovy/sql/Sql.java,250,public static InParameter TINYINT(Object value) { return in(Types.TINYINT, value); }
src/main/groovy/sql/Sql.java,251,public static InParameter VARBINARY(Object value) { return in(Types.VARBINARY, value); }
src/main/groovy/sql/Sql.java,252,public static InParameter VARCHAR(Object value) { return in(Types.VARCHAR, value); }
src/main/groovy/sql/Sql.java,369,configure(statement);
src/main/groovy/sql/Sql.java,396,setParameters(params, statement);
src/main/groovy/sql/Sql.java,397,configure(statement);
src/main/groovy/sql/Sql.java,434,configure(statement);
src/main/groovy/sql/Sql.java,472,setParameters(params, statement);
src/main/groovy/sql/Sql.java,473,configure(statement);
src/main/groovy/sql/Sql.java,560,setParameters(params, statement);
src/main/groovy/sql/Sql.java,561,configure(statement);
src/main/groovy/sql/Sql.java,602,configure(statement);
src/main/groovy/sql/Sql.java,627,configure(statement);
src/main/groovy/sql/Sql.java,653,configure(statement);
src/main/groovy/sql/Sql.java,755,setParameters(params, statement);
src/main/groovy/sql/Sql.java,756,configure(statement);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,3165,lineNumber = line;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,3166,columnNumber = col;
src/main/groovy/lang/GroovyClassLoader.java,751,private URL getSourceFile(String name) {
src/main/groovy/lang/GroovyClassLoader.java,752,String filename = name.replace('.', '/') + config.getDefaultScriptExtension();
src/main/groovy/lang/GroovyClassLoader.java,753,URL ret = getResource(filename);
src/main/groovy/lang/GroovyClassLoader.java,755,String fileWithoutPackage = filename;
src/main/groovy/lang/GroovyClassLoader.java,757,int index = fileWithoutPackage.lastIndexOf('/');
src/main/groovy/lang/GroovyClassLoader.java,761,if (path.exists() && path.isDirectory()) {
src/main/groovy/lang/GroovyClassLoader.java,762,File file = new File(path, fileWithoutPackage);
src/main/groovy/lang/GroovyClassLoader.java,763,if (file.exists()) {
src/main/groovy/lang/GroovyClassLoader.java,766,File parent = file.getParentFile();
src/main/groovy/lang/GroovyClassLoader.java,767,String[] files = parent.list();
src/main/groovy/lang/GroovyClassLoader.java,768,for (int j = 0; j < files.length; j++) {
src/main/groovy/lang/GroovyClassLoader.java,769,if (files[j].equals(fileWithoutPackage)) return ret;
src/main/groovy/lang/GroovyClassLoader.java,774,return null;
src/main/groovy/lang/GroovyClassLoader.java,794,if (source.getProtocol().equals("file")) {
src/main/org/codehaus/groovy/ast/ClassHelper.java,107,MAP_TYPE = new ClassNode(Map.class),         RANGE_TYPE = new ClassNode(Range.class),
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1946,Object answer = map.get(key);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1947,if (answer == null) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1948,answer = defaultValue;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1949,map.put(key, answer);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1951,return answer;
src/main/org/codehaus/groovy/ast/ClassCodeVisitorSupport.java,58,visitConstructorOrMethod(node,true);
src/main/org/codehaus/groovy/ast/ClassCodeVisitorSupport.java,62,visitConstructorOrMethod(node,false);
src/main/org/codehaus/groovy/ant/Groovy.java,91,private Vector filesets = new Vector();
src/main/org/codehaus/groovy/ant/Groovy.java,219,if (srcFile == null && command.length() == 0
src/main/org/codehaus/groovy/ant/Groovy.java,230,FileSet fs = (FileSet) filesets.elementAt(i);
src/main/org/codehaus/groovy/ant/Groovy.java,401,line = new StringBuffer();
src/main/org/codehaus/groovy/control/ErrorCollector.java,347,writer.println();
src/main/org/codehaus/groovy/control/MultipleCompilationErrorsException.java,88,return super.getMessage() + ", " + data.toString();
src/main/groovy/util/GroovyScriptEngine.java,51,import java.util.Iterator;
src/main/groovy/util/GroovyScriptEngine.java,94,private Map scriptCache = Collections.synchronizedMap(new HashMap());
src/main/groovy/util/GroovyScriptEngine.java,101,private Map dependencies = new HashMap();
src/main/groovy/util/GroovyScriptEngine.java,117,for (int i = 0; i < roots.length; i++) {
src/main/groovy/util/GroovyScriptEngine.java,120,scriptURL = new URL(roots[i], resourceName);
src/main/groovy/util/GroovyScriptEngine.java,131,String message = "Malformed URL: " + roots[i] + ", " + resourceName;
src/main/groovy/util/GroovyScriptEngine.java,220,public void setParentClassLoader(ClassLoader parentClassLoader) {
src/main/groovy/util/GroovyScriptEngine.java,221,if (parentClassLoader == null) {
src/main/groovy/util/GroovyScriptEngine.java,222,throw new IllegalArgumentException("The parent class loader must not be null.");
src/main/groovy/util/GroovyScriptEngine.java,249,throws ResourceException, ScriptException {
src/main/groovy/util/GroovyScriptEngine.java,272,URLConnection groovyScriptConn = rc.getResourceConnection(scriptName);
src/main/groovy/util/GroovyScriptEngine.java,275,long lastModified = groovyScriptConn.getLastModified();
src/main/groovy/util/GroovyScriptEngine.java,277,entry = (ScriptCacheEntry) scriptCache.get(scriptName);
src/main/org/codehaus/groovy/ant/Groovyc.java,364,for (int i = 0; i < list.length; i++) {
src/main/org/codehaus/groovy/control/CompilerConfiguration.java,95,private LinkedList classpath;
src/main/org/codehaus/groovy/control/CompilerConfiguration.java,411,public List getClasspath() {
src/main/org/codehaus/groovy/control/CompilerConfiguration.java,420,this.classpath = new LinkedList();
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1893,size = ConstantExpression.EMTPY_EXPRESSION;
src/main/org/codehaus/groovy/ast/expr/ConstantExpression.java,64,public static final ConstantExpression EMTPY_EXPRESSION = new ConstantExpression(null);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1477,int size = self.length();
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1479,for (int i = size - 1; i >= 0; i--) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1480,buffer.append(self.charAt(i));
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1482,return buffer.toString();
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,127,throw new GroovyCastException(c,Integer.class);
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,130,throw new GroovyCastException(object,Number.class);
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,234,Number n = castToNumber(object);
src/main/org/codehaus/groovy/classgen/Verifier.java,605,protected List filterStatements(List list) {
src/main/org/codehaus/groovy/classgen/Verifier.java,606,List answer = new ArrayList(list.size());
src/main/org/codehaus/groovy/classgen/Verifier.java,607,for (Iterator iter = list.iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/classgen/Verifier.java,608,answer.add(filterStatement((Statement) iter.next()));
src/main/org/codehaus/groovy/classgen/Verifier.java,610,return answer;
src/main/org/codehaus/groovy/classgen/Verifier.java,613,protected Statement filterStatement(Statement statement) {
src/main/org/codehaus/groovy/classgen/Verifier.java,614,if (statement instanceof ExpressionStatement) {
src/main/org/codehaus/groovy/classgen/Verifier.java,615,ExpressionStatement expStmt = (ExpressionStatement) statement;
src/main/org/codehaus/groovy/classgen/Verifier.java,616,Expression expression = expStmt.getExpression();
src/main/org/codehaus/groovy/classgen/Verifier.java,617,if (expression instanceof ClosureExpression) {
src/main/org/codehaus/groovy/classgen/Verifier.java,618,ClosureExpression closureExp = (ClosureExpression) expression;
src/main/org/codehaus/groovy/classgen/Verifier.java,619,if (!closureExp.isParameterSpecified()) {
src/main/org/codehaus/groovy/classgen/Verifier.java,620,return closureExp.getCode();
src/main/org/codehaus/groovy/classgen/Verifier.java,624,return statement;
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,253,buffer.append(".");
src/main/org/codehaus/groovy/control/CompilationUnit.java,122,protected boolean debug;      // Controls behaviour of classgen() and other routines.
src/main/org/codehaus/groovy/control/CompilationUnit.java,891,int count = 0;
src/main/org/codehaus/groovy/control/CompilationUnit.java,893,count++;
src/main/org/codehaus/groovy/control/CompilationUnit.java,894,element = element.getSuperClass();
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,4790,return new BigInteger(Long.toString(self.longValue()));
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,2202,return false;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,2206,switch (binExp.getOperation().getType()) {   // br todo should leave a copy of the value on the stack for all the assignemnt.
src/main/org/codehaus/groovy/classgen/Verifier.java,440,node.addMethod(method.getName(), method.getModifiers(), method.getReturnType(), newParams, method.getExceptions(), code);
src/main/groovy/lang/GroovyClassLoader.java,631,SecurityManager sm = System.getSecurityManager();
src/main/groovy/lang/GroovyClassLoader.java,632,if (sm != null) {
src/main/groovy/lang/GroovyClassLoader.java,633,String className = name.replace('/', '.');
src/main/groovy/lang/GroovyClassLoader.java,634,int i = className.lastIndexOf('.');
src/main/groovy/lang/GroovyClassLoader.java,635,if (i != -1) {
src/main/groovy/lang/GroovyClassLoader.java,636,sm.checkPackageAccess(className.substring(0, i));
src/main/org/codehaus/groovy/ast/ClassNode.java,282,if (!lazyInitDone) {
src/main/org/codehaus/groovy/ast/ClassNode.java,283,lazyClassInit();
src/main/org/codehaus/groovy/ast/ClassNode.java,294,if (!lazyInitDone) {
src/main/org/codehaus/groovy/ast/ClassNode.java,295,lazyClassInit();
src/main/org/codehaus/groovy/ast/ClassNode.java,414,if (!lazyInitDone) {
src/main/org/codehaus/groovy/ast/ClassNode.java,415,lazyClassInit();
src/main/org/codehaus/groovy/ast/ClassNode.java,736,if (!lazyInitDone) {
src/main/org/codehaus/groovy/ast/ClassNode.java,737,lazyClassInit();
src/main/groovy/util/Proxy.java,77,return InvokerHelper.getMetaClass(adaptee).invokeMethod(adaptee, name, args);
src/main/groovy/servlet/ServletBinding.java,206,try {
src/main/groovy/servlet/ServletBinding.java,220,String message = "Failed to get writer or output stream from response.";
src/main/groovy/servlet/ServletBinding.java,221,context.log(message, e);
src/main/groovy/servlet/ServletBinding.java,222,throw new RuntimeException(message, e);
src/main/org/codehaus/groovy/classgen/Verifier.java,576,staticList.add(statement);
src/main/org/codehaus/groovy/control/LabelVerifier.java,194,inSwitch=true;
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1000,if (exprNode != null) {
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1001,Expression expression = expression(exprNode);
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1002,if (expression instanceof ConstantExpression) {
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1003,ConstantExpression constantExpr = (ConstantExpression) expression;
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1004,if (constantExpr.getValue() == null) {
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1005,return ReturnStatement.RETURN_NULL_OR_VOID;
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1008,ReturnStatement returnStatement = new ReturnStatement(expression);
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1009,configureAST(returnStatement, node);
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1010,return returnStatement;
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1012,else {
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1013,return ReturnStatement.RETURN_NULL_OR_VOID;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,2593,InnerClassNode answer = new InnerClassNode(outerClass, name, 0, ClassHelper.CLOSURE_TYPE); // closures are local inners and not public
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,484,InvokerHelper.invokeMethod(self, "print", out);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,485,out.println();
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,470,out = new PrintWriter(System.out);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,482,out = new PrintWriter(System.out);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,5720,return new PrintWriter(newWriter(file));
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,5732,return new PrintWriter(newWriter(file, charset));
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1543,public static String replaceAll(String self, String regex, Closure closure) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1544,Matcher matcher = Pattern.compile(regex).matcher(self);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1546,matcher.reset();
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1547,StringBuffer sb = new StringBuffer();
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1548,while (matcher.find()) {
src/main/groovy/text/TemplateEngine.java,55,public Template createTemplate(String templateText) throws CompilationFailedException, FileNotFoundException, ClassNotFoundException, IOException {
src/main/groovy/text/TemplateEngine.java,59,public Template createTemplate(File file) throws CompilationFailedException, FileNotFoundException, ClassNotFoundException, IOException {
src/main/groovy/text/TemplateEngine.java,60,return createTemplate(new FileReader(file));
src/main/groovy/text/TemplateEngine.java,64,return createTemplate(new InputStreamReader(url.openStream()));
src/main/groovy/util/BuilderSupport.java,174,Object oldCurrent = current;
src/main/groovy/util/BuilderSupport.java,175,current = node;
src/main/groovy/util/BuilderSupport.java,181,current = oldCurrent;
src/main/org/codehaus/groovy/ast/MethodNode.java,106,buf.append(returnType.getName()); // br  to replace the above. Dynamic type returns Object.
src/main/org/codehaus/groovy/ast/MethodNode.java,108,buf.append(' ');
src/main/org/codehaus/groovy/ast/MethodNode.java,109,buf.append(name);
src/main/org/codehaus/groovy/ast/MethodNode.java,110,buf.append('(');
src/main/org/codehaus/groovy/ast/MethodNode.java,111,for (int i = 0; i < parameters.length; i++) {
src/main/org/codehaus/groovy/ast/MethodNode.java,112,if (i > 0) {
src/main/org/codehaus/groovy/ast/MethodNode.java,115,Parameter param = parameters[i];
src/main/org/codehaus/groovy/ast/MethodNode.java,116,buf.append(param.getType().getName());
src/main/org/codehaus/groovy/ast/MethodNode.java,118,buf.append(')');
src/main/org/codehaus/groovy/ast/MethodNode.java,119,return buf.toString();
src/main/org/codehaus/groovy/ast/MethodNode.java,179,return super.toString() + "[name: " + name + "]";
src/main/org/codehaus/groovy/classgen/Verifier.java,523,addFieldInitialization(statements, staticStatements, (FieldNode) iter.next());
src/main/org/codehaus/groovy/classgen/Verifier.java,549,node.addStaticInitializerStatements(staticStatements,true);
src/main/org/codehaus/groovy/runtime/ConversionHandler.java,23,if (delegate==null) throw new IllegalArgumentException("delegate must not be null");
src/main/org/codehaus/groovy/runtime/ConversionHandler.java,31,public Object getDelegate(){
src/main/org/codehaus/groovy/runtime/ConversionHandler.java,53,throws Throwable {
src/main/org/codehaus/groovy/runtime/ConversionHandler.java,55,return invokeCustom(proxy,method,args);
src/main/org/codehaus/groovy/runtime/ConversionHandler.java,112,private static boolean isObjectMethod(Method mtd){
src/main/org/codehaus/groovy/runtime/ConversionHandler.java,113,return mtd.getDeclaringClass().equals(Object.class);
src/main/groovy/xml/dom/DOMCategory.java,65,return getAt(element, elementName);
src/main/groovy/xml/dom/DOMCategory.java,69,return getAt(nodeList, elementName);
src/main/groovy/xml/dom/DOMCategory.java,73,return getAt(nodeMap, elementName);
src/main/groovy/xml/dom/DOMCategory.java,76,private static Object getAt(Element element, String elementName) {
src/main/groovy/xml/dom/DOMCategory.java,89,private static Object getAt(NodeList nodeList, String elementName) {
src/main/groovy/xml/dom/DOMCategory.java,107,private static String getAt(NamedNodeMap namedNodeMap, String elementName) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,570,return self;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,629,return self;
src/main/org/codehaus/groovy/classgen/VariableScopeVisitor.java,240,String s = pname.substring(0, 1).toLowerCase();
src/main/org/codehaus/groovy/classgen/VariableScopeVisitor.java,241,String rest = pname.substring(1);
src/main/org/codehaus/groovy/classgen/VariableScopeVisitor.java,242,pname = s + rest;
src/main/org/codehaus/groovy/classgen/Verifier.java,588,return name.substring(0, 1).toUpperCase() + name.substring(1, name.length());
src/main/org/codehaus/groovy/runtime/MetaClassHelper.java,347,public static String capitalize(String property) {
src/main/org/codehaus/groovy/runtime/MetaClassHelper.java,348,return property.substring(0, 1).toUpperCase() + property.substring(1, property.length());
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1617,Expression arguments = call.getArguments();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1618,String methodName = call.getMethodAsString();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1619,boolean isSuperMethodCall = usesSuper(call);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1620,boolean isThisExpression = isThisExpression(call.getObjectExpression());
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1630,if (isThisExpression) adapter = invokeMethodOnCurrent;
src/main/org/codehaus/groovy/classgen/VariableScopeVisitor.java,454,Object value = ((ConstantExpression) call.getMethod()).getText();
src/main/org/codehaus/groovy/runtime/ConversionHandler.java,54,if(!isObjectMethod(method)){
src/main/groovy/servlet/ServletBinding.java,53,import java.util.HashMap;
src/main/groovy/servlet/ServletBinding.java,128,Map params = new HashMap();
src/main/groovy/lang/Binding.java,48,import java.util.HashMap;
src/main/groovy/servlet/ServletBinding.java,56,import javax.servlet.ServletContext;
src/main/groovy/servlet/ServletBinding.java,57,import javax.servlet.http.HttpServletRequest;
src/main/groovy/servlet/ServletBinding.java,58,import javax.servlet.http.HttpServletResponse;
src/main/groovy/servlet/ServletBinding.java,90,private final Binding binding;
src/main/groovy/servlet/ServletBinding.java,92,private final ServletContext context;
src/main/groovy/servlet/ServletBinding.java,94,private final HttpServletRequest request;
src/main/groovy/servlet/ServletBinding.java,96,private final HttpServletResponse response;
src/main/groovy/servlet/ServletBinding.java,98,private MarkupBuilder html;
src/main/groovy/servlet/ServletBinding.java,104,this.binding = new Binding();
src/main/groovy/servlet/ServletBinding.java,105,this.request = request;
src/main/groovy/servlet/ServletBinding.java,106,this.response = response;
src/main/groovy/servlet/ServletBinding.java,107,this.context = context;
src/main/groovy/servlet/ServletBinding.java,112,binding.setVariable("request", request);
src/main/groovy/servlet/ServletBinding.java,113,binding.setVariable("response", response);
src/main/groovy/servlet/ServletBinding.java,114,binding.setVariable("context", context);
src/main/groovy/servlet/ServletBinding.java,115,binding.setVariable("application", context);
src/main/groovy/servlet/ServletBinding.java,121,binding.setVariable("session", request.getSession(false));
src/main/groovy/servlet/ServletBinding.java,131,if (!binding.getVariables().containsKey(name)) {
src/main/groovy/servlet/ServletBinding.java,140,binding.setVariable("params", params);
src/main/groovy/servlet/ServletBinding.java,145,Map headers = new HashMap();
src/main/groovy/servlet/ServletBinding.java,151,binding.setVariable("headers", headers);
src/main/groovy/servlet/ServletBinding.java,158,if (name == null) {
src/main/groovy/servlet/ServletBinding.java,159,throw new IllegalArgumentException("Can't bind variable to null key.");
src/main/groovy/servlet/ServletBinding.java,161,if (name.length() == 0) {
src/main/groovy/servlet/ServletBinding.java,162,throw new IllegalArgumentException("Can't bind variable to blank key name. [length=0]");
src/main/groovy/servlet/ServletBinding.java,167,if ("out".equals(name)) {
src/main/groovy/servlet/ServletBinding.java,168,throw new IllegalArgumentException("Can't bind variable to key named '" + name + "'.");
src/main/groovy/servlet/ServletBinding.java,170,if ("sout".equals(name)) {
src/main/groovy/servlet/ServletBinding.java,171,throw new IllegalArgumentException("Can't bind variable to key named '" + name + "'.");
src/main/groovy/servlet/ServletBinding.java,173,if ("html".equals(name)) {
src/main/groovy/servlet/ServletBinding.java,174,throw new IllegalArgumentException("Can't bind variable to key named '" + name + "'.");
src/main/groovy/servlet/ServletBinding.java,183,binding.setVariable(name, value);
src/main/groovy/servlet/ServletBinding.java,187,return binding.getVariables();
src/main/groovy/servlet/ServletBinding.java,197,if (name == null) {
src/main/groovy/servlet/ServletBinding.java,198,throw new IllegalArgumentException("No variable with null key name.");
src/main/groovy/servlet/ServletBinding.java,200,if (name.length() == 0) {
src/main/groovy/servlet/ServletBinding.java,201,throw new IllegalArgumentException("No variable with blank key name. [length=0]");
src/main/groovy/servlet/ServletBinding.java,207,if ("out".equals(name)) {
src/main/groovy/servlet/ServletBinding.java,208,return response.getWriter();
src/main/groovy/servlet/ServletBinding.java,210,if ("sout".equals(name)) {
src/main/groovy/servlet/ServletBinding.java,211,return response.getOutputStream();
src/main/groovy/servlet/ServletBinding.java,213,if ("html".equals(name)) {
src/main/groovy/servlet/ServletBinding.java,214,if (html == null) {
src/main/groovy/servlet/ServletBinding.java,215,html = new MarkupBuilder(response.getWriter());
src/main/groovy/servlet/ServletBinding.java,217,return html;
src/main/groovy/servlet/ServletBinding.java,227,return binding.getVariable(name);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1625,visitVariableExpression(new VariableExpression(methodName));
src/main/org/codehaus/groovy/classgen/Verifier.java,350,else {
src/main/org/codehaus/groovy/ast/ClassNode.java,345,(method.getModifiers() & Opcodes.ACC_ABSTRACT) != 0
src/main/org/codehaus/groovy/ast/ClassNode.java,346,) {
src/main/org/codehaus/groovy/ast/ClassNode.java,353,else {
src/main/org/codehaus/groovy/ast/ClassNode.java,370,else {
src/main/groovy/util/XmlNodePrinter.java,94,public String getNameOfNode(Node node) {
src/main/groovy/util/XmlNodePrinter.java,95,if (node == null) {
src/main/groovy/util/XmlNodePrinter.java,96,throw new IllegalArgumentException("Node must not be null!");
src/main/groovy/util/XmlNodePrinter.java,98,Object name = node.name();
src/main/groovy/util/XmlNodePrinter.java,99,if (name instanceof QName) {
src/main/groovy/util/XmlNodePrinter.java,100,QName qname = (QName) name;
src/main/groovy/util/XmlNodePrinter.java,103,return name.toString();
src/main/groovy/util/XmlNodePrinter.java,106,public boolean isEmptyElement(Node node) {
src/main/groovy/util/XmlNodePrinter.java,107,if (node == null) {
src/main/groovy/util/XmlNodePrinter.java,108,throw new IllegalArgumentException("Node must not be null!");
src/main/groovy/util/XmlNodePrinter.java,110,if (!node.children().isEmpty()) {
src/main/groovy/util/XmlNodePrinter.java,111,return false;
src/main/groovy/util/XmlNodePrinter.java,128,out.print(getNameOfNode(node));
src/main/groovy/util/XmlNodePrinter.java,129,printNameAttributes(node.attributes());
src/main/groovy/util/XmlNodePrinter.java,214,out.print(getNameOfNode(node));
src/main/groovy/util/XmlNodePrinter.java,216,printNameAttributes(node.attributes());
src/main/groovy/util/XmlNodePrinter.java,222,protected void printNameAttributes(Map attributes) {
src/main/groovy/util/XmlNodePrinter.java,235,out.print(entry.getKey().toString());
src/main/groovy/util/XmlNodePrinter.java,248,protected boolean printSpecialNode(Node node) {
src/main/groovy/util/XmlNodePrinter.java,249,return false;
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1972,if (expressionList.size() == 1) {
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1975,else {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,660,if (a.getClass().getName().equals("[Z")) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,663,else {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,667,if (ia[i] == null) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,668,continue;
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,680,if (a.getClass().getName().equals("[B")) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,683,else {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,699,if (a.getClass().getName().equals("[S")) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,702,else {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,716,if (a.getClass().getName().equals("[C")) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,719,else {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,736,if (a.getClass().getName().equals("[J")) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,739,else {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,756,if (a.getClass().getName().equals("[F")) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,759,else {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,776,if (a.getClass().getName().equals("[D")) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,779,else {
src/main/groovy/util/GroovyTestCase.java,238,return "TestScript" + getMethodName() + (counter++) + ".groovy";
src/main/org/codehaus/groovy/tools/FileSystemCompiler.java,145,boolean displayStackTraceOnError = false;
src/main/org/codehaus/groovy/tools/FileSystemCompiler.java,163,PosixParser cliParser = new PosixParser();
src/main/org/codehaus/groovy/tools/FileSystemCompiler.java,170,return;
src/main/org/codehaus/groovy/tools/FileSystemCompiler.java,175,displayVersion();
src/main/org/codehaus/groovy/ast/ModuleNode.java,296,int idx = answer.lastIndexOf('.');
src/main/org/codehaus/groovy/ast/ModuleNode.java,297,if (idx > 0) {
src/main/org/codehaus/groovy/ast/ModuleNode.java,298,answer = answer.substring(0, idx);
src/main/org/codehaus/groovy/ast/ModuleNode.java,301,idx = answer.lastIndexOf('/');
src/main/org/codehaus/groovy/ast/ModuleNode.java,302,if (idx >= 0) {
src/main/org/codehaus/groovy/ast/ModuleNode.java,303,answer = answer.substring(idx + 1);
src/main/org/codehaus/groovy/ast/ModuleNode.java,305,idx = answer.lastIndexOf(File.separatorChar);
src/main/org/codehaus/groovy/ast/ModuleNode.java,306,if (idx >= 0) {
src/main/org/codehaus/groovy/ast/ModuleNode.java,307,answer = answer.substring(idx + 1);
src/main/groovy/xml/dom/DOMCategory.java,51,public static Object get(Object o, String elementName) {
src/main/groovy/xml/dom/DOMCategory.java,52,if (o instanceof Element) {
src/main/groovy/xml/dom/DOMCategory.java,53,return get((Element) o, elementName);
src/main/groovy/xml/dom/DOMCategory.java,55,if (o instanceof NodeList) {
src/main/groovy/xml/dom/DOMCategory.java,56,return get((NodeList) o, elementName);
src/main/groovy/xml/dom/DOMCategory.java,58,if (o instanceof NamedNodeMap) {
src/main/groovy/xml/dom/DOMCategory.java,59,return get((NamedNodeMap) o, elementName);
src/main/groovy/xml/dom/DOMCategory.java,64,private static Object get(Element element, String elementName) {
src/main/groovy/xml/dom/DOMCategory.java,68,private static Object get(NodeList nodeList, String elementName) {
src/main/groovy/xml/dom/DOMCategory.java,72,private static Object get(NamedNodeMap nodeMap, String elementName) {
src/main/groovy/xml/dom/DOMCategory.java,94,addResult(results, get(node, elementName));
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,638,loop.getBooleanExpression().visit(this);
src/main/org/codehaus/groovy/classgen/CompileStack.java,177,private void pushState() {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,441,int newRegister = 1;
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,69,String methodName = method.getTypeDescriptor();
src/main/org/codehaus/groovy/antlr/GroovySourceAST.java,16,public class GroovySourceAST extends CommonAST implements Comparable {
src/main/groovy/lang/GroovyShell.java,244,return runMainOrTestOrRunnable(scriptClass, args);
src/main/groovy/lang/GroovyShell.java,262,private Object runMainOrTestOrRunnable(Class scriptClass, String[] args) {
src/main/groovy/lang/GroovyShell.java,394,return runMainOrTestOrRunnable(scriptClass, args);
src/main/org/codehaus/groovy/ast/ClassNode.java,340,for (Iterator methIt = getAllDeclaredMethods().iterator(); methIt.hasNext();) {
src/main/org/codehaus/groovy/ast/ClassNode.java,341,MethodNode method = (MethodNode) methIt.next();
src/main/org/codehaus/groovy/ast/ClassNode.java,379,for (Iterator iter = ifaceMethodsMap.keySet().iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/ast/ClassNode.java,380,String methSig = (String) iter.next();
src/main/org/codehaus/groovy/ast/ClassNode.java,389,for (Iterator iter = getMethods().iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/ast/ClassNode.java,390,MethodNode method = (MethodNode) iter.next();
src/main/org/codehaus/groovy/ast/ClassNode.java,452,for (Iterator iter = getProperties().iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/ast/ClassNode.java,561,public FieldNode getField(String name) {
src/main/org/codehaus/groovy/ast/ClassNode.java,821,for (Iterator iter = getProperties().iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/ast/ClassNode.java,822,PropertyNode pn = (PropertyNode) iter.next();
src/main/org/codehaus/groovy/ast/ClassNode.java,826,for (Iterator iter = getFields().iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/ast/ClassNode.java,827,FieldNode fn = (FieldNode) iter.next();
src/main/org/codehaus/groovy/ast/ClassNode.java,831,for (Iterator iter = getDeclaredConstructors().iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/ast/ClassNode.java,832,ConstructorNode cn = (ConstructorNode) iter.next();
src/main/org/codehaus/groovy/ast/ClassNode.java,836,for (Iterator iter = getMethods().iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/ast/ClassNode.java,837,MethodNode mn = (MethodNode) iter.next();
src/main/org/codehaus/groovy/ast/ClassNode.java,844,MethodNode method = (MethodNode) iter.next();
src/main/org/codehaus/groovy/ast/ClassNode.java,856,MethodNode method = (MethodNode) iter.next();
src/main/org/codehaus/groovy/ast/ClassNode.java,914,MethodNode method = (MethodNode) iter.next();
src/main/org/codehaus/groovy/ast/InnerClassNode.java,85,return outerClass.getField(name);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1370,visitFieldExpression(new FieldExpression(classNode.getField(name)));
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1378,FieldNode field = classNode.getField(name);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1410,visitFieldExpression(new FieldExpression(classNode.getField("owner")));
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,2240,FieldNode fn = classNode.getField(staticFieldName);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,2958,FieldNode field = classNode.getField(variableName);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,3065,field = classNode.getField(varExp.getName());
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,3069,field = classNode.getField(fieldExp.getFieldName());
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,3184,return compileStack.containsVariable(name) || classNode.getField(name) != null;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,3253,FieldNode field = classNode.getField(varExp.getName());
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,282,if (currentClass.getField(node.getName()) != node) {
src/main/groovy/lang/ObjectRange.java,232,size = 0;
src/main/groovy/lang/ObjectRange.java,241,while (to.compareTo(value) >= 0) {
src/main/groovy/lang/ObjectRange.java,297,while (value.compareTo(to) <= 0) {
src/main/groovy/lang/ObjectRange.java,306,while (value.compareTo(from) >= 0) {
src/main/org/codehaus/groovy/classgen/Verifier.java,237,node.addSyntheticMethod(
src/main/org/codehaus/groovy/runtime/MetaClassHelper.java,53,private static final int MAX_ARG_LEN = 12;
src/main/groovy/lang/GroovyClassLoader.java,658,preferClassOverScript |= !recompile;
src/main/groovy/lang/GroovyClassLoader.java,659,if (preferClassOverScript) return cls;
src/main/org/codehaus/groovy/classgen/Verifier.java,396,classNode.addMethod(getter);
src/main/org/codehaus/groovy/classgen/Verifier.java,404,classNode.addMethod(secondGetter);
src/main/org/codehaus/groovy/classgen/Verifier.java,413,classNode.addMethod(setter);
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,574,else {
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,575,fieldNode.setModifiers(modifiers);
src/main/org/codehaus/groovy/ant/Groovy.java,52,import groovy.lang.Script;
src/main/org/codehaus/groovy/ant/Groovy.java,71,import org.apache.tools.ant.Task;
src/main/org/codehaus/groovy/ant/Groovy.java,362,script.setProperty("project", project);
src/main/org/codehaus/groovy/ant/Groovy.java,371,StringWriter writer = new StringWriter();
src/main/org/codehaus/groovy/ant/Groovy.java,373,String message = writer.toString();
src/main/groovy/xml/MarkupBuilder.java,113,this.nodeIsEmpty = true;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,5049,BufferedReader br /* = null */;
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,410,if (classNode != null) {
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,411,if (classNode.getNameWithoutPackage().equals(name)) {
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,412,throw new ASTRuntimeException(methodDef, "Invalid constructor format. Try remove the 'def' expression?");
src/main/org/codehaus/groovy/runtime/GroovyCategorySupport.java,121,Class loop = thisClass;
src/main/org/codehaus/groovy/runtime/GroovyCategorySupport.java,123,loop = thisClass.getSuperclass();
src/main/org/codehaus/groovy/runtime/GroovyCategorySupport.java,124,if (loop == thatClass) {
src/main/org/codehaus/groovy/runtime/GroovyCategorySupport.java,125,return -1;
src/main/org/codehaus/groovy/runtime/GroovyCategorySupport.java,128,loop = thatClass;
src/main/org/codehaus/groovy/runtime/GroovyCategorySupport.java,130,loop = thatClass.getSuperclass();
src/main/org/codehaus/groovy/runtime/GroovyCategorySupport.java,131,if (loop == thisClass) {
src/main/org/codehaus/groovy/runtime/GroovyCategorySupport.java,132,return 1;
src/main/org/codehaus/groovy/runtime/GroovyCategorySupport.java,135,return 0;
src/main/groovy/util/XmlNodePrinter.java,131,printLineEnd(); // "node named '" + node.name() + "'"
src/main/groovy/xml/dom/DOMCategory.java,61,return null;
src/main/groovy/lang/GString.java,101,valueList.add("");
src/main/groovy/lang/GString.java,104,stringList.addAll(Arrays.asList(that.getStrings()));
src/main/groovy/lang/GString.java,123,newStrings = new String[currentStrings.length + 1];
src/main/groovy/lang/GString.java,124,newValues = new Object[getValues().length + 1];
src/main/groovy/lang/GString.java,128,newStrings[lastIndex] = that;
src/main/groovy/lang/GString.java,129,newValues[getValues().length] = "";
src/main/org/codehaus/groovy/ast/ClassNode.java,691,return implementsInterface(GroovyObject.class.getName());
src/main/org/codehaus/groovy/ast/ClassNode.java,698,public boolean implementsInterface(String name) {
src/main/org/codehaus/groovy/ast/ClassNode.java,701,if (node.declaresInterface(name)) {
src/main/org/codehaus/groovy/ast/ClassNode.java,714,public boolean declaresInterface(String name) {
src/main/org/codehaus/groovy/ast/ClassNode.java,718,if (interfaces[i].getName().equals(name)) {
src/main/org/codehaus/groovy/classgen/Verifier.java,100,private ClassNode classNode;
src/main/org/codehaus/groovy/classgen/Verifier.java,130,if (!node.isDerivedFromGroovyObject()) {
src/main/org/codehaus/groovy/classgen/Verifier.java,131,node.addInterface(ClassHelper.make(GroovyObject.class));
src/main/org/codehaus/groovy/classgen/Verifier.java,142,metaClassProperty.setSynthetic(true);
src/main/org/codehaus/groovy/classgen/Verifier.java,143,FieldNode metaClassField = metaClassProperty.getField();
src/main/org/codehaus/groovy/classgen/Verifier.java,144,metaClassField.setModifiers(metaClassField.getModifiers() | ACC_TRANSIENT);
src/main/org/codehaus/groovy/classgen/Verifier.java,154,node.addSyntheticMethod(
src/main/org/codehaus/groovy/classgen/Verifier.java,156,ACC_PUBLIC,
src/main/org/codehaus/groovy/classgen/Verifier.java,157,ClassHelper.make(MetaClass.class),
src/main/org/codehaus/groovy/classgen/Verifier.java,158,Parameter.EMPTY_ARRAY,
src/main/org/codehaus/groovy/classgen/Verifier.java,159,ClassNode.EMPTY_ARRAY,
src/main/org/codehaus/groovy/classgen/Verifier.java,161,);
src/main/org/codehaus/groovy/classgen/Verifier.java,166,ClassNode superClass = node.getSuperClass();
src/main/org/codehaus/groovy/classgen/Verifier.java,167,boolean addDelegateObject =
src/main/org/codehaus/groovy/classgen/Verifier.java,169,|| superClass.equals(ClassHelper.GSTRING_TYPE);
src/main/org/codehaus/groovy/classgen/Verifier.java,172,if (!addDelegateObject) {
src/main/org/codehaus/groovy/classgen/Verifier.java,182,ACC_PUBLIC,
src/main/org/codehaus/groovy/classgen/Verifier.java,183,ClassHelper.OBJECT_TYPE,
src/main/org/codehaus/groovy/classgen/Verifier.java,184,new Parameter[] {
src/main/org/codehaus/groovy/classgen/Verifier.java,185,new Parameter(ClassHelper.STRING_TYPE, "method"),
src/main/org/codehaus/groovy/classgen/Verifier.java,210,if (!node.isScript()) {
src/main/org/codehaus/groovy/classgen/Verifier.java,214,ClassHelper.OBJECT_TYPE,
src/main/org/codehaus/groovy/classgen/Verifier.java,215,new Parameter[] { new Parameter(ClassHelper.STRING_TYPE, "property")},
src/main/org/codehaus/groovy/classgen/Verifier.java,216,ClassNode.EMPTY_ARRAY,
src/main/org/codehaus/groovy/classgen/Verifier.java,239,ACC_PUBLIC,
src/main/org/codehaus/groovy/classgen/Verifier.java,240,ClassHelper.VOID_TYPE,
src/main/org/codehaus/groovy/classgen/Verifier.java,241,new Parameter[] {
src/main/org/codehaus/groovy/classgen/Verifier.java,242,new Parameter(ClassHelper.STRING_TYPE, "property"),
src/main/org/codehaus/groovy/classgen/Verifier.java,245,ClassNode.EMPTY_ARRAY,
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,48,t = traverse((GroovySourceAST)t,l,null);
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,54,t = traverse((GroovySourceAST)t,null,itr);
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,66,if (t == null) { return t; }
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,69,if (l != null) {
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,70,l.add(new LineColumn(t.getLine(),t.getColumn()));
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,74,if (itr != null && itr.hasNext()) {
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,75,LineColumn lc = (LineColumn)itr.next();
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,76,if (t.getLineLast() == 0) {
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,77,int nextLine = lc.getLine();
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,78,int nextColumn = lc.getColumn();
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,79,if (nextLine < t.getLine() || (nextLine == t.getLine() && nextColumn < t.getColumn())) {
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,80,nextLine = t.getLine();
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,81,nextColumn = t.getColumn();
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,83,t.setLineLast(nextLine);
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,84,t.setColumnLast(nextColumn);
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,90,GroovySourceAST child = (GroovySourceAST)t.getFirstChild();
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,91,if (child != null) {
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,92,traverse(child,l,itr);
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,95,GroovySourceAST sibling = (GroovySourceAST)t.getNextSibling();
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,96,if (sibling != null) {
src/main/org/codehaus/groovy/antlr/AntlrASTProcessSnippets.java,97,traverse(sibling,l,itr);
src/main/org/codehaus/groovy/ast/ClassNode.java,37,import groovy.lang.GroovyObject;
src/main/org/codehaus/groovy/ast/ClassNode.java,42,import org.codehaus.groovy.ast.stmt.BlockStatement;
src/main/org/codehaus/groovy/ast/ClassNode.java,43,import org.codehaus.groovy.ast.stmt.EmptyStatement;
src/main/org/codehaus/groovy/ast/ClassNode.java,48,import java.lang.reflect.Constructor;
src/main/org/codehaus/groovy/ast/ClassNode.java,49,import java.lang.reflect.Field;
src/main/org/codehaus/groovy/ast/ClassNode.java,50,import java.lang.reflect.Method;
src/main/org/codehaus/groovy/ast/ClassNode.java,102,boolean isPrimaryNode;
src/main/org/codehaus/groovy/ast/ClassNode.java,115,private ClassNode redirect=null;
src/main/org/codehaus/groovy/ast/ClassNode.java,194,private void lazyClassInit() {
src/main/org/codehaus/groovy/ast/ClassNode.java,198,Field[] fields = clazz.getDeclaredFields();
src/main/org/codehaus/groovy/ast/ClassNode.java,199,for (int i=0;i<fields.length;i++){
src/main/org/codehaus/groovy/ast/ClassNode.java,200,addField(fields[i].getName(),fields[i].getModifiers(),this,null);
src/main/org/codehaus/groovy/ast/ClassNode.java,202,Method[] methods = clazz.getDeclaredMethods();
src/main/org/codehaus/groovy/ast/ClassNode.java,203,for (int i=0;i<methods.length;i++){
src/main/org/codehaus/groovy/ast/ClassNode.java,204,Method m = methods[i];
src/main/org/codehaus/groovy/ast/ClassNode.java,205,MethodNode mn = new MethodNode(m.getName(), m.getModifiers(), ClassHelper.make(m.getReturnType()), createParameters(m.getParameterTypes()), ClassHelper.make(m.getExceptionTypes()), null);
src/main/org/codehaus/groovy/ast/ClassNode.java,206,addMethod(mn);
src/main/org/codehaus/groovy/ast/ClassNode.java,208,Constructor[] constructors = clazz.getDeclaredConstructors();
src/main/org/codehaus/groovy/ast/ClassNode.java,209,for (int i=0;i<constructors.length;i++){
src/main/org/codehaus/groovy/ast/ClassNode.java,210,Constructor ctor = constructors[i];
src/main/org/codehaus/groovy/ast/ClassNode.java,211,addConstructor(ctor.getModifiers(),createParameters(ctor.getParameterTypes()),ClassHelper.make(ctor.getExceptionTypes()),null);
src/main/org/codehaus/groovy/ast/ClassNode.java,213,Class sc = clazz.getSuperclass();
src/main/org/codehaus/groovy/ast/ClassNode.java,216,lazyInitDone=true;
src/main/org/codehaus/groovy/ast/ClassNode.java,220,private void buildInterfaceTypes(Class c) {
src/main/org/codehaus/groovy/ast/ClassNode.java,221,Class[] interfaces = c.getInterfaces();
src/main/org/codehaus/groovy/ast/ClassNode.java,222,ClassNode[] ret = new ClassNode[interfaces.length];
src/main/org/codehaus/groovy/ast/ClassNode.java,223,for (int i=0;i<interfaces.length;i++){
src/main/org/codehaus/groovy/ast/ClassNode.java,226,this.interfaces = ret;
src/main/org/codehaus/groovy/ast/ClassNode.java,344,if ( abstractNodes.contains(method.getDeclaringClass().redirect()) &&
src/main/org/codehaus/groovy/ast/ClassNode.java,540,ClassNode cn = (ClassNode) o;
src/main/org/codehaus/groovy/ast/ClassNode.java,745,protected MethodNode createMethodNode(Method method) {
src/main/org/codehaus/groovy/ast/ClassNode.java,746,Parameter[] parameters = createParameters(method.getParameterTypes());
src/main/org/codehaus/groovy/ast/ClassNode.java,747,return new MethodNode(method.getName(), method.getModifiers(), ClassHelper.make(method.getReturnType()), parameters, ClassHelper.make(method.getExceptionTypes()), EmptyStatement.INSTANCE);
src/main/org/codehaus/groovy/ast/ClassNode.java,753,protected Parameter[] createParameters(Class[] types) {
src/main/org/codehaus/groovy/ast/ClassNode.java,754,Parameter[] parameters = Parameter.EMPTY_ARRAY;
src/main/org/codehaus/groovy/ast/ClassNode.java,755,int size = types.length;
src/main/org/codehaus/groovy/ast/ClassNode.java,756,if (size > 0) {
src/main/org/codehaus/groovy/ast/ClassNode.java,757,parameters = new Parameter[size];
src/main/org/codehaus/groovy/ast/ClassNode.java,758,for (int i = 0; i < size; i++) {
src/main/org/codehaus/groovy/ast/ClassNode.java,759,parameters[i] = createParameter(types[i], i);
src/main/org/codehaus/groovy/ast/ClassNode.java,762,return parameters;
src/main/org/codehaus/groovy/ast/ClassNode.java,765,protected Parameter createParameter(Class parameterType, int idx) {
src/main/org/codehaus/groovy/ast/ClassNode.java,766,return new Parameter(ClassHelper.make(parameterType), "param" + idx);
src/main/org/codehaus/groovy/ast/ClassNode.java,926,return (getModifiers() & Opcodes.ACC_INTERFACE) > 0;
src/main/groovy/lang/GroovyObjectSupport.java,65,return metaClass.getProperty(this, property);
src/main/groovy/lang/GroovyObjectSupport.java,69,metaClass.setProperty(this, property, newValue);
src/main/groovy/lang/GroovyObjectSupport.java,73,return metaClass.invokeMethod(this, name, args);
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,296,Collection list = (Collection) object;
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,297,args = list.toArray();
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2540,answer.addAll(left);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2554,answer.addAll(left);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2957,private static boolean sameType(Collection[] cols) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2958,List all = new LinkedList();
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2959,for (int i = 0; i < cols.length; i++) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2960,all.addAll(cols[i]);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2963,return true;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2965,Object first = all.get(0);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2969,Class baseClass;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2970,if (first instanceof Number) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2971,baseClass = Number.class;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2973,baseClass = first.getClass();
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2976,for (int i = 0; i < cols.length; i++) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2977,for (Iterator iter = cols[i].iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2978,if (!baseClass.isInstance(iter.next())) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2979,return false;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2983,return true;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,4971,public static void eachLine(File self, Closure closure) throws IOException {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,4972,eachLine(newReader(self), closure);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,4983,public static void eachLine(Reader self, Closure closure) throws IOException {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,5035,public static void splitEachLine(File self, String sep, Closure closure) throws IOException {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,5036,splitEachLine(newReader(self), sep, closure);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,5048,public static void splitEachLine(Reader self, String sep, Closure closure) throws IOException {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,5063,closure.call(vals);
src/main/groovy/servlet/GroovyServlet.java,124,response.setContentType("text/html");
src/main/groovy/servlet/TemplateServlet.java,412,response.setContentType(CONTENT_TYPE_TEXT_HTML);
src/main/org/codehaus/groovy/ast/ClassNode.java,214,if (sc!=null) superClass = ClassHelper.make(sc);
src/main/org/codehaus/groovy/ast/ClassNode.java,224,ret[i] = ClassHelper.make(interfaces[i]);
src/main/org/codehaus/groovy/runtime/MetaClassHelper.java,768,if (classToTransformTo == classToTransformFrom) {
src/main/org/codehaus/groovy/runtime/MetaClassHelper.java,772,else if (classToTransformTo == Integer.class) {
src/main/groovy/util/XmlNodePrinter.java,240,out.print((String) value);
src/main/groovy/sql/Sql.java,1053,buffer.append("?'\"?"); // will replace these with nullish
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,465,else if (right instanceof Number) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,480,Comparable comparable = (Comparable) left;
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,481,return comparable.compareTo(right);
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,498,return compareTo(left, right) == 0;
src/main/org/codehaus/groovy/control/io/FileReaderSource.java,49,import java.io.File;
src/main/org/codehaus/groovy/control/io/FileReaderSource.java,50,import java.io.FileInputStream;
src/main/org/codehaus/groovy/control/io/FileReaderSource.java,51,import java.io.IOException;
src/main/org/codehaus/groovy/control/io/FileReaderSource.java,52,import java.io.InputStreamReader;
src/main/org/codehaus/groovy/control/io/FileReaderSource.java,53,import java.io.Reader;
src/main/groovy/lang/GroovyClassLoader.java,232,return parseClass(new ByteArrayInputStream(text.getBytes()), fileName);
src/main/groovy/lang/GroovyClassLoader.java,242,return parseClass(new ByteArrayInputStream(text.getBytes()), "script" + System.currentTimeMillis() + ".groovy");
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,2863,Expression safeIndexExpr = createReusableExpression(leftBinExpr.getRightExpression());
src/main/org/codehaus/groovy/classgen/CompileStack.java,279,temporaryVariables.add(answer);
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,902,Statement block = statement(inNode.getNextSibling());
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1132,Statement block = statement(node);
src/main/groovy/lang/GString.java,36,import java.io.IOException;
src/main/groovy/lang/GString.java,37,import java.io.StringWriter;
src/main/groovy/lang/GString.java,38,import java.io.Writer;
src/main/groovy/lang/GString.java,44,import org.codehaus.groovy.runtime.DefaultGroovyMethods;
src/main/groovy/lang/GString.java,45,import org.codehaus.groovy.runtime.InvokerHelper;
src/main/groovy/lang/GString.java,59,public abstract class GString extends GroovyObjectSupport implements Comparable, CharSequence, Writable, Buildable {
src/main/groovy/lang/GString.java,189,if (that instanceof GString) {
src/main/groovy/lang/GString.java,190,return equals((GString) that);
src/main/groovy/lang/GString.java,192,return false;
src/main/groovy/lang/GString.java,195,public boolean equals(GString that) {
src/main/groovy/lang/GString.java,196,return toString().equals(that.toString());
src/main/groovy/lang/GString.java,200,return 37 + toString().hashCode();
src/main/org/codehaus/groovy/runtime/MetaClassHelper.java,283,int max = 0;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2629,if (o1 instanceof Number && o2 instanceof Number) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2632,return x1.compareTo(x2);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2634,return ((Comparable) o1).compareTo((Comparable) o2);
src/main/groovy/xml/streamingmarkupsupport/StreamingMarkupWriter.java,55,protected final String encoding;
src/main/groovy/xml/streamingmarkupsupport/StreamingMarkupWriter.java,56,protected final CharsetEncoder encoder;
src/main/groovy/xml/MarkupBuilder.java,119,toState(2, name);
src/main/groovy/xml/MarkupBuilder.java,120,this.nodeIsEmpty = false;
src/main/groovy/xml/MarkupBuilder.java,121,out.print(">");
src/main/groovy/xml/MarkupBuilder.java,122,out.print(escapeElementContent(value.toString()));
src/main/groovy/xml/MarkupBuilder.java,123,return name;
src/main/groovy/ui/GroovyMain.java,345,public File huntForTheScriptFile(String scriptFileName) {
src/main/groovy/ui/GroovyMain.java,346,File scriptFile = new File(scriptFileName);
src/main/org/codehaus/groovy/ast/ClassNode.java,51,import java.util.ArrayList;
src/main/org/codehaus/groovy/ast/ClassNode.java,52,import java.util.HashMap;
src/main/org/codehaus/groovy/ast/ClassNode.java,53,import java.util.HashSet;
src/main/org/codehaus/groovy/ast/ClassNode.java,54,import java.util.Iterator;
src/main/org/codehaus/groovy/ast/ClassNode.java,55,import java.util.List;
src/main/org/codehaus/groovy/ast/ClassNode.java,56,import java.util.Map;
src/main/org/codehaus/groovy/ast/ClassNode.java,333,for (int i = 0; i < interfaces.length; i++) {
src/main/org/codehaus/groovy/ast/ClassNode.java,334,abstractNodes.add(interfaces[i].redirect());
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1701,throw new ASTRuntimeException(node, "\n" + leftExpression.getClass() + ", with its value '" + leftExpression.getText() + "', is a bad expression as the LSH of an assignment operator");
src/main/groovy/sql/Sql.java,51,import java.util.ArrayList;
src/main/groovy/sql/Sql.java,52,import java.util.Collections;
src/main/groovy/sql/Sql.java,53,import java.util.Iterator;
src/main/groovy/sql/Sql.java,54,import java.util.List;
src/main/groovy/sql/Sql.java,55,import java.util.LinkedHashMap;
src/main/groovy/sql/Sql.java,56,import java.util.Properties;
src/main/groovy/sql/Sql.java,1133,Object[] values = gstring.getValues();
src/main/groovy/sql/Sql.java,1134,List answer = new ArrayList(values.length);
src/main/groovy/sql/Sql.java,1135,for (int i = 0; i < values.length; i++) {
src/main/groovy/sql/Sql.java,1136,if (values[i] != null) {
src/main/groovy/sql/Sql.java,1137,answer.add(values[i]);
src/main/groovy/sql/Sql.java,1140,return answer;
src/main/groovy/sql/Sql.java,1150,setObject(statement, i++, value);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,3553,String text = toString(value);
src/main/groovy/lang/ObjectRange.java,240,Object value = from;
src/main/groovy/lang/ObjectRange.java,242,value = increment(value);
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,399,if (classNode!=null && (classNode.getModifiers() & Opcodes.ACC_INTERFACE) >0) {
src/main/groovy/util/OrderBy.java,97,return c1.compareTo(value2);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,308,System.out.print(InvokerHelper.toString(value));
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,315,System.out.println();
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,322,System.out.println(InvokerHelper.toString(value));
src/main/org/codehaus/groovy/runtime/InvokerHelper.java,638,return format(arg, true);
src/main/org/codehaus/groovy/runtime/InvokerHelper.java,683,buffer.append(format(elem, true));
src/main/org/codehaus/groovy/runtime/InvokerHelper.java,704,argBuf.append(format(arguments[i], true));
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,92,if (receiver instanceof GroovyInterceptable) {
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,100,if (receiver.getClass() == e.getType() && e.getMethod().equals(messageName)) {
src/main/groovy/lang/Binding.java,63,variables = new HashMap();
src/main/org/codehaus/groovy/runtime/MetaClassHelper.java,748,if (methodOrConstructor instanceof MetaMethod) {
src/main/org/codehaus/groovy/runtime/typehandling/NumberMath.java,172,else if (isBigDecimal(left) || isBigDecimal(right)) {
src/main/org/codehaus/groovy/runtime/typehandling/NumberMath.java,175,else if (isBigInteger(left) || isBigInteger(right)) {
src/main/org/codehaus/groovy/runtime/typehandling/NumberMath.java,178,else if (isLong(left) || isLong(right)){
src/main/org/codehaus/groovy/runtime/typehandling/NumberMath.java,185,if (isInteger(number)) {
src/main/org/codehaus/groovy/runtime/typehandling/NumberMath.java,188,else if (isLong(number)) {
src/main/org/codehaus/groovy/runtime/typehandling/NumberMath.java,191,else if (isFloatingPoint(number)) {
src/main/org/codehaus/groovy/runtime/typehandling/NumberMath.java,194,else if (isBigDecimal(number)) {
src/main/org/codehaus/groovy/runtime/typehandling/NumberMath.java,197,else if (isBigInteger(number)) {
src/main/org/codehaus/groovy/runtime/typehandling/NumberMath.java,200,else {
src/main/org/codehaus/groovy/runtime/typehandling/NumberMath.java,201,throw new IllegalArgumentException("An unexpected Number subclass was supplied.");
src/main/groovy/util/AntBuilder.java,184,((Task) task).perform();
src/main/groovy/util/AntBuilder.java,49,import java.util.Collections;
src/main/groovy/util/AntBuilder.java,50,import java.util.Iterator;
src/main/groovy/util/AntBuilder.java,51,import java.util.Map;
src/main/groovy/util/AntBuilder.java,52,import java.util.logging.Level;
src/main/groovy/util/AntBuilder.java,53,import java.util.logging.Logger;
src/main/groovy/util/AntBuilder.java,55,import org.apache.tools.ant.BuildLogger;
src/main/groovy/util/AntBuilder.java,56,import org.apache.tools.ant.NoBannerLogger;
src/main/groovy/util/AntBuilder.java,57,import org.apache.tools.ant.Project;
src/main/groovy/util/AntBuilder.java,58,import org.apache.tools.ant.RuntimeConfigurable;
src/main/groovy/util/AntBuilder.java,59,import org.apache.tools.ant.Target;
src/main/groovy/util/AntBuilder.java,60,import org.apache.tools.ant.Task;
src/main/groovy/util/AntBuilder.java,61,import org.apache.tools.ant.UnknownElement;
src/main/groovy/util/AntBuilder.java,69,import groovy.xml.QName;
src/main/org/codehaus/groovy/ast/ClassNode.java,92,private List methods = new ArrayList();
src/main/org/codehaus/groovy/ast/ClassNode.java,310,if (!lazyInitDone) {
src/main/org/codehaus/groovy/ast/ClassNode.java,311,lazyClassInit();
src/main/org/codehaus/groovy/ast/ClassNode.java,314,return methods;
src/main/org/codehaus/groovy/ast/ClassNode.java,475,redirect().methods.add(node);
src/main/org/codehaus/groovy/ast/ClassNode.java,630,List answer = new ArrayList();
src/main/org/codehaus/groovy/ast/ClassNode.java,631,for (Iterator iter = getMethods().iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/ast/ClassNode.java,632,MethodNode method = (MethodNode) iter.next();
src/main/org/codehaus/groovy/ast/ClassNode.java,633,if (name.equals(method.getName())) {
src/main/org/codehaus/groovy/ast/ClassNode.java,634,answer.add(method);
src/main/org/codehaus/groovy/ast/ClassNode.java,637,return answer;
src/main/org/codehaus/groovy/ast/ClassNode.java,644,List answer = new ArrayList();
src/main/org/codehaus/groovy/ast/ClassNode.java,645,ClassNode node = this;
src/main/org/codehaus/groovy/ast/ClassNode.java,646,do {
src/main/org/codehaus/groovy/ast/ClassNode.java,647,for (Iterator iter = node.getMethods().iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/ast/ClassNode.java,648,MethodNode method = (MethodNode) iter.next();
src/main/org/codehaus/groovy/ast/ClassNode.java,649,if (name.equals(method.getName())) {
src/main/org/codehaus/groovy/ast/ClassNode.java,650,answer.add(method);
src/main/org/codehaus/groovy/ast/ClassNode.java,653,node = node.getSuperClass();
src/main/org/codehaus/groovy/ast/ClassNode.java,655,while (node != null);
src/main/org/codehaus/groovy/ast/ClassNode.java,663,for (Iterator iter = getMethods().iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/ast/ClassNode.java,665,if (name.equals(method.getName()) && parametersEqual(method.getParameters(), parameters)) {
src/main/org/codehaus/groovy/ast/ClassNode.java,843,for (Iterator iter = getMethods().iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/ast/ClassNode.java,854,public MethodNode getSetterMethod(String getterName) {
src/main/org/codehaus/groovy/ast/ClassNode.java,855,for (Iterator iter = getMethods().iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/ast/ClassNode.java,913,for (Iterator iter = getMethods().iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/ast/ClassNode.java,915,if (name.equals(method.getName()) && method.getParameters().length == count) {
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,172,for (ClassNode superCN = cn.getSuperClass(); superCN != null; superCN = superCN.getSuperClass()) {
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,173,List superMethods = superCN.getMethods(method.getName());
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,174,for (Iterator iter = superMethods.iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,175,MethodNode superMethod = (MethodNode) iter.next();
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,176,Parameter[] superParams = superMethod.getParameters();
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,177,if (!hasEqualParameterTypes(params, superParams)) continue;
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,178,if (!Modifier.isFinal(superMethod.getModifiers())) return;
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,179,addInvalidUseOfFinalError(method, params, superCN);
src/main/org/codehaus/groovy/classgen/ClassCompletionVerifier.java,180,return;
src/main/org/codehaus/groovy/classgen/Verifier.java,272,FieldNode timeTagField = new FieldNode(
src/main/org/codehaus/groovy/classgen/Verifier.java,273,Verifier.__TIMESTAMP,
src/main/org/codehaus/groovy/classgen/Verifier.java,274,Modifier.PUBLIC | Modifier.STATIC,
src/main/org/codehaus/groovy/classgen/Verifier.java,275,ClassHelper.Long_TYPE,
src/main/org/codehaus/groovy/classgen/Verifier.java,277,node,
src/main/org/codehaus/groovy/classgen/Verifier.java,278,new ConstantExpression(new Long(System.currentTimeMillis())));
src/main/org/codehaus/groovy/classgen/Verifier.java,280,timeTagField.setSynthetic(true);
src/main/org/codehaus/groovy/classgen/Verifier.java,281,node.addField(timeTagField);
src/main/org/codehaus/groovy/runtime/MetaClassHelper.java,943,public static boolean parametersAreCompatible(Class[] arguments, Class[] parameters) {
src/main/org/codehaus/groovy/runtime/MetaClassHelper.java,948,return true;
src/main/groovy/lang/Closure.java,74,private Class[] parameterTypes;
src/main/org/codehaus/groovy/runtime/MethodClosure.java,7,import groovy.lang.Closure;
src/main/org/codehaus/groovy/runtime/MethodClosure.java,36,maximumNumberOfParameters = methods[j].getParameterTypes().length;
src/main/org/codehaus/groovy/runtime/MethodClosure.java,46,maximumNumberOfParameters = methods[j].getParameterTypes().length;
src/main/groovy/xml/MarkupBuilder.java,143,nodeIsEmpty = false;
src/main/groovy/xml/MarkupBuilder.java,144,out.print(">" + escapeElementContent(value.toString()) + "</" + name + ">");
src/main/groovy/xml/MarkupBuilder.java,146,else {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2015,int size = array.length;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2016,List list = new ArrayList(size);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2017,for (int i = 0; i < size; i++) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2018,list.add(array[i]);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2020,return list;
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,491,throw new GroovyRuntimeException("Cannot compare values: " + left + " and " + right);
src/main/groovy/lang/Closure.java,344,return Closure.this.call();
src/main/groovy/lang/Closure.java,351,return Closure.this.call(arguments);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,50,import java.util.Iterator;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,51,import java.util.List;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,53,import java.util.Map;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,120,List list = (List) receiver;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,122,for (Iterator it = list.iterator(); it.hasNext();) {
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,162,List list = (List) receiver;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,164,for (Iterator it = list.iterator(); it.hasNext();) {
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,286,List list = (List) receiver;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,288,for (Iterator it = list.iterator(); it.hasNext();) {
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,321,List list = (List) receiver;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,322,List answer = new ArrayList();
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,323,for (Iterator it = list.iterator(); it.hasNext();) {
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,382,List list = (List) receiver;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,383,List answer = new ArrayList();
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,384,for (Iterator it = list.iterator(); it.hasNext();) {
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,406,List list = (List) receiver;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,408,for (Iterator it = list.iterator(); it.hasNext();) {
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,434,List list = (List) receiver;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,435,List answer = new ArrayList();
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,436,for (Iterator it = list.iterator(); it.hasNext();) {
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,456,List list = (List) receiver;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,458,for (Iterator it = list.iterator(); it.hasNext();) {
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,486,List list = (List) receiver;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,487,List answer = new ArrayList();
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,488,for (Iterator it = list.iterator(); it.hasNext();) {
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,515,List list = (List) receiver;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,517,for (Iterator it = list.iterator(); it.hasNext();) {
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,547,List list = (List) receiver;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,549,for (Iterator it = list.iterator(); it.hasNext();) {
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,572,List list = (List) receiver;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,574,for (Iterator it = list.iterator(); it.hasNext();) {
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,600,List list = (List) receiver;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,601,List answer = new ArrayList();
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,602,for (Iterator it = list.iterator(); it.hasNext();) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1849,if (isThisExpression(objectExpression)) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1853,FieldNode field = classNode.getField(name);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1898,if (usesSuper(expression)) adapter = getFieldOnSuper;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,257,public static int selectConstructorAndTransformArguments(Object[] arguments, int numberOfCosntructors, Class which) {
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,259,return metaClass.selectConstructorAndTransformArguments(numberOfCosntructors, arguments);
src/main/groovy/lang/DelegatingMetaClass.java,152,public String toString() {
src/main/groovy/lang/DelegatingMetaClass.java,153,return delegate.toString();
src/main/org/codehaus/groovy/ast/expr/TernaryExpression.java,110,return trueExpression.getType();
src/main/org/codehaus/groovy/runtime/InvokerHelper.java,414,return new Script() {
src/main/org/codehaus/groovy/runtime/InvokerHelper.java,420,try {
src/main/org/codehaus/groovy/runtime/InvokerHelper.java,421,final GroovyObject object = (GroovyObject) scriptClass.newInstance();
src/main/org/codehaus/groovy/runtime/InvokerHelper.java,422,Script script = null;
src/main/org/codehaus/groovy/runtime/InvokerHelper.java,423,if (object instanceof Script) {
src/main/org/codehaus/groovy/runtime/InvokerHelper.java,424,script = (Script) object;
src/main/org/codehaus/groovy/runtime/InvokerHelper.java,429,script = new Script() {
src/main/org/codehaus/groovy/runtime/InvokerHelper.java,430,public Object run() {
src/main/org/codehaus/groovy/runtime/InvokerHelper.java,431,object.invokeMethod("main", EMPTY_MAIN_ARGS);
src/main/org/codehaus/groovy/runtime/InvokerHelper.java,432,return null;
src/main/org/codehaus/groovy/runtime/InvokerHelper.java,435,setProperties(object, context.getVariables());
src/main/org/codehaus/groovy/runtime/InvokerHelper.java,437,script.setBinding(context);
src/main/org/codehaus/groovy/runtime/InvokerHelper.java,438,return script;
src/main/org/codehaus/groovy/runtime/InvokerHelper.java,440,catch (Exception e) {
src/main/org/codehaus/groovy/runtime/InvokerHelper.java,441,throw new GroovyRuntimeException("Failed to create Script instance for class: " + scriptClass + ". Reason: " + e,
src/main/org/codehaus/groovy/runtime/InvokerHelper.java,442,e);
src/main/groovy/util/GroovyTestCase.java,52,import java.util.logging.Logger;
src/main/groovy/util/GroovyTestCase.java,56,import junit.framework.TestCase;
src/main/groovy/util/GroovyTestCase.java,58,import org.codehaus.groovy.runtime.InvokerHelper;
src/main/groovy/util/GroovyTestCase.java,274,th = gre;
src/main/groovy/util/GroovyTestCase.java,275,while (th.getCause()!=null && th.getCause()!=gre){ // if wrapped, find the root cause
src/main/groovy/util/GroovyTestCase.java,276,th=th.getCause();
src/main/groovy/util/GroovyTestCase.java,277,if (th!=gre && (th instanceof GroovyRuntimeException)) {
src/main/groovy/util/GroovyTestCase.java,278,gre = (GroovyRuntimeException) th;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2236,if (value instanceof Collection) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2237,answer.addAll((Collection) value);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2239,answer.add(value);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,3007,expression.visit(this);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1925,Map answer = new HashMap(keys.size());
src/main/groovy/lang/Closure.java,55,import java.lang.reflect.Method;
src/main/groovy/lang/Closure.java,56,import java.security.AccessController;
src/main/groovy/lang/Closure.java,57,import java.security.PrivilegedAction;
src/main/groovy/lang/Closure.java,111,protected Object getThisObject(){
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,54,import org.w3c.dom.Attr;
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,55,import org.w3c.dom.Comment;
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,56,import org.w3c.dom.Document;
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,57,import org.w3c.dom.Element;
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,58,import org.w3c.dom.NamedNodeMap;
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,59,import org.w3c.dom.Node;
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,60,import org.w3c.dom.NodeList;
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,61,import org.w3c.dom.ProcessingInstruction;
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,62,import org.w3c.dom.Text;
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,113,if (prefix != null && prefix.length() > 0) {
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,117,print(getLocalName(element));
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,124,printEnd(hasAttributes ? ")" : "()", endWithComma);
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,130,if (hasAttributes) print(", '");
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,131,else print("('");
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,132,print(text);
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,133,printEnd("')", endWithComma);
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,135,println(" [");
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,138,boolean useComma = node.getNextSibling() != null;
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,139,print(node, namespaces, useComma);
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,143,printEnd("]", endWithComma);
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,157,print("xml.pi('");
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,159,print("', '");
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,161,printEnd("');", endWithComma);
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,181,print("'");
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,182,print(text);
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,183,printEnd("'", endWithComma);
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,214,print(" = xmlns.namespace('");
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,216,println("')");
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,229,print("(");
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,237,print("xmlns=[");
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,239,print("]");
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,248,if (prefix != null && prefix.length() > 0) {
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,255,buffer.append(":'");
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,256,buffer.append(getAttributeValue(attribute));
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,257,buffer.append("'");
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,273,print(getLocalName(attribute));
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,274,print(":'");
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,275,print(getAttributeValue(attribute));
src/main/org/codehaus/groovy/tools/xml/DomToGroovy.java,276,print("'");
src/main/org/codehaus/groovy/ast/ClassHelper.java,106,GSTRING_TYPE = new ClassNode(GString.class), LIST_TYPE = new ClassNode(List.class),
src/main/org/codehaus/groovy/ast/ClassHelper.java,109,SCRIPT_TYPE = new ClassNode(Script.class),   REFERENCE_TYPE = new ClassNode(Reference.class),
src/main/org/codehaus/groovy/ast/ClassHelper.java,181,ClassNode cn = make(c.getComponentType());
src/main/org/codehaus/groovy/ast/ClassNode.java,120,protected ClassNode redirect(){
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,524,public static Object[] convertPrimitiveArray(Object a, Class type) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,526,Object[] ans = null;
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,527,String elemType = type.getName();
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,528,if (elemType.equals("int")) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,530,if (a.getClass().getName().equals("[Ljava.lang.Integer;")) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,531,ans = (Integer[]) a;
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,533,else {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,534,int[] ia = (int[]) a;
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,535,ans = new Integer[ia.length];
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,536,for (int i = 0; i < ia.length; i++) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,537,int e = ia[i];
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,538,ans[i] = IntegerCache.integerValue(e);
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,542,else if (elemType.equals("char")) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,543,if (a.getClass().getName().equals("[Ljava.lang.Character;")) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,544,ans = (Character[]) a;
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,546,else {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,547,char[] ia = (char[]) a;
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,548,ans = new Character[ia.length];
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,549,for (int i = 0; i < ia.length; i++) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,550,char e = ia[i];
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,551,ans[i] = new Character(e);
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,555,else if (elemType.equals("boolean")) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,556,if (a.getClass().getName().equals("[Ljava.lang.Boolean;")) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,557,ans = (Boolean[]) a;
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,559,else {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,560,boolean[] ia = (boolean[]) a;
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,561,ans = new Boolean[ia.length];
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,562,for (int i = 0; i < ia.length; i++) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,563,boolean e = ia[i];
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,564,ans[i] = new Boolean(e);
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,568,else if (elemType.equals("byte")) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,569,if (a.getClass().getName().equals("[Ljava.lang.Byte;")) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,570,ans = (Byte[]) a;
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,572,else {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,573,byte[] ia = (byte[]) a;
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,574,ans = new Byte[ia.length];
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,575,for (int i = 0; i < ia.length; i++) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,576,byte e = ia[i];
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,577,ans[i] = new Byte(e);
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,581,else if (elemType.equals("short")) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,582,if (a.getClass().getName().equals("[Ljava.lang.Short;")) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,583,ans = (Short[]) a;
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,585,else {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,586,short[] ia = (short[]) a;
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,587,ans = new Short[ia.length];
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,588,for (int i = 0; i < ia.length; i++) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,589,short e = ia[i];
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,590,ans[i] = new Short(e);
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,594,else if (elemType.equals("float")) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,595,if (a.getClass().getName().equals("[Ljava.lang.Float;")) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,596,ans = (Float[]) a;
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,598,else {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,599,float[] ia = (float[]) a;
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,600,ans = new Float[ia.length];
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,601,for (int i = 0; i < ia.length; i++) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,602,float e = ia[i];
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,603,ans[i] = new Float(e);
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,607,else if (elemType.equals("long")) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,608,if (a.getClass().getName().equals("[Ljava.lang.Long;")) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,609,ans = (Long[]) a;
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,611,else {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,612,long[] ia = (long[]) a;
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,613,ans = new Long[ia.length];
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,614,for (int i = 0; i < ia.length; i++) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,615,long e = ia[i];
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,616,ans[i] = new Long(e);
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,620,else if (elemType.equals("double")) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,621,if (a.getClass().getName().equals("[Ljava.lang.Double;")) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,622,ans = (Double[]) a;
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,624,else {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,625,double[] ia = (double[]) a;
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,626,ans = new Double[ia.length];
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,627,for (int i = 0; i < ia.length; i++) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,628,double e = ia[i];
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,629,ans[i] = new Double(e);
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,633,return ans;
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,435,list.add(Array.get(array, i));
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2751,for (Iterator iterator = removeMe.iterator(); iterator.hasNext();) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2753,if (elt != null && numberComparator.compare(element, elt) == 0) {
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1481,TernaryExpression ternaryExpression = new TernaryExpression(booleanExpression, left, right);
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1482,configureAST(ternaryExpression, ternaryNode);
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1483,return ternaryExpression;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,688,expression.getBooleanExpression().visit(this);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,692,visitAndAutoboxBoolean(expression.getTrueExpression());
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,698,visitAndAutoboxBoolean(expression.getFalseExpression());
src/main/org/codehaus/groovy/ast/expr/StaticMethodCallExpression.java,77,Expression ret = new StaticMethodCallExpression(getType(), method, transformer.transform(arguments));
src/main/org/codehaus/groovy/ast/expr/StaticMethodCallExpression.java,79,return ret;
src/main/org/codehaus/groovy/ast/expr/StaticMethodCallExpression.java,91,return getType().getName() + "." + method + arguments.getText();
src/main/org/codehaus/groovy/control/CompilationUnit.java,178,phaseOperations = new LinkedList[Phases.ALL+1];
src/main/org/codehaus/groovy/control/CompilationUnit.java,179,for (int i=0; i<phaseOperations.length; i++) {
src/main/org/codehaus/groovy/control/CompilationUnit.java,202,if (phase<0 || phase>Phases.ALL) throw new IllegalArgumentException("phase "+phase+" is unknown");
src/main/org/codehaus/groovy/control/CompilationUnit.java,207,if (phase<0 || phase>Phases.ALL) throw new IllegalArgumentException("phase "+phase+" is unknown");
src/main/org/codehaus/groovy/control/CompilationUnit.java,208,phaseOperations[phase].add(op);
src/main/org/codehaus/groovy/control/CompilationUnit.java,340,return addSource(new SourceUnit(url, configuration, classLoader,getErrorCollector()));
src/main/org/codehaus/groovy/control/CompilationUnit.java,360,SourceUnit su = (SourceUnit) iter.next();
src/main/org/codehaus/groovy/control/CompilationUnit.java,361,if (name.equals(su.getName())) return su;
src/main/org/codehaus/groovy/control/CompilationUnit.java,471,throughPhase = Math.min(throughPhase,Phases.ALL);
src/main/org/codehaus/groovy/control/CompilationUnit.java,480,applyToSourceUnits((SourceUnitOperation)operation);
src/main/org/codehaus/groovy/control/CompilationUnit.java,482,applyToGeneratedGroovyClasses((GroovyClassOperation)operation);
src/main/org/codehaus/groovy/control/CompilationUnit.java,492,gotoPhase(phase+1);
src/main/org/codehaus/groovy/control/CompilationUnit.java,494,if (phase==Phases.CLASS_GENERATION) {
src/main/org/codehaus/groovy/control/CompilationUnit.java,519,cn=null;
src/main/org/codehaus/groovy/control/CompilationUnit.java,549,sources.put(name,su);
src/main/org/codehaus/groovy/control/CompilationUnit.java,595,resolveVisitor.startResolving(node,source);
src/main/org/codehaus/groovy/control/CompilationUnit.java,640,getErrorCollector().addError(Message.create(e.getMessage(),CompilationUnit.this));
src/main/org/codehaus/groovy/control/CompilationUnit.java,669,.append (su.getName());
src/main/org/codehaus/groovy/control/CompilationUnit.java,681,first=false;
src/main/org/codehaus/groovy/control/CompilationUnit.java,683,message.append(cn.getName());
src/main/org/codehaus/groovy/control/CompilationUnit.java,714,new SyntaxException(rpe.getMessage(),null,node.getLineNumber(),node.getColumnNumber()),
src/main/org/codehaus/groovy/control/CompilationUnit.java,831,if ( (source.phase < phase) || (source.phase == phase && !source.phaseComplete)) {
src/main/org/codehaus/groovy/control/CompilationUnit.java,838,changeBugText(gbe,source);
src/main/org/codehaus/groovy/control/CompilationUnit.java,841,changeBugText(e,source);
src/main/org/codehaus/groovy/control/CompilationUnit.java,862,public boolean needSortedInput(){
src/main/org/codehaus/groovy/control/CompilationUnit.java,884,if(sort==false) return unsorted;
src/main/org/codehaus/groovy/control/CompilationUnit.java,892,while (element!=null){
src/main/org/codehaus/groovy/control/CompilationUnit.java,905,if (index[j]==-1) continue;
src/main/org/codehaus/groovy/control/CompilationUnit.java,906,if (min==-1) {
src/main/org/codehaus/groovy/control/CompilationUnit.java,927,SourceUnit context=null;
src/main/org/codehaus/groovy/control/CompilationUnit.java,929,ClassNode classNode = (ClassNode) classNodes.next();
src/main/org/codehaus/groovy/control/CompilationUnit.java,930,context = classNode.getModule().getContext();
src/main/org/codehaus/groovy/control/CompilationUnit.java,931,if (context == null || context.phase <= phase) {
src/main/org/codehaus/groovy/control/CompilationUnit.java,932,body.call(context, new GeneratorContext(this.ast), classNode);
src/main/org/codehaus/groovy/control/CompilationUnit.java,939,changeBugText(e,context);
src/main/org/codehaus/groovy/control/CompilationUnit.java,944,for (Throwable next = e.getCause(); next!=e && next!=null; next=next.getCause()) {
src/main/org/codehaus/groovy/control/CompilationUnit.java,951,if (nestedCollector!=null) {
src/main/org/codehaus/groovy/control/CompilationUnit.java,954,getErrorCollector().addError(new ExceptionMessage(e,configuration.getDebug(),this));
src/main/org/codehaus/groovy/control/CompilationUnit.java,964,throw new GroovyBugError("CompilationUnit not ready for output(). Current phase="+getPhaseDescription());
src/main/org/codehaus/groovy/control/CompilationUnit.java,982,changeBugText(e,null);
src/main/org/codehaus/groovy/control/CompilationUnit.java,994,e.setBugText("exception in phase '"+getPhaseDescription()+"' in source unit '"+((context!=null)?context.getName():"?")+"' "+e.getBugText());
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,5117,return readLine(new InputStreamReader(stream));
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,5099,BufferedReader br /* = null */;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,5102,br = (BufferedReader) self;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,5104,br = new BufferedReader(self); // todo dk: bug! will return null on second call
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,5106,return br.readLine();
src/main/org/codehaus/groovy/runtime/GroovyCategorySupport.java,209,private static void newScope() {
src/main/org/codehaus/groovy/runtime/GroovyCategorySupport.java,216,private static void endScope() {
src/main/groovy/model/DefaultTableModel.java,50,import java.util.Collections;
src/main/groovy/model/DefaultTableModel.java,51,import java.util.List;
src/main/groovy/model/DefaultTableModel.java,57,import org.codehaus.groovy.runtime.InvokerHelper;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,2663,param.setType(type);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,2707,if (element instanceof Parameter) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,2708,ret[index] = (Parameter) element;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,2711,ret[index] = p;
src/main/org/codehaus/groovy/classgen/VariableScopeVisitor.java,93,boolean dynamic;
src/main/org/codehaus/groovy/classgen/VariableScopeVisitor.java,291,break;
src/main/groovy/lang/Closure.java,115,public Object getProperty(String property) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1349,if (isStaticMethod() || classNode.isStaticClass()) {
src/main/groovy/util/slurpersupport/FilteredNodeChildren.java,40,final Iterator iter = FilteredNodeChildren.this.parent.iterator();
src/main/groovy/util/slurpersupport/FilteredNodeChildren.java,41,Object next = null;
src/main/groovy/util/slurpersupport/FilteredNodeChildren.java,45,final Object childNode = this.iter.next();
src/main/groovy/util/slurpersupport/FilteredNodeChildren.java,70,final Object node = iter.next();
src/main/groovy/util/slurpersupport/NodeChildren.java,68,private final Iterator iter = NodeChildren.this.parent.childNodes();
src/main/groovy/util/slurpersupport/NodeChildren.java,75,return this.childIter != null;
src/main/groovy/util/slurpersupport/NodeChildren.java,82,while (this.childIter != null) {
src/main/groovy/util/slurpersupport/NodeChildren.java,84,if (this.childIter.hasNext()) {
src/main/groovy/util/slurpersupport/NodeChildren.java,85,return this.childIter.next();
src/main/groovy/util/slurpersupport/NodeChildren.java,88,if (!this.childIter.hasNext()) {
src/main/groovy/util/slurpersupport/NodeChildren.java,89,this.childIter = nextChildIter();
src/main/groovy/util/slurpersupport/NodeChildren.java,105,while (this.iter.hasNext()) {
src/main/groovy/util/slurpersupport/NodeChildren.java,106,final Node node = (Node) this.iter.next();
src/main/groovy/util/slurpersupport/NodeChildren.java,108,if (NodeChildren.this.name.equals(node.name())) {
src/main/groovy/util/slurpersupport/NodeChildren.java,112,if ("*".equals(NodeChildren.this.namespacePrefix) ||
src/main/groovy/util/slurpersupport/NodeChildren.java,113,("".equals(NodeChildren.this.namespacePrefix) && "".equals(node.namespaceURI())) ||
src/main/groovy/util/slurpersupport/NodeChildren.java,114,node.namespaceURI().equals(NodeChildren.this.namespaceMap.get(NodeChildren.this.namespacePrefix))) {
src/main/groovy/util/slurpersupport/NodeChildren.java,128,final Iterator iter = nodeIterator();
src/main/groovy/util/slurpersupport/NodeChildren.java,131,return this.iter.hasNext();
src/main/groovy/util/slurpersupport/NodeChildren.java,135,return new NodeChild((Node) this.iter.next(), NodeChildren.this.parent, NodeChildren.this.namespaceTagHints);
src/main/groovy/util/slurpersupport/NodeChildren.java,145,if ("*".equals(this.name)) {
src/main/groovy/util/slurpersupport/NodeChildren.java,146,return this.parent.childNodes();
src/main/groovy/util/slurpersupport/NodeChildren.java,148,return new NodeIterator(this.parent.childNodes()) {
src/main/groovy/util/slurpersupport/NodeChildren.java,156,if (NodeChildren.this.name.equals(node.name())) {
src/main/groovy/util/slurpersupport/NodeChildren.java,157,if ("*".equals(NodeChildren.this.namespacePrefix) ||
src/main/groovy/util/slurpersupport/NodeChildren.java,158,("".equals(NodeChildren.this.namespacePrefix) && "".equals(node.namespaceURI())) ||
src/main/groovy/util/slurpersupport/NodeChildren.java,159,node.namespaceURI().equals(NodeChildren.this.namespaceMap.get(NodeChildren.this.namespacePrefix))) {
src/main/groovy/util/slurpersupport/NodeChildren.java,191,final StringBuffer buf = new StringBuffer();
src/main/groovy/util/slurpersupport/NodeChildren.java,192,final Iterator iter = nodeIterator();
src/main/groovy/util/slurpersupport/NodeChildren.java,202,final Iterator iter = iterator();
src/main/groovy/util/slurpersupport/NodeChildren.java,212,return new NoChildren(this, this.name, this.namespaceTagHints);
src/main/groovy/util/slurpersupport/NodeChildren.java,216,return new FilteredNodeChildren(this, closure, this.namespaceTagHints);
src/main/groovy/util/slurpersupport/NodeChildren.java,228,((Node) next).build(builder, this.namespaceMap, this.namespaceTagHints);
src/main/groovy/util/slurpersupport/NodeChildren.java,237,final Iterator iter = nodeIterator();
src/main/groovy/util/slurpersupport/NodeChildren.java,247,final Iterator iter = iterator();
src/main/groovy/util/slurpersupport/NodeChildren.java,250,final NodeChild result = (NodeChild)iter.next();
src/main/groovy/util/slurpersupport/NodeChildren.java,256,final Iterator iter = iterator();
src/main/groovy/util/slurpersupport/NodeChildren.java,259,final NodeChild result = (NodeChild)iter.next();
src/main/groovy/util/slurpersupport/NodeChildren.java,265,final Iterator iter = iterator();
src/main/groovy/util/slurpersupport/NodeChildren.java,268,final NodeChild result = (NodeChild)iter.next();
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,5758,writer.flush();
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,349,throw new RuntimeException("invoke threw a IllegalAccessException.  This is impossible.");
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,351,throw new RuntimeException("invoke threw a InvocationTargetException.  This is impossible.");
src/main/groovy/lang/MetaClass.java,21,import java.util.List;
src/main/groovy/lang/MetaClassImpl.java,416,public void addNewInstanceMethod(Method method) {
src/main/groovy/lang/MetaClassImpl.java,897,throw new MissingPropertyException(name, theClass);
src/main/groovy/lang/MetaClassImpl.java,1405,throw new MissingPropertyException(name, theClass);
src/main/groovy/xml/MarkupBuilder.java,359,throw new Error();
src/main/groovy/text/GStringTemplateEngine.java,97,final StringBuffer templateExpressions = new StringBuffer("package groovy.tmp.templates\n def getTemplate() { return { out -> delegate = new Binding(delegate); out << \"\"\"");
src/main/groovy/text/GStringTemplateEngine.java,98,boolean writingString = true;
src/main/groovy/text/GStringTemplateEngine.java,100,while(true) {
src/main/groovy/text/GStringTemplateEngine.java,101,int c = reader.read();
src/main/groovy/text/GStringTemplateEngine.java,103,if (c == -1) break;
src/main/groovy/text/GStringTemplateEngine.java,112,parseExpression(reader, writingString, templateExpressions);
src/main/groovy/text/GStringTemplateEngine.java,113,writingString = true;
src/main/groovy/text/GStringTemplateEngine.java,114,continue;
src/main/groovy/text/GStringTemplateEngine.java,116,parseSection(c, reader, writingString, templateExpressions);
src/main/groovy/text/GStringTemplateEngine.java,117,writingString = false;
src/main/groovy/text/GStringTemplateEngine.java,118,continue;
src/main/groovy/text/GStringTemplateEngine.java,125,appendCharacter('\\', templateExpressions, writingString);
src/main/groovy/text/GStringTemplateEngine.java,126,writingString = true;
src/main/groovy/text/GStringTemplateEngine.java,129,appendCharacter((char)c, templateExpressions, writingString);
src/main/groovy/text/GStringTemplateEngine.java,134,templateExpressions.append("\"\"\"");
src/main/groovy/text/GStringTemplateEngine.java,143,(GroovyClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
src/main/groovy/text/GStringTemplateEngine.java,144,public Object run() {
src/main/groovy/text/GStringTemplateEngine.java,145,return new GroovyClassLoader(parentLoader);
src/main/groovy/text/GStringTemplateEngine.java,153,this.template = (Closure)object.invokeMethod("getTemplate", null);
src/main/groovy/text/GStringTemplateEngine.java,187,throws IOException
src/main/groovy/text/GStringTemplateEngine.java,192,templateExpressions.append((char)pendingC);
src/main/groovy/text/GStringTemplateEngine.java,194,while (true) {
src/main/groovy/text/GStringTemplateEngine.java,195,int c = reader.read();
src/main/groovy/text/GStringTemplateEngine.java,197,if (c == -1) break;
src/main/groovy/text/GStringTemplateEngine.java,199,if (c =='%') {
src/main/groovy/text/GStringTemplateEngine.java,200,c = reader.read();
src/main/groovy/text/GStringTemplateEngine.java,202,if (c == '>') break;
src/main/groovy/text/GStringTemplateEngine.java,204,templateExpressions.append('%');
src/main/groovy/text/GStringTemplateEngine.java,207,templateExpressions.append((char)c);
src/main/groovy/text/GStringTemplateEngine.java,210,templateExpressions.append(";\n ");
src/main/groovy/text/GStringTemplateEngine.java,222,final boolean writingString,
src/main/groovy/text/GStringTemplateEngine.java,224,throws IOException
src/main/groovy/text/GStringTemplateEngine.java,232,while (true) {
src/main/groovy/text/GStringTemplateEngine.java,233,int c = reader.read();
src/main/groovy/text/GStringTemplateEngine.java,235,if (c == -1) break;
src/main/groovy/text/GStringTemplateEngine.java,237,if (c =='%') {
src/main/groovy/text/GStringTemplateEngine.java,238,c = reader.read();
src/main/groovy/text/GStringTemplateEngine.java,240,if (c == '>') break;
src/main/groovy/text/GStringTemplateEngine.java,242,templateExpressions.append('%');
src/main/groovy/text/GStringTemplateEngine.java,245,templateExpressions.append((char)c);
src/main/groovy/text/GStringTemplateEngine.java,252,return make(null);
src/main/groovy/text/GStringTemplateEngine.java,255,public Writable make(final Map map) {
src/main/groovy/text/GStringTemplateEngine.java,256,final Closure template = (Closure)this.template.clone();
src/main/groovy/text/GStringTemplateEngine.java,258,template.setDelegate(map);
src/main/groovy/text/GStringTemplateEngine.java,260,return (Writable)template;
src/main/org/codehaus/groovy/control/CompilationUnit.java,188,addPhaseOperation(convert,   Phases.CONVERSION);
src/main/org/codehaus/groovy/control/CompilationUnit.java,189,addPhaseOperation(resolve,   Phases.SEMANTIC_ANALYSIS);
src/main/org/codehaus/groovy/control/CompilationUnit.java,191,addPhaseOperation(classgen,  Phases.CLASS_GENERATION);
src/main/org/codehaus/groovy/control/ResolveVisitor.java,52,import org.codehaus.groovy.ast.ClassCodeVisitorSupport;
src/main/org/codehaus/groovy/control/ResolveVisitor.java,78,import org.codehaus.groovy.ast.stmt.AssertStatement;
src/main/org/codehaus/groovy/control/ResolveVisitor.java,80,import org.codehaus.groovy.ast.stmt.CaseStatement;
src/main/org/codehaus/groovy/control/ResolveVisitor.java,82,import org.codehaus.groovy.ast.stmt.DoWhileStatement;
src/main/org/codehaus/groovy/control/ResolveVisitor.java,83,import org.codehaus.groovy.ast.stmt.ExpressionStatement;
src/main/org/codehaus/groovy/control/ResolveVisitor.java,85,import org.codehaus.groovy.ast.stmt.IfStatement;
src/main/org/codehaus/groovy/control/ResolveVisitor.java,86,import org.codehaus.groovy.ast.stmt.ReturnStatement;
src/main/org/codehaus/groovy/control/ResolveVisitor.java,88,import org.codehaus.groovy.ast.stmt.SwitchStatement;
src/main/org/codehaus/groovy/control/ResolveVisitor.java,89,import org.codehaus.groovy.ast.stmt.SynchronizedStatement;
src/main/org/codehaus/groovy/control/ResolveVisitor.java,90,import org.codehaus.groovy.ast.stmt.ThrowStatement;
src/main/org/codehaus/groovy/control/ResolveVisitor.java,91,import org.codehaus.groovy.ast.stmt.WhileStatement;
src/main/org/codehaus/groovy/control/ResolveVisitor.java,108,public class ResolveVisitor extends ClassCodeVisitorSupport implements ExpressionTransformer {
src/main/org/codehaus/groovy/control/ResolveVisitor.java,150,public void visitSwitch(SwitchStatement statement) {
src/main/org/codehaus/groovy/control/ResolveVisitor.java,151,Expression exp = statement.getExpression();
src/main/org/codehaus/groovy/control/ResolveVisitor.java,152,statement.setExpression(transform(exp));
src/main/org/codehaus/groovy/control/ResolveVisitor.java,153,List list = statement.getCaseStatements();
src/main/org/codehaus/groovy/control/ResolveVisitor.java,154,for (Iterator iter = list.iterator(); iter.hasNext(); ) {
src/main/org/codehaus/groovy/control/ResolveVisitor.java,155,CaseStatement caseStatement = (CaseStatement) iter.next();
src/main/org/codehaus/groovy/control/ResolveVisitor.java,156,caseStatement.visit(this);
src/main/org/codehaus/groovy/control/ResolveVisitor.java,158,statement.getDefaultStatement().visit(this);
src/main/org/codehaus/groovy/control/ResolveVisitor.java,186,visitAnnotations(node);
src/main/org/codehaus/groovy/control/ResolveVisitor.java,189,Expression init = node.getInitialExpression();
src/main/org/codehaus/groovy/control/ResolveVisitor.java,190,node.setInitialValueExpression(transform(init));
src/main/org/codehaus/groovy/control/ResolveVisitor.java,194,visitAnnotations(node);
src/main/org/codehaus/groovy/control/ResolveVisitor.java,197,Statement code = node.getGetterBlock();
src/main/org/codehaus/groovy/control/ResolveVisitor.java,198,if (code!=null) code.visit(this);
src/main/org/codehaus/groovy/control/ResolveVisitor.java,199,code = node.getSetterBlock();
src/main/org/codehaus/groovy/control/ResolveVisitor.java,200,if (code!=null) code.visit(this);
src/main/org/codehaus/groovy/control/ResolveVisitor.java,203,public void visitIfElse(IfStatement ifElse) {
src/main/org/codehaus/groovy/control/ResolveVisitor.java,204,visitStatement(ifElse);
src/main/org/codehaus/groovy/control/ResolveVisitor.java,205,ifElse.setBooleanExpression((BooleanExpression) (transform(ifElse.getBooleanExpression())));
src/main/org/codehaus/groovy/control/ResolveVisitor.java,206,ifElse.getIfBlock().visit(this);
src/main/org/codehaus/groovy/control/ResolveVisitor.java,207,ifElse.getElseBlock().visit(this);
src/main/org/codehaus/groovy/control/ResolveVisitor.java,230,if (type.isResolved()) return true;
src/main/org/codehaus/groovy/control/ResolveVisitor.java,736,return ret;
src/main/org/codehaus/groovy/control/ResolveVisitor.java,791,public void visitReturnStatement(ReturnStatement statement) {
src/main/org/codehaus/groovy/control/ResolveVisitor.java,792,statement.setExpression(transform(statement.getExpression()));
src/main/org/codehaus/groovy/control/ResolveVisitor.java,795,public void visitAssertStatement(AssertStatement as) {
src/main/org/codehaus/groovy/control/ResolveVisitor.java,796,as.setBooleanExpression((BooleanExpression) (transform(as.getBooleanExpression())));
src/main/org/codehaus/groovy/control/ResolveVisitor.java,797,as.setMessageExpression(transform(as.getMessageExpression()));
src/main/org/codehaus/groovy/control/ResolveVisitor.java,800,public void visitCaseStatement(CaseStatement statement) {
src/main/org/codehaus/groovy/control/ResolveVisitor.java,801,statement.setExpression(transform(statement.getExpression()));
src/main/org/codehaus/groovy/control/ResolveVisitor.java,802,statement.getCode().visit(this);
src/main/org/codehaus/groovy/control/ResolveVisitor.java,813,public void visitDoWhileLoop(DoWhileStatement loop) {
src/main/org/codehaus/groovy/control/ResolveVisitor.java,814,loop.setBooleanExpression((BooleanExpression) (transform(loop.getBooleanExpression())));
src/main/org/codehaus/groovy/control/ResolveVisitor.java,815,super.visitDoWhileLoop(loop);
src/main/org/codehaus/groovy/control/ResolveVisitor.java,819,forLoop.setCollectionExpression(transform(forLoop.getCollectionExpression()));
src/main/org/codehaus/groovy/control/ResolveVisitor.java,824,public void visitSynchronizedStatement(SynchronizedStatement sync) {
src/main/org/codehaus/groovy/control/ResolveVisitor.java,825,sync.setExpression(transform(sync.getExpression()));
src/main/org/codehaus/groovy/control/ResolveVisitor.java,826,super.visitSynchronizedStatement(sync);
src/main/org/codehaus/groovy/control/ResolveVisitor.java,829,public void visitThrowStatement(ThrowStatement ts) {
src/main/org/codehaus/groovy/control/ResolveVisitor.java,830,ts.setExpression(transform(ts.getExpression()));
src/main/org/codehaus/groovy/control/ResolveVisitor.java,833,public void visitWhileLoop(WhileStatement loop) {
src/main/org/codehaus/groovy/control/ResolveVisitor.java,834,loop.setBooleanExpression((BooleanExpression) transform(loop.getBooleanExpression()));
src/main/org/codehaus/groovy/control/ResolveVisitor.java,835,super.visitWhileLoop(loop);
src/main/org/codehaus/groovy/control/ResolveVisitor.java,838,public void visitExpressionStatement(ExpressionStatement es) {
src/main/org/codehaus/groovy/control/ResolveVisitor.java,839,es.setExpression(transform(es.getExpression()));
src/main/groovy/util/GroovyScriptEngine.java,126,groovyScriptConn.getInputStream();
src/main/groovy/util/GroovyScriptEngine.java,250,scriptName = scriptName.replace('.', File.separatorChar) + ".groovy";
src/main/groovy/util/GroovyScriptEngine.java,252,return entry.scriptClass;
src/main/groovy/util/GroovyScriptEngine.java,265,throws ResourceException, ScriptException
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,202,List list = (List) receiver;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,204,for (Iterator it = list.iterator(); it.hasNext();) {
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,205,answer.add(invokeMethodNSafe(senderClass, it.next(), messageName, messageArguments));
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1626,arguments.visit(this);
src/main/org/codehaus/groovy/classgen/CompileStack.java,630,visitedBlocks.add(block);
src/main/groovy/lang/MetaClassImpl.java,487,cacheInstanceMethod(methodKey, method);
src/main/groovy/lang/MetaClassImpl.java,488,return invokeMethod(sender,object,methodName, originalArguments, isCallToSuper, fromInsideClass);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,3149,public static void putAt(boolean[] array, int idx, Boolean newValue) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,3150,primitiveArrayPut(array, idx, newValue);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,3153,public static void putAt(byte[] array, int idx, Object newValue) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,3158,primitiveArrayPut(array, idx, newValue);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,3161,public static void putAt(char[] array, int idx, Object newValue) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,3168,primitiveArrayPut(array, idx, newValue);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,3171,public static void putAt(short[] array, int idx, Object newValue) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,3176,primitiveArrayPut(array, idx, newValue);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,3179,public static void putAt(int[] array, int idx, Object newValue) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,3184,primitiveArrayPut(array, idx, newValue);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,3187,public static void putAt(long[] array, int idx, Object newValue) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,3192,primitiveArrayPut(array, idx, newValue);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,3195,public static void putAt(float[] array, int idx, Object newValue) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,3200,primitiveArrayPut(array, idx, newValue);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,3203,public static void putAt(double[] array, int idx, Object newValue) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,3208,primitiveArrayPut(array, idx, newValue);
src/main/org/codehaus/groovy/runtime/MetaClassHelper.java,364,return null;
src/main/org/codehaus/groovy/runtime/MetaClassHelper.java,381,if (paramLength == 1) {
src/main/org/codehaus/groovy/runtime/MetaClassHelper.java,382,Class theType = paramTypes[0];
src/main/org/codehaus/groovy/runtime/MetaClassHelper.java,383,if (theType.isPrimitive()) continue;
src/main/groovy/util/GroovyScriptEngine.java,40,import java.io.BufferedReader;
src/main/groovy/util/GroovyScriptEngine.java,41,import java.io.File;
src/main/groovy/util/GroovyScriptEngine.java,42,import java.io.IOException;
src/main/groovy/util/GroovyScriptEngine.java,43,import java.io.InputStreamReader;
src/main/groovy/ui/GroovyMain.java,243,if (line.hasOption('c')) {
src/main/groovy/ui/GroovyMain.java,244,main.conf.setSourceEncoding(line.getOptionValue("encoding"));
src/main/groovy/lang/ObjectRange.java,101,this.from = normaliseType(from);
src/main/groovy/lang/ObjectRange.java,102,this.to = normaliseType(to);
src/main/groovy/lang/ObjectRange.java,329,private static Comparable normaliseType(final Comparable operand) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1081,public static Object inject(Object[] self, Object value, Closure closure) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1099,Object result = null;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1101,if (self.size() == 0) return result;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1103,boolean isNumber = true;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1105,Class classref = null;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1106,try {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1107,classref = Class.forName("java.lang.Number");
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1111,for (Iterator iter = self.iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1112,if (!classref.isInstance(iter.next())) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1113,isNumber = false;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1114,break;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1118,if (isNumber) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1119,result = new Integer(0);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1121,result = new String();
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1144,Object result = new Integer(0);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,541,NumberComparator comparator = new NumberComparator();
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,547,if (comparator.compare(o, o2) == 0) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2410,Collections.sort(answer, new NumberComparator());
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2590,Collection pickFrom = new TreeSet(new NumberComparator());
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2627,private static class NumberComparator implements Comparator {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2636,int x1 = o1.hashCode();
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2637,int x2 = o2.hashCode();
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2638,return (x1 - x2);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2709,Comparator numberComparator = new NumberComparator();
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2766,Comparator numberComparator = new NumberComparator();
src/main/org/codehaus/groovy/classgen/CompileStack.java,484,answer = defineVar(name, ClassHelper.getWrapper(paras[i].getType()), true);
src/main/org/codehaus/groovy/classgen/CompileStack.java,485,ClassNode type = paras[i].getType();
src/main/org/codehaus/groovy/classgen/CompileStack.java,491,answer = defineVar(name,paras[i].getType(),false);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,2993,protected void evaluatePrefixMethod(String method, Expression expression) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,3002,leftHandExpression = true;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,3003,expression.visit(this);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,3006,leftHandExpression = false;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,3018,makeCall(
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,3019,expression, new ConstantExpression(method),
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,3020,MethodCallExpression.NO_ARGUMENTS,
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,3024,leftHandExpression = true;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,3025,expression.visit(this);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,3026,leftHandExpression = false;
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1048,if (!isType(LITERAL_default, nextSibling) && nextSibling != null) {
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,1049,statement = statement(nextSibling);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,52,import java.util.ArrayList;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,57,import org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,58,import org.codehaus.groovy.runtime.wrappers.GroovyObjectWrapper;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,59,import org.codehaus.groovy.runtime.wrappers.PojoWrapper;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,60,import org.codehaus.groovy.runtime.wrappers.Wrapper;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,77,private static Object unwrap(GroovyRuntimeException gre) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,79,if (th.getCause()!=null && th.getCause()!=gre) th=th.getCause();
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,80,if (th!=gre && (th instanceof GroovyRuntimeException)) unwrap((GroovyRuntimeException) th);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,87,public static Object invokeMethodOnCurrentN(Class senderClass, GroovyObject receiver, String messageName, Object[] messageArguments) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,88,Object result=null;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,113,public static Object invokeMethodOnCurrentNSafe(Class senderClass, GroovyObject receiver, String messageName, Object[] messageArguments) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,114,return invokeMethodOnCurrentN(senderClass,receiver,messageName,messageArguments);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,117,public static Object invokeMethodOnCurrentNSpreadSafe(Class senderClass, GroovyObject receiver, String messageName, Object[] messageArguments) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,118,if (! (receiver instanceof List)) return invokeMethodOnCurrentN(senderClass,receiver,messageName, messageArguments);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,128,public static Object invokeMethodOnCurrent0(Class senderClass, GroovyObject receiver, String messageName)  throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,129,return invokeMethodOnCurrentN(senderClass,receiver,messageName,EMPTY_ARGS);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,132,public static Object invokeMethodOnCurrent0Safe(Class senderClass, GroovyObject receiver, String messageName, Object[] messageArguments) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,133,return invokeMethodOnCurrentNSafe(senderClass,receiver,messageName,EMPTY_ARGS);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,136,public static Object invokeMethodOnCurrent0SpreadSafe(Class senderClass, GroovyObject receiver, String messageName, Object[] messageArguments) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,137,return invokeMethodOnCurrentNSpreadSafe(senderClass,receiver,messageName,EMPTY_ARGS);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,143,public static Object invokeMethodOnSuperN(Class senderClass, GroovyObject receiver, String messageName, Object[] messageArguments) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,146,Object result=null;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,152,return result;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,155,public static Object invokeMethodOnSuperNSafe(Class senderClass, GroovyObject receiver, String messageName, Object[] messageArguments) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,156,return invokeMethodOnSuperN(senderClass,receiver,messageName,messageArguments);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,159,public static Object invokeMethodOnSuperNSpreadSafe(Class senderClass, GroovyObject receiver, String messageName, Object[] messageArguments) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,160,if (! (receiver instanceof List)) return invokeMethodOnSuperN(senderClass,receiver,messageName, messageArguments);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,165,answer.add(invokeMethodNSafe(senderClass,it.next(), messageName, messageArguments));
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,170,public static Object invokeMethodOnSuper0(Class senderClass, GroovyObject receiver, String messageName)  throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,171,return invokeMethodOnSuperN(senderClass,receiver,messageName,EMPTY_ARGS);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,174,public static Object invokeMethodOnSuper0Safe(Class senderClass, GroovyObject receiver, String messageName, Object[] messageArguments) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,175,return invokeMethodOnSuperNSafe(senderClass,receiver,messageName,EMPTY_ARGS);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,178,public static Object invokeMethodOnSuper0SpreadSafe(Class senderClass, GroovyObject receiver, String messageName, Object[] messageArguments) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,179,return invokeMethodOnSuperNSpreadSafe(senderClass,receiver,messageName,EMPTY_ARGS);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,185,public static Object invokeMethodN(Class senderClass, Object receiver, String messageName, Object[] messageArguments) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,193,public static Object invokeMethodNSafe(Class senderClass, Object receiver, String messageName, Object[] messageArguments) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,194,if (receiver==null) return null;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,195,return invokeMethodN(senderClass,receiver,messageName,messageArguments);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,198,public static Object invokeMethodNSpreadSafe(Class senderClass, Object receiver, String messageName, Object[] messageArguments) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,199,if (receiver==null) return null;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,200,if (! (receiver instanceof List)) return invokeMethodN(senderClass,receiver,messageName, messageArguments);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,210,public static Object invokeMethod0(Class senderClass, Object receiver, String messageName)  throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,211,return invokeMethodN(senderClass,receiver,messageName,EMPTY_ARGS);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,214,public static Object invokeMethod0Safe(Class senderClass, Object receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,215,if (receiver==null) return null;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,216,return invokeMethodNSafe(senderClass,receiver,messageName,EMPTY_ARGS);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,219,public static Object invokeMethod0SpreadSafe(Class senderClass, Object receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,220,return invokeMethodNSpreadSafe(senderClass,receiver,messageName,EMPTY_ARGS);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,226,public static Object invokeStaticMethodN(Class senderClass, Class receiver, String messageName, Object[] messageArguments) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,234,public static Object invokeStaticMethod0(Class senderClass, Class receiver, String messageName)  throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,235,return invokeStaticMethodN(senderClass,receiver,messageName,EMPTY_ARGS);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,241,public static Object invokeNewN(Class senderClass, Class receiver, Object arguments) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,266,public static Object getFieldOnSuper(Class senderClass, Object receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,269,return InvokerHelper.getAttribute(receiver,messageName);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,279,public static Object getFieldOnSuperSafe(Class senderClass, Object receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,280,return getFieldOnSuper(senderClass,receiver,messageName);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,283,public static Object getFieldOnSuperSpreadSafe(Class senderClass, Object receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,284,if (! (receiver instanceof List)) return getFieldOnSuper(senderClass,receiver,messageName);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,298,public static void setFieldOnSuper(Object messageArgument,Class senderClass, Object receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,301,InvokerHelper.setAttribute(receiver,messageName,messageArgument);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,311,public static void setFieldOnSuperSafe(Object messageArgument,Class senderClass, Object receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,312,setFieldOnSuper(messageArgument,senderClass,receiver,messageName);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,315,public static void setFieldOnSuperSpreadSafe(Object messageArgument,Class senderClass, Object receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,316,if (! (receiver instanceof List)) {
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,317,setFieldOnSuper(messageArgument,senderClass,receiver,messageName);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,324,setFieldOnSuper(messageArgument,senderClass, it.next(), messageName);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,333,public static Object getField(Class senderClass, Object receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,341,public static Object getFieldSafe(Class senderClass, Object receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,342,if (receiver==null) return null;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,343,return getField(senderClass,receiver,messageName);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,346,public static Object getFieldSpreadSafe(Class senderClass, Object receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,347,if (receiver==null) return null;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,348,if (! (receiver instanceof List)) return getField(senderClass,receiver,messageName);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,362,public static void setField(Object messageArgument, Class senderClass, Object receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,364,InvokerHelper.setAttribute(receiver, messageName,messageArgument);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,370,public static void setFieldSafe(Object messageArgument, Class senderClass, Object receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,371,if (receiver==null) return;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,372,setField(messageArgument,senderClass,receiver,messageName);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,375,public static void setFieldSpreadSafe(Object messageArgument, Class senderClass, Object receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,376,if (receiver==null) return;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,377,if (! (receiver instanceof List)) {
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,378,setField(messageArgument,senderClass,receiver,messageName);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,385,setFieldSafe(messageArgument,senderClass, it.next(), messageName);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,393,public static Object getGroovyObjectField(Class senderClass, GroovyObject receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,394,return receiver.getMetaClass().getAttribute(receiver,messageName);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,397,public static Object getGroovyObjectFieldSafe(Class senderClass, GroovyObject receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,398,if (receiver==null) return null;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,399,return receiver.getMetaClass().getAttribute(receiver,messageName);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,402,public static Object getGroovyObjectFieldSpreadSafe(Class senderClass, GroovyObject receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,403,if (receiver==null) return null;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,404,if (! (receiver instanceof List)) return getGroovyObjectField(senderClass,receiver,messageName);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,418,public static void setGroovyObjectField(Object messageArgument, Class senderClass, GroovyObject receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,419,receiver.getMetaClass().setAttribute(receiver,messageName,messageArgument);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,422,public static void setGroovyObjectFieldSafe(Object messageArgument, Class senderClass, GroovyObject receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,423,if (receiver==null) return;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,424,receiver.getMetaClass().setAttribute(receiver,messageName,messageArgument);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,427,public static void setGroovyObjectFieldSpreadSafe(Object messageArgument, Class senderClass, GroovyObject receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,428,if (receiver==null) return;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,429,if (! (receiver instanceof List)) {
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,430,setGroovyObjectField(messageArgument,senderClass,receiver,messageName);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,437,setFieldSafe(messageArgument,senderClass, it.next(), messageName);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,445,public static Object getPropertyOnSuper(Class senderClass, GroovyObject receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,449,public static Object getPropertyOnSuperSafe(Class senderClass, GroovyObject receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,450,return getPropertyOnSuper(senderClass,receiver,messageName);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,453,public static Object getPropertyOnSuperSpreadSafe(Class senderClass, GroovyObject receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,454,if (! (receiver instanceof List)) return getPropertyOnSuper(senderClass,receiver,messageName);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,468,public static void setPropertyOnSuper(Object messageArgument, Class senderClass, GroovyObject receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,470,InvokerHelper.setAttribute(receiver, messageName,messageArgument);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,476,public static void setPropertyOnSuperSafe(Object messageArgument, Class senderClass, GroovyObject receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,477,setPropertyOnSuper(messageArgument, senderClass,receiver,messageName);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,480,public static void setPropertyOnSuperSpreadSafe(Object messageArgument, Class senderClass, GroovyObject receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,481,if (! (receiver instanceof List)) {
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,482,setPropertyOnSuper(messageArgument, senderClass,receiver,messageName);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,498,public static Object getProperty(Class senderClass, Object receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,506,public static Object getPropertySafe(Class senderClass, Object receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,507,if (receiver==null) return null;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,508,return getProperty(senderClass,receiver,messageName);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,511,public static Object getPropertySpreadSafe(Class senderClass, Object receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,512,if (receiver==null) return null;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,513,if (! (receiver instanceof List)) return getProperty(senderClass,receiver,messageName);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,527,public static void setProperty(Object messageArgument, Class senderClass, Object receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,529,InvokerHelper.setProperty(receiver, messageName,messageArgument);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,535,public static void setPropertySafe(Object messageArgument, Class senderClass, Object receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,536,if (receiver==null) return;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,537,setProperty(messageArgument,senderClass,receiver,messageName);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,540,public static void setPropertySpreadSafe(Object messageArgument, Class senderClass, Object receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,541,if (receiver==null) return;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,542,if (! (receiver instanceof List)) {
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,548,List answer = new ArrayList();
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,559,public static Object getGroovyObjectProperty(Class senderClass, GroovyObject receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,560,return receiver.getProperty(messageName);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,563,public static Object getGroovyObjectPropertySafe(Class senderClass, GroovyObject receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,564,if (receiver==null) return null;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,565,return receiver.getProperty(messageName);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,568,public static Object getGroovyObjectPropertySpreadSafe(Class senderClass, GroovyObject receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,569,if (receiver==null) return null;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,570,if (! (receiver instanceof List)) return getGroovyObjectProperty(senderClass,receiver,messageName);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,584,public static void setGroovyObjectProperty(Object messageArgument, Class senderClass, GroovyObject receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,585,receiver.setProperty(messageName,messageArgument);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,588,public static void setGroovyObjectPropertySafe(Object messageArgument, Class senderClass, GroovyObject receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,589,if (receiver==null) return;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,590,receiver.setProperty(messageName,messageArgument);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,593,public static void setGroovyObjectPropertySpreadSafe(Object messageArgument, Class senderClass, GroovyObject receiver, String messageName) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,594,if (receiver==null) return;
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,595,if (! (receiver instanceof List)) {
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,643,return invokeMethodN(object.getClass(),object,"asType",new Object[]{type});
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,654,public static Object castToType(Object object, Class type) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,656,return DefaultTypeTransformation.castToType(object,type);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,671,return new PojoWrapper(val,clazz);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,675,return new GroovyObjectWrapper(val,clazz);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,686,if (compareEqual(from,to)){
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,687,return new EmptyRange((Comparable)from);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,692,else {
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,699,else {
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,706,InvokerHelper.assertFailed(expression,message);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,711,public static boolean isCase(Object switchValue, Object caseExpression) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,736,else {
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,745,public static boolean compareLessThanEqual(Object left, Object right){
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,749,public static boolean compareGreaterThan(Object left, Object right){
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,753,public static boolean compareGreaterThanEqual(Object left, Object right){
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,762,public static Matcher findRegex(Object left, Object right) throws Throwable{
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,780,for (int pos = 0; pos<positions.length; pos++) {
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,781,for (;argsPos<positions[pos];argsPos++) {
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,785,if (value==null) {
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,792,throw new IllegalArgumentException("connot spread the type "+ value.getClass().getName()+" with value "+value);
src/main/org/codehaus/groovy/runtime/ScriptBytecodeAdapter.java,796,for (;argsPos<args.length;argsPos++) {
src/main/groovy/lang/EmptyRange.java,11,public class EmptyRange implements Range {
src/main/groovy/lang/EmptyRange.java,13,protected final List EMPTY_LIST = new ArrayList();
src/main/groovy/lang/EmptyRange.java,32,return InvokerHelper.inspect(at)+"..<"+InvokerHelper.inspect(at);
src/main/groovy/lang/EmptyRange.java,36,if (null == at) return "null..<null";
src/main/groovy/lang/EmptyRange.java,37,return at.toString()+"..<"+at.toString();
src/main/groovy/lang/EmptyRange.java,44,public void clear() {
src/main/groovy/lang/EmptyRange.java,47,public boolean isEmpty() {
src/main/groovy/lang/EmptyRange.java,48,return true;
src/main/groovy/lang/EmptyRange.java,51,public Object[] toArray() {
src/main/groovy/lang/EmptyRange.java,52,return new Object[0];
src/main/groovy/lang/EmptyRange.java,55,public Object get(int index) {
src/main/groovy/lang/EmptyRange.java,56,return null;
src/main/groovy/lang/EmptyRange.java,59,public Object remove(int index) {
src/main/groovy/lang/EmptyRange.java,60,return null;
src/main/groovy/lang/EmptyRange.java,66,public void add(int index, Object element) {
src/main/groovy/lang/EmptyRange.java,67,throw new UnsupportedOperationException("cannot add to Empty Ranges");
src/main/groovy/lang/EmptyRange.java,70,public int indexOf(Object o) {
src/main/groovy/lang/EmptyRange.java,71,return -1;
src/main/groovy/lang/EmptyRange.java,74,public int lastIndexOf(Object o) {
src/main/groovy/lang/EmptyRange.java,75,return -1;
src/main/groovy/lang/EmptyRange.java,85,public boolean contains(Object o) {
src/main/groovy/lang/EmptyRange.java,86,return false;
src/main/groovy/lang/EmptyRange.java,89,public boolean remove(Object o) {
src/main/groovy/lang/EmptyRange.java,90,return false;
src/main/groovy/lang/EmptyRange.java,107,public boolean containsAll(Collection c) {
src/main/groovy/lang/EmptyRange.java,108,return false;
src/main/groovy/lang/EmptyRange.java,112,return false;
src/main/groovy/lang/EmptyRange.java,116,return false;
src/main/groovy/lang/EmptyRange.java,119,public Iterator iterator() {
src/main/groovy/lang/EmptyRange.java,120,return EMPTY_LIST.iterator();
src/main/groovy/lang/EmptyRange.java,123,public List subList(int fromIndex, int toIndex) {
src/main/groovy/lang/EmptyRange.java,124,return EMPTY_LIST.subList(fromIndex, toIndex);
src/main/groovy/lang/EmptyRange.java,127,public ListIterator listIterator() {
src/main/groovy/lang/EmptyRange.java,128,return EMPTY_LIST.listIterator();
src/main/groovy/lang/EmptyRange.java,131,public ListIterator listIterator(int index) {
src/main/groovy/lang/EmptyRange.java,132,return EMPTY_LIST.listIterator(index);
src/main/groovy/lang/EmptyRange.java,142,public Object[] toArray(Object a[]) {
src/main/groovy/lang/EmptyRange.java,143,return new Object[0];
src/main/groovy/lang/EmptyRange.java,150,return EMPTY_LIST;
src/main/groovy/lang/IntRange.java,52,import org.codehaus.groovy.runtime.IteratorClosureAdapter;
src/main/groovy/lang/IntRange.java,53,import org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation;
src/main/groovy/lang/IntRange.java,74,else {
src/main/groovy/lang/IntRange.java,87,if (that instanceof IntRange) {
src/main/groovy/lang/IntRange.java,88,return equals((IntRange) that);
src/main/groovy/lang/IntRange.java,90,else if (that instanceof List) {
src/main/groovy/lang/IntRange.java,91,return equals((List) that);
src/main/groovy/lang/IntRange.java,93,return false;
src/main/groovy/lang/IntRange.java,96,public boolean equals(List that) {
src/main/groovy/lang/IntRange.java,97,int size = size();
src/main/groovy/lang/IntRange.java,98,if (that.size() == size) {
src/main/groovy/lang/IntRange.java,99,for (int i = 0; i < size; i++) {
src/main/groovy/lang/IntRange.java,100,if (!DefaultTypeTransformation.compareEqual(get(i), that.get(i))) {
src/main/groovy/lang/IntRange.java,101,return false;
src/main/groovy/lang/IntRange.java,104,return true;
src/main/groovy/lang/IntRange.java,106,return false;
src/main/groovy/lang/IntRange.java,110,return this.reverse == that.reverse && this.from == that.from && this.to == that.to;
src/main/groovy/lang/IntRange.java,148,public int hashCode() {
src/main/groovy/lang/IntRange.java,149,return from ^ to + (reverse ? 1 : 0);
src/main/groovy/lang/IntRange.java,153,return new Iterator() {
src/main/groovy/lang/IntRange.java,158,public boolean hasNext() {
src/main/groovy/lang/IntRange.java,159,return index < size;
src/main/groovy/lang/IntRange.java,162,public Object next() {
src/main/groovy/lang/IntRange.java,163,if (index++ > 0) {
src/main/groovy/lang/IntRange.java,164,if (index > size) {
src/main/groovy/lang/IntRange.java,165,return null;
src/main/groovy/lang/IntRange.java,167,else {
src/main/groovy/lang/IntRange.java,168,if (reverse) {
src/main/groovy/lang/IntRange.java,169,--value;
src/main/groovy/lang/IntRange.java,171,else {
src/main/groovy/lang/IntRange.java,172,++value;
src/main/groovy/lang/IntRange.java,176,return new Integer(value);
src/main/groovy/lang/IntRange.java,179,public void remove() {
src/main/groovy/lang/IntRange.java,180,IntRange.this.remove(index);
src/main/groovy/lang/IntRange.java,212,IntRange range = (IntRange) value;
src/main/groovy/lang/IntRange.java,213,return from<=range.from && range.to<=to;
src/main/groovy/lang/IntRange.java,229,else {
src/main/groovy/lang/ObjectRange.java,51,import org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation;
src/main/groovy/lang/ObjectRange.java,56,import java.math.BigDecimal;
src/main/groovy/lang/ObjectRange.java,57,import java.math.BigInteger;
src/main/groovy/lang/ObjectRange.java,70,private int size;
src/main/groovy/lang/ObjectRange.java,74,this.size = -1;
src/main/groovy/lang/ObjectRange.java,84,this.size = -1;
src/main/groovy/lang/ObjectRange.java,91,if (from == null) {
src/main/groovy/lang/ObjectRange.java,92,throw new IllegalArgumentException("Must specify a non-null value for the 'from' index in a Range");
src/main/groovy/lang/ObjectRange.java,94,if (to == null) {
src/main/groovy/lang/ObjectRange.java,95,throw new IllegalArgumentException("Must specify a non-null value for the 'to' index in a Range");
src/main/groovy/lang/ObjectRange.java,97,if (from.getClass() == to.getClass()) {
src/main/groovy/lang/ObjectRange.java,124,public int hashCode() {
src/main/groovy/lang/ObjectRange.java,126,return from.hashCode() ^ to.hashCode() + (reverse ? 1 : 0);
src/main/groovy/lang/ObjectRange.java,130,if (that instanceof ObjectRange) {
src/main/groovy/lang/ObjectRange.java,131,return equals((ObjectRange) that);
src/main/groovy/lang/ObjectRange.java,133,return equals((List) that);
src/main/groovy/lang/ObjectRange.java,135,return false;
src/main/groovy/lang/ObjectRange.java,139,return this.reverse == that.reverse
src/main/groovy/lang/ObjectRange.java,141,&& DefaultTypeTransformation.compareEqual(this.to, that.to);
src/main/groovy/lang/ObjectRange.java,144,public boolean equals(List that) {
src/main/groovy/lang/ObjectRange.java,145,int size = size();
src/main/groovy/lang/ObjectRange.java,146,if (that.size() == size) {
src/main/groovy/lang/ObjectRange.java,147,for (int i = 0; i < size; i++) {
src/main/groovy/lang/ObjectRange.java,148,if (!DefaultTypeTransformation.compareEqual(get(i), that.get(i))) {
src/main/groovy/lang/ObjectRange.java,149,return false;
src/main/groovy/lang/ObjectRange.java,152,return true;
src/main/groovy/lang/ObjectRange.java,154,return false;
src/main/groovy/lang/ObjectRange.java,224,if (from instanceof Integer && to instanceof Integer) {
src/main/groovy/lang/ObjectRange.java,227,int fromNum = ((Integer) from).intValue();
src/main/groovy/lang/ObjectRange.java,228,int toNum = ((Integer) to).intValue();
src/main/groovy/lang/ObjectRange.java,254,int size = size();
src/main/groovy/lang/ObjectRange.java,255,if (toIndex > size) {
src/main/groovy/lang/ObjectRange.java,261,if (--toIndex >= size) {
src/main/groovy/lang/ObjectRange.java,262,return new ObjectRange((Comparable) get(fromIndex), getTo(), reverse);
src/main/groovy/lang/ObjectRange.java,264,return new ObjectRange((Comparable) get(fromIndex), (Comparable) get(toIndex), reverse);
src/main/groovy/lang/ObjectRange.java,278,public boolean contains(Object value) {
src/main/groovy/lang/ObjectRange.java,279,if (value instanceof Comparable) {
src/main/groovy/lang/ObjectRange.java,280,return contains((Comparable) value);
src/main/groovy/lang/ObjectRange.java,282,return super.contains(value);
src/main/groovy/lang/ObjectRange.java,286,public boolean contains(Comparable value) {
src/main/groovy/lang/ObjectRange.java,287,int result = from.compareTo(value);
src/main/groovy/lang/ObjectRange.java,288,return result == 0 || result < 0 && to.compareTo(value) >= 0;
src/main/groovy/lang/EmptyRange.java,12,protected Comparable at = null;
src/main/groovy/lang/IntRange.java,140,int value = (reverse) ? to - index : index + from;
src/main/groovy/lang/IntRange.java,154,int index = 0;
src/main/groovy/lang/IntRange.java,155,int size = size();
src/main/groovy/lang/IntRange.java,156,int value = (reverse) ? to : from;
src/main/groovy/lang/IntRange.java,199,return (reverse) ? "" + to + ".." + from : "" + from + ".." + to;
src/main/groovy/lang/ObjectRange.java,113,int i = 0;
src/main/groovy/lang/ObjectRange.java,176,Object value = null;
src/main/groovy/lang/ObjectRange.java,194,int index = 0;
src/main/groovy/lang/ObjectRange.java,195,Object value = (reverse) ? to : from;
src/main/groovy/lang/ObjectRange.java,269,return (reverse) ? "" + to + ".." + from : "" + from + ".." + to;
src/main/groovy/lang/ObjectRange.java,275,return (reverse) ? "" + toText + ".." + fromText : "" + fromText + ".." + toText;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1418,return text.subSequence(from, to + 1);
src/main/org/codehaus/groovy/runtime/Invoker.java,171,if (arguments == null) {
src/main/org/codehaus/groovy/runtime/Invoker.java,172,return EMPTY_ARGUMENTS;
src/main/org/codehaus/groovy/runtime/Invoker.java,174,return (Object[]) arguments;
src/main/groovy/swing/impl/TableLayoutRow.java,73,tag.getConstraints().gridx = cells.size();
src/main/groovy/swing/impl/TableLayoutRow.java,86,if ( iter.hasNext() ) {
src/main/groovy/swing/impl/TableLayoutRow.java,88,c.gridwidth = GridBagConstraints.RELATIVE;
src/main/groovy/swing/impl/TableLayoutRow.java,90,else {
src/main/groovy/swing/impl/TableLayoutRow.java,92,c.gridwidth = GridBagConstraints.REMAINDER;
src/main/org/codehaus/groovy/ant/Groovy.java,361,script.setProperty("ant", new AntBuilder(project, getOwningTarget()));
src/main/groovy/lang/GroovyClassLoader.java,801,lastMod = source.openConnection().getLastModified();
src/main/org/codehaus/groovy/control/ResolveVisitor.java,296,lastMod = source.openConnection().getLastModified();
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,255,importClass(type,name,alias);
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,264,importPackageWithStar(packageName);
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,271,ClassNode type = ClassHelper.make(packageName+"."+name);
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,272,configureAST(type,importNode);
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,273,importClass(type,name,alias);
src/main/org/codehaus/groovy/ast/ModuleNode.java,51,import java.util.ArrayList;
src/main/org/codehaus/groovy/ast/ModuleNode.java,52,import java.util.HashMap;
src/main/org/codehaus/groovy/ast/ModuleNode.java,53,import java.util.Iterator;
src/main/org/codehaus/groovy/ast/ModuleNode.java,54,import java.util.LinkedList;
src/main/org/codehaus/groovy/ast/ModuleNode.java,55,import java.util.List;
src/main/org/codehaus/groovy/ast/ModuleNode.java,56,import java.util.Map;
src/main/org/codehaus/groovy/control/ResolveVisitor.java,66,import org.codehaus.groovy.ast.expr.BinaryExpression;
src/main/org/codehaus/groovy/control/ResolveVisitor.java,67,import org.codehaus.groovy.ast.expr.BooleanExpression;
src/main/org/codehaus/groovy/control/ResolveVisitor.java,68,import org.codehaus.groovy.ast.expr.ClassExpression;
src/main/org/codehaus/groovy/control/ResolveVisitor.java,69,import org.codehaus.groovy.ast.expr.ClosureExpression;
src/main/org/codehaus/groovy/control/ResolveVisitor.java,70,import org.codehaus.groovy.ast.expr.ConstructorCallExpression;
src/main/org/codehaus/groovy/control/ResolveVisitor.java,71,import org.codehaus.groovy.ast.expr.DeclarationExpression;
src/main/org/codehaus/groovy/control/ResolveVisitor.java,72,import org.codehaus.groovy.ast.expr.Expression;
src/main/org/codehaus/groovy/control/ResolveVisitor.java,73,import org.codehaus.groovy.ast.expr.ExpressionTransformer;
src/main/org/codehaus/groovy/control/ResolveVisitor.java,74,import org.codehaus.groovy.ast.expr.ListExpression;
src/main/org/codehaus/groovy/control/ResolveVisitor.java,75,import org.codehaus.groovy.ast.expr.MethodCallExpression;
src/main/org/codehaus/groovy/control/ResolveVisitor.java,76,import org.codehaus.groovy.ast.expr.PropertyExpression;
src/main/org/codehaus/groovy/control/ResolveVisitor.java,77,import org.codehaus.groovy.ast.expr.VariableExpression;
src/main/org/codehaus/groovy/control/ResolveVisitor.java,225,String name = type.getName();
src/main/org/codehaus/groovy/control/ResolveVisitor.java,298,return lastMod > getTimeStamp(cls);
src/main/org/codehaus/groovy/control/ResolveVisitor.java,377,return true;
src/main/org/codehaus/groovy/control/ResolveVisitor.java,401,private void ambigousClass(ClassNode type, ClassNode iType, String name, boolean resolved){
src/main/org/codehaus/groovy/control/ResolveVisitor.java,403,addError("reference to "+name+" is ambigous, both class "+type.getName()+" and "+iType.getName()+" match",type);
src/main/org/codehaus/groovy/control/ResolveVisitor.java,448,private boolean resolveFromModule(ClassNode type, boolean testModuleImports) {
src/main/org/codehaus/groovy/control/ResolveVisitor.java,450,if (module==null) return false;
src/main/org/codehaus/groovy/control/ResolveVisitor.java,472,if (module.hasPackageName()) {
src/main/org/codehaus/groovy/control/ResolveVisitor.java,485,ambigousClass(type,iType,name,resolved);
src/main/org/codehaus/groovy/control/ResolveVisitor.java,501,Class cls = null;
src/main/org/codehaus/groovy/control/ResolveVisitor.java,689,ClassExpression ce = (ClassExpression) left;
src/main/org/codehaus/groovy/control/ResolveVisitor.java,722,Expression expr = cce.transformExpression(this);
src/main/org/codehaus/groovy/control/ResolveVisitor.java,723,return expr;
src/main/org/codehaus/groovy/control/ResolveVisitor.java,727,Expression obj = mce.getObjectExpression();
src/main/org/codehaus/groovy/control/ResolveVisitor.java,728,Expression newObject = transform(obj);
src/main/org/codehaus/groovy/control/ResolveVisitor.java,731,MethodCallExpression ret = new MethodCallExpression(newObject,method,args);
src/main/org/codehaus/groovy/control/ResolveVisitor.java,732,ret.setSafe(mce.isSafe());
src/main/org/codehaus/groovy/control/ResolveVisitor.java,733,ret.setImplicitThis(mce.isImplicitThis());
src/main/org/codehaus/groovy/control/ResolveVisitor.java,734,ret.setSpreadSafe(mce.isSpreadSafe());
src/main/org/codehaus/groovy/control/ResolveVisitor.java,735,ret.setSourcePosition(mce);
src/main/org/codehaus/groovy/control/ResolveVisitor.java,755,Iterator it = annotionMap.values().iterator();
src/main/org/codehaus/groovy/control/ResolveVisitor.java,788,currentClass = oldNode;
src/main/org/codehaus/groovy/syntax/ASTHelper.java,41,private static final String[] EMPTY_STRING_ARRAY = new String[0];
src/main/org/codehaus/groovy/syntax/ASTHelper.java,50,private Map imports;
src/main/org/codehaus/groovy/syntax/ASTHelper.java,296,if (as==null) as=name;
src/main/groovy/lang/MetaClassImpl.java,1319,if (method!=null) arguments = new Object[] { newValue };
src/main/groovy/lang/MetaClassImpl.java,1320,field = mbp.getField();
src/main/groovy/sql/Sql.java,754,statement = connection.prepareStatement(sql);
src/main/groovy/sql/Sql.java,757,boolean hasResultSet = statement.execute(sql, Statement.RETURN_GENERATED_KEYS);
src/main/groovy/lang/GroovyCodeSource.java,142,try {
src/main/groovy/lang/GroovyCodeSource.java,143,if (file!=null) return new FileInputStream(file);
src/main/groovy/lang/GroovyCodeSource.java,145,return inputStream;
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,741,String name = identifier(node);
src/main/groovy/swing/SwingBuilder.java,2,$Id$
src/main/groovy/swing/SwingBuilder.java,4,Copyright 2003 (C) James Strachan and Bob Mcwhirter. All Rights Reserved.
src/main/org/codehaus/groovy/runtime/InvokerHelper.java,64,import java.util.HashMap;
src/main/org/codehaus/groovy/runtime/InvokerHelper.java,377,Map answer = new HashMap(values.length / 2);
src/main/org/codehaus/groovy/control/ResolveVisitor.java,775,if (resolve(type,false,false,false)) continue;
src/main/groovy/xml/DOMBuilder.java,161,element.setAttribute(attrName, value.toString());
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,56,public BaseMarkupBuilder(final Map namespaceMethodMap) {
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,57,super(namespaceMethodMap);
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,60,public Object bind(final Closure root) {
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,61,return new Document(root, this.namespaceMethodMap);
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,64,private static class Document extends Built implements GroovyInterceptable {
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,65,private Object out;
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,66,private final Map pendingNamespaces = new HashMap();
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,67,private final Map namespaces = new HashMap();
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,68,private final Map specialProperties = new HashMap();
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,69,private String prefix = "";
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,124,public Document(final Closure root, final Map namespaceMethodMap) {
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,125,super(root, namespaceMethodMap);
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,131,public Object invokeMethod(final String name, final Object args) {
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,132,final Object[] arguments = (Object[]) args;
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,133,Map attrs = Collections.EMPTY_MAP;
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,134,Object body = null;
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,140,for (int i = 0; i != arguments.length; i++) {
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,141,final Object arg = arguments[i];
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,143,if (arg instanceof Map) {
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,144,attrs = (Map)arg;
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,146,final Closure c = ((Closure) arg);
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,148,c.setDelegate(this);
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,149,body = c.asWritable();
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,151,body = arg;
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,158,final Object uri;
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,160,if (this.pendingNamespaces.containsKey(this.prefix)) {
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,161,uri = this.pendingNamespaces.get(this.prefix);
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,163,uri = this.namespaces.get(this.prefix);
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,165,uri = ":";
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,168,final Object[] info  = (Object[])this.namespaceSpecificTags.get(uri);
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,169,final Map tagMap = (Map)info[2];
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,170,final Closure defaultTagClosure = (Closure)info[0];
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,172,final String prefix = this.prefix;
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,173,this.prefix = "";
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,175,if (tagMap.containsKey(name)) {
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,176,return ((Closure)tagMap.get(name)).call(new Object[]{this, this.pendingNamespaces, this.namespaces, this.namespaceSpecificTags, prefix, attrs, body, this.out});
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,178,return defaultTagClosure.call(new Object[]{name, this, this.pendingNamespaces, this.namespaces, this.namespaceSpecificTags, prefix, attrs, body, this.out});
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,185,public Object getProperty(final String property) {
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,186,final Object special = this.specialProperties.get(property);
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,189,this.prefix = property;
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,190,return this;
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,199,public void setProperty(String property, Object newValue) {
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,200,if ("trigger".equals(property)) {
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,201,this.out = newValue;
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,202,this.root.call(this);
src/main/groovy/xml/streamingmarkupsupport/BaseMarkupBuilder.java,204,super.setProperty(property, newValue);
src/main/groovy/util/Node.java,48,import org.codehaus.groovy.runtime.InvokerHelper;
src/main/groovy/util/Node.java,53,import java.util.Collection;
src/main/groovy/util/Node.java,54,import java.util.Collections;
src/main/groovy/util/Node.java,55,import java.util.Iterator;
src/main/groovy/util/Node.java,56,import java.util.List;
src/main/groovy/util/Node.java,57,import java.util.Map;
src/main/groovy/util/Node.java,79,this(parent, name, Collections.EMPTY_MAP, Collections.EMPTY_LIST);
src/main/groovy/util/Node.java,83,this(parent, name, Collections.EMPTY_MAP, value);
src/main/groovy/util/Node.java,87,this(parent, name, attributes, Collections.EMPTY_LIST);
src/main/groovy/util/Node.java,153,return Collections.EMPTY_LIST;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2613,boolean nlgnSort = sameType(new Collection[]{left, right});
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2615,Collection pickFrom = (Collection) new TreeSet(new NumberComparator());
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2616,((TreeSet) pickFrom).addAll(right);
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2664,final NumberComparator numberComparator = new NumberComparator();
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2665,final Iterator it1 = left.iterator(), it2 = right.iterator();
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2667,while (it1.hasNext()) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2668,final Object o1 = it1.next();
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2669,final Object o2 = it2.next();
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2671,if (o1 == null) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2672,if (o2 != null) return false;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2674,if (o1 instanceof Number) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2675,if (!(o2 instanceof Number && numberComparator.compare(o1, o2) == 0)) {
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2676,return false;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2682,return false;
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,2687,return true;
src/main/org/codehaus/groovy/runtime/Invoker.java,56,import java.util.Map;
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,484,if (left.getClass().isArray()) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,485,Collection leftList = asCollection(left);
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,486,if (right.getClass().isArray()) {
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,487,right = asCollection(right);
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,489,return ((Comparable) leftList).compareTo(right);
src/main/org/codehaus/groovy/runtime/typehandling/DefaultTypeTransformation.java,502,return left.equals(right);
src/main/groovy/util/GroovyScriptEngine.java,96,private ClassLoader parentClassLoader = getClass().getClassLoader();
src/main/groovy/util/GroovyScriptEngine.java,170,this.parentClassLoader = parentClassLoader;
src/main/groovy/util/GroovyScriptEngine.java,183,this.parentClassLoader = parentClassLoader;
src/main/groovy/util/GroovyScriptEngine.java,194,this.parentClassLoader = parentClassLoader;
src/main/groovy/util/GroovyScriptEngine.java,203,this.parentClassLoader = parentClassLoader;
src/main/groovy/util/GroovyScriptEngine.java,214,return parentClassLoader;
src/main/groovy/util/GroovyScriptEngine.java,224,this.parentClassLoader = parentClassLoader;
src/main/groovy/util/GroovyScriptEngine.java,236,return loadScriptByName( scriptName, getClass().getClassLoader());
src/main/groovy/util/GroovyScriptEngine.java,251,ScriptCacheEntry entry = updateCacheEntry(scriptName, parentClassLoader);
src/main/groovy/util/GroovyScriptEngine.java,304,entry = new ScriptCacheEntry();
src/main/groovy/util/GroovyScriptEngine.java,307,final ScriptCacheEntry finalEntry = entry;
src/main/groovy/util/GroovyScriptEngine.java,310,GroovyClassLoader groovyLoader =
src/main/groovy/util/GroovyScriptEngine.java,311,(GroovyClassLoader) AccessController.doPrivileged(new PrivilegedAction() {
src/main/groovy/util/GroovyScriptEngine.java,312,public Object run() {
src/main/groovy/util/GroovyScriptEngine.java,313,return new GroovyClassLoader(parentClassLoader) {
src/main/groovy/util/GroovyScriptEngine.java,314,protected Class findClass(String className) throws ClassNotFoundException {
src/main/groovy/util/GroovyScriptEngine.java,315,String filename = className.replace('.', File.separatorChar) + ".groovy";
src/main/groovy/util/GroovyScriptEngine.java,316,URLConnection dependentScriptConn = null;
src/main/groovy/util/GroovyScriptEngine.java,317,try {
src/main/groovy/util/GroovyScriptEngine.java,318,dependentScriptConn = rc.getResourceConnection(filename);
src/main/groovy/util/GroovyScriptEngine.java,319,finalEntry.dependencies.put(
src/main/groovy/util/GroovyScriptEngine.java,320,dependentScriptConn.getURL(),
src/main/groovy/util/GroovyScriptEngine.java,321,new Long(dependentScriptConn.getLastModified()));
src/main/groovy/util/GroovyScriptEngine.java,323,throw new ClassNotFoundException("Could not read " + className + ": " + e1);
src/main/groovy/util/GroovyScriptEngine.java,325,try {
src/main/groovy/util/GroovyScriptEngine.java,326,return parseClass(dependentScriptConn.getInputStream(), filename);
src/main/groovy/util/GroovyScriptEngine.java,328,throw new ClassNotFoundException("Syntax error in " + className + ": " + e2);
src/main/groovy/util/GroovyScriptEngine.java,330,throw new ClassNotFoundException("Problem reading " + className + ": " + e2);
src/main/groovy/util/GroovyScriptEngine.java,338,entry.scriptClass = groovyLoader.parseClass(groovyScriptConn.getInputStream(), scriptName);
src/main/groovy/util/GroovyScriptEngine.java,342,entry.lastModified = lastModified;
src/main/groovy/util/GroovyScriptEngine.java,343,scriptCache.put(scriptName, entry);
src/main/groovy/util/GroovyScriptEngine.java,376,ScriptCacheEntry entry = updateCacheEntry(scriptName, getParentClassLoader());
src/main/groovy/util/XmlNodePrinter.java,113,String text = node.text();
src/main/groovy/util/XmlNodePrinter.java,114,if (text.length() > 0) {
src/main/groovy/util/XmlNodePrinter.java,115,return false;
src/main/groovy/util/XmlNodePrinter.java,117,return true;
src/main/groovy/util/XmlNodePrinter.java,226,out.print(" ");
src/main/groovy/util/XmlNodePrinter.java,227,boolean first = true;
src/main/groovy/util/XmlNodePrinter.java,230,if (first) {
src/main/groovy/util/XmlNodePrinter.java,231,first = false;
src/main/groovy/util/XmlNodePrinter.java,233,out.print(" ");
src/main/groovy/util/XmlNodePrinter.java,239,out.print(quote);
src/main/groovy/util/XmlNodePrinter.java,241,out.print(quote);
src/main/groovy/util/XmlNodePrinter.java,242,continue;
src/main/groovy/util/XmlNodePrinter.java,244,out.print(InvokerHelper.toString(value));
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,309,asmJDKVersion,
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1552,receiver.visit(this);
src/main/groovy/lang/MetaClassImpl.java,478,MethodKey methodKey = new DefaultMethodKey(sender, methodName, argClasses);
src/main/groovy/lang/MetaClassImpl.java,582,MethodKey methodKey = new DefaultMethodKey(sender, methodName, arguments);
src/main/groovy/lang/MetaClassImpl.java,618,MethodKey methodKey = new DefaultMethodKey(theClass, methodName, arguments);
src/main/groovy/lang/MetaClassImpl.java,665,MethodKey methodKey = new DefaultMethodKey(sender, methodName, argClasses);
src/main/org/codehaus/groovy/ast/expr/ConstructorCallExpression.java,89,return "new " + getType() + "(" + arguments.getText() + ")";
src/main/org/codehaus/groovy/control/CompilationUnit.java,886,int[] index = new int[unsorted.size()];
src/main/org/codehaus/groovy/control/CompilationUnit.java,890,ClassNode element = (ClassNode) iter.next();
src/main/org/codehaus/groovy/control/CompilationUnit.java,896,index[i] = count;
src/main/org/codehaus/groovy/control/CompilationUnit.java,902,for (int i=0; i<index.length; i++) {
src/main/org/codehaus/groovy/control/CompilationUnit.java,904,for (int j=0; j<index.length; j++) {
src/main/org/codehaus/groovy/runtime/DefaultMethodKey.java,47,public DefaultMethodKey(Class sender, String name, Class[] parameterTypes) {
src/main/org/codehaus/groovy/runtime/DefaultMethodKey.java,48,super(sender, name);
src/main/org/codehaus/groovy/runtime/MethodKey.java,54,public MethodKey(Class sender, String name) {
src/main/org/codehaus/groovy/runtime/MethodKey.java,68,return new DefaultMethodKey(sender, name, paramTypes);
src/main/org/codehaus/groovy/runtime/TemporaryMethodKey.java,49,public TemporaryMethodKey(Class sender, String name, Object[] parameterValues) {
src/main/org/codehaus/groovy/runtime/TemporaryMethodKey.java,50,super(sender, name);
src/main/org/codehaus/groovy/runtime/wrappers/Wrapper.java,268,return this.delegatingMetaClass;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,770,statement.getMessageExpression().visit(this);
src/main/org/codehaus/groovy/control/ResolveVisitor.java,187,ClassNode t = node.getType();
src/main/org/codehaus/groovy/ast/ClassNode.java,588,public void addStaticInitializerStatements(List staticStatements, boolean fieldInit) {
src/main/org/codehaus/groovy/ast/ClassNode.java,156,return redirect().isPrimaryNode || (componentType!= null && componentType.isPrimaryClassNode());
src/main/groovy/inspect/Inspector.java,73,for (int i = 0; i < interfaces.length; i++) {
src/main/groovy/inspect/Inspector.java,74,result[CLASS_INTERFACE_IDX] += shortName(interfaces[i])+ " ";
src/main/groovy/inspect/Inspector.java,280,for (int j = 0; j < metaMethod.length; j++) {
src/main/groovy/inspect/Inspector.java,281,String s = metaMethod[j];
src/main/groovy/inspect/Inspector.java,287,public static Collection sort(List memberInfo) {
src/main/groovy/inspect/Inspector.java,292,public static class MemberComparator implements Comparator {
src/main/groovy/util/IndentPrinter.java,82,out.println();
src/main/groovy/util/IndentPrinter.java,96,out.println();
src/main/groovy/util/XmlNodePrinter.java,53,import java.util.Iterator;
src/main/groovy/util/XmlNodePrinter.java,177,out.print("\n");
src/main/groovy/util/XmlNodePrinter.java,182,for (Iterator iter = list.iterator(); iter.hasNext();) {
src/main/groovy/util/XmlNodePrinter.java,183,Object value = iter.next();
src/main/groovy/util/XmlNodePrinter.java,209,printLineBegin();
src/main/groovy/util/XmlNodePrinter.java,219,printLineEnd();
src/main/groovy/util/XmlNodePrinter.java,228,for (Iterator iter = attributes.entrySet().iterator(); iter.hasNext();) {
src/main/groovy/util/XmlNodePrinter.java,229,Map.Entry entry = (Map.Entry) iter.next();
src/main/org/codehaus/groovy/classgen/Verifier.java,566,FieldNode fieldNode) {
src/main/org/codehaus/groovy/ast/ClassNode.java,324,HashSet abstractNodes = new HashSet();
src/main/org/codehaus/groovy/ast/ClassNode.java,329,ClassNode parent = this.redirect();
src/main/org/codehaus/groovy/ast/ClassNode.java,330,do {
src/main/org/codehaus/groovy/ast/ClassNode.java,332,ClassNode[] interfaces = parent.getInterfaces();
src/main/org/codehaus/groovy/ast/ClassNode.java,336,parent = parent.getSuperClass().redirect();
src/main/org/codehaus/groovy/ast/ClassNode.java,339,List result = new ArrayList();
src/main/groovy/util/XmlSlurper.java,58,private final XMLReader reader;
src/main/groovy/util/XmlSlurper.java,59,private Node currentNode = null;
src/main/groovy/util/XmlSlurper.java,60,private final Stack stack = new Stack();
src/main/groovy/util/XmlSlurper.java,61,private final StringBuffer charBuffer = new StringBuffer();
src/main/groovy/util/XmlSlurper.java,63,private boolean keepWhitespace = false;
src/main/groovy/util/XmlSlurper.java,65,public XmlSlurper() throws ParserConfigurationException, SAXException {
src/main/groovy/util/XmlSlurper.java,66,this(false, true);
src/main/groovy/util/XmlSlurper.java,69,public XmlSlurper(final boolean validating, final boolean namespaceAware) throws ParserConfigurationException, SAXException {
src/main/groovy/util/XmlSlurper.java,70,SAXParserFactory factory = FactorySupport.createSaxParserFactory();
src/main/groovy/util/XmlSlurper.java,71,factory.setNamespaceAware(namespaceAware);
src/main/groovy/util/XmlSlurper.java,72,factory.setValidating(validating);
src/main/groovy/util/XmlSlurper.java,73,this.reader = factory.newSAXParser().getXMLReader();
src/main/groovy/util/XmlSlurper.java,76,public XmlSlurper(final XMLReader reader) {
src/main/groovy/util/XmlSlurper.java,77,this.reader = reader;
src/main/groovy/util/XmlSlurper.java,80,public XmlSlurper(final SAXParser parser) throws SAXException {
src/main/groovy/util/XmlSlurper.java,81,this(parser.getXMLReader());
src/main/groovy/util/XmlSlurper.java,90,public void setKeepWhitespace(boolean keepWhitespace) {
src/main/groovy/util/XmlSlurper.java,91,this.keepWhitespace = keepWhitespace;
src/main/groovy/util/XmlSlurper.java,100,public GPathResult getDocument() {
src/main/groovy/util/XmlSlurper.java,101,try {
src/main/groovy/util/XmlSlurper.java,102,return new NodeChild(this.currentNode, null, this.namespaceTagHints);
src/main/groovy/util/XmlSlurper.java,104,this.currentNode = null;
src/main/groovy/util/XmlSlurper.java,116,public GPathResult parse(final InputSource input) throws IOException, SAXException {
src/main/groovy/util/XmlSlurper.java,117,this.reader.setContentHandler(this);
src/main/groovy/util/XmlSlurper.java,118,this.reader.parse(input);
src/main/groovy/util/XmlSlurper.java,120,return getDocument();
src/main/groovy/util/XmlSlurper.java,132,public GPathResult parse(final File file) throws IOException, SAXException {
src/main/groovy/util/XmlSlurper.java,133,final InputSource input = new InputSource(new FileInputStream(file));
src/main/groovy/util/XmlSlurper.java,135,input.setSystemId("file://" + file.getAbsolutePath());
src/main/groovy/util/XmlSlurper.java,137,return parse(input);
src/main/groovy/util/XmlSlurper.java,151,public GPathResult parse(final InputStream input) throws IOException, SAXException {
src/main/groovy/util/XmlSlurper.java,152,return parse(new InputSource(input));
src/main/groovy/util/XmlSlurper.java,165,public GPathResult parse(final Reader in) throws IOException, SAXException {
src/main/groovy/util/XmlSlurper.java,166,return parse(new InputSource(in));
src/main/groovy/util/XmlSlurper.java,177,public GPathResult parse(final String uri) throws IOException, SAXException {
src/main/groovy/util/XmlSlurper.java,178,return parse(new InputSource(uri));
src/main/groovy/util/XmlSlurper.java,187,public GPathResult parseText(final String text) throws IOException, SAXException {
src/main/groovy/util/XmlSlurper.java,188,return parse(new StringReader(text));
src/main/groovy/util/XmlSlurper.java,197,public DTDHandler getDTDHandler() {
src/main/groovy/util/XmlSlurper.java,198,return this.reader.getDTDHandler();
src/main/groovy/util/XmlSlurper.java,204,public EntityResolver getEntityResolver() {
src/main/groovy/util/XmlSlurper.java,205,return this.reader.getEntityResolver();
src/main/groovy/util/XmlSlurper.java,211,public ErrorHandler getErrorHandler() {
src/main/groovy/util/XmlSlurper.java,212,return this.reader.getErrorHandler();
src/main/groovy/util/XmlSlurper.java,218,public boolean getFeature(final String uri) throws SAXNotRecognizedException, SAXNotSupportedException {
src/main/groovy/util/XmlSlurper.java,219,return this.reader.getFeature(uri);
src/main/groovy/util/XmlSlurper.java,225,public Object getProperty(final String uri) throws SAXNotRecognizedException, SAXNotSupportedException {
src/main/groovy/util/XmlSlurper.java,226,return this.reader.getProperty(uri);
src/main/groovy/util/XmlSlurper.java,232,public void setDTDHandler(final DTDHandler dtdHandler) {
src/main/groovy/util/XmlSlurper.java,233,this.reader.setDTDHandler(dtdHandler);
src/main/groovy/util/XmlSlurper.java,239,public void setEntityResolver(final EntityResolver entityResolver) {
src/main/groovy/util/XmlSlurper.java,240,this.reader.setEntityResolver(entityResolver);
src/main/groovy/util/XmlSlurper.java,249,public void setEntityBaseUrl(final URL base) {
src/main/groovy/util/XmlSlurper.java,250,this.reader.setEntityResolver(new EntityResolver() {
src/main/groovy/util/XmlSlurper.java,251,public InputSource resolveEntity(final String publicId, final String systemId) throws IOException {
src/main/groovy/util/XmlSlurper.java,252,return new InputSource(new URL(base, systemId).openStream());
src/main/groovy/util/XmlSlurper.java,260,public void setErrorHandler(final ErrorHandler errorHandler) {
src/main/groovy/util/XmlSlurper.java,261,this.reader.setErrorHandler(errorHandler);
src/main/groovy/util/XmlSlurper.java,267,public void setFeature(final String uri, final boolean value) throws SAXNotRecognizedException, SAXNotSupportedException {
src/main/groovy/util/XmlSlurper.java,268,this.reader.setFeature(uri, value);
src/main/groovy/util/XmlSlurper.java,274,public void setProperty(final String uri, final Object value) throws SAXNotRecognizedException, SAXNotSupportedException {
src/main/groovy/util/XmlSlurper.java,275,this.reader.setProperty(uri, value);
src/main/groovy/util/XmlSlurper.java,285,public void startDocument() throws SAXException {
src/main/groovy/util/XmlSlurper.java,286,this.currentNode = null;
src/main/groovy/util/XmlSlurper.java,287,this.charBuffer.setLength(0);
src/main/groovy/util/XmlSlurper.java,293,public void startPrefixMapping(final String tag, final String uri) throws SAXException {
src/main/groovy/util/XmlSlurper.java,294,this.namespaceTagHints.put(tag, uri);
src/main/groovy/util/XmlSlurper.java,300,public void startElement(final String namespaceURI, final String localName, final String qName, final Attributes atts) throws SAXException {
src/main/groovy/util/XmlSlurper.java,301,addCdata();
src/main/groovy/util/XmlSlurper.java,303,final Map attributes = new HashMap();
src/main/groovy/util/XmlSlurper.java,304,final Map attributeNamespaces = new HashMap();
src/main/groovy/util/XmlSlurper.java,306,for (int i = atts.getLength() - 1; i != -1; i--) {
src/main/groovy/util/XmlSlurper.java,307,if (atts.getURI(i).length() == 0) {
src/main/groovy/util/XmlSlurper.java,308,attributes.put(atts.getQName(i), atts.getValue(i));
src/main/groovy/util/XmlSlurper.java,310,attributes.put(atts.getLocalName(i), atts.getValue(i));
src/main/groovy/util/XmlSlurper.java,311,attributeNamespaces.put(atts.getLocalName(i), atts.getURI(i));
src/main/groovy/util/XmlSlurper.java,316,final Node newElement;
src/main/groovy/util/XmlSlurper.java,318,if (namespaceURI.length() == 0){
src/main/groovy/util/XmlSlurper.java,319,newElement = new Node(this.currentNode, qName, attributes, attributeNamespaces, namespaceURI);
src/main/groovy/util/XmlSlurper.java,321,newElement = new Node(this.currentNode, localName, attributes, attributeNamespaces, namespaceURI);
src/main/groovy/util/XmlSlurper.java,324,if (this.currentNode != null) {
src/main/groovy/util/XmlSlurper.java,325,this.currentNode.addChild(newElement);
src/main/groovy/util/XmlSlurper.java,328,this.stack.push(this.currentNode);
src/main/groovy/util/XmlSlurper.java,329,this.currentNode = newElement;
src/main/groovy/util/XmlSlurper.java,335,public void characters(final char[] ch, final int start, final int length) throws SAXException {
src/main/groovy/util/XmlSlurper.java,336,this.charBuffer.append(ch, start, length);
src/main/groovy/util/XmlSlurper.java,342,public void endElement(final String namespaceURI, final String localName, final String qName) throws SAXException {
src/main/groovy/util/XmlSlurper.java,343,addCdata();
src/main/groovy/util/XmlSlurper.java,345,final Object oldCurrentNode = this.stack.pop();
src/main/groovy/util/XmlSlurper.java,347,if (oldCurrentNode != null) {
src/main/groovy/util/XmlSlurper.java,348,this.currentNode = (Node)oldCurrentNode;
src/main/groovy/util/XmlSlurper.java,355,public void endDocument() throws SAXException {
src/main/groovy/util/XmlSlurper.java,364,private void addCdata() {
src/main/groovy/util/XmlSlurper.java,365,if (this.charBuffer.length() != 0) {
src/main/groovy/util/XmlSlurper.java,372,final String cdata = this.charBuffer.toString();
src/main/groovy/util/XmlSlurper.java,374,this.charBuffer.setLength(0);
src/main/groovy/util/XmlSlurper.java,375,if (this.keepWhitespace || cdata.trim().length() != 0) {
src/main/groovy/util/XmlSlurper.java,376,this.currentNode.addChild(cdata);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,337,String innerClassName = innerClass.getName();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,338,String innerClassInternalName = BytecodeHelper.getClassInternalName(innerClassName);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,340,int index = innerClassName.lastIndexOf('$');
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,343,String outerClassName = internalClassName; // default for inner classes
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,344,MethodNode enclosingMethod = innerClass.getEnclosingMethod();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,345,if (enclosingMethod != null) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,347,outerClassName = null;
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,348,innerClassName = null;
src/main/org/codehaus/groovy/classgen/CompileStack.java,493,answer.setStartLabel(startLabel);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1530,if (isInClosure() && !implicitThis) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1531,cn = getOutermostClass();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,801,if (!finallyStatement.isEmpty()) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,802,compileStack.pushFinallyBlock(
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,806,);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,810,final Label tryStart = new Label();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,814,final Label finallyStart = new Label();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,817,final Label tryEnd = new Label();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,824,final Label catchStart = new Label();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,833,final String exceptionTypeInternalName = BytecodeHelper.getClassInternalName(exceptionType);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,834,exceptionBlocks.add(new Runnable() {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,835,public void run() {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,842,final Label endOfAllCatches = new Label();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,846,if (!finallyStatement.isEmpty()) compileStack.popFinallyBlock();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,852,Label afterFinally = new Label();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,856,final Label catchAny = new Label();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,869,exceptionBlocks.add(new Runnable() {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,870,public void run() {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,876,public void visitSwitch(SwitchStatement statement) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,982,compileStack.pushFinallyBlock(finallyPart);
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,992,compileStack.popFinallyBlock();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,993,exceptionBlocks.add(new Runnable() {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,994,public void run() {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1021,compileStack.applyFinallyBlocks();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1037,if (compileStack.hasFinallyBlocks()) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,1039,compileStack.applyFinallyBlocks();
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,2939,if (leftExpression instanceof VariableExpression) {
src/main/org/codehaus/groovy/classgen/AsmClassGenerator.java,3195,if (expression instanceof VariableExpression) {
src/main/org/codehaus/groovy/classgen/CompileStack.java,123,private LinkedList finallyBlocks = new LinkedList();
src/main/org/codehaus/groovy/classgen/CompileStack.java,613,List blocksToRemove;
src/main/org/codehaus/groovy/classgen/CompileStack.java,616,blocksToRemove = Collections.EMPTY_LIST;
src/main/org/codehaus/groovy/classgen/CompileStack.java,621,ArrayList blocks = new ArrayList(finallyBlocks);
src/main/org/codehaus/groovy/classgen/CompileStack.java,623,applyFinallyBlocks(blocks);
src/main/org/codehaus/groovy/classgen/CompileStack.java,626,private void applyFinallyBlocks(List blocks) {
src/main/org/codehaus/groovy/classgen/CompileStack.java,627,for (Iterator iter = blocks.iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/classgen/CompileStack.java,628,Runnable block = (Runnable) iter.next();
src/main/org/codehaus/groovy/classgen/CompileStack.java,629,if (visitedBlocks.contains(block)) continue;
src/main/org/codehaus/groovy/classgen/CompileStack.java,631,block.run();
src/main/org/codehaus/groovy/classgen/CompileStack.java,635,public void applyFinallyBlocks() {
src/main/org/codehaus/groovy/classgen/CompileStack.java,636,applyFinallyBlocks(finallyBlocks);
src/main/org/codehaus/groovy/classgen/CompileStack.java,639,public boolean hasFinallyBlocks() {
src/main/org/codehaus/groovy/classgen/CompileStack.java,640,return !finallyBlocks.isEmpty();
src/main/org/codehaus/groovy/classgen/CompileStack.java,643,public void pushFinallyBlock(Runnable block) {
src/main/org/codehaus/groovy/classgen/CompileStack.java,644,finallyBlocks.addFirst(block);
src/main/org/codehaus/groovy/classgen/CompileStack.java,645,pushState();
src/main/org/codehaus/groovy/classgen/CompileStack.java,648,public void popFinallyBlock() {
src/main/org/codehaus/groovy/classgen/CompileStack.java,649,popState();
src/main/org/codehaus/groovy/classgen/CompileStack.java,650,finallyBlocks.removeFirst();
src/main/groovy/servlet/AbstractHttpServlet.java,187,public URLConnection getResourceConnection(String name) throws ResourceException {
src/main/groovy/servlet/GroovyServlet.java,159,error.append(" Script processing failed.");
src/main/org/codehaus/groovy/runtime/DefaultGroovyMethods.java,1214,for (Iterator iter = self.iterator(); iter.hasNext();) {
src/main/org/codehaus/groovy/ast/ConstructorNode.java,66,super("<init>",modifiers,ClassHelper.VOID_TYPE,parameters,exceptions,code);
src/main/org/codehaus/groovy/ast/ConstructorNode.java,68,VariableScope scope = new VariableScope();
src/main/org/codehaus/groovy/ast/ConstructorNode.java,70,for (int i = 0; i < parameters.length; i++) {
src/main/org/codehaus/groovy/ast/ConstructorNode.java,73,this.setVariableScope(scope);
src/main/org/codehaus/groovy/runtime/CurriedClosure.java,14,private Object[] curriedParams;
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,24,import com.thoughtworks.xstream.XStream;
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,165,XStream xstream = new XStream();
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,166,try {
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,167,xstream.toXML(ast, new FileWriter(name + ".antlr.xml"));
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,168,System.out.println("Written AST to " + name + ".antlr.xml");
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,170,catch (Exception e) {
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,171,System.out.println("Couldn't write to " + name + ".antlr.xml");
src/main/org/codehaus/groovy/antlr/AntlrParserPlugin.java,172,e.printStackTrace();
src/main/org/codehaus/groovy/control/SourceUnit.java,52,import java.io.FileWriter;
src/main/org/codehaus/groovy/control/SourceUnit.java,76,import com.thoughtworks.xstream.XStream;
src/main/org/codehaus/groovy/control/SourceUnit.java,337,XStream xstream = new XStream();
src/main/org/codehaus/groovy/control/SourceUnit.java,338,try {
src/main/org/codehaus/groovy/control/SourceUnit.java,340,System.out.println("Written AST to " + name + ".xml");
src/main/org/codehaus/groovy/control/SourceUnit.java,342,System.out.println("Couldn't write to " + name + ".xml");
src/main/org/codehaus/groovy/control/SourceUnit.java,343,e.printStackTrace();
