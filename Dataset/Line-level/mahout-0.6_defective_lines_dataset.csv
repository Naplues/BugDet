File,Line_number,SRC
integration/src/main/java/org/apache/mahout/text/MailArchivesClusteringAnalyzer.java,19,import java.io.IOException;
integration/src/main/java/org/apache/mahout/text/MailArchivesClusteringAnalyzer.java,20,import java.io.Reader;
integration/src/main/java/org/apache/mahout/text/MailArchivesClusteringAnalyzer.java,21,import java.util.Arrays;
integration/src/main/java/org/apache/mahout/text/MailArchivesClusteringAnalyzer.java,23,import java.util.regex.Matcher;
integration/src/main/java/org/apache/mahout/text/MailArchivesClusteringAnalyzer.java,24,import java.util.regex.Pattern;
integration/src/main/java/org/apache/mahout/text/MailArchivesClusteringAnalyzer.java,117,protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,52,import org.apache.lucene.util.OpenBitSet;
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,155,Directory dir = FSDirectory.open(new File(this.indexDir));
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,170,OpenBitSet clusterDocBitset = getClusterDocBitset(reader, idSet, this.idField);
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,238,private static OpenBitSet getClusterDocBitset(IndexReader reader,
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,243,OpenBitSet bitset = new OpenBitSet(numDocs);
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/Driver.java,83,Directory dir = FSDirectory.open(file);
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,62,private int slice;
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,65,if (slice >= numSlices()) {
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,68,int i = slice++;
math/src/main/java/org/apache/mahout/math/SparseColumnMatrix.java,34,public SparseColumnMatrix(int rows, int columns, RandomAccessSparseVector[] columnVectors) {
math/src/main/java/org/apache/mahout/math/SparseColumnMatrix.java,37,for (int col = 0; col < columnSize(); col++) {
math/src/main/java/org/apache/mahout/math/SparseColumnMatrix.java,38,this.columnVectors[col] = this.columnVectors[col].clone();
math/src/main/java/org/apache/mahout/math/SparseMatrix.java,40,public SparseMatrix(int rows, int columns, Map<Integer, RandomAccessSparseVector> rowVectors) {
math/src/main/java/org/apache/mahout/math/SparseMatrix.java,43,for (Map.Entry<Integer, RandomAccessSparseVector> entry : rowVectors.entrySet()) {
math/src/main/java/org/apache/mahout/math/SparseMatrix.java,44,this.rowVectors.put(entry.getKey(), entry.getValue().clone());
math/src/main/java/org/apache/mahout/math/SparseMatrix.java,64,public Iterator<MatrixSlice> iterator() {
math/src/main/java/org/apache/mahout/math/VectorView.java,125,Element decorated = vector.getElement(el.index());
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,242,sortVectors);
math/src/main/java/org/apache/mahout/math/MatrixVectorView.java,123,return iterator();
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,79,out.write(idColumn + ",target,score");
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,80,out.newLine();
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,82,String line = in.readLine();
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,83,csv.firstLine(line);
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,84,line = in.readLine();
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,85,Map<String, Double> results = new HashMap<String, Double>();
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,86,int k = 0;
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,87,while (line != null) {
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,88,Vector v = new SequentialAccessSparseVector(lmp.getNumFeatures());
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,89,csv.processLine(line, v, false);
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,90,Vector scores = learner.classifyFull(v);
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,91,results.clear();
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,92,if (maxScoreOnly) {
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,93,results.put(csv.getTargetLabel(scores.maxValueIndex()),
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,96,for (int i = 0; i < scores.size(); i++) {
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,97,results.put(csv.getTargetLabel(i), scores.get(i));
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,101,for (Map.Entry<String,Double> entry : results.entrySet()) {
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,102,out.write(csv.getIdString(line) + ',' + entry.getKey() + ',' + entry.getValue());
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,103,out.newLine();
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,105,k++;
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,106,if (k % 100 == 0) {
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,109,line = in.readLine();
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,111,out.flush();
examples/src/main/java/org/apache/mahout/classifier/sgd/RunAdaptiveLogistic.java,112,out.close();
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosState.java,50,protected void intitializeBasisAndSingularVectors() {
math/src/main/java/org/apache/mahout/math/solver/ConjugateGradientSolver.java,82,return solve(a, b, null, b.size(), DEFAULT_MAX_ERROR);
math/src/main/java/org/apache/mahout/math/solver/ConjugateGradientSolver.java,99,return solve(a, b, precond, b.size(), DEFAULT_MAX_ERROR);
math/src/main/java/org/apache/mahout/math/SparseRowMatrix.java,42,? new RandomAccessSparseVector[rows]
math/src/main/java/org/apache/mahout/math/SparseRowMatrix.java,43,: new SequentialAccessSparseVector[rows],
math/src/main/java/org/apache/mahout/math/SparseRowMatrix.java,44,true,
math/src/main/java/org/apache/mahout/math/SparseRowMatrix.java,45,randomAccess);
examples/src/main/java/org/apache/mahout/cf/taste/example/bookcrossing/BookCrossingBooleanRecommender.java,57,public List<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer) throws TasteException {
examples/src/main/java/org/apache/mahout/cf/taste/example/bookcrossing/BookCrossingBooleanRecommender.java,58,return recommender.recommend(userID, howMany, rescorer);
examples/src/main/java/org/apache/mahout/cf/taste/example/bookcrossing/BookCrossingRecommender.java,57,return recommender.recommend(userID, howMany, rescorer);
examples/src/main/java/org/apache/mahout/cf/taste/example/kddcup/track1/Track1Recommender.java,50,return recommender.recommend(userID, howMany, rescorer);
examples/src/main/java/org/apache/mahout/cf/taste/example/kddcup/track2/Track2Recommender.java,56,return recommender.recommend(userID, howMany, rescorer);
core/src/main/java/org/apache/mahout/common/IOUtils.java,29,import org.apache.hadoop.mapred.lib.MultipleOutputs;
core/src/main/java/org/apache/mahout/common/IOUtils.java,145,throw (Error) lastThr;
core/src/main/java/org/apache/mahout/common/IOUtils.java,149,.initCause(lastThr);
core/src/main/java/org/apache/mahout/common/IOUtils.java,193,mo.close();
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,29,import org.apache.hadoop.mapred.JobConf;
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,30,import org.apache.hadoop.mapred.OutputCollector;
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,31,import org.apache.hadoop.mapred.lib.MultipleOutputs;
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,54,private static final String DOWNSAMPLING_FACTOR =
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,56,private static final String RANDOM_SELECTION_PCT =
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,61,private SplitInputJob() {
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,107,JobConf oldApiJob = new JobConf(initialConf);
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,108,MultipleOutputs.addNamedOutput(oldApiJob, TRAINING_TAG,
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,109,org.apache.hadoop.mapred.SequenceFileOutputFormat.class,
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,110,keyClass, valueClass);
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,111,MultipleOutputs.addNamedOutput(oldApiJob, TEST_TAG,
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,112,org.apache.hadoop.mapred.SequenceFileOutputFormat.class,
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,113,keyClass, valueClass);
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,116,Job job = new Job(oldApiJob);
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,140,public void setup(Context context) {
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,141,downsamplingFactor =
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,142,context.getConfiguration().getInt(DOWNSAMPLING_FACTOR, 1);
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,169,private OutputCollector<WritableComparable<?>, Writable> trainingCollector = null;
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,170,private OutputCollector<WritableComparable<?>, Writable> testCollector = null;
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,176,protected void setup(Context context) throws IOException {
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,177,randomSelectionPercent =
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,178,context.getConfiguration().getFloat(RANDOM_SELECTION_PCT, 0);
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,179,multipleOutputs =
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,180,new MultipleOutputs(new JobConf(context.getConfiguration()));
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,181,trainingCollector = multipleOutputs.getCollector(TRAINING_TAG, null);
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,182,testCollector = multipleOutputs.getCollector(TEST_TAG, null);
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,194,testCollector.collect(key, value);
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,196,trainingCollector.collect(key, value);
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,204,multipleOutputs.close();
core/src/main/java/org/apache/mahout/common/mapreduce/TransposeMapper.java,37,RandomAccessSparseVector tmp = new RandomAccessSparseVector(Integer.MAX_VALUE, 1);
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,195,Configuration conf = TransposeJob.buildTransposeJobConf(initialConf, rowPath, outputPath, numRows);
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,196,JobClient.runJob(new JobConf(conf));
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,206,Path outputVectorTmpPath = new Path(outputTmpBasePath,
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,207,new Path(Long.toString(System.nanoTime())));
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,208,Configuration conf =
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,210,v,
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,211,numRows,
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,212,rowPath,
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,213,outputVectorTmpPath);
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,214,JobClient.runJob(new JobConf(conf));
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,215,Vector result = TimesSquaredJob.retrieveTimesSquaredOutputVector(conf);
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,230,Path outputVectorTmpPath = new Path(outputTmpBasePath,
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,231,new Path(Long.toString(System.nanoTime())));
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,232,Configuration conf =
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,233,TimesSquaredJob.createTimesSquaredJobConf(initialConf,
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,234,v,
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,235,rowPath,
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,236,outputVectorTmpPath);
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,237,JobClient.runJob(new JobConf(conf));
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,238,Vector result = TimesSquaredJob.retrieveTimesSquaredOutputVector(conf);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,28,import org.apache.hadoop.io.Writable;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,30,import org.apache.hadoop.mapred.FileInputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,31,import org.apache.hadoop.mapred.FileOutputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,32,import org.apache.hadoop.mapred.JobConf;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,33,import org.apache.hadoop.mapred.MapReduceBase;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,34,import org.apache.hadoop.mapred.Mapper;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,35,import org.apache.hadoop.mapred.OutputCollector;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,36,import org.apache.hadoop.mapred.Reducer;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,37,import org.apache.hadoop.mapred.Reporter;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,38,import org.apache.hadoop.mapred.SequenceFileInputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,39,import org.apache.hadoop.mapred.SequenceFileOutputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,51,import java.util.Iterator;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,65,return createTimesSquaredJobConf(new Configuration(), v, matrixInputPath, outputVectorPath);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,68,public static Configuration createTimesSquaredJobConf(Configuration initialConf,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,69,Vector v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,70,Path matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,71,Path outputVectorPath) throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,72,return createTimesSquaredJobConf(initialConf,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,73,v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,74,matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,75,outputVectorPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,76,TimesSquaredMapper.class,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,77,VectorSummingReducer.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,80,public static Configuration createTimesJobConf(Vector v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,81,int outDim,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,82,Path matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,83,Path outputVectorPath) throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,84,return createTimesJobConf(new Configuration(), v, outDim, matrixInputPath, outputVectorPath);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,87,public static Configuration createTimesJobConf(Configuration initialConf,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,88,Vector v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,89,int outDim,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,90,Path matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,91,Path outputVectorPath) throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,92,return createTimesSquaredJobConf(initialConf,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,93,v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,94,outDim,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,95,matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,96,outputVectorPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,97,TimesMapper.class,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,98,VectorSummingReducer.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,101,public static Configuration createTimesSquaredJobConf(Vector v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,102,Path matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,103,Path outputVectorPathBase,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,104,Class<? extends TimesSquaredMapper> mapClass,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,106,throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,107,return createTimesSquaredJobConf(new Configuration(), v, matrixInputPath, outputVectorPathBase, mapClass, redClass);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,110,public static Configuration createTimesSquaredJobConf(Configuration initialConf,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,111,Vector v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,112,Path matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,113,Path outputVectorPathBase,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,114,Class<? extends TimesSquaredMapper> mapClass,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,116,throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,117,return createTimesSquaredJobConf(initialConf,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,118,v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,119,v.size(),
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,120,matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,121,outputVectorPathBase,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,122,mapClass,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,123,redClass);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,126,public static Configuration createTimesSquaredJobConf(Vector v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,127,int outputVectorDim,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,128,Path matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,129,Path outputVectorPathBase,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,130,Class<? extends TimesSquaredMapper> mapClass,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,132,throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,134,return createTimesSquaredJobConf(new Configuration(),
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,135,v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,136,outputVectorDim,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,137,matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,138,outputVectorPathBase,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,139,mapClass,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,140,redClass);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,143,public static Configuration createTimesSquaredJobConf(Configuration initialConf,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,144,Vector v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,145,int outputVectorDim,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,146,Path matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,147,Path outputVectorPathBase,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,148,Class<? extends TimesSquaredMapper> mapClass,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,150,throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,151,JobConf conf = new JobConf(initialConf, TimesSquaredJob.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,152,conf.setJobName("TimesSquaredJob: " + matrixInputPath);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,159,SequenceFile.Writer inputVectorPathWriter = new SequenceFile.Writer(fs,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,160,conf, inputVectorPath, NullWritable.class, VectorWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,161,Writable inputVW = new VectorWritable(v);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,162,inputVectorPathWriter.append(NullWritable.get(), inputVW);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,163,Closeables.close(inputVectorPathWriter, false);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,165,DistributedCache.setCacheFiles(new URI[] {ivpURI}, conf);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,170,FileInputFormat.addInputPath(conf, matrixInputPath);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,171,conf.setInputFormat(SequenceFileInputFormat.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,172,FileOutputFormat.setOutputPath(conf, new Path(outputVectorPathBase, OUTPUT_VECTOR_FILENAME));
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,173,conf.setMapperClass(mapClass);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,174,conf.setMapOutputKeyClass(NullWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,175,conf.setMapOutputValueClass(VectorWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,176,conf.setReducerClass(redClass);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,177,conf.setCombinerClass(redClass);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,178,conf.setOutputFormat(SequenceFileOutputFormat.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,179,conf.setOutputKeyClass(NullWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,180,conf.setOutputValueClass(VectorWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,181,return conf;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,184,public static Vector retrieveTimesSquaredOutputVector(Configuration conf) throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,185,Path outputPath = FileOutputFormat.getOutputPath(new JobConf(conf));
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,186,Path outputFile = new Path(outputPath, "part-00000");
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,196,public static class TimesSquaredMapper<T extends WritableComparable> extends MapReduceBase
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,197,implements Mapper<T,VectorWritable, NullWritable,VectorWritable> {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,200,private OutputCollector<NullWritable,VectorWritable> out;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,207,void setOut(OutputCollector<NullWritable,VectorWritable> out) {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,208,this.out = out;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,212,public void configure(JobConf conf) {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,230,: new DenseVector(outDim);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,237,public void map(T rowNum,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,238,VectorWritable v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,239,OutputCollector<NullWritable,VectorWritable> out,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,240,Reporter rep) throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,241,setOut(out);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,255,public void close() throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,256,if (out != null) {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,257,out.collect(NullWritable.get(), new VectorWritable(outputVector));
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,265,public void map(IntWritable rowNum,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,266,VectorWritable v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,267,OutputCollector<NullWritable,VectorWritable> out,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,268,Reporter rep) {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,269,setOut(out);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,277,public static class VectorSummingReducer extends MapReduceBase
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,278,implements Reducer<NullWritable,VectorWritable,NullWritable,VectorWritable> {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,283,public void configure(JobConf conf) {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,291,public void reduce(NullWritable n,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,292,Iterator<VectorWritable> vectors,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,293,OutputCollector<NullWritable,VectorWritable> out,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,294,Reporter reporter) throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,295,while (vectors.hasNext()) {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,296,VectorWritable v = vectors.next();
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,301,out.collect(NullWritable.get(), new VectorWritable(outputVector));
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,21,import org.apache.hadoop.fs.FileSystem;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,24,import org.apache.hadoop.io.WritableComparable;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,25,import org.apache.hadoop.mapred.FileInputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,26,import org.apache.hadoop.mapred.FileOutputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,27,import org.apache.hadoop.mapred.JobConf;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,28,import org.apache.hadoop.mapred.MapReduceBase;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,29,import org.apache.hadoop.mapred.Mapper;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,30,import org.apache.hadoop.mapred.OutputCollector;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,31,import org.apache.hadoop.mapred.Reducer;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,32,import org.apache.hadoop.mapred.Reporter;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,33,import org.apache.hadoop.mapred.SequenceFileInputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,34,import org.apache.hadoop.mapred.SequenceFileOutputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,37,import org.apache.mahout.math.RandomAccessSparseVector;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,38,import org.apache.mahout.math.SequentialAccessSparseVector;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,39,import org.apache.mahout.math.Vector;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,43,import java.util.Iterator;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,51,public static final String NUM_ROWS_KEY = "SparseRowMatrix.numRows";
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,77,public static Configuration buildTransposeJobConf(Path matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,78,Path matrixOutputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,79,int numInputRows) throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,80,return buildTransposeJobConf(new Configuration(), matrixInputPath, matrixOutputPath, numInputRows);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,83,public static Configuration buildTransposeJobConf(Configuration initialConf,
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,84,Path matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,85,Path matrixOutputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,86,int numInputRows) throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,87,JobConf conf = new JobConf(initialConf, TransposeJob.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,88,conf.setJobName("TransposeJob: " + matrixInputPath + " transpose -> " + matrixOutputPath);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,90,matrixInputPath = fs.makeQualified(matrixInputPath);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,91,matrixOutputPath = fs.makeQualified(matrixOutputPath);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,92,conf.setInt(NUM_ROWS_KEY, numInputRows);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,94,FileInputFormat.addInputPath(conf, matrixInputPath);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,95,conf.setInputFormat(SequenceFileInputFormat.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,96,FileOutputFormat.setOutputPath(conf, matrixOutputPath);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,98,conf.setMapperClass(TransposeMapper.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,99,conf.setMapOutputKeyClass(IntWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,100,conf.setMapOutputValueClass(VectorWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,101,conf.setCombinerClass(MergeVectorsCombiner.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,102,conf.setReducerClass(MergeVectorsReducer.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,103,conf.setOutputFormat(SequenceFileOutputFormat.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,104,conf.setOutputKeyClass(IntWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,105,conf.setOutputValueClass(VectorWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,106,return conf;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,109,public static class TransposeMapper extends MapReduceBase
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,110,implements Mapper<IntWritable, VectorWritable, IntWritable, VectorWritable> {
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,112,private int newNumCols;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,115,public void configure(JobConf conf) {
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,116,newNumCols = conf.getInt(NUM_ROWS_KEY, Integer.MAX_VALUE);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,120,public void map(IntWritable r, VectorWritable v, OutputCollector<IntWritable, VectorWritable> out,
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,121,Reporter reporter) throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,122,int row = r.get();
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,126,RandomAccessSparseVector tmp = new RandomAccessSparseVector(newNumCols, 1);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,127,tmp.setQuick(row, e.get());
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,128,r.set(e.index());
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,129,out.collect(r, new VectorWritable(tmp));
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,134,public static class MergeVectorsCombiner extends MapReduceBase
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,135,implements Reducer<WritableComparable<?>, VectorWritable, WritableComparable<?>, VectorWritable> {
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,140,out.collect(key, VectorWritable.merge(vectors));
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,144,public static class MergeVectorsReducer extends MapReduceBase
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,145,implements Reducer<WritableComparable<?>, VectorWritable, WritableComparable<?>, VectorWritable> {
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,150,Vector merged = VectorWritable.merge(vectors).get();
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,151,out.collect(key, new VectorWritable(new SequentialAccessSparseVector(merged)));
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,34,private static final int NUM_FLAGS = 3;
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,38,public MatrixWritable() {
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,114,Matrix r;
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,116,r = new DenseMatrix(rows, columns);
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,118,r = new SparseRowMatrix(rows, columns, !sequential);
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,121,for (int row = 0; row < rows; row++) {
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,122,r.viewRow(row).assign(VectorWritable.readVector(in));
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,130,r.setColumnLabelBindings(columnLabelBindings);
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,133,r.setRowLabelBindings(rowLabelBindings);
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,137,return r;
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,141,public static void writeMatrix(DataOutput out, Matrix matrix) throws IOException {
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,144,if (row.isDense()) {
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,158,for (int i = 0; i < matrix.rowSize(); i++) {
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,159,VectorWritable.writeVector(out, matrix.viewRow(i), false);
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,69,return new SparseRowMatrix(rows, columns);
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,121,return new SparseRowMatrix(rows, columns);
math/src/main/java/org/apache/mahout/math/SparseMatrix.java,112,for (Vector vectorEntry : rowVectors.values()) {
math/src/main/java/org/apache/mahout/math/SparseMatrix.java,113,result[COL] = Math.max(result[COL], vectorEntry
math/src/main/java/org/apache/mahout/math/SparseMatrix.java,114,.getNumNondefaultElements());
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,18,package org.apache.mahout.classifier.df.split;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,21,import org.apache.mahout.classifier.df.data.Data;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,22,import org.apache.mahout.classifier.df.data.DataUtils;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,23,import org.apache.mahout.classifier.df.data.Dataset;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,24,import org.apache.mahout.classifier.df.data.Instance;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,26,import java.util.Arrays;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,32,public class OptIgSplit extends IgSplit {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,34,private int[][] counts;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,36,private int[] countAll;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,38,private int[] countLess;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,41,public Split computeSplit(Data data, int attr) {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,42,if (data.getDataset().isNumerical(attr)) {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,43,return numericalSplit(data, attr);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,45,return categoricalSplit(data, attr);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,52,private static Split categoricalSplit(Data data, int attr) {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,53,double[] values = data.values(attr);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,54,int[][] counts = new int[values.length][data.getDataset().nblabels()];
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,55,int[] countAll = new int[data.getDataset().nblabels()];
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,57,Dataset dataset = data.getDataset();
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,60,for (int index = 0; index < data.size(); index++) {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,61,Instance instance = data.get(index);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,62,counts[ArrayUtils.indexOf(values, instance.get(attr))][(int) dataset.getLabel(instance)]++;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,63,countAll[(int) dataset.getLabel(instance)]++;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,66,int size = data.size();
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,69,double invDataSize = 1.0 / size;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,71,for (int index = 0; index < values.length; index++) {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,72,size = DataUtils.sum(counts[index]);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,73,hyx += size * invDataSize * entropy(counts[index], size);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,76,double ig = hy - hyx;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,77,return new Split(attr, ig);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,83,private static double[] sortedValues(Data data, int attr) {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,84,double[] values = data.values(attr);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,85,Arrays.sort(values);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,87,return values;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,93,void initCounts(Data data, double[] values) {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,94,counts = new int[values.length][data.getDataset().nblabels()];
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,95,countAll = new int[data.getDataset().nblabels()];
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,96,countLess = new int[data.getDataset().nblabels()];
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,99,void computeFrequencies(Data data, int attr, double[] values) {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,100,Dataset dataset = data.getDataset();
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,102,for (int index = 0; index < data.size(); index++) {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,103,Instance instance = data.get(index);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,104,counts[ArrayUtils.indexOf(values, instance.get(attr))][(int) dataset.getLabel(instance)]++;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,105,countAll[(int) dataset.getLabel(instance)]++;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,112,Split numericalSplit(Data data, int attr) {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,113,double[] values = sortedValues(data, attr);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,115,initCounts(data, values);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,117,computeFrequencies(data, attr, values);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,119,int size = data.size();
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,120,double hy = entropy(countAll, size);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,121,double invDataSize = 1.0 / size;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,123,int best = -1;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,124,double bestIg = -1.0;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,127,for (int index = 0; index < values.length; index++) {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,128,double ig = hy;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,131,size = DataUtils.sum(countLess);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,132,ig -= size * invDataSize * entropy(countLess, size);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,135,size = DataUtils.sum(countAll);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,136,ig -= size * invDataSize * entropy(countAll, size);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,138,if (ig > bestIg) {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,139,bestIg = ig;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,140,best = index;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,143,DataUtils.add(countLess, counts[index]);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,144,DataUtils.dec(countAll, counts[index]);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,147,if (best == -1) {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,148,throw new IllegalStateException("no best split found !");
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,150,return new Split(attr, bestIg, values[best]);
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,159,private static double entropy(int[] counts, int dataSize) {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,160,if (dataSize == 0) {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,161,return 0.0;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,164,double entropy = 0.0;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,165,double invDataSize = 1.0 / dataSize;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,167,for (int count : counts) {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,168,if (count == 0) {
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,169,continue; // otherwise we get a NaN
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,171,double p = count * invDataSize;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,172,entropy += -p * Math.log(p) / LOG2;
core/src/main/java/org/apache/mahout/classifier/df/split/OptIgSplit.java,175,return entropy;
core/src/main/java/org/apache/mahout/classifier/df/mapreduce/partial/Step1Mapper.java,130,int nbTrees = numTrees / numMaps;
core/src/main/java/org/apache/mahout/classifier/df/mapreduce/partial/Step1Mapper.java,131,if (partition == 0) {
core/src/main/java/org/apache/mahout/classifier/df/mapreduce/partial/Step1Mapper.java,132,nbTrees += numTrees - nbTrees * numMaps;
core/src/main/java/org/apache/mahout/classifier/df/mapreduce/partial/Step1Mapper.java,135,return nbTrees;
math/src/main/java/org/apache/mahout/math/SparseMatrix.java,58,SparseMatrix clone = (SparseMatrix) super.clone();
math/src/main/java/org/apache/mahout/math/SparseMatrix.java,59,clone.rowVectors = rowVectors.clone();
math/src/main/java/org/apache/mahout/math/MatrixVectorView.java,35,if (row < 0 || row > matrix.rowSize()) {
math/src/main/java/org/apache/mahout/math/MatrixVectorView.java,38,if (column < 0 || column > matrix.columnSize()) {
core/src/main/java/org/apache/mahout/classifier/sgd/TPrior.java,20,import org.apache.commons.math.special.Gamma;
math/src/main/java/org/apache/mahout/math/SingularValueDecomposition.java,292,if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {
math/src/main/java/org/apache/mahout/math/SingularValueDecomposition.java,306,double t = (ks == p ? 0.0 : Math.abs(e[ks])) + (ks == k + 1 ? 0.0 : Math.abs(e[ks - 1]));
math/src/main/java/org/apache/mahout/math/SingularValueDecomposition.java,307,if (Math.abs(s[ks]) <= eps * t) {
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFIterator.java,34,private static final Pattern COMMA_PATTERN = Pattern.compile(",(?=([^\"]*\"[^\"]*\")*[^\"]*$)");
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFIterator.java,62,if (line.startsWith(ARFFModel.ARFF_SPARSE)) {
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFIterator.java,64,String[] splits = COMMA_PATTERN.split(line);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFIterator.java,67,split = split.trim();
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFIterator.java,75,String[] splits = COMMA_PATTERN.split(line);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,34,import java.util.regex.Pattern;
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,52,private static final Pattern COMMA_PATTERN = Pattern.compile(",");
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,53,private static final Pattern SPACE_PATTERN = Pattern.compile(" ");
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,83,String lower = line.toLowerCase(Locale.ENGLISH);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,84,Integer labelNumInt = labelNumber;
integration/src/main/java/org/apache/mahout/utils/vectors/VectorHelper.java,174,String[] dictionary = new String[dict.size()];
integration/src/main/java/org/apache/mahout/utils/clustering/AbstractClusterWriter.java,48,protected final Map<Integer, List<WeightedVectorWritable>> clusterIdToPoints;
integration/src/main/java/org/apache/mahout/utils/clustering/AbstractClusterWriter.java,67,protected Map<Integer, List<WeightedVectorWritable>> getClusterIdToPoints() {
integration/src/main/java/org/apache/mahout/utils/clustering/CSVClusterWriter.java,49,List<WeightedVectorWritable> points = getClusterIdToPoints().get(cluster.getId());
integration/src/main/java/org/apache/mahout/utils/clustering/CSVClusterWriter.java,51,for (WeightedVectorWritable point : points) {
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumper.java,87,private Map<Integer, List<WeightedVectorWritable>> clusterIdToPoints;
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumper.java,267,public Map<Integer, List<WeightedVectorWritable>> getClusterIdToPoints() {
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumper.java,306,List<WeightedVectorWritable> pointList = result.get(keyValue);
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java,79,WeightedVectorWritable point = iterator.next();
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java,81,if (point instanceof WeightedPropertyVectorWritable) {
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java,82,WeightedPropertyVectorWritable tmp = (WeightedPropertyVectorWritable) point;
integration/src/main/java/org/apache/mahout/utils/clustering/GraphMLClusterWriter.java,50,public GraphMLClusterWriter(Writer writer, Map<Integer, List<WeightedVectorWritable>> clusterIdToPoints,
integration/src/main/java/org/apache/mahout/utils/clustering/GraphMLClusterWriter.java,115,List<WeightedVectorWritable> points = clusterIdToPoints.get(cluster.getId());
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,83,private final Map<Integer, List<WeightedVectorWritable>> clusterIdToPoints;
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,113,for (Map.Entry<Integer, List<WeightedVectorWritable>> integerListEntry : clusterIdToPoints.entrySet()) {
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,114,List<WeightedVectorWritable> wvws = integerListEntry.getValue();
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,115,List<TermInfoClusterInOut> termInfos = getClusterLabels(integerListEntry.getKey(), wvws);
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,121,writer.write(String.valueOf(wvws.size()));
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,147,Collection<WeightedVectorWritable> wvws) throws IOException {
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,149,if (wvws.size() < minNumIds) {
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,150,log.info("Skipping small cluster {} with size: {}", integer, wvws.size());
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,154,log.info("Processing Cluster {} with {} documents", integer, wvws.size());
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,161,for (WeightedVectorWritable wvw : wvws) {
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,162,Vector vector = wvw.getVector();
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,218,int clusterSize = wvws.size();
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,20,import org.apache.mahout.math.list.DoubleArrayList;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,43,private boolean sorted = true;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,46,private DoubleArrayList starter = new DoubleArrayList(100);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,49,private final double[] q = new double[5];
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,59,sorted = false;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,67,if (n < 100) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,68,starter.add(sample);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,71,starter.add(sample);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,72,for (int i = 0; i <= 4; i++) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,73,q[i] = getQuartile(i);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,77,starter = null;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,80,q[0] = Math.min(sample, q[0]);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,81,q[4] = Math.max(sample, q[4]);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,83,double rate = 2 * (q[3] - q[1]) / n;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,84,q[1] += (Math.signum(sample - q[1]) - 0.5) * rate;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,85,q[2] += Math.signum(sample - q[2]) * rate;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,86,q[3] += (Math.signum(sample - q[3]) + 0.5) * rate;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,88,if (q[1] < q[0]) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,89,q[1] = q[0];
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,92,if (q[3] > q[4]) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,93,q[3] = q[4];
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,114,private void sort() {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,115,if (!sorted && starter != null) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,116,starter.sort();
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,117,sorted = true;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,126,if (n > 100 || starter == null) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,127,return q[i];
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,129,sort();
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,130,switch (i) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,131,case 0:
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,132,if (n == 0) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,133,throw new IllegalArgumentException("Must have at least one sample to estimate minimum value");
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,135,return starter.get(0);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,136,case 1:
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,137,case 2:
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,138,case 3:
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,139,if (n >= 2) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,140,double x = i * (n - 1) / 4.0;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,141,int k = (int) Math.floor(x);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,142,double u = x - k;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,143,return starter.get(k) * (1 - u) + starter.get(k + 1) * u;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,145,throw new IllegalArgumentException("Must have at least two samples to estimate quartiles");
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,147,case 4:
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,148,if (n == 0) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,149,throw new IllegalArgumentException("Must have at least one sample to estimate maximum value");
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,151,return starter.get(starter.size() - 1);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,152,default:
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,153,throw new IllegalArgumentException("Quartile number must be in the range [0..4] not " + i);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,85,if (lower.startsWith(ARFFModel.ARFF_COMMENT)) {
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,86,continue;
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,90,String label;
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,91,ARFFType type;
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,92,if (lower.contains(ARFFType.NUMERIC.getIndicator())) {
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,93,label = ARFFType.NUMERIC.getLabel(lower);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,94,type = ARFFType.NUMERIC;
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,96,label = ARFFType.STRING.getLabel(lower);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,97,type = ARFFType.STRING;
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,99,label = ARFFType.NOMINAL.getLabel(lower);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,100,type = ARFFType.NOMINAL;
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,102,int classIdx = lower.indexOf(ARFFType.NOMINAL.getIndicator());
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,103,String[] classes = COMMA_PATTERN.split(line.substring(classIdx + 1, line.length() - 1));
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,104,for (int i = 0; i < classes.length; i++) {
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,109,label = ARFFType.DATE.getLabel(lower);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,110,type = ARFFType.DATE;
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,112,DateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss", Locale.ENGLISH);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,113,int idx = lower.lastIndexOf(ARFFType.DATE.getIndicator());
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,114,String[] split = SPACE_PATTERN.split(line);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,115,if (split.length >= 4) { //we have a date format
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,116,String formStr = line.substring(idx + ARFFType.DATE.getIndicator().length()).trim();
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,117,if (formStr.startsWith("\"")) {
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,118,formStr = formStr.substring(1, formStr.length() - 1);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,120,format = new SimpleDateFormat(formStr, Locale.ENGLISH);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,122,model.addDateFormat(labelNumInt, format);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,125,throw new UnsupportedOperationException("Invalid attribute: " + line);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,127,model.addLabel(label, labelNumInt);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,128,model.addType(labelNumInt, type);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,129,labelNumber++;
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,132,break; //skip it
integration/src/main/java/org/apache/mahout/utils/vectors/arff/MapBackedARFFModel.java,141,return Double.parseDouble(data);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/TasteHadoopUtils.java,54,return 0x7FFFFFFF & Longs.hashCode(id);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/AllSimilarItemsCandidateItemsStrategy.java,39,FastIDSet doGetCandidateItems(long[] preferredItemIDs, DataModel dataModel) throws TasteException {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/AbstractCandidateItemsStrategy.java,44,abstract FastIDSet doGetCandidateItems(long[] preferredItemIDs, DataModel dataModel) throws TasteException;
core/src/main/java/org/apache/mahout/vectorizer/encoders/InteractionValueEncoder.java,22,import java.util.Arrays;
core/src/main/java/org/apache/mahout/vectorizer/encoders/InteractionValueEncoder.java,23,import java.util.Locale;
core/src/main/java/org/apache/mahout/vectorizer/encoders/InteractionValueEncoder.java,89,trace(String.format("%s:%s", Arrays.toString(originalForm1), Arrays.toString(originalForm2)), n);
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,80,public class PrefixAdditionFilter implements FileFilter {
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,81,private final MailProcessor processor;
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,83,private long messageCount;
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,85,public PrefixAdditionFilter(MailProcessor processor, ChunkedWriter writer) {
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,86,this.processor = processor;
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,88,this.messageCount = 0;
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,92,return messageCount;
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,96,public boolean accept(File current) {
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,97,if (current.isDirectory()) {
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,102,long dirCount = nested.getMessageCount();
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,104,messageCount += dirCount;
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,106,try {
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,107,messageCount += processor.parseMboxLineByLine(current);
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,109,throw new IllegalStateException("Error processing " + current, e);
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,112,return false;
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,66,options.getInput().listFiles(filter);
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,101,current.listFiles(nested);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDSolver.java,323,if (overwrite) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDSolver.java,324,fs.delete(outputPath, true);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDSolver.java,337,seed,
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/UJob.java,139,uHatPath, context.getConfiguration()));
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,79,StringBuilder result = new StringBuilder();
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,80,result.append('{');
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,81,Iterator<Element> it = iterateNonZero();
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,82,boolean first = true;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,83,while (it.hasNext()) {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,84,if (first) {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,85,first = false;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,87,result.append(',');
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,89,Element e = it.next();
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,90,result.append(e.index());
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,91,result.append(':');
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,92,result.append(e.get());
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,94,result.append('}');
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,95,return result.toString();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,150,StringBuilder result = new StringBuilder();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,151,result.append('{');
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,152,Iterator<Element> it = iterateNonZero();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,153,while (it.hasNext()) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,154,Element e = it.next();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,155,result.append(e.index());
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,156,result.append(':');
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,157,result.append(e.get());
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,158,result.append(',');
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,163,return result.toString();
core/src/main/java/org/apache/mahout/classifier/sgd/CsvRecordFactory.java,20,import com.google.common.base.CharMatcher;
core/src/main/java/org/apache/mahout/classifier/sgd/CsvRecordFactory.java,23,import com.google.common.base.Splitter;
core/src/main/java/org/apache/mahout/classifier/sgd/CsvRecordFactory.java,73,private static final Splitter COMMA = Splitter.on(',').trimResults(CharMatcher.is('"'));
core/src/main/java/org/apache/mahout/classifier/sgd/CsvRecordFactory.java,169,variableNames = Lists.newArrayList(COMMA.split(line));
core/src/main/java/org/apache/mahout/classifier/sgd/CsvRecordFactory.java,243,List<String> values = Lists.newArrayList(COMMA.split(line));
core/src/main/java/org/apache/mahout/classifier/sgd/CsvRecordFactory.java,274,List<String> values = Lists.newArrayList(COMMA.split(line));
core/src/main/java/org/apache/mahout/classifier/sgd/CsvRecordFactory.java,296,List<String> values = Lists.newArrayList(COMMA.split(line));
core/src/main/java/org/apache/mahout/classifier/sgd/CsvRecordFactory.java,321,List<String> values = Lists.newArrayList(COMMA.split(line));
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,160,if (result.length() > 1) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,161,result.setCharAt(result.length() - 1, '}');
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterCountReader.java,20,import java.io.IOException;
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterCountReader.java,21,import java.util.Iterator;
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterCountReader.java,55,PathType.LIST,
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterCountReader.java,56,PathFilters.partFilter(),
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterCountReader.java,57,null,
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterCountReader.java,58,true,
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterCountReader.java,59,conf);
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessor.java,20,import java.io.IOException;
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessor.java,21,import java.util.HashMap;
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessor.java,22,import java.util.Map;
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessor.java,56,private final Map<String,Path> postProcessedClusterDirectories = new HashMap<String,Path>();
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessor.java,58,private final Map<String,SequenceFile.Writer> writersForClusters;
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessor.java,66,this.writersForClusters = new HashMap<String,SequenceFile.Writer>();
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessor.java,67,fileSystem = clusteredPoints.getFileSystem(conf);
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessor.java,78,PathType.GLOB,
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessor.java,79,PathFilters.partFilter(),
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessor.java,80,null,
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessor.java,81,false,
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessor.java,82,conf)) {
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessor.java,137,public Map<String,Path> getPostProcessedClusterDirectories() {
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorDriver.java,20,import java.io.IOException;
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorDriver.java,26,import org.apache.hadoop.io.Text;
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorDriver.java,69,DefaultOptionCreator.SEQUENTIAL_METHOD);
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorDriver.java,78,private ClusterOutputPostProcessorDriver() {}
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorDriver.java,98,InterruptedException,
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorDriver.java,99,ClassNotFoundException {
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorDriver.java,122,new Configuration());
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorDriver.java,139,InterruptedException,
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorDriver.java,140,ClassNotFoundException {
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorDriver.java,145,job.setMapOutputKeyClass(Text.class);
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorDriver.java,148,job.setOutputKeyClass(Text.class);
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorDriver.java,150,int numberOfClusters = ClusterCountReader.getNumberOfClusters(input, conf);
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorDriver.java,173,SequenceFileIterator<Writable,Writable> it =
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorDriver.java,174,new SequenceFileIterator<Writable,Writable>(fileStatus.getPath(), true, conf);
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorMapper.java,20,import java.io.IOException;
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorMapper.java,23,import org.apache.hadoop.io.Text;
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorMapper.java,32,Mapper<IntWritable,WeightedVectorWritable,Text,VectorWritable> {
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorMapper.java,38,protected void map(IntWritable key, WeightedVectorWritable vector, Context context) throws IOException,
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorMapper.java,39,InterruptedException {
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorMapper.java,40,context.write(new Text(key.toString().trim()), new VectorWritable(vector.getVector()));
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorReducer.java,20,import java.io.IOException;
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorReducer.java,22,import org.apache.hadoop.io.Text;
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorReducer.java,29,public class ClusterOutputPostProcessorReducer extends Reducer<Text,VectorWritable,Text,VectorWritable> {
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorReducer.java,34,protected void reduce(Text key, Iterable<VectorWritable> values, Context context) throws IOException,
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorReducer.java,35,InterruptedException {
core/src/main/java/org/apache/mahout/clustering/topdown/postprocessor/ClusterOutputPostProcessorReducer.java,37,context.write(key, value);
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,20,import java.util.List;
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,69,abuilder.withName("minSupport").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,73,abuilder.withName("analyzerName").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,77,abuilder.withName("chunkSize").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,81,abuilder.withName("weight").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,85,abuilder.withName("minDF").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,94,abuilder.withName("maxDFSigma").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,101,abuilder.withName("minLLR").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,103,.withShortName("ml").create();
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,106,abuilder.withName("numReducers").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,110,abuilder.withName("norm").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,112,+ "Must be greater or equal to 0.  The default is not to normalize").withShortName("n").create();
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,115,.withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,117,.withShortName("lnorm").create();
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,121,.withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,123,+ " (2 = bigrams, 3 = trigrams, etc) Default Value:1").withShortName("ng").create();
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,126,.withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,128,.withShortName("seq").create();
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,131,.withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,133,.withShortName("nv").create();
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,138,.create();
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,146,.create();
integration/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java,125,writeFile(outDir, file, maxDocs, model, dictOut, delimiter);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java,128,writeFile(outDir, input, maxDocs, model, dictOut, delimiter);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java,138,private static void writeLabelBindings(File dictOut, ARFFModel arffModel, String delimiter) throws IOException {
integration/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java,139,Map<String,Integer> labels = arffModel.getLabelBindings();
integration/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java,142,writer.write("Label bindings for Relation " + arffModel.getRelation() + '\n');
integration/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java,143,for (Map.Entry<String,Integer> entry : labels.entrySet()) {
integration/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java,144,writer.write(entry.getKey());
integration/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java,145,writer.write(delimiter);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java,146,writer.write(String.valueOf(entry.getValue()));
integration/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java,147,writer.write('\n');
integration/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java,149,writer.write('\n');
integration/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java,155,private static void writeFile(String outDir,
integration/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java,160,String delimiter) throws IOException {
integration/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java,170,writeLabelBindings(dictOut, model, delimiter);
core/src/main/java/org/apache/mahout/classifier/df/DFUtils.java,37,private DFUtils() { }
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,27,import org.apache.hadoop.io.Writable;
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,28,import org.apache.hadoop.io.WritableUtils;
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,29,import org.apache.mahout.classifier.df.DFUtils;
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,31,import java.io.DataInput;
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,32,import java.io.DataOutput;
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,40,public class Dataset implements Writable {
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,90,private Dataset() {
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,165,public int nbInstances() {
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,166,return nbInstances;
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,300,return read(input);
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,306,public static Dataset read(DataInput in) throws IOException {
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,307,Dataset dataset = new Dataset();
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,309,dataset.readFields(in);
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,310,return dataset;
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,314,public void readFields(DataInput in) throws IOException {
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,315,int nbAttributes = in.readInt();
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,316,attributes = new Attribute[nbAttributes];
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,317,for (int attr = 0; attr < nbAttributes; attr++) {
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,318,String name = WritableUtils.readString(in);
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,319,attributes[attr] = Attribute.valueOf(name);
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,322,ignored = DFUtils.readIntArray(in);
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,325,values = new String[nbAttributes][];
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,326,for (int attr = 0; attr < nbAttributes; attr++) {
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,327,if (attributes[attr].isCategorical()) {
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,328,values[attr] = WritableUtils.readStringArray(in);
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,332,labelId = in.readInt();
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,333,nbInstances = in.readInt();
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,337,public void write(DataOutput out) throws IOException {
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,338,out.writeInt(attributes.length); // nb attributes
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,339,for (Attribute attr : attributes) {
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,340,WritableUtils.writeString(out, attr.name());
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,343,DFUtils.writeArray(out, ignored);
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,346,for (String[] vals : values) {
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,347,if (vals != null) {
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,348,WritableUtils.writeStringArray(out, vals);
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,352,out.writeInt(labelId);
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,353,out.writeInt(nbInstances);
core/src/main/java/org/apache/mahout/classifier/df/tools/Describe.java,52,private Describe() {
core/src/main/java/org/apache/mahout/classifier/df/tools/Describe.java,119,DFUtils.storeWritable(new Configuration(), fPath, dataset);
core/src/main/java/org/apache/mahout/classifier/df/tools/UDistrib.java,59,private UDistrib() {
core/src/main/java/org/apache/mahout/classifier/df/tools/UDistrib.java,164,int nbInstances = dataset.nbInstances();
core/src/main/java/org/apache/mahout/classifier/df/tools/UDistrib.java,169,log.info("progress : {} / {}", id, nbInstances);
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/Driver.java,112,Closeables.closeQuietly(vectorWriter);
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/Driver.java,122,Closeables.closeQuietly(tiWriter);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,142,Path clusters = new Path(output, Cluster.INITIAL_CLUSTERS_DIR);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,145,log.info("Running KMeans");
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,121,for (FileStatus part : fs.listStatus(clustersIn, PathFilters.logsCRCFilter())) {
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,122,Path inPart = part.getPath();
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,123,Path path = new Path(output, inPart.getName());
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,124,SequenceFile.Writer writer = new SequenceFile.Writer(fs, conf, path, IntWritable.class, VectorWritable.class);
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,125,try {
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,127,if (log.isDebugEnabled()) {
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,133,Closeables.closeQuietly(writer);
core/src/main/java/org/apache/mahout/classifier/df/tools/TreeVisualizer.java,39,private TreeVisualizer() {
core/src/main/java/org/apache/mahout/classifier/df/tools/TreeVisualizer.java,100,Map<String, Field> fields = new HashMap<String, Field>();
core/src/main/java/org/apache/mahout/classifier/df/tools/TreeVisualizer.java,217,Map<String, Field> reflectMap = getReflectMap();
core/src/main/java/org/apache/mahout/classifier/df/tools/TreeVisualizer.java,220,prediction[i] = toStringPredict(tree, data.get(i), data.getDataset(), attrNames, reflectMap);
core/src/main/java/org/apache/mahout/classifier/df/tools/TreeVisualizer.java,235,Map<String, Field> reflectMap = getReflectMap();
core/src/main/java/org/apache/mahout/math/VectorWritable.java,20,import org.apache.hadoop.conf.Configured;
core/src/main/java/org/apache/mahout/math/VectorWritable.java,21,import org.apache.hadoop.io.Writable;
core/src/main/java/org/apache/mahout/math/VectorWritable.java,23,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/mahout/math/VectorWritable.java,41,public VectorWritable() {
core/src/main/java/org/apache/mahout/math/VectorWritable.java,154,Varint.writeUnsignedVarInt(vector.getNumNondefaultElements(), out);
examples/src/main/java/org/apache/mahout/classifier/sgd/LogisticModelParameters.java,95,if (lr != null) {
examples/src/main/java/org/apache/mahout/classifier/sgd/LogisticModelParameters.java,96,lr.close();
examples/src/main/java/org/apache/mahout/classifier/sgd/LogisticModelParameters.java,98,targetCategories = csv.getTargetCategories();
examples/src/main/java/org/apache/mahout/classifier/sgd/LogisticModelParameters.java,136,out.writeInt(targetCategories.size());
examples/src/main/java/org/apache/mahout/classifier/sgd/LogisticModelParameters.java,137,for (String category : targetCategories) {
examples/src/main/java/org/apache/mahout/classifier/sgd/LogisticModelParameters.java,138,out.writeUTF(category);
core/src/main/java/org/apache/mahout/vectorizer/HighDFWordsPruner.java,52,Configuration baseConf,
core/src/main/java/org/apache/mahout/vectorizer/HighDFWordsPruner.java,64,pruneVectorsPartial(tfDir, partialVectorOutputPath, path, maxDF, baseConf);
core/src/main/java/org/apache/mahout/vectorizer/HighDFWordsPruner.java,73,Configuration baseConf) throws IOException, InterruptedException,
core/src/main/java/org/apache/mahout/vectorizer/pruner/WordsPrunerReducer.java,42,private long maxDf = -1;
core/src/main/java/org/apache/mahout/vectorizer/pruner/WordsPrunerReducer.java,53,if (maxDf > -1) {
core/src/main/java/org/apache/mahout/vectorizer/pruner/WordsPrunerReducer.java,62,if (df > maxDf) {
core/src/main/java/org/apache/mahout/vectorizer/pruner/WordsPrunerReducer.java,80,maxDf = conf.getLong(HighDFWordsPruner.MAX_DF, -1);
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,63,private VectorDumper() {
integration/src/main/java/org/apache/mahout/utils/SplitInput.java,286,SplitInputJob.run(new Configuration(), inputDir, mapRedOutputDirectory,
integration/src/main/java/org/apache/mahout/utils/SplitInput.java,287,keepPct, testRandomSelectionPct);
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,176,Path clustersOut = buildClusters(new Configuration(),
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,187,clusterData(input,
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,299,clusterData(input,
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,455,public static void clusterData(Path input,
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyDriver.java,450,public static void clusterData(Path input, Path clustersIn, Path output,
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyDriver.java,456,clusterDataMR(input, clustersIn, output);
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyDriver.java,500,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,217,public static void runPFPGrowth(Parameters params) throws IOException,
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,218,InterruptedException,
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,219,ClassNotFoundException {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,220,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,222,+ "org.apache.hadoop.io.serializer.WritableSerialization");
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,234,maxPerGroup++;
core/src/main/java/org/apache/mahout/math/hadoop/solver/DistributedConjugateGradientSolver.java,163,DistributedConjugateGradientSolver.this.setConf(new Configuration());
core/src/main/java/org/apache/mahout/math/stats/entropy/InformationGain.java,88,ToolRunner.run(new Entropy(), args);
core/src/main/java/org/apache/mahout/math/stats/entropy/InformationGain.java,94,ToolRunner.run(new ConditionalEntropy(), args);
core/src/main/java/org/apache/mahout/math/stats/entropy/InformationGainRatio.java,42,ToolRunner.run(job, args);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelCountingMapper.java,45,for (String item : items) {
core/src/main/java/org/apache/mahout/clustering/lda/cvb/ModelTrainer.java,244,writeModel.awaitTermination();
core/src/main/java/org/apache/mahout/clustering/lda/cvb/ModelTrainer.java,250,writeModel.reset();
core/src/main/java/org/apache/mahout/clustering/lda/cvb/TopicModel.java,156,ThreadPoolExecutor threadPool = new ThreadPoolExecutor(numThreads, numThreads, 0, TimeUnit.SECONDS,
core/src/main/java/org/apache/mahout/clustering/lda/cvb/TopicModel.java,249,initializeThreadPool();
core/src/main/java/org/apache/mahout/clustering/lda/cvb/TopicModel.java,252,public void awaitTermination() {
examples/src/main/java/org/apache/mahout/clustering/display/DisplayKMeans.java,62,int numClusters = 3;
examples/src/main/java/org/apache/mahout/clustering/display/DisplayKMeans.java,65,int maxIterations = 10;
examples/src/main/java/org/apache/mahout/clustering/display/DisplayKMeans.java,90,int maxIter = 10;
math/src/main/java/org/apache/mahout/math/PivotedMatrix.java,27,private final Matrix base;
math/src/main/java/org/apache/mahout/math/PivotedMatrix.java,28,private final int[] rowPivot;
math/src/main/java/org/apache/mahout/math/PivotedMatrix.java,29,private final int[] rowUnpivot;
math/src/main/java/org/apache/mahout/math/PivotedMatrix.java,30,private final int[] columnPivot;
math/src/main/java/org/apache/mahout/math/PivotedMatrix.java,31,private final int[] columnUnpivot;
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,103,boolean overwrite =
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,104,pargs.containsKey(keyFor(DefaultOptionCreator.OVERWRITE_OPTION));
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,135,fs.mkdirs(getOutputPath());
math/src/main/java/org/apache/mahout/math/AbstractVector.java,573,for (int row = 0; row < size; row++) {
core/src/main/java/org/apache/mahout/common/TimingStatistics.java,81,return '\n' + "nCalls = " + nCalls + ";\n" + "sum = " + sumTime / 1000000000.0 + "s;\n"
core/src/main/java/org/apache/mahout/common/TimingStatistics.java,82,+ "min = " + minTime / 1000000.0 + "ms;\n" + "max = " + maxTime / 1000000.0 + "ms;\n"
core/src/main/java/org/apache/mahout/common/TimingStatistics.java,84,/ 1000000.0 + "ms;";
core/src/main/java/org/apache/mahout/common/TimingStatistics.java,91,public final class Call {
core/src/main/java/org/apache/mahout/common/TimingStatistics.java,92,private final long startTime = System.nanoTime();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,24,import java.util.Iterator;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,27,import java.util.Random;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,31,import com.google.common.collect.Lists;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,32,import com.google.common.collect.Maps;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,33,import com.google.common.io.Closeables;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,43,import org.apache.hadoop.conf.Configuration;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,44,import org.apache.hadoop.fs.FileSystem;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,45,import org.apache.hadoop.fs.Path;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,46,import org.apache.hadoop.io.IntWritable;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,47,import org.apache.hadoop.io.SequenceFile;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,48,import org.apache.hadoop.io.Writable;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,54,import org.apache.mahout.common.distance.DistanceMeasure;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,59,import org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterator;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,63,import org.apache.mahout.math.SparseMatrix;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,65,import org.apache.mahout.math.VectorWritable;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,71,private static final Logger log = LoggerFactory.getLogger(VectorBenchmarks.class);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,76,private final Vector[][] vectors;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,77,private final Vector[] clusters;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,78,private final SparseMatrix clusterDistances;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,82,private final int cardinality;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,83,private final int sparsity;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,84,private final int numVectors;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,85,private final int loop;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,86,private final int opsPerUnit;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,87,private final Map<String,Integer> implType = Maps.newHashMap();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,88,private final Map<String,List<String[]>> statsMap = Maps.newHashMap();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,89,private final int numClusters;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,91,public VectorBenchmarks(int cardinality, int sparsity, int numVectors, int numClusters, int loop, int opsPerUnit) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,92,Random r = RandomUtils.getRandom();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,94,this.sparsity = sparsity;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,97,this.loop = loop;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,100,Vector v = new SequentialAccessSparseVector(cardinality, sparsity); // sparsity!
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,102,int[] indexes = new int[sparsity];
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,103,double[] values = new double[sparsity];
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,105,while (j < sparsity) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,108,if (!featureSpace.get(index)) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,119,vectors = new Vector[3][numVectors];
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,120,clusters = new Vector[numClusters];
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,121,clusterDistances = new SparseMatrix(numClusters, numClusters);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,124,private void printStats(TimingStatistics stats, String benchmarkName, String implName, String content) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,128,private void printStats(TimingStatistics stats, String benchmarkName, String implName) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,132,private void printStats(TimingStatistics stats,
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,133,String benchmarkName,
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,134,String implName,
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,135,String content,
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,136,int multiplier) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,137,float speed = multiplier * loop * numVectors * sparsity * 1000.0f * 12 / stats.getSumTime();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,138,float opsPerSec = loop * numVectors * 1000000000.0f / stats.getSumTime();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,153,implStats.set(implId,
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,154,TAB_NEWLINE_PATTERN.split(stats + "\tSpeed = " + opsPerSec + " /sec\tRate = " + speed + " MB/s"));
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,158,TimingStatistics stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,159,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,160,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,161,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,162,vectors[0][i] = new DenseVector(randomVectors.get(i));
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,163,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,166,printStats(stats, "Create (copy)", "DenseVector");
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,168,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,169,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,170,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,171,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,172,vectors[1][i] = new RandomAccessSparseVector(randomVectors.get(i));
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,173,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,176,printStats(stats, "Create (copy)", "RandSparseVector");
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,178,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,179,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,180,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,181,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,182,vectors[2][i] = new SequentialAccessSparseVector(randomVectors.get(i));
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,183,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,186,printStats(stats, "Create (copy)", "SeqSparseVector");
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,190,private void buildVectorIncrementally(TimingStatistics stats, int randomIndex, Vector v, boolean useSetQuick) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,203,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,213,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,218,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,219,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,220,vectors[0][i] = new DenseVector(cardinality);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,221,buildVectorIncrementally(stats, i, vectors[0][i], false);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,224,printStats(stats, "Create (incrementally)", "DenseVector");
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,227,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,228,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,229,vectors[1][i] = new RandomAccessSparseVector(cardinality);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,230,buildVectorIncrementally(stats, i, vectors[1][i], false);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,233,printStats(stats, "Create (incrementally)", "RandSparseVector");
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,244,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,245,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,246,for (int i = 0; i < numClusters; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,247,clusters[i] = new RandomAccessSparseVector(cardinality);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,248,buildVectorIncrementally(stats, i, clusters[i], false);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,251,printStats(stats, "Create (incrementally)", "Clusters");
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,254,public void cloneBenchmark() {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,255,TimingStatistics stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,256,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,257,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,258,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,259,vectors[0][i] = vectors[0][i].clone();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,260,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,263,printStats(stats, "Clone", "DenseVector");
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,265,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,266,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,267,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,268,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,269,vectors[1][i] = vectors[1][i].clone();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,270,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,273,printStats(stats, "Clone", "RandSparseVector");
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,275,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,276,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,277,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,278,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,279,vectors[2][i] = vectors[2][i].clone();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,280,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,283,printStats(stats, "Clone", "SeqSparseVector");
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,287,public void serializeBenchmark() throws IOException {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,288,Configuration conf = new Configuration();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,289,FileSystem fs = FileSystem.get(conf);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,290,SequenceFile.Writer writer = new SequenceFile.Writer(fs, conf,
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,291,new Path("/tmp/dense-vector"), IntWritable.class, VectorWritable.class);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,293,Writable one = new IntWritable(0);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,294,VectorWritable vec = new VectorWritable();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,295,TimingStatistics stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,297,try {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,298,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,299,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,300,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,301,vec.set(vectors[0][i]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,302,writer.append(one, vec);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,303,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,307,Closeables.closeQuietly(writer);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,309,printStats(stats, "Serialize", "DenseVector");
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,311,writer = new SequenceFile.Writer(fs, conf,
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,312,new Path("/tmp/randsparse-vector"), IntWritable.class, VectorWritable.class);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,314,try {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,315,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,316,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,317,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,318,vec.set(vectors[1][i]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,319,writer.append(one, vec);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,320,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,324,Closeables.closeQuietly(writer);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,326,printStats(stats, "Serialize", "RandSparseVector");
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,328,writer = new SequenceFile.Writer(fs, conf,
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,329,new Path("/tmp/seqsparse-vector"), IntWritable.class, VectorWritable.class);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,330,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,331,try {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,332,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,333,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,334,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,335,vec.set(vectors[2][i]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,336,writer.append(one, vec);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,337,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,341,Closeables.closeQuietly(writer);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,343,printStats(stats, "Serialize", "SeqSparseVector");
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,347,public void deserializeBenchmark() throws IOException {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,348,doDeserializeBenchmark("DenseVector", "/tmp/dense-vector");
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,349,doDeserializeBenchmark("RandSparseVector", "/tmp/randsparse-vector");
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,350,doDeserializeBenchmark("SeqSparseVector", "/tmp/seqsparse-vector");
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,353,private void doDeserializeBenchmark(String name, String pathString) throws IOException {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,354,TimingStatistics stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,355,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,356,Iterator<?> iterator = new SequenceFileValueIterator<Writable>(new Path(pathString), true, new Configuration());
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,357,while (iterator.hasNext()) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,358,iterator.next();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,359,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,360,call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,362,printStats(stats, "Deserialize", name);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,365,public void dotBenchmark() {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,366,double result = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,367,TimingStatistics stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,368,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,369,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,370,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,371,result += vectors[0][i].dot(vectors[0][(i + 1) % numVectors]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,372,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,376,printStats(stats, "DotProduct", "DenseVector", "sum = " + result + ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,377,result = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,378,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,379,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,380,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,381,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,382,result += vectors[1][i].dot(vectors[1][(i + 1) % numVectors]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,383,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,387,printStats(stats, "DotProduct", "RandSparseVector", "sum = " + result + ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,388,result = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,389,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,390,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,391,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,392,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,393,result += vectors[2][i].dot(vectors[2][(i + 1) % numVectors]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,394,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,398,printStats(stats, "DotProduct", "SeqSparseVector", "sum = " + result + ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,399,result = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,400,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,401,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,402,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,403,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,404,result += vectors[0][i].dot(vectors[1][(i + 1) % numVectors]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,405,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,409,printStats(stats, "DotProduct", "Dense.fn(Rand)", "sum = " + result + ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,410,result = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,412,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,413,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,414,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,415,result += vectors[0][i].dot(vectors[2][(i + 1) % numVectors]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,416,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,420,printStats(stats, "DotProduct", "Dense.fn(Seq)", "sum = " + result + ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,421,result = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,422,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,423,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,424,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,425,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,426,result += vectors[1][i].dot(vectors[0][(i + 1) % numVectors]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,427,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,431,printStats(stats, "DotProduct", "Rand.fn(Dense)", "sum = " + result + ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,432,result = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,433,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,434,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,435,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,436,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,437,result += vectors[1][i].dot(vectors[2][(i + 1) % numVectors]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,438,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,442,printStats(stats, "DotProduct", "Rand.fn(Seq)", "sum = " + result + ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,443,result = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,444,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,445,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,446,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,447,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,448,result += vectors[2][i].dot(vectors[0][(i + 1) % numVectors]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,449,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,453,printStats(stats, "DotProduct", "Seq.fn(Dense)", "sum = " + result + ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,454,result = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,455,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,456,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,457,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,458,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,459,result += vectors[2][i].dot(vectors[1][(i + 1) % numVectors]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,460,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,464,printStats(stats, "DotProduct", "Seq.fn(Rand)", "sum = " + result + ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,470,public void closestCentroidBenchmark(DistanceMeasure measure) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,472,for (int i = 0; i < numClusters; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,473,for (int j = 0; j < numClusters; j++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,474,double distance = Double.POSITIVE_INFINITY;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,475,if (i != j) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,476,distance = measure.distance(clusters[i], clusters[j]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,478,clusterDistances.setQuick(i, j, distance);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,482,long distanceCalculations = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,483,TimingStatistics stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,484,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,485,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,486,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,487,Vector vector = vectors[1][i];
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,488,double minDistance = Double.MAX_VALUE;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,489,for (int k = 0; k < numClusters; k++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,490,double distance = measure.distance(vector, clusters[k]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,491,distanceCalculations++;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,492,if (distance < minDistance) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,493,minDistance = distance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,497,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,499,printStats(stats,
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,500,measure.getClass().getName(),
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,505,distanceCalculations = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,506,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,507,Random rand = RandomUtils.getRandom();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,509,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,510,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,511,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,512,Vector vector = vectors[1][i];
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,513,int closestCentroid = rand.nextInt(numClusters);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,514,double dist = measure.distance(vector, clusters[closestCentroid]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,515,distanceCalculations++;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,516,for (int k = 0; k < numClusters; k++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,517,if (closestCentroid != k) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,518,double centroidDist = clusterDistances.getQuick(k, closestCentroid);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,519,if (centroidDist < 2 * dist) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,520,dist = measure.distance(vector, clusters[k]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,521,closestCentroid = k;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,522,distanceCalculations++;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,527,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,529,printStats(stats,
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,530,measure.getClass().getName(),
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,535,public void distanceMeasureBenchmark(DistanceMeasure measure) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,536,double result = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,537,TimingStatistics stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,538,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,539,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,540,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,541,double minDistance = Double.MAX_VALUE;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,542,for (int u = 0; u < opsPerUnit; u++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,543,double distance = measure.distance(vectors[0][i], vectors[0][u]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,544,if (distance < minDistance) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,545,minDistance = distance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,548,result += minDistance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,549,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,553,printStats(stats, measure.getClass().getName(), "DenseVector", "minDistance = " + result + ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,554,result = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,555,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,556,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,557,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,558,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,559,double minDistance = Double.MAX_VALUE;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,560,for (int u = 0; u < opsPerUnit; u++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,561,double distance = measure.distance(vectors[1][i], vectors[1][u]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,562,if (distance < minDistance) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,563,minDistance = distance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,566,result += minDistance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,567,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,571,printStats(stats, measure.getClass().getName(), "RandSparseVector", "minDistance = " + result
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,572,+ ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,573,result = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,574,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,575,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,576,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,577,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,578,double minDistance = Double.MAX_VALUE;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,579,for (int u = 0; u < opsPerUnit; u++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,580,double distance = measure.distance(vectors[2][i], vectors[2][u]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,581,if (distance < minDistance) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,582,minDistance = distance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,585,result += minDistance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,586,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,590,printStats(stats, measure.getClass().getName(), "SeqSparseVector", "minDistance = " + result
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,591,+ ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,592,result = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,593,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,594,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,595,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,596,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,597,double minDistance = Double.MAX_VALUE;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,598,for (int u = 0; u < opsPerUnit; u++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,599,double distance = measure.distance(vectors[0][i], vectors[1][u]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,600,if (distance < minDistance) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,601,minDistance = distance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,604,result += minDistance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,605,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,609,printStats(stats, measure.getClass().getName(), "Dense.fn(Rand)", "minDistance = " + result + ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,610,result = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,611,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,612,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,613,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,614,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,615,double minDistance = Double.MAX_VALUE;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,616,for (int u = 0; u < opsPerUnit; u++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,617,double distance = measure.distance(vectors[0][i], vectors[2][u]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,618,if (distance < minDistance) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,619,minDistance = distance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,622,result += minDistance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,623,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,627,printStats(stats, measure.getClass().getName(), "Dense.fn(Seq)", "minDistance = " + result
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,628,+ ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,629,result = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,630,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,631,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,632,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,633,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,634,double minDistance = Double.MAX_VALUE;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,635,for (int u = 0; u < opsPerUnit; u++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,636,double distance = measure.distance(vectors[1][i], vectors[0][u]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,637,if (distance < minDistance) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,638,minDistance = distance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,641,result += minDistance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,642,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,646,printStats(stats, measure.getClass().getName(), "Rand.fn(Dense)", "minDistance = " + result
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,647,+ ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,648,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,649,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,650,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,651,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,652,double minDistance = Double.MAX_VALUE;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,653,for (int u = 0; u < opsPerUnit; u++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,654,double distance = measure.distance(vectors[1][i], vectors[2][u]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,655,if (distance < minDistance) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,656,minDistance = distance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,659,result += minDistance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,660,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,664,printStats(stats, measure.getClass().getName(), "Rand.fn(Seq)", "minDistance = " + result + ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,665,result = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,666,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,667,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,668,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,669,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,670,double minDistance = Double.MAX_VALUE;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,671,for (int u = 0; u < opsPerUnit; u++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,672,double distance = measure.distance(vectors[2][i], vectors[0][u]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,673,if (distance < minDistance) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,674,minDistance = distance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,677,result += minDistance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,678,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,682,printStats(stats, measure.getClass().getName(), "Seq.fn(Dense)", "minDistance = " + result
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,683,+ ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,684,result = 0;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,685,stats = new TimingStatistics();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,686,for (int l = 0; l < loop; l++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,687,for (int i = 0; i < numVectors; i++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,688,TimingStatistics.Call call = stats.newCall();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,689,double minDistance = Double.MAX_VALUE;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,690,for (int u = 0; u < opsPerUnit; u++) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,691,double distance = measure.distance(vectors[2][i], vectors[1][u]);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,692,if (distance < minDistance) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,693,minDistance = distance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,696,result += minDistance;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,697,call.end();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,701,printStats(stats, measure.getClass().getName(), "Seq.fn(Rand)", "minDistance = " + result
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,702,+ ' ');
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,712,Option vectorSizeOpt = obuilder.withLongName("vectorSize").withRequired(false).withArgument(
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,713,abuilder.withName("vs").withMinimum(1).withMaximum(1).create()).withDescription(
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,716,Option vectorSparsityOpt = obuilder.withLongName("sparsity").withRequired(false).withArgument(
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,717,abuilder.withName("sp").withMinimum(1).withMaximum(1).create()).withDescription(
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,719,Option numVectorsOpt = obuilder.withLongName("numVectors").withRequired(false).withArgument(
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,720,abuilder.withName("nv").withMinimum(1).withMaximum(1).create()).withDescription(
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,722,Option numClustersOpt = obuilder.withLongName("numClusters").withRequired(false).withArgument(
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,723,abuilder.withName("vs").withMinimum(1).withMaximum(1).create()).withDescription(
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,725,Option loopOpt = obuilder.withLongName("loop").withRequired(false).withArgument(
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,726,abuilder.withName("loop").withMinimum(1).withMaximum(1).create()).withDescription(
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,728,Option numOpsOpt = obuilder.withLongName("numOps").withRequired(false).withArgument(
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,729,abuilder.withName("numOps").withMinimum(1).withMaximum(1).create()).withDescription(
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,731,+ "E.g In distance measure, the distance is calculated numOps times"
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,732,+ " and the total time is measured. Default: 10").withShortName("no").create();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,737,.withOption(numVectorsOpt).withOption(loopOpt).withOption(numOpsOpt).withOption(helpOpt).create();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,745,CommandLineUtil.printHelp(group);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,749,int cardinality = 1000;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,760,int sparsity = 1000;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,761,if (cmdLine.hasOption(vectorSparsityOpt)) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,762,sparsity = Integer.parseInt((String) cmdLine.getValue(vectorSparsityOpt));
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,765,int numVectors = 100;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,770,int loop = 200;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,771,if (cmdLine.hasOption(loopOpt)) {
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,772,loop = Integer.parseInt((String) cmdLine.getValue(loopOpt));
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,780,VectorBenchmarks mark = new VectorBenchmarks(cardinality, sparsity, numVectors, numClusters, loop, numOps);
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,781,mark.createBenchmark();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,782,mark.incrementalCreateBenchmark();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,783,mark.cloneBenchmark();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,784,mark.dotBenchmark();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,785,mark.serializeBenchmark();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,786,mark.deserializeBenchmark();
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,787,mark.distanceMeasureBenchmark(new CosineDistanceMeasure());
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,788,mark.distanceMeasureBenchmark(new SquaredEuclideanDistanceMeasure());
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,789,mark.distanceMeasureBenchmark(new EuclideanDistanceMeasure());
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,790,mark.distanceMeasureBenchmark(new ManhattanDistanceMeasure());
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,791,mark.distanceMeasureBenchmark(new TanimotoDistanceMeasure());
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,793,mark.closestCentroidBenchmark(new CosineDistanceMeasure());
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,794,mark.closestCentroidBenchmark(new SquaredEuclideanDistanceMeasure());
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,795,mark.closestCentroidBenchmark(new EuclideanDistanceMeasure());
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,796,mark.closestCentroidBenchmark(new ManhattanDistanceMeasure());
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,797,mark.closestCentroidBenchmark(new TanimotoDistanceMeasure());
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java,355,for (int i = 0; i < length - 1; i++) {
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/AggregateAndRecommendReducer.java,35,import org.apache.mahout.math.function.DoubleFunction;
core/src/main/java/org/apache/mahout/cf/taste/impl/common/RefreshHelper.java,21,import java.util.HashSet;
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/knn/KnnItemBasedRecommender.java,20,import java.util.ArrayList;
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,22,import java.util.ArrayList;
core/src/main/java/org/apache/mahout/classifier/df/data/Data.java,24,import java.util.HashSet;
core/src/main/java/org/apache/mahout/classifier/df/mapreduce/Classifier.java,51,import java.util.ArrayList;
core/src/main/java/org/apache/mahout/classifier/naivebayes/BayesUtils.java,47,import java.util.HashSet;
core/src/main/java/org/apache/mahout/classifier/sequencelearning/hmm/BaumWelchTrainer.java,36,import java.util.ArrayList;
core/src/main/java/org/apache/mahout/classifier/sequencelearning/hmm/ViterbiEvaluator.java,37,import java.util.ArrayList;
core/src/main/java/org/apache/mahout/classifier/sgd/GradientMachine.java,33,import java.util.HashSet;
core/src/main/java/org/apache/mahout/clustering/lda/cvb/TopicModel.java,42,import java.util.ArrayList;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/FPGrowthDriver.java,41,import java.io.File;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/FPGrowthDriver.java,45,import java.util.HashSet;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,22,import java.util.ArrayList;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,23,import java.util.HashSet;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPGrowth.java,24,import java.util.HashSet;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FrequentPatternMaxHeap.java,20,import java.util.HashSet;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth2/FPGrowthIds.java,31,import com.google.common.collect.Lists;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth2/FPGrowthIds.java,36,import org.apache.hadoop.conf.Configuration;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth2/FPGrowthIds.java,37,import org.apache.hadoop.fs.Path;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth2/FPGrowthIds.java,38,import org.apache.hadoop.io.Writable;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth2/FPGrowthIds.java,41,import org.apache.mahout.common.iterator.sequencefile.SequenceFileIterable;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth2/FPGrowthIds.java,46,import org.apache.mahout.fpm.pfpgrowth.convertors.string.TopKStringPatterns;
core/src/main/java/org/apache/mahout/vectorizer/HighDFWordsPruner.java,38,import java.util.ArrayList;
examples/src/main/java/org/apache/mahout/cf/taste/example/kddcup/track2/Track2Callable.java,22,import java.util.HashSet;
examples/src/main/java/org/apache/mahout/classifier/df/mapreduce/TestForest.java,21,import java.util.ArrayList;
examples/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticModelParameters.java,29,import java.util.ArrayList;
examples/src/main/java/org/apache/mahout/clustering/display/DisplayMinHash.java,32,import java.util.ArrayList;
examples/src/main/java/org/apache/mahout/clustering/minhash/LastfmClusterEvaluator.java,25,import java.util.HashSet;
examples/src/main/java/org/apache/mahout/fpm/pfpgrowth/dataset/KeyBasedStringTupleCombiner.java,21,import java.util.HashSet;
examples/src/main/java/org/apache/mahout/fpm/pfpgrowth/dataset/KeyBasedStringTupleReducer.java,22,import java.util.HashSet;
integration/src/main/java/org/apache/mahout/benchmark/VectorBenchmarks.java,21,import java.util.ArrayList;
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java,44,import java.util.ArrayList;
integration/src/main/java/org/apache/mahout/utils/SequenceFileDumper.java,38,import java.util.ArrayList;
integration/src/main/java/org/apache/mahout/utils/regex/ChainTransformer.java,20,import java.util.ArrayList;
integration/src/main/java/org/apache/mahout/utils/regex/RegexMapper.java,28,import java.util.ArrayList;
integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,50,import java.util.HashSet;
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,26,import java.util.HashSet;
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterator.java,25,import com.google.common.collect.AbstractIterator;
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterator.java,31,import org.apache.mahout.math.NamedVector;
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterator.java,33,import org.apache.mahout.utils.Bump125;
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterator.java,34,import org.slf4j.Logger;
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterator.java,35,import org.slf4j.LoggerFactory;
math/src/main/java/org/apache/mahout/math/als/ImplicitFeedbackAlternatingLeastSquaresSolver.java,43,OpenIntObjectHashMap Y) {
core/src/main/java/org/apache/mahout/clustering/lda/cvb/InMemoryCollapsedVariationalBayes0.java,369,int burnInIterations = (Integer)cmdLine.getValue(burnInOpt);
core/src/main/java/org/apache/mahout/clustering/lda/cvb/InMemoryCollapsedVariationalBayes0.java,377,double modelCorpusFraction = (Double) cmdLine.getValue(modelCorpusFractionOption);
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumper.java,109,addOption(OUTPUT_FORMAT_OPT, "of", "The optional output format to write the results as.  Options: TEXT, CSV or GRAPH_ML", "TEXT");
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumper.java,120,if (parseArguments(args) == null) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/FPGrowthDriver.java,158,if ("true".equals(params.get("useFPG2"))) {
core/src/main/java/org/apache/mahout/clustering/kmeans/RandomSeedGenerator.java,99,int indexToRemove = random.nextInt(currentSize); // evict one chosen randomly
core/src/main/java/org/apache/mahout/clustering/kmeans/RandomSeedGenerator.java,100,chosenTexts.remove(indexToRemove);
core/src/main/java/org/apache/mahout/clustering/kmeans/RandomSeedGenerator.java,101,chosenClusters.remove(indexToRemove);
core/src/main/java/org/apache/mahout/clustering/kmeans/RandomSeedGenerator.java,102,chosenTexts.add(newText);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFType.java,39,return line.substring(ARFFModel.ATTRIBUTE.length(), idx).trim();
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,88,model.setRelation(line.substring(ARFFModel.RELATION.length()).trim());
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,105,model.addNominal(label, classes[i].trim(), i + 1);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/MapBackedARFFModel.java,115,Integer ord = classes.get(data);
core/src/main/java/org/apache/mahout/classifier/sgd/CrossFoldLearner.java,126,if (k == trackingKey % models.size()) {
integration/src/main/java/org/apache/mahout/text/SequenceFilesFromDirectory.java,96,pathFilter = constructor.newInstance(conf, keyPrefix, options, writer, fs);
core/src/main/java/org/apache/mahout/vectorizer/common/PartialVectorMergeReducer.java,71,VectorWritable vectorWritable = new VectorWritable(vector);
core/src/main/java/org/apache/mahout/vectorizer/common/PartialVectorMergeReducer.java,72,context.write(key, vectorWritable);
math/src/main/java/org/apache/mahout/math/MatrixVectorView.java,177,int[] offset = {row, column};
math/src/main/java/org/apache/mahout/math/MatrixVectorView.java,178,int[] size = {rowStride == 0 ? 1 : rowStride, columnStride == 0 ? 1 : columnStride};
math/src/main/java/org/apache/mahout/math/MatrixVectorView.java,179,return matrix.viewPart(offset, size);
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,296,StringBuilder buf = new StringBuilder();
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,298,buf.append(((NamedVector) v).getName()).append(" = ");
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,300,int nzero = 0;
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,301,Iterator<Vector.Element> iterateNonZero = v.iterateNonZero();
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,302,while (iterateNonZero.hasNext()) {
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,303,iterateNonZero.next();
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,304,nzero++;
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,307,if (nzero < v.size() || bindings != null) {
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,308,buf.append('[');
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,309,for (int i = 0; i < v.size(); i++) {
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,310,double elem = v.get(i);
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,311,if (elem == 0.0) {
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,312,continue;
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,314,String label;
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,315,if (bindings != null && (label = bindings[i]) != null) {
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,316,buf.append(label).append(':');
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,318,buf.append(i).append(':');
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,320,buf.append(String.format(Locale.ENGLISH, "%.3f", elem)).append(", ");
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,323,buf.append('[');
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,324,for (int i = 0; i < v.size(); i++) {
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,325,double elem = v.get(i);
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,326,buf.append(String.format(Locale.ENGLISH, "%.3f", elem)).append(", ");
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,329,if (buf.length() > 1) {
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,330,buf.setLength(buf.length() - 2);
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,332,buf.append(']');
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,333,return buf.toString();
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,44,public class QRDecomposition {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,47,private final Matrix qr;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,50,private final int originalRows;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,51,private final int originalColumns;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,54,private final Vector rDiag;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,67,qr = a.clone();
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,68,originalRows = a.numRows();
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,69,originalColumns = a.numCols();
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,70,rDiag = new DenseVector(originalColumns);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,73,Vector[] QRcolumnsPart = new Vector[originalColumns];
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,74,for (int k = 0; k < originalColumns; k++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,75,QRcolumnsPart[k] = qr.viewColumn(k).viewPart(k, originalRows - k);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,79,for (int k = 0; k < originalColumns; k++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,82,double nrm = 0;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,85,for (int i = k; i < originalRows; i++) { // fixes bug reported by hong.44@osu.edu
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,86,nrm = Algebra.hypot(nrm, qr.getQuick(i, k));
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,90,if (nrm != 0.0) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,92,if (qr.getQuick(k, k) < 0) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,93,nrm = -nrm;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,95,QRcolumnsPart[k].assign(Functions.div(nrm));
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,97,for (int i = k; i < m; i++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,98,QR[i][k] /= nrm;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,102,qr.setQuick(k, k, qr.getQuick(k, k) + 1);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,105,for (int j = k + 1; j < originalColumns; j++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,106,Vector QRcolj = qr.viewColumn(j).viewPart(k, originalRows - k);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,107,double s = QRcolumnsPart[k].dot(QRcolj);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,110,DoubleMatrix1D QRcolj = QR.viewColumn(j).viewPart(k,m-k);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,111,double s = QRcolumnsPart[k].zDotProduct(QRcolumns[j]);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,112,double s = 0.0;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,113,for (int i = k; i < m; i++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,114,s += QR[i][k]*QR[i][j];
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,117,s = -s / qr.getQuick(k, k);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,120,for (int i = k; i < originalRows; i++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,121,qr.setQuick(i, j, qr.getQuick(i, j) + s * qr.getQuick(i, k));
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,126,rDiag.setQuick(k, -nrm);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,136,int columns = Math.min(originalColumns, originalRows);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,137,Matrix q = qr.like(originalRows, columns);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,138,for (int k = columns - 1; k >= 0; k--) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,139,Vector QRcolk = qr.viewColumn(k).viewPart(k, originalRows - k);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,140,q.set(k, k, 1);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,141,for (int j = k; j < columns; j++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,142,if (qr.get(k, k) != 0) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,143,Vector Qcolj = q.viewColumn(j).viewPart(k, originalRows - k);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,144,double s = -QRcolk.dot(Qcolj) / qr.get(k, k);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,145,Qcolj.assign(QRcolk, Functions.plusMult(s));
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,158,int rows = Math.min(originalRows, originalColumns);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,159,Matrix r = qr.like(rows, originalColumns);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,160,for (int i = 0; i < rows; i++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,161,for (int j = 0; j < originalColumns; j++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,162,if (i < j) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,163,r.setQuick(i, j, qr.getQuick(i, j));
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,165,r.setQuick(i, j, rDiag.getQuick(i));
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,167,r.setQuick(i, j, 0);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,180,for (int j = 0; j < originalColumns; j++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,181,if (rDiag.getQuick(j) == 0) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,182,return false;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,185,return true;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,196,if (B.numRows() != originalRows) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,200,int columns = B.numCols();
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,201,Matrix x = B.like(originalColumns, columns);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,210,for (int k = Math.min(originalColumns, originalRows) - 1; k >= 0; k--) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,216,for (int c = 0; c < columns; c++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,228,return String.format(Locale.ENGLISH, "QR(%d,%d,fullRank=%s)", originalColumns, originalRows, hasFullRank());
core/src/main/java/org/apache/mahout/vectorizer/EncodingMapper.java,48,private boolean sequentialVecs;
core/src/main/java/org/apache/mahout/vectorizer/EncodingMapper.java,56,sequentialVecs = conf.getBoolean(USE_SEQUENTIAL, false);
core/src/main/java/org/apache/mahout/vectorizer/EncodingMapper.java,75,if (sequentialVecs) {
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,35,import org.apache.mahout.common.ClassUtils;
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/CollocDriver.java,36,import org.apache.mahout.common.ClassUtils;
core/src/main/java/org/apache/mahout/vectorizer/document/SequenceFileTokenizerMapper.java,29,import org.apache.mahout.common.ClassUtils;
integration/src/main/java/org/apache/mahout/text/MailArchivesClusteringAnalyzer.java,22,import java.util.Set;
integration/src/main/java/org/apache/mahout/utils/vectors/VectorHelper.java,97,Collections.sort(entries, Ordering.natural().reverse());
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,136,new SequenceFileDirIterator<IntWritable,VectorWritable>(new Path(rowPath, "*"),
core/src/main/java/org/apache/mahout/classifier/naivebayes/AbstractNaiveBayesClassifier.java,57,Vector score = model.createScoringVector();
core/src/main/java/org/apache/mahout/classifier/naivebayes/AbstractNaiveBayesClassifier.java,58,for (int label = 0; label < model.numLabels(); label++) {
core/src/main/java/org/apache/mahout/classifier/naivebayes/AbstractNaiveBayesClassifier.java,59,score.set(label, getScoreForLabelInstance(label, instance));
core/src/main/java/org/apache/mahout/classifier/naivebayes/AbstractNaiveBayesClassifier.java,61,return score;
math/src/main/java/org/apache/mahout/math/solver/LSMR.java,294,int istop = 0;
math/src/main/java/org/apache/mahout/math/solver/LSMR.java,425,istop = 7;
math/src/main/java/org/apache/mahout/math/solver/LSMR.java,429,istop = 6;
math/src/main/java/org/apache/mahout/math/solver/LSMR.java,433,istop = 5;
math/src/main/java/org/apache/mahout/math/solver/LSMR.java,437,istop = 4;
math/src/main/java/org/apache/mahout/math/solver/LSMR.java,444,istop = 3;
math/src/main/java/org/apache/mahout/math/solver/LSMR.java,448,istop = 2;
math/src/main/java/org/apache/mahout/math/solver/LSMR.java,452,istop = 1;
math/src/main/java/org/apache/mahout/math/solver/LSMR.java,457,throw new IllegalStateException(String.format("bad code match %d vs %d", istop, stop.ordinal()));
math/src/main/java/org/apache/mahout/math/solver/LSMR.java,463,if ((n <= 40) || (iteration <= 10) || (iteration >= iterationLimit - 10) || ((iteration % 10) == 0) || (test3 <= 1.1 * ctol) || (test2 <= 1.1 * aTolerance) || (test1 <= 1.1 * rtol) || (istop != 0)) {
math/src/main/java/org/apache/mahout/math/solver/LSMR.java,456,if (stop != StopCode.CONTINUE && stop.ordinal() != istop + 1) {
core/src/main/java/org/apache/mahout/common/IntPairWritable.java,34,implements WritableComparable<BinaryComparable>, Serializable, Cloneable {
core/src/main/java/org/apache/mahout/common/IntPairWritable.java,148,public static final class Comparator extends WritableComparator implements Serializable {
core/src/main/java/org/apache/mahout/math/VarLongWritable.java,27,public class VarLongWritable implements WritableComparable<VarLongWritable>, Cloneable {
core/src/main/java/org/apache/mahout/math/VarLongWritable.java,62,public VarLongWritable clone() {
core/src/main/java/org/apache/mahout/math/VarLongWritable.java,63,return new VarLongWritable(value);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/GramKeyGroupComparator.java,23,import java.io.Serializable;
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/GramKeyGroupComparator.java,28,class GramKeyGroupComparator extends WritableComparator implements Serializable {
math/src/main/java/org/apache/mahout/math/ssvd/EigenSolverWrapper.java,19,import org.apache.commons.math.linear.Array2DRowRealMatrix;
math/src/main/java/org/apache/mahout/math/ssvd/EigenSolverWrapper.java,20,import org.apache.commons.math.linear.EigenDecomposition;
math/src/main/java/org/apache/mahout/math/ssvd/EigenSolverWrapper.java,21,import org.apache.commons.math.linear.EigenDecompositionImpl;
math/src/main/java/org/apache/mahout/math/ssvd/EigenSolverWrapper.java,22,import org.apache.commons.math.linear.RealMatrix;
math/src/main/java/org/apache/mahout/math/ssvd/EigenSolverWrapper.java,47,EigenDecomposition evd2 = new EigenDecompositionImpl(
math/src/main/java/org/apache/mahout/math/ssvd/EigenSolverWrapper.java,48,new Array2DRowRealMatrix(bbt), 0);
integration/src/main/java/org/apache/mahout/cf/taste/web/RecommenderServlet.java,140,writer.print("\"},");
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/TreeClusteringRecommender2.java,361,if (similarity > queue.get(queue.size() - 1).getSimilarity()) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,25,import org.apache.hadoop.fs.FileStatus;
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,65,String.valueOf(false));
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,156,if (computeU) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,157,FileStatus[] uFiles = fs.globStatus(new Path(solver.getUPath()));
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,158,if (uFiles != null) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,159,for (FileStatus uf : uFiles) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,160,fs.rename(uf.getPath(), getOutputPath());
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,164,if (computeV) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,165,FileStatus[] vFiles = fs.globStatus(new Path(solver.getVPath()));
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,166,if (vFiles != null) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,167,for (FileStatus vf : vFiles) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,168,fs.rename(vf.getPath(), getOutputPath());
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,256,return endOfData();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,258,element.advanceIndex();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,259,return element;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,300,if (index > values.getIndices()[nextOffset]) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,311,if (index == values.getIndices()[nextOffset]) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,314,return OrderedIntDoubleMapping.DEFAULT_VALUE;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,325,if (index == values.getIndices()[nextOffset]) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,159,public double dotSelf() {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,161,Iterator<Element> iter = iterateNonZero();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,162,while (iter.hasNext()) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,163,double value = iter.next().get();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,219,public Vector logNormalize(double power, double normLength) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,291,return lengthSquared + v.getLengthSquared() - 2 * this.dot(v);
math/src/main/java/org/apache/mahout/math/AbstractVector.java,293,Vector randomlyAccessed;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,296,if (lengthSquared >= 0.0) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,298,randomlyAccessed = this;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,302,randomlyAccessed = v;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,305,while (it.hasNext()) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,306,Element e = it.next();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,307,double value = e.get();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,581,return size;
math/src/main/java/org/apache/mahout/math/DenseVector.java,98,public double dotSelf() {
math/src/main/java/org/apache/mahout/math/DenseVector.java,120,lengthSquared = -1.0;
math/src/main/java/org/apache/mahout/math/DenseVector.java,126,this.lengthSquared = -1;
math/src/main/java/org/apache/mahout/math/DenseVector.java,148,lengthSquared = -1;
math/src/main/java/org/apache/mahout/math/DenseVector.java,201,public double getLengthSquared() {
math/src/main/java/org/apache/mahout/math/DenseVector.java,202,if (lengthSquared >= 0.0) {
math/src/main/java/org/apache/mahout/math/DenseVector.java,203,return lengthSquared;
math/src/main/java/org/apache/mahout/math/DenseVector.java,206,double result = 0.0;
math/src/main/java/org/apache/mahout/math/DenseVector.java,207,for (double value : values) {
math/src/main/java/org/apache/mahout/math/DenseVector.java,208,result += value * value;
math/src/main/java/org/apache/mahout/math/DenseVector.java,211,lengthSquared = result;
math/src/main/java/org/apache/mahout/math/DenseVector.java,212,return result;
math/src/main/java/org/apache/mahout/math/DenseVector.java,284,lengthSquared = -1;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,135,lengthSquared = -1.0;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,228,lengthSquared = -1;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,189,lengthSquared = -1;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,288,lengthSquared = -1;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,324,lengthSquared = -1;
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/BtJob.java,134,qRowValue.set(qRow);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/BtJob.java,137,outputQRow(key, qRowValue);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDSolver.java,162,public void setcUHalfSigma(boolean cUHat) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDSolver.java,163,this.cUHalfSigma = cUHat;
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDSolver.java,166,public void setcVHalfSigma(boolean cVHat) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDSolver.java,167,this.cVHalfSigma = cVHat;
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/UJob.java,49,private static final String PROP_U_HALFSIGMA = "ssvd.u.halfsigma";
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/UJob.java,83,if (uHalfSigma) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/UJob.java,84,job.getConfiguration().set(PROP_U_HALFSIGMA, "y");
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/UJob.java,146,if (context.getConfiguration().get(PROP_U_HALFSIGMA) != null) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/VJob.java,44,private static final String PROP_V_HALFSIGMA = "ssvd.v.halfsigma";
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/VJob.java,79,if (vHalfSigma) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/VJob.java,80,job.getConfiguration().set(PROP_V_HALFSIGMA, "y");
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,24,import com.google.common.collect.Lists;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,25,import com.google.common.collect.Maps;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,51,private final Map<Integer, List<VectorWritable>> representativePoints;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,52,private final Map<Integer, Double> stDevs = Maps.newHashMap();
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,55,private boolean pruned;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,67,public CDbwEvaluator(Map<Integer, List<VectorWritable>> representativePoints,
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,68,List<Cluster> clusters,
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,69,DistanceMeasure measure) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,87,measure = ClassUtils.instantiateAs(conf.get(RepresentativePointsDriver.DISTANCE_MEASURE_KEY),
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,88,DistanceMeasure.class);
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,137,private boolean invalidCluster(Cluster clusterI) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,138,List<VectorWritable> repPts = representativePoints.get(clusterI.getId());
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,139,if (repPts.size() < 2) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,140,return true;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,142,for (VectorWritable vw : repPts) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,143,Vector vector = vw.get();
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,144,if (!vector.equals(clusterI.getCenter())) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,145,return false;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,148,return true;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,151,private void pruneInvalidClusters() {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,152,if (pruned) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,153,return;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,155,for (Iterator<Cluster> it = clusters.iterator(); it.hasNext();) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,156,Cluster cluster = it.next();
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,157,if (invalidCluster(cluster)) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,158,log.info("Pruning cluster Id={}", cluster.getId());
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,159,it.remove();
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,160,representativePoints.remove(cluster.getId());
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,163,pruned = true;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,174,double interDensity(Vector uIJ, int cI, int cJ) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,178,Double stdevI = stDevs.get(cI);
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,179,Double stdevJ = stDevs.get(cJ);
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,182,double avgStd = (stdevI + stdevJ) / 2.0;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,184,if (measure.distance(uIJ, vwI.get()) <= avgStd) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,189,if (measure.distance(uIJ, vwJ.get()) <= avgStd) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,205,pruneInvalidClusters();
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,217,pruneInvalidClusters();
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,226,double sumI = 0.0;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,241,sumI += sumJ / r;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,243,return sumI / c;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,253,public double separation() {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,254,pruneInvalidClusters();
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,255,double minDistanceSum = 0;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,259,for (int j = 0; j < clusters.size(); j++) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,260,if (i == j) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,261,continue;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,267,for (VectorWritable aRepI : closRepI) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,268,for (VectorWritable aRepJ : closRepJ) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,275,minDistanceSum += minDistance;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,278,return minDistanceSum / (1.0 + interClusterDensity());
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,287,public double interClusterDensity() {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,288,pruneInvalidClusters();
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,289,double sum = 0.0;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,291,for (int i = 0; i < clusters.size(); i++) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,292,Integer cI = clusters.get(i).getId();
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,293,List<VectorWritable> repI = representativePoints.get(cI);
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,294,for (int j = 1; j < clusters.size(); j++) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,295,Integer cJ = clusters.get(j).getId();
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,296,if (i == j) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,297,continue;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,299,List<VectorWritable> repJ = representativePoints.get(cJ);
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,300,double minDistance = Double.MAX_VALUE; // the distance between the closest representative points
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,301,Vector uIJ = null; // the midpoint between the closest representative points
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,303,for (VectorWritable aRepI : repI) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,304,for (VectorWritable aRepJ : repJ) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,305,Vector closRepI = aRepI.get();
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,306,Vector closRepJ = aRepJ.get();
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,307,double distance = measure.distance(closRepI, closRepJ);
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,308,if (distance < minDistance) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,310,minDistance = distance;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,311,uIJ = closRepI.plus(closRepJ).divide(2);
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,315,double stDevI = stDevs.get(cI);
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,316,double stDevJ = stDevs.get(cJ);
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,317,double interDensity = interDensity(uIJ, cI, cJ);
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,318,double stdSum = stDevI + stDevJ;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,319,double density = 0.0;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,320,if (stdSum > 0.0) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,321,density = minDistance * interDensity / stdSum;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,324,if (log.isDebugEnabled()) {
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,325,log.debug("minDistance[{},{}]={}", new Object[] {cI, cJ, minDistance});
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,326,log.debug("stDev[{}]={}", cI, stDevI);
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,327,log.debug("stDev[{}]={}", cJ, stDevJ);
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,328,log.debug("interDensity[{},{}]={}", new Object[] {cI, cJ, interDensity});
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,329,log.debug("density[{},{}]={}", new Object[] {cI, cJ, density});
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,332,sum += density;
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,335,log.debug("interClusterDensity={}", sum);
integration/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java,336,return sum;
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,24,import com.google.common.collect.Lists;
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,38,public class ClusterEvaluator {
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,42,private final Map<Integer, List<VectorWritable>> representativePoints;
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,48,private boolean pruned;
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,60,public ClusterEvaluator(Map<Integer, List<VectorWritable>> representativePoints,
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,61,List<Cluster> clusters, DistanceMeasure measure) {
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,76,measure = ClassUtils.instantiateAs(conf.get(RepresentativePointsDriver.DISTANCE_MEASURE_KEY), DistanceMeasure.class);
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,105,private boolean invalidCluster(Cluster clusterI) {
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,106,List<VectorWritable> repPts = representativePoints.get(clusterI.getId());
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,107,if (repPts.size() < 2) {
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,108,return true;
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,110,for (VectorWritable vw : repPts) {
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,111,Vector vector = vw.get();
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,112,if (!vector.equals(clusterI.getCenter())) {
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,113,return false;
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,116,return true;
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,119,private void pruneInvalidClusters() {
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,120,if (pruned) {
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,121,return;
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,123,for (Iterator<Cluster> it = clusters.iterator(); it.hasNext();) {
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,124,Cluster cluster = it.next();
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,125,if (invalidCluster(cluster)) {
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,126,log.info("Pruning cluster Id={}", cluster.getId());
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,127,it.remove();
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,128,representativePoints.remove(cluster.getId());
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,131,pruned = true;
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,140,pruneInvalidClusters();
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,141,double max = 0;
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,142,double min = Double.MAX_VALUE;
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,145,for (int i = 0; i < clusters.size(); i++) {
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,146,Cluster clusterI = clusters.get(i);
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,147,for (int j = i + 1; j < clusters.size(); j++) {
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,148,Cluster clusterJ = clusters.get(j);
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,149,double d = measure.distance(clusterI.getCenter(), clusterJ.getCenter());
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,157,log.info("Inter-Cluster Density = {}", density);
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,168,pruneInvalidClusters();
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,172,double max = 0;
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,173,double min = Double.MAX_VALUE;
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,178,double d = measure.distance(repPoints.get(i).get(), repPoints.get(j).get());
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,186,avgDensity += density;
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,189,avgDensity = clusters.isEmpty() ? 0 : avgDensity / clusters.size();
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,190,log.info("Intra-Cluster Density = {}", avgDensity);
integration/src/main/java/org/apache/mahout/clustering/evaluation/ClusterEvaluator.java,191,return avgDensity;
math/src/main/java/org/apache/mahout/math/MatrixView.java,96,if (offset[ROW] < ROW) {
math/src/main/java/org/apache/mahout/math/MatrixView.java,97,throw new IndexException(offset[ROW], ROW);
math/src/main/java/org/apache/mahout/math/MatrixView.java,102,if (offset[COL] < ROW) {
math/src/main/java/org/apache/mahout/math/MatrixView.java,103,throw new IndexException(offset[COL], ROW);
math/src/main/java/org/apache/mahout/math/MatrixView.java,108,int[] origin = offset.clone();
integration/src/main/java/org/apache/mahout/cf/taste/impl/model/jdbc/AbstractJDBCDataModel.java,481,stmt = conn.prepareStatement(getPreferenceSQL, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFIterator.java,63,line = line.substring(1, line.length() - 1);
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFIterator.java,71,result.setQuick(idx, model.getValue(data, idx));
integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFIterator.java,77,result.setQuick(i, model.getValue(splits[i], i));
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,86,sumActual += actual;
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,87,sumActualSquared += actual * actual;
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,88,sumResult += result;
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,89,sumResultSquared += result * result;
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,90,double absolute = Math.abs(actual - result);
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,91,sumAbsolute += absolute;
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,92,sumAbsoluteSquared += absolute * absolute;
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,95,double varActual = sumActualSquared - sumActual * sumActual / results.size();
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,96,double varResult = sumResultSquared - sumResult * sumResult / results.size();
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,97,double varAbsolute = sumResultSquared - sumActual * sumResult /  results.size();
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,99,double correlation;
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,100,if (varActual * varResult <= 0) {
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,101,correlation = 0.0;
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,103,correlation = varAbsolute / Math.sqrt(varActual * varResult);
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,112,NumberFormat decimalFormatter = new DecimalFormat("0.####");
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,114,returnString.append(StringUtils.rightPad("Correlation coefficient", 40)).append(": ").append(
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,115,StringUtils.leftPad(decimalFormatter.format(correlation), 10)).append('\n');
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,116,returnString.append(StringUtils.rightPad("Mean absolute error", 40)).append(": ").append(
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,117,StringUtils.leftPad(decimalFormatter.format(sumAbsolute / results.size()), 10)).append('\n');
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,118,returnString.append(StringUtils.rightPad("Root mean squared error", 40)).append(": ").append(
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,119,StringUtils.leftPad(decimalFormatter.format(Math.sqrt(sumAbsoluteSquared / results.size())),
core/src/main/java/org/apache/mahout/classifier/RegressionResultAnalyzer.java,120,10)).append('\n');
core/src/main/java/org/apache/mahout/classifier/df/DecisionForest.java,64,public void classify(Data data, double[] predictions) {
core/src/main/java/org/apache/mahout/classifier/df/DecisionForest.java,73,predictions[index] = tree.classify(data.get(index));
core/src/main/java/org/apache/mahout/classifier/df/DecisionForest.java,91,if (prediction != -1) {
core/src/main/java/org/apache/mahout/classifier/df/DecisionForest.java,96,return sum / cnt;
core/src/main/java/org/apache/mahout/classifier/df/DecisionForest.java,101,if (prediction != -1) {
core/src/main/java/org/apache/mahout/classifier/df/DecisionForest.java,107,return -1; // no prediction available
core/src/main/java/org/apache/mahout/classifier/df/builder/DecisionTreeBuilder.java,123,return new Leaf(-1);
core/src/main/java/org/apache/mahout/classifier/df/data/Dataset.java,188,if (code == -1) {
core/src/main/java/org/apache/mahout/classifier/df/node/CategoricalNode.java,36,public CategoricalNode() { }
core/src/main/java/org/apache/mahout/classifier/df/node/CategoricalNode.java,49,return -1;
examples/src/main/java/org/apache/mahout/classifier/df/BreimanExample.java,115,double[] predictions = new double[test.size()];
examples/src/main/java/org/apache/mahout/classifier/df/BreimanExample.java,118,sumTestErrM += ErrorEstimate.errorRate(testLabels, predictions);
examples/src/main/java/org/apache/mahout/classifier/df/BreimanExample.java,121,sumTestErrOne += ErrorEstimate.errorRate(testLabels, predictions);
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,23,import org.apache.commons.cli.Options;
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,48,Options ops = new Options();
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,49,new GenericOptionsParser(new Configuration(), ops, new String[0]);
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,50,org.apache.commons.cli.HelpFormatter fmt = new org.apache.commons.cli.HelpFormatter();
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,51,fmt.printHelp("<command> [Generic Options] [Job-Specific Options]",
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,58,formatter.printHelp();
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,60,formatter.printFooter();
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,62,pw.flush();
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,66,Options ops = new Options();
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,67,new GenericOptionsParser(new Configuration(), ops, new String[0]);
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,68,org.apache.commons.cli.HelpFormatter fmt = new org.apache.commons.cli.HelpFormatter();
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,69,fmt.printHelp("<command> [Generic Options] [Job-Specific Options]",
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,78,pw.flush();
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,45,private Job() {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,56,DistributionDescription description =
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,57,new DistributionDescription(GaussianClusterDistribution.class.getName(),
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,58,RandomAccessSparseVector.class.getName(),
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,59,null,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,60,60);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,66,public int run(String[] args) throws Exception{
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,108,DistributionDescription description =
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,109,new DistributionDescription(modelFactory, modelPrototype, distanceMeasure, 60);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,130,public static void run(Path input,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,131,Path output,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,132,DistributionDescription description,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,133,int numModels,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,134,int maxIterations,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,135,double alpha0,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,136,boolean emitMostLikely,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,138,throws Exception{
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,152,ClusterDumper clusterDumper =
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,153,new ClusterDumper(new Path(output, "clusters-" + maxIterations), new Path(output, "clusteredPoints"));
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,166,private static void printClusters(Iterable<List<DirichletCluster>> clusters, int significant) {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,167,int row = 0;
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,168,StringBuilder result = new StringBuilder(100);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,169,for (List<DirichletCluster> r : clusters) {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,170,result.append("sample=").append(row++).append("]= ");
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,171,for (int k = 0; k < r.size(); k++) {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,172,Model<VectorWritable> model = r.get(k).getModel();
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,173,if (model.count() > significant) {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,174,int total = (int) r.get(k).getTotalCount();
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,175,result.append('m').append(k).append('(').append(total).append(')').append(model).append(", ");
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,178,result.append('\n');
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,180,result.append('\n');
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,181,log.info(result.toString());
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,20,import java.io.IOException;
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,26,import org.apache.hadoop.fs.FileSystem;
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,29,import org.apache.mahout.clustering.Cluster;
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,52,private Job() {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,64,run(conf, new Path("testdata"), output,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,65,new EuclideanDistanceMeasure(), 80, 55, 10, (float) 2, 0.5);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,70,public int run(String[] args) throws Exception{
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,79,addOption(M_OPTION, M_OPTION,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,93,double convergenceDelta = Double
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,94,.parseDouble(getOption(DefaultOptionCreator.CONVERGENCE_DELTA_OPTION));
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,95,int maxIterations = Integer
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,96,.parseInt(getOption(DefaultOptionCreator.MAX_ITERATIONS_OPTION));
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,99,addOption(new DefaultOptionBuilder().withLongName(M_OPTION).withRequired(
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,100,true).withArgument(
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,102,.create()).withDescription(
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,104,.withShortName(M_OPTION).create());
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,111,run(getConf(), input, output, measure, t1, t2, maxIterations, fuzziness,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,112,convergenceDelta);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,119,private static Path finalClusterPath(Configuration conf, Path output,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,120,int maxIterations) throws IOException {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,121,FileSystem fs = FileSystem.get(conf);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,122,for (int i = maxIterations; i >= 0; i--) {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,123,Path clusters = new Path(output, "clusters-" + i);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,124,if (fs.exists(clusters)) {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,125,return clusters;
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,128,return null;
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,157,public static void run(Configuration conf,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,158,Path input,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,159,Path output,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,160,DistanceMeasure measure,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,161,double t1,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,162,double t2,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,163,int maxIterations,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,164,float fuzziness,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,166,throws Exception{
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,167,Path directoryContainingConvertedInput = new Path(output,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,168,DIRECTORY_CONTAINING_CONVERTED_INPUT);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,170,InputDriver.runJob(input, directoryContainingConvertedInput,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,173,CanopyDriver.run(new Configuration(), directoryContainingConvertedInput,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,176,FuzzyKMeansDriver.run(directoryContainingConvertedInput, new Path(output,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,177,Cluster.INITIAL_CLUSTERS_DIR), output, measure, convergenceDelta,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,178,maxIterations, fuzziness, true, true, 0.0, false);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,180,ClusterDumper clusterDumper = new ClusterDumper(finalClusterPath(conf,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,181,output, maxIterations), new Path(output, "clusteredPoints"));
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,20,import java.io.IOException;
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,24,import org.apache.hadoop.fs.FileSystem;
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,49,private Job() {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,66,public int run(String[] args) throws Exception{
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,88,double convergenceDelta = Double
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,89,.parseDouble(getOption(DefaultOptionCreator.CONVERGENCE_DELTA_OPTION));
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,90,int maxIterations = Integer
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,91,.parseInt(getOption(DefaultOptionCreator.MAX_ITERATIONS_OPTION));
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,97,int k = Integer
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,98,.parseInt(getOption(DefaultOptionCreator.NUM_CLUSTERS_OPTION));
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,103,run(getConf(), input, output, measure, t1, t2, convergenceDelta,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,104,maxIterations);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,133,public static void run(Configuration conf, Path input, Path output,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,135,throws Exception{
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,136,Path directoryContainingConvertedInput = new Path(output,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,137,DIRECTORY_CONTAINING_CONVERTED_INPUT);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,139,InputDriver.runJob(input, directoryContainingConvertedInput,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,143,clusters = RandomSeedGenerator.buildRandom(conf,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,144,directoryContainingConvertedInput, clusters, k, measure);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,146,KMeansDriver.run(conf, directoryContainingConvertedInput, clusters, output,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,149,ClusterDumper clusterDumper = new ClusterDumper(finalClusterPath(conf,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,150,output, maxIterations), new Path(output, "clusteredPoints"));
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,182,public static void run(Configuration conf, Path input, Path output,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,183,DistanceMeasure measure, double t1, double t2, double convergenceDelta,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,185,throws Exception{
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,186,Path directoryContainingConvertedInput = new Path(output,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,187,DIRECTORY_CONTAINING_CONVERTED_INPUT);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,189,InputDriver.runJob(input, directoryContainingConvertedInput,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,192,CanopyDriver.run(conf, directoryContainingConvertedInput, output, measure,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,195,KMeansDriver.run(conf, directoryContainingConvertedInput, new Path(output,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,196,Cluster.INITIAL_CLUSTERS_DIR), output, measure, convergenceDelta,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,199,ClusterDumper clusterDumper = new ClusterDumper(finalClusterPath(conf,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,200,output, maxIterations), new Path(output, "clusteredPoints"));
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,207,private static Path finalClusterPath(Configuration conf, Path output,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,208,int maxIterations) throws IOException {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,209,FileSystem fs = FileSystem.get(conf);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,210,for (int i = maxIterations; i >= 0; i--) {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,211,Path clusters = new Path(output, "clusters-" + i);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,212,if (fs.exists(clusters)) {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,213,return clusters;
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,216,return null;
integration/src/main/java/org/apache/mahout/clustering/conversion/meanshift/InputDriver.java,36,import org.apache.mahout.clustering.meanshift.MeanShiftCanopy;
integration/src/main/java/org/apache/mahout/clustering/conversion/meanshift/InputDriver.java,85,job.setOutputValueClass(MeanShiftCanopy.class);
integration/src/main/java/org/apache/mahout/clustering/conversion/meanshift/InputMapper.java,24,import com.google.common.collect.Lists;
integration/src/main/java/org/apache/mahout/clustering/conversion/meanshift/InputMapper.java,33,public class InputMapper extends Mapper<LongWritable, Text, Text, MeanShiftCanopy> {
integration/src/main/java/org/apache/mahout/clustering/conversion/meanshift/InputMapper.java,56,MeanShiftCanopy canopy = new MeanShiftCanopy(point, nextCanopyId++, new EuclideanDistanceMeasure());
integration/src/main/java/org/apache/mahout/clustering/conversion/meanshift/InputMapper.java,57,context.write(new Text(), canopy);
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java,84,writer.write(" : [");
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java,86,writer.write(entry.getKey().toString());
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java,87,writer.write("=");
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java,88,writer.write(entry.getValue().toString());
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java,90,writer.write("]");
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java,42,public ClusterDumperWriter(Writer writer,
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java,43,Map<Integer, List<WeightedVectorWritable>> clusterIdToPoints,
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java,44,DistanceMeasure measure,
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java,45,int numTopFeatures,
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java,46,String[] dictionary,
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java,47,int subString) {
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java,74,Map<Integer, List<WeightedVectorWritable>> clusterIdToPoints = getClusterIdToPoints();
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java,78,for (Iterator<WeightedVectorWritable> iterator = points.iterator(); iterator.hasNext(); ) {
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java,83,Map<Text, Text> map = tmp.getProperties();
integration/src/main/java/org/apache/mahout/utils/clustering/ClusterDumperWriter.java,85,for (Map.Entry<Text, Text> entry : map.entrySet()) {
core/src/main/java/org/apache/mahout/common/distance/CosineDistanceMeasure.java,90,double lengthSquaredv =  v.getLengthSquared();
core/src/main/java/org/apache/mahout/classifier/naivebayes/ComplementaryNaiveBayesClassifier.java,25,public class ComplementaryNaiveBayesClassifier extends AbstractNaiveBayesClassifier {
core/src/main/java/org/apache/mahout/classifier/naivebayes/BayesUtils.java,81,Vector perlabelThetaNormalizer = null;
core/src/main/java/org/apache/mahout/classifier/naivebayes/BayesUtils.java,82,for (Pair<Text,VectorWritable> entry : new SequenceFileDirIterable<Text,VectorWritable>(
core/src/main/java/org/apache/mahout/classifier/naivebayes/ComplementaryNaiveBayesClassifier.java,34,double numerator = model.featureWeight(feature) - model.weight(label, feature) + model.alphaI();
core/src/main/java/org/apache/mahout/classifier/naivebayes/ComplementaryNaiveBayesClassifier.java,35,double denominator =  model.totalWeightSum() - model.labelWeight(label) + model.alphaI() * model.numFeatures();
core/src/main/java/org/apache/mahout/classifier/naivebayes/ComplementaryNaiveBayesClassifier.java,37,return Math.log(numerator / denominator);
core/src/main/java/org/apache/mahout/classifier/naivebayes/NaiveBayesModel.java,64,return perlabelThetaNormalizer.get(label);
core/src/main/java/org/apache/mahout/classifier/naivebayes/NaiveBayesModel.java,148,Preconditions.checkArgument(perlabelThetaNormalizer.getNumNondefaultElements() > 0,
core/src/main/java/org/apache/mahout/classifier/naivebayes/StandardNaiveBayesClassifier.java,32,double numerator = model.weight(label, feature) + model.alphaI();
core/src/main/java/org/apache/mahout/classifier/naivebayes/StandardNaiveBayesClassifier.java,33,double denominator = model.labelWeight(label) + model.alphaI() * model.numFeatures();
core/src/main/java/org/apache/mahout/classifier/naivebayes/StandardNaiveBayesClassifier.java,35,return -Math.log(numerator / denominator);
core/src/main/java/org/apache/mahout/classifier/naivebayes/training/ComplementaryThetaTrainer.java,20,import org.apache.mahout.math.Vector;
core/src/main/java/org/apache/mahout/classifier/naivebayes/training/ComplementaryThetaTrainer.java,32,double sigmaK = labelWeight(label);
core/src/main/java/org/apache/mahout/classifier/naivebayes/training/ComplementaryThetaTrainer.java,36,double numerator = featureWeight(e.index()) - e.get() + alphaI();
core/src/main/java/org/apache/mahout/classifier/naivebayes/training/ComplementaryThetaTrainer.java,38,double weight = Math.log(numerator / denominator);
core/src/main/java/org/apache/mahout/classifier/naivebayes/training/ComplementaryThetaTrainer.java,39,updatePerLabelThetaNormalizer(label, weight);
core/src/main/java/org/apache/mahout/classifier/naivebayes/training/TrainNaiveBayesJob.java,68,addOption("alphaI", "a", "smoothing parameter", String.valueOf(1.0f));
core/src/main/java/org/apache/mahout/classifier/naivebayes/training/TrainNaiveBayesJob.java,69,addOption(buildOption("trainComplementary", "c", "train complementary?", false, false, String.valueOf(false)));
core/src/main/java/org/apache/mahout/classifier/naivebayes/AbstractNaiveBayesClassifier.java,47,return result / model.thetaNormalizer(label);
core/src/main/java/org/apache/mahout/classifier/naivebayes/training/ComplementaryThetaTrainer.java,31,public void train(int label, Vector instance) {
core/src/main/java/org/apache/mahout/classifier/naivebayes/training/ComplementaryThetaTrainer.java,33,Iterator<Vector.Element> it = instance.iterateNonZero();
core/src/main/java/org/apache/mahout/classifier/naivebayes/training/ComplementaryThetaTrainer.java,37,double denominator = totalWeightSum() - sigmaK + alphaI() * numFeatures();
core/src/main/java/org/apache/mahout/classifier/naivebayes/training/StandardThetaTrainer.java,29,public void train(int label, Vector instance) {
core/src/main/java/org/apache/mahout/classifier/naivebayes/BayesUtils.java,119,String theLabel = ((Pair<?,?>) label).getFirst().toString();
core/src/main/java/org/apache/mahout/classifier/naivebayes/training/ThetaMapper.java,43,Map<String,Vector> scores = BayesUtils.readScoresFromCache(conf);
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,63,private RepresentativePointsDriver() {
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,94,public static void run(Configuration conf,
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,95,Path clustersIn,
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,96,Path clusteredPointsIn,
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,97,Path output,
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,98,DistanceMeasure measure,
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,99,int numIterations,
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,101,throws IOException, InterruptedException, ClassNotFoundException {
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,138,private static void runIteration(Configuration conf,
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,139,Path clusteredPointsIn,
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,140,Path stateIn,
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,141,Path stateOut,
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,142,DistanceMeasure measure,
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,144,throws IOException, InterruptedException, ClassNotFoundException {
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,165,private static void runIterationSeq(Configuration conf,
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,166,Path clusteredPointsIn,
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,167,Path stateIn,
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,168,Path stateOut,
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,169,DistanceMeasure measure) throws IOException {
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,171,Map<Integer, List<VectorWritable>> repPoints = RepresentativePointsMapper.getRepresentativePoints(conf, stateIn);
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,172,Map<Integer, WeightedVectorWritable> mostDistantPoints = Maps.newHashMap();
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,174,for (Pair<IntWritable,WeightedVectorWritable> record :
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,175,new SequenceFileDirIterable<IntWritable,WeightedVectorWritable>(
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,176,clusteredPointsIn, PathType.LIST, PathFilters.logsCRCFilter(), null, true, conf)) {
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,177,RepresentativePointsMapper.mapPoint(
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,178,record.getFirst(), record.getSecond(), measure, repPoints, mostDistantPoints);
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,181,SequenceFile.Writer writer = new SequenceFile.Writer(fs,
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,182,conf,
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,183,new Path(stateOut, "part-m-" + part++),
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,184,IntWritable.class,
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,185,VectorWritable.class);
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,187,for (Entry<Integer, List<VectorWritable>> entry : repPoints.entrySet()) {
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,195,writer = new SequenceFile.Writer(fs, conf,
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,196,new Path(stateOut, "part-m-" + part++), IntWritable.class, VectorWritable.class);
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,198,for (Map.Entry<Integer, WeightedVectorWritable> entry : mostDistantPoints.entrySet()) {
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,219,private static void runIterationMR(Configuration conf,
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,220,Path input,
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,221,Path stateIn,
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,222,Path stateOut,
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,224,throws IOException, InterruptedException, ClassNotFoundException {
core/src/main/java/org/apache/mahout/cf/taste/impl/eval/IRStatisticsImpl.java,38,Preconditions.checkArgument(fallOut >= 0.0 && fallOut <= 1.0, "Illegal nDCG: " + ndcg);
core/src/main/java/org/apache/mahout/cf/taste/impl/eval/IRStatisticsImpl.java,39,Preconditions.checkArgument(reach >= 0.0 && reach <= 1.0, "Illegal reach: " + ndcg);
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,26,import org.apache.mahout.math.matrix.DoubleMatrix1D;
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,27,import org.apache.mahout.math.matrix.DoubleMatrix2D;
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,28,import org.apache.mahout.math.matrix.linalg.EigenvalueDecomposition;
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,143,EigenvalueDecomposition decomp = new EigenvalueDecomposition(triDiag);
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,145,DoubleMatrix2D eigenVects = decomp.getV();
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,146,DoubleMatrix1D eigenVals = decomp.getRealEigenvalues();
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,152,DoubleMatrix1D ejCol = eigenVects.viewColumn(i - row - 1);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,2,Copyright � 1999 CERN - European Organization for Nuclear Research.
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,3,Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,4,is hereby granted without fee, provided that the above copyright notice appear in all copies and
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,5,that both that copyright notice and this permission notice appear in supporting documentation.
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,6,CERN makes no representations about the suitability of this software for any purpose.
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,7,It is provided "as is" without expressed or implied warranty.
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,9,package org.apache.mahout.math.matrix.linalg;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,11,import org.apache.mahout.math.Matrix;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,12,import org.apache.mahout.math.MatrixSlice;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,13,import org.apache.mahout.math.Vector;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,14,import org.apache.mahout.math.matrix.DoubleMatrix1D;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,15,import org.apache.mahout.math.matrix.DoubleMatrix2D;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,16,import org.apache.mahout.math.matrix.impl.DenseDoubleMatrix1D;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,17,import org.apache.mahout.math.matrix.impl.DenseDoubleMatrix2D;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,19,import java.io.Serializable;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,21,import static org.apache.mahout.math.Algebra.hypot;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,22,import static org.apache.mahout.math.matrix.linalg.Property.checkSquare;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,26,public final class EigenvalueDecomposition implements Serializable {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,29,private final int n;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,32,private final double[] d;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,33,private final double[] e;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,36,private final double[][] V;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,39,private double[][] H;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,42,private double[] ort;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,46,private double cdivr;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,47,private double cdivi;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,49,public EigenvalueDecomposition(double[][] v) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,50,if(v.length != v[0].length) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,51,throw new IllegalArgumentException("Matrix must be square");
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,53,n = v.length;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,54,V = v;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,55,d = new double[n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,56,e = new double[n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,58,if (isSymmetric(v)) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,60,tred2();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,63,tql2();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,66,H = new double[n][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,67,ort = new double[n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,69,for (int j = 0; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,70,for (int i = 0; i < n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,71,H[i][j] = v[i][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,76,orthes();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,79,hqr2();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,83,public EigenvalueDecomposition(Matrix A) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,84,this(toArray(A));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,87,private static double[][] toArray(Matrix A) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,88,checkSquare(A);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,90,int n = A.numCols();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,91,double[][] V = new double[n][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,92,for(MatrixSlice slice : A) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,93,int row = slice.index();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,94,for(Vector.Element element : slice.vector()) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,95,V[row][element.index()] = element.get();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,98,return V;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,101,private static boolean isSymmetric(double[][] matrix) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,102,for(int i=0; i<matrix.length; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,103,for(int j=0; j<i; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,104,if(matrix[i][j] != matrix[j][i]) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,105,return false;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,109,return true;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,112,private static double[][] toArray(DoubleMatrix2D A) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,113,checkSquare(A);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,115,int n = A.columns();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,116,double[][] V = new double[n][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,117,for(int row = 0; row < A.rows(); row++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,118,for(int col = 0; col < A.rows(); col++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,119,V[row][col] = A.getQuick(row, col);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,122,return V;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,131,public EigenvalueDecomposition(DoubleMatrix2D A) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,132,this(toArray(A));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,135,private void cdiv(double xr, double xi, double yr, double yi) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,136,double r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,137,double d;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,138,if (Math.abs(yr) > Math.abs(yi)) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,139,r = yi / yr;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,140,d = yr + r * yi;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,141,cdivr = (xr + r * xi) / d;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,142,cdivi = (xi - r * xr) / d;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,144,r = yr / yi;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,145,d = yi + r * yr;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,146,cdivr = (r * xr + xi) / d;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,147,cdivi = (r * xi - xr) / d;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,156,public DoubleMatrix2D getD() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,157,double[][] D = new double[n][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,158,for (int i = 0; i < n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,159,for (int j = 0; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,160,D[i][j] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,162,D[i][i] = d[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,163,if (e[i] > 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,164,D[i][i + 1] = e[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,166,D[i][i - 1] = e[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,169,return new DenseDoubleMatrix2D(D);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,177,public DoubleMatrix1D getImagEigenvalues() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,178,return new DenseDoubleMatrix1D(e);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,186,public DoubleMatrix1D getRealEigenvalues() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,187,return new DenseDoubleMatrix1D(d);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,195,public DoubleMatrix2D getV() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,196,return new DenseDoubleMatrix2D(V);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,200,private void hqr2() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,208,int nn = this.n;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,209,int n = nn - 1;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,210,int low = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,211,int high = nn - 1;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,212,double eps = Math.pow(2.0, -52.0);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,216,double norm = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,217,for (int i = 0; i < nn; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,218,if (i < low || i > high) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,219,d[i] = H[i][i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,220,e[i] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,222,for (int j = Math.max(i - 1, 0); j < nn; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,223,norm += Math.abs(H[i][j]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,229,int iter = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,230,double y;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,231,double x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,232,double w;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,233,double z = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,234,double s = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,235,double r = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,236,double q = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,237,double p = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,238,double exshift = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,239,while (n >= low) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,243,int l = n;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,244,while (l > low) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,245,s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,246,if (s == 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,247,s = norm;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,249,if (Math.abs(H[l][l - 1]) < eps * s) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,250,break;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,252,l--;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,258,if (l == n) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,259,H[n][n] += exshift;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,260,d[n] = H[n][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,261,e[n] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,262,n--;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,263,iter = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,268,w = H[n][n - 1] * H[n - 1][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,269,p = (H[n - 1][n - 1] - H[n][n]) / 2.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,270,q = p * p + w;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,271,z = Math.sqrt(Math.abs(q));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,272,H[n][n] += exshift;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,273,H[n - 1][n - 1] += exshift;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,274,x = H[n][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,278,if (q >= 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,279,if (p >= 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,280,z = p + z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,282,z = p - z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,284,d[n - 1] = x + z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,285,d[n] = d[n - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,286,if (z != 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,287,d[n] = x - w / z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,289,e[n - 1] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,290,e[n] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,291,x = H[n][n - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,292,s = Math.abs(x) + Math.abs(z);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,293,p = x / s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,294,q = z / s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,295,r = Math.sqrt(p * p + q * q);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,296,p /= r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,297,q /= r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,301,for (int j = n - 1; j < nn; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,302,z = H[n - 1][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,303,H[n - 1][j] = q * z + p * H[n][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,304,H[n][j] = q * H[n][j] - p * z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,309,for (int i = 0; i <= n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,310,z = H[i][n - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,311,H[i][n - 1] = q * z + p * H[i][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,312,H[i][n] = q * H[i][n] - p * z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,317,for (int i = low; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,318,z = V[i][n - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,319,V[i][n - 1] = q * z + p * V[i][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,320,V[i][n] = q * V[i][n] - p * z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,326,d[n - 1] = x + p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,327,d[n] = x + p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,328,e[n - 1] = z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,329,e[n] = -z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,331,n -= 2;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,332,iter = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,340,x = H[n][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,341,y = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,342,w = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,343,if (l < n) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,344,y = H[n - 1][n - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,345,w = H[n][n - 1] * H[n - 1][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,350,if (iter == 10) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,351,exshift += x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,352,for (int i = low; i <= n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,353,H[i][i] -= x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,355,s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,356,x = y = 0.75 * s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,357,w = -0.4375 * s * s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,362,if (iter == 30) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,363,s = (y - x) / 2.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,364,s = s * s + w;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,365,if (s > 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,366,s = Math.sqrt(s);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,367,if (y < x) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,368,s = -s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,370,s = x - w / ((y - x) / 2.0 + s);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,371,for (int i = low; i <= n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,372,H[i][i] -= s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,374,exshift += s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,375,x = y = w = 0.964;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,383,int m = n - 2;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,384,while (m >= l) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,385,z = H[m][m];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,386,r = x - z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,387,s = y - z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,388,p = (r * s - w) / H[m + 1][m] + H[m][m + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,389,q = H[m + 1][m + 1] - z - r - s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,390,r = H[m + 2][m + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,391,s = Math.abs(p) + Math.abs(q) + Math.abs(r);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,392,p /= s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,393,q /= s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,394,r /= s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,395,if (m == l) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,396,break;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,399,< eps * Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1]))) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,400,break;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,402,m--;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,405,for (int i = m + 2; i <= n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,406,H[i][i - 2] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,407,if (i > m + 2) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,408,H[i][i - 3] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,414,for (int k = m; k <= n - 1; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,415,boolean notlast = k != n - 1;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,416,if (k != m) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,417,p = H[k][k - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,418,q = H[k + 1][k - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,419,r = notlast ? H[k + 2][k - 1] : 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,420,x = Math.abs(p) + Math.abs(q) + Math.abs(r);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,421,if (x != 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,422,p /= x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,423,q /= x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,424,r /= x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,427,if (x == 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,428,break;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,430,s = Math.sqrt(p * p + q * q + r * r);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,431,if (p < 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,432,s = -s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,434,if (s != 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,435,if (k != m) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,436,H[k][k - 1] = -s * x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,438,H[k][k - 1] = -H[k][k - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,440,p += s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,441,x = p / s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,442,y = q / s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,443,z = r / s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,444,q /= p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,445,r /= p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,449,for (int j = k; j < nn; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,450,p = H[k][j] + q * H[k + 1][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,451,if (notlast) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,452,p += r * H[k + 2][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,453,H[k + 2][j] -= p * z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,455,H[k][j] -= p * x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,456,H[k + 1][j] -= p * y;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,461,for (int i = 0; i <= Math.min(n, k + 3); i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,462,p = x * H[i][k] + y * H[i][k + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,463,if (notlast) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,464,p += z * H[i][k + 2];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,465,H[i][k + 2] -= p * r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,467,H[i][k] -= p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,468,H[i][k + 1] -= p * q;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,473,for (int i = low; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,474,p = x * V[i][k] + y * V[i][k + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,475,if (notlast) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,476,p += z * V[i][k + 2];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,477,V[i][k + 2] -= p * r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,479,V[i][k] -= p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,480,V[i][k + 1] -= p * q;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,489,if (norm == 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,490,return;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,493,for (n = nn - 1; n >= 0; n--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,494,p = d[n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,495,q = e[n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,499,double t;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,500,if (q == 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,501,int l = n;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,502,H[n][n] = 1.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,503,for (int i = n - 1; i >= 0; i--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,504,w = H[i][i] - p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,505,r = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,506,for (int j = l; j <= n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,507,r += H[i][j] * H[j][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,509,if (e[i] < 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,510,z = w;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,511,s = r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,513,l = i;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,514,if (e[i] == 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,515,if (w != 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,516,H[i][n] = -r / w;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,518,H[i][n] = -r / (eps * norm);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,524,x = H[i][i + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,525,y = H[i + 1][i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,526,q = (d[i] - p) * (d[i] - p) + e[i] * e[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,527,t = (x * s - z * r) / q;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,528,H[i][n] = t;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,529,if (Math.abs(x) > Math.abs(z)) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,530,H[i + 1][n] = (-r - w * t) / x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,532,H[i + 1][n] = (-s - y * t) / z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,538,t = Math.abs(H[i][n]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,539,if (eps * t * t > 1) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,540,for (int j = i; j <= n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,541,H[j][n] /= t;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,550,int l = n - 1;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,554,if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,555,H[n - 1][n - 1] = q / H[n][n - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,556,H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,558,cdiv(0.0, -H[n - 1][n], H[n - 1][n - 1] - p, q);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,559,H[n - 1][n - 1] = cdivr;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,560,H[n - 1][n] = cdivi;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,562,H[n][n - 1] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,563,H[n][n] = 1.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,564,for (int i = n - 2; i >= 0; i--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,565,double ra = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,566,double sa = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,567,for (int j = l; j <= n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,568,ra += H[i][j] * H[j][n - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,569,sa += H[i][j] * H[j][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,571,w = H[i][i] - p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,573,if (e[i] < 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,574,z = w;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,575,r = ra;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,576,s = sa;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,578,l = i;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,579,if (e[i] == 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,580,cdiv(-ra, -sa, w, q);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,581,H[i][n - 1] = cdivr;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,582,H[i][n] = cdivi;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,587,x = H[i][i + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,588,y = H[i + 1][i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,589,double vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,590,double vi = (d[i] - p) * 2.0 * q;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,591,if (vr == 0.0 && vi == 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,592,vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,594,cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,595,H[i][n - 1] = cdivr;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,596,H[i][n] = cdivi;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,597,if (Math.abs(x) > Math.abs(z) + Math.abs(q)) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,598,H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,599,H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,601,cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,602,H[i + 1][n - 1] = cdivr;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,603,H[i + 1][n] = cdivi;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,609,t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,610,if (eps * t * t > 1) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,611,for (int j = i; j <= n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,612,H[j][n - 1] /= t;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,613,H[j][n] /= t;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,623,for (int i = 0; i < nn; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,624,if (i < low || i > high) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,625,System.arraycopy(H[i], i, V[i], i, nn - i);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,631,for (int j = nn - 1; j >= low; j--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,632,for (int i = low; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,633,z = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,634,for (int k = low; k <= Math.min(j, high); k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,635,z += V[i][k] * H[k][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,637,V[i][j] = z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,643,private void orthes() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,649,int low = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,650,int high = n - 1;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,652,for (int m = low + 1; m <= high - 1; m++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,656,double scale = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,657,for (int i = m; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,658,scale += Math.abs(H[i][m - 1]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,660,if (scale != 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,664,double h = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,665,for (int i = high; i >= m; i--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,666,ort[i] = H[i][m - 1] / scale;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,667,h += ort[i] * ort[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,669,double g = Math.sqrt(h);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,670,if (ort[m] > 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,671,g = -g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,673,h -= ort[m] * g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,674,ort[m] -= g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,679,for (int j = m; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,680,double f = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,681,for (int i = high; i >= m; i--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,682,f += ort[i] * H[i][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,684,f /= h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,685,for (int i = m; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,686,H[i][j] -= f * ort[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,690,for (int i = 0; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,691,double f = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,692,for (int j = high; j >= m; j--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,693,f += ort[j] * H[i][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,695,f /= h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,696,for (int j = m; j <= high; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,697,H[i][j] -= f * ort[j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,700,ort[m] = scale * ort[m];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,701,H[m][m - 1] = scale * g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,707,for (int i = 0; i < n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,708,for (int j = 0; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,709,V[i][j] = i == j ? 1.0 : 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,713,for (int m = high - 1; m >= low + 1; m--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,714,if (H[m][m - 1] != 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,715,for (int i = m + 1; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,716,ort[i] = H[i][m - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,718,for (int j = m; j <= high; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,719,double g = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,720,for (int i = m; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,721,g += ort[i] * V[i][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,724,g = g / ort[m] / H[m][m - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,725,for (int i = m; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,726,V[i][j] += g * ort[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,742,public String toString() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,743,StringBuilder buf = new StringBuilder();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,745,buf.append("---------------------------------------------------------------------\n");
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,746,buf.append("EigenvalueDecomposition(A) --> D, V, realEigenvalues, imagEigenvalues\n");
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,747,buf.append("---------------------------------------------------------------------\n");
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,749,buf.append("realEigenvalues = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,750,String unknown = "Illegal operation or error: ";
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,751,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,752,buf.append(String.valueOf(this.getRealEigenvalues()));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,754,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,757,buf.append("\nimagEigenvalues = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,758,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,759,buf.append(String.valueOf(this.getImagEigenvalues()));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,761,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,764,buf.append("\n\nD = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,765,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,766,buf.append(String.valueOf(this.getD()));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,768,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,771,buf.append("\n\nV = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,772,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,773,buf.append(String.valueOf(this.getV()));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,775,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,778,return buf.toString();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,782,private void tql2() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,789,System.arraycopy(e, 1, e, 0, n - 1);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,790,e[n - 1] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,792,double f = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,793,double tst1 = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,794,double eps = Math.pow(2.0, -52.0);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,795,for (int l = 0; l < n; l++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,799,tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,800,int m = l;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,801,while (m < n) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,802,if (Math.abs(e[m]) <= eps * tst1) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,803,break;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,805,m++;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,811,if (m > l) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,812,int iter = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,813,do {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,818,double g = d[l];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,819,double p = (d[l + 1] - g) / (2.0 * e[l]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,820,double r = hypot(p, 1.0);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,821,if (p < 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,822,r = -r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,824,d[l] = e[l] / (p + r);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,825,d[l + 1] = e[l] * (p + r);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,826,double dl1 = d[l + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,827,double h = g - d[l];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,828,for (int i = l + 2; i < n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,829,d[i] -= h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,831,f += h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,835,p = d[m];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,836,double c = 1.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,837,double c2 = c;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,838,double c3 = c;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,839,double el1 = e[l + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,840,double s = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,841,double s2 = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,842,for (int i = m - 1; i >= l; i--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,843,c3 = c2;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,844,c2 = c;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,845,s2 = s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,846,g = c * e[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,847,h = c * p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,848,r = hypot(p, e[i]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,849,e[i + 1] = s * r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,850,s = e[i] / r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,851,c = p / r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,852,p = c * d[i] - s * g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,853,d[i + 1] = h + s * (c * g + s * d[i]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,857,for (int k = 0; k < n; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,858,h = V[k][i + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,859,V[k][i + 1] = s * V[k][i] + c * h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,860,V[k][i] = c * V[k][i] - s * h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,863,p = -s * s2 * c3 * el1 * e[l] / dl1;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,864,e[l] = s * p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,865,d[l] = c * p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,871,d[l] += f;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,872,e[l] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,877,for (int i = 0; i < n - 1; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,878,int k = i;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,879,double p = d[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,880,for (int j = i + 1; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,881,if (d[j] < p) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,882,k = j;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,883,p = d[j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,886,if (k != i) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,887,d[k] = d[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,888,d[i] = p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,889,for (int j = 0; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,890,p = V[j][i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,891,V[j][i] = V[j][k];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,892,V[j][k] = p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,899,private void tred2() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,906,System.arraycopy(V[n - 1], 0, d, 0, n);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,911,for (int i = n - 1; i > 0; i--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,915,double scale = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,916,for (int k = 0; k < i; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,917,scale += Math.abs(d[k]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,919,double h = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,920,if (scale == 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,921,e[i] = d[i - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,922,for (int j = 0; j < i; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,923,d[j] = V[i - 1][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,924,V[i][j] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,925,V[j][i] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,931,for (int k = 0; k < i; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,932,d[k] /= scale;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,933,h += d[k] * d[k];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,935,double f = d[i - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,936,double g = Math.sqrt(h);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,937,if (f > 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,938,g = -g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,940,e[i] = scale * g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,941,h -= f * g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,942,d[i - 1] = f - g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,943,for (int j = 0; j < i; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,944,e[j] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,949,for (int j = 0; j < i; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,950,f = d[j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,951,V[j][i] = f;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,952,g = e[j] + V[j][j] * f;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,953,for (int k = j + 1; k <= i - 1; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,954,g += V[k][j] * d[k];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,955,e[k] += V[k][j] * f;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,957,e[j] = g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,959,f = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,960,for (int j = 0; j < i; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,961,e[j] /= h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,962,f += e[j] * d[j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,964,double hh = f / (h + h);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,965,for (int j = 0; j < i; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,966,e[j] -= hh * d[j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,968,for (int j = 0; j < i; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,969,f = d[j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,970,g = e[j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,971,for (int k = j; k <= i - 1; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,972,V[k][j] -= f * e[k] + g * d[k];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,974,d[j] = V[i - 1][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,975,V[i][j] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,978,d[i] = h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,983,for (int i = 0; i < n - 1; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,984,V[n - 1][i] = V[i][i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,985,V[i][i] = 1.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,986,double h = d[i + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,987,if (h != 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,988,for (int k = 0; k <= i; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,989,d[k] = V[k][i + 1] / h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,991,for (int j = 0; j <= i; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,992,double g = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,993,for (int k = 0; k <= i; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,994,g += V[k][i + 1] * V[k][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,996,for (int k = 0; k <= i; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,997,V[k][j] -= g * d[k];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,1001,for (int k = 0; k <= i; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,1002,V[k][i + 1] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,1005,for (int j = 0; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,1006,d[j] = V[n - 1][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,1007,V[n - 1][j] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,1009,V[n - 1][n - 1] = 1.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,1010,e[0] = 0.0;
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,21,import java.util.Collection;
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,27,import org.apache.hadoop.fs.FileStatus;
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,29,import org.apache.hadoop.fs.FileUtil;
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,51,import org.apache.mahout.common.iterator.sequencefile.PathFilters;
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,55,import org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterator;
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,287,double stdDev = BasicStats.stdDevForGivenMean(dfDir, stdCalcDir, 0.0D, conf);
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,288,maxDF = (int) (maxDFSigma * stdDev);
core/src/main/java/org/apache/mahout/vectorizer/tfidf/TFIDFPartialVectorReducer.java,81,if (maxDf > -1 && df > maxDf) {
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/EigenVerificationJob.java,204,log.info("appending {} to {}", ev, path);
integration/src/main/java/org/apache/mahout/classifier/ConfusionMatrixDumper.java,58,private static final String HEADER = "<html>" +
integration/src/main/java/org/apache/mahout/classifier/ConfusionMatrixDumper.java,163,Map<String, String> parsedArgs = parseArguments(args);
integration/src/main/java/org/apache/mahout/classifier/ConfusionMatrixDumper.java,220,List<String> stripped = Lists.newArrayList(cm.getLabels().iterator());
integration/src/main/java/org/apache/mahout/classifier/ConfusionMatrixDumper.java,243,if (outputFile.exists()) {
integration/src/main/java/org/apache/mahout/classifier/ConfusionMatrixDumper.java,257,while(iter.hasNext()) {
integration/src/main/java/org/apache/mahout/classifier/ConfusionMatrixDumper.java,279,for(String label: labels) {
integration/src/main/java/org/apache/mahout/classifier/ConfusionMatrixDumper.java,290,format("<td class='%s'>%s</td><td>%d</td><td>%d</td><td>%d</td>",
integration/src/main/java/org/apache/mahout/classifier/ConfusionMatrixDumper.java,291,out, CSS_CELL, label, count, correct, (int) Math.round(accuracy));
integration/src/main/java/org/apache/mahout/classifier/ConfusionMatrixDumper.java,317,for (String label: labels) {
integration/src/main/java/org/apache/mahout/classifier/ConfusionMatrixDumper.java,322,private static void printGrayRow(ConfusionMatrix cm, PrintStream out, Iterable<String> labels, String rowLabel) {
integration/src/main/java/org/apache/mahout/classifier/ConfusionMatrixDumper.java,326,for (String columnLabel: labels) {
integration/src/main/java/org/apache/mahout/classifier/ConfusionMatrixDumper.java,346,int rating = (int) ((count/ (double) total) * 4);
integration/src/main/java/org/apache/mahout/classifier/ConfusionMatrixDumper.java,361,for(String label: labels) {
integration/src/main/java/org/apache/mahout/classifier/ConfusionMatrixDumper.java,366,private static void printCountsRow(ConfusionMatrix cm, PrintStream out, Iterable<String> labels, String rowLabel) {
integration/src/main/java/org/apache/mahout/classifier/ConfusionMatrixDumper.java,369,for(String columnLabel: labels) {
integration/src/main/java/org/apache/mahout/classifier/ConfusionMatrixDumper.java,386,out.format("<tr class='%s' style='height:%dem'><th>&nbsp;</th>\n", CSS_TALL_HEADER, longest/2);
integration/src/main/java/org/apache/mahout/classifier/ConfusionMatrixDumper.java,387,for(String label: labels) {
integration/src/main/java/org/apache/mahout/classifier/ConfusionMatrixDumper.java,394,for(String label: labels) {
integration/src/main/java/org/apache/mahout/classifier/ConfusionMatrixDumper.java,403,for (String label: labels) {
integration/src/main/java/org/apache/mahout/classifier/ConfusionMatrixDumper.java,409,private static void format(String format, PrintStream out, Object ... args) {
core/src/main/java/org/apache/mahout/cf/taste/hadoop/als/DatasetSplitter.java,89,markPreferences.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/als/DatasetSplitter.java,94,createTrainingSet.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/als/DatasetSplitter.java,99,createProbeSet.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/als/FactorizationEvaluator.java,89,predictRatings.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/als/ParallelALSFactorizationJob.java,137,itemRatings.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/als/ParallelALSFactorizationJob.java,144,userRatings.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/als/ParallelALSFactorizationJob.java,151,averageItemRatings.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/als/ParallelALSFactorizationJob.java,222,solverForUorI.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/als/RecommenderJob.java,95,prediction.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java,194,prePartialMultiply1.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java,205,prePartialMultiply2.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java,213,partialMultiply.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java,224,itemFiltering.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java,250,aggregateAndRecommend.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/preparation/PreparePreferenceMatrixJob.java,78,itemIDIndex.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/preparation/PreparePreferenceMatrixJob.java,86,toUserVectors.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/preparation/PreparePreferenceMatrixJob.java,102,toItemVectors.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/pseudo/RecommenderJob.java,142,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/pseudo/RecommenderJob.java,143,return 0;
core/src/main/java/org/apache/mahout/cf/taste/hadoop/similarity/item/ItemSimilarityJob.java,163,mostSimilarItems.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/SlopeOneAverageDiffsJob.java,71,prefsToDiffsJob.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/SlopeOneAverageDiffsJob.java,87,diffsToAveragesJob.waitForCompletion(true);
core/src/main/java/org/apache/mahout/classifier/df/mapreduce/Classifier.java,128,log.error("Job failed!");
core/src/main/java/org/apache/mahout/classifier/df/mapreduce/Classifier.java,129,return;
core/src/main/java/org/apache/mahout/classifier/df/tools/FrequenciesJob.java,114,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/classifier/naivebayes/training/TrainNaiveBayesJob.java,100,indexInstances.waitForCompletion(true);
core/src/main/java/org/apache/mahout/classifier/naivebayes/training/TrainNaiveBayesJob.java,107,weightSummer.waitForCompletion(true);
core/src/main/java/org/apache/mahout/classifier/naivebayes/training/TrainNaiveBayesJob.java,117,thetaSummer.waitForCompletion(true);
core/src/main/java/org/apache/mahout/clustering/spectral/common/AffinityMatrixInputJob.java,64,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/clustering/spectral/common/MatrixDiagonalizeJob.java,72,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/clustering/spectral/common/UnitVectorizerJob.java,66,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/clustering/spectral/common/VectorMatrixMultiplicationJob.java,90,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/clustering/spectral/eigencuts/EigencutsAffinityCutsJob.java,83,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/clustering/spectral/eigencuts/EigencutsSensitivityJob.java,122,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,271,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,303,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,337,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/ga/watchmaker/MahoutEvaluator.java,78,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/graph/AdjacencyMatrixJob.java,121,createAdjacencyMatrix.waitForCompletion(true);
core/src/main/java/org/apache/mahout/graph/AdjacencyMatrixJob.java,123,return 0;
core/src/main/java/org/apache/mahout/graph/linkanalysis/RandomWalk.java,104,createTransitionMatrix.waitForCompletion(true);
core/src/main/java/org/apache/mahout/graph/linkanalysis/RandomWalk.java,124,vertexWithPageRank.waitForCompletion(true);
core/src/main/java/org/apache/mahout/graph/linkanalysis/RandomWalk.java,126,return 1;
core/src/main/java/org/apache/mahout/math/hadoop/similarity/cooccurrence/RowSimilarityJob.java,124,normsAndTranspose.waitForCompletion(true);
core/src/main/java/org/apache/mahout/math/hadoop/similarity/cooccurrence/RowSimilarityJob.java,139,pairwiseSimilarity.waitForCompletion(true);
core/src/main/java/org/apache/mahout/math/hadoop/similarity/cooccurrence/RowSimilarityJob.java,148,asMatrix.waitForCompletion(true);
core/src/main/java/org/apache/mahout/math/hadoop/stats/BasicStats.java,88,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/math/stats/entropy/ConditionalEntropy.java,87,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/math/stats/entropy/ConditionalEntropy.java,105,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/math/stats/entropy/ConditionalEntropy.java,119,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/math/stats/entropy/Entropy.java,114,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/math/stats/entropy/Entropy.java,138,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/vectorizer/DictionaryVectorizer.java,327,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/vectorizer/DictionaryVectorizer.java,363,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/vectorizer/DocumentProcessor.java,93,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/vectorizer/HighDFWordsPruner.java,95,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/vectorizer/HighDFWordsPruner.java,132,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/CollocDriver.java,236,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/CollocDriver.java,276,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/vectorizer/common/PartialVectorMerger.java,129,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/vectorizer/tfidf/TFIDFConverter.java,332,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/vectorizer/tfidf/TFIDFConverter.java,366,job.waitForCompletion(true);
examples/src/main/java/org/apache/mahout/cf/taste/example/email/MailToPrefsDriver.java,125,createMsgIdDictionary.waitForCompletion(true);
examples/src/main/java/org/apache/mahout/cf/taste/example/email/MailToPrefsDriver.java,148,createFromIdDictionary.waitForCompletion(true);
examples/src/main/java/org/apache/mahout/cf/taste/example/email/MailToPrefsDriver.java,180,createRecMatrix.waitForCompletion(true);
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorDriver.java,187,job.waitForCompletion(true);
examples/src/main/java/org/apache/mahout/classifier/email/PrepEmailVectorsDriver.java,69,convertJob.waitForCompletion(true);
examples/src/main/java/org/apache/mahout/classifier/email/PrepEmailVectorsDriver.java,70,return 0;
examples/src/main/java/org/apache/mahout/fpm/pfpgrowth/dataset/KeyBasedStringTupleGrouper.java,72,job.waitForCompletion(true);
examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/hadoop/CDMahoutEvaluator.java,80,job.waitForCompletion(true);
examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/tool/CDInfosTool.java,87,job.waitForCompletion(true);
examples/src/main/java/org/apache/mahout/text/WikipediaToSequenceFile.java,196,job.waitForCompletion(true);
integration/src/main/java/org/apache/mahout/clustering/conversion/InputDriver.java,108,job.waitForCompletion(true);
integration/src/main/java/org/apache/mahout/clustering/conversion/meanshift/InputDriver.java,95,job.waitForCompletion(true);
integration/src/main/java/org/apache/mahout/clustering/evaluation/RepresentativePointsDriver.java,242,job.waitForCompletion(true);
integration/src/main/java/org/apache/mahout/text/TextParagraphSplittingJob.java,49,job.waitForCompletion(true);
integration/src/main/java/org/apache/mahout/text/TextParagraphSplittingJob.java,50,return 1;
integration/src/main/java/org/apache/mahout/utils/SplitInputJob.java,128,job.waitForCompletion(true);
integration/src/main/java/org/apache/mahout/utils/regex/RegexConverterDriver.java,93,job.waitForCompletion(true);
integration/src/main/java/org/apache/mahout/utils/regex/RegexConverterDriver.java,95,return 0;
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterator.java,104,if (!termDocs.next()) {
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterator.java,105,return endOfData();
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterator.java,108,int doc = termDocs.doc();
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterator.java,109,TermFreqVector termFreqVector = indexReader.getTermFreqVector(doc, field);
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterator.java,110,if (termFreqVector == null) {
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterator.java,111,numErrorDocs++;
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterator.java,112,if (numErrorDocs >= maxErrorDocs) {
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterator.java,113,log.error("There are too many documents that do not have a term vector for {}", field);
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterator.java,114,throw new IllegalStateException("There are too many documents that do not have a term vector for " + field);
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterator.java,116,if (numErrorDocs >= nextLogRecord) {
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterator.java,117,if (skippedErrorMessages == 0) {
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterator.java,118,log.warn("{} does not have a term vector for {}", indexReader.document(doc).get(idField), field);
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterator.java,120,log.warn("{} documents do not have a term vector for {}", numErrorDocs, field);
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterator.java,122,nextLogRecord = bump.increment();
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterator.java,123,skippedErrorMessages = 0;
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterator.java,125,skippedErrorMessages++;
integration/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterator.java,127,computeNext();
core/src/main/java/org/apache/mahout/clustering/dirichlet/DirichletDriver.java,412,FileSystem.get(conf).rename(new Path(output, Cluster.CLUSTERS_DIR + (iteration-1)), finalClustersIn);
core/src/main/java/org/apache/mahout/clustering/dirichlet/DirichletDriver.java,436,FileSystem.get(conf).rename(new Path(output, Cluster.CLUSTERS_DIR + (iteration-1)), finalClustersIn);
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,404,FileSystem.get(conf).rename(new Path(output, Cluster.CLUSTERS_DIR + (iteration-1)), finalClustersIn);
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,432,FileSystem.get(conf).rename(new Path(output, Cluster.CLUSTERS_DIR + (iteration-1)), finalClustersIn);
core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansDriver.java,298,FileSystem.get(conf).rename(new Path(output, AbstractCluster.CLUSTERS_DIR + (iteration-1)), finalClustersIn);
core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansDriver.java,322,FileSystem.get(conf).rename(new Path(output, AbstractCluster.CLUSTERS_DIR + (iteration-1)), finalClustersIn);
core/src/main/java/org/apache/mahout/clustering/lda/LDADriver.java,175,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/clustering/lda/LDADriver.java,369,for (FileStatus fileStatus : FileSystem.get(conf).globStatus(new Path(input, "part-*"))) {
core/src/main/java/org/apache/mahout/clustering/lda/LDADriver.java,371,SequenceFile.Reader reader = new SequenceFile.Reader(FileSystem.get(conf), inputPart, conf);
core/src/main/java/org/apache/mahout/clustering/lda/LDADriver.java,513,SequenceFile.Reader reader = new SequenceFile.Reader(FileSystem.get(conf), input, conf);
core/src/main/java/org/apache/mahout/clustering/lda/cvb/CVB0Driver.java,248,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/clustering/lda/cvb/CVB0Driver.java,407,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/clustering/lda/cvb/CVB0Driver.java,457,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/clustering/lda/cvb/CVB0Driver.java,458,if(modelInput != null && fs.exists(modelInput)) {
core/src/main/java/org/apache/mahout/clustering/lda/cvb/CVB0Driver.java,459,FileStatus[] statuses = FileSystem.get(conf).listStatus(modelInput, PathFilters.partFilter());
core/src/main/java/org/apache/mahout/clustering/lda/cvb/CVB0Driver.java,487,FileSystem fs = FileSystem.get(config);
core/src/main/java/org/apache/mahout/clustering/lda/cvb/CVB0Driver.java,525,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/clustering/lda/cvb/CVB0Driver.java,526,if (modelPath == null || !fs.exists(modelPath)) {
core/src/main/java/org/apache/mahout/clustering/lda/cvb/CVB0Driver.java,529,FileStatus[] statuses = FileSystem.get(conf).listStatus(modelPath, PathFilters.partFilter());
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyDriver.java,337,FileSystem.get(conf).rename(new Path(output, Cluster.CLUSTERS_DIR + (iteration-1)), finalClustersIn);
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyDriver.java,363,converged = FileSystem.get(new Configuration()).exists(controlOut);
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyDriver.java,375,FileSystem.get(conf).rename(new Path(output, Cluster.CLUSTERS_DIR + (iteration-1)), finalClustersIn);
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyReducer.java,65,FileSystem.get(conf).createNewFile(path);
core/src/main/java/org/apache/mahout/clustering/spectral/common/VectorCache.java,64,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/clustering/spectral/common/VectorMatrixMultiplicationJob.java,70,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/common/iterator/sequencefile/SequenceFileDirIterator.java,64,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/common/iterator/sequencefile/SequenceFileDirValueIterator.java,66,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/common/iterator/sequencefile/SequenceFileDirValueIterator.java,89,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/FPGrowthDriver.java,149,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,121,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/ga/watchmaker/MahoutEvaluator.java,71,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,107,rowPath = FileSystem.get(conf).makeQualified(inputPath);
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,108,outputTmpBasePath = FileSystem.get(conf).makeQualified(outputTmpPath);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,153,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,89,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/DistributedLanczosSolver.java,215,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/EigenVerificationJob.java,192,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/ABtDenseOutJob.java,451,SequenceFile.createWriter(FileSystem.get(ctx.getConfiguration()),
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/ABtDenseOutJob.java,526,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/ABtJob.java,402,SequenceFile.createWriter(FileSystem.get(ctx.getConfiguration()),
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/ABtJob.java,495,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/BtJob.java,490,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,133,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDSolver.java,314,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDSolver.java,513,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/UJob.java,134,FileSystem fs = FileSystem.get(context.getConfiguration());
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/VJob.java,123,FileSystem fs = FileSystem.get(context.getConfiguration());
