File,Line_number,SRC
activemq-broker/src/main/java/org/apache/activemq/filter/JAXPXPathEvaluator.java,19,import java.io.StringReader;
activemq-broker/src/main/java/org/apache/activemq/filter/JAXPXPathEvaluator.java,25,import javax.xml.xpath.XPathExpressionException;
activemq-broker/src/main/java/org/apache/activemq/filter/JAXPXPathEvaluator.java,28,import org.apache.activemq.command.Message;
activemq-broker/src/main/java/org/apache/activemq/filter/JAXPXPathEvaluator.java,29,import org.apache.activemq.util.ByteArrayInputStream;
activemq-broker/src/main/java/org/apache/activemq/filter/JAXPXPathEvaluator.java,30,import org.xml.sax.InputSource;
activemq-broker/src/main/java/org/apache/activemq/filter/JAXPXPathEvaluator.java,37,public JAXPXPathEvaluator(String xpathExpression) {
activemq-broker/src/main/java/org/apache/activemq/filter/JAXPXPathEvaluator.java,38,try {
activemq-broker/src/main/java/org/apache/activemq/filter/JAXPXPathEvaluator.java,39,XPath xpath = FACTORY.newXPath();
activemq-broker/src/main/java/org/apache/activemq/filter/JAXPXPathEvaluator.java,40,expression = xpath.compile(xpathExpression);
activemq-broker/src/main/java/org/apache/activemq/filter/JAXPXPathEvaluator.java,42,throw new RuntimeException("Invalid XPath expression: " + xpathExpression);
activemq-broker/src/main/java/org/apache/activemq/filter/JAXPXPathEvaluator.java,62,return ((Boolean)expression.evaluate(inputSource, XPathConstants.BOOLEAN)).booleanValue();
activemq-broker/src/main/java/org/apache/activemq/filter/JAXPXPathEvaluator.java,71,return ((Boolean)expression.evaluate(inputSource, XPathConstants.BOOLEAN)).booleanValue();
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,20,import java.io.StringReader;
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,32,import org.apache.activemq.command.Message;
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,33,import org.apache.activemq.util.ByteArrayInputStream;
activemq-client/src/main/java/org/apache/activemq/filter/XPathExpression.java,78,return c.getConstructor(new Class[] {String.class});
activemq-client/src/main/java/org/apache/activemq/filter/XPathExpression.java,83,return (XPathEvaluator)EVALUATOR_CONSTRUCTOR.newInstance(new Object[] {xpath});
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,22,import java.io.FilterOutputStream;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,27,import java.util.zip.DeflaterOutputStream;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,28,import java.util.zip.InflaterInputStream;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,131,if (compressed) {
activemq-broker/src/main/java/org/apache/activemq/store/SharedFileLocker.java,55,locked = true;
activemq-broker/src/main/java/org/apache/activemq/network/LdapNetworkConnector.java,213,env.put(Context.SECURITY_PRINCIPAL, user);
activemq-broker/src/main/java/org/apache/activemq/network/LdapNetworkConnector.java,214,env.put(Context.SECURITY_CREDENTIALS, password);
activemq-broker/src/main/java/org/apache/activemq/security/LDAPAuthorizationMap.java,472,if (connectionUsername != null || !"".equals(connectionUsername)) {
activemq-broker/src/main/java/org/apache/activemq/security/LDAPAuthorizationMap.java,475,if (connectionPassword != null || !"".equals(connectionPassword)) {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,89,if (connectionUsername != null || !"".equals(connectionUsername)) {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,92,if (connectionPassword != null || !"".equals(connectionPassword)) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,191,username
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,290,doRFC2254Encoding(dn), username
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,142,ConsumerInfo value = iter.next();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,143,ActiveMQTopic topic = AdvisorySupport.getConsumerAdvisoryTopic(value.getDestination());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,562,return consumers;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,432,if (localBridgeStarted.compareAndSet(false, true)) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,518,if (remoteBridgeStarted.compareAndSet(false, true)) {
activemq-client/src/main/java/org/apache/activemq/filter/LogicExpression.java,48,return rv == null ? null : rv;
activemq-client/src/main/java/org/apache/activemq/filter/LogicExpression.java,65,if (lv == null) {
activemq-client/src/main/java/org/apache/activemq/filter/LogicExpression.java,66,return null;
activemq-client/src/main/java/org/apache/activemq/filter/LogicExpression.java,68,if (!lv.booleanValue()) {
activemq-client/src/main/java/org/apache/activemq/filter/LogicExpression.java,73,return rv == null ? null : rv;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,396,Integer rc = (Integer) TypeConversionSupport.convert(value, Integer.class);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,402,else {
activemq-http/src/main/java/org/apache/activemq/transport/https/HttpsClientTransport.java,27,public HttpsClientTransport(TextWireFormat wireFormat, URI remoteUrl) {
activemq-http/src/main/java/org/apache/activemq/transport/https/HttpsClientTransport.java,28,super(wireFormat, remoteUrl);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,54,public class JmsFrameTranslator extends LegacyFrameTranslator implements
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,55,BrokerContextAware {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,61,public ActiveMQMessage convertFrame(ProtocolConverter converter,
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,62,StompFrame command) throws JMSException, ProtocolException {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,65,String transformation = headers.get(Stomp.Headers.TRANSFORMATION);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,66,if (headers.containsKey(Stomp.Headers.CONTENT_LENGTH) || transformation.equals(Stomp.Transformations.JMS_BYTE.toString())) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,73,switch (Stomp.Transformations.getValue(transformation)) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,74,case JMS_OBJECT_XML:
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,75,in = new XppReader(new StringReader(text), XppFactory.createDefaultParser());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,76,msg = createObjectMessage(in);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,77,break;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,78,case JMS_OBJECT_JSON:
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,79,in = new JettisonMappedXmlDriver().createReader(new StringReader(text));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,80,msg = createObjectMessage(in);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,81,break;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,82,case JMS_MAP_XML:
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,83,in = new XppReader(new StringReader(text), XppFactory.createDefaultParser());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,84,msg = createMapMessage(in);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,85,break;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,86,case JMS_MAP_JSON:
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,87,in = new JettisonMappedXmlDriver().createReader(new StringReader(text));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,88,msg = createMapMessage(in);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,89,break;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,90,default:
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,91,throw new Exception("Unkown transformation: " + transformation);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,94,command.getHeaders().put(Stomp.Headers.TRANSFORMATION_ERROR, e.getMessage());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,98,FrameTranslator.Helper.copyStandardHeadersFromFrameToMessage(converter, command, msg, this);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,103,public StompFrame convertMessage(ProtocolConverter converter,
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,104,ActiveMQMessage message) throws IOException, JMSException {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,106,StompFrame command = new StompFrame();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,107,command.setAction(Stomp.Responses.MESSAGE);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,108,Map<String, String> headers = new HashMap<String, String>(25);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,109,command.setHeaders(headers);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,111,FrameTranslator.Helper.copyStandardHeadersFromMessageToFrame(
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,112,converter, message, command, this);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,114,if (headers.get(Stomp.Headers.TRANSFORMATION).equals(Stomp.Transformations.JMS_XML.toString())) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,115,headers.put(Stomp.Headers.TRANSFORMATION, Stomp.Transformations.JMS_OBJECT_XML.toString());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,117,headers.put(Stomp.Headers.TRANSFORMATION, Stomp.Transformations.JMS_OBJECT_JSON.toString());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,121,command.setContent(marshall(msg.getObject(),
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,123,.getBytes("UTF-8"));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,124,return command;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,127,StompFrame command = new StompFrame();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,128,command.setAction(Stomp.Responses.MESSAGE);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,129,Map<String, String> headers = new HashMap<String, String>(25);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,130,command.setHeaders(headers);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,132,FrameTranslator.Helper.copyStandardHeadersFromMessageToFrame(
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,133,converter, message, command, this);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,135,if (headers.get(Stomp.Headers.TRANSFORMATION).equals(Stomp.Transformations.JMS_XML.toString())) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,136,headers.put(Stomp.Headers.TRANSFORMATION, Stomp.Transformations.JMS_MAP_XML.toString());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,138,headers.put(Stomp.Headers.TRANSFORMATION, Stomp.Transformations.JMS_MAP_JSON.toString());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,142,command.setContent(marshall((Serializable)msg.getContentMap(),
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,143,headers.get(Stomp.Headers.TRANSFORMATION)).getBytes("UTF-8"));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,144,return command;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,146,AdvisorySupport.ADIVSORY_MESSAGE_TYPE.equals(message.getType())) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,148,StompFrame command = new StompFrame();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,149,command.setAction(Stomp.Responses.MESSAGE);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,150,Map<String, String> headers = new HashMap<String, String>(25);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,151,command.setHeaders(headers);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,153,FrameTranslator.Helper.copyStandardHeadersFromMessageToFrame(
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,154,converter, message, command, this);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,156,if (headers.get(Stomp.Headers.TRANSFORMATION).equals(Stomp.Transformations.JMS_XML.toString())) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,157,headers.put(Stomp.Headers.TRANSFORMATION, Stomp.Transformations.JMS_ADVISORY_XML.toString());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,159,headers.put(Stomp.Headers.TRANSFORMATION, Stomp.Transformations.JMS_ADVISORY_JSON.toString());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,162,String body = marshallAdvisory(message.getDataStructure(),
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,163,headers.get(Stomp.Headers.TRANSFORMATION));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,165,return command;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,167,return super.convertMessage(converter, message);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,196,Map<String, Object> map = (Map<String, Object>)getXStream().unmarshal(in);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,206,translator = (FrameTranslator) FRAME_TRANSLATOR_FINDER
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,207,.newInstance(header);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,380,XAException e = new XAException("Transaction '" + xid + "' has not been started.");
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,381,e.errorCode = XAException.XAER_NOTA;
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,93,xae.errorCode = XAException.XA_RBOTHER;
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,100,XAException xae = new XAException("Cannot call " + callName + " now.");
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,101,xae.errorCode = XAException.XAER_PROTO;
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,108,xae.errorCode = XAException.XAER_PROTO;
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,122,xae.errorCode = XAException.XA_RBOTHER;
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,158,throw new XAException("Invalid state");
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,170,XAException xae = new XAException("POST ROLLBACK FAILED");
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,171,xae.errorCode = XAException.XAER_RMERR;
activemq-client/src/main/java/org/apache/activemq/util/BitArrayBin.java,93,boolean answer = index >= firstIndex;
activemq-client/src/main/java/org/apache/activemq/util/BitArrayBin.java,122,firstIndex += BitArray.LONG_SIZE;
activemq-client/src/main/java/org/apache/activemq/util/BitArrayBin.java,146,if (firstIndex < 0) {
activemq-client/src/main/java/org/apache/activemq/util/BitArrayBin.java,147,firstIndex = (int) (index - (index % BitArray.LONG_SIZE));
activemq-client/src/main/java/org/apache/activemq/util/BitArrayBin.java,149,answer = (int)((index - firstIndex) / BitArray.LONG_SIZE);
activemq-client/src/main/java/org/apache/activemq/util/BitArrayBin.java,162,if (firstIndex >= 0) {
activemq-client/src/main/java/org/apache/activemq/util/BitArrayBin.java,163,answer = (int)((index - firstIndex) - (BitArray.LONG_SIZE * getBin(index)));
activemq-client/src/main/java/org/apache/activemq/util/BitArrayBin.java,171,if (firstIndex >=0) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,640,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,641,LOG.debug("Recover: " + flag);
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2523,result = scheduler = new Scheduler("ActiveMQConnection["+info.getConnectionId().getValue()+"] Scheduler");
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2524,scheduler.start();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2184,return createInputStream(dest, messageSelector, noLocal,  -1);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1347,if (!session.isTransacted()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1354,LOG.debug(getConsumerId() + " tracking transacted redelivery of duplicate: " + md.getMessage());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1356,boolean needsPoisonAck = false;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1357,synchronized (deliveredMessages) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1358,if (previouslyDeliveredMessages != null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1359,previouslyDeliveredMessages.put(md.getMessage().getMessageId(), true);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1363,needsPoisonAck = true;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1366,if (needsPoisonAck) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1371,LOG.warn("acking duplicate delivery as poison, redelivery must be pending to another"
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1372,+ " consumer on this connection, failoverRedeliveryWaitPeriod="
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1376,if (transactedIndividualAck) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1377,immediateIndividualTransactedAck(md);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1379,session.sendAck(new MessageAck(md, MessageAck.DELIVERED_ACK_TYPE, 1));
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,775,ack.setFirstMessageId(node.getMessageId());
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,776,ack.setLastMessageId(node.getMessageId());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,194,long seq = persistenceAdapter.getStoreSequenceIdForMessageId(ack.getLastMessageId(), destination)[0];
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,187,try {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,189,registry.getRegistryMutext().wait(timeout);
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,192,broker = registry.lookup(brokerName);
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,32,import javax.jms.QueueConnection;
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,76,private List<DestinationBridge> inboundBridges = new CopyOnWriteArrayList<DestinationBridge>();
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,77,private List<DestinationBridge> outboundBridges = new CopyOnWriteArrayList<DestinationBridge>();
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,89,DestinationBridge bridge = (DestinationBridge)lru.getValue();
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,483,if (this.foreignConnection.compareAndSet((QueueConnection)connection, null)) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,618,private ThreadFactory factory = new ThreadFactory() {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,151,private long waitForSlaveTimeout = 600000L;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,871,while (!isStarted() && !stopped.get() && !waitSucceeded) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,549,scheduler.schedualPeriodically(expireMessagesTask, getExpireMessagesPeriod());
activemq-client/src/main/java/org/apache/activemq/thread/Scheduler.java,34,public Scheduler (String name) {
activemq-client/src/main/java/org/apache/activemq/thread/Scheduler.java,38,public void executePeriodically(final Runnable task, long period) {
activemq-client/src/main/java/org/apache/activemq/thread/Scheduler.java,39,TimerTask timerTask = new SchedulerTimerTask(task);
activemq-client/src/main/java/org/apache/activemq/thread/Scheduler.java,40,timer.schedule(timerTask, period, period);
activemq-client/src/main/java/org/apache/activemq/thread/Scheduler.java,41,timerTasks.put(task, timerTask);
activemq-client/src/main/java/org/apache/activemq/thread/Scheduler.java,48,public synchronized void schedualPeriodically(final Runnable task, long period) {
activemq-client/src/main/java/org/apache/activemq/thread/Scheduler.java,78,if (this.timer != null) {
activemq-client/src/main/java/org/apache/activemq/thread/Scheduler.java,79,this.timer.cancel();
activemq-client/src/main/java/org/apache/activemq/util/BitArrayBin.java,30,private LinkedList<BitArray> list;
activemq-client/src/main/java/org/apache/activemq/util/BitArrayBin.java,32,private int firstIndex = -1;
activemq-client/src/main/java/org/apache/activemq/util/BitArrayBin.java,172,result = firstIndex;
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,248,destinationsLock.readLock().lock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,249,try{
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,250,return destinations;
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,252,destinationsLock.readLock().unlock();
activemq-broker/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,58,Destination existing = this.getDestinationMap().get(destination);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,131,if (context != null && context.getXid() != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,134,onAdd(messageId, sequenceId, message.getPriority());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,295,Set<Destination> destinationSet = regionBroker.getDestinations(convert(commandDestination));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,296,for (Destination destination : destinationSet) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,103,case QUEUE_TYPE:
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,104,return new ActiveMQQueue(name);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,105,case TOPIC_TYPE:
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,106,return new ActiveMQTopic(name);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,107,case TEMP_QUEUE_TYPE:
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,108,return new ActiveMQTempQueue(name);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,109,case TEMP_TOPIC_TYPE:
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,110,return new ActiveMQTempTopic(name);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,111,default:
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,112,throw new IllegalArgumentException("Invalid default destination type: " + defaultType);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,121,return (ActiveMQDestination)dest;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,136,return new ActiveMQTempQueue(((TemporaryQueue)dest).getQueueName());
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,139,return new ActiveMQTempTopic(((TemporaryTopic)dest).getTopicName());
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,142,return new ActiveMQQueue(((Queue)dest).getQueueName());
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,145,return new ActiveMQTopic(((Topic)dest).getTopicName());
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,170,return compare(this, (ActiveMQDestination)that);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,225,final int len = physicalName.length();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,229,for (int i = 0; i < len; i++) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,322,ActiveMQDestination d = (ActiveMQDestination)o;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,345,this.options = (Map<String, String>)in.readObject();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,350,case QUEUE_TYPE:
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,351,return "Queue";
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,352,case TOPIC_TYPE:
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,353,return "Topic";
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,354,case TEMP_QUEUE_TYPE:
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,355,return "TempQueue";
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,356,case TEMP_TOPIC_TYPE:
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,357,return "TempTopic";
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,358,default:
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,359,throw new IllegalArgumentException("Invalid destination type: " + getDestinationType());
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,263,protected void dispatchPending() throws IOException {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,620,protected void dispatchPending() throws IOException {
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,120,if (pending.isEmpty(topic)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,121,topic.recoverRetroactiveMessages(context, this);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,300,protected void recoverRetroactiveMessages(ConnectionContext context, Subscription subscription) throws Exception {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,113,private final String QOS_PROPERTY_NAME = "QoSPropertyName";
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,480,topicName = new UTF8Buffer(message.getDestination().getPhysicalName().replace('.', '/'));
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,36,import org.apache.activemq.broker.region.policy.NoSubscriptionRecoveryPolicy;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,93,subscriptionRecoveryPolicy = new NoSubscriptionRecoveryPolicy();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,657,public void setSubscriptionRecoveryPolicy(SubscriptionRecoveryPolicy subscriptionRecoveryPolicy) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,658,this.subscriptionRecoveryPolicy = subscriptionRecoveryPolicy;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,453,EncodedMessage em = new EncodedMessage(delivery.getMessageFormat(), buffer.data, buffer.offset, buffer.length);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,454,final ActiveMQMessage message = (ActiveMQMessage) getInboundTransformer().transform(em);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,455,current = null;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,458,message.setJMSDestination(destination);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,460,message.setProducerId(producerId);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,465,DeliveryState remoteState = delivery.getRemoteState();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,467,TransactionalState s = (TransactionalState) remoteState;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,468,long txid = toLong(s.getTxnId());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,469,message.setTransactionId(new LocalTransactionId(connectionId, txid));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,472,message.onSend();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,473,sendToActiveMQ(message, new ResponseHandler() {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,479,Rejected rejected = new Rejected();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,480,ErrorCondition condition = new ErrorCondition();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,481,condition.setCondition(Symbol.valueOf("failed"));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,482,condition.setDescription(er.getException().getMessage());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,483,rejected.setError(condition);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,484,delivery.disposition(rejected);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,487,receiver.flow(1);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,488,delivery.settle();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,489,pumpProtonToSocket();
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOOutputStream.java,35,private static final int BUFFER_SIZE = 8192;
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOOutputStream.java,43,private volatile long writeTimestamp = -1;//concurrent reads of this value
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOOutputStream.java,84,buffer[count++] = (byte)b;
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOOutputStream.java,167,int lastRemaining = remaining - 1;
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOOutputStream.java,175,if (remaining == lastRemaining) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOOutputStream.java,189,lastRemaining = remaining;
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOOutputStream.java,193,out.write(plain);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,187,Metadata rc = new Metadata();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,364,metadata = new Metadata();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,407,metadata = new Metadata();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,48,TabularType tt = new TabularType("HealthStatus", "HealthStatus", ct, new String[]{"healthId", "level", "message", "resource"});
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,95,if (storeSize != 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,98,answer.add(new HealthStatus("org.apache.activemq.StoreLimit", "WARNING", "Message Store size is within " + val + "% of its limit", adapter.toString()));
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,104,String message = "Store limit is " + storeLimit / (1024 * 1024) +
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,126,int val = (int) ((storeSize * 100) / storeLimit);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,127,if (val > 90) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,128,answer.add(new HealthStatus("org.apache.activemq.TempStoreLimit", "WARNING", "TempMessage Store size is within " + val + "% of its limit", adapter.toString()));
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,157,if (storeSize != 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,160,answer.add(new HealthStatus("org.apache.activemq.JobSchedulerLimit", "WARNING", "JobSchedulerMessage Store size is within " + val + "% of its limit", scheduler.toString()));
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,166,String message = "JobSchedulerStore limit is " + storeLimit / (1024 * 1024) +
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,176,if (answer != null && !answer.isEmpty()){
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,178,for (HealthStatus hs: answer){
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,179,currentState += hs + " , ";
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,181,currentState += " }";
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,183,this.currentState="Good";
activemq-client/src/main/java/org/apache/activemq/advisory/AdvisorySupport.java,109,return new ActiveMQTopic(QUEUE_CONSUMER_ADVISORY_TOPIC_PREFIX + destination.getPhysicalName());
activemq-client/src/main/java/org/apache/activemq/advisory/AdvisorySupport.java,111,return new ActiveMQTopic(TOPIC_CONSUMER_ADVISORY_TOPIC_PREFIX + destination.getPhysicalName());
activemq-client/src/main/java/org/apache/activemq/advisory/AdvisorySupport.java,121,return new ActiveMQTopic(QUEUE_PRODUCER_ADVISORY_TOPIC_PREFIX + destination.getPhysicalName());
activemq-client/src/main/java/org/apache/activemq/advisory/AdvisorySupport.java,123,return new ActiveMQTopic(TOPIC_PRODUCER_ADVISORY_TOPIC_PREFIX + destination.getPhysicalName());
activemq-client/src/main/java/org/apache/activemq/filter/CompositeDestinationFilter.java,49,return true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,169,dest.addSubscription(context, sub);
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,170,rc.add(sub);
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,301,subscriptions.put(info.getConsumerId(), sub);
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,323,dest.addSubscription(context, sub);
activemq-broker/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,49,protected SecurityContext checkSecurityContext(ConnectionContext context) throws SecurityException {
activemq-broker/src/main/java/org/apache/activemq/transport/TransportLogger.java,154,public void finalize() throws Throwable {
activemq-broker/src/main/java/org/apache/activemq/transport/TransportLogger.java,156,view.unregister();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1612,public void finalize() throws Throwable{
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1613,Scheduler s = this.scheduler;
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1614,if (s != null){
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1615,s.stop();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,851,if (version.equals(Stomp.V1_2) && sub.getAckMode() != Stomp.Headers.Subscribe.AckModeValues.AUTO) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,127,try {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,128,if (dataOut != null) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,132,int pos = bs.offset;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,133,ByteSequenceData.writeIntBig(bs, length);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,134,bs.offset = pos;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,136,setContent(bs);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,137,bytesOut = null;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,138,dataOut = null;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,141,throw new RuntimeException(ioe.getMessage(), ioe); // TODO verify
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,801,this.bytesOut = null;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,802,if (dataIn != null) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,803,try {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,809,this.dataIn = null;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,810,this.dataOut = null;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,811,setReadOnlyBody(true);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,819,ActiveMQConnection connection = getConnection();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,820,if (connection != null && connection.isUseCompression()) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,823,try {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,824,os.write(new byte[4]);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,826,throw JMSExceptionSupport.create(e);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,828,length = 0;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,829,compressed = true;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,830,final Deflater deflater = new Deflater(Deflater.BEST_SPEED);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,831,os = new FilterOutputStream(new DeflaterOutputStream(os, deflater)) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,833,public void write(byte[] arg0) throws IOException {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,834,length += arg0.length;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,835,out.write(arg0);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,839,public void write(byte[] arg0, int arg1, int arg2) throws IOException {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,840,length += arg2;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,841,out.write(arg0, arg1, arg2);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,845,public void write(int arg0) throws IOException {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,846,length++;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,847,out.write(arg0);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,851,public void close() throws IOException {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,852,super.close();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,853,deflater.end();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,878,try {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,879,DataInputStream dis = new DataInputStream(is);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,880,length = dis.readInt();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,881,dis.close();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,883,throw JMSExceptionSupport.create(e);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,885,is = new InflaterInputStream(is);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,908,int length = bytes.getLength();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,909,ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,910,bytesOut.write(new byte[4]);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,911,DeflaterOutputStream os = new DeflaterOutputStream(bytesOut);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,912,DataOutputStream dataOut = new DataOutputStream(os);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,913,dataOut.write(bytes.data, bytes.offset, bytes.length);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,914,dataOut.flush();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,915,dataOut.close();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,916,bytes = bytesOut.toByteSequence();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,917,ByteSequenceData.writeIntBig(bytes, length);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,918,bytes.offset = 0;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,919,setContent(bytes);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,923,protected void finalize() throws Throwable {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,926,if (dataIn != null) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,928,dataIn.close();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1367,MessageAck poisonAck = new MessageAck(md, MessageAck.POSION_ACK_TYPE, 1);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1368,poisonAck.setFirstMessageId(md.getMessage().getMessageId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1369,poisonAck.setPoisonCause(new JMSException("Duplicate dispatch with transacted redeliver pending on another consumer, connection: "
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1370,+ session.getConnection().getConnectionInfo().getConnectionId()));
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1373,+ failoverRedeliveryWaitPeriod + ". Message: " + md + ", poisonAck: " + poisonAck);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1374,session.sendAck(poisonAck);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,107,private final LinkedHashMap<MessageId, QueueMessageReference> pagedInMessages = new LinkedHashMap<MessageId, QueueMessageReference>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1026,List<MessageReference> toExpire = new ArrayList<MessageReference>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1028,pagedInPendingDispatchLock.writeLock().lock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1029,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1030,addAll(pagedInPendingDispatch.values(), browseList, max, toExpire);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1031,for (MessageReference ref : toExpire) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1032,pagedInPendingDispatch.remove(ref);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1033,if (broker.isExpired(ref)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1037,messageExpired(connectionContext, ref);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1041,pagedInPendingDispatchLock.writeLock().unlock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1043,toExpire.clear();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1044,pagedInMessagesLock.readLock().lock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1045,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1046,addAll(pagedInMessages.values(), browseList, max, toExpire);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1048,pagedInMessagesLock.readLock().unlock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1050,for (MessageReference ref : toExpire) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1051,if (broker.isExpired(ref)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1055,messageExpired(connectionContext, ref);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1057,pagedInMessagesLock.writeLock().lock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1058,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1059,pagedInMessages.remove(ref.getMessageId());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1061,pagedInMessagesLock.writeLock().unlock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1118,QueueMessageReference ref = this.pagedInMessages.get(msgId);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1383,Set<QueueMessageReference> set = new LinkedHashSet<QueueMessageReference>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1392,List<QueueMessageReference> list = new ArrayList<QueueMessageReference>(set);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1393,for (QueueMessageReference ref : list) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1396,moveMessageTo(context, ref, dest);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1499,ArrayList<QueueMessageReference> alreadyDispatchedMessages = null;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1502,alreadyDispatchedMessages = new ArrayList<QueueMessageReference>(pagedInMessages.values());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1521,for (QueueMessageReference node : alreadyDispatchedMessages) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1808,if (!pagedInMessages.containsKey(ref.getMessageId())) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1809,pagedInMessages.put(ref.getMessageId(), ref);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2079,message = pagedInMessages.get(messageId);
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,689,context.setBroker(getRoot());
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,192,taskRunner = null;
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,176,message.setMarshalledProperties(null);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,575,if (!redeliveredWaitingDispatch.isEmpty()) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,176,this.rollback();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,178,throw IOExceptionSupport.create(e);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,190,if (addMessageStatement != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,191,addMessageStatement.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,192,addMessageStatement = null;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,194,if (removedMessageStatement != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,195,removedMessageStatement.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,196,removedMessageStatement = null;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,198,if (updateLastAckStatement != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,199,updateLastAckStatement.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,200,updateLastAckStatement = null;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,202,connection.rollback();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,88,private static final int DEFAULT_CACHE_SIZE = 5000;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,93,private final LongSequenceGenerator messageIdGenerator = new LongSequenceGenerator();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,613,private String getClientId() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,217,if (this.batchStatments) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,235,if (this.batchStatments) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,242,if (!this.batchStatments) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,257,if (this.batchStatments) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,267,if (this.batchStatments) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,274,if (!this.batchStatments) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,350,if (this.batchStatments) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,362,if (this.batchStatments) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,369,if (!this.batchStatments && s != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,440,if (this.batchStatments) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,454,if (this.batchStatments) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,461,if (!this.batchStatments) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,477,if (this.batchStatments) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,491,if (this.batchStatments) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,499,if (!this.batchStatments) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,891,return this.batchStatments;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,132,mqttTransport.sendToActiveMQ(command);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,151,mqttTransport.sendToMQTT(PING_RESP_FRAME);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,24,import org.apache.activemq.broker.BrokerContext;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,78,handleException(e);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,98,n.oneway(command);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,143,public void handleException(IOException e) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,145,super.onException(e);
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,134,if (sequence == null) {
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,136,int size = 1;
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,137,if (command != null) {
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,139,DataStructure c = (DataStructure)command;
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,140,byte type = c.getDataStructureType();
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,141,DataStreamMarshaller dsm = (DataStreamMarshaller)dataMarshallers[type & 0xFF];
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,142,if (dsm == null) {
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,143,throw new IOException("Unknown data type: " + type);
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,145,if (tightEncodingEnabled) {
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,147,BooleanStream bs = new BooleanStream();
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,148,size += dsm.tightMarshal1(this, c, bs);
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,149,size += bs.marshalledSize();
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,151,bytesOut.restart(size);
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,152,if (!sizePrefixDisabled) {
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,153,bytesOut.writeInt(size);
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,155,bytesOut.writeByte(type);
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,156,bs.marshal(bytesOut);
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,157,dsm.tightMarshal2(this, c, bytesOut, bs);
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,158,sequence = bytesOut.toByteSequence();
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,161,bytesOut.restart();
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,162,if (!sizePrefixDisabled) {
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,163,bytesOut.writeInt(0); // we don't know the final size
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,167,bytesOut.writeByte(type);
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,168,dsm.looseMarshal(this, c, bytesOut);
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,169,sequence = bytesOut.toByteSequence();
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,171,if (!sizePrefixDisabled) {
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,172,size = sequence.getLength() - 4;
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,173,int pos = sequence.offset;
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,174,ByteSequenceData.writeIntBig(sequence, size);
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,175,sequence.offset = pos;
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,180,bytesOut.restart(5);
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,181,bytesOut.writeInt(size);
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,182,bytesOut.writeByte(NULL_TYPE);
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,43,private static final Object DISCONNECT = new Object();
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,134,if (command == DISCONNECT) {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,135,transportListener.onException(new TransportDisposedIOException("Peer (" + peer.toString() + ") disposed."));
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,137,transport.receiveCounter++;
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,138,transportListener.onCommand(command);
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,238,if( command == DISCONNECT ) {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,239,tl.onException(new TransportDisposedIOException("Peer (" + peer.toString() + ") disposed."));
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,241,tl.onCommand(command);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,21,import java.util.concurrent.atomic.AtomicBoolean;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,68,private final AtomicBoolean prefetchWindowOpen = new AtomicBoolean(false);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,292,if (destination != null && !ack.isInTransaction()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,293,destination.getDestinationStatistics().getDequeues().add(ack.getMessageCount());
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,312,prefetchWindowOpen.set(true);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,316,if (prefetchWindowOpen.get()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,320,prefetchWindowOpen.set(false);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,330,pullTimeout();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,343,private final void pullTimeout() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,345,if (prefetchWindowOpen.compareAndSet(true, false)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,362,return (int)(dispatchedCounter.get() - dequeueCounter.get());
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,461,return getDispatchedQueueSize() >= info.getPrefetchSize() && !prefetchWindowOpen.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,552,prefetchWindowOpen.set(false);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,882,acknowledge(md, MessageAck.DELIVERED_ACK_TYPE);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,533,try {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,534,PUBLISH publish = new PUBLISH();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,535,publish.topicName(connect.willTopic());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,536,publish.qos(connect.willQos());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,537,publish.payload(connect.willMessage());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,538,ActiveMQMessage message = convertMessage(publish);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,539,message.setProducerId(producerId);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,540,message.onSend();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,541,sendToActiveMQ(message, null);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,543,LOG.warn("Failed to publish Will Message " + connect.willMessage());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,600,try {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,601,getMQTTTransport().stop();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,603,LOG.error("Failed to stop MQTTT Transport ", e);
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,56,ObjectName[] queues = broker.getTopics();
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,57,return getManagedObjects(queues, TopicViewMBean.class);
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,65,ObjectName[] queues = broker.getDurableTopicSubscribers();
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,66,return getManagedObjects(queues, DurableSubscriptionViewMBean.class);
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,74,ObjectName[] queues = broker.getInactiveDurableTopicSubscribers();
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,75,return getManagedObjects(queues, DurableSubscriptionViewMBean.class);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,314,return topic.qos();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,441,MessageId id = new MessageId(producerId, messageIdGenerator.getNextSequenceId());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,464,short id = (short) message.getMessageId().getProducerSequenceId();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,465,result.messageId(id);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransport.java,29,import javax.net.SocketFactory;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransport.java,31,import org.apache.activemq.transport.nio.NIOOutputStream;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransport.java,32,import org.apache.activemq.transport.nio.SelectorManager;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransport.java,33,import org.apache.activemq.transport.nio.SelectorSelection;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransport.java,34,import org.apache.activemq.transport.tcp.TcpTransport;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransport.java,35,import org.apache.activemq.util.IOExceptionSupport;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransport.java,36,import org.apache.activemq.util.ServiceStopper;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransport.java,37,import org.apache.activemq.wireformat.WireFormat;
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,503,if (trackTransactions && info != null) {
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,520,if (trackTransactions && info != null) {
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,537,if (trackTransactions && info != null) {
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,554,if (trackTransactions && info != null) {
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,571,if (trackTransactions && info != null) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,629,Tracked tracked = stateTracker.track(command);
activemq-client/src/main/java/org/apache/activemq/RedeliveryPolicy.java,99,long nextDelay;
activemq-client/src/main/java/org/apache/activemq/RedeliveryPolicy.java,101,if (previousDelay == 0) {
activemq-client/src/main/java/org/apache/activemq/RedeliveryPolicy.java,102,nextDelay = redeliveryDelay;
activemq-client/src/main/java/org/apache/activemq/RedeliveryPolicy.java,110,nextDelay = previousDelay;
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,842,if (message.isExpired() || connection.isDuplicate(ActiveMQSession.this, message)) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,844,continue;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,74,private final ActiveMQConnection connection;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,76,private final ConnectionId connectionId;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,88,this.connectionId = connection.getConnectionInfo().getConnectionId();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,234,this.transactionId = new LocalTransactionId(connectionId, localTransactionIdGenerator.getNextSequenceId());
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,677,private String getResourceManagerId() throws JMSException {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,695,TransactionInfo info = new TransactionInfo(connectionId, transactionId, TransactionInfo.BEGIN);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,699,LOG.debug("Started XA transaction: " + transactionId);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,708,TransactionInfo info = new TransactionInfo(connectionId, transactionId, TransactionInfo.END);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,712,LOG.debug("Ended XA transaction: " + transactionId);
activemq-client/src/main/java/org/apache/activemq/command/XATransactionId.java,105,for (int i = 0; i < globalTransactionId.length; i++) {
activemq-client/src/main/java/org/apache/activemq/command/XATransactionId.java,106,s.append(Integer.toHexString(globalTransactionId[i]));
activemq-client/src/main/java/org/apache/activemq/command/XATransactionId.java,109,for (int i = 0; i < branchQualifier.length; i++) {
activemq-client/src/main/java/org/apache/activemq/command/XATransactionId.java,110,s.append(Integer.toHexString(branchQualifier[i]));
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionFactory.java,101,throw new JMSException(e.getMessage());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,204,cleanup();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,207,physicalConnection.close();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,208,destroyed = true;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,238,localAndXATransaction.cleanup();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,22,import javax.jms.Connection;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,24,import javax.jms.XAConnection;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,25,import javax.jms.XASession;
activemq-ra/src/main/java/org/apache/activemq/ra/LocalAndXATransaction.java,33,private final TransactionContext transactionContext;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,171,log.debug("JMS Session is no longer running (maybe due to loss of connection?), marking ServerSesison as stale");
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,177,log.debug("Endpoint failed to process message.", e);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,179,log.info("Endpoint failed to process message. Reason: " + e.getMessage());
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,258,return "ServerSessionImpl:" + serverSessionId;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,224,for (Iterator i = l.iterator(); i.hasNext();) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,225,dispatchToSession((MessageDispatch)i.next());
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,228,LOG.error("Error redispatching unconsumed messages from stale session", t);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,286,StringTokenizer iter = new StringTokenizer(physicalName, PATH_SEPERATOR);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,287,while (iter.hasMoreTokens()) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,288,String name = iter.nextToken().trim();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,289,if (name.length() == 0) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,290,continue;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,292,l.add(name);
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMapNode.java,115,answer.addAll(removeValues());
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMapNode.java,173,answer.addAll(values);
activemq-client/src/main/java/org/apache/activemq/filter/PrefixDestinationFilter.java,39,this.prefixes = prefixes;
activemq-client/src/main/java/org/apache/activemq/thread/DedicatedTaskRunner.java,72,LOG.trace("Shutdown timeout: {} task: {}", task);
activemq-client/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,92,LOG.trace("Shutdown timeout: {} task: {}", task);
activemq-client/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,135,synchronized( runable ) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,184,Response response = service(command);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,186,dispatchSync(response);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnector.java,214,Connection connection = createConnection(transport);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnector.java,215,connection.start();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,292,LOG.warn("No topics defined for Subscription " + command);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransport.java,103,doConsume(AmqpSupport.toBuffer(inputBuffer));
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,317,void onUnSubscribe(UNSUBSCRIBE command) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,202,throw new MQTTProtocolException("All ready connected.");
activemq-broker/src/main/java/org/apache/activemq/broker/Connection.java,19,import java.io.IOException;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,23,import java.util.HashMap;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,24,import java.util.Iterator;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,25,import java.util.LinkedList;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,26,import java.util.List;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,27,import java.util.Map;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,28,import java.util.Properties;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,264,private ThreadFactory factory = new ThreadFactory() {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,30,import org.apache.activemq.command.KeepAliveInfo;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,53,private final AtomicBoolean commandReceived = new AtomicBoolean(true);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,60,private long readCheckTime = DEFAULT_CHECK_TIME_MILLS;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,61,private long initialDelayTime = DEFAULT_CHECK_TIME_MILLS;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,66,long lastRunTime;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,69,long now = System.currentTimeMillis();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,70,long elapsed = (now - lastRunTime);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,72,if (lastRunTime != 0 && LOG.isDebugEnabled()) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,73,LOG.debug("" + elapsed + " ms elapsed since last read check.");
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,81,if (!allowReadCheck(elapsed)) { // FUNKY qdox bug does not allow me to inline this expression.
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,82,LOG.debug("Aborting read check.. Not enough time elapsed since last read check.");
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,86,lastRunTime = now;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,87,readCheck();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,92,return elapsed > (readCheckTime * 9 / 10);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,109,final void readCheck() {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,110,int currentCounter = next.getReceiveCounter();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,111,int previousCounter = lastReceiveCounter.getAndSet(currentCounter);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,117,if (inReceive.get() || currentCounter != previousCounter) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,118,if (LOG.isTraceEnabled()) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,119,LOG.trace("A receive is in progress");
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,121,return;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,123,if (!commandReceived.get() && monitorStarted.get() && !ASYNC_TASKS.isTerminating()) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,124,if (LOG.isDebugEnabled()) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,125,LOG.debug("No message received since last read check for " + toString() + "! Throwing InactivityIOException.");
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,127,ASYNC_TASKS.execute(new Runnable() {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,128,public void run() {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,132,onException(new InactivityIOException("Channel was inactive for too (>" + readCheckTime + ") long: " + next.getRemoteAddress()));
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,136,if (LOG.isTraceEnabled()) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,137,LOG.trace("Message received since last read check, resetting flag: ");
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,140,commandReceived.set(false);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,144,commandReceived.set(true);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,179,public long getReadCheckTime() {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,180,return readCheckTime;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,183,public void setReadCheckTime(long readCheckTime) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,184,this.readCheckTime = readCheckTime;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,187,public long getInitialDelayTime() {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,188,return initialDelayTime;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,191,public void setInitialDelayTime(long initialDelayTime) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,192,this.initialDelayTime = initialDelayTime;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,226,if (readCheckTime > 0) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,230,if (readCheckTime > 0) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,238,if (readCheckTime > 0) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,239,READ_CHECK_TIMER.schedule(readCheckerTask, initialDelayTime, readCheckTime);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,87,private static final double MQTT_KEEP_ALIVE_GRACE_PERIOD= 1.5;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,567,long keepAliveMSWithGracePeriod = (long) (keepAliveMS * MQTT_KEEP_ALIVE_GRACE_PERIOD);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,571,if (keepAliveMSWithGracePeriod == 0 && defaultKeepAlive > 0) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,572,keepAliveMSWithGracePeriod = defaultKeepAlive;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,576,monitor.setReadCheckTime(keepAliveMSWithGracePeriod);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,577,monitor.setInitialDelayTime(keepAliveMS);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,445,msg.setPersistent(command.qos() != QoS.AT_MOST_ONCE);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,32,import org.fusesource.mqtt.codec.MQTTFrame;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,73,TRACE.trace("Received: \n" + command);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,76,protocolConverter.onMQTTCommand((MQTTFrame) command);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,94,TRACE.trace("Sending: \n" + command);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,389,ActiveMQMessage message = convertMessage(command);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,452,String topicName = command.topicName().toString().replaceAll("/", ".");
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,672,String result = name.replace('#', '>');
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,673,result = result.replace('+', '*');
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,674,result = result.replace('/', '.');
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,675,return result;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,24,import javax.jms.Destination;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,118,serverSessionPool.closeIdleSessions();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,169,session.run();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,265,int activeCount = closeIdleSessions();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,281,activeCount = closeIdleSessions();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,286,protected int closeIdleSessions() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,19,import java.io.IOException;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,20,import java.util.List;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,21,import java.util.Set;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,76,if (matches == false && subs.size() == 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,90,final String selector = cache.getSelector(dest.getActiveMQDestination().getQualifiedName());
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,91,if (selector != null) {
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,19,import java.io.File;
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,20,import java.io.FileInputStream;
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,21,import java.io.FileOutputStream;
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,22,import java.io.IOException;
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,23,import java.io.ObjectInputStream;
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,24,import java.io.ObjectOutputStream;
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,25,import java.util.concurrent.ConcurrentHashMap;
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,54,private ConcurrentHashMap<String, String> subSelectorCache = new ConcurrentHashMap<String, String>();
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,96,subSelectorCache.put(info.getDestination().getQualifiedName(), selector);
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,108,subSelectorCache = (ConcurrentHashMap<String, String>) in.readObject();
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,151,public String getSelector(final String destination) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQPrefetchPolicy.java,35,public static final int DEFAULT_OPTIMIZE_DURABLE_TOPIC_PREFETCH=1000;
activemq-client/src/main/java/org/apache/activemq/ActiveMQPrefetchPolicy.java,36,public static final int DEFAULT_INPUT_STREAM_PREFETCH=100;
activemq-client/src/main/java/org/apache/activemq/ActiveMQPrefetchPolicy.java,153,this.durableTopicPrefetch = i;
activemq-client/src/main/java/org/apache/activemq/ActiveMQPrefetchPolicy.java,154,this.queueBrowserPrefetch = i;
activemq-client/src/main/java/org/apache/activemq/ActiveMQPrefetchPolicy.java,155,this.queuePrefetch = i;
activemq-client/src/main/java/org/apache/activemq/ActiveMQPrefetchPolicy.java,156,this.topicPrefetch = i;
activemq-client/src/main/java/org/apache/activemq/ActiveMQPrefetchPolicy.java,157,this.inputStreamPrefetch = 1;
activemq-client/src/main/java/org/apache/activemq/ActiveMQPrefetchPolicy.java,158,this.optimizeDurableTopicPrefetch = i;
activemq-client/src/main/java/org/apache/activemq/ActiveMQPrefetchPolicy.java,169,public boolean equals(Object object){
activemq-client/src/main/java/org/apache/activemq/ActiveMQPrefetchPolicy.java,170,if (object instanceof ActiveMQPrefetchPolicy){
activemq-client/src/main/java/org/apache/activemq/ActiveMQPrefetchPolicy.java,173,this.queueBrowserPrefetch == other.queueBrowserPrefetch &&
activemq-client/src/main/java/org/apache/activemq/ActiveMQPrefetchPolicy.java,174,this.topicPrefetch == other.topicPrefetch &&
activemq-client/src/main/java/org/apache/activemq/ActiveMQPrefetchPolicy.java,175,this.durableTopicPrefetch == other.durableTopicPrefetch &&
activemq-client/src/main/java/org/apache/activemq/ActiveMQPrefetchPolicy.java,176,this.optimizeDurableTopicPrefetch == other.optimizeDurableTopicPrefetch &&
activemq-client/src/main/java/org/apache/activemq/ActiveMQPrefetchPolicy.java,177,this.inputStreamPrefetch == other.inputStreamPrefetch;
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,660,for (final ActiveMQMessageConsumer consumer : consumers) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,661,consumer.inProgressClearRequired();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,665,consumer.clearMessagesInProgress();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,379,List<JobLocation> values = entry.getValue();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,386,for (Long l : keys) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,387,this.index.remove(tx, l);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,397,List<JobLocation> values = entry.getValue();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,398,if (values != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,399,for (JobLocation jl : values) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,400,this.store.decrementJournalCount(tx, jl.getLocation());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,408,this.index.remove(tx, l);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,880,if (memoryUsage != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,881,memoryUsage.start();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,883,if (systemUsage.getStoreUsage() != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,884,systemUsage.getStoreUsage().start();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,886,systemUsage.getMemoryUsage().addUsageListener(this);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,887,messages.start();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,888,if (getExpireMessagesPeriod() > 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,889,scheduler.schedualPeriodically(expireMessagesTask, getExpireMessagesPeriod());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,891,doPageIn(false);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,895,if (taskRunner != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,896,taskRunner.shutdown();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,898,if (this.executor != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,899,ThreadPoolUtils.shutdownNow(executor);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,900,executor = null;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,903,scheduler.cancel(expireMessagesTask);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,905,if (flowControlTimeoutTask.isAlive()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,906,flowControlTimeoutTask.interrupt();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,909,if (messages != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,910,messages.stop();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,913,systemUsage.getMemoryUsage().removeUsageListener(this);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,914,if (memoryUsage != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,915,memoryUsage.stop();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,917,if (store != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,918,store.stop();
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,23,import java.util.Vector;
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,63,protected final ConcurrentHashMap<ConnectionId, ConnectionState> connectionStates = new ConcurrentHashMap<ConnectionId, ConnectionState>();
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,73,private int currentCacheSize;
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,74,private Map<Object,Command> messageCache = new LinkedHashMap<Object,Command>(){
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,107,private class PrepareReadonlyTransactionAction extends RemoveTransactionAction {
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,148,currentCacheSize += MESSAGE_PULL_SIZE;
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,173,for (Command msg:messageCache.values()) {
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,270,for (ConsumerState consumerState : sessionState.getConsumerStates()) {
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,473,producerState.setTransactionState(transactionState);
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,592,messageCache.put(id.intern(), pull);
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,675,transport.oneway(control);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,194,MessageAvailableConsumer consumer = (MessageAvailableConsumer)client.getConsumer(destination, request.getHeader(WebClient.selectorName));
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,196,message = (Message)request.getAttribute("message");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,197,if (message != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,200,writeResponse(request, response, message);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,201,return;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,203,long timeout = getReadTimeout(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,209,Continuation continuation = null;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,210,Listener listener = null;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,214,message = consumer.receive(10);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,219,continuation = ContinuationSupport.getContinuation(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,221,if (continuation.isExpired()) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,222,response.setStatus(HttpServletResponse.SC_NO_CONTENT);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,223,return;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,226,continuation.setTimeout(timeout);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,227,continuation.suspend();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,230,listener = (Listener)consumer.getAvailableListener();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,231,if (listener == null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,232,listener = new Listener(consumer);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,233,consumer.setAvailableListener(listener);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,237,listener.setContinuation(continuation);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,240,writeResponse(request, response, message);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,242,throw new ServletException("Could not post JMS message: " + e, e);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,289,TextMessage textMsg = (TextMessage)message;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,298,ObjectMessage objectMsg = (ObjectMessage)message;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,308,TextMessage textMsg = (TextMessage)message;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,324,synchronized(this) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,358,for(Enumeration names = message.getPropertyNames(); names.hasMoreElements();) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,360,response.setHeader(name , message.getObjectProperty(name).toString());
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,368,protected long getReadTimeout(HttpServletRequest request) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,369,long answer = defaultReadTimeout;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,371,String name = request.getParameter(readTimeoutParameter);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,372,if (name != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,373,answer = asLong(name);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,375,if (answer < 0 || answer > maximumReadTimeout) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,376,answer = maximumReadTimeout;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,378,return answer;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,403,try {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,404,Message message = consumer.receiveNoWait();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,405,continuation.setAttribute("message", message);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpWireFormat.java,25,import java.io.*;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpWireFormat.java,33,private long maxFrameSize = 1024*1024*100;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpWireFormat.java,56,if( !magicRead ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpWireFormat.java,63,if( size > maxFrameSize) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,757,protected ConnectionContext createConnectionContext() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,186,disableCache = true;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1250,LOG.warn("Duplicate message add attempt rejected. Destination: " + command.getDestination().getName() + ", Message id: " + command.getMessageId());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessor.java,92,throw new IOException("Invalid location: " + location + ", : " + e);
activemq-client/src/main/java/org/apache/activemq/util/IdGenerator.java,36,private AtomicLong sequence = new AtomicLong(1);
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,114,IntegerResponse response = (IntegerResponse) command;
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,115,if (XAResource.XA_RDONLY == response.getResult()) {
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,117,super.onResponse(command);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1025,pageInMessages(true);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1066,if (browseList.size() < getMaxBrowsePageSize()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1067,messagesLock.writeLock().lock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1068,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1069,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1070,messages.reset();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1071,while (messages.hasNext() && browseList.size() < max) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1072,MessageReference node = messages.next();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1073,if (node.isExpired()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1074,if (broker.isExpired(node)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1078,messageExpired(connectionContext, createMessageReference(node.getMessage()));
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1080,messages.remove();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1082,messages.rollback(node.getMessageId());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1083,if (browseList.contains(node.getMessage()) == false) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1084,browseList.add(node.getMessage());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1087,node.decrementReferenceCount();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1090,messages.release();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1093,messagesLock.writeLock().unlock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1102,private void addAll(Collection<? extends MessageReference> refs, List<Message> l, int maxBrowsePageSize,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1104,for (Iterator<? extends MessageReference> i = refs.iterator(); i.hasNext() && l.size() < getMaxBrowsePageSize();) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1761,int pagedInPendingSize = 0;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1762,pagedInPendingDispatchLock.readLock().lock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1763,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1764,pagedInPendingSize = pagedInPendingDispatch.size();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1766,pagedInPendingDispatchLock.readLock().unlock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,411,protected boolean isSpaceInMemoryList() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,412,return hasSpace() && isDiskListEmpty();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,745,final ActiveMQMessage jms = (ActiveMQMessage) md.getMessage();
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnection.java,19,import java.io.IOException;
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnection.java,20,import java.util.concurrent.atomic.AtomicBoolean;
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnection.java,36,private final Transport localTransport;
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnection.java,37,private final Transport remoteTransport;
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnection.java,38,private AtomicBoolean shuttingDown = new AtomicBoolean(false);
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnection.java,39,private AtomicBoolean running = new AtomicBoolean(false);
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnection.java,117,ss.stop(localTransport);
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnector.java,19,import java.io.IOException;
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnector.java,20,import java.net.URI;
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnector.java,21,import java.net.URISyntaxException;
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnector.java,22,import java.util.Iterator;
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnector.java,23,import java.util.concurrent.CopyOnWriteArrayList;
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnector.java,60,Transport remoteTransport = createRemoteTransport();
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnector.java,61,ProxyConnection connection = new ProxyConnection(localTransport, remoteTransport);
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnector.java,62,connections.add(connection);
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnector.java,136,private Transport createRemoteTransport() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnector.java,140,ct.add(false,new URI[] {localUri});
activemq-broker/src/main/java/org/apache/activemq/proxy/ProxyConnector.java,149,connections.remove(this);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQStreamMessage.java,1114,private void initializeWriting() throws MessageNotWriteableException {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,746,message.getMessageId().setBrokerSequenceId(getDestinationSequenceId());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,747,if (messages.isCacheEnabled()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,748,result = store.asyncAddQueueMessage(context, message, isOptimizeStorage());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,750,store.addMessage(context, message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,752,if (isReduceMemoryFootprint()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,753,message.clearMarshalledState();
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,127,protected final BrokerId localBrokerPath[] = new BrokerId[] { null };
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,134,protected final BrokerId remoteBrokerPath[] = new BrokerId[] { null };
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,374,ServiceSupport.dispose(localBroker);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,375,ServiceSupport.dispose(remoteBroker);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,376,return;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,466,+ configuration.getBrokerName());
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,611,|| AdvisorySupport.isDestinationAdvisoryTopic(message.getDestination())) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,620,message.setProducerId(duplexInboundLocalProducerInfo.getProducerId());
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,621,if (message.isResponseRequired() || configuration.isAlwaysSyncSend()) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,622,duplexInboundLocalBroker.asyncRequest(message, new ResponseCallback() {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,623,final int correlationId = message.getCommandId();
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,626,public void onCompletion(FutureResponse resp) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,627,try {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,628,Response reply = resp.getResult();
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,629,reply.setCorrelationId(correlationId);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,630,remoteBroker.oneway(reply);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,633,serviceRemoteException(error);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,638,duplexInboundLocalBroker.oneway(message);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,880,advisoryMessage);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1091,return new BrokerId[] { idToAppend };
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1198,&& !configuration.isSuppressDuplicateTopicSubscriptions()) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1336,info.setBrokerPath(new BrokerId[] { remoteBrokerId });
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,30,import org.apache.activemq.broker.BrokerContext;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,63,import org.fusesource.mqtt.codec.CONNACK;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,64,import org.fusesource.mqtt.codec.CONNECT;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,65,import org.fusesource.mqtt.codec.DISCONNECT;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,66,import org.fusesource.mqtt.codec.MQTTFrame;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,67,import org.fusesource.mqtt.codec.PINGREQ;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,68,import org.fusesource.mqtt.codec.PINGRESP;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,69,import org.fusesource.mqtt.codec.PUBACK;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,70,import org.fusesource.mqtt.codec.PUBCOMP;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,71,import org.fusesource.mqtt.codec.PUBLISH;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,72,import org.fusesource.mqtt.codec.PUBREC;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,73,import org.fusesource.mqtt.codec.PUBREL;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,74,import org.fusesource.mqtt.codec.SUBACK;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,75,import org.fusesource.mqtt.codec.SUBSCRIBE;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,76,import org.fusesource.mqtt.codec.UNSUBACK;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,77,import org.fusesource.mqtt.codec.UNSUBSCRIBE;
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,37,import org.apache.activemq.command.Command;
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,122,NIOOutputStream outputStream = new NIOOutputStream(channel);
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,275,doConsume((Command) command);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,103,for (Iterator<ConnectionInfo> iter = connections.values().iterator(); iter.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,132,for (Iterator<ProducerInfo> iter = producers.values().iterator(); iter.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,135,fireProducerAdvisory(context, value.getDestination(),topic, value, info.getConsumerId());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,144,fireConsumerAdvisory(context,value.getDestination(), topic, value, info.getConsumerId());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,150,for (Iterator<BrokerInfo> iter = networkBridges.keySet().iterator(); iter.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,173,public Destination addDestination(ConnectionContext context, ActiveMQDestination destination,boolean create) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,174,Destination answer = super.addDestination(context, destination,create);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,178,if( previous==null ) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,193,if( previous==null ) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,212,for(ActiveMQTopic advisoryDestination : advisoryDestinations) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,233,for(ActiveMQTopic advisoryDestination : advisoryDestinations) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,261,fireConsumerAdvisory(context,dest, topic, info.createRemoveCommand());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,275,if (!dest.isTemporary() || destinations.contains(dest)) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,276,fireProducerAdvisory(context, dest,topic, info.createRemoveCommand());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,285,if(!messageReference.isAdvisory()) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,302,if(!messageReference.isAdvisory()) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,306,fireAdvisory(context, topic,payload);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,321,fireAdvisory(context, topic,payload);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,338,advisoryMessage.setIntProperty(AdvisorySupport.MSG_PROPERTY_DISCARDED_COUNT, ((TopicSubscription)sub).discarded());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,349,public void slowConsumer(ConnectionContext context, Destination destination,Subscription subs) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,350,super.slowConsumer(context, destination,subs);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,364,public void fastProducer(ConnectionContext context,ProducerInfo producerInfo,ActiveMQDestination destination) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,404,fireAdvisory(context, topic,null,null,advisoryMessage);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,429,if (brokerInfo != null) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,430,ActiveMQMessage advisoryMessage = new ActiveMQMessage();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,431,advisoryMessage.setBooleanProperty("started", true);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,432,advisoryMessage.setBooleanProperty("createdByDuplex", createdByDuplex);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,433,advisoryMessage.setStringProperty("remoteIp", remoteIp);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,434,networkBridges.putIfAbsent(brokerInfo, advisoryMessage);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,436,ActiveMQTopic topic = AdvisorySupport.getNetworkBridgeAdvisoryTopic();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,438,ConnectionContext context = new ConnectionContext();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,439,context.setSecurityContext(SecurityContext.BROKER_SECURITY_CONTEXT);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,440,context.setBroker(getBrokerService().getBroker());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,441,fireAdvisory(context, topic, brokerInfo, null, advisoryMessage);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,451,if (brokerInfo != null) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,452,ActiveMQMessage advisoryMessage = new ActiveMQMessage();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,453,advisoryMessage.setBooleanProperty("started", false);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,454,networkBridges.remove(brokerInfo);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,456,ActiveMQTopic topic = AdvisorySupport.getNetworkBridgeAdvisoryTopic();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,458,ConnectionContext context = new ConnectionContext();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,459,context.setSecurityContext(SecurityContext.BROKER_SECURITY_CONTEXT);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,460,context.setBroker(getBrokerService().getBroker());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,461,fireAdvisory(context, topic, brokerInfo, null, advisoryMessage);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,484,protected void fireConsumerAdvisory(ConnectionContext context, ActiveMQDestination consumerDestination,ActiveMQTopic topic, Command command) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,485,fireConsumerAdvisory(context, consumerDestination,topic, command, null);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,488,protected void fireConsumerAdvisory(ConnectionContext context, ActiveMQDestination consumerDestination,ActiveMQTopic topic, Command command, ConsumerId targetConsumerId) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,491,Set<Destination>set = getDestinations(consumerDestination);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,493,for (Destination dest:set) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,502,protected void fireProducerAdvisory(ConnectionContext context,ActiveMQDestination producerDestination, ActiveMQTopic topic, Command command) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,503,fireProducerAdvisory(context,producerDestination, topic, command, null);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,506,protected void fireProducerAdvisory(ConnectionContext context, ActiveMQDestination producerDestination,ActiveMQTopic topic, Command command, ConsumerId targetConsumerId) throws Exception {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTNIOTransportFactory.java,45,private BrokerContext brokerContext = null;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTNIOTransportFactory.java,78,transport = new MQTTTransportFilter(transport, format, brokerContext);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTNIOTransportFactory.java,84,this.brokerContext = brokerService.getBrokerContext();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,31,import org.apache.activemq.command.ActiveMQBytesMessage;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,32,import org.apache.activemq.command.ActiveMQDestination;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,33,import org.apache.activemq.command.ActiveMQMapMessage;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,34,import org.apache.activemq.command.ActiveMQMessage;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,35,import org.apache.activemq.command.ActiveMQTextMessage;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,36,import org.apache.activemq.command.ActiveMQTopic;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,37,import org.apache.activemq.command.Command;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,38,import org.apache.activemq.command.ConnectionError;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,39,import org.apache.activemq.command.ConnectionId;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,40,import org.apache.activemq.command.ConnectionInfo;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,41,import org.apache.activemq.command.ConsumerId;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,42,import org.apache.activemq.command.ConsumerInfo;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,43,import org.apache.activemq.command.ExceptionResponse;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,44,import org.apache.activemq.command.MessageAck;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,45,import org.apache.activemq.command.MessageDispatch;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,46,import org.apache.activemq.command.MessageId;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,47,import org.apache.activemq.command.ProducerId;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,48,import org.apache.activemq.command.ProducerInfo;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,49,import org.apache.activemq.command.RemoveInfo;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,50,import org.apache.activemq.command.Response;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,51,import org.apache.activemq.command.SessionId;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,52,import org.apache.activemq.command.SessionInfo;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,115,public MQTTProtocolConverter(MQTTTransport mqttTransport, BrokerContext brokerContext) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,281,qos[i] = (byte) onSubscribe(command, topics[i]).ordinal();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,296,QoS onSubscribe(SUBSCRIBE command, Topic topic) throws MQTTProtocolException {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,297,ActiveMQDestination destination = new ActiveMQTopic(convertMQTTToActiveMQ(topic.name().toString()));
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,299,ConsumerId id = new ConsumerId(sessionId, consumerIdGenerator.getNextSequenceId());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,300,ConsumerInfo consumerInfo = new ConsumerInfo(id);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,301,consumerInfo.setDestination(destination);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,302,consumerInfo.setPrefetchSize(getActiveMQSubscriptionPrefetch());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,303,consumerInfo.setDispatchAsync(true);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,304,if (!connect.cleanSession() && (connect.clientId() != null)) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,308,MQTTSubscription mqttSubscription = new MQTTSubscription(this, topic.qos(), consumerInfo);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,310,subscriptionsByConsumerId.put(id, mqttSubscription);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,311,mqttSubscriptionByTopic.put(topic.name(), mqttSubscription);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,313,sendToActiveMQ(consumerInfo, null);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTSslTransportFactory.java,36,private BrokerContext brokerContext = null;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTSslTransportFactory.java,45,transport = new MQTTTransportFilter(transport, format, brokerContext);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTSslTransportFactory.java,64,this.brokerContext = brokerService.getBrokerContext();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFactory.java,36,private BrokerContext brokerContext = null;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFactory.java,44,transport = new MQTTTransportFilter(transport, format, brokerContext);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFactory.java,50,this.brokerContext = brokerService.getBrokerContext();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,52,public MQTTTransportFilter(Transport next, WireFormat wireFormat, BrokerContext brokerContext) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,54,this.protocolConverter = new MQTTProtocolConverter(this, brokerContext);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,756,if (context.isInTransaction()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,794,if (!context.isInTransaction()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,306,+ ",maxBatchSize:" + maxBatchSize;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,129,if (protocolConverter != null) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,130,protocolConverter.onTransportError();
activemq-client/src/main/java/org/apache/activemq/filter/PrefixDestinationFilter.java,44,if (destination.getDestinationType() != destinationType) return false;
activemq-client/src/main/java/org/apache/activemq/filter/PrefixDestinationFilter.java,50,if (!path[i].equals(ANY_CHILD) && !prefixes[i].equals(ANY_CHILD) && !prefixes[i].equals(path[i])) {
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,69,answer.addAll((Set)value);
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,141,protected void setEntries(List<DestinationMapEntry>  entries) {
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,145,DestinationMapEntry entry = (DestinationMapEntry)element;
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,213,if (key.isTemporary()){
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,236,if ( candidates != null ) {
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,238,for (Iterator<Object> iterator = existing.iterator(); iterator.hasNext();) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/HsqldbJDBCAdapter.java,29,statements.setBinaryDataType("OTHER");
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,19,import org.apache.activemq.broker.Broker;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,20,import org.apache.activemq.broker.BrokerService;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,21,import org.apache.activemq.broker.Connection;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,22,import org.apache.activemq.broker.ConnectionContext;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,23,import org.apache.activemq.broker.ConsumerBrokerExchange;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,24,import org.apache.activemq.broker.EmptyBroker;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,25,import org.apache.activemq.broker.ProducerBrokerExchange;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,26,import org.apache.activemq.broker.TransportConnector;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTNIOSSLTransportFactory.java,41,return new TcpTransportServer(this, location, serverSocketFactory) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTNIOTransportFactory.java,52,return new TcpTransportServer(this, location, serverSocketFactory) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,63,return configuration;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,66,public void setConfiguration(WebConsoleConfiguration configuration) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,67,this.configuration = configuration;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,78,throws IOException, MalformedObjectNameException {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,79,Set<ObjectName> brokers = findBrokers(connection);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,80,if (brokers.size() == 0) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,81,throw new IOException("No broker could be found in the JMX.");
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,83,ObjectName name = brokers.iterator().next();
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,84,return name;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,90,Set brokers = findBrokers(connection);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,94,ObjectName name = (ObjectName)brokers.iterator().next();
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,95,BrokerViewMBean mbean = (BrokerViewMBean)MBeanServerInvocationHandler.newProxyInstance(connection, name, BrokerViewMBean.class, true);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,99,public String getBrokerName() throws Exception,
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,100,MalformedObjectNameException {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,136,if (this.configuration.getJmxUser() != null) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,137,env.put("jmx.remote.credentials", new String[] {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,138,this.configuration.getJmxUser(),
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,139,this.configuration.getJmxPassword() });
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,144,for (JMXServiceURL url : jmxUrls) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,145,try {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,146,JMXConnector connector = JMXConnectorFactory.connect(url, env);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,147,connector.connect();
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,148,MBeanServerConnection connection = connector
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,149,.getMBeanServerConnection();
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,151,Set<ObjectName> brokers = findBrokers(connection);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,152,if (brokers.size() > 0) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,153,LOG.info("Connected via JMX to the broker at " + url);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,154,return connector;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,158,exception = e;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,161,if (exception != null) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,162,if (exception instanceof RuntimeException) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,163,throw (RuntimeException) exception;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,165,throw new RuntimeException(exception);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,168,throw new IllegalStateException("No broker is found at any of the "
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,169,+ jmxUrls.size() + " configured urls");
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,197,throws IOException, MalformedObjectNameException {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,198,ObjectName name;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,199,if (this.brokerName == null) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,200,name = new ObjectName("org.apache.activemq:type=Broker,brokerName=*");
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,202,name = new ObjectName("org.apache.activemq:brokerName="
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,203,+ this.brokerName + ",Type=broker");
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,206,Set<ObjectName> brokers = connection.queryNames(name, null);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,210,public void purgeQueue(ActiveMQDestination destination) throws Exception {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,211,QueueViewMBean queue = getQueue(destination.getPhysicalName());
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,212,queue.purge();
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,215,public ManagementContext getManagementContext() {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,216,throw new IllegalStateException("not supported");
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,221,protected <T> Collection<T> getManagedObjects(ObjectName[] names,
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,222,Class<T> type) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,223,MBeanServerConnection connection;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,224,try {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,225,connection = getMBeanServerConnection();
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,227,throw new RuntimeException(e);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,230,List<T> answer = new ArrayList<T>();
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,231,if (connection != null) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,232,for (int i = 0; i < names.length; i++) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,233,ObjectName name = names[i];
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,234,T value = (T) MBeanServerInvocationHandler.newProxyInstance(
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,235,connection, name, type, true);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,236,if (value != null) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,237,answer.add(value);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,241,return answer;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,250,public Object newProxyInstance(ObjectName objectName, Class interfaceClass,boolean notificationBroadcaster) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/InactiveDurableSubscriptionView.java,53,public long getSubcriptionId() {
activemq-broker/src/main/java/org/apache/activemq/broker/view/ConnectionDotFileInterceptor.java,31,import java.io.IOException;
activemq-broker/src/main/java/org/apache/activemq/broker/view/ConnectionDotFileInterceptor.java,32,import java.io.PrintWriter;
activemq-broker/src/main/java/org/apache/activemq/broker/view/ConnectionDotFileInterceptor.java,33,import java.util.Collection;
activemq-broker/src/main/java/org/apache/activemq/broker/view/ConnectionDotFileInterceptor.java,34,import java.util.HashMap;
activemq-broker/src/main/java/org/apache/activemq/broker/view/ConnectionDotFileInterceptor.java,35,import java.util.HashSet;
activemq-broker/src/main/java/org/apache/activemq/broker/view/ConnectionDotFileInterceptor.java,36,import java.util.Iterator;
activemq-broker/src/main/java/org/apache/activemq/broker/view/ConnectionDotFileInterceptor.java,37,import java.util.Map;
activemq-broker/src/main/java/org/apache/activemq/broker/view/ConnectionDotFileInterceptor.java,38,import java.util.Set;
activemq-broker/src/main/java/org/apache/activemq/broker/view/ConnectionDotFileInterceptor.java,39,import javax.management.ObjectName;
activemq-broker/src/main/java/org/apache/activemq/broker/view/ConnectionDotFileInterceptor.java,50,private String domain = "org.apache.activemq";
activemq-broker/src/main/java/org/apache/activemq/broker/view/ConnectionDotFileInterceptor.java,54,private Map<ProducerId, ProducerInfo> producers = new HashMap<ProducerId, ProducerInfo>();
activemq-broker/src/main/java/org/apache/activemq/broker/view/ConnectionDotFileInterceptor.java,55,private Map<ProducerId, Set<ActiveMQDestination>> producerDestinations = new HashMap<ProducerId, Set<ActiveMQDestination>>();
activemq-broker/src/main/java/org/apache/activemq/broker/view/ConnectionDotFileInterceptor.java,56,private Object lock = new Object();
activemq-broker/src/main/java/org/apache/activemq/broker/view/ConnectionDotFileInterceptor.java,216,String subscriberId = safeClientId + "_" + subscriber.getSessionId() + "_" + subscriber.getSubcriptionId();
activemq-broker/src/main/java/org/apache/activemq/broker/view/ConnectionDotFileInterceptor.java,231,String label = "Subscription: " + subscriber.getSessionId() + "-" + subscriber.getSubcriptionId();
activemq-console/src/main/java/org/apache/activemq/console/command/store/StoreExporter.java,21,import org.apache.activemq.command.*;
activemq-console/src/main/java/org/apache/activemq/console/command/store/StoreExporter.java,26,import org.apache.activemq.store.*;
activemq-console/src/main/java/org/apache/activemq/console/command/store/StoreExporter.java,32,import java.io.BufferedOutputStream;
activemq-console/src/main/java/org/apache/activemq/console/command/store/StoreExporter.java,33,import java.io.File;
activemq-console/src/main/java/org/apache/activemq/console/command/store/StoreExporter.java,34,import java.io.FileOutputStream;
activemq-console/src/main/java/org/apache/activemq/console/command/store/StoreExporter.java,35,import java.io.IOException;
activemq-console/src/main/java/org/apache/activemq/console/command/store/StoreExporter.java,36,import java.net.URI;
activemq-console/src/main/java/org/apache/activemq/console/command/store/StoreExporter.java,37,import java.net.URISyntaxException;
activemq-console/src/main/java/org/apache/activemq/console/command/store/StoreExporter.java,38,import java.util.HashMap;
activemq-console/src/main/java/org/apache/activemq/console/command/store/StoreExporter.java,51,private ObjectMapper mapper = new ObjectMapper();
activemq-console/src/main/java/org/apache/activemq/console/command/store/StoreExporter.java,169,jsonMap.put("name", sub.getClientId() + ":" + sub.getSubcriptionName());
activemq-console/src/main/java/org/apache/activemq/console/command/store/StoreExporter.java,183,topic.recoverSubscription(sub.getClientId(), sub.getSubcriptionName(), new MessageRecoveryListener() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,43,private boolean inTx;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,148,LOG.warn("Close failed: " + e.getMessage(), e);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,160,inTx = true;
activemq-broker/src/main/java/org/apache/activemq/filter/JAXPXPathEvaluator.java,35,private javax.xml.xpath.XPathExpression expression;
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,25,import javax.xml.parsers.DocumentBuilder;
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,26,import javax.xml.parsers.DocumentBuilderFactory;
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,28,import org.w3c.dom.Document;
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,29,import org.w3c.dom.traversal.NodeIterator;
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,30,import org.xml.sax.InputSource;
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,34,import org.apache.xpath.CachedXPathAPI;
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,35,import org.apache.xpath.objects.XObject;
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,40,private final String xpath;
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,42,public XalanXPathEvaluator(String xpath) {
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,43,this.xpath = xpath;
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,46,public boolean evaluate(Message m) throws JMSException {
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,47,if (m instanceof TextMessage) {
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,48,String text = ((TextMessage)m).getText();
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,51,BytesMessage bm = (BytesMessage)m;
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,64,DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,65,factory.setNamespaceAware(true);
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,66,DocumentBuilder dbuilder = factory.newDocumentBuilder();
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,67,Document doc = dbuilder.parse(inputSource);
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,69,CachedXPathAPI cachedXPathAPI = new CachedXPathAPI();
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,70,XObject result = cachedXPathAPI.eval(doc, xpath);
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,72,return true;
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,73,else {
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,74,NodeIterator iterator = cachedXPathAPI.selectNodeIterator(doc, xpath);
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,75,return (iterator.nextNode() != null);
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,87,DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,88,factory.setNamespaceAware(true);
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,89,DocumentBuilder dbuilder = factory.newDocumentBuilder();
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,90,Document doc = dbuilder.parse(inputSource);
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,97,CachedXPathAPI cachedXPathAPI = new CachedXPathAPI();
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,98,XObject result = cachedXPathAPI.eval(doc, xpath);
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,100,return true;
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,101,else {
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,102,NodeIterator iterator = cachedXPathAPI.selectNodeIterator(doc, xpath);
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,103,return (iterator.nextNode() != null);
activemq-camel/src/main/java/org/apache/activemq/camel/component/ActiveMQComponent.java,70,answer.setConnectionFactory(new ActiveMQConnectionFactory(brokerURL));
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,24,import java.util.HashMap;
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,35,private static final HashMap<String, Class> primClasses = new HashMap<String, Class>(8, 1.0F);
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,77,return Class.forName(className, false, loader);
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,83,final Class<?> clazz = (Class<?>) primClasses.get(className);
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,84,if (clazz != null) {
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,85,return clazz;
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,87,return Class.forName(className, false, FALLBACK_CLASS_LOADER);
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,91,static {
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,92,primClasses.put("boolean", boolean.class);
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,93,primClasses.put("byte", byte.class);
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,94,primClasses.put("char", char.class);
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,95,primClasses.put("short", short.class);
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,96,primClasses.put("int", int.class);
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,97,primClasses.put("long", long.class);
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,98,primClasses.put("float", float.class);
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,99,primClasses.put("double", double.class);
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,100,primClasses.put("void", void.class);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,228,NameParser parser = context.getNameParser("");
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,229,Name contextName = parser.parse(context.getNameInNamespace());
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,230,Name baseName = parser.parse(getLDAPPropertyValue(USER_BASE));
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,231,Name entryName = parser.parse(result.getName());
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,232,Name name = contextName.addAll(baseName);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,233,name = name.addAll(entryName);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,234,String dn = name.toString();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,64,String sql = statements.getLockCreateStatement();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,179,lockUpdateStatement = connection.prepareStatement(statements.getLockUpdateStatement());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,68,String sql = statements.getLeaseObtainStatement();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,146,statement = connection.prepareStatement(statements.getLeaseOwnerStatement());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,168,PreparedStatement statement = connection.prepareStatement(statements.getCurrentDateTime());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,193,statement = connection.prepareStatement(statements.getLeaseUpdateStatement());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,211,final String sql = statements.getLeaseUpdateStatement();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/TransactDatabaseLocker.java,49,String sql = statements.getLockCreateStatement();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1858,if (storeLimit > dirFreeSpace) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/CallerBufferingDataFileAppender.java,85,RandomAccessFile file = null;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFile.java,70,public synchronized RandomAccessFile openRandomAccessFile() throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFile.java,71,return new RandomAccessFile(file.getCanonicalPath(), "rw");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFile.java,74,public synchronized void closeRandomAccessFile(RandomAccessFile file) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessor.java,35,private final RandomAccessFile file;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,280,RandomAccessFile file = null;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,45,import org.apache.activemq.util.DataByteArrayOutputStream;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,46,import org.apache.activemq.util.IOExceptionSupport;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,47,import org.apache.activemq.util.IOHelper;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,48,import org.apache.activemq.util.IntrospectionSupport;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,49,import org.apache.activemq.util.LFUCache;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,50,import org.apache.activemq.util.LRUCache;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,88,private RandomAccessFile readFile;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,90,private RandomAccessFile writeFile;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,92,private RandomAccessFile recoveryFile;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,380,writeFile = new RandomAccessFile(file, "rw");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,381,readFile = new RandomAccessFile(file, "r");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,400,recoveryFile = new RandomAccessFile(getRecoveryFile(), "rw");
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1998,protected void registerNetworkConnectorMBean(NetworkConnector connector) throws IOException {
activemq-http/src/main/java/org/apache/activemq/transport/ws/StompSocket.java,126,return null;
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,289,return this.maxBrowsePageSize;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1531,if (!added) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AMQPSslTransportFactory.java,28,import java.util.HashMap;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AMQPSslTransportFactory.java,29,import java.util.Map;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AMQPSslTransportFactory.java,56,if( transport instanceof MutexTransport ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AMQPSslTransportFactory.java,57,transport = ((MutexTransport)transport).getNext();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioSslTransport.java,19,import org.apache.activemq.transport.nio.NIOSSLTransport;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioSslTransport.java,20,import org.apache.activemq.wireformat.WireFormat;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioSslTransport.java,24,import javax.net.SocketFactory;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioSslTransport.java,51,doConsume(AmqpSupport.toBuffer(plain));
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,201,protected volatile CountDownLatch transportInterruptionProcessingComplete;
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2012,this.transportInterruptionProcessingComplete = new CountDownLatch(dispatchers.size() - (advisoryConsumer != null ? 1:0));
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2013,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2014,LOG.debug("transport interrupted, dispatchers: " + transportInterruptionProcessingComplete.getCount());
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2016,signalInterruptionProcessingNeeded();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2020,s.clearMessagesInProgress();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2024,connectionConsumer.clearMessagesInProgress();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2451,CountDownLatch cdl = this.transportInterruptionProcessingComplete;
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2452,if (cdl != null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2453,if (!closed.get() && !transportFailed.get() && cdl.getCount()>0) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2454,LOG.warn("dispatch paused, waiting for outstanding dispatch interruption processing (" + cdl.getCount() + ") to complete..");
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2455,cdl.await(10, TimeUnit.SECONDS);
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2462,CountDownLatch cdl = this.transportInterruptionProcessingComplete;
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2463,if (cdl != null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2464,cdl.countDown();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2465,try {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2466,signalInterruptionProcessingComplete();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2471,private void signalInterruptionProcessingComplete() throws InterruptedException {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2472,CountDownLatch cdl = this.transportInterruptionProcessingComplete;
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2473,if (cdl.getCount()==0) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2475,LOG.debug("transportInterruptionProcessingComplete for: " + this.getConnectionInfo().getConnectionId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2477,this.transportInterruptionProcessingComplete = null;
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnectionConsumer.java,158,public void clearMessagesInProgress() {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnectionConsumer.java,162,this.connection.transportInterruptionProcessingComplete();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,650,void clearMessagesInProgress() {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,2004,if (consumer.getMessageListener() != null) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,264,if (transportListener != null) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,265,transportListener.transportInterupted();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,566,checkClosedOrFailed();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,630,stop();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,141,for (Iterator<ConsumerInfo> iter = consumers.values().iterator(); iter.hasNext();) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,61,public class MultiKahaDBPersistenceAdapter extends DestinationMap implements PersistenceAdapter, BrokerServiceAware {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,123,super.setEntries(entries);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,164,Object result = this.chooseValue(destination);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,252,removeAll(destination);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,262,removeAll(destination);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,313,public void start() throws Exception {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,314,Object result = this.chooseValue(matchAll);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,381,put(destination, result);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,400,public void stop() throws Exception {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,402,persistenceAdapter.stop();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1991,if (message instanceof ActiveMQMessage) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1992,ActiveMQMessage activeMessage = (ActiveMQMessage) message;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1993,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1994,activeMessage.setBooleanProperty("JMSXGroupFirstForConsumer", true, false);
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,76,protected void assignGroupToMe(MessageGroupMap messageGroupOwners, MessageReference n, String groupId) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,77,messageGroupOwners.put(groupId, info.getConsumerId());
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,78,Message message = n.getMessage();
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,79,if (message instanceof ActiveMQMessage) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,80,ActiveMQMessage activeMessage = (ActiveMQMessage)message;
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,81,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,82,activeMessage.setBooleanProperty("JMSXGroupFirstForConsumer", true, false);
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,84,LOG.warn("Failed to set boolean header: " + e, e);
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,216,throw new InvalidClientIDException("Broker: " + getBrokerName() + " - Client: " + clientId + " already connected from "
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,64,protected final ConcurrentHashMap<ConsumerId, ConsumerInfo> consumers = new ConcurrentHashMap<ConsumerId, ConsumerInfo>();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,96,consumers.put(info.getConsumerId(), info);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,259,consumers.remove(info.getConsumerId());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,561,public Map<ConsumerId, ConsumerInfo> getAdvisoryConsumers() {
activemq-broker/src/main/java/org/apache/activemq/network/ConduitBridge.java,59,protected boolean checkPaths(BrokerId[] first, BrokerId[] second) {
activemq-broker/src/main/java/org/apache/activemq/network/ConduitBridge.java,60,if (first == null || second == null) {
activemq-broker/src/main/java/org/apache/activemq/network/ConduitBridge.java,61,return true;
activemq-broker/src/main/java/org/apache/activemq/network/ConduitBridge.java,63,if (Arrays.equals(first, second)) {
activemq-broker/src/main/java/org/apache/activemq/network/ConduitBridge.java,64,return true;
activemq-broker/src/main/java/org/apache/activemq/network/ConduitBridge.java,67,if (first[0].equals(second[0]) && first[first.length - 1].equals(second[second.length - 1])) {
activemq-broker/src/main/java/org/apache/activemq/network/ConduitBridge.java,68,return false;
activemq-broker/src/main/java/org/apache/activemq/network/ConduitBridge.java,70,return true;
activemq-broker/src/main/java/org/apache/activemq/network/ConduitBridge.java,80,if (filter.matches(info.getDestination())) {
activemq-broker/src/main/java/org/apache/activemq/network/ConduitBridge.java,86,if (checkPaths(info.getBrokerPath(), ds.getRemoteInfo().getBrokerPath())) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,106,protected final IdGenerator idGenerator = new IdGenerator();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobLocation.java,191,+ repeat + ", nextTime=" + new Date(nextTime) + "]";
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,464,synchronized (this) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,465,Map.Entry<Long, List<JobLocation>> first = getNextToSchedule();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,466,if (first != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,467,List<JobLocation> list = new ArrayList<JobLocation>(first.getValue());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,468,final long executionTime = first.getKey();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,469,long nextExecutionTime = 0;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,470,if (executionTime <= currentTime) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,471,for (final JobLocation job : list) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,472,int repeat = job.getRepeat();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,473,nextExecutionTime = calculateNextExecutionTime(job, currentTime, repeat);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,474,long waitTime = nextExecutionTime - currentTime;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,475,this.scheduleTime.setWaitTime(waitTime);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,476,if (job.isCron() == false) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,479,repeat--;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,480,job.setRepeat(repeat);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,483,removeFromIndex(executionTime, job.getJobId());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,485,storeJob(job, nextExecutionTime);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,489,if (repeat == 0) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,493,fireJob(job);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,496,if (nextExecutionTime > currentTime) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,500,removeFromIndex(executionTime, job.getJobId());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,502,storeJob(job, nextExecutionTime);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,503,if (repeat != 0) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,512,String jobId = ID_GENERATOR.generateId();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,513,ByteSequence payload = getPayload(job.getLocation());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,514,schedule(jobId, payload, "", job.getDelay(), job.getPeriod(), job.getRepeat());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,515,waitTime = job.getDelay() != 0 ? job.getDelay() : job.getPeriod();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,516,this.scheduleTime.setWaitTime(waitTime);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,523,remove(executionTime);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,527,Map.Entry<Long, List<JobLocation>> nextUp = getNextToSchedule();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,528,if (nextUp != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,536,if (LOG.isDebugEnabled()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,537,LOG.debug("Not yet time to execute the job, waiting " + (executionTime - currentTime) + " ms");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,539,this.scheduleTime.setWaitTime(executionTime - currentTime);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,36,import org.apache.qpid.proton.engine.impl.LinkImpl;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,73,TransportImpl protonTransport = new TransportImpl();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,74,ConnectionImpl protonConnection = new ConnectionImpl();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,80,this.protonTransport.setProtocolTracer(new ProtocolTracer() {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,964,String name = exception.getClass().getName();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,966,name = "amqp:invalid-field";
activemq-broker/src/main/java/org/apache/activemq/broker/LockableServiceSupport.java,129,LOG.info(brokerService.getBrokerName() + ", no longer able to keep the exclusive lock so giving up being a master");
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,67,private static final UnsignedInteger DURABLE = new UnsignedInteger(2);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,211,String userName = "";
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,215,String passswd = "";
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2661,return this.schedulerSupport;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,233,if (!stopping.get()) {
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,29,import org.apache.activemq.command.ActiveMQDestination;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,30,import org.apache.activemq.command.BrokerInfo;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,31,import org.apache.activemq.command.ConnectionInfo;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,32,import org.apache.activemq.command.ConsumerInfo;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,33,import org.apache.activemq.command.DestinationInfo;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,34,import org.apache.activemq.command.Message;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,35,import org.apache.activemq.command.MessageAck;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,36,import org.apache.activemq.command.MessageDispatch;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,37,import org.apache.activemq.command.MessageDispatchNotification;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,38,import org.apache.activemq.command.MessagePull;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,39,import org.apache.activemq.command.ProducerInfo;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,40,import org.apache.activemq.command.RemoveSubscriptionInfo;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,41,import org.apache.activemq.command.Response;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,42,import org.apache.activemq.command.SessionInfo;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,43,import org.apache.activemq.command.TransactionId;
activemq-camel/src/main/java/org/apache/activemq/camel/component/CamelEndpointLoader.java,23,import javax.annotation.PreDestroy;
activemq-camel/src/main/java/org/apache/activemq/camel/component/CamelEndpointLoader.java,24,import javax.jms.Connection;
activemq-camel/src/main/java/org/apache/activemq/camel/component/CamelEndpointLoader.java,25,import javax.jms.ConnectionFactory;
activemq-camel/src/main/java/org/apache/activemq/camel/component/CamelEndpointLoader.java,27,import org.apache.activemq.EnhancedConnection;
activemq-camel/src/main/java/org/apache/activemq/camel/component/CamelEndpointLoader.java,39,import org.apache.camel.util.ObjectHelper;
activemq-spring/src/main/java/org/apache/activemq/spring/SpringSslContext.java,42,public class SpringSslContext extends SslContext {
activemq-spring/src/main/java/org/apache/activemq/spring/SpringSslContext.java,47,private String secureRandomAlgorithm="SHA1PRNG";
activemq-spring/src/main/java/org/apache/activemq/spring/SpringSslContext.java,77,KeyStore ks = createTrustManagerKeyStore();
activemq-spring/src/main/java/org/apache/activemq/spring/SpringSslContext.java,88,KeyStore ks = createKeyManagerKeyStore();
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,28,public abstract String getName() throws Exception;
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,34,public abstract void addListener(JobListener l) throws Exception;
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,40,public abstract void removeListener(JobListener l) throws Exception;
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,49,public abstract void schedule(String jobId, ByteSequence payload,long delay) throws Exception;
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,58,public abstract void schedule(String jobId, ByteSequence payload,String cronEntry) throws Exception;
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,71,public abstract void schedule(String jobId, ByteSequence payload,String cronEntry,long delay, long period, int repeat) throws Exception;
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,78,public abstract void remove(long time) throws  Exception;
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,85,public abstract void remove(String jobId) throws  Exception;
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,91,public abstract void removeAllJobs() throws Exception;
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,99,public abstract void removeAllJobs(long start,long finish) throws Exception;
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,108,public abstract long getNextScheduleTime() throws Exception;
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,115,public abstract List<Job> getNextScheduleJobs() throws Exception;
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,122,public abstract List<Job> getAllJobs() throws Exception;
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobScheduler.java,131,public abstract List<Job> getAllJobs(long start,long finish)throws Exception;
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,27,JobSchedulerFacade(SchedulerBroker broker){
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,28,this.broker=broker;
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,32,if (js !=null) {
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,39,if (js !=null) {
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,47,if (js !=null) {
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,48,return js.getAllJobs(start,finish);
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,55,if (js !=null) {
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,63,if (js !=null) {
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,71,if (js !=null) {
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,79,if (js !=null) {
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,86,if (js !=null) {
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,94,if (js !=null) {
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,101,if (js !=null) {
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,102,js.removeAllJobs(start,finish);
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,109,if (js !=null) {
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,117,if (js !=null) {
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,122,public void schedule(String jobId, ByteSequence payload,String cronEntry, long start, long period, int repeat) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,124,if (js !=null) {
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,125,js.schedule(jobId, payload, cronEntry,start,period,repeat);
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerFacade.java,130,if (js !=null) {
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerStore.java,19,import org.apache.activemq.Service;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,559,this.thread = new Thread(this, "JobScheduler:" + this.name);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,560,this.thread.setDaemon(true);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,561,this.thread.start();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,568,this.scheduleTime.wakeup();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,569,Thread t = this.thread;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,570,if (t != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,571,t.join(1000);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,35,import org.apache.activemq.util.IdGenerator;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,36,import org.apache.activemq.util.ServiceStopper;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,37,import org.apache.activemq.util.ServiceSupport;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,38,import org.slf4j.Logger;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,39,import org.slf4j.LoggerFactory;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,43,import org.apache.activemq.util.ByteSequence;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,112,public synchronized void schedule(final String jobId, final ByteSequence payload, final String cronEntry, final long delay,
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,113,final long period, final int repeat) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,261,void schedule(Transaction tx, String jobId, ByteSequence payload, String cronEntry, long delay, long period,
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,262,int repeat) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,529,final long timeUntilNextScheduled = nextUp.getKey() - currentTime;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,530,if (timeUntilNextScheduled < this.scheduleTime.getWaitTime()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,531,this.scheduleTime.setWaitTime(timeUntilNextScheduled);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,571,if (!this.version.equals(Stomp.V1_1)) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,572,throw new ProtocolException("Queue Browser feature only valid for Stomp v1.1 clients!");
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,36,import org.apache.activemq.command.ActiveMQDestination;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,37,import org.apache.activemq.command.ActiveMQMessage;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,38,import org.apache.activemq.command.ActiveMQTempQueue;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,39,import org.apache.activemq.command.ActiveMQTempTopic;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,40,import org.apache.activemq.command.Command;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,41,import org.apache.activemq.command.CommandTypes;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,42,import org.apache.activemq.command.ConnectionError;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,43,import org.apache.activemq.command.ConnectionId;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,44,import org.apache.activemq.command.ConnectionInfo;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,45,import org.apache.activemq.command.ConsumerControl;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,46,import org.apache.activemq.command.ConsumerId;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,47,import org.apache.activemq.command.ConsumerInfo;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,48,import org.apache.activemq.command.DestinationInfo;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,49,import org.apache.activemq.command.ExceptionResponse;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,50,import org.apache.activemq.command.LocalTransactionId;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,51,import org.apache.activemq.command.MessageAck;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,52,import org.apache.activemq.command.MessageDispatch;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,53,import org.apache.activemq.command.MessageId;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,54,import org.apache.activemq.command.ProducerId;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,55,import org.apache.activemq.command.ProducerInfo;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,56,import org.apache.activemq.command.RemoveSubscriptionInfo;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,57,import org.apache.activemq.command.Response;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,58,import org.apache.activemq.command.SessionId;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,59,import org.apache.activemq.command.SessionInfo;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,60,import org.apache.activemq.command.ShutdownInfo;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,61,import org.apache.activemq.command.TransactionId;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,62,import org.apache.activemq.command.TransactionInfo;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,926,hbReadInterval = Long.parseLong(keepAliveOpts[0]);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,934,monitor.setReadCheckTime(hbReadInterval);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1696,BTreeIndex<Long, HashSet<String>> oldAckPositions =
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1697,new BTreeIndex<Long, HashSet<String>>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1698,oldAckPositions.setKeyMarshaller(LongMarshaller.INSTANCE);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1699,oldAckPositions.setValueMarshaller(HashSetStringMarshaller.INSTANCE);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1700,oldAckPositions.load(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1706,Iterator<Entry<Long, HashSet<String>>> iterator = oldAckPositions.iterator(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1707,while (iterator.hasNext()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1708,Entry<Long, HashSet<String>> entry = iterator.next();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1710,for(String subKey : entry.getValue()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1711,SequenceSet pendingAcks = temp.get(subKey);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1712,if (pendingAcks == null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1713,pendingAcks = new SequenceSet();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1714,temp.put(subKey, pendingAcks);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1717,pendingAcks.add(entry.getKey());
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,163,pending.setSystemUsage(memoryManager);
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,164,pending.setMemoryUsageHighWaterMark(getCursorMemoryHighWaterMark());
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,165,pending.setMaxAuditDepth(getMaxAuditDepth());
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,166,pending.setMaxProducersToAudit(getMaxProducersToAudit());
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,167,pending.start();
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,170,if (pending.isEmpty()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,171,for (Destination destination : durableDestinations.values()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,172,Topic topic = (Topic) destination;
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,173,topic.recoverRetroactiveMessages(context, this);
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,192,pending.stop();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,312,protected synchronized boolean isStarted() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,214,public final synchronized void addMessageFirst(MessageReference node) throws Exception {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,123,private final LinkedList<MessageDispatch> deliveredMessages = new LinkedList<MessageDispatch>();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,145,private boolean clearDispatchList;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,693,clearDispatchList = true;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,826,clearDispatchList();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1013,clearDispatchList();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1046,clearDispatchList();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1311,clearDispatchList();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1349,+ " to consumer: "  + getConsumerId() + ", ignoring (auto acking) duplicate: " + md);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1350,MessageAck ack = new MessageAck(md, MessageAck.INDIVIDUAL_ACK_TYPE, 1);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1351,session.sendAck(ack);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1396,private void clearDispatchList() {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1397,if (clearDispatchList) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1399,if (clearDispatchList) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1402,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1403,LOG.debug(getConsumerId() + " tracking existing transacted delivered list (" + deliveredMessages.size() + ") on transport interrupt");
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1419,clearDispatchList = false;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,309,LOG.debug("Do not know how to process ActiveMQ Command " + command);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,496,long nextTransactionId = 0;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,550,byte operation;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,709,outbound.addLast(md);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,774,private void settle(final Delivery delivery, int ackType) throws Exception {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,798,ack.setTransactionId(new LocalTransactionId(connectionId, txid));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,829,final DeliveryState state = delivery.getRemoteState();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,832,delivery.disposition(new Accepted());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,834,settle(delivery, MessageAck.INDIVIDUAL_ACK_TYPE);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,837,md.setRedeliveryCounter(md.getRedeliveryCounter() + 1);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,838,settle(delivery, -1);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,841,settle(delivery, -1);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,843,Modified modified = (Modified) state;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,848,byte ackType = -1;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,849,Boolean undeliverableHere = modified.getUndeliverableHere();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,853,ackType = MessageAck.POSION_ACK_TYPE;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,855,settle(delivery, ackType);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,864,void onSenderOpen(final Sender sender, AmqpSessionContext sessionContext) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,869,ConsumerContext consumerContext = new ConsumerContext(id, sender);
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnectionFactory.java,66,public class PooledConnectionFactory implements ConnectionFactory, Service {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerFilter.java,261,Subscription subscription) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,379,if (ack.getPoisonCause() != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,380,node.getMessage().setProperty(ActiveMQMessage.DLQ_DELIVERY_FAILURE_CAUSE_PROPERTY,
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,381,ack.getPoisonCause().toString());
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,383,sendToDLQ(context, node);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,503,protected void sendToDLQ(final ConnectionContext context, final MessageReference node) throws IOException, Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,504,broker.getRoot().sendToDeadLetterQueue(context, node, this);
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,659,getRoot().sendToDeadLetterQueue(context, node, subscription);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,631,broker.getRoot().sendToDeadLetterQueue(getContext(), message, this);
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,501,Subscription subscription) {
activemq-broker/src/main/java/org/apache/activemq/broker/LockableServiceSupport.java,120,LOG.warn("locker keepalive resulted in: " + e, e);
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,61,XAException xae = new XAException("COMMIT FAILED: Transaction rolled back.");
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,72,transactionStore.commit(getTransactionId(), false,preCommitTask, postCommitTask);
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,77,XAException xae = new XAException("STORE COMMIT FAILED: Transaction rolled back.");
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,112,XAException xae = new XAException("Prepare not implemented on Local Transactions.");
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,92,XAException xae = new XAException("STORE COMMIT FAILED: Transaction rolled back.");
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,107,XAException xae = new XAException("Cannot do 2 phase commit if the transaction has not been prepared.");
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,121,XAException xae = new XAException("PRE-PREPARE FAILED: Transaction rolled back.");
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,43,private AtomicBoolean stopStartInProgress = new AtomicBoolean(false);
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,76,if (!stopStartInProgress.compareAndSet(false, true)) {
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,78,return;
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,80,LOG.info("Initiating stop/restart of broker transport due to IO exception, " + exception, exception);
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,82,new Thread("stop transport connectors on IO exception") {
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,83,public void run() {
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,84,try {
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,85,ServiceStopper stopper = new ServiceStopper();
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,86,broker.stopAllConnectors(stopper);
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,88,LOG.warn("Failure occurred while stopping broker connectors", e);
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,94,new Thread("restart transport connectors post IO exception") {
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,95,public void run() {
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,96,try {
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,97,while (hasLockOwnership() && isPersistenceAdapterDown()) {
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,98,LOG.info("waiting for broker persistence adapter checkpoint to succeed before restarting transports");
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,99,TimeUnit.MILLISECONDS.sleep(resumeCheckSleepPeriod);
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,101,broker.startAllConnectors();
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,103,LOG.warn("Stopping broker due to failure while restarting broker connectors", e);
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,104,stopBroker(e);
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,106,stopStartInProgress.compareAndSet(true, false);
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,110,private boolean isPersistenceAdapterDown() {
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,111,boolean checkpointSuccess = false;
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,112,try {
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,113,broker.getPersistenceAdapter().checkpoint(true);
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,114,checkpointSuccess = true;
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,116,return !checkpointSuccess;
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,120,return;
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,123,stopBroker(exception);
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,127,LOG.info("Stopping the broker due to exception, " + exception, exception);
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,128,new Thread("Stopping the broker due to IO exception") {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,105,LOG.error("Caught exception during rollback on connection: " + e1, e1);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,110,LOG.error("Caught exception while closing connection: " + e1, e1);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCIOExceptionHandler.java,49,throw new IOException("PersistenceAdapter lock no longer valid using: " + locker);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,355,Thread thread = new Thread(runnable, "ActiveMQ Cleanup Timer");
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,81,final long now = System.currentTimeMillis() + diffFromCurrentTime;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,110,LOG.info(getLeaseHolderId() + ", becoming the master on dataSource: " + dataSource);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,184,releaseLease();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,141,throw IOExceptionSupport.create(e);
activemq-console/src/main/java/org/apache/activemq/console/command/CreateCommand.java,290,res.append("${ACTIVEMQ_HOME}/bin/activemq \"$*\"");
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,167,private long determineTimeDifference(Connection connection) throws SQLException {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,174,LOG.info(getLeaseHolderId() + " diff from db: " + diff + ", db time: " + timestamp);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,175,if (diff > maxAllowableDiffFromDBTime || diff < -maxAllowableDiffFromDBTime) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,177,result = diff;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1840,jvmLimit / (1024 * 1024) + " mb");
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,861,messageListener.onMessage(message);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,863,LOG.error("error dispatching message: ", e);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,870,connection.onClientInternalException(e);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,873,try {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,874,MessageAck ack = new MessageAck(md, MessageAck.STANDARD_ACK_TYPE, 1);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,919,asyncSendPacket(ack);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,226,throw new RuntimeException("Endpoint after delivery notification failure", e);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,63,private String readTimeoutParameter = "readTimeout";
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,69,private HashMap<String, WebClient> clients = new HashMap<String, WebClient>();
activemq-client/src/main/java/org/apache/activemq/util/IdGenerator.java,57,ss.close();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,623,LOG
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,624,.info("Usage Manager Memory Limit ("
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,626,+ ") reached on "
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,628,+ ". Producers will be throttled to the rate at which messages are removed from this destination to prevent flooding it."
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,629,+ " See http://activemq.apache.org/producer-flow-control.html for more info");
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,869,try{
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1117,try{
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1232,try{
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1387,try{
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1522,if (!node.isAcked() && !browser.getPending().getMessageAudit().isDuplicate(node.getMessageId())) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1643,try{
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1682,try{
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2023,try{
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,32,import org.apache.activemq.broker.region.BaseDestination;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,231,setBinaryData(s, 8, xidVal);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,233,setBinaryData(s, 8, null);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,359,setBinaryData(s, 1, xidVal);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,446,setBinaryData(s, 1, xidVal);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,483,setBinaryData(s, 1, xidVal);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,960,byte[] encodedXid = getBinaryData(rs, 2);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,974,byte[] encodedXid = getBinaryData(rs, 1);
assembly/src/release/example/src/ProducerTool.java,169,if (transacted) {
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpClientTransport.java,190,Object command = (Object)getTextWireFormat().unmarshal(stream);
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpClientTransport.java,283,httpMethod.abort();
activemq-client/src/main/java/org/apache/activemq/util/IdGenerator.java,54,ServerSocket ss = new ServerSocket(0);
activemq-client/src/main/java/org/apache/activemq/util/IdGenerator.java,59,LOG.warn("could not generate unique stub by using DNS and binding to local port", ioe);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,47,result = result / 1000 * 1000;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,207,return brokers;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,401,if (isUseJmx()) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,402,registerNetworkConnectorMBean(connector);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,569,redeliveredWaitingDispatch.addMessageLast(qmr);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1653,reference.drop();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1654,destinationStatistics.getMessages().decrement();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1655,pagedInMessagesLock.writeLock().lock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1656,try{
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1657,pagedInMessages.remove(reference.getMessageId());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1659,pagedInMessagesLock.writeLock().unlock();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,748,sender.drained();
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,23,import org.eclipse.jetty.continuation.ContinuationSupport;
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,28,import org.apache.activemq.MessageAvailableListener;
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,30,import java.util.LinkedList;
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,38,private long maximumReadTimeout;
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,39,private AjaxWebClient client;
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,42,private LinkedList<UndeliveredAjaxMessage> undeliveredMessages = new LinkedList<UndeliveredAjaxMessage>();
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,69,LOG.debug( "message is " + message );
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,70,if( message != null ) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,71,if( continuation.isSuspended() ) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,72,LOG.debug( "Resuming suspended continuation " + continuation );
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,73,continuation.setAttribute("undelivered_message", new UndeliveredAjaxMessage( message, consumer ) );
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,76,LOG.debug( "Message available, but continuation is already resumed.  Buffer for next time." );
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,77,bufferMessageForDelivery( message, consumer );
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,93,bufferMessageForDelivery( message, consumer );
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,100,public void bufferMessageForDelivery( Message message, MessageConsumer consumer ) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,101,if( message != null ) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,102,synchronized( undeliveredMessages ) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,103,undeliveredMessages.addLast( new UndeliveredAjaxMessage( message, consumer ) );
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,361,for (Iterator<UndeliveredAjaxMessage> it = undeliveredMessages.iterator(); it.hasNext(); ) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,73,private String readTimeoutParameter = "timeout";
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,77,private Timer clientCleanupTimer = new Timer("ActiveMQ Ajax Client Cleanup Timer", true);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,78,private HashMap<String,AjaxWebClient> ajaxWebClients = new HashMap<String,AjaxWebClient>();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,277,message = (Message)undelivered_message.getMessage();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,364,Message msg = (Message)undelivered.getMessage();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1341,try{
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbstractDeadLetterStrategy.java,35,private ActiveMQMessageAudit messageAudit = new ActiveMQMessageAudit();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1038,s.setMaxRows(Math.max(maxReturned * 2, maxRows));
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,306,consumerInfo.setSubscriptionName(connect.clientId().toString());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,35,import org.apache.activemq.broker.BrokerServiceAware;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,45,import org.apache.activemq.broker.Locker;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,676,public int getMaxProducersToAudit() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,677,return maxProducersToAudit;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,680,public void setMaxProducersToAudit(int maxProducersToAudit) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,681,this.maxProducersToAudit = maxProducersToAudit;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,684,public int getMaxAuditDepth() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,685,return maxAuditDepth;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,688,public void setMaxAuditDepth(int maxAuditDepth) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,689,this.maxAuditDepth = maxAuditDepth;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,692,public boolean isEnableAudit() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,693,return enableAudit;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,696,public void setEnableAudit(boolean enableAudit) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,697,this.enableAudit = enableAudit;
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,22,import javax.jms.InvalidSelectorException;
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,27,import org.apache.activemq.broker.region.cursors.VMPendingMessageCursor;
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,40,throws JMSException {
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,41,super(broker,usageManager, context, info);
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,45,return !((QueueMessageReference)node).isAcked();
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,49,return "QueueBrowserSubscription:" + " consumer=" + info.getConsumerId() + ", destinations="
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,50,+ destinations.size() + ", dispatched=" + dispatched.size() + ", delivered="
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,51,+ this.prefetchExtension + ", pending=" + getPendingQueueSize();
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,60,if( !browseDone && queueRefs == 0 && destinationsAdded) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,61,browseDone=true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,74,throws IOException {
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,75,if (info.isNetworkSubscription()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,76,super.acknowledge(context, ack, n);
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,81,queueRefs++;
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,234,sub.setUsePrefetchExtension(isUsePrefetchExtension());
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,780,this.storeUsageHighWaterMark = storeUsageHighWaterMark;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,29,import java.util.Set;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,31,import java.util.concurrent.*;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,63,import org.apache.activemq.store.kahadb.data.KahaDestination.DestinationType;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,71,import org.apache.activemq.store.kahadb.disk.journal.Location;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,72,import org.apache.activemq.store.kahadb.disk.page.Transaction;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,99,private boolean concurrentStoreAndDispatchTransactions = false;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,186,asyncQueueJobQueue, new ThreadFactory() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,187,public Thread newThread(Runnable runnable) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,188,Thread thread = new Thread(runnable, "ConcurrentQueueStoreAndDispatch");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,189,thread.setDaemon(true);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,190,return thread;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,194,asyncTopicJobQueue, new ThreadFactory() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,195,public Thread newThread(Runnable runnable) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,196,Thread thread = new Thread(runnable, "ConcurrentTopicStoreAndDispatch");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,197,thread.setDaemon(true);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,198,return thread;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,149,version = is.readInt();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,151,version=1;
activemq-client/src/main/java/org/apache/activemq/command/MessageId.java,82,this.key = key;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBTransactionStore.java,65,private final WireFormat wireFormat = new OpenWireFormat();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBTransactionStore.java,344,MessageAck ack = (MessageAck) wireFormat.unmarshal(new DataInputStream(ackb.newInput()));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/TempKahaDBStore.java,63,public class TempKahaDBStore extends TempMessageDatabase implements PersistenceAdapter {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,462,message.setMessageId(new MessageId(producerId, messageIdGenerator.getNextSequenceId()));
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,142,this.setMessageId(messageId);
activemq-client/src/main/java/org/apache/activemq/command/MessageId.java,110,key = producerId.toString() + ":" + producerSequenceId;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,426,command.setMessageId(message.getMessageId().toString());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,439,command.setMessageId(ack.getLastMessageId().toString());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,454,final String key = identity.toString();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,594,final String key = identity.toString();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,711,command.setMessageId(messageId.toString());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2119,ackedAndPrepared.add(ack.getLastMessageId().toString());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2131,ackedAndPrepared.remove(ack.getLastMessageId().toString());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/TempKahaDBStore.java,138,command.setMessageId(message.getMessageId().toString());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/TempKahaDBStore.java,145,command.setMessageId(ack.getLastMessageId().toString());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/TempKahaDBStore.java,156,final String key = identity.toString();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/TempKahaDBStore.java,244,final String key = identity.toString();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/TempKahaDBStore.java,285,command.setMessageId(messageId.toString());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,62,static final public byte[] EMPTY_BYTE_ARRAY = new byte[]{};
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,79,if( transport.isTrace() ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,134,if( command.getClass() == AmqpHeader.class ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,135,AmqpHeader header = (AmqpHeader)command;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,136,switch( header.getProtocolId() ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,142,sasl.setMechanisms(new String[]{"ANONYMOUS", "PLAIN"});
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,149,frame = (Buffer)command;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,156,while( frame.length > 0 ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,164,try {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,166,if( sasl!=null ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,168,if( sasl.getRemoteMechanisms().length > 0 ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,169,if( "PLAIN".equals(sasl.getRemoteMechanisms()[0]) ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,173,if( parts.length > 0 ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,176,if( parts.length > 1 ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,222,((AmqpDeliveryListener)link.getContext()).onClose();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,229,((AmqpDeliveryListener)link.getContext()).drainCheck();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,256,if( !closing ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,262,if( !closedSocket) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,273,if( !closing ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,321,public void onClose() throws Exception {}
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,322,public void drainCheck() {}
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,365,AmqpSessionContext sessionContext = (AmqpSessionContext)session.getContext();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,366,if( sessionContext!=null ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,388,protected InboundTransformer getInboundTransformer()  {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,411,Receiver receiver = ((Receiver)delivery.getLink());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,412,if( !delivery.isReadable() ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,417,if( current==null ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,422,byte data[] = new byte[1024*4];
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,423,while( (count = receiver.recv(data, 0, data.length)) > 0 ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,428,if( count == 0 ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,457,if( destination!=null ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,461,if( message.getMessageId()==null ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,466,if( remoteState!=null && remoteState instanceof TransactionalState) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,476,if( !delivery.remotelySettled()  ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,477,if( response.isException() ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,478,ExceptionResponse er = (ExceptionResponse)response;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,497,class Transaction {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,521,while( len > 0 ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,523,assert decoded > 0: "Make progress decoding the message";
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,528,Object action = ((AmqpValue)msg.getBody()).getValue();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,529,System.out.println("COORDINATOR received: "+action+", ["+buffer+"]");
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,530,if( action instanceof Declare ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,532,if( declare.getGlobalId()!=null ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,539,System.out.println("started transaction "+txid);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,551,if( discharge.getFail() ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,552,System.out.println("rollback transaction "+txid);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,553,operation = TransactionInfo.ROLLBACK ;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,555,System.out.println("commit transaction "+txid);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,562,if( response.isException() ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,563,ExceptionResponse er = (ExceptionResponse)response;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,574,throw new Exception("Expected coordinator message type: "+action.getClass());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,585,if( remoteTarget instanceof Coordinator ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,595,if( target.getDynamic() ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,616,((LinkImpl)receiver).setLocalError(new EndpointError(exception.getClass().getName(), exception.getMessage()));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,627,((LinkImpl)receiver).setLocalError(new EndpointError(exception.getSymbolicName(), exception.getMessage()));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,633,if( terminus == null ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,636,org.apache.qpid.proton.amqp.messaging.Source source = (org.apache.qpid.proton.amqp.messaging.Source)terminus;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,637,if( source.getAddress() == null || source.getAddress().length()==0) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,642,org.apache.qpid.proton.amqp.messaging.Target target = (org.apache.qpid.proton.amqp.messaging.Target)terminus;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,643,if( target.getAddress() == null || target.getAddress().length()==0) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,648,Coordinator target = (Coordinator)terminus;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,651,throw new RuntimeException("Unexpected terminus type: "+terminus);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,690,if( tagCache.size() < 1024 ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,698,if( !closed ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,708,if( !closed ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,719,while(!closed) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,721,while( currentBuffer !=null ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,723,if( sent > 0 ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,725,if( currentBuffer.length == 0 ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,726,if( presettle ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,739,if( outbound.isEmpty() ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,746,if( jms==null ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,752,if( amqp!=null && amqp.getLength() > 0 ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,755,if( presettle ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,776,if( tag !=null && tag.length>0 ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,780,if( ackType == -1) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,791,ack.setAckType((byte)ackType);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,795,if( remoteState!=null && remoteState instanceof TransactionalState) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,804,if( response.isException() ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,821,if( outbound.isEmpty() ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,830,if( state instanceof Accepted ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,831,if( !delivery.remotelySettled() ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,844,if ( modified.getDeliveryFailed() ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,846,md.setRedeliveryCounter(md.getRedeliveryCounter() + 1);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,850,if( undeliverableHere !=null && undeliverableHere ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,865,org.apache.qpid.proton.amqp.messaging.Source source = (org.apache.qpid.proton.amqp.messaging.Source)sender.getRemoteSource();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,873,if( source!=null ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,876,DescribedType value = (DescribedType)filter.get(JMS_SELECTOR);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,877,if( value!=null ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,884,((LinkImpl)sender).setLocalError(new EndpointError("amqp:invalid-field", e.getMessage()));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,894,if( source == null ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,907,consumerContext.closed=true;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,914,((LinkImpl)sender).setLocalError(new EndpointError(name, exception.getMessage()));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,922,consumerContext.closed=true;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,944,if( source.getDistributionMode() == COPY && dest.isQueue() ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,947,if( DURABLE.equals(source.getDurable()) && dest.isTopic() ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,953,DescribedType value = (DescribedType)filter.get(NO_LOCAL);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,954,if( value!=null ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,965,if( exception instanceof InvalidSelectorException ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,968,((LinkImpl)sender).setLocalError(new EndpointError(name, exception.getMessage()));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,979,((LinkImpl)sender).setLocalError(new EndpointError(e.getSymbolicName(), e.getMessage()));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,985,if( haystack!=null ) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,987,if( capability == needle) {
activemq-client/src/main/java/org/apache/activemq/SimplePriorityMessageDispatchChannel.java,240,priority = Math.max(message.getMessage().getPriority(), 0);
activemq-client/src/main/java/org/apache/activemq/SimplePriorityMessageDispatchChannel.java,241,priority = Math.min(priority, 9);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,20,import org.apache.activemq.command.*;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,26,import org.apache.qpid.proton.amqp.*;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,27,import org.apache.qpid.proton.amqp.messaging.*;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,32,import org.apache.qpid.proton.amqp.transaction.*;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,33,import org.apache.qpid.proton.amqp.transport.*;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,34,import org.apache.qpid.proton.engine.*;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,40,import org.apache.qpid.proton.jms.*;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,47,import javax.jms.InvalidSelectorException;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,48,import java.io.IOException;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,49,import java.io.UnsupportedEncodingException;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,50,import java.util.*;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,51,import java.util.concurrent.ConcurrentHashMap;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,52,import java.util.concurrent.locks.ReentrantLock;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,315,private ConnectionInfo connectionInfo = new ConnectionInfo();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,661,private boolean presettle;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1143,if (!disposed && (backup || priorityBackup) && backups.size() < backupPoolSize) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1160,for (Iterator<URI> iter = backupList.iterator(); !disposed && iter.hasNext() && backups.size() < backupPoolSize; ) {
activemq-client/src/main/java/org/apache/activemq/filter/PropertyExpression.java,24,import javax.jms.DeliveryMode;
activemq-client/src/main/java/org/apache/activemq/filter/PropertyExpression.java,147,return new Integer(txId.toString());
activemq-client/src/main/java/org/apache/activemq/filter/PropertyExpression.java,229,return name.equals(((PropertyExpression)o).name);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,23,import org.apache.activemq.jaas.GroupPrincipal;
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,28,import javax.naming.*;
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,29,import javax.naming.directory.*;
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,30,import javax.naming.event.*;
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,31,import javax.naming.ldap.LdapName;
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,32,import javax.naming.ldap.Rdn;
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,33,import java.util.*;
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,37,public class SimpleCachedLDAPAuthorizationMap extends DefaultAuthorizationMap {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,42,private String initialContextFactory = "com.sun.jndi.ldap.LdapCtxFactory";
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,83,protected HashMap<ActiveMQDestination, AuthorizationEntry> entries =
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,84,new HashMap<ActiveMQDestination, AuthorizationEntry>();
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,129,eventContext = ((EventDirContext)context.lookup(""));
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,139,this.new CachedLDAPAuthorizationMapNamespaceChangeListener(DestinationType.QUEUE, permissionType));
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,142,eventContext.addNamingListener(queueSearchBase, "cn=*", new SearchControls(),
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,143,this.new CachedLDAPAuthorizationMapNamespaceChangeListener(DestinationType.QUEUE, null));
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,150,this.new CachedLDAPAuthorizationMapNamespaceChangeListener(DestinationType.TOPIC, permissionType));
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,153,eventContext.addNamingListener(topicSearchBase, "cn=*", new SearchControls(),
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,154,this.new CachedLDAPAuthorizationMapNamespaceChangeListener(DestinationType.TOPIC, null));
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,161,this.new CachedLDAPAuthorizationMapNamespaceChangeListener(DestinationType.TEMP, permissionType));
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,188,processQueryResults(
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,189,currentContext.search(queueSearchBase, getFilterForPermissionType(permissionType), constraints),
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,190,DestinationType.QUEUE, permissionType);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,192,LOG.error("Policy not applied!.  Error processing policy under '" + queueSearchBase + "' with filter '"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,193,+ getFilterForPermissionType(permissionType) + "'", e);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,199,processQueryResults(
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,200,currentContext.search(topicSearchBase, getFilterForPermissionType(permissionType), constraints),
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,201,DestinationType.TOPIC, permissionType);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,203,LOG.error("Policy not applied!.  Error processing policy under '" + topicSearchBase + "' with filter '"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,204,+ getFilterForPermissionType(permissionType) + "'", e);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,210,processQueryResults(
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,211,currentContext.search(tempSearchBase, getFilterForPermissionType(permissionType), constraints),
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,212,DestinationType.TEMP, permissionType);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,214,LOG.error("Policy not applied!.  Error processing policy under '" + tempSearchBase + "' with filter '"
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,215,+ getFilterForPermissionType(permissionType) + "'", e);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,219,setEntries(new ArrayList<DestinationMapEntry>(entries.values()));
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,233,protected void processQueryResults(NamingEnumeration<SearchResult> results,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,234,DestinationType destinationType, PermissionType permissionType) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,241,entry = getEntry(new LdapName(result.getNameInNamespace()), destinationType);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,243,LOG.error("Policy not applied!  Error parsing authorization policy entry under "
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,244,+ result.getNameInNamespace(), e);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,274,protected AuthorizationEntry getEntry(LdapName dn, DestinationType destinationType) {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,285,+ "policy entry.  The permission group entries should be immediately below the "
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,286,+ "temporary policy base DN.");
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,288,entry = getTempDestinationAuthorizationEntry();
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,291,setTempDestinationAuthorizationEntry((TempDestinationAuthorizationEntry) entry);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,301,+ "policy entry.  The destination pattern and permission group entries should be "
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,302,+ "nested below the queue or topic policy base DN.");
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,335,protected void applyACL(AuthorizationEntry entry, SearchResult result,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,336,PermissionType permissionType) throws NamingException {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,354,memberAttributes = context.getAttributes(memberDn,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,355,new String[] {"objectClass", groupNameAttribute, userNameAttribute});
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,357,LOG.error(
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,359,+ " in policy entry "
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,360,+ result.getNameInNamespace(), e);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,374,LOG.error("Policy not applied! Group "
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,375,+ memberDn
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,376,+ "does not have name attribute "
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,377,+ groupNameAttribute + " under entry " + result.getNameInNamespace());
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,388,LOG.error("Policy not applied! User "
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,389,+ memberDn + " does not have name attribute "
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,390,+ userNameAttribute + " under entry " + result.getNameInNamespace());
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,404,LOG.error("Policy not applied! Can't determine type of member "
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,405,+ memberDn + " under entry " + result.getNameInNamespace());
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,418,LOG.error(
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,420,+ result.getNameInNamespace(), e);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,480,throw new IllegalArgumentException(
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,485,throw new IllegalArgumentException(
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,521,throw new IllegalArgumentException("Unknown destination type: "
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,522,+ destinationType);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,623,if (!isContextAlive()) {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,624,try {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,625,context = createContext();
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,628,return;
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,631,reset();
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,632,setTempDestinationAuthorizationEntry(null);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,633,entries.clear();
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,635,LOG.debug("Updating authorization map!");
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,636,try {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,637,query();
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,639,LOG.error("Error updating authorization map.  Partial policy "
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,640,+ "may be applied until the next successful update.", e);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,652,protected synchronized Set<AuthorizationEntry> getAllEntries(ActiveMQDestination destination) {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,654,return super.getAllEntries(destination);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,663,public synchronized Set<Object> getTempDestinationAdminACLs() {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,665,return transcribeSet(super.getTempDestinationAdminACLs());
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,673,public synchronized Set<Object> getTempDestinationReadACLs() {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,675,return transcribeSet(super.getTempDestinationReadACLs());
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,683,public synchronized Set<Object> getTempDestinationWriteACLs() {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,685,return transcribeSet(super.getTempDestinationWriteACLs());
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,692,public synchronized Set<Object> getAdminACLs(ActiveMQDestination destination) {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,693,return super.getAdminACLs(destination);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,700,public synchronized Set<Object> getReadACLs(ActiveMQDestination destination) {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,702,return super.getReadACLs(destination);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,709,public synchronized Set<Object> getWriteACLs(ActiveMQDestination destination) {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,711,return super.getWriteACLs(destination);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,721,public synchronized void objectAdded(NamingEvent namingEvent, DestinationType destinationType,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,722,PermissionType permissionType) {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,729,AuthorizationEntry entry = getEntry(name, destinationType);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,733,put(entry.getDestination(), entry);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,737,LOG.error("Policy not applied!  Error parsing DN for addition of "
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,738,+ result.getName(), e);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,740,LOG.error("Policy not applied!  Error processing object addition for addition of "
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,741,+ result.getName(), e);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,752,public synchronized void objectRemoved(NamingEvent namingEvent, DestinationType destinationType,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,753,PermissionType permissionType) {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,760,AuthorizationEntry entry = getEntry(name, destinationType);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,764,LOG.error("Policy not applied!  Error parsing DN for object removal for removal of "
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,765,+ result.getName(), e);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,767,LOG.error("Policy not applied!  Error processing object removal for removal of "
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,768,+ result.getName(), e);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,782,public synchronized void objectRenamed(NamingEvent namingEvent, DestinationType destinationType,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,783,PermissionType permissionType) {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,805,NamingEnumeration<SearchResult> results = context.search(
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,806,newName,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,807,getFilterForPermissionType(newPermissionType), controls);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,817,LOG.error("Policy not applied!  Error processing object rename for rename of "
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,819,+ ".  Could not determine permission type of new object.");
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,828,put(newDest, entry);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,829,remove(oldDest, entry);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,837,LOG.error("Policy not applied!  Error parsing DN for object rename for rename of "
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,838,+ oldBinding.getName() + " to " + newBinding.getName(), e);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,840,LOG.error("Policy not applied!  Error processing object rename for rename of "
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,841,+ oldBinding.getName() + " to " + newBinding.getName(), e);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,852,public synchronized void objectChanged(NamingEvent namingEvent,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,853,DestinationType destinationType, PermissionType permissionType) {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,974,public void setPermissionGroupMemberAttribute(
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,975,String permissionGroupMemberAttribute) {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,983,public void setAdminPermissionGroupSearchFilter(
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,984,String adminPermissionGroupSearchFilter) {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,992,public void setReadPermissionGroupSearchFilter(
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,993,String readPermissionGroupSearchFilter) {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1001,public void setWritePermissionGroupSearchFilter(
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1002,String writePermissionGroupSearchFilter) {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1063,QUEUE,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1064,TOPIC,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1065,TEMP;
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1069,READ,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1070,WRITE,
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1071,ADMIN;
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1078,protected class CachedLDAPAuthorizationMapNamespaceChangeListener implements
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1079,NamespaceChangeListener, ObjectChangeListener {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1093,public CachedLDAPAuthorizationMapNamespaceChangeListener(
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,1094,DestinationType destinationType, PermissionType permissionType) {
activemq-client/src/main/java/org/apache/activemq/command/CommandTypes.java,27,byte PROTOCOL_VERSION = 9;
activemq-broker/src/main/java/org/apache/activemq/network/ConduitBridge.java,87,ds.add(info.getConsumerId());
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,22,import java.util.Arrays;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,23,import java.util.Collection;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,24,import java.util.List;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,25,import java.util.Properties;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,150,private BrokerService brokerService = null;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1270,private final Collection<Subscription> getRegionSubscriptions(ActiveMQDestination dest) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,296,return isActive();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,28,import org.apache.activemq.broker.region.Destination;
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,29,import org.apache.activemq.broker.region.MessageReference;
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,30,import org.apache.activemq.broker.region.Subscription;
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,31,import org.apache.activemq.broker.region.TopicSubscription;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,346,safeGetBroker().removeSubscription(context, info);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DurableSubscriptionView.java,43,public DurableSubscriptionView(ManagedRegionBroker broker, String clientId, String userName, Subscription sub) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DurableSubscriptionView.java,90,broker.removeSubscription(context, info);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/InactiveDurableSubscriptionView.java,44,public InactiveDurableSubscriptionView(ManagedRegionBroker broker, String clientId, SubscriptionInfo subInfo, Subscription subscription) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/InactiveDurableSubscriptionView.java,45,super(broker, clientId, null, subscription);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/InactiveDurableSubscriptionView.java,137,broker.removeSubscription(context, info);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,209,view = new DurableSubscriptionView(this, context.getClientId(), userName, sub);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,512,SubscriptionView view = new InactiveDurableSubscriptionView(this, key.getClientId(), info, subscription);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,132,message.getMessageId().setDataLocator(sequenceId);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,207,ack.getLastMessageId().setDataLocator(seq);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,740,long sequence = (Long)messageId.getDataLocator();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,753,getAdapter().doRemoveMessage(c, (Long)ack.getLastMessageId().getDataLocator(), null);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,109,(Long)message.getMessageId().getDataLocator(),
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,166,message.getMessageId().setDataLocator(id);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,189,msg.getMessageId().setDataLocator(id);
activemq-client/src/main/java/org/apache/activemq/util/StringToListOfActiveMQDestinationConverter.java,42,text = text.substring(1, text.length() - 1);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,62,public class TcpTransportServer extends TransportServerThreadSupport implements ServiceListener{
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,72,protected boolean useQueueForAccept=true;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,86,protected int connectionTimeout =  30000;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,118,public TcpTransportServer(TcpTransportFactory transportFactory, URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,138,setConnectURI(new URI(bind.getScheme(), bind.getUserInfo(), resolveHostName(serverSocket, addr), serverSocket.getLocalPort(), bind.getPath(), bind.getQuery(), bind
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,139,.getFragment()));
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,146,setConnectURI(new URI(bind.getScheme(), bind.getUserInfo(), addr.getHostAddress(), serverSocket.getLocalPort(), bind.getPath(), bind.getQuery(), bind.getFragment()));
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,308,protected  Transport createTransport(Socket socket, WireFormat format) throws IOException {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,341,if(useQueueForAccept) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,362,socketHandlerThread = new Thread(null, run,
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,364,getStackSize());
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,366,socketHandlerThread.setPriority(ThreadPriorities.BROKER_MANAGEMENT-1);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,381,return (InetSocketAddress)serverSocket.getLocalSocketAddress();
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,387,throw new ExceededMaximumConnectionsException("Exceeded the maximum " +
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,395,options.put("maxInactivityDurationInitalDelay",
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,396,Long.valueOf(maxInactivityDurationInitalDelay));
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,397,options.put("minmumWireFormatVersion",
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,398,Integer.valueOf(minmumWireFormatVersion));
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,415,Transport configuredTransport =
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,416,transportFactory.serverConfigure( transport, format, options);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,19,import java.io.IOException;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,20,import java.util.ArrayList;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,21,import java.util.Date;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,22,import java.util.HashMap;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,23,import java.util.List;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,24,import java.util.Map;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,25,import java.util.Set;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,39,import org.apache.activemq.broker.region.policy.SlowConsumerEntry;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,40,import org.apache.activemq.broker.scheduler.Job;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,41,import org.apache.activemq.command.ActiveMQBlobMessage;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,42,import org.apache.activemq.command.ActiveMQBytesMessage;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,43,import org.apache.activemq.command.ActiveMQMapMessage;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,44,import org.apache.activemq.command.ActiveMQMessage;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,45,import org.apache.activemq.command.ActiveMQObjectMessage;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,46,import org.apache.activemq.command.ActiveMQStreamMessage;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,47,import org.apache.activemq.command.ActiveMQTextMessage;
activemq-broker/src/main/java/org/apache/activemq/usage/StoreUsage.java,64,synchronized (usageMutex) {
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,65,synchronized (usageMutex) {
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,67,usageMutex.wait();
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,83,synchronized (usageMutex) {
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,85,usageMutex.wait(timeout);
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,95,synchronized (usageMutex) {
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,121,int percentUsage;
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,122,synchronized (usageMutex) {
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,124,percentUsage = caclPercentUsage();
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,126,setPercentUsage(percentUsage);
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,141,int percentUsage;
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,142,synchronized (usageMutex) {
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,144,percentUsage = caclPercentUsage();
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,146,setPercentUsage(percentUsage);
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,19,import java.util.ArrayList;
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,20,import java.util.Iterator;
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,41,protected final Object usageMutex = new Object();
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,48,protected String name;
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,53,private final AtomicBoolean started=new AtomicBoolean();
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,59,this.limiter.setLimit((long)(parent.getLimit() * portion));
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,89,synchronized (usageMutex) {
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,90,percentUsage=caclPercentUsage();
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,95,percentUsage=caclPercentUsage();
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,97,usageMutex.wait(pollingTime);
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,116,synchronized (usageMutex) {
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,117,percentUsage=caclPercentUsage();
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,131,synchronized (usageMutex) {
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,148,synchronized (usageMutex) {
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,158,synchronized (usageMutex) {
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,159,this.limiter.setLimit((long)(parent.getLimit() * usagePortion));
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,163,int percentUsage;
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,164,synchronized (usageMutex) {
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,165,percentUsage = caclPercentUsage();
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,167,setPercentUsage(percentUsage);
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,177,synchronized (usageMutex) {
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,183,synchronized (usageMutex) {
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,190,synchronized (usageMutex) {
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,196,synchronized (usageMutex) {
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,212,int percentUsage;
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,213,synchronized (usageMutex) {
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,215,percentUsage = caclPercentUsage();
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,217,setPercentUsage(percentUsage);
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,221,synchronized (usageMutex) {
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,227,synchronized (usageMutex) {
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,240,return (int)((((retrieveUsage() * 100) / limiter.getLimit()) / percentUsageMinDelta) * percentUsageMinDelta);
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,246,+ newPercentUsage + "% of available memory");
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,251,synchronized (usageMutex) {
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,252,usageMutex.notifyAll();
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,253,if (!callbacks.isEmpty()) {
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,254,for (Iterator<Runnable> iter = new ArrayList<Runnable>(callbacks).iterator(); iter.hasNext();) {
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,255,Runnable callback = iter.next();
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,256,getExecutor().execute(callback);
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,258,callbacks.clear();
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,266,for (Iterator<UsageListener> iter = listeners.iterator(); iter.hasNext();) {
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,267,UsageListener l = iter.next();
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,268,l.onUsageChanged(Usage.this, oldPercentUsage, newPercentUsage);
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,287,return "Usage(" + getName() + ") percentUsage=" + percentUsage
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,289,+ ", percentUsageMinDelta=" + percentUsageMinDelta + "%"
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,290,+ (parent != null ? ";Parent:" + parent.toString() : "");
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,295,if (started.compareAndSet(false, true)){
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,299,for (T t:children) {
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,307,if (started.compareAndSet(true, false)){
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,313,synchronized (usageMutex) {
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,314,usageMutex.notifyAll();
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,315,for (Iterator<Runnable> iter = new ArrayList<Runnable>(this.callbacks).iterator(); iter.hasNext();) {
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,316,Runnable callback = iter.next();
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,321,for (T t:children) {
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,348,synchronized (usageMutex) {
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,361,synchronized (usageMutex) {
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,411,public void setExecutor (ThreadPoolExecutor executor) {
activemq-client/src/main/java/org/apache/activemq/command/MessageId.java,156,copy.dataLocator = new AtomicReference<Object>(dataLocator != null ? dataLocator.get() : null);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,411,public void sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference,
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,412,Subscription subscription){
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,413,super.sendToDeadLetterQueue(context, messageReference, subscription);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,414,try {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,415,if(!messageReference.isAdvisory()) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,416,ActiveMQTopic topic = AdvisorySupport.getMessageDLQdAdvisoryTopic(messageReference.getMessage().getDestination());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,417,Message payload = messageReference.getMessage().copy();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,418,payload.clearBody();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,419,fireAdvisory(context, topic,payload);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,422,handleFireFailure("add to DLQ", e);
activemq-broker/src/main/java/org/apache/activemq/broker/Broker.java,321,void sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference, Subscription subscription);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerFilter.java,260,public void sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference,
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerFilter.java,262,next.sendToDeadLetterQueue(context, messageReference, subscription);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerFilter.java,298,public void nowMasterBroker() {
activemq-broker/src/main/java/org/apache/activemq/broker/EmptyBroker.java,253,public void sendToDeadLetterQueue(ConnectionContext context,
activemq-broker/src/main/java/org/apache/activemq/broker/EmptyBroker.java,254,MessageReference messageReference,
activemq-broker/src/main/java/org/apache/activemq/broker/EmptyBroker.java,255,Subscription subscription) {
activemq-broker/src/main/java/org/apache/activemq/broker/EmptyBroker.java,284,public void nowMasterBroker() {
activemq-broker/src/main/java/org/apache/activemq/broker/EmptyBroker.java,294,ConsumerControl control) {
activemq-broker/src/main/java/org/apache/activemq/broker/ErrorBroker.java,263,public void sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference,
activemq-broker/src/main/java/org/apache/activemq/broker/ErrorBroker.java,264,Subscription subscription) {
activemq-broker/src/main/java/org/apache/activemq/broker/ErrorBroker.java,300,public void nowMasterBroker() {
activemq-broker/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java,75,this.next.set(next);
activemq-broker/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java,272,public void sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference,
activemq-broker/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java,273,Subscription subscription) {
activemq-broker/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java,274,getNext().sendToDeadLetterQueue(context, messageReference, subscription);
activemq-broker/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java,309,public void nowMasterBroker() {
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,500,public void sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference,
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,509,super.sendToDeadLetterQueue(context, messageReference, subscription);
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,129,public void sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference, Subscription subscription) {
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,132,super.sendToDeadLetterQueue(context, messageReference, subscription);
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,147,super.sendToDeadLetterQueue(context, messageReference, subscription);
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,152,super.sendToDeadLetterQueue(context, messageReference, subscription);
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,17,package org.apache.activemq.plugin;
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,48,public void sendToDeadLetterQueue(ConnectionContext ctx, MessageReference msgRef,
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,49,Subscription subscription) {
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,61,if (dest == null || destName == null ) {
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,63,skipMessage("NULL DESTINATION",msgRef);
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,66,skipMessage("dropAll",msgRef);
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,69,skipMessage("dropTemporaryTopics",msgRef);
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,72,skipMessage("dropTemporaryQueues",msgRef);
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,75,skipMessage("dropOnly",msgRef);
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,78,next.sendToDeadLetterQueue(ctx, msgRef, subscription);
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,80,if (dropped && getReportInterval()>0) {
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,81,if ((++dropCount)%getReportInterval() == 0 ) {
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,82,log.info("Total of "+dropCount+" messages were discarded, since their destination was the dead letter queue");
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,88,for (int i=0; destFilter!=null && i<destFilter.length; i++) {
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,89,if (destFilter[i]!=null && destFilter[i].matcher(destName).matches()) {
activemq-broker/src/main/java/org/apache/activemq/plugin/DiscardingDLQBroker.java,98,String lmsg = "Discarding DLQ BrokerFilter["+prefix+"] - skipping message:" + (msgRef!=null?msgRef.getMessage():null);
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,29,import org.apache.activemq.command.*;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,103,DestinationInterceptor destinationInterceptor,Scheduler scheduler,ThreadPoolExecutor executor) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,105,this.executor=executor;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,127,public Set <Destination> getDestinations(ActiveMQDestination destination) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,217,+ oldContext.getConnection().getRemoteAddress());
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,268,synchronized (destinations) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,269,answer = destinations.get(destination);
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,270,if (answer != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,271,return answer;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,274,boolean create = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,276,create = createIfTemp;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,277,answer = getRegion(destination).addDestination(context, destination, create);
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,279,destinations.put(destination, answer);
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,295,addDestination(context, info.getDestination(),true);
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,385,|| (producerExchange.getRegionDestination() != null && producerExchange.getRegionDestination().isDisposed())) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,387,producerExchange.getConnectionContext().getBroker().addDestination(producerExchange.getConnectionContext(), destination, isAllowTempAutoCreationOnSend());
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,413,case ActiveMQDestination.QUEUE_TYPE:
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,414,return queueRegion;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,415,case ActiveMQDestination.TOPIC_TYPE:
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,416,return topicRegion;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,417,case ActiveMQDestination.TEMP_QUEUE_TYPE:
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,418,return tempQueueRegion;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,419,case ActiveMQDestination.TEMP_TOPIC_TYPE:
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,420,return tempTopicRegion;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,421,default:
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,422,throw createUnknownDestinationTypeException(destination);
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,524,brokerInfos.remove(info.getBrokerId());
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,548,((Destination)message.getRegionDestination()).getDestinationStatistics().getProcessTime().addTime(totalTime);
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,586,((TopicRegion)topicRegion).setKeepDurableSubsActive(keepDurableSubsActive);
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,644,boolean stamped=false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,646,long expiration=message.getExpiration();
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,647,message.setProperty(ORIGINAL_EXPIRATION,new Long(expiration));
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,663,public void sendToDeadLetterQueue(ConnectionContext context,
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,664,MessageReference node, Subscription subscription){
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,665,try{
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,666,if(node!=null){
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,667,Message message=node.getMessage();
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,668,if(message!=null && node.getRegionDestination()!=null){
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,669,DeadLetterStrategy deadLetterStrategy=((Destination)node
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,670,.getRegionDestination()).getDeadLetterStrategy();
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,671,if(deadLetterStrategy!=null){
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,672,if(deadLetterStrategy.isSendToDeadLetterQueue(message)){
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,677,if(!message.isPersistent()){
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,679,message.setProperty("originalDeliveryMode",
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,686,ActiveMQDestination deadLetterDestination=deadLetterStrategy
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,687,.getDeadLetterQueueFor(message, subscription);
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,688,if (context.getBroker()==null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,691,BrokerSupport.resendNoCopy(context,message,
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,692,deadLetterDestination);
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,696,LOG.debug("Dead Letter message with no DLQ strategy in place, message id: "
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,697,+ message.getMessageId() + ", destination: " + message.getDestination());
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,703,LOG.warn("Caught an exception sending to DLQ: "+node,e);
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,722,synchronized(sequenceGenerator) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,743,LOG.warn("unmatched destination: " + destination + ", in consumerControl: "  + control);
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,797,log.info(dest.getName() + " Inactive for longer than " +
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,798,dest.getInactiveTimoutBeforeGC() + " ms - removing ...");
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,712,destinationStatistics.getEnqueues().decrement();
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,43,import javax.jms.InvalidClientIDException;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,44,import javax.jms.JMSException;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,45,import java.io.IOException;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,46,import java.net.URI;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,47,import java.util.ArrayList;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,48,import java.util.Collections;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,49,import java.util.HashMap;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,50,import java.util.List;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,51,import java.util.Locale;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,52,import java.util.Map;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,53,import java.util.Set;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,54,import java.util.concurrent.ConcurrentHashMap;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,55,import java.util.concurrent.CopyOnWriteArrayList;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,56,import java.util.concurrent.ThreadPoolExecutor;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,57,import java.util.concurrent.locks.ReentrantReadWriteLock;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,529,removeBrokerInClusterUpdate(info);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,41,private boolean hadSpace = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,257,public boolean hasSpace() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,258,hadSpace = super.hasSpace();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,259,return hadSpace;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueStorePrefetch.java,41,public QueueStorePrefetch(Queue queue) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueStorePrefetch.java,97,this.store.recoverNextMessages(this.maxBatchSize, this);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,50,this.persistent = new QueueStorePrefetch(queue);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,282,if (listener.hasSpace()) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,290,return false;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,551,for (Iterator<Entry<Long, MessageKeys>> iterator = sd.orderIndex.iterator(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,552,listener.hasSpace() && iterator.hasNext(); ) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,953,if (transport != null) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,145,connectedToPriority = isPriority(connectedTransportURI);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,999,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,125,private ArrayList<URI> priorityList = new ArrayList<URI>();
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,913,if (connectList.get(0).equals(connectedTransportURI)) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1297,if (newURI.getPort() == uri.getPort()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1298,InetAddress newAddr = null;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1299,InetAddress addr = null;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1300,try {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1301,newAddr = InetAddress.getByName(newURI.getHost());
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1302,addr = InetAddress.getByName(uri.getHost());
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1305,if (newAddr == null) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1306,LOG.error("Failed to Lookup INetAddress for URI[ " + newURI + " ] : " + e);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1308,LOG.error("Failed to Lookup INetAddress for URI[ " + uri + " ] : " + e);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1311,if (newURI.getHost().equalsIgnoreCase(uri.getHost())) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1312,result = true;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1313,break;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1315,continue;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1319,if (addr.equals(newAddr)) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1320,result = true;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1321,break;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1326,return result;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,152,return systemUsage != null ? (systemUsage.getMemoryUsage().getPercentUsage() < memoryUsageHighWaterMark) : true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,604,synchronized(dispatchLock) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,605,ArrayList<MessageReference> references = new ArrayList<MessageReference>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,606,for (MessageReference r : dispatched) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,607,if( r.getRegionDestination() == destination) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,608,references.add(r);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,611,rc.addAll(references);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,612,destination.getDestinationStatistics().getDispatched().subtract(references.size());
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,613,destination.getDestinationStatistics().getInflight().subtract(references.size());
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,614,dispatched.removeAll(references);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,231,consumers.remove(subscription);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,235,if (!consumers.contains(subscription)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,236,consumers.add(subscription);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,293,public void deactivate(ConnectionContext context, DurableTopicSubscription sub) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,297,sub.remove(context, this);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,236,Connection connection = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,238,connection = makeConnection();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,239,if (connection instanceof XAConnection) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,240,XASession session = ((XAConnection)connection).createXASession();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,241,XAResource xaResource = session.getXAResource();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,242,return new XAResource[] {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,243,xaResource
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,246,return new XAResource[] {};
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,250,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,251,connection.close();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,762,context.getTransaction().addSynchronization(new Synchronization() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,764,public void afterCommit() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,765,sendLock.lockInterruptibly();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,766,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,769,if (broker.isExpired(message)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,770,broker.messageExpired(context, message, null);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,771,destinationStatistics.getExpired().increment();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,772,return;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,774,sendMessage(message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,776,sendLock.unlock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,777,message.decrementReferenceCount();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,779,messageSent(context, message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,782,public void afterRollback() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,783,message.decrementReferenceCount();
activemq-broker/src/main/java/org/apache/activemq/transaction/Transaction.java,131,return super.toString() + "[synchronizations=" + synchronizations + "]";
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,46,import java.util.Stack;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,808,process(message, lastRecoveryPosition, (Runnable)null);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,909,public Location store(JournalCommand<?> data, boolean sync, Runnable before,Runnable after, Runnable onJournalStoreComplete) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,910,if (before != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,911,before.run();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,927,Runnable afterCompletion = null;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,928,synchronized (orderedTransactionAfters) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,929,if (!orderedTransactionAfters.empty()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,930,afterCompletion = orderedTransactionAfters.pop();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,933,if (afterCompletion != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,934,afterCompletion.run();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,937,after.run();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,988,process(data, location, (Runnable) null);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1006,void process(JournalCommand<?> data, final Location location, final Runnable after) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1025,process(command, location, after);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1132,private final Stack<Runnable> orderedTransactionAfters = new Stack<Runnable>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1133,private void push(Runnable after) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1134,if (after != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1135,synchronized (orderedTransactionAfters) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1136,orderedTransactionAfters.push(after);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1142,protected void process(KahaCommitCommand command, Location location, final Runnable after) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1152,if (after != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1154,after.run();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1171,push(after);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,656,if (session.getTransactionContext().isInTransaction()) {
activemq-broker/src/main/java/org/apache/activemq/broker/util/TimeStampingBrokerPlugin.java,143,if (deadLetterStrategy != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,57,import org.apache.activemq.command.SubscriptionInfo;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,110,private static final int DEFAULT_DATABASE_LOCKED_WAIT_DELAY = 10 * 1000;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,116,static final int VERSION = 4;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,558,Location recoveryPosition = minimum(producerAuditPosition, lastIndoubtPosition);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1311,Map<Integer, Set<Integer>> ackMessageFileMap = new HashMap<Integer, Set<Integer>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1313,Set<Integer> referenceFileIds = ackMessageFileMap.get(Integer.valueOf(ackLocation.getDataFileId()));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1317,ackMessageFileMap.put(ackLocation.getDataFileId(), referenceFileIds);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1495,Set<Integer> referencedFileIds = ackMessageFileMap.get(candidate);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1505,ackMessageFileMap.remove(candidate);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1560,class StoredSubscription {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1561,SubscriptionInfo subscriptionInfo;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1562,String lastAckId;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1563,Location lastAckLocation;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1564,Location cursor;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1732,if (metadata.version >= 2) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1733,value.orderIndex.lowPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1734,value.orderIndex.highPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1740,value.orderIndex.lowPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1741,value.orderIndex.lowPriorityIndex.setKeyMarshaller(LongMarshaller.INSTANCE);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1742,value.orderIndex.lowPriorityIndex.setValueMarshaller(MessageKeysMarshaller.INSTANCE);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1743,value.orderIndex.lowPriorityIndex.load(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1745,value.orderIndex.highPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1746,value.orderIndex.highPriorityIndex.setKeyMarshaller(LongMarshaller.INSTANCE);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1747,value.orderIndex.highPriorityIndex.setValueMarshaller(MessageKeysMarshaller.INSTANCE);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1748,value.orderIndex.highPriorityIndex.load(tx);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,116,protected int currentTransportCount=0;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,386,if (this.currentTransportCount >= this.maximumConnections) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,472,this.currentTransportCount++;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,476,this.currentTransportCount--;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1257,deliveredCounter -= deliveredMessages.size();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1258,deliveredMessages.clear();
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,214,return true;
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,225,return true;
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,227,return false;
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,77,this.pool.incrementReferenceCount();
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnectionFactory.java,224,connection = connectionsPool.borrowObject(key);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1172,backups.add(bt);
activemq-broker/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,42,private final Destination next;
activemq-broker/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,105,public void setMemoryUsage(MemoryUsage memoryUsage) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,106,next.setMemoryUsage(memoryUsage);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopicInterceptor.java,35,private String prefix;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopicInterceptor.java,36,private String postfix;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopicInterceptor.java,37,private boolean local;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopicInterceptor.java,38,private LRUCache<ActiveMQDestination,ActiveMQQueue> cache = new LRUCache<ActiveMQDestination,ActiveMQQueue>();
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,66,for (int i = 0; percentUsage >= 100; i++) {
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,128,((MemoryUsage)parent).increaseUsage(value);
activemq-client/src/main/java/org/apache/activemq/usage/Usage.java,245,LOG.debug(getName() + ": usage change from: " + oldPercentUsage + "% of available memory, to: "
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnectionFactory.java,471,public long setTimeBetweenExpirationCheckMillis() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,170,result = addAdapter(filteredAdapter, destination);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,171,startAdapter(((FilteredKahaDBPersistenceAdapter) result).getPersistenceAdapter(), destination.getQualifiedName());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,176,return ((FilteredKahaDBPersistenceAdapter) result).getPersistenceAdapter();
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,380,remoteBrokerId = remoteBrokerInfo.getBrokerId();
activemq-web/src/main/java/org/apache/activemq/web/PortfolioPublishServlet.java,71,out.print(refreshRate);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,45,if (cronEntry.startsWith("* * * * *")) {
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,25,import javax.management.*;
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,29,import org.apache.activemq.broker.jmx.*;
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,124,+ ",connector=clientConnectors,connectorName=" + connectorName + ",connectionName=*");
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,125,Set<ObjectName> queryResult = queryNames(query, null);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,108,private ConnectionInfo connectionInfo = new ConnectionInfo();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,162,stopTransport();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,19,import java.io.DataOutputStream;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,20,import java.io.IOException;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,21,import java.util.HashMap;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,22,import java.util.Map;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,24,import javax.jms.Destination;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,25,import javax.jms.JMSException;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,27,import org.apache.activemq.advisory.AdvisorySupport;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,32,import org.apache.activemq.command.DataStructure;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,36,import com.thoughtworks.xstream.XStream;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,37,import com.thoughtworks.xstream.io.json.JsonHierarchicalStreamDriver;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,131,AdvisorySupport.ADIVSORY_MESSAGE_TYPE.equals(message.getType())) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,133,FrameTranslator.Helper.copyStandardHeadersFromMessageToFrame(
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,134,converter, message, command, this);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,136,String body = marshallAdvisory(message.getDataStructure());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,137,command.setContent(body.getBytes("UTF-8"));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,220,protected String marshallAdvisory(final DataStructure ds) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,221,XStream xstream = new XStream(new JsonHierarchicalStreamDriver());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,222,xstream.setMode(XStream.NO_REFERENCES);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,223,xstream.aliasPackage("", "org.apache.activemq.command");
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,224,return xstream.toXML(ds);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,208,if (translator instanceof BrokerContextAware) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,209,((BrokerContextAware)translator).setBrokerContext(brokerContext);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,882,return findTranslator(message.getStringProperty(Stomp.Headers.TRANSFORMATION)).convertMessage(this, message);
activemq-client/src/main/java/org/apache/activemq/util/JMSExceptionSupport.java,49,JMSException exception = new JMSException(msg);
activemq-client/src/main/java/org/apache/activemq/util/JMSExceptionSupport.java,62,JMSException exception = new JMSException(msg);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,650,startAllConnectors();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,88,import org.apache.activemq.util.ByteSequence;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,89,import org.apache.activemq.util.Callback;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,90,import org.apache.activemq.util.DataByteArrayInputStream;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,91,import org.apache.activemq.util.DataByteArrayOutputStream;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,92,import org.apache.activemq.util.IOHelper;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,93,import org.apache.activemq.util.ServiceStopper;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,94,import org.apache.activemq.util.ServiceSupport;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,396,this.indexLock.writeLock().lock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,399,pageFile.tx().execute(new Transaction.Closure<IOException>() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,401,public void execute(Transaction tx) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,402,checkpointUpdate(tx, true);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,409,this.indexLock.writeLock().unlock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,847,pageFile.tx().execute(new Transaction.Closure<IOException>() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,849,public void execute(Transaction tx) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,850,checkpointUpdate(tx, cleanup);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,865,public void checkpoint(Callback closure) throws Exception {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,866,this.indexLock.writeLock().lock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,867,try {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,868,pageFile.tx().execute(new Transaction.Closure<IOException>() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,870,public void execute(Transaction tx) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,871,checkpointUpdate(tx, false);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,874,closure.execute();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,876,this.indexLock.writeLock().unlock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,915,long start = System.currentTimeMillis();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,916,Location location = onJournalStoreComplete == null ? journal.write(sequence, sync) :  journal.write(sequence, onJournalStoreComplete) ;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,917,long start2 = System.currentTimeMillis();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,918,process(data, location, after);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,919,long end = System.currentTimeMillis();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,920,if( LOG_SLOW_ACCESS_TIME>0 && end-start > LOG_SLOW_ACCESS_TIME) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,921,if (LOG.isInfoEnabled()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,922,LOG.info("Slow KahaDB access: Journal append took: "+(start2-start)+" ms, Index update took "+(end-start2)+" ms");
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,198,topic.deactivate(context, this);
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionKey.java,50,return equals((ConnectionKey)that);
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,49,private long firstUsed = lastUsed;
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,174,expiredCheck();
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,210,if (hasExpired) {
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,217,if (hasFailed
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,219,|| expiryTimeout > 0 && System.currentTimeMillis() > firstUsed + expiryTimeout) {
activemq-web/src/main/java/org/apache/activemq/web/SessionPool.java,39,private LinkedList<Session> sessions = new LinkedList<Session>();
activemq-web/src/main/java/org/apache/activemq/web/SessionPool.java,47,connection = getConnectionFactory().createConnection();
activemq-web/src/main/java/org/apache/activemq/web/SessionPool.java,48,connection.start();
activemq-web/src/main/java/org/apache/activemq/web/SessionPool.java,49,return connection;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1555,protected synchronized TransportConnectionState lookupConnectionState(ConnectionId connectionId) {
activemq-broker/src/main/java/org/apache/activemq/security/JaasAuthenticationBroker.java,20,import java.util.Iterator;
activemq-broker/src/main/java/org/apache/activemq/security/JaasAuthenticationBroker.java,22,import java.util.concurrent.CopyOnWriteArrayList;
activemq-broker/src/main/java/org/apache/activemq/security/JaasAuthenticationBroker.java,28,import org.apache.activemq.broker.BrokerFilter;
activemq-broker/src/main/java/org/apache/activemq/security/JaasAuthenticationBroker.java,38,public class JaasAuthenticationBroker extends BrokerFilter {
activemq-broker/src/main/java/org/apache/activemq/security/JaasAuthenticationBroker.java,41,private final CopyOnWriteArrayList<SecurityContext> securityContexts = new CopyOnWriteArrayList<SecurityContext>();
activemq-broker/src/main/java/org/apache/activemq/security/JaasAuthenticationBroker.java,94,throws Exception {
activemq-broker/src/main/java/org/apache/activemq/security/JaasAuthenticationBroker.java,95,super.removeConnection(context, info, error);
activemq-broker/src/main/java/org/apache/activemq/security/JaasAuthenticationBroker.java,96,if (securityContexts.remove(context.getSecurityContext())) {
activemq-broker/src/main/java/org/apache/activemq/security/JaasAuthenticationBroker.java,97,context.setSecurityContext(null);
activemq-broker/src/main/java/org/apache/activemq/security/JaasAuthenticationBroker.java,105,public void refresh() {
activemq-broker/src/main/java/org/apache/activemq/security/JaasAuthenticationBroker.java,106,for (Iterator<SecurityContext> iter = securityContexts.iterator(); iter.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/security/JaasAuthenticationBroker.java,107,SecurityContext sc = iter.next();
activemq-broker/src/main/java/org/apache/activemq/security/JaasAuthenticationBroker.java,108,sc.getAuthorizedReadDests().clear();
activemq-broker/src/main/java/org/apache/activemq/security/JaasAuthenticationBroker.java,109,sc.getAuthorizedWriteDests().clear();
activemq-broker/src/main/java/org/apache/activemq/security/SimpleAuthenticationBroker.java,21,import java.util.Iterator;
activemq-broker/src/main/java/org/apache/activemq/security/SimpleAuthenticationBroker.java,24,import java.util.concurrent.CopyOnWriteArrayList;
activemq-broker/src/main/java/org/apache/activemq/security/SimpleAuthenticationBroker.java,27,import org.apache.activemq.broker.BrokerFilter;
activemq-broker/src/main/java/org/apache/activemq/security/SimpleAuthenticationBroker.java,37,public class SimpleAuthenticationBroker extends BrokerFilter {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleAuthenticationBroker.java,44,private final CopyOnWriteArrayList<SecurityContext> securityContexts = new CopyOnWriteArrayList<SecurityContext>();
activemq-broker/src/main/java/org/apache/activemq/security/SimpleAuthenticationBroker.java,106,throws Exception {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleAuthenticationBroker.java,107,super.removeConnection(context, info, error);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleAuthenticationBroker.java,108,if (securityContexts.remove(context.getSecurityContext())) {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleAuthenticationBroker.java,109,context.setSecurityContext(null);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleAuthenticationBroker.java,117,public void refresh() {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleAuthenticationBroker.java,118,for (Iterator<SecurityContext> iter = securityContexts.iterator(); iter.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleAuthenticationBroker.java,119,SecurityContext sc = iter.next();
activemq-broker/src/main/java/org/apache/activemq/security/SimpleAuthenticationBroker.java,120,sc.getAuthorizedReadDests().clear();
activemq-broker/src/main/java/org/apache/activemq/security/SimpleAuthenticationBroker.java,121,sc.getAuthorizedWriteDests().clear();
activemq-console/src/main/java/org/apache/activemq/console/command/PurgeCommand.java,99,List queueList = JmxMBeansUtil.queryMBeans(createJmxConnection(), "destinationType=Queue,destinationName=" + i.next() + ",*");
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,60,public static List queryMBeans(MBeanServerConnection jmxConnection, List queryList) throws Exception {
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,112,return new WildcardToRegExTransformFilter(new MBeansRegExQueryFilter(new MBeansObjectNameQueryFilter(jmxConnection)));
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,898,localBroker.oneway(sub.getLocalInfo());
activemq-broker/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,78,map.put("async", "false");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1423,gcCandidateSet.remove(metadata.producerSequenceIdTrackerLocation.getDataFileId());
activemq-osgi/src/main/java/org/apache/activemq/osgi/ActiveMQServiceFactory.java,28,import org.springframework.context.ConfigurableApplicationContext;
activemq-osgi/src/main/java/org/apache/activemq/osgi/ActiveMQServiceFactory.java,29,import org.springframework.context.support.ClassPathXmlApplicationContext;
activemq-osgi/src/main/java/org/apache/activemq/osgi/ActiveMQServiceFactory.java,30,import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;
activemq-osgi/src/main/java/org/apache/activemq/osgi/ActiveMQServiceFactory.java,75,PropertySourcesPlaceholderConfigurer configurator =
activemq-osgi/src/main/java/org/apache/activemq/osgi/ActiveMQServiceFactory.java,76,new PropertySourcesPlaceholderConfigurer();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,32,import org.apache.activemq.command.ActiveMQDestination;
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,33,import org.apache.activemq.command.ActiveMQMessage;
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,34,import org.apache.activemq.command.ActiveMQTopic;
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,35,import org.apache.activemq.command.BrokerInfo;
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,36,import org.apache.activemq.command.Command;
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,37,import org.apache.activemq.command.ConnectionId;
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,38,import org.apache.activemq.command.ConnectionInfo;
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,39,import org.apache.activemq.command.ConsumerId;
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,40,import org.apache.activemq.command.ConsumerInfo;
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,41,import org.apache.activemq.command.DestinationInfo;
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,42,import org.apache.activemq.command.Message;
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,43,import org.apache.activemq.command.MessageId;
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,44,import org.apache.activemq.command.ProducerId;
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,45,import org.apache.activemq.command.ProducerInfo;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,53,import org.apache.activemq.command.ActiveMQDestination;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,54,import org.apache.activemq.command.ActiveMQMessage;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,55,import org.apache.activemq.command.ActiveMQTempDestination;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,56,import org.apache.activemq.command.ActiveMQTopic;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,57,import org.apache.activemq.command.BrokerId;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,58,import org.apache.activemq.command.BrokerInfo;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,59,import org.apache.activemq.command.Command;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,60,import org.apache.activemq.command.ConnectionError;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,61,import org.apache.activemq.command.ConnectionId;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,62,import org.apache.activemq.command.ConnectionInfo;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,63,import org.apache.activemq.command.ConsumerId;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,64,import org.apache.activemq.command.ConsumerInfo;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,65,import org.apache.activemq.command.DataStructure;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,66,import org.apache.activemq.command.DestinationInfo;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,67,import org.apache.activemq.command.ExceptionResponse;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,68,import org.apache.activemq.command.KeepAliveInfo;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,69,import org.apache.activemq.command.Message;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,70,import org.apache.activemq.command.MessageAck;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,71,import org.apache.activemq.command.MessageDispatch;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,72,import org.apache.activemq.command.NetworkBridgeFilter;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,73,import org.apache.activemq.command.ProducerInfo;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,74,import org.apache.activemq.command.RemoveInfo;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,75,import org.apache.activemq.command.Response;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,76,import org.apache.activemq.command.SessionInfo;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,77,import org.apache.activemq.command.ShutdownInfo;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,78,import org.apache.activemq.command.WireFormatInfo;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,82,send(context, forwarded_message, destination);
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOOutputStream.java,194,remaining = data.remaining();
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,646,if (tracked == null) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,316,for (Iterator iter = headers.entrySet().iterator(); iter.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,317,Map.Entry entry = (Map.Entry) iter.next();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,318,msg.setObjectProperty((String) entry.getKey(), entry.getValue());
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,330,connection.close();
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,92,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,93,final BooleanExpression expression = getExpression(selector);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,94,matches = expression.matches(msgContext);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,96,LOG.error(e.getMessage(), e);
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,46,return load(classDesc.getName(), cl, inLoader);
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,57,return Proxy.getProxyClass(cl, cinterfaces);
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,60,return Proxy.getProxyClass(inLoader, cinterfaces);
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,65,return Proxy.getProxyClass(FALLBACK_CLASS_LOADER, cinterfaces);
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,70,throw new ClassNotFoundException(null, e);
activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java,92,public XStream getXStream() {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,249,xstream = new XStream();
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,86,return e;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,245,InputStream in = null;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,247,if ((in = BrokerService.class.getResourceAsStream("/org/apache/activemq/version.txt")) != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,248,BufferedReader reader = new BufferedReader(new InputStreamReader(in));
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,249,try {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,250,version = reader.readLine();
activemq-broker/src/main/java/org/apache/activemq/broker/PropertiesBrokerFactory.java,41,Map properties = loadProperties(brokerURI);
activemq-broker/src/main/java/org/apache/activemq/broker/PropertiesBrokerFactory.java,51,protected Map loadProperties(URI brokerURI) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/broker/PropertiesBrokerFactory.java,58,if (file.exists()) {
activemq-broker/src/main/java/org/apache/activemq/broker/PropertiesBrokerFactory.java,75,if (inputStream != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/PropertiesBrokerFactory.java,76,properties.load(inputStream);
activemq-broker/src/main/java/org/apache/activemq/broker/PropertiesBrokerFactory.java,77,inputStream.close();
activemq-broker/src/main/java/org/apache/activemq/broker/PropertiesBrokerFactory.java,81,try {
activemq-broker/src/main/java/org/apache/activemq/broker/PropertiesBrokerFactory.java,82,Properties systemProperties = System.getProperties();
activemq-broker/src/main/java/org/apache/activemq/broker/PropertiesBrokerFactory.java,83,properties.putAll(systemProperties);
activemq-broker/src/main/java/org/apache/activemq/broker/PropertiesBrokerFactory.java,87,return properties;
activemq-broker/src/main/java/org/apache/activemq/broker/PropertiesBrokerFactory.java,98,protected BrokerService createBrokerService(URI brokerURI, Map properties) {
activemq-broker/src/main/java/org/apache/activemq/util/IOHelper.java,263,byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];
activemq-broker/src/main/java/org/apache/activemq/util/IOHelper.java,264,int len = in.read(buffer);
activemq-broker/src/main/java/org/apache/activemq/util/IOHelper.java,265,while (len >= 0) {
activemq-broker/src/main/java/org/apache/activemq/util/IOHelper.java,266,out.write(buffer, 0, len);
activemq-broker/src/main/java/org/apache/activemq/util/IOHelper.java,267,len = in.read(buffer);
activemq-broker/src/main/java/org/apache/activemq/util/IOHelper.java,269,in.close();
activemq-broker/src/main/java/org/apache/activemq/util/IOHelper.java,270,out.close();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,130,InputStream tsStream = getInputStream(trustStore);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,132,trustedCertStore.load(tsStream, trustStorePassword.toCharArray());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,133,TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,135,tmf.init(trustedCertStore);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,136,trustStoreManagers = tmf.getTrustManagers();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,149,ByteArrayInputStream bin = new ByteArrayInputStream(sslCert);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,150,ks.load(bin, keyStorePassword.toCharArray());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,152,keystoreManagers = kmf.getKeyManagers();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,162,InputStream in = getInputStream(fileName);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,163,ByteArrayOutputStream out = new ByteArrayOutputStream();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,164,byte[] buf = new byte[512];
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,165,int i = in.read(buf);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,166,while (i > 0) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,167,out.write(buf, 0, i);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,168,i = in.read(buf);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,170,in.close();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,171,return out.toByteArray();
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,43,return uploadStream(message, new FileInputStream(file));
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,58,OutputStream os = connection.getOutputStream();
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,60,byte[] buf = new byte[transferPolicy.getBufferSize()];
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,61,for (int c = fis.read(buf); c != -1; c = fis.read(buf)) {
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,62,os.write(buf, 0, c);
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,63,os.flush();
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,65,os.close();
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,66,fis.close();
activemq-client/src/main/java/org/apache/activemq/blob/FileSystemBlobStrategy.java,68,return uploadStream(message, new FileInputStream(file));
activemq-client/src/main/java/org/apache/activemq/blob/FileSystemBlobStrategy.java,77,FileOutputStream out = new FileOutputStream(f);
activemq-client/src/main/java/org/apache/activemq/blob/FileSystemBlobStrategy.java,78,byte[] buffer = new byte[policy.getBufferSize()];
activemq-client/src/main/java/org/apache/activemq/blob/FileSystemBlobStrategy.java,79,for (int c = in.read(buffer); c != -1; c = in.read(buffer)) {
activemq-client/src/main/java/org/apache/activemq/blob/FileSystemBlobStrategy.java,80,out.write(buffer, 0, c);
activemq-client/src/main/java/org/apache/activemq/blob/FileSystemBlobStrategy.java,81,out.flush();
activemq-client/src/main/java/org/apache/activemq/blob/FileSystemBlobStrategy.java,83,out.flush();
activemq-client/src/main/java/org/apache/activemq/blob/FileSystemBlobStrategy.java,84,out.close();
activemq-client/src/main/java/org/apache/activemq/blob/FileSystemBlobStrategy.java,126,String fileName = message.getJMSMessageID().replaceAll(":", "_");
activemq-client/src/main/java/org/apache/activemq/blob/FileSystemBlobStrategy.java,127,return new File(rootFile, fileName);
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,108,byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,109,int len = in.read(buffer);
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,110,while (len >= 0) {
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,111,out.write(buffer, 0, len);
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,112,len = in.read(buffer);
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,114,in.close();
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,115,out.close();
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,119,MAX_DIR_NAME_LENGTH = Integer.valueOf(System.getProperty("MaximumDirNameLength","200")).intValue();
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,120,MAX_FILE_NAME_LENGTH = Integer.valueOf(System.getProperty("MaximumFileNameLength","64")).intValue();
activemq-jaas/src/main/java/org/apache/activemq/jaas/TextFileCertificateLoginModule.java,91,try {
activemq-jaas/src/main/java/org/apache/activemq/jaas/TextFileCertificateLoginModule.java,92,java.io.FileInputStream in = new java.io.FileInputStream(usersFile);
activemq-jaas/src/main/java/org/apache/activemq/jaas/TextFileCertificateLoginModule.java,94,in.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,142,InputStream is = blob.getBinaryStream();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,144,ByteArrayOutputStream os = new ByteArrayOutputStream((int)blob.length());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,145,int ch;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,146,while ((ch = is.read()) >= 0) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,147,os.write(ch);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,149,is.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,150,os.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,152,return os.toByteArray();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/StreamJDBCAdapter.java,50,try {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/StreamJDBCAdapter.java,51,InputStream is = rs.getBinaryStream(index);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/StreamJDBCAdapter.java,52,ByteArrayOutputStream os = new ByteArrayOutputStream(1024 * 4);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/StreamJDBCAdapter.java,58,is.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/StreamJDBCAdapter.java,59,os.close();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,198,RandomAccessFile file = new RandomAccessFile(tmpFile, "r");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,199,file.seek(diskBoundLocation);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,200,file.read(diskBound);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,201,file.close();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,20,import java.io.IOException;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,214,RandomAccessFile raf = new RandomAccessFile(file, "rw");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,215,raf.setLength(size);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,218,long start = System.currentTimeMillis();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,219,long now = System.currentTimeMillis();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,223,break;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,225,raf.seek(0);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,227,raf.write(data);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,228,ioCount++;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,229,now = System.currentTimeMillis();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,239,raf.close();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,246,raf = new RandomAccessFile(file, "rw");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,247,start = System.currentTimeMillis();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,248,now = System.currentTimeMillis();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,252,break;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,255,raf.seek(i);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,256,raf.write(data);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,258,ioCount++;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,259,now = System.currentTimeMillis();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,265,raf.close();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,270,raf = new RandomAccessFile(file, "rw");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,271,start = System.currentTimeMillis();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,272,now = System.currentTimeMillis();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,276,break;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,278,raf.seek(0);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,280,raf.seek(i);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,281,raf.readFully(data);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,282,ioCount++;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,283,now = System.currentTimeMillis();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,289,raf.close();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,85,InputStream in = null;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,87,if ((in = ProtocolConverter.class.getResourceAsStream("/org/apache/activemq/version.txt")) != null) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,88,BufferedReader reader = new BufferedReader(new InputStreamReader(in));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,89,try {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,90,version = reader.readLine();
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClientSystem.java,265,LOG.info("Loading properties file: " + configFile.getAbsolutePath());
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClientSystem.java,266,fileProps.load(new FileInputStream(configFile));
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/reports/XmlFilePerfReportWriter.java,198,BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(tempLogFile)));
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/reports/XmlFilePerfReportWriter.java,199,String line;
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/reports/XmlFilePerfReportWriter.java,200,while ((line = reader.readLine()) != null) {
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/reports/XmlFilePerfReportWriter.java,201,if (line.startsWith("[TP-DATA]")) {
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/reports/XmlFilePerfReportWriter.java,202,handleCsvData(REPORT_PLUGIN_THROUGHPUT, line.substring("[TP-DATA]".length()));
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/reports/XmlFilePerfReportWriter.java,203,parsePerfCsvData("tpdata", line.substring("[TP-DATA]".length()));
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/reports/XmlFilePerfReportWriter.java,205,handleCsvData(REPORT_PLUGIN_CPU, line.substring("[CPU-DATA]".length()));
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/reports/XmlFilePerfReportWriter.java,206,parsePerfCsvData("cpudata", line.substring("[CPU-DATA]".length()));
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/reports/XmlFilePerfReportWriter.java,208,xmlFileWriter.println("<info>" + line + "</info>");
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/reports/XmlFilePerfReportWriter.java,210,xmlFileWriter.println("<error>" + line + "</error>");
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,67,InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(resource);
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,68,if (in != null) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,69,ByteArrayOutputStream out = new ByteArrayOutputStream();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,70,byte[] buf = new byte[4096];
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,71,int len = in.read(buf);
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,72,while (len >= 0) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,73,out.write(buf, 0, len);
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,74,len = in.read(buf);
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,76,in.close();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,77,out.close();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,78,data = out.toByteArray();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,79,jsCache.put(resource, data);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,326,CronEntry dayOfMonth = new CronEntry("DayOfMonth", tokens.get(DAY_OF_MONTH), 1, 31);
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,141,long delay = ( redeliveryCount == 0 ?
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,142,redeliveryPolicy.getInitialRedeliveryDelay() :
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,143,redeliveryPolicy.getNextRedeliveryDelay(getExistingDelay(messageReference)));
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,198,private int getExistingDelay(MessageReference messageReference) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,199,Object val = messageReference.getMessage().getProperty(REDELIVERY_DELAY);
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,200,if (val instanceof Long) {
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,201,return ((Long)val).intValue();
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,203,return 0;
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,31,import org.apache.activemq.DestinationDoesNotExistException;
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractSubscription.java,230,return getDispatchedQueueSize() - info.getPrefetchSize();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,883,md.getMessage().onMessageRolledBack();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,889,&& redeliveryCounter > redeliveryPolicy.getMaximumRedeliveries()) {
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,22,import java.io.BufferedReader;
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,25,import java.util.ArrayList;
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,54,private final ConcurrentHashMap<String, Class> serviceCache = new ConcurrentHashMap<String, Class>();
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,106,if( !isImportingUs(bundle) ) {
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,107,debug("The bundle does not import us: "+ bundle.getBundleId());
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,108,return;
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,110,bundleWrappers.put(bundle.getBundleId(), new BundleWrapper(bundle));
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,137,Class clazz = serviceCache.get(path);
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,209,|| isImportingClass(bundle, PersistenceAdapter.class);
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,212,private boolean isImportingClass(Bundle bundle, Class clazz) {
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,213,try {
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,214,return bundle.loadClass(clazz.getName())==clazz;
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,216,return false;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,107,void doCommitAddOp(TransactionContext c, long storeSequenceIdForMessageId) throws SQLException, IOException;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,124,this.isPrioritizedMessages() ? message.getPriority() : 0, context != null ? context.getXid() : null);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,737,public void commitAdd(ConnectionContext context, MessageId messageId) throws IOException {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,741,getAdapter().doCommitAddOp(c, sequence);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,91,updateFromPreparedStateCommands.add(new AddMessageCommand() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,93,public Message getMessage() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,94,return addMessageCommand.getMessage();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,98,public MessageStore getMessageStore() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,99,return addMessageCommand.getMessageStore();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,103,public void run(ConnectionContext context) throws IOException {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,104,JDBCPersistenceAdapter jdbcPersistenceAdapter = (JDBCPersistenceAdapter) persistenceAdapter;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,105,Message message = addMessageCommand.getMessage();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,106,jdbcPersistenceAdapter.commitAdd(context, message.getMessageId());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,107,((JDBCMessageStore)addMessageCommand.getMessageStore()).onAdd(
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,110,message.getPriority());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,115,tx.messages = updateFromPreparedStateCommands;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,116,preparedTransactions.put(txid, tx);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,145,((JDBCPersistenceAdapter) persistenceAdapter).commitAdd(ctx,
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,146,removeMessageCommand.getMessageAck().getLastMessageId());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,168,tx.add(new AddMessageCommand() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,170,public Message getMessage() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,171,return message;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,175,public MessageStore getMessageStore() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,180,public void run(ConnectionContext context) throws IOException {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,181,((JDBCPersistenceAdapter)persistenceAdapter).commitAdd(null, message.getMessageId());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/Statements.java,604,+ " SET XID = NULL WHERE ID = ?";
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,990,public void doCommitAddOp(TransactionContext c, long sequence) throws SQLException, IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1491,final TreeSet<Integer> gcCandidates = new TreeSet<Integer>(gcCandidateSet);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1498,if (completeFileSet.contains(referencedFileId) && !gcCandidates.contains(referencedFileId)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,541,public void preProcessDispatch(MessageDispatch messageDispatch) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,542,Message message = messageDispatch.getMessage();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1146,processRemoveConnection(cs.getInfo().getConnectionId(), 0l);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1838,LOG.error("Memory Usage for the Broker (" + memLimit / (1024 * 1024) +
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1894,LOG.error("Temporary Store limit is " + storeLimit / (1024 * 1024) +
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,109,if (!isFull() && matched.isEmpty()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,112,dispatch(node);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,113,setSlowConsumer(false);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,115,if (info.getPrefetchSize() > 1 && matched.size() > info.getPrefetchSize()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,117,if (!isSlowConsumer()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,119,setSlowConsumer(true);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,120,for (Destination dest: destinations) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,121,dest.slowConsumer(getContext(), this);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,125,if (maximumPendingMessages != 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,126,boolean warnedAboutWait = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,127,while (active) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,128,synchronized (matchedListMutex) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,154,synchronized (matchedListMutex) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,197,dispatchMatched();
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,184,public void deactivate(boolean keepDurableSubsActive) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,210,Integer count = redeliveredMessages.get(node.getMessageId());
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,211,if (count != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,212,redeliveredMessages.put(node.getMessageId(), Integer.valueOf(count.intValue() + 1));
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,214,redeliveredMessages.put(node.getMessageId(), Integer.valueOf(1));
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,539,if (lastDeiveredSequenceId != 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,202,removed.deactivate(false);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,149,private long lastDeliveredSequenceId;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,51,private final AtomicBoolean monitorStarted = new AtomicBoolean(false);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,62,private boolean keepAliveResponseRequired;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,101,startMonitorThread();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,105,stopMonitorThread();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,174,stopMonitorThread();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,195,public boolean isKeepAliveResponseRequired() {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,196,return this.keepAliveResponseRequired;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,199,public void setKeepAliveResponseRequired(boolean value) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,200,this.keepAliveResponseRequired = value;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,203,public boolean isMonitorStarted() {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,204,return this.monitorStarted.get();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,215,synchronized void startMonitorThread() {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,218,if (protocolConverter == null) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,219,return;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,222,if (monitorStarted.get()) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,223,return;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,231,monitorStarted.set(true);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,245,synchronized void stopMonitorThread() {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,246,if (monitorStarted.compareAndSet(true, false)) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,247,if (readCheckerTask != null) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,248,readCheckerTask.cancel();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,578,monitor.startMonitorThread();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,105,if( stopped.compareAndSet(false, true) ) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,941,if (checkpointThread != null && !checkpointThread.isAlive()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,240,if (getPrefetchSize() == 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,242,while (true) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,243,int currentExtension = prefetchExtension.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,244,int newExtension = Math.max(0, currentExtension - index);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,245,if (prefetchExtension.compareAndSet(currentExtension, newExtension)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,246,break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,251,while (true) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,252,int currentExtension = prefetchExtension.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,253,int newExtension = Math.max(currentExtension, index);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,254,if (prefetchExtension.compareAndSet(currentExtension, newExtension)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,255,break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,290,while (true) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,291,int currentExtension = prefetchExtension.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,292,int newExtension = Math.max(0, currentExtension - 1);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,293,if (prefetchExtension.compareAndSet(currentExtension, newExtension)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,294,break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,319,if (usePrefetchExtension) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,519,return dispatched.size() - prefetchExtension.get() >= info.getPrefetchSize();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,540,return info.getPrefetchSize() + prefetchExtension.get() - dispatched.size();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,119,private boolean messagePrioritySupported = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,121,if (sub.isActive()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,122,throw new JMSException("Durable consumer is in use for client: " + clientId + " and subscriptionName: " + subscriptionName);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,155,+ " subscriberName: " + key.getSubscriptionName());
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,172,sub.deactivate(keepDurableSubsActive);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpHeader.java,39,setBuffer(buffer);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpHeader.java,83,return buffer.toString();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,181,amqpTransport.getWireFormat().magicRead = false;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,185,amqpTransport.getWireFormat().magicRead = false;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpWireFormat.java,54,boolean magicRead = false;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpWireFormat.java,60,return new AmqpHeader(magic);
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,204,private boolean messagePrioritySupported = true;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,267,this.transactedIndividualAck = session.connection.isTransactedIndividualAck() || this.nonBlockingRedelivery;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,221,long x = s1.getConsumerInfo().getLastDeliveredSequenceId();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,222,long y = s2.getConsumerInfo().getLastDeliveredSequenceId();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1872,consumersLock.writeLock().lock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1881,consumersLock.writeLock().unlock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1975,subscription.getConsumerInfo().setLastDeliveredSequenceId(subscription.getConsumerInfo().getLastDeliveredSequenceId() - 1);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1999,subs.getConsumerInfo().setLastDeliveredSequenceId(subs.getConsumerInfo().getLastDeliveredSequenceId() + 1);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFile.java,83,IOHelper.moveFile(file,targetDirectory);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,23,import java.util.ArrayList;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,24,import java.util.Collections;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,25,import java.util.HashMap;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,26,import java.util.Iterator;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,27,import java.util.LinkedHashMap;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,28,import java.util.List;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,29,import java.util.Map;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,30,import java.util.Set;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,31,import java.util.Timer;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,32,import java.util.TimerTask;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,33,import java.util.TreeMap;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,98,protected File directoryArchive = new File(DEFAULT_ARCHIVE_DIRECTORY);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,437,dataFile.move(getDirectoryArchive());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,438,LOG.debug("moved data file " + dataFile + " to " + getDirectoryArchive());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,441,LOG.debug("Discarded data file " + dataFile);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,443,LOG.warn("Failed to discard data file " + dataFile.getFile());
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1354,Transport t = transport;
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1355,if (null != t){
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1356,ServiceSupport.dispose(t);
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1397,Transport t = this.transport;
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1398,if (null != t){
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1399,ServiceSupport.dispose(t);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,203,IOException ioe=new IOException("Unexpected error occured: " + e);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,28,import org.apache.qpid.proton.amqp.messaging.Modified;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,29,import org.apache.qpid.proton.amqp.messaging.Rejected;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,30,import org.apache.qpid.proton.amqp.messaging.Released;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,31,import org.apache.qpid.proton.amqp.messaging.Target;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,700,sendToActiveMQ(new RemoveInfo(consumerId), null);
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,56,private AtomicBoolean failed = new AtomicBoolean(false);
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,62,public SimpleDiscoveryEvent(SimpleDiscoveryEvent copy) {
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,63,super(copy);
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,64,connectFailures = copy.connectFailures;
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,65,reconnectDelay = copy.reconnectDelay;
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,66,connectTime = copy.connectTime;
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,67,failed.set(copy.failed.get());
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,96,taskRunner.shutdown();
activemq-client/src/main/java/org/apache/activemq/filter/AnyDestination.java,31,physicalName = "0";
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,361,AckEntry pendingAck = this.pedingAcks.get(ackId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,418,AckEntry pendingAck = this.pedingAcks.get(ackId);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,895,broker.preProcessDispatch(messageDispatch);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1836,if (!pagedInPendingDispatch.isEmpty()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1839,pagedInPendingDispatch = doActualDispatch(pagedInPendingDispatch);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1844,if (list != null && !list.isEmpty()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1845,if (pagedInPendingDispatch.isEmpty()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1846,pagedInPendingDispatch.addAll(doActualDispatch(list));
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1848,for (MessageReference qmr : list) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1849,if (!pagedInPendingDispatch.contains(qmr)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1850,pagedInPendingDispatch.addMessageLast(qmr);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1853,doWakeUp = true;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1266,metadata.lastUpdate = location;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1308,metadata.lastUpdate = ackLocation;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,875,+ ", memory=" + memoryUsage.getPercentUsage() + "%, size=" + size + ", in flight groups="
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,876,+ messageGroupOwners;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,315,LOG.trace(destination.getPhysicalName() + " resetBatching, existing last recovered seqId: " + lastRecoveredSequenceId.get());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1125,messagesLock.readLock().lock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1142,messagesLock.readLock().unlock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2536,MessageOrderCursor cursor = new MessageOrderCursor();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2637,if (highPriorityIndex.containsKey(tx, sequence)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2638,lastHighKey = sequence;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2639,cursor.highPriorityCursorPosition = nextPosition.longValue();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2641,lastLowKey = sequence;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2642,cursor.lowPriorityCursorPosition = nextPosition.longValue();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2645,LOG.warn("setBatch: sequence " + sequence + " not found in orderindex:" + this);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,21,import org.apache.activemq.command.ConnectionError;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,214,ConnectionContext oldContext = clientIdSet.get(clientId);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,916,sender.open();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTSubscription.java,48,return new MessageAck(md, MessageAck.STANDARD_ACK_TYPE, 1);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,92,storeHasMessages = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,279,this.storeHasMessages = !this.batchList.isEmpty() || !hadSpace;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1558,private final HashMap<String, StoredDestination> storedDestinations = new HashMap<String, StoredDestination>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2099,private String key(KahaDestination destination) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,58,public static final int MAX_AUDIT_DEPTH = 2048;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,76,private static final int MAX_ASYNC_JOBS = 10000;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,325,long[] storedValues = persistenceAdapter.getStoreSequenceIdForMessageId(messageId, destination);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,801,long[] getStoreSequenceIdForMessageId(MessageId messageId, ActiveMQDestination destination) throws IOException {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,803,TransactionContext c = getTransactionContext();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,35,import org.apache.activemq.broker.region.Destination;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,36,import org.apache.activemq.broker.region.RegionBroker;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,424,KahaAddMessageCommand command = new KahaAddMessageCommand();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,595,lockAsyncJobQueue();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,601,indexLock.writeLock().lock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,602,try {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,603,pageFile.tx().execute(new Transaction.Closure<IOException>() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,604,public void execute(Transaction tx) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,605,StoredDestination sd = getStoredDestination(dest, tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,606,Long location = sd.messageIdIndex.get(tx, key);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,607,if (location != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,608,sd.orderIndex.setBatch(tx, location);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,613,indexLock.writeLock().unlock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,616,unlockAsyncJobQueue();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,634,this.localDestinationSemaphore.tryAcquire(this.maxAsyncJobs, 60, TimeUnit.SECONDS);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,588,receiver.flow(prefetch);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,608,receiver.flow(prefetch);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,942,consumerInfo.setPrefetchSize(100);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1106,if (ref.isExpired()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,52,if (n.isExpired()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,54,if (!broker.isExpired(n)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,56,return;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,38,import java.util.concurrent.Future;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,98,public class Queue extends BaseDestination implements Task, UsageListener {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,760,message.incrementReferenceCount();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,789,sendMessage(message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1680,final void sendMessage(final Message msg) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1683,messages.addMessageLast(msg);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,85,public void addMessageLast(MessageReference node) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,89,addMessageLast(node);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,90,return true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,40,private MessageId lastCachedId;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,171,public final synchronized void addMessageLast(MessageReference node) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,182,lastCachedId = node.getMessageId();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,196,if (lastCachedId != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,202,setBatch(lastCachedId);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,203,lastCachedId = null;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,245,for (Iterator<MessageReference>i = batchList.iterator();i.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,246,MessageReference msg = i.next();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,203,public synchronized void addMessageLast(MessageReference node) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,204,tryAddMessageLast(node, 0);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/PendingMessageCursor.java,87,void addMessageLast(MessageReference node) throws Exception;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,186,public synchronized void addMessageLast(MessageReference node) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,90,public synchronized void addMessageLast(MessageReference node) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,100,persistent.addMessageLast(node);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/VMPendingMessageCursor.java,100,public synchronized void addMessageLast(MessageReference node) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,98,public void addMessage(ConnectionContext context, Message message) throws IOException {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,206,if (context != null && context.getXid() != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,365,throw new SQLException("Failed to remove message");
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1109,printQuery(c, "Select * from ACTIVEMQ_MSGS ORDER BY ID", System.out);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1110,printQuery(c, "Select * from ACTIVEMQ_ACKS", System.out);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,74,public class KahaDBStore extends MessageDatabase implements PersistenceAdapter {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,291,void rollbackStatsOnDuplicate(KahaDestination commandDestination) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,292,if (brokerService != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,293,RegionBroker regionBroker = (RegionBroker) brokerService.getRegionBroker();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,294,if (regionBroker != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,297,destination.getDestinationStatistics().getMessages().decrement();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,298,destination.getDestinationStatistics().getEnqueues().decrement();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,386,return result.getFuture();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,423,public void addMessage(ConnectionContext context, Message message) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,432,store(command, isEnableJournalDiskSyncs() && message.isResponseRequired(), null, null);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,592,public void setBatch(MessageId identity) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBTransactionStore.java,45,import org.apache.activemq.store.kahadb.MessageDatabase.AddOpperation;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBTransactionStore.java,47,import org.apache.activemq.store.kahadb.MessageDatabase.RemoveOpperation;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBTransactionStore.java,336,if (op.getClass() == AddOpperation.class) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBTransactionStore.java,337,AddOpperation addOp = (AddOpperation) op;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBTransactionStore.java,342,RemoveOpperation rmOp = (RemoveOpperation) op;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,235,public MessageDatabase() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,492,if (operation instanceof AddOpperation) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,493,AddOpperation add = (AddOpperation) operation;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,497,RemoveOpperation removeOpperation = (RemoveOpperation) operation;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,896,return store(data, false, null,null, onJournalStoreComplete);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,899,public Location store(JournalCommand<?> data, boolean sync, Runnable before,Runnable after) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1010,process(command, location);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1056,protected void process(final KahaAddMessageCommand command, final Location location) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1058,List<Operation> inflightTx = getInflightTx(command.getTransactionInfo(), location);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1059,inflightTx.add(new AddOpperation(command, location));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1078,List<Operation> inflightTx = getInflightTx(command.getTransactionInfo(), location);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1079,inflightTx.add(new RemoveOpperation(command, location));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1160,this.indexLock.writeLock().lock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1162,pageFile.tx().execute(new Transaction.Closure<IOException>() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1164,public void execute(Transaction tx) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1165,for (Operation op : messagingTx) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1166,op.execute(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1170,metadata.lastUpdate = location;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1173,this.indexLock.writeLock().unlock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1232,return;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1253,rollbackStatsOnDuplicate(command.getDestination());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1269,abstract void rollbackStatsOnDuplicate(KahaDestination commandDestination);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2140,private List<Operation> getInflightTx(KahaTransactionInfo info, Location location) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2178,class AddOpperation extends Operation<KahaAddMessageCommand> {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2180,public AddOpperation(KahaAddMessageCommand command, Location location) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2191,class RemoveOpperation extends Operation<KahaRemoveMessageCommand> {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2193,public RemoveOpperation(KahaRemoveMessageCommand command, Location location) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2704,Iterator<Entry<Long, MessageKeys>> iterator = index.iterator(tx, sequenceId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2739,return new MessageOrderIterator(tx,cursor);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2743,return new MessageOrderIterator(tx,m);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2756,MessageOrderIterator(Transaction tx, MessageOrderCursor m) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2757,this.defaultIterator = defaultPriorityIndex.iterator(tx, m.defaultCursorPosition);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2759,this.highIterator = highPriorityIndex.iterator(tx, m.highPriorityCursorPosition);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2764,this.lowIterator = lowPriorityIndex.iterator(tx, m.lowPriorityCursorPosition);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/BTreeIndex.java,232,return getRoot(tx).iterator(tx, initialKey);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/BTreeNode.java,87,private BTreeIterator(Transaction tx, BTreeNode<Key,Value> current, int nextIndex) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/BTreeNode.java,634,public Iterator<Map.Entry<Key,Value>> iterator(final Transaction tx, Key startKey) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/BTreeNode.java,639,return getLeafNode(tx, this, startKey).iterator(tx, startKey);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/BTreeNode.java,645,return new BTreeIterator(tx, this, idx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/BTreeNode.java,650,return new BTreeIterator(tx, getFirstLeafNode(tx), 0);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,119,c.getConnection().commit();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,148,c.getConnection().commit();
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,59,private boolean logMessageEvents = false;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,87,public boolean isLogMessageEvents() {
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,88,return logMessageEvents;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,94,public void setLogMessageEvents(boolean logMessageEvents) {
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,95,this.logMessageEvents = logMessageEvents;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,600,buf.append(", logMessageEvents=");
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,601,buf.append(isLogMessageEvents());
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2348,connector.setBrokerService(this);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2424,protected TransportConnector startTransportConnector(TransportConnector connector) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,270,connector.start();
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,111,public Destination[] createDestination(int destIndex, int destCount) throws JMSException {
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,113,if (getClient().isDestComposite()) {
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,114,return new Destination[] {
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,118,Destination[] dest = new Destination[destCount];
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,123,return dest;
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,127,public Destination createCompositeDestination(int destIndex, int destCount) throws JMSException {
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,128,return createCompositeDestination(getClient().getDestName(), destIndex, destCount);
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,131,protected Destination createCompositeDestination(String name, int destIndex, int destCount) throws JMSException {
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,133,String simpleName;
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,135,if (name.startsWith("queue://")) {
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,136,simpleName = name.substring("queue://".length());
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,138,simpleName = name.substring("topic://".length());
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,140,simpleName = name;
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,151,return createDestination(compDestName);
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,154,protected Destination createDestination(String name) throws JMSException {
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,155,if (name.startsWith("queue://")) {
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,156,return getSession().createQueue(name.substring("queue://".length()));
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,158,return getSession().createTopic(name.substring("topic://".length()));
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,160,return getSession().createTopic(name);
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/JmsConsumerClient.java,211,Destination[] dest = createDestination(destIndex, destCount);
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/JmsProducerClient.java,80,Destination[] dest = createDestination(destIndex, destCount);
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/JmsProducerClient.java,167,Destination[] dest = createDestination(destIndex, destCount);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,21,import javax.jms.JMSException;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,25,import org.fusesource.mqtt.codec.*;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,29,TcpTransport transport;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,31,DataByteArrayOutputStream currentCommand = new DataByteArrayOutputStream();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,32,boolean processedHeader = false;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,33,String action;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,34,byte header;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,35,int contentLength = -1;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,36,int previousByte = -1;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,37,int payLoadRead = 0;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,39,public MQTTCodec(TcpTransport transport) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,40,this.transport = transport;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,43,public void parse(DataByteArrayInputStream input, int readSize) throws Exception {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,44,int i = 0;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,45,byte b;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,46,while (i++ < readSize) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,47,b = input.readByte();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,49,if (!processedHeader && b == 0) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,50,previousByte = 0;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,51,continue;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,54,if (!processedHeader) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,55,i += processHeader(b, input);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,56,if (contentLength == 0) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,57,processCommand();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,62,if (contentLength == -1) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,64,if (b == 0) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,65,processCommand();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,67,currentCommand.write(b);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,71,if (payLoadRead == contentLength) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,72,processCommand();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,73,i += processHeader(b, input);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,75,currentCommand.write(b);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,76,payLoadRead++;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,81,previousByte = b;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,83,if (processedHeader && payLoadRead == contentLength) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,84,processCommand();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,93,private int processHeader(byte header, DataByteArrayInputStream input) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,94,this.header = header;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,95,byte digit;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,96,int multiplier = 1;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,97,int read = 0;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,98,int length = 0;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,99,do {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,100,digit = input.readByte();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,101,length += (digit & 0x7F) * multiplier;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,102,multiplier <<= 7;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,103,read++;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,106,contentLength = length;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,107,processedHeader = true;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,108,return read;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,112,private void processCommand() throws Exception {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,113,MQTTFrame frame = new MQTTFrame(currentCommand.toBuffer().deepCopy()).header(header);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,114,transport.doConsume(frame);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,115,processedHeader = false;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,116,currentCommand.reset();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,117,contentLength = -1;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,118,payLoadRead = 0;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,121,public static String commandType(byte header) throws IOException, JMSException {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,123,byte messageType = (byte) ((header & 0xF0) >>> 4);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,124,switch (messageType) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,125,case PINGREQ.TYPE: {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,126,return "PINGREQ";
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,128,case CONNECT.TYPE: {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,129,return "CONNECT";
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,131,case DISCONNECT.TYPE: {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,132,return "DISCONNECT";
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,134,case SUBSCRIBE.TYPE: {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,135,return "SUBSCRIBE";
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,137,case UNSUBSCRIBE.TYPE: {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,138,return "UNSUBSCRIBE";
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,140,case PUBLISH.TYPE: {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,141,return "PUBLISH";
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,143,case PUBACK.TYPE: {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,144,return "PUBACK";
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,146,case PUBREC.TYPE: {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,147,return "PUBREC";
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,149,case PUBREL.TYPE: {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,150,return "PUBREL";
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,152,case PUBCOMP.TYPE: {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,153,return "PUBCOMP";
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,155,default:
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,156,return "UNKNOWN";
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTNIOSSLTransport.java,32,MQTTCodec codec;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestination.java,44,public void remove(Destination destination) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualDestinationInterceptor.java,47,Set matchingDestinations = destinationMap.get(destination.getActiveMQDestination());
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualDestinationInterceptor.java,50,VirtualDestination virtualDestination = (VirtualDestination)iter.next();
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualDestinationInterceptor.java,67,for (VirtualDestination virt: virtualDestinations) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualDestinationInterceptor.java,72,public synchronized void remove(Destination destination) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopic.java,51,return selectorAware ? new SelectorAwareVirtualTopicInterceptor(destination, getPrefix(), getPostfix(), isLocal()) :
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopic.java,52,new VirtualTopicInterceptor(destination, getPrefix(), getPostfix(), isLocal());
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopic.java,65,public void remove(Destination destination) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTSslTransportFactory.java,22,import org.apache.activemq.broker.BrokerContext;
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,95,private long inactiveTimoutBeforeGC = DEFAULT_INACTIVE_TIMEOUT_BEFORE_GC;
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,251,public void setMemoryUsage(MemoryUsage memoryUsage) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,252,this.memoryUsage = memoryUsage;
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,665,public long getInactiveTimoutBeforeGC() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,666,return this.inactiveTimoutBeforeGC;
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,672,public void setInactiveTimoutBeforeGC(long inactiveTimoutBeforeGC) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,673,this.inactiveTimoutBeforeGC = inactiveTimoutBeforeGC;
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,704,&& destinationStatistics.messages.getCount() == 0 && getInactiveTimoutBeforeGC() > 0l) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,712,if ((System.currentTimeMillis() - this.lastActiveTime) >= getInactiveTimoutBeforeGC()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Destination.java,57,long getInactiveTimoutBeforeGC();
activemq-broker/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,80,public long getInactiveTimoutBeforeGC() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,81,return next.getInactiveTimoutBeforeGC();
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,97,private long inactiveTimoutBeforeGC = BaseDestination.DEFAULT_INACTIVE_TIMEOUT_BEFORE_GC;
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,821,return this.inactiveTimoutBeforeGC;
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,825,this.inactiveTimoutBeforeGC = inactiveTimoutBeforeGC;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,242,ack.code(CONNACK.Code.CONNECTION_REFUSED_SERVER_UNAVAILABLE);
activemq-console/src/main/java/org/apache/activemq/console/command/store/StoreExporter.java,27,import org.codehaus.jackson.map.ObjectMapper;
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,20,import java.nio.channels.SocketChannel;
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,48,private long i = 0;
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,50,public Thread newThread(Runnable runnable) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,51,this.i++;
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,52,final Thread t = new Thread(runnable, "ActiveMQ NIO Worker " + this.i);
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,53,return t;
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,70,throws IOException {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,73,while( selection == null ) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,76,if( worker.isReleased() ) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,80,selection = new SelectorSelection(worker, socketChannel, listener);
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,86,selection = new SelectorSelection(worker, socketChannel, listener);
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,22,import java.nio.channels.SocketChannel;
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,36,private AtomicBoolean closed = new AtomicBoolean();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,38,public SelectorSelection(final SelectorWorker worker, final SocketChannel socketChannel, Listener listener) throws ClosedChannelException {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,44,SelectorSelection.this.key = socketChannel.register(worker.selector, 0, SelectorSelection.this);
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,80,if( closed.compareAndSet(false, true) ) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,271,while (!isStopped()) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,272,Socket socket = null;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,274,socket = serverSocket.accept();
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,275,if (socket != null) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,276,if (isStopped() || getAcceptListener() == null) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,277,socket.close();
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,279,if (useQueueForAccept) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,280,socketQueue.put(socket);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,282,handleSocket(socket);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,289,if (!isStopping()) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,290,onAcceptError(e);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,292,LOG.warn("run()", e);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,293,onAcceptError(e);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,89,void doRecoverNextMessages(TransactionContext c, ActiveMQDestination destination, long nextSeq, long priority, int maxReturned, boolean isPrioritizeMessages, JDBCMessageRecoveryListener listener) throws Exception;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,109,long sequenceId = persistenceAdapter.getNextSequenceId();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,122,try {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,138,protected void onAdd(MessageId messageId, long sequenceId, byte priority) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,219,Message msg = (Message)wireFormat.unmarshal(new ByteSequence(data));
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,278,adapter.doRecoverNextMessages(c, destination, lastRecoveredSequenceId.get(), lastRecoveredPriority.get(),
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,709,synchronized(sequenceGenerator) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,710,return sequenceGenerator.getNextSequenceId();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,319,protected void onAdd(MessageId messageId, long sequenceId, byte priority) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,326,sequenceIdCache.put(messageId, new long[]{sequenceId, priority});
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,108,message.getMessageId(),
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/Statements.java,485,+ " WHERE CONTAINER=? AND ID > ? AND XID IS NULL ORDER BY ID";
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/Statements.java,498,+ " AND ((ID > ? AND PRIORITY = ?) OR PRIORITY < ?)"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1027,public void doRecoverNextMessages(TransactionContext c, ActiveMQDestination destination, long nextSeq,
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1040,s.setLong(2, nextSeq);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1042,s.setLong(3, priority);
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,86,Map brokerOptions = IntrospectionSupport.extractProperties(options, "broker.");
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,67,host = (String)brokerData.getParameters().get("brokerName");
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,82,String config = (String)options.remove("brokerConfig");
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,183,if (broker == null && waitForStart > 0) {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,188,LOG.debug("waiting for broker named: " + brokerName + " to start");
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,200,public Object chooseValue(ActiveMQDestination destination) {
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,205,SortedSet sortedSet = new TreeSet(set);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1582,static protected class MessageKeysMarshaller extends VariableMarshaller<MessageKeys> {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1583,static final MessageKeysMarshaller INSTANCE = new MessageKeysMarshaller();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1587,return new MessageKeys(dataIn.readUTF(), LocationMarshaller.INSTANCE.readPayload(dataIn));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1593,LocationMarshaller.INSTANCE.writePayload(object.location, dataOut);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2555,defaultPriorityIndex.setValueMarshaller(MessageKeysMarshaller.INSTANCE);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2558,lowPriorityIndex.setValueMarshaller(MessageKeysMarshaller.INSTANCE);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2561,highPriorityIndex.setValueMarshaller(MessageKeysMarshaller.INSTANCE);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,220,LOG.info("Corrupt journal records found in '"+dataFile.getFile()+"' between offsets: "+sequence);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/PrioritizedPendingList.java,136,if (map.values().contains(message)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/PrioritizedPendingList.java,137,return true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/OrderedPendingList.java,140,for (PendingNode value : map.values()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/OrderedPendingList.java,141,if (value.getMessage().equals(message)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/OrderedPendingList.java,142,return true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,220,node.decrementReferenceCount();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,639,node.decrementReferenceCount();
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,224,messageSend.setMessageId(new MessageId(this.producerId, this.messageIdGenerator.getNextSequenceId()));
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,291,throw new UnsupportedOperationException("You cannot dynamically change the selector for durable topic subscriptions");
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,154,if (destination == null) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,159,if (destination.isQueue() == destination2.isQueue()) {
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,206,return sortedSet.last();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1893,if (storeLimit > dirFreeSpace) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,319,ConnectionContext context = new ConnectionContext();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,343,ConnectionContext context = new ConnectionContext();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,76,if (text == null && getContent() != null) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,79,ByteSequence bodyAsBytes = getContent();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,80,if (bodyAsBytes != null) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,81,is = new ByteArrayInputStream(bodyAsBytes);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,82,if (isCompressed()) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,83,is = new InflaterInputStream(is);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,85,DataInputStream dataIn = new DataInputStream(is);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,86,text = MarshallingSupport.readUTF8(dataIn);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,87,dataIn.close();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,124,MarshallingSupport.writeUTF8(dataOut, this.text);
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,90,DestinationViewMBean destinationViewMBean = iter.next();
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,91,if (name.equals(destinationViewMBean.getName())) {
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,92,return destinationViewMBean;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,108,storeContent();
activemq-broker/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,58,DemandSubscription sub = createDemandSubscription(dest);
activemq-broker/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,59,if (dest.isTopic()) {
activemq-broker/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,60,sub.getLocalInfo().setSubscriptionName(getSubscriberName(dest));
activemq-broker/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,63,addSubscription(sub);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,782,if (session.isClientAcknowledge()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,222,protected Object sendMutex = new Object();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,66,if (!isStopping()) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,67,synchronized (this) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,68,unregisterMBean(byClientIdName);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,69,unregisterMBean(byAddressName);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,70,byClientIdName = null;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,71,byAddressName = null;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,310,if (node.isExpired()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,311,if (broker.isExpired(node)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,312,Destination regionDestination = nodeDest;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,313,regionDestination.messageExpired(context, this, node);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,315,iter.remove();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,316,nodeDest.getDestinationStatistics().getInflight().decrement();
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,287,if (bytesRead == 0) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,330,while (true) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,331,switch (sslEngine.getHandshakeStatus()) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,332,case NEED_UNWRAP:
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,333,secureRead(ByteBuffer.allocate(sslSession.getApplicationBufferSize()));
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,334,break;
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,335,case NEED_TASK:
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,336,Runnable task;
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,337,while ((task = sslEngine.getDelegatedTask()) != null) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,338,taskRunnerFactory.execute(task);
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,340,break;
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,341,case NEED_WRAP:
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,342,((NIOOutputStream) buffOut).write(ByteBuffer.allocate(0));
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,343,break;
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,344,case FINISHED:
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,345,case NOT_HANDSHAKING:
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,346,finishHandshake();
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,347,return;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2633,if (defaultPriorityIndex.containsKey(tx, sequence)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2634,lastDefaultKey = sequence;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2635,cursor.defaultCursorPosition = nextPosition.longValue();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2646,lastDefaultKey = sequence;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2647,cursor.defaultCursorPosition = nextPosition.longValue();
activemq-client/src/main/java/org/apache/activemq/command/CommandTypes.java,30,byte PROTOCOL_STORE_VERSION = 6;
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,41,public static final int DEFAULT_VERSION = CommandTypes.PROTOCOL_STORE_VERSION;
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,69,this(DEFAULT_VERSION);
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,228,DataStreamMarshaller dsm = (DataStreamMarshaller)dataMarshallers[type & 0xFF];
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,266,dataOut.writeInt(size);
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,296,DataStreamMarshaller dsm = (DataStreamMarshaller)dataMarshallers[type & 0xFF];
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,319,DataStreamMarshaller dsm = (DataStreamMarshaller)dataMarshallers[type & 0xFF];
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,363,DataStreamMarshaller dsm = (DataStreamMarshaller)dataMarshallers[dataType & 0xFF];
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,402,DataStreamMarshaller dsm = (DataStreamMarshaller)dataMarshallers[type & 0xFF];
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,429,DataStreamMarshaller dsm = (DataStreamMarshaller)dataMarshallers[type & 0xFF];
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,442,DataStreamMarshaller dsm = (DataStreamMarshaller)dataMarshallers[dataType & 0xFF];
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,475,DataStreamMarshaller dsm = (DataStreamMarshaller)dataMarshallers[dataType & 0xFF];
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,493,DataStreamMarshaller dsm = (DataStreamMarshaller)dataMarshallers[type & 0xFF];
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,956,if (!isEmptyTopic(entry, tx)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,957,rc.add(convert(entry.getKey()));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,963,throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,964,boolean isEmptyTopic = false;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,965,ActiveMQDestination dest = convert(entry.getKey());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,966,if (dest.isTopic()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,967,StoredDestination loadedStore = getStoredDestination(convert(dest), tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,968,if (loadedStore.subscriptionAcks.isEmpty(tx)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,969,isEmptyTopic = true;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,972,return isEmptyTopic;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,267,if (adapter.getDestinations().isEmpty()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,268,stopAdapter(adapter, destination.toString());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,269,File adapterDir = adapter.getDirectory();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,270,if (adapterDir != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,271,if (IOHelper.deleteFile(adapterDir)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,272,if (LOG.isTraceEnabled()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,273,LOG.info("deleted per destination adapter directory for: " + destination);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,276,if (LOG.isTraceEnabled()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,277,LOG.info("failed to deleted per destination adapter directory for: " + destination);
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,53,private final boolean keepDurableSubsActive;
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,190,this.usageManager.getMemoryUsage().removeUsageListener(this);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,640,if( !isDropped(node) && canDispatch(node)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,644,if (node!=QueueMessageReference.NULL_MESSAGE && node.isExpired()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,484,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,485,LOG.debug(getConsumerId() + " received expired message: " + md);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,680,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,681,LOG.debug("remove: " + this.getConsumerId() + ", lastDeliveredSequenceId:" + lastDeliveredSequenceId);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,700,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,701,LOG.debug(getConsumerId() + " clearing unconsumed list (" + unconsumedMessages.size() + ") on transport interrupt");
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,984,if ( !oldPendingAck.isDeliveredAck()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,985,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,986,LOG.debug("Sending old pending ack " + oldPendingAck + ", new pending: " + pendingAck);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,990,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,991,LOG.debug("dropping old pending ack " + oldPendingAck + ", new pending: " + pendingAck);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1089,LOG.info("waiting for redelivery of " + numberNotReplayed + " in transaction: "
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1090,+ previouslyDeliveredMessages.transactionId +  ", to consumer :" + this.getConsumerId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1112,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1113,LOG.debug("previously delivered message has not been replayed in transaction: "
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1114,+ previouslyDeliveredMessages.transactionId
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1115,+ " , messageId: " + entry.getKey());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1325,LOG.error(getConsumerId() + " Exception while processing message: " + md.getMessage().getMessageId(), e);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1353,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1412,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1413,LOG.debug(getConsumerId() + " clearing delivered list (" + deliveredMessages.size() + ") on transport interrupt");
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1514,if (LOG.isInfoEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1515,LOG.info("Consumer:{} is performing scheduled delivery of outstanding optimized Acks", info.getConsumerId());
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,650,continue;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,21,import java.util.concurrent.atomic.AtomicLong;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,66,protected AtomicLong lastRecoveredSequenceId = new AtomicLong(-1);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,67,protected AtomicLong lastRecoveredPriority = new AtomicLong(Byte.MAX_VALUE -1);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,286,lastRecoveredSequenceId.set(sequenceId);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,287,lastRecoveredPriority.set(msg.getPriority());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,317,lastRecoveredSequenceId.set(-1);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,326,lastRecoveredSequenceId.set(storedValues[0]);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,327,lastRecoveredPriority.set(storedValues[1]);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,329,lastRecoveredSequenceId.set(-1);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,330,lastRecoveredPriority.set(Byte.MAX_VALUE -1);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,334,+ ", priority: " + lastRecoveredPriority.get());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1028,long priority, int maxReturned, boolean isPrioritizedMessages, JDBCMessageRecoveryListener listener) throws Exception {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1043,s.setLong(4, priority);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,318,lastRecoveredPriority.set(Byte.MAX_VALUE - 1);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,227,private boolean rewriteOnRedelivery = false;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1891,for(Long sequenceId : pendingAcks) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1973,count = count.longValue() + 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1974,sd.messageReferences.put(ackPosition, count);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1997,sd.messageReferences.put(messageSequence+1, Long.valueOf(0L));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2060,if (count != null){
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2061,long references = count.longValue() - 1;
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,162,throws Exception {
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,75,protected ThreadPoolExecutor connectionSerivce;
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,119,connectionSerivce = createExecutor();
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,170,ThreadPoolUtils.shutdown(connectionSerivce);
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,171,connectionSerivce = null;
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,496,this.connectionSerivce.execute(new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,521,this.connectionSerivce.execute(new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,536,this.connectionSerivce.execute(new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,549,this.connectionSerivce.execute(new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,574,do
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,583,if (connectionSerivce.isTerminating()) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,613,while (maxRetries < ++attempt && !connectionSerivce.isTerminating());
activemq-broker/src/main/java/org/apache/activemq/network/jms/ReconnectionPolicy.java,31,private int maxReconnectAttempts = -1;
activemq-broker/src/main/java/org/apache/activemq/network/jms/ReconnectionPolicy.java,32,private int maxInitialConnectAttempts = -1;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,94,public void start() throws IOException {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,254,protected MBeanServer getMBeanServer() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,147,while (endpointWorkers.size() > 0) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,148,ActiveMQEndpointActivationKey key = endpointWorkers.keySet().iterator().next();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,149,endpointDeactivation(key.getMessageEndpointFactory(), key.getActivationSpec());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,208,ActiveMQEndpointWorker worker = endpointWorkers.remove(key);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/Statements.java,318,public String findAllDurableSubMessagesStatement() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/Statements.java,319,if (findAllDurableSubMessagesStatement == null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/Statements.java,321,+ " M, " + getFullAckTableName() + " D "
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/Statements.java,322,+ " WHERE D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=?"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/Statements.java,323,+ " AND M.CONTAINER=D.CONTAINER AND M.ID > D.LAST_ACKED_ID"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/Statements.java,324,+ " ORDER BY M.ID";
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/Statements.java,326,return findAllDurableSubMessagesStatement;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,221,String selector = subscription.getConsumerInfo().getSelector();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,225,String s1 = info.getSelector();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,226,if (s1 == null ^ selector == null || (s1 != null && !s1.equals(selector))) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,246,info.setSelector(selector);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,529,if (getBrokerService().getDefaultSocketURIString() != null) {
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,34,PREDEFINED_OBJNAME_QUERY.setProperty("Broker", "type=Broker,brokerName=%1");
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,35,PREDEFINED_OBJNAME_QUERY.setProperty("Connection", "type=Broker,connector=clientConnectors,connectionName=%1,*");
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,36,PREDEFINED_OBJNAME_QUERY.setProperty("Connector", "type=Broker,brokerName=*,connector=clientConnectors,connectorName=%1");
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,37,PREDEFINED_OBJNAME_QUERY.setProperty("NetworkConnector", "type=Broker,brokerName=%1,connector=networkConnectors,networkConnectorName=*");
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,38,PREDEFINED_OBJNAME_QUERY.setProperty("Queue", "type=Broker,brokerName=*,destinationType=Queue,destinationName=%1");
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,39,PREDEFINED_OBJNAME_QUERY.setProperty("Topic", "type=Broker,brokerName=*,destinationType=Topic,destinationName=%1,*");
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,860,try {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,875,ack.setFirstMessageId(md.getMessage().getMessageId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,876,doStartTransaction();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,877,ack.setTransactionId(getTransactionContext().getTransactionId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,878,if (ack.getTransactionId() != null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,879,getTransactionContext().addSynchronization(new Synchronization() {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,882,public void afterRollback() throws Exception {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,885,connection.rollbackDuplicate(ActiveMQSession.this, md.getMessage());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,886,RedeliveryPolicy redeliveryPolicy = connection.getRedeliveryPolicy();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,887,int redeliveryCounter = md.getMessage().getRedeliveryCounter();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,888,if (redeliveryPolicy.getMaximumRedeliveries() != RedeliveryPolicy.NO_MAXIMUM_REDELIVERIES
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,894,MessageAck ack = new MessageAck(md, MessageAck.POSION_ACK_TYPE, 1);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,895,ack.setFirstMessageId(md.getMessage().getMessageId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,896,asyncSendPacket(ack);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,899,MessageAck ack = new MessageAck(md, MessageAck.REDELIVERED_ACK_TYPE, 1);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,900,ack.setFirstMessageId(md.getMessage().getMessageId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,901,asyncSendPacket(ack);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,905,long redeliveryDelay = redeliveryPolicy.getInitialRedeliveryDelay();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,906,for (int i = 0; i < redeliveryCounter; i++) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,907,redeliveryDelay = redeliveryPolicy.getNextRedeliveryDelay(redeliveryDelay);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,909,connection.getScheduler().executeAfterDelay(new Runnable() {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,911,public void run() {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,921,connection.onClientInternalException(e);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,924,if (deliveryListener != null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,925,deliveryListener.afterDelivery(this, message);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,1995,return "ActiveMQSession {id=" + info.getSessionId() + ",started=" + started.get() + "}";
activemq-console/src/main/java/org/apache/activemq/console/Main.java,115,app.runTaskClass(tokens);
activemq-console/src/main/java/org/apache/activemq/console/Main.java,116,System.exit(0);
activemq-console/src/main/java/org/apache/activemq/console/Main.java,219,public void runTaskClass(List<String> tokens) throws Throwable {
activemq-console/src/main/java/org/apache/activemq/console/Main.java,262,runTask.invoke(task.newInstance(), args, System.in, System.out);
activemq-console/src/main/java/org/apache/activemq/console/command/ShellCommand.java,108,return -1;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,636,switch (command.qos()) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,637,case AT_LEAST_ONCE:
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,638,return new ResponseHandler() {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,639,public void onResponse(MQTTProtocolConverter converter, Response response) throws IOException {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,640,if (response.isException()) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,641,LOG.warn("Failed to send MQTT Publish: ", command, ((ExceptionResponse) response).getException());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,643,PUBACK ack = new PUBACK();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,644,ack.messageId(command.messageId());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,645,converter.getMQTTTransport().sendToMQTT(ack.encode());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,649,case EXACTLY_ONCE:
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,650,return new ResponseHandler() {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,651,public void onResponse(MQTTProtocolConverter converter, Response response) throws IOException {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,652,if (response.isException()) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,653,LOG.warn("Failed to send MQTT Publish: ", command, ((ExceptionResponse) response).getException());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,655,PUBREC ack = new PUBREC();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,656,ack.messageId(command.messageId());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,657,synchronized (publisherRecs) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,658,publisherRecs.put(command.messageId(), ack);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,660,converter.getMQTTTransport().sendToMQTT(ack.encode());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,664,case AT_MOST_ONCE:
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,665,break;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,377,URI uri = getVmConnectorURI();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,378,Map<String, String> map = new HashMap<String, String>(URISupport.parseParameters(uri));
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,379,map.put("network", "true");
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,380,uri = URISupport.createURIWithQuery(uri, URISupport.createQueryString(map));
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,381,connector.setLocalUri(uri);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2359,map.put("network", "true");
activemq-broker/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,44,public static DemandForwardingBridge createBridge(NetworkBridgeConfiguration config,
activemq-broker/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,45,Transport localTransport, Transport remoteTransport) {
activemq-broker/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,46,return createBridge(config, localTransport, remoteTransport, null);
activemq-broker/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,77,map.put("network", "true");
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,50,protected boolean network;
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,334,public boolean isNetwork() {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,335,return network;
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,338,public void setNetwork(boolean network) {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,339,this.network = network;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,380,ObjectInstance result = getMBeanServer().registerMBean(bean, name);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,381,this.registeredMBeanNames.put(name, result.getObjectName());
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOTransport.java,32,import org.apache.activemq.command.Command;
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOTransport.java,138,doConsume((Command)command);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,231,private final Object persistenceAdapterLock = new Object();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,580,synchronized (persistenceAdapterLock) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,581,persistenceAdapterLock.notifyAll();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,607,synchronized (persistenceAdapterLock) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,608,persistenceAdapterLock.wait();
activemq-broker/src/main/java/org/apache/activemq/network/jms/DestinationBridge.java,158,protected boolean isDoHandleReplyTo() {
activemq-broker/src/main/java/org/apache/activemq/network/jms/DestinationBridge.java,165,protected void setDoHandleReplyTo(boolean doHandleReplyTo) {
activemq-broker/src/main/java/org/apache/activemq/store/SharedFileLocker.java,65,Thread.sleep(lockAcquireSleepInterval);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionRequestInfo.java,65,public void configure(ActiveMQConnectionFactory factory) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,45,protected ActiveMQConnectionFactory createConnectionFactory(ActiveMQConnectionRequestInfo connectionRequestInfo) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,46,ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,47,connectionRequestInfo.configure(factory);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,60,public ActiveMQConnection makeConnection(ActiveMQConnectionRequestInfo connectionRequestInfo) throws JMSException{
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,61,return makeConnection(connectionRequestInfo, createConnectionFactory(connectionRequestInfo));
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,121,cf = createConnectionFactory(getInfo());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,89,if (AdvisorySupport.isMasterBrokerAdvisoryTopic(destination)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,90,subscriptionRecoveryPolicy = new LastImageSubscriptionRecoveryPolicy();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,91,setAlwaysRetroactive(true);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,290,ObjectName inactiveName = subscriptionKeys.get(subscriptionKey);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1380,sd.messageIdIndex.clear(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1381,sd.locationIndex.clear(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1382,sd.orderIndex.clear(tx);
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,92,if (peer.async || !peer.started.get()) {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,256,public void setMessageQueue(LinkedBlockingQueue<Object> asyncQueue) {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,257,synchronized (this) {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,258,if (messageQueue == null) {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,259,messageQueue = asyncQueue;
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,66,String message = cause.getMessage();
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,67,if (cause instanceof SQLException && message.contains(sqlExceptionMessage)) {
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,68,LOG.info("Ignoring SQLException, " + exception, cause);
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,69,return;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1780,jobSchedulerStore.start();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1793,try {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1794,jobSchedulerStore.start();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1796,RuntimeException exception = new RuntimeException(
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1798,LOG.error(exception.getLocalizedMessage(), e);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1799,throw exception;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,490,super.removeSubscription(context, sub, lastDeiveredSequenceId);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,541,if (ref.getMessageId().getBrokerSequenceId() == lastDeiveredSequenceId) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,557,if (lastDeiveredSequenceId == 0) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,656,long lastDeliveredSequenceId = 0;
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,230,private long lastDeliveredSequenceId;
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,841,ActiveMQMessage message = (ActiveMQMessage)md.getMessage();
activemq-client/src/main/java/org/apache/activemq/command/ConsumerInfo.java,65,private transient long lastDeliveredSequenceId;
activemq-client/src/main/java/org/apache/activemq/command/RemoveInfo.java,34,protected long lastDeliveredSequenceId;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/AnnotatedMBean.java,194,entry.getParameters().put("arguments", objects);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,297,public String sendTextMessage(String body, String user, String password) throws Exception {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,41,private BrokerService brokerService;
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,43,public LocalBrokerFacade(BrokerService brokerService) {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,44,this.brokerService = brokerService;
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,47,public BrokerService getBrokerService() {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,48,return brokerService;
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,50,public String getBrokerName() throws Exception {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,51,return brokerService.getBrokerName();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,53,public Broker getBroker() throws Exception {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,54,return brokerService.getBroker();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,56,public ManagementContext getManagementContext() {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,57,return brokerService.getManagementContext();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,59,public BrokerViewMBean getBrokerAdmin() throws Exception {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,60,return brokerService.getAdminView();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,62,public ManagedRegionBroker getManagedBroker() throws Exception {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,63,BrokerView adminView = brokerService.getAdminView();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,64,if (adminView == null) {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,65,return null;
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,67,return adminView.getBroker();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,71,Set destinations = getManagedBroker().getQueueRegion().getDestinations(destination);
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,72,for (Iterator i = destinations.iterator(); i.hasNext();) {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,73,Destination dest = (Destination) i.next();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,564,JournalCommand<?> message = load(recoveryPosition);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,565,metadata.lastUpdate = recoveryPosition;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,566,process(message, recoveryPosition, lastIndoubtPosition);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,567,redoCounter++;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,749,for (StoredDestination sd : storedDestinations.values()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,211,if ( size>=0 ) {
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,19,import java.util.ArrayList;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,20,import java.util.Enumeration;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,21,import java.util.HashSet;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,22,import java.util.List;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,23,import java.util.Properties;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,24,import java.util.Set;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,25,import java.util.StringTokenizer;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,99,private final Set queryViews = new HashSet(10);
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,120,List addMBeans = JmxMBeansUtil.queryMBeans(createJmxConnection(), queryAddObjects, queryViews);
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,124,List subMBeans = JmxMBeansUtil.queryMBeans(createJmxConnection(), querySubObjects, queryViews);
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,125,addMBeans.removeAll(subMBeans);
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,128,context.printMBean(JmxMBeansUtil.filterMBeansView(addMBeans, queryViews));
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,19,import java.util.ArrayList;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,20,import java.util.Collection;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,21,import java.util.HashMap;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,22,import java.util.Iterator;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,23,import java.util.List;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,24,import java.util.Map;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,25,import java.util.Set;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,105,newData = data.getClass().newInstance();
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,108,newData = new HashMap<Object, Object>();
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,19,import java.util.Iterator;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,20,import java.util.List;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,21,import java.util.Set;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,23,import javax.management.ObjectName;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,25,import javax.management.remote.JMXServiceURL;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,27,import org.apache.activemq.console.filter.GroupPropertiesViewFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,28,import org.apache.activemq.console.filter.MBeansAttributeQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,29,import org.apache.activemq.console.filter.MBeansObjectNameQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,30,import org.apache.activemq.console.filter.MBeansRegExQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,31,import org.apache.activemq.console.filter.MapTransformFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,32,import org.apache.activemq.console.filter.MessagesQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,33,import org.apache.activemq.console.filter.PropertiesViewFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,34,import org.apache.activemq.console.filter.QueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,35,import org.apache.activemq.console.filter.StubQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,36,import org.apache.activemq.console.filter.WildcardToMsgSelectorTransformFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,37,import org.apache.activemq.console.filter.WildcardToRegExTransformFilter;
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,67,private ActiveMQMessageAudit audit;
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,299,Synchronization sync = null;
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,302,if (transaction != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,303,sync = new Synchronization() {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,305,public void afterRollback() {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,306,if (audit != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,307,audit.rollback(message);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,311,transaction.addSynchronization(sync);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,314,if (audit == null || !audit.isDuplicate(message)) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,315,context.setTransaction(transaction);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,316,try {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,317,next.send(producerExchange, message);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,319,context.setTransaction(originalTx);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,322,if (sync != null && transaction != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,323,transaction.removeSynchronization(sync);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,394,public synchronized void brokerServiceStarted() {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,395,super.brokerServiceStarted();
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,397,audit = new ActiveMQMessageAudit();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,200,private boolean supportFailOver;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1677,public boolean isSupportFailOver() {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1678,return this.supportFailOver;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1685,public void setSupportFailOver(boolean supportFailOver) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1686,this.supportFailOver = supportFailOver;
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,396,if (getBrokerService().isSupportFailOver() && audit == null) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,561,if (destination != null && !AdvisorySupport.isAdvisoryTopic(destination)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,618,message.decrementReferenceCount();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,619,matched.remove(message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,620,discarded++;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,621,if(destination != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,622,destination.getDestinationStatistics().getDequeues().increment();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,627,Destination dest = (Destination) message.getRegionDestination();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,628,if (dest != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,629,dest.messageDiscarded(getContext(), this, message);
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1602,if (userSpecifiedClientID) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1603,info.setClientId(null);
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1604,userSpecifiedClientID = false;
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1606,clientIDSet = false;
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1997,cleanup();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,138,MemoryTransactionStore.this.addMessage(getDelegate(), send);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,143,MemoryTransactionStore.this.addMessage(getDelegate(), send);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,148,MemoryTransactionStore.this.addMessage(getDelegate(), message);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,154,MemoryTransactionStore.this.addMessage(getDelegate(), message);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,174,MemoryTransactionStore.this.addMessage(getDelegate(), send);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,179,MemoryTransactionStore.this.addMessage(getDelegate(), send);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,184,MemoryTransactionStore.this.addMessage(getDelegate(), message);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,190,MemoryTransactionStore.this.addMessage(getDelegate(), message);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,303,void addMessage(final MessageStore destination, final Message message) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,327,destination.addMessage(null, message);
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1596,if (isConnectionInfoSentToBroker) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1597,if (!transportFailed.get() && !closing.get()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1598,syncSendPacket(info.createRemoveCommand());
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1600,isConnectionInfoSentToBroker = false;
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1608,started.set(false);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,235,throw new ResourceException("Could cleanup the ActiveMQ connection: " + e, e);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,562,LOG.info("Recovering from the journal ...");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,534,if (cur.getType() == 0) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportFactory.java,84,IntrospectionSupport.setProperties(transport, options);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportFactory.java,85,return super.compositeConfigure(transport, format, options);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpTransportFactory.java,45,IntrospectionSupport.setProperties(transport, options);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpTransportFactory.java,46,return super.compositeConfigure(transport, format, options);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,52,import org.apache.activemq.broker.region.cursors.OrderedPendingList;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,53,import org.apache.activemq.broker.region.cursors.PendingList;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,54,import org.apache.activemq.broker.region.cursors.PendingMessageCursor;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,55,import org.apache.activemq.broker.region.cursors.PrioritizedPendingList;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,56,import org.apache.activemq.broker.region.cursors.StoreQueueCursor;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,57,import org.apache.activemq.broker.region.cursors.VMPendingMessageCursor;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,111,protected PendingList pagedInPendingDispatch = new OrderedPendingList();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,112,protected PendingList redeliveredWaitingDispatch = new OrderedPendingList();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,333,if (prioritizedMessages && this.pagedInPendingDispatch instanceof OrderedPendingList) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,334,pagedInPendingDispatch = new PrioritizedPendingList();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,335,redeliveredWaitingDispatch = new PrioritizedPendingList();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,337,pagedInPendingDispatch = new OrderedPendingList();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,338,redeliveredWaitingDispatch = new OrderedPendingList();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1477,pageInMoreMessages |= !pagedInPendingDispatch.isEmpty();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1489,if (pageInMoreMessages || hasBrowsers || !redeliveredWaitingDispatch.isEmpty()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1596,pagedInPendingDispatch.remove(r);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1729,if (pagedInPendingDispatch.isEmpty()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1730,pagedInPendingDispatch.addAll(newlyPaged);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1734,if (!pagedInPendingDispatch.contains(qmr)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1735,pagedInPendingDispatch.addMessageLast(qmr);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1831,if (!redeliveredWaitingDispatch.isEmpty()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1834,redeliveredWaitingDispatch = doActualDispatch(redeliveredWaitingDispatch);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2065,for (MessageReference ref : pagedInPendingDispatch) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2068,pagedInPendingDispatch.remove(ref);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2118,+ pagedInPendingDispatch.size() + ") for subscription: "
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,92,public Response pullMessage(ConnectionContext context, MessagePull pull) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,98,prefetchExtension.incrementAndGet();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,109,if (dispatchCounterBeforePull == dispatchCounter) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,120,pullTimeout(dispatchCounterBeforePull);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,134,final void pullTimeout(long dispatchCounterBeforePull) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,136,if (dispatchCounterBeforePull == dispatchCounter) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,151,if( !destinations.contains(node.getRegionDestination()) && node!=QueueMessageReference.NULL_MESSAGE) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,218,int index = 0;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,236,index++;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,307,public Response pullMessage(ConnectionContext context, MessagePull pull) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,310,if (getPrefetchSize() == 0 ) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,562,Message message = node.getMessage();
activemq-broker/src/main/java/org/apache/activemq/store/ProxyMessageStore.java,20,import java.util.concurrent.Future;
activemq-broker/src/main/java/org/apache/activemq/store/ProxyMessageStore.java,141,return asyncAddTopicMessage(context,message,canOptimizeHint);
activemq-broker/src/main/java/org/apache/activemq/security/DefaultAuthorizationMap.java,19,import java.util.HashSet;
activemq-broker/src/main/java/org/apache/activemq/security/DefaultAuthorizationMap.java,20,import java.util.Iterator;
activemq-broker/src/main/java/org/apache/activemq/security/DefaultAuthorizationMap.java,21,import java.util.List;
activemq-broker/src/main/java/org/apache/activemq/security/DefaultAuthorizationMap.java,22,import java.util.Set;
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,168,getRootNode(key).appendMatchingValues(answer, paths, 0);
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMapNode.java,206,public void appendMatchingValues(Set<DestinationNode> answer, String[] paths, int startIndex) {
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMapNode.java,212,if (path.equals(ANY_DESCENDENT)) {
activemq-client/src/main/java/org/apache/activemq/util/IdGenerator.java,53,hostName = InetAddressUtil.getLocalHostName();
activemq-client/src/main/java/org/apache/activemq/util/IdGenerator.java,55,stub = "-" + ss.getLocalPort() + "-" + System.currentTimeMillis() + "-";
activemq-client/src/main/java/org/apache/activemq/util/IdGenerator.java,56,Thread.sleep(100);
activemq-broker/src/main/java/org/apache/activemq/security/DefaultAuthorizationMap.java,153,return findWildcardMatches(key);
activemq-camel/src/main/java/org/apache/activemq/camel/component/ActiveMQConfiguration.java,26,import org.springframework.jms.connection.SingleConnectionFactory;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMapMessage.java,437,if (value instanceof Double) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMapMessage.java,440,if (value instanceof Float) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMapMessage.java,443,if (value instanceof UTF8Buffer) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMapMessage.java,444,return Float.valueOf(value.toString()).floatValue();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMapMessage.java,446,if (value instanceof String) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMapMessage.java,447,return Float.valueOf(value.toString()).floatValue();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMapMessage.java,449,throw new MessageFormatException(" cannot read a double from " + value.getClass().getName());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,550,if (this.version.equals(Stomp.V1_1) && subscriptionId == null) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,667,if (this.version.equals(Stomp.V1_1) && subscriptionId == null) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,678,if (this.version.equals(Stomp.V1_1)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2575,if (highPriorityIndex != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2576,Entry<Long, MessageKeys> lastEntry = highPriorityIndex.getLast(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2577,if (lastEntry != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2578,nextMessageId = lastEntry.getKey() + 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2580,lastEntry = defaultPriorityIndex.getLast(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2581,if (lastEntry != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2582,nextMessageId = lastEntry.getKey() + 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2584,lastEntry = lowPriorityIndex.getLast(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2585,if (lastEntry != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2586,nextMessageId = lastEntry.getKey() + 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2591,Entry<Long, MessageKeys> lastEntry = defaultPriorityIndex.getLast(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2593,nextMessageId = lastEntry.getKey() + 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,372,public synchronized void close() throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,373,if (!started) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,374,return;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,376,if (this.timer != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,377,this.timer.cancel();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,379,accessorPool.close();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,381,fileMap.clear();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,382,fileByFileMap.clear();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,383,dataFiles.clear();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,384,lastAppendLocation.set(null);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,385,started = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,215,destinationMap.removeAll(destination);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleAuthenticationPlugin.java,43,private Map<String, String> userPasswords;
activemq-broker/src/main/java/org/apache/activemq/security/SimpleAuthenticationPlugin.java,44,private Map<String, Set<Principal>> userGroups;
activemq-broker/src/main/java/org/apache/activemq/security/SimpleAuthenticationPlugin.java,76,userPasswords = new HashMap<String, String>();
activemq-broker/src/main/java/org/apache/activemq/security/SimpleAuthenticationPlugin.java,77,userGroups = new HashMap<String, Set<Principal>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,52,System.out.println("File " + file + " allready exists, will not benchmark.");
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopic.java,57,if (destination.isQueue() && destination.isPattern() && broker.getDestinations(destination).isEmpty()) {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,189,tr.shutdown(TimeUnit.SECONDS.toMillis(1));
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,235,if (TRANSPORTLOG.isDebugEnabled()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,236,TRANSPORTLOG.debug(this + " failed: " + e, e);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,238,TRANSPORTLOG.warn(this + " failed: " + e);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,76,private long lastUpdated;
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,180,protected void query() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,118,protected final List<Command> dispatchQueue = new LinkedList<Command>();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,142,private final Map<ProducerId, ProducerBrokerExchange> producerExchanges = new HashMap<ProducerId, ProducerBrokerExchange>();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,143,private final Map<ConsumerId, ConsumerBrokerExchange> consumerExchanges = new HashMap<ConsumerId, ConsumerBrokerExchange>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractSubscription.java,198,if (info.getPrefetchSize() > 0) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/ListNode.java,197,entryToRemove = null;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,724,if (isAutoAcknowledgeEach()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,725,synchronized(deliveredMessages) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,737,pendingAck = null;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,988,session.sendAck(oldPendingAck);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,997,if ((0.5 * info.getPrefetchSize()) <= (deliveredCounter + ackCounter - additionalWindowSize)) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1000,deliveredCounter = 0;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1001,additionalWindowSize = 0;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,148,private MessageAck pendingAck;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,731,ack = pendingAck;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,736,ack = pendingAck;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,911,if (pendingAck != null && deliveredCounter > 0) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,912,session.sendAck(pendingAck);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,974,MessageAck oldPendingAck = pendingAck;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,975,pendingAck = new MessageAck(md, ackType, deliveredCounter);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,976,pendingAck.setTransactionId(session.getTransactionContext().getTransactionId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,977,if( oldPendingAck==null ) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,978,pendingAck.setFirstMessageId(pendingAck.getLastMessageId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,980,pendingAck.setFirstMessageId(oldPendingAck.getFirstMessageId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,998,session.sendAck(pendingAck);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,999,pendingAck=null;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,795,messageSent(context, message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,595,List<MessageReference> rc = new ArrayList<MessageReference>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,601,rc.addAll(pending.remove(context, destination));
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,617,return rc;
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,162,final QueueConnection newConnection;
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,164,if (foreignConnection.get() == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,166,if (outboundQueueConnectionFactory == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,168,if (outboundQueueConnectionFactoryName != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,170,.lookup(outboundQueueConnectionFactoryName, QueueConnectionFactory.class);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,178,throw new JMSException("Cannot create foreignConnection - no information");
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,181,if (outboundUsername != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,182,newConnection = outboundQueueConnectionFactory
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,183,.createQueueConnection(outboundUsername, outboundPassword);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,185,newConnection = outboundQueueConnectionFactory.createQueueConnection();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,190,newConnection = (QueueConnection) foreignConnection.getAndSet(null);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,193,if (outboundClientId != null && outboundClientId.length() > 0) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,194,newConnection.setClientID(getOutboundClientId());
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,196,newConnection.start();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,198,outboundMessageConvertor.setConnection(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,201,initializeInboundDestinationBridgesOutboundSide(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,202,initializeOutboundDestinationBridgesOutboundSide(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,206,newConnection.setExceptionListener(new ExceptionListener() {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,208,public void onException(JMSException exception) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,209,handleConnectionFailure(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,214,foreignConnection.set(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,220,final QueueConnection newConnection;
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,222,if (localConnection.get() == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,224,if (localQueueConnectionFactory == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,225,if (embeddedConnectionFactory == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,227,if (localConnectionFactoryName != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,229,.lookup(localConnectionFactoryName, QueueConnectionFactory.class);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,230,if (localUsername != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,231,newConnection = localQueueConnectionFactory
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,232,.createQueueConnection(localUsername, localPassword);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,234,newConnection = localQueueConnectionFactory.createQueueConnection();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,237,throw new JMSException("Cannot create localConnection - no information");
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,240,newConnection = embeddedConnectionFactory.createQueueConnection();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,243,if (localUsername != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,244,newConnection = localQueueConnectionFactory.
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,245,createQueueConnection(localUsername, localPassword);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,247,newConnection = localQueueConnectionFactory.createQueueConnection();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,253,newConnection = (QueueConnection) localConnection.getAndSet(null);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,256,if (localClientId != null && localClientId.length() > 0) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,257,newConnection.setClientID(getLocalClientId());
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,259,newConnection.start();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,261,inboundMessageConvertor.setConnection(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,264,initializeInboundDestinationBridgesLocalSide(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,265,initializeOutboundDestinationBridgesLocalSide(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,269,newConnection.setExceptionListener(new ExceptionListener() {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,271,public void onException(JMSException exception) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,272,handleConnectionFailure(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,277,localConnection.set(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,160,final TopicConnection newConnection;
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,162,if (foreignConnection.get() == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,164,if (outboundTopicConnectionFactory == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,166,if (outboundTopicConnectionFactoryName != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,168,.lookup(outboundTopicConnectionFactoryName, TopicConnectionFactory.class);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,176,throw new JMSException("Cannot create foreignConnection - no information");
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,179,if (outboundUsername != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,180,newConnection = outboundTopicConnectionFactory
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,181,.createTopicConnection(outboundUsername, outboundPassword);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,183,newConnection = outboundTopicConnectionFactory.createTopicConnection();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,188,newConnection = (TopicConnection) foreignConnection.getAndSet(null);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,191,if (outboundClientId != null && outboundClientId.length() > 0) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,192,newConnection.setClientID(getOutboundClientId());
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,194,newConnection.start();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,196,outboundMessageConvertor.setConnection(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,199,initializeInboundDestinationBridgesOutboundSide(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,200,initializeOutboundDestinationBridgesOutboundSide(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,204,newConnection.setExceptionListener(new ExceptionListener() {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,206,public void onException(JMSException exception) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,207,handleConnectionFailure(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,212,foreignConnection.set(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,218,final TopicConnection newConnection;
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,220,if (localConnection.get() == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,222,if (localTopicConnectionFactory == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,223,if (embeddedConnectionFactory == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,225,if (localConnectionFactoryName != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,227,.lookup(localConnectionFactoryName, TopicConnectionFactory.class);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,228,if (localUsername != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,229,newConnection = localTopicConnectionFactory
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,230,.createTopicConnection(localUsername, localPassword);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,232,newConnection = localTopicConnectionFactory.createTopicConnection();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,235,throw new JMSException("Cannot create localConnection - no information");
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,238,newConnection = embeddedConnectionFactory.createTopicConnection();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,241,if (localUsername != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,242,newConnection = localTopicConnectionFactory.
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,243,createTopicConnection(localUsername, localPassword);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,245,newConnection = localTopicConnectionFactory.createTopicConnection();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,251,newConnection = (TopicConnection) localConnection.getAndSet(null);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,254,if (localClientId != null && localClientId.length() > 0) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,255,newConnection.setClientID(getLocalClientId());
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,257,newConnection.start();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,259,inboundMessageConvertor.setConnection(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,262,initializeInboundDestinationBridgesLocalSide(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,263,initializeOutboundDestinationBridgesLocalSide(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,267,newConnection.setExceptionListener(new ExceptionListener() {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,269,public void onException(JMSException exception) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,270,handleConnectionFailure(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,275,localConnection.set(newConnection);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,622,addConsumerBrokerExchange(info.getConsumerId());
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1448,private ConsumerBrokerExchange addConsumerBrokerExchange(ConsumerId id) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1453,TransportConnectionState state = lookupConnectionState(id);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1454,context = state.getContext();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1456,SessionState ss = state.getSessionState(id.getParentId());
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,65,protected ServerSocket serverSocket;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,110,protected BlockingQueue<Socket> socketQueue = new LinkedBlockingQueue<Socket>();
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,132,this.serverSocket = serverSocketFactory.createServerSocket(bind.getPort(), backlog, addr);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,133,configureServerSocket(this.serverSocket);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,375,if (serverSocket != null) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,376,serverSocket.close();
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,26,import org.apache.activemq.transport.InactivityMonitor;
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,60,LOG.trace("Not created with a TextWireFormat: " + wireFormat);
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,90,HttpClientTransport httpTransport = (HttpClientTransport)transport.narrow(HttpClientTransport.class);
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,91,if(httpTransport != null && httpTransport.isTrace() ) {
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,100,transport = new InactivityMonitor(transport, null /* ignore wire format as no negotiation over http */);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,112,private final TransportListener disposedListener = new DefaultTransportListener() {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,114,private final TransportListener myTransportListener = createTransportListener();
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,179,TransportListener createTransportListener() {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,182,Command command = (Command) o;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,183,if (command == null) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,184,return;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,186,if (command.isResponse()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,187,Object object = null;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,188,synchronized (requestMap) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,189,object = requestMap.remove(Integer.valueOf(((Response) command).getCorrelationId()));
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,191,if (object != null && object.getClass() == Tracked.class) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,192,((Tracked) object).onResponses(command);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,199,if (command.isConnectionControl()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,200,handleConnectionControl((ConnectionControl) command);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,202,if (transportListener != null) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,203,transportListener.onCommand(command);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,209,handleTransportFailure(error);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,212,transportListener.onException(new InterruptedIOException());
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,217,if (transportListener != null) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,218,transportListener.transportInterupted();
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,223,if (transportListener != null) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,224,transportListener.transportResumed();
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,329,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,330,LOG.debug("Started " + this);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,354,LOG.debug("Stopped " + this);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,389,if (LOG.isTraceEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,390,LOG.trace("Stopped backup: " + transport);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,562,myTransportListener.onCommand(response);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,572,myTransportListener.onCommand(dispatch);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,588,if (LOG.isTraceEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,589,LOG.trace("Waiting for transport to reconnect..: " + command);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,594,if (LOG.isInfoEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,595,LOG.info("Failover timed out after " + (end - start) + "ms");
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,603,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,604,LOG.debug("Interupted: " + e, e);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,662,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,663,LOG.debug("Send oneway attempt: " + i + " failed for command:" + command);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,672,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,673,LOG.debug("Send oneway attempt: " + i + " failed for command:" + command);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,736,LOG.error("Failed to parse URI: " + u);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,785,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,786,LOG.debug("urlList connectionList:" + l + ", from: " + uris);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,827,if (LOG.isTraceEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,828,LOG.trace("restore requestMap, replay: " + command);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,880,LOG.error("Failed to read updateURIsURL: " + fileURL, ioe);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,918,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,919,LOG.debug("Doing rebalance from: " + connectedTransportURI + " to " + connectList);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,927,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,928,LOG.debug("Caught an exception stopping existing transport for rebalance", e);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,989,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,990,LOG.debug("Attempting  " + connectFailures + "th  connect to: " + uri);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,992,transport.setTransportListener(myTransportListener);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,995,if (started &&  !firstConnection) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1000,LOG.debug("Connection established");
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1023,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1024,LOG.debug("transport resumed by transport listener not set");
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1030,LOG.info("Successfully connected to " + uri);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1032,LOG.info("Successfully reconnected to " + uri);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1039,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1040,LOG.debug("Connect fail to: " + uri + ", reason: " + e);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1047,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1048,LOG.debug("Stop of failed transport: " + transport +
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1064,LOG.error("Failed to connect to " + uris + " after: " + connectFailures + " attempt(s)");
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,963,if (transport == null && !firstConnection && (reconnectDelay > 0) && !disposed) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,964,synchronized (sleepMutex) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,965,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,966,LOG.debug("Waiting " + reconnectDelay + " ms before attempting connection. ");
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,968,try {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,969,sleepMutex.wait(reconnectDelay);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,971,Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1093,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1094,LOG.debug("Waiting " + reconnectDelay + " ms before attempting connection");
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,37,ManagedRegionBroker broker;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,38,String currentState = "Good";
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,267,journal = new Journal() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,269,protected void cleanup() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,270,super.cleanup();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,271,txStoreCleanup();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,274,journal.setDirectory(getDirectory());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,275,journal.setMaxFileLength(journalMaxFileLength);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,276,journal.setWriteBatchSize(journalWriteBatchSize);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,277,IOHelper.mkdirs(journal.getDirectory());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,278,journal.start();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,279,recoverPendingLocalTransactions();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,280,store(new KahaTraceCommand().setMessage("LOADED " + new Date()));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,300,journal.close();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,301,journal = null;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,870,ByteSequence data = getContent();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,871,if (data == null) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,872,data = new ByteSequence(new byte[] {}, 0, 0);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,874,InputStream is = new ByteArrayInputStream(data);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,875,if (isCompressed()) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,887,length = data.getLength();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,889,dataIn = new DataInputStream(is);
activemq-client/src/main/java/org/apache/activemq/command/Message.java,143,copy.content = content;
activemq-client/src/main/java/org/apache/activemq/command/Message.java,144,copy.marshalledProperties = marshalledProperties;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1491,pageInMessages(hasBrowsers);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1748,int toPageIn = Math.min(getMaxPageSize(), messages.size());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1768,if (toPageIn > 0 && (force || (!consumers.isEmpty() && pagedInPendingSize < getMaxPageSize()))) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1776,while (messages.hasNext() && count < toPageIn) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2002,protected void pageInMessages(boolean force) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2021,boolean zeroPrefetch = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2025,zeroPrefetch |= s.getPrefetchSize() == 0;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2032,if (total == 0 && zeroPrefetch) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2033,total = 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1046,Checksum checksum = new Adler32();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1050,for (PageWrite w : batch) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1051,if (enableRecoveryFile) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1061,writeFile.seek(toOffset(w.page.getPageId()));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1062,writeFile.write(w.getDiskBound(), 0, pageSize);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1063,w.done();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1067,if (enableRecoveryFile) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1069,if (recoveryPageCount > recoveryFileMaxPageCount) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1070,int t = Math.max(recoveryFileMinPageCount, batch.size());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1071,recoveryFile.setLength(recoveryFileSizeForPages(t));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1075,recoveryFile.seek(0);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1077,recoveryFile.writeLong(nextTxid.get());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1081,recoveryFile.writeLong(checksum.getValue());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1083,recoveryFile.writeInt(batch.size());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1088,if (enableRecoveryFile) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,711,if (isGcIfInactive()&& this.lastActiveTime != 0l) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,206,return safeGetBroker().getTopics();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,210,return safeGetBroker().getQueues();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,214,return safeGetBroker().getTemporaryTopics();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,218,return safeGetBroker().getTemporaryQueues();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,222,return safeGetBroker().getTopicSubscribers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,226,return safeGetBroker().getDurableTopicSubscribers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,230,return safeGetBroker().getQueueSubscribers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,234,return safeGetBroker().getTemporaryTopicSubscribers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,238,return safeGetBroker().getTemporaryQueueSubscribers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,242,return safeGetBroker().getInactiveDurableTopicSubscribers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,246,return safeGetBroker().getTopicProducers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,250,return safeGetBroker().getQueueProducers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,254,return safeGetBroker().getTemporaryTopicProducers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,258,return safeGetBroker().getTemporaryQueueProducers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,262,return safeGetBroker().getDynamicDestinationProducers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,21,import java.util.HashMap;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,22,import java.util.Iterator;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,24,import java.util.Map;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,26,import java.util.Set;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,33,import org.apache.activemq.ActiveMQQueueSession;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,35,import org.apache.activemq.ActiveMQTopicSession;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,73,return new ServerSessionImpl(this, (ActiveMQSession)session, activeMQAsfEndpointWorker.workManager, endpoint, true, batchSize);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,77,return new ServerSessionImpl(this, (ActiveMQSession)session, activeMQAsfEndpointWorker.workManager, endpoint, false, batchSize);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,223,List l = session.getUnconsumedMessages();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,87,worker.release();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,62,return retainCounter.get()==0;
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,72,Runnable task;
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,73,while( (task= ioTasks.poll()) !=null ) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,91,processIoTasks();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,93,int count = selector.select(10);
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,101,Set keys = selector.selectedKeys();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,103,for (Iterator i = keys.iterator(); i.hasNext();) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,104,final SelectionKey key = (SelectionKey)i.next();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,107,final SelectorSelection s = (SelectorSelection)key.attachment();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,109,if( key.isValid() ) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,137,Set keys = selector.keys();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,138,for (Iterator i = keys.iterator(); i.hasNext();) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,139,SelectionKey key = (SelectionKey)i.next();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,140,SelectorSelection s = (SelectorSelection)key.attachment();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,148,ignore.printStackTrace();
activemq-broker/src/main/java/org/apache/activemq/util/BrokerSupport.java,34,private BrokerSupport() {
activemq-broker/src/main/java/org/apache/activemq/util/BrokerSupport.java,51,public static void doResend(final ConnectionContext context, Message originalMessage, ActiveMQDestination deadLetterDestination, boolean copy) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,592,getPersistenceAdapter().setUsageManager(getProducerSystemUsage());
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,593,getPersistenceAdapter().setBrokerName(getBrokerName());
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,598,getPersistenceAdapter().start();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,731,stopper.stop(getManagementContext());
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1110,if (persistenceAdapter == null) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,578,startException = e;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,612,startException = t;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,622,if (startException != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,623,return;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,728,stopper.stop(persistenceAdapter);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,873,if (startException != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1109,public PersistenceAdapter getPersistenceAdapter() throws IOException {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2813,public Throwable getStartException() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,281,message.setRegionDestination(Queue.this);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1599,boolean result = true;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1600,boolean empty = true;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1602,File directory = getTmpDataDirectory();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1603,if (directory.exists() && directory.isDirectory()) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1604,File[] files = directory.listFiles();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1605,if (files != null && files.length > 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1606,empty = false;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1607,for (int i = 0; i < files.length; i++) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1608,File file = files[i];
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1609,if (!file.isDirectory()) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1610,result &= file.delete();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1615,if (!empty) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1616,String str = result ? "Successfully deleted" : "Failed to delete";
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1624,this.tempDataStore.start();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1639,try {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1640,tempDataStore.start();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1642,RuntimeException exception = new RuntimeException("Failed to start provided temp data store: " + tempDataStore, e);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1643,LOG.error(exception.getLocalizedMessage(), e);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1644,throw exception;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,725,if (LOG.isInfoEnabled()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,726,LOG.info("Some journal files are missing: " + missingJournalFiles);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,742,missingPredicates.add(new BTreeVisitor.BetweenVisitor<Location, Long>(new Location(id, (int) seq.getFirst()), new Location(id, (int) seq.getLast() + 1)));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,775,throw new IOException("Detected missing/corrupt journal files. "+matches.size()+" messages affected.");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/BTreeVisitor.java,169,return first+" <= key < "+last;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,179,public void doStart() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,83,message.setRegionDestination(regionDestination);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,286,ActiveMQTopic topic = AdvisorySupport.getExpiredMessageTopic(messageReference.getMessage().getDestination());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,303,ActiveMQTopic topic = AdvisorySupport.getMessageConsumedAdvisoryTopic(messageReference.getMessage().getDestination());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,318,ActiveMQTopic topic = AdvisorySupport.getMessageDeliveredAdvisoryTopic(messageReference.getMessage().getDestination());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,333,ActiveMQTopic topic = AdvisorySupport.getMessageDiscardedAdvisoryTopic(messageReference.getMessage().getDestination());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,455,message.setRegionDestination(this);
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,624,boolean interrupted = Thread.interrupted();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,711,if (interrupted) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,712,Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,677,boolean interrupted = Thread.interrupted();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,685,if (interrupted) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,686,Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,640,boolean interrupted = Thread.interrupted();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,645,if (interrupted) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,646,Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,19,import java.io.InterruptedIOException;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,32,import org.apache.activemq.command.Command;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,38,import org.apache.activemq.command.Response;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,322,syncSendPacketWithInterruptionHandling(info);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,397,try {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,398,beforeEnd();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,400,throw toXAException(e);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,407,try {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,408,beforeEnd();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,410,throw toXAException(e);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,451,IntegerResponse response = (IntegerResponse)syncSendPacketWithInterruptionHandling(info);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,515,syncSendPacketWithInterruptionHandling(info);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,555,syncSendPacketWithInterruptionHandling(info);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,615,syncSendPacketWithInterruptionHandling(info);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,710,syncSendPacketWithInterruptionHandling(info);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,746,private Response syncSendPacketWithInterruptionHandling(Command command) throws JMSException {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,747,try {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,748,return this.connection.syncSendPacket(command);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,750,if (e.getLinkedException() instanceof InterruptedIOException) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,751,try {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,752,Thread.interrupted();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,753,return this.connection.syncSendPacket(command);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,755,Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,759,throw e;
activemq-client/src/main/java/org/apache/activemq/transport/FutureResponse.java,42,Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/transport/FutureResponse.java,43,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/FutureResponse.java,44,LOG.debug("Operation interupted: " + e, e);
activemq-client/src/main/java/org/apache/activemq/transport/FutureResponse.java,46,throw new InterruptedIOException("Interrupted.");
activemq-client/src/main/java/org/apache/activemq/transport/FutureResponse.java,58,throw new InterruptedIOException("Interrupted.");
activemq-client/src/main/java/org/apache/activemq/transport/ResponseCorrelator.java,67,FutureResponse future = new FutureResponse(responseCallback);
activemq-client/src/main/java/org/apache/activemq/transport/ResponseCorrelator.java,125,dispose(error);
activemq-client/src/main/java/org/apache/activemq/transport/WireFormatNegotiator.java,97,if (!readyCountDownLatch.await(negotiateTimeout, TimeUnit.MILLISECONDS)) {
activemq-client/src/main/java/org/apache/activemq/transport/WireFormatNegotiator.java,101,Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/transport/WireFormatNegotiator.java,102,throw new InterruptedIOException();
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,128,public FailoverTransport() throws InterruptedIOException {
activemq-client/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,159,public FanoutTransport() throws InterruptedIOException {
activemq-client/src/main/java/org/apache/activemq/util/ThreadPoolUtils.java,127,executorService.shutdownNow();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,665,sd.locationIndex.remove(tx, keys.location);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,666,sd.messageIdIndex.remove(tx, keys.messageId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,667,metadata.producerSequenceIdTracker.rollback(keys.messageId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,668,undoCounter++;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,64,boolean matches = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,65,MessageEvaluationContext msgContext = new NonCachedMessageEvaluationContext();
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,66,msgContext.setDestination(dest.getActiveMQDestination());
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,67,msgContext.setMessageReference(message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,68,List<Subscription> subs = dest.getConsumers();
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,69,for (Subscription sub : subs) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,70,if (sub.matches(message, msgContext)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,71,matches = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,72,break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,77,matches = tryMatchingCachedSubs(broker, dest, msgContext);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,79,return matches;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1328,md.setRollbackCause(e);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,743,sendLock.lockInterruptibly();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,744,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,745,if (store != null && message.isPersistent()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,792,sendLock.unlock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,96,nonPersistent.addMessageLast(node);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,353,LOG.info("socketQueue interuppted - stopping");
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,354,if (!isStopping()) {
activemq-broker/src/main/java/org/apache/activemq/util/IOHelper.java,189,throw new IOException("Failed to move " + src + " to " + targetDirectory);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,67,BrokerService brokerService;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,424,public BrokerService getBrokerService() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,425,return brokerService;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,112,X509Certificate[] peerCerts = ((SslTransport) next).getPeerCertificates();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,113,if (trace && peerCerts != null) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,114,LOG.debug("Peer Identity has been verified\n");
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,116,return peerCerts;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,118,return null;
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOTransport.java,83,inputBuffer = ByteBuffer.allocate(8 * 1024);
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOTransport.java,87,NIOOutputStream outPutStream = new NIOOutputStream(channel, 16 * 1024);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,587,&& !Thread.currentThread().isInterrupted()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,989,indexLock.readLock().lock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,993,indexLock.readLock().unlock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1237,long id = sd.orderIndex.getNextMessageId(priority);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1304,LOG.debug("no message sequence exists for id: " + command.getMessageId() + " and sub: " + command.getSubscriptionKey());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2708,long getNextMessageId(int priority) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,371,Map transactionMap = null;
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,372,synchronized (xaTransactions) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,373,transactionMap = xid.isXATransaction() ? xaTransactions : context.getTransactions();
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,375,Transaction transaction = (Transaction)transactionMap.get(xid);
activemq-http/src/main/java/org/apache/activemq/transport/SecureSocketConnectorFactory.java,22,import org.apache.activemq.transport.https.Krb5AndCertsSslSocketConnector;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,19,import java.io.IOException;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,20,import java.net.ServerSocket;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,21,import java.security.KeyManagementException;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,22,import java.security.NoSuchAlgorithmException;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,23,import java.security.NoSuchProviderException;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,24,import java.security.Principal;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,25,import java.util.Collections;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,26,import java.util.List;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,27,import java.util.Random;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,28,import javax.net.ssl.SSLContext;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,29,import javax.net.ssl.SSLServerSocket;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,30,import javax.net.ssl.SSLSocket;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,32,import org.eclipse.jetty.http.HttpSchemes;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,33,import org.eclipse.jetty.io.EndPoint;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,34,import org.eclipse.jetty.server.Request;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,35,import org.eclipse.jetty.server.ssl.ServletSSL;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,36,import org.eclipse.jetty.server.ssl.SslSocketConnector;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,37,import org.eclipse.jetty.util.ssl.SslContextFactory;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,38,import org.slf4j.Logger;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,39,import org.slf4j.LoggerFactory;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,47,public class Krb5AndCertsSslSocketConnector extends SslSocketConnector {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,48,public static final List<String> KRB5_CIPHER_SUITES = Collections.unmodifiableList(Collections.singletonList("TLS_KRB5_WITH_3DES_EDE_CBC_SHA"));
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,49,static {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,50,System.setProperty("https.cipherSuites", KRB5_CIPHER_SUITES.get(0));
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,53,private static final Logger LOG = LoggerFactory.getLogger(Krb5AndCertsSslSocketConnector.class);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,55,private static final String REMOTE_PRINCIPAL = "remote_principal";
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,57,public enum MODE {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,58,KRB, CERTS, BOTH
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,61,private boolean useKrb;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,62,private boolean useCerts;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,64,public Krb5AndCertsSslSocketConnector() {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,66,super();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,67,useKrb = false;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,68,useCerts = true;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,69,setPasswords();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,72,public static boolean isKrb(String mode) {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,73,return mode == MODE.KRB.toString() || mode == MODE.BOTH.toString();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,76,public void setMode(String mode) {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,77,useKrb = mode == MODE.KRB.toString() || mode == MODE.BOTH.toString();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,78,useCerts = mode == MODE.CERTS.toString() || mode == MODE.BOTH.toString();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,79,logIfDebug("useKerb = " + useKrb + ", useCerts = " + useCerts);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,84,private void setPasswords() {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,85,if (!useCerts) {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,86,Random r = new Random();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,87,System.setProperty("jetty.ssl.password", String.valueOf(r.nextLong()));
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,88,System.setProperty("jetty.ssl.keypassword", String.valueOf(r.nextLong()));
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,93,public SslContextFactory getSslContextFactory() {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,94,final SslContextFactory factory = super.getSslContextFactory();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,96,if (useCerts) {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,97,return factory;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,100,try {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,101,SSLContext context = factory.getProvider() == null ? SSLContext.getInstance(factory.getProtocol()) : SSLContext.getInstance(factory.getProtocol(),
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,102,factory.getProvider());
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,103,context.init(null, null, null);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,104,factory.setSslContext(context);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,110,return factory;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,121,protected ServerSocket newServerSocket(String host, int port, int backlog) throws IOException {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,122,logIfDebug("Creating new KrbServerSocket for: " + host);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,123,SSLServerSocket ss = null;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,125,if (useCerts) // Get the server socket from the SSL super impl
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,126,ss = (SSLServerSocket) super.newServerSocket(host, port, backlog);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,127,else { // Create a default server socket
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,128,try {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,129,ss = (SSLServerSocket) super.newServerSocket(host, port, backlog);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,131,LOG.warn("Could not create KRB5 Listener", e);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,132,throw new IOException("Could not create KRB5 Listener: " + e.toString());
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,137,if (useKrb) {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,138,ss.setNeedClientAuth(true);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,139,String[] combined;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,140,if (useCerts) { // combine the cipher suites
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,141,String[] certs = ss.getEnabledCipherSuites();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,142,combined = new String[certs.length + KRB5_CIPHER_SUITES.size()];
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,143,System.arraycopy(certs, 0, combined, 0, certs.length);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,144,System.arraycopy(KRB5_CIPHER_SUITES.toArray(new String[0]), 0, combined, certs.length, KRB5_CIPHER_SUITES.size());
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,146,combined = KRB5_CIPHER_SUITES.toArray(new String[0]);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,149,ss.setEnabledCipherSuites(combined);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,151,return ss;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,155,public void customize(EndPoint endpoint, Request request) throws IOException {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,156,if (useKrb) { // Add Kerberos-specific info
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,157,SSLSocket sslSocket = (SSLSocket) endpoint.getTransport();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,158,Principal remotePrincipal = sslSocket.getSession().getPeerPrincipal();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,159,logIfDebug("Remote principal = " + remotePrincipal);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,160,request.setScheme(HttpSchemes.HTTPS);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,161,request.setAttribute(REMOTE_PRINCIPAL, remotePrincipal);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,163,if (!useCerts) { // Add extra info that would have been added by
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,165,String cipherSuite = sslSocket.getSession().getCipherSuite();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,166,Integer keySize = Integer.valueOf(ServletSSL.deduceKeyLength(cipherSuite));
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,167,;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,169,request.setAttribute("javax.servlet.request.cipher_suite", cipherSuite);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,170,request.setAttribute("javax.servlet.request.key_size", keySize);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,175,super.customize(endpoint, request);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,178,private void logIfDebug(String s) {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,180,LOG.debug(s);
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,27,import org.apache.activemq.transport.tcp.SslTransportServer;
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,89,Connector connector = context.getConnector();
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,90,if (connector instanceof TransportConnector) {
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,91,TransportConnector transportConnector = (TransportConnector) connector;
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,92,isSSL = transportConnector.getServer().isSslServer();
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,97,if (isSSL) {
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,110,boolean isSSL;
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,111,Connector connector = context.getConnector();
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,112,if (connector instanceof TransportConnector) {
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,113,TransportConnector transportConnector = (TransportConnector) connector;
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,114,isSSL = (transportConnector.getServer() instanceof SslTransportServer);
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,116,isSSL = false;
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,119,if (isSSL) {
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,72,int nextMinutes = getNext(minutes, currentMinutes);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,78,int nextHour = getNext(hours, currentHours);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,102,int nextHour = getNext(hours, currentHours);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,108,int nextMinutes = getNext(minutes, currentMinutes);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,125,int nextMonth = getNext(month, currentMonth);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,152,nextWeekDay = getNext(dayOfWeek, currentDayOfWeek);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,156,nextCalendarDay = getNext(dayOfMonth, currentDayOfMonth);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,192,static int getNext(final CronEntry entry, final int current) throws MessageFormatException {
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,211,result = entry.end + first - entry.start - current;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1338,BrokerSupport.resend(context, m.getMessage(), dest);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1339,removeMessage(context, m);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1340,messagesLock.writeLock().lock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1342,messages.rollback(m.getMessageId());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1344,messagesLock.writeLock().unlock();
activemq-osgi/src/main/java/org/apache/activemq/osgi/ActiveMQServiceFactory.java,102,broker.waitUntilStarted();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,65,public void marshal(Object command, DataOutput os) throws IOException {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,66,StompFrame stomp = (org.apache.activemq.transport.stomp.StompFrame)command;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,68,if (stomp.getAction().equals(Stomp.Commands.KEEPALIVE)) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,69,os.write(Stomp.BREAK);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,70,return;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,73,StringBuilder buffer = new StringBuilder();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,88,os.write(buffer.toString().getBytes("UTF-8"));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,52,protected final LinkedHashMap<MessageId, MessageDispatch> dispatchedMessage = new LinkedHashMap<MessageId, MessageDispatch>();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,53,protected final LinkedList<MessageDispatch> unconsumedMessage = new LinkedList<MessageDispatch>();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,68,if (ackMode == CLIENT_ACK) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,69,synchronized (this) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,70,dispatchedMessage.put(message.getMessageId(), md);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,186,dispatchedMessage.remove(msgId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1414,gcCandidateSet.remove(lastUpdate.getDataFileId());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1402,pageFile.flush();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2088,public long getStoredMessageCount(Transaction tx, StoredDestination sd, String subscriptionKey) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2089,SequenceSet messageSequences = sd.ackPositions.get(tx, subscriptionKey);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2090,if (messageSequences != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2091,long result = messageSequences.rangeSize();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2093,return result > 0 ? result - 1 : 0;
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,182,Vector<TransactionInfo> toRollback = new Vector<TransactionInfo>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2345,List<TransportConnector> al = new ArrayList<TransportConnector>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,946,LOG.error("KahaDB failed to store to Journal", ioe);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,195,firstAsyncException = null;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,198,if (firstAsyncException != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,199,throw firstAsyncException;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,377,firstAsyncException = e;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,378,if (wb != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,379,wb.exception.set(e);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,380,wb.latch.countDown();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,382,if (nextWriteBatch != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,383,nextWriteBatch.exception.set(e);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,384,nextWriteBatch.latch.countDown();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,409,if (write.onComplete != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1391,void checkpointUpdate(Transaction tx, boolean cleanup) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2009,protected ObjectName createNetworkConnectorObjectName(NetworkConnector connector) throws MalformedObjectNameException {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2344,Set<ActiveMQDestination> durableDestinations = getBroker().getDurableDestinations();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2383,connector.setBrokerName(getBrokerName());
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2384,connector.setDurableDestinations(durableDestinations);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2385,if (getDefaultSocketURIString() != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2386,connector.setBrokerURL(getDefaultSocketURIString());
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2388,if (networkConnectorStartExecutor != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2389,networkConnectorStartExecutor.execute(new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2391,public void run() {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2392,try {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2394,connector.start();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2401,connector.start();
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,45,private ExecutorService executor;
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,83,if (initDone.compareAndSet(false, true)) {
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,86,if (dedicatedTaskRunner || "true".equalsIgnoreCase(System.getProperty("org.apache.activemq.UseDedicatedTaskRunner"))) {
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,87,executor = null;
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,89,executor = createDefaultExecutor();
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,91,LOG.debug("Initialized TaskRunnerFactory[{}] using ExecutorService: {}", name, executor);
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,103,executor = null;
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,105,initDone.set(false);
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,116,executor = null;
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,118,initDone.set(false);
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,129,executor = null;
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,131,initDone.set(false);
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,185,return executor;
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,189,this.executor = executor;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,156,IntrospectionSupport.setProperties(socket, transportOptions);
activemq-client/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,139,public static boolean setProperties(Object target, Map props) {
activemq-client/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,152,iter.remove();
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,272,boolean isActive = destinationStatistics.getConsumers().getCount() != 0 ||
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,273,destinationStatistics.getProducers().getCount() != 0;
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,274,if (isActive && isGcWithNetworkConsumers() && destinationStatistics.getConsumers().getCount() != 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,187,super.removeSubscription(context, sub, lastDeliveredSequenceId);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,189,consumers.remove(sub);
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,185,if (sub.matches(destination)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,186,throw new JMSException("Destination still has an active subscription: " + destination);
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,145,addSubscriptionsForDestination(context, dest);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1433,LOG.trace("gc candidates after tx range:" + Arrays.asList(inProgressTxRange) + ", " + gcCandidateSet);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,426,if (writeFile.length() < PAGE_FILE_HEADER_SIZE) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,427,writeFile.setLength(PAGE_FILE_HEADER_SIZE);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,429,nextFreePageId.set((writeFile.length() - PAGE_FILE_HEADER_SIZE) / pageSize);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1150,do {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1152,pagedInMessagesLock.readLock().lock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1153,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1154,list = new ArrayList<MessageReference>(pagedInMessages.values());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1156,pagedInMessagesLock.readLock().unlock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1159,for (MessageReference ref : list) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1161,QueueMessageReference r = (QueueMessageReference) ref;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1162,removeMessage(c, r);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1169,if (this.destinationStatistics.getMessages().getCount() > 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1174,gc();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1175,this.destinationStatistics.getMessages().setCount(0);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1176,getMessages().clear();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,129,destinations = new BTreeIndex<String, StoredDestination>(pageFile, is.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,263,metadata.destinations = new BTreeIndex<String, StoredDestination>(pageFile, tx.allocate().getPageId());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,375,IOHelper.mkdirs(directory);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,395,if( opened.compareAndSet(true, false)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,484,HashMap<KahaDestination, opCount> destinationOpCount = new HashMap<KahaDestination, opCount>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,526,ArrayList<TranInfo> infos = new ArrayList<TranInfo>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,588,Set<TransactionId> toRollback = new HashSet<TransactionId>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,654,final ArrayList<Long> matches = new ArrayList<Long>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,718,HashSet<Integer> missingJournalFiles = new HashSet<Integer>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,730,ArrayList<BTreeVisitor.Predicate<Location>> missingPredicates = new ArrayList<BTreeVisitor.Predicate<Location>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1224,private final HashSet<Integer> journalFilesBeingReplicated = new HashSet<Integer>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1315,referenceFileIds = new HashSet<Integer>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1406,final TreeSet<Integer> completeFileSet = new TreeSet<Integer>(journal.getFileMap().keySet());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1407,final TreeSet<Integer> gcCandidateSet = new TreeSet<Integer>(completeFileSet);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1673,final TreeMap<Long, Long> messageReferences = new TreeMap<Long, Long>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1674,final HashSet<String> subscriptionCache = new LinkedHashSet<String>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1682,value.orderIndex.defaultPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1683,value.locationIndex = new BTreeIndex<Location, Long>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1684,value.messageIdIndex = new BTreeIndex<String, Long>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1687,value.subscriptions = new BTreeIndex<String, KahaSubscriptionCommand>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1688,value.subscriptionAcks = new BTreeIndex<String, LastAck>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1690,value.ackPositions = new ListIndex<String, SequenceSet>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1702,LinkedHashMap<String, SequenceSet> temp = new LinkedHashMap<String, SequenceSet>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1723,value.ackPositions = new ListIndex<String, SequenceSet>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1827,rc.locationIndex = new BTreeIndex<Location, Long>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1828,rc.messageIdIndex = new BTreeIndex<String, Long>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1831,rc.subscriptions = new BTreeIndex<String, KahaSubscriptionCommand>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1832,rc.subscriptionAcks = new BTreeIndex<String, LastAck>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1833,rc.ackPositions = new ListIndex<String, SequenceSet>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1867,rc.subscriptionCursors = new HashMap<String, MessageOrderCursor>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2008,ArrayList<Long> unreferenced = new ArrayList<Long>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2026,ArrayList<Entry<Long, MessageKeys>> deletes = new ArrayList<Entry<Long, MessageKeys>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2071,ArrayList<Entry<Long, MessageKeys>> deletes = new ArrayList<Entry<Long, MessageKeys>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2107,private final LinkedHashMap<TransactionId, List<Operation>> inflightTransactions = new LinkedHashMap<TransactionId, List<Operation>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2109,protected final LinkedHashMap<TransactionId, List<Operation>> preparedTransactions = new LinkedHashMap<TransactionId, List<Operation>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2110,protected final Set<String> ackedAndPrepared = new HashSet<String>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2566,defaultPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2568,lowPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2569,highPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, tx.allocate());
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,776,if (e instanceof SecurityException) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,778,delayedStop(2000, "Failed with SecurityException: " + e.getLocalizedMessage(), e);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,136,private boolean starting;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,137,private boolean pendingStop;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,310,if (pendingStop) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,328,if (!pendingStop) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,923,if (pendingStop || stopping.get()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,981,starting = true;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1002,pendingStop = true;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1030,pendingStop = true;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1054,pendingStop = true;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1055,if (starting) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1266,public synchronized boolean isStarting() {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1267,return starting;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1280,protected synchronized void setStarting(boolean starting) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1281,this.starting = starting;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1287,public synchronized boolean isPendingStop() {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1288,return pendingStop;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1291,protected synchronized void setPendingStop(boolean pendingStop) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1292,this.pendingStop = pendingStop;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,543,this.subscriptionRecoveryPolicy.start();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,544,if (memoryUsage != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,545,memoryUsage.start();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,554,if (taskRunner != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,555,taskRunner.shutdown();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,557,this.subscriptionRecoveryPolicy.stop();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,558,if (memoryUsage != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,559,memoryUsage.stop();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,561,if (this.topicStore != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,562,this.topicStore.stop();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,565,scheduler.cancel(expireMessagesTask);
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,145,selection = SelectorManager.getInstance().register(channel, new SelectorManager.Listener() {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,146,public void onSelect(SelectorSelection selection) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,147,serviceRead();
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,150,public void onError(SelectorSelection selection, Throwable error) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,151,if (error instanceof IOException) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,152,onException((IOException) error);
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,154,onException(IOExceptionSupport.create(error));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,751,final ArrayList<Long> matches = new ArrayList<Long>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,755,matches.add(value);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,766,for (Long sequenceId : matches) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,58,private static final int MAX_BATCH_SIZE = 32*1024*1024;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,265,if (ack.isStandardAck() || ack.isPoisonAck() || ack.isIndividualAck()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,266,if (context.isInTransaction()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,267,context.getTransaction().addSynchronization(new Synchronization() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,270,public void afterCommit() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,277,dispatchMatched();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,287,dispatchMatched();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,288,return;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,297,dispatchMatched();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,298,return;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,303,throw new JMSException("Invalid acknowledgment: " + ack);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,474,return getDispatchedQueueSize() <= (info.getPrefetchSize() * .4);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,482,return getDispatchedQueueSize() >= (info.getPrefetchSize() * .9);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,54,private final List<JobListener> jobListeners = new CopyOnWriteArrayList<JobListener>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,177,final List<Job> result = new ArrayList<Job>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,195,final List<Job> result = new ArrayList<Job>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,266,startTime = (startTime / 1000) * 1000;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,317,values = new ArrayList<JobLocation>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,392,List<Long> keys = new ArrayList<Long>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,588,this.index = new BTreeIndex<Long, List<JobLocation>>(this.store.getPageFile(), tx.allocate().getPageId());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,599,this.index = new BTreeIndex<Long, List<JobLocation>>(this.store.getPageFile(), in.readLong());
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,74,private boolean disposed;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,91,private boolean started;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMapMessage.java,133,public void clearMarshalledState() throws JMSException {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMapMessage.java,134,super.clearMarshalledState();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQObjectMessage.java,205,public void clearMarshalledState() throws JMSException {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQObjectMessage.java,206,super.clearMarshalledState();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,135,public void clearMarshalledState() throws JMSException {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,25,import java.util.concurrent.atomic.AtomicInteger;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,60,protected final AtomicInteger prefetchExtension = new AtomicInteger();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,833,protected int getPrefetchExtension() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,834,return this.prefetchExtension.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,91,+ this.prefetchExtension + ", pending=" + getPendingQueueSize();
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,411,protected Region getRegion(ActiveMQDestination destination) throws JMSException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/plist/PListStoreImpl.java,276,this.directory = new File(IOHelper.getDefaultDataDirectory() + File.pathSeparator + "delayedDB");
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,344,private boolean hasDurableSubChanged(ConsumerInfo info1, ConsumerInfo info2) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryPersistenceAdapter.java,44,public class MemoryPersistenceAdapter implements PersistenceAdapter {
activemq-client/src/main/java/org/apache/activemq/util/TypeConversionSupport.java,52,public boolean equals(Object o) {
activemq-client/src/main/java/org/apache/activemq/util/TypeConversionSupport.java,53,ConversionKey x = (ConversionKey)o;
activemq-client/src/main/java/org/apache/activemq/util/TypeConversionSupport.java,54,return x.from == from && x.to == to;
activemq-client/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,141,return;
activemq-client/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,146,if (!done) {
activemq-client/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,147,queued = true;
activemq-client/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,150,if (queued) {
activemq-client/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,151,executor.execute(runable);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpTransportFilter.java,126,X509Certificate[] peerCerts = ((SslTransport) next).getPeerCertificates();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpTransportFilter.java,127,if (trace && peerCerts != null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpTransportFilter.java,128,LOG.debug("Peer Identity has been verified\n");
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpTransportFilter.java,130,return peerCerts;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpTransportFilter.java,132,return null;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,21,import java.util.Iterator;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,24,import java.util.Map.Entry;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,32,import org.apache.activemq.store.AbstractMessageStore;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,84,if( removed !=null ) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,97,for (Iterator<Message> iter = messageTable.values().iterator(); iter.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,128,int count = 0;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,129,for (Iterator iter = messageTable.entrySet().iterator(); iter.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,130,Map.Entry entry = (Entry)iter.next();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,132,count++;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,134,lastBatchId = (MessageId)entry.getKey();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,136,listener.recoverMessageReference((MessageId)msg);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,138,listener.recoverMessage((Message)msg);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryPersistenceAdapter.java,164,return (MemoryMessageStore)value;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryPersistenceAdapter.java,167,MessageStore delegate = ((ProxyMessageStore)value).getDelegate();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryPersistenceAdapter.java,193,public File getDirectory(){
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryPersistenceAdapter.java,200,public long size(){
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,22,import java.util.Iterator;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,24,import java.util.Map.Entry;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,48,public MemoryTopicMessageStore(ActiveMQDestination destination, Map<MessageId, Message> messageTable, Map<SubscriptionKey, SubscriptionInfo> subscriberDatabase) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,64,for (Iterator<MemoryTopicSub> i = topicSubMap.values().iterator(); i.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,65,MemoryTopicSub sub = i.next();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,70,public synchronized void acknowledge(ConnectionContext context, String clientId, String subscriptionName,
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,71,MessageId messageId, MessageAck ack) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,85,MemoryTopicSub sub = new MemoryTopicSub();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,88,for (Iterator i = messageTable.entrySet().iterator(); i.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,89,Map.Entry entry = (Entry)i.next();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,90,sub.addMessage((MessageId)entry.getKey(), (Message)entry.getValue());
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,97,org.apache.activemq.util.SubscriptionKey key = new SubscriptionKey(clientId, subscriptionName);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicSub.java,34,private Map<MessageId, Message> map = new LinkedHashMap<MessageId, Message>();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicSub.java,38,synchronized(this) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicSub.java,46,synchronized(this) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicSub.java,52,if( removed!=null ) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,131,this.persistenceAdapter=persistenceAdapter;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,205,public void acknowledge(ConnectionContext context, String clientId, String subscriptionName,
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,206,MessageId messageId, MessageAck ack) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,207,MemoryTransactionStore.this.acknowledge((TopicMessageStore)getDelegate(), clientId,
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,208,subscriptionName, messageId, ack);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,247,public void commit(TransactionId txid, boolean wasPrepared, Runnable preCommit,Runnable postCommit) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,288,listener.recover((XATransactionId)txid, tx.getMessages(), tx.getAcks());
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,361,public void acknowledge(final TopicMessageStore destination, final String clientId, final String subscriptionName,
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,362,final MessageId messageId, final MessageAck ack) throws IOException {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,220,msg.getMessageId().setBrokerSequenceId(sequenceId);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,221,return listener.recoverMessage(msg);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,225,return listener.recoverMessageReference(new MessageId(reference));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,629,KahaProducerAuditCommand audit = (KahaProducerAuditCommand) load(metadata.producerSequenceIdTrackerLocation);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1030,Message msg = (Message) wireFormat.unmarshal(new DataInputStream(addMessage.getMessage().newInput()));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1031,return msg;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,227,if (broker.isExpired(node)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,231,((Destination)node.getRegionDestination()).getDestinationStatistics().getExpired().increment();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,232,broker.messageExpired(getContext(), node, this);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,569,if (LOG.isInfoEnabled() && redoCounter % 100000 == 0) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,570,LOG.info("@" + recoveryPosition +  ", "  + redoCounter + " entries recovered ..");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,42,private boolean used;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,57,used = true;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,71,public synchronized void clearUsedMark() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,72,used = false;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,76,return used;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,97,synchronized void clearUsedMark() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,98,for (Pool pool : pools.values()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,99,pool.clearUsedMark();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,103,synchronized void disposeUnused() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,388,protected synchronized void cleanup() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,628,boolean expired = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,629,if (messageReference.isExpired()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,630,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,632,Message message = messageReference.getMessage();
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,633,synchronized (message) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,634,expired = stampAsExpired(message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,640,return expired;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,483,if (broker.isExpired(message)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,484,getDestinationStatistics().getExpired().increment();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,485,broker.messageExpired(context, message, null);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,476,if (broker.isExpired(reference)) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,20,import java.sql.Connection;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,21,import java.sql.PreparedStatement;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,22,import java.sql.SQLException;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,23,import java.sql.Statement;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,72,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,97,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,130,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,155,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,68,protected ReadWriteLock cleanupExclusiveLock = new ReentrantReadWriteLock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,81,cleanupExclusiveLock.writeLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,82,try {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,121,cleanupExclusiveLock.writeLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,131,cleanupExclusiveLock.writeLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,150,cleanupExclusiveLock.writeLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,161,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,180,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,189,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,200,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,213,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,241,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,253,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,273,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,283,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,295,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,304,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,315,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,324,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,334,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,345,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,368,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,379,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,398,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,408,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,425,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,434,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,460,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,471,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,498,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,518,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,529,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,540,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,561,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,572,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,596,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,607,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,632,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,643,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,658,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,677,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,714,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,723,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,742,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,752,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,770,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,779,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,789,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,797,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,805,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,813,cleanupExclusiveLock.writeLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,816,s = c.getConnection().prepareStatement(this.statements.getDeleteOldMessagesStatementWithPriority());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,823,cleanupExclusiveLock.writeLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,833,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,847,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,872,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,880,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,930,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,945,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,954,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,984,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,992,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1000,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1011,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1020,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1031,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1069,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1079,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1090,cleanupExclusiveLock.readLock().unlock();
activemq-broker/src/main/java/org/apache/activemq/network/NetworkConnector.java,148,result.setDurableDestinations(dest);
activemq-broker/src/main/java/org/apache/activemq/network/NetworkConnector.java,150,return result;
activemq-broker/src/main/java/org/apache/activemq/network/NetworkConnector.java,153,protected Transport createLocalTransport() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/network/NetworkConnector.java,154,return TransportFactory.connect(localURI);
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,578,Thread.sleep(policy.getNextDelay(attempt));
activemq-broker/src/main/java/org/apache/activemq/network/jms/ReconnectionPolicy.java,235,nextDelay = nextDelay * (long)(attempt * backOffMultiplier);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,79,public void doCreateTables(TransactionContext c) throws SQLException, IOException {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,80,Statement s = null;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,88,boolean alreadyExists = false;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,89,ResultSet rs = null;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,90,try {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,91,rs = c.getConnection().getMetaData().getTables(null, null, this.statements.getFullMessageTableName(),
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,92,new String[] { "TABLE" });
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,93,alreadyExists = rs.next();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,96,close(rs);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,98,s = c.getConnection().createStatement();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,99,String[] createStatments = this.statements.getCreateSchemaStatements();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,100,for (int i = 0; i < createStatments.length; i++) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,103,try {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,104,LOG.debug("Executing SQL: " + createStatments[i]);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,105,s.execute(createStatments[i]);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,107,if (alreadyExists) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,108,LOG.debug("Could not create JDBC tables; The message table already existed." + " Failure was: "
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,110,+ " Vendor code: " + e.getErrorCode());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,112,LOG.warn("Could not create JDBC tables; they could already exist." + " Failure was: "
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,114,+ " Vendor code: " + e.getErrorCode());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,115,JDBCPersistenceAdapter.log("Failure details: ", e);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,122,try {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,123,s.close();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,219,BrokerService bService = connector.getBrokerService();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,220,if (bService.isShutdownOnSlaveFailure()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,221,if (brokerInfo != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,222,if (brokerInfo.isSlaveBroker()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,224,try {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,225,doStop();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,226,bService.stop();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,228,LOG.warn("Failed to stop the master", ex);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1342,duplexBridge.setBrokerService(broker.getBrokerService());
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1418,result.setLastStoredSequenceId(broker.getBrokerService().getPersistenceAdapter().getLastProducerSequenceId(id));
activemq-broker/src/main/java/org/apache/activemq/transaction/Transaction.java,95,XAException xae = new XAException("Prepare cannot be called now.");
activemq-broker/src/main/java/org/apache/activemq/transaction/Transaction.java,96,xae.errorCode = XAException.XAER_PROTO;
activemq-broker/src/main/java/org/apache/activemq/transaction/Transaction.java,176,XAException xae = new XAException("PRE COMMIT FAILED");
activemq-broker/src/main/java/org/apache/activemq/transaction/Transaction.java,177,xae.errorCode = XAException.XAER_RMERR;
activemq-broker/src/main/java/org/apache/activemq/transaction/Transaction.java,190,XAException xae = new XAException("POST COMMIT FAILED");
activemq-broker/src/main/java/org/apache/activemq/transaction/Transaction.java,191,xae.errorCode = XAException.XAER_RMERR;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,403,void done() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,404,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,405,browser.decrementQueueRef();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,407,LOG.warn("decrement ref on browser: " + browser, e);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1487,boolean hasBrowsers = browserDispatches.size() > 0;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1501,try{
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1759,toPageIn = Math.min(getConsumerMessageCountBeforeFull(), toPageIn);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1617,getDestinationStatistics().getDequeues().increment();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1627,getDestinationStatistics().getDequeues().increment();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,551,for (MessageReference ref : unAckedMessages) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestination.java,35,private boolean copyMessage = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestination.java,83,return copyMessage;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestination.java,92,this.copyMessage = copyMessage;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,40,private boolean copyMessage;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,46,this.copyMessage = copyMessage;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,659,for (Destination dest :destinations) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,660,dest.slowConsumer(context, this);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,59,private ActiveMQMessageTransformation() {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,72,ActiveMQDestination activeMQDestination = null;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,74,if (destination != null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,75,if (destination instanceof ActiveMQDestination) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,76,return (ActiveMQDestination)destination;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,79,if (destination instanceof TemporaryQueue) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,80,activeMQDestination = new ActiveMQTempQueue(((Queue)destination).getQueueName());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,82,activeMQDestination = new ActiveMQTempTopic(((Topic)destination).getTopicName());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,84,activeMQDestination = new ActiveMQQueue(((Queue)destination).getQueueName());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,86,activeMQDestination = new ActiveMQTopic(((Topic)destination).getTopicName());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,91,return activeMQDestination;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,173,BlobMessage blobMessage = (BlobMessage)message;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,174,ActiveMQBlobMessage msg = new ActiveMQBlobMessage();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,175,msg.setConnection(connection);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,177,try {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,178,msg.setURL(blobMessage.getURL());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,182,activeMessage = msg;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,279,this.connection.syncSendPacket(info);
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,54,private long reconnectDelay = initialReconnectDelay;
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,137,LOG.debug("Failure occurred soon after the discovery event was generated.  It will be classified as a connection failure: "+event);
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,142,LOG.warn("Reconnect attempts exceeded "+maxReconnectAttempts+" tries.  Reconnecting has been disabled for: " + event);
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,146,synchronized (sleepMutex) {
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,147,try {
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,148,if (!running.get()) {
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,149,LOG.debug("Reconnecting disabled: stopped");
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,150,return;
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,153,LOG.debug("Waiting "+event.reconnectDelay+" ms before attempting to reconnect.");
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,154,sleepMutex.wait(event.reconnectDelay);
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,156,LOG.debug("Reconnecting disabled: " + ie);
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,157,Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,158,return;
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,162,if (!useExponentialBackOff) {
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,104,FileInputStream fis = new FileInputStream(persistFile);
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,105,try {
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,115,fis.close();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,66,public CompositeType getCompositeType() throws OpenDataException {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,34,import org.apache.activemq.store.PListStore;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,42,import org.apache.activemq.util.ByteSequence;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,395,expireOldMessages();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,415,protected synchronized void expireOldMessages() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,421,discardExpiredMessage(node);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,431,if (LOG.isTraceEnabled()) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,324,UNSUBACK ack = new UNSUBACK();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,325,ack.messageId(command.messageId());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,326,sendToMQTT(ack.encode());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,281,public boolean recoverMessage(long sequenceId, byte[] data) throws Exception {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,283,Message msg = (Message)wireFormat.unmarshal(new ByteSequence(data));
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,284,msg.getMessageId().setBrokerSequenceId(sequenceId);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,285,listener.recoverMessage(msg);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,288,return true;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,293,public boolean recoverMessageReference(String reference) throws Exception {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,294,if (listener.hasSpace()) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,295,listener.recoverMessageReference(new MessageId(reference));
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,296,return true;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,298,return false;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,583,while (rs.next() && count < maxReturned) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,589,while (rs.next() && count < maxReturned) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,619,while (rs.next() && count < maxReturned) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,625,while (rs.next() && count < maxReturned) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1048,while (rs.next() && count < maxReturned) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1057,while (rs.next() && count < maxReturned) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,560,if (counter >= maxReturned) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ProducerView.java,127,if (info != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ProducerView.java,128,return info.isDispatchAsync();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,925,String str = brokerName.replaceAll("[^a-zA-Z0-9\\.\\_\\-\\:]", "_");
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1466,vmConnectorURI = new URI("vm://" + getBrokerName().replaceAll("[^a-zA-Z0-9\\.\\_\\-]", "_"));
activemq-broker/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,136,activeEvents.remove(uri);
activemq-broker/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,147,activeEvents.remove(uri);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,267,LOG.warn("Exception occurred processing: \n" + command + ": " + exception.toString());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,944,LOG.debug("Stomp Connect heartbeat conf RW[" + hbReadInterval + "," + hbWriteInterval + "]");
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,959,LOG.warn("Could not send a receipt for " + command, e);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,254,throw new ProtocolException("Unknown STOMP action: " + action);
activemq-client/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,91,if (escape == (0xFFFF & c)) {
activemq-client/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,93,if (i >= like.length()) {
activemq-client/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,95,break;
activemq-client/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,102,regexp.append(".*?"); // Do a non-greedy match
activemq-client/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,104,regexp.append("."); // match one
activemq-client/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,106,regexp.append("\\x");
activemq-client/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,107,regexp.append(Integer.toHexString(0xFFFF & c));
activemq-client/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,109,regexp.append(c);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/OrderedPendingList.java,152,Iterator<MessageReference> iterator = iterator();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/PrioritizedPendingList.java,145,List<MessageReference> messageReferences = new ArrayList<MessageReference>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/PrioritizedPendingList.java,146,for (PendingNode pendingNode : map.values()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/PrioritizedPendingList.java,147,messageReferences.add(pendingNode.getMessage());
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/PrioritizedPendingList.java,149,return messageReferences;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,644,TransactionInfo info = new TransactionInfo(getConnectionId(), null, TransactionInfo.RECOVER);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,645,try {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,646,this.connection.checkClosedOrFailed();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,647,this.connection.ensureConnectionInfoSent();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,649,DataArrayResponse receipt = (DataArrayResponse)this.connection.syncSendPacket(info);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,650,DataStructure[] data = receipt.getData();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,651,XATransactionId[] answer;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,652,if (data instanceof XATransactionId[]) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,653,answer = (XATransactionId[])data;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,655,answer = new XATransactionId[data.length];
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,656,System.arraycopy(data, 0, answer, 0, data.length);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,658,return answer;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,660,throw toXAException(e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,233,physicalConnection.cleanup();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,774,xae.errorCode = original.errorCode;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,775,xae.initCause(original);
activemq-client/src/main/java/org/apache/activemq/state/ConnectionState.java,48,private HashMap<ConsumerId, ConsumerInfo> recoveringPullConsumers;
activemq-client/src/main/java/org/apache/activemq/state/ConnectionState.java,147,recoveringPullConsumers = new HashMap<ConsumerId, ConsumerInfo>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,337,LOG.error("Failed to create TopicSubscription ", e);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransport.java,47,protected void initializeStreams() throws IOException {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransport.java,48,codec = new StompCodec(this);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransport.java,49,super.initializeStreams();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransport.java,50,if (inputBuffer.position() != 0 && inputBuffer.hasRemaining()) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransport.java,51,serviceRead();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,894,public void setObjectProperty(String name, Object value) throws JMSException {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,895,initializeWriting();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,896,super.setObjectProperty(name, value);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,424,public int getMaxProducersToAudit() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,435,public int getMaxAuditDepth() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,209,public int getMaxProducersToAudit() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,226,public int getMaxAuditDepth() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/HashIndex.java,125,private Marshaller<Key> keyMarshaller;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/HashIndex.java,395,public synchronized void setKeyMarshaller(Marshaller<Key> marshaller) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,169,ResultSet resultSet = statement.executeQuery();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,170,long result = 0l;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,171,if (resultSet.next()) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,172,Timestamp timestamp = resultSet.getTimestamp(1);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,173,long diff = System.currentTimeMillis() - timestamp.getTime();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,180,return result;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,395,class BrowserDispatch {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,396,QueueBrowserSubscription browser;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,398,public BrowserDispatch(QueueBrowserSubscription browserSubscription) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,399,browser = browserSubscription;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,400,browser.incrementQueueRef();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,411,public QueueBrowserSubscription getBrowser() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,412,return browser;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,416,ConcurrentLinkedQueue<BrowserDispatch> browserDispatches = new ConcurrentLinkedQueue<BrowserDispatch>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,470,BrowserDispatch browserDispatch = new BrowserDispatch(browserSubscription);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,471,browserDispatches.add(browserDispatch);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,573,browserDispatches.remove(sub);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1507,Iterator<BrowserDispatch> browsers = browserDispatches.iterator();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1509,BrowserDispatch browserDispatch = browsers.next();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1514,QueueBrowserSubscription browser = browserDispatch.getBrowser();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1533,browserDispatches.remove(browserDispatch);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,26,import javax.jms.Destination;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,125,String clientId = activationSpec.getClientId();
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpClientTransport.java,68,public static final int MAX_CLIENT_TIMEOUT = 30000;
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,77,public boolean waitForSpace(long timeout) throws InterruptedException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,58,final Set<TransactionId> recoveredPendingCommit = new HashSet<TransactionId>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,310,recoveredPendingCommit.addAll(inflightTransactions.keySet());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,311,LOG.info("pending local transactions: " + recoveredPendingCommit);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,366,if (recoveredPendingCommit.contains(txid)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,307,process(load(location));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,326,public void process(JournalCommand<?> command) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,330,getTx(TransactionIdConversion.convert(prepareCommand.getTransactionInfo()));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,115,private final IdGenerator ACK_ID_GENERATOR = new IdGenerator();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,128,private static class AckEntry {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,133,public AckEntry(String messageId, StompSubscription subscription) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,134,this.messageId = messageId;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,135,this.subscription = subscription;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,138,public MessageAck onMessageAck(TransactionId transactionId) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,139,return subscription.onStompMessageAck(messageId, transactionId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,142,public MessageAck onMessageNack(TransactionId transactionId) throws ProtocolException {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,143,return subscription.onStompMessageNack(messageId, transactionId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,146,public String getMessageId() {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,147,return this.messageId;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,150,public StompSubscription getSubscription() {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,151,return this.subscription;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,363,messageId = pendingAck.getMessageId();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,420,messageId = pendingAck.getMessageId();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,594,stompSubscription = new StompSubscription(this, subscriptionId, consumerInfo, headers.get(Stomp.Headers.TRANSFORMATION));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,596,stompSubscription = new StompQueueBrowserSubscription(this, subscriptionId, consumerInfo, headers.get(Stomp.Headers.TRANSFORMATION));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,850,String ackId = null;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,852,AckEntry pendingAck = new AckEntry(md.getMessage().getMessageId().toString(), sub);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,853,ackId = this.ACK_ID_GENERATOR.generateId();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,854,this.pedingAcks.put(ackId, pendingAck);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,856,try {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,857,sub.onMessageDispatch(md, ackId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,859,if (ackId != null) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,860,this.pedingAcks.remove(ackId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompQueueBrowserSubscription.java,30,public StompQueueBrowserSubscription(ProtocolConverter stompTransport, String subscriptionId, ConsumerInfo consumerInfo, String transformation) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompQueueBrowserSubscription.java,31,super(stompTransport, subscriptionId, consumerInfo, transformation);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompQueueBrowserSubscription.java,35,void onMessageDispatch(MessageDispatch md, String ackId) throws IOException, JMSException {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompQueueBrowserSubscription.java,38,super.onMessageDispatch(md, ackId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,24,import java.util.Map.Entry;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,59,public StompSubscription(ProtocolConverter stompTransport, String subscriptionId, ConsumerInfo consumerInfo, String transformation) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,66,void onMessageDispatch(MessageDispatch md, String ackId) throws IOException, JMSException {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,74,dispatchedMessage.put(message.getMessageId(), md);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,99,if (ackId != null) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,103,protocolConverter.getStompTransport().sendToStomp(command);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,107,unconsumedMessage.clear();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,113,for (Iterator<?> iter = dispatchedMessage.entrySet().iterator(); iter.hasNext();) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,115,Map.Entry entry = (Entry)iter.next();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,116,MessageDispatch msg = (MessageDispatch)entry.getValue();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,117,if (unconsumedMessage.contains(msg)) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,118,iter.remove();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,123,ack = new MessageAck(unconsumedMessage.getLast(), MessageAck.STANDARD_ACK_TYPE, unconsumedMessage.size());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,124,unconsumedMessage.clear();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,137,if (!dispatchedMessage.containsKey(msgId)) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,145,if (ackMode == CLIENT_ACK) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,152,for (Iterator<?> iter = dispatchedMessage.entrySet().iterator(); iter.hasNext();) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,155,Map.Entry entry = (Entry)iter.next();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,156,MessageId id = (MessageId)entry.getKey();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,157,MessageDispatch msg = (MessageDispatch)entry.getValue();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,160,if (!unconsumedMessage.contains(msg)) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,161,unconsumedMessage.add(msg);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,165,iter.remove();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,169,if (id.equals(msgId)) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,170,ack.setLastMessageId(id);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,183,unconsumedMessage.add(dispatchedMessage.get(msgId));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,205,unconsumedMessage.add(dispatchedMessage.get(msgId));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,208,dispatchedMessage.remove(msgId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,822,sd.orderIndex.setBatch(tx, cursorPos);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,857,sd.orderIndex.setBatch(tx, pos);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,979,try {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,980,synchronized (this) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,982,if (taskRunnerFactory != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,983,taskRunner = taskRunnerFactory.createTaskRunner(this, "ActiveMQ Connection Dispatcher: "
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,984,+ getRemoteAddress());
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,986,taskRunner = null;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,988,transport.start();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,989,active = true;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,990,BrokerInfo info = connector.getBrokerInfo().copy();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,991,if (connector.isUpdateClusterClients()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,992,info.setPeerBrokerInfos(this.broker.getPeerBrokerInfos());
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,994,info.setPeerBrokerInfos(null);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,996,dispatchAsync(info);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,998,connector.onStarted(this);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1003,throw e;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1008,setStarting(false);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1009,if (isPendingStop()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1011,stop();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1029,synchronized (this) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1053,synchronized (this) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1056,LOG.debug("stopAsync() called in the middle of start(). Delaying till start completes..");
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1057,return;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1885,Iterator<Entry<String, SequenceSet>> subscriptions = rc.ackPositions.iterator(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1886,while (subscriptions.hasNext()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1887,Entry<String, SequenceSet> subscription = subscriptions.next();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1888,SequenceSet pendingAcks = subscription.getValue();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1889,if (pendingAcks != null && !pendingAcks.isEmpty()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1890,Long lastPendingAck = pendingAcks.getTail().getLast();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1892,Long current = rc.messageReferences.get(sequenceId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1893,if (current == null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1894,current = new Long(0);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1899,if (!sequenceId.equals(lastPendingAck)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1900,current = current.longValue() + 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1903,rc.messageReferences.put(sequenceId, current);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1925,if (!rc.messageReferences.isEmpty()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1926,Long nextMessageId = (Long) rc.messageReferences.keySet().toArray()[rc.messageReferences.size() - 1];
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1927,rc.orderIndex.nextMessageId =
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1928,Math.max(rc.orderIndex.nextMessageId, nextMessageId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1951,Long count = sd.messageReferences.get(messageSequence);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1952,if (count == null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1953,count = Long.valueOf(0L);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1955,count = count.longValue() + 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1956,sd.messageReferences.put(messageSequence, count);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1971,for (Long ackPosition : allOutstanding) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1972,Long count = sd.messageReferences.get(ackPosition);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1991,Long count = sd.messageReferences.get(messageSequence);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1992,if (count == null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1993,count = Long.valueOf(0L);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1995,count = count.longValue() + 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1996,sd.messageReferences.put(messageSequence, count);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2011,Long references = sd.messageReferences.get(sequenceId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2012,if (references != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2013,references = references.longValue() - 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2015,if (references.longValue() > 0) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2016,sd.messageReferences.put(sequenceId, references);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2018,sd.messageReferences.remove(sequenceId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2019,unreferenced.add(sequenceId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2059,Long count = sd.messageReferences.get(messageSequence);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2062,if (references > 0) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2063,sd.messageReferences.put(messageSequence, Long.valueOf(references));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2064,return;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2066,sd.messageReferences.remove(messageSequence);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,462,metaData.setCleanShutdown(true);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,413,freeList = new SequenceSet();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,414,for (Iterator<Page> i = tx().iterator(true); i.hasNext(); ) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,415,Page page = i.next();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,416,if (page.getType() == Page.PAGE_FREE_TYPE) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,417,freeList.add(page.getPageId());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1181,List<Operation> tx = inflightTransactions.remove(key);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,52,import org.apache.activemq.filter.MessageEvaluationContext;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,176,MessageEvaluationContext ctx = new MessageEvaluationContext();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,223,MessageEvaluationContext ctx = new MessageEvaluationContext();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,264,MessageEvaluationContext ctx = new MessageEvaluationContext();
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,758,ConnectionContext answer = new ConnectionContext(new NonCachedMessageEvaluationContext());
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,477,ConnectionContext context = new ConnectionContext(new NonCachedMessageEvaluationContext());
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,80,import org.apache.activemq.filter.MessageEvaluationContext;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1060,MessageEvaluationContext messageEvalContext = new MessageEvaluationContext();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,77,if (getDurableTopicPrefetch() != null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,80,if (getOptimizeDurableTopicPrefetch() != null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,83,if (getQueuePrefetch() != null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,86,if (getQueueBrowserPrefetch() != null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,89,if (getTopicPrefetch() != null) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/Stomp.java,52,String SUBSCRIBE = "SUB";
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/Stomp.java,53,String UNSUBSCRIBE = "UNSUB";
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,111,private final Map<String, LocalTransactionId> transactions = new ConcurrentHashMap<String, LocalTransactionId>();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,278,HashMap<String, String> headers = new HashMap<String, String>();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,779,HashMap<String, String> responseHeaders = new HashMap<String, String>();
activemq-client/src/main/java/org/apache/activemq/command/XATransactionId.java,169,hash = hash(globalTransactionId, hash);
activemq-client/src/main/java/org/apache/activemq/command/XATransactionId.java,170,hash = hash(branchQualifier, hash);
activemq-client/src/main/java/org/apache/activemq/command/XATransactionId.java,178,private static int hash(byte[] bytes, int hash) {
activemq-client/src/main/java/org/apache/activemq/command/XATransactionId.java,179,int size = bytes.length;
activemq-client/src/main/java/org/apache/activemq/command/XATransactionId.java,180,for (int i = 0; i < size; i++) {
activemq-client/src/main/java/org/apache/activemq/command/XATransactionId.java,181,hash ^= bytes[i] << ((i % 4) * 8);
activemq-client/src/main/java/org/apache/activemq/command/XATransactionId.java,183,return hash;
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,171,private final CopyOnWriteArrayList<ActiveMQSession> sessions = new CopyOnWriteArrayList<ActiveMQSession>();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,172,private final CopyOnWriteArrayList<ActiveMQConnectionConsumer> connectionConsumers = new CopyOnWriteArrayList<ActiveMQConnectionConsumer>();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,810,Map<String, String> options = new HashMap<String, String>(info.getDestination().getOptions());
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1229,Map<String, String> options = new HashMap<String, String>(consumerInfo.getDestination().getOptions());
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1339,if(exception!=null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1343,if (isClosed()||closing.get()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1359,if (jmsEx !=null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1386,if (isClosed()||closing.get()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1402,if (jmsEx !=null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,19,import java.util.Enumeration;
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,20,import java.util.HashMap;
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,21,import java.util.Map;
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,41,public MessageQuery(BrokerFacade brokerFacade, SessionPool sessionPool) throws JMSException {
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,42,super(brokerFacade, sessionPool);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,24,import org.springframework.beans.factory.DisposableBean;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,31,private SessionPool sessionPool;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,33,private Session session;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,37,public QueueBrowseQuery(BrokerFacade brokerFacade, SessionPool sessionPool) throws JMSException {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,39,this.sessionPool = sessionPool;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,40,this.session = sessionPool.borrowSession();
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,48,sessionPool.returnSession(session);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,49,session = null;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,65,queue = session.createQueue(getValidDestination());
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,82,public Session getSession() {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,83,return session;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,191,nonPersistent.addMessageLast(node);
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,201,Set set = get(destination);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,440,localClientId = configuration.getName() + "_" + remoteBrokerName + "_inbound_" + configuration.getBrokerName();
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,465,duplexLocalConnectionInfo.setClientId(configuration.getName() + "_" + remoteBrokerName + "_inbound_duplex_"
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,542,remoteConnectionInfo.setClientId(configuration.getName() + "_" + configuration.getBrokerName() + "_outbound");
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,88,import org.apache.activemq.transport.tcp.SslTransport;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,921,localBroker.oneway(sub.getLocalInfo().createRemoveCommand());
activemq-broker/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,87,info.setConsumerId(new ConsumerId(localSessionInfo.getSessionId(),
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,320,while (true) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,321,int currentExtension = prefetchExtension.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,322,int newExtension = Math.max(currentExtension, index + 1);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,323,if (prefetchExtension.compareAndSet(currentExtension, newExtension)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,324,break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,392,while (true) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,393,int currentExtension = prefetchExtension.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,394,int newExtension = Math.max(0, currentExtension - (index + 1));
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,395,if (prefetchExtension.compareAndSet(currentExtension, newExtension)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,396,break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,434,synchronized(dispatchLock) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,445,synchronized(dispatchLock) {
activemq-client/src/main/java/org/apache/activemq/command/MessagePull.java,28,public class MessagePull extends BaseCommand {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,46,e.printStackTrace();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQStreamMessage.java,731,return rc;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2220,private Journal createJournal() throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,146,location.setLatch(batch.latch);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,172,WriteBatch batch = enqueue(write);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,174,location.setLatch(batch.latch);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,77,private final AtomicBoolean connectorStarting = new AtomicBoolean(false);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,127,connectorStarting.set(true);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,136,connectorStarting.set(false);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,175,if (!connectorStarting.get()) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,303,return connectorStarting.get() || (connectorServer != null && connectorServer.isActive());
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,46,if (ignoreAllErrors) {
activemq-broker/src/main/java/org/apache/activemq/security/JaasAuthenticationBroker.java,90,super.addConnection(context, info);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,522,if (getBrokerService().isStarted()) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,524,advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_NAME, getBrokerName());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,525,String id = getBrokerId() != null ? getBrokerId().getValue() : "NOT_SET";
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,526,advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_ID, id);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,528,String url = getBrokerService().getVmConnectorURI().toString();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,530,url = getBrokerService().getDefaultSocketURIString();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,532,advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_URL, url);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,535,advisoryMessage.setDataStructure(command);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,536,advisoryMessage.setPersistent(false);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,537,advisoryMessage.setType(AdvisorySupport.ADIVSORY_MESSAGE_TYPE);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,538,advisoryMessage.setMessageId(new MessageId(advisoryProducerId, messageIdGenerator.getNextSequenceId()));
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,539,advisoryMessage.setTargetConsumerId(targetConsumerId);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,540,advisoryMessage.setDestination(topic);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,541,advisoryMessage.setResponseRequired(false);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,542,advisoryMessage.setProducerId(advisoryProducerId);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,543,boolean originalFlowControl = context.isProducerFlowControl();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,544,final ProducerBrokerExchange producerExchange = new ProducerBrokerExchange();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,545,producerExchange.setConnectionContext(context);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,546,producerExchange.setMutable(true);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,547,producerExchange.setProducerState(new ProducerState(new ProducerInfo()));
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,548,try {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,549,context.setProducerFlowControl(false);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,550,next.send(producerExchange, advisoryMessage);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,552,context.setProducerFlowControl(originalFlowControl);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,122,if (!unconsumedMessage.isEmpty()) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,470,if (context == null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1200,this.future.setException(e);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1215,public void setException(final Exception e) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1294,this.future.setException(e);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,53,public void purge() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,661,LOG.error("expired waiting for space..");
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,61,public int removeMatchingMessages(String selector) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,65,public int removeMatchingMessages(String selector, int maximumMessages) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,93,public int moveMatchingMessagesTo(String selector, String destinationName) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,99,public int moveMatchingMessagesTo(String selector, String destinationName, int maximumMessages) throws Exception {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,972,throw new IOException("Could not load journal record. Invalid location: "+location);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,174,if (!isCacheEnabled() && size==0 && isStarted() && useCache) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,178,setCacheEnabled(true);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,448,if (originalTransport instanceof SslTransport) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,449,X509Certificate[] peerCerts = ((SslTransport) originalTransport).getPeerCertificates();
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,470,if (originalTransport instanceof SslTransport) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,471,X509Certificate[] peerCerts = ((SslTransport) originalTransport).getPeerCertificates();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1989,if (!closing.get() && !closed.get()) {
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobDownloadStrategy.java,49,connection.connect();
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobDownloadStrategy.java,50,connection.disconnect();
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,69,throw new IOException("PUT was not successful: " + connection.getResponseCode() + " "
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2357,URI uri = getVmConnectorURI();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2360,map.put("async", "false");
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2361,uri = URISupport.createURIWithQuery(uri, URISupport.createQueryString(map));
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2382,connector.setLocalUri(uri);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1329,Transport localTransport = NetworkBridgeFactory.createLocalTransport(broker);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,179,duplexInboundLocalBroker = NetworkBridgeFactory.createLocalTransport(brokerService.getBroker());
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,712,MessageAck ack = new MessageAck(message, MessageAck.STANDARD_ACK_TYPE, demandConsumerDispatched);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,714,remoteBroker.oneway(ack);
activemq-broker/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,74,public static Transport createLocalTransport(Broker broker) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,75,URI uri = broker.getVmConnectorURI();
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,760,synchronized (brokerService.getVmConnectorURI()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,67,protected boolean warnOnProducerFlowControl = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,625,long nextWarn = start;
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,631,long now = System.currentTimeMillis();
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,632,if (now >= nextWarn) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,634,nextWarn = now + blockedProducerWarningInterval;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,621,if (warnOnProducerFlowControl) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,622,warnOnProducerFlowControl = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,331,if (warnOnProducerFlowControl) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,332,warnOnProducerFlowControl = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,61,protected boolean usePrefetchExtension = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,825,public boolean isUsePrefetchExtension() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,826,return usePrefetchExtension;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,829,public void setUsePrefetchExtension(boolean usePrefetchExtension) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,830,this.usePrefetchExtension = usePrefetchExtension;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,629,while (pending.hasNext() && !isFull() && count < numberToDispatch) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,169,private final List<TransportConnector> transportConnectors = new CopyOnWriteArrayList<TransportConnector>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,170,private final List<NetworkConnector> networkConnectors = new CopyOnWriteArrayList<NetworkConnector>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,171,private final List<ProxyConnector> proxyConnectors = new CopyOnWriteArrayList<ProxyConnector>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,172,private final List<JmsConnector> jmsConnectors = new CopyOnWriteArrayList<JmsConnector>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,173,private final List<Service> services = new ArrayList<Service>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,210,private final List<Runnable> shutdownHooks = new ArrayList<Runnable>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1233,Map<String, String> answer = new HashMap<String, String>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1340,return new ArrayList<TransportConnector>(transportConnectors);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1375,return new ArrayList<NetworkConnector>(networkConnectors);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1379,return new ArrayList<ProxyConnector>(proxyConnectors);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2131,List<DestinationInterceptor> answer = new ArrayList<DestinationInterceptor>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2358,Map<String, String> map = new HashMap<String, String>(URISupport.parseParameters(uri));
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2481,Set <ActiveMQQueue> consumerDestinations = new HashSet<ActiveMQQueue>();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,20,import java.io.IOException;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,21,import java.io.PrintWriter;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,22,import java.util.Enumeration;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,23,import java.util.HashMap;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,25,import javax.jms.Destination;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,26,import javax.jms.JMSException;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,27,import javax.jms.Message;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,28,import javax.jms.MessageConsumer;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,29,import javax.jms.ObjectMessage;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,30,import javax.jms.TextMessage;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,31,import javax.servlet.ServletConfig;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,32,import javax.servlet.ServletException;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,33,import javax.servlet.http.HttpServletRequest;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,34,import javax.servlet.http.HttpServletResponse;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,264,String type = getContentType(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,265,if (type != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,266,response.setContentType(type);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,268,if (isXmlContent(message)) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,269,response.setContentType(defaultContentType);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,271,response.setContentType("text/plain");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBPersistenceAdapter.java,655,return "KahaDBPersistenceAdapter[" + path + "]";
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,126,private String nameFromDestinationFilter(ActiveMQDestination destination) {
activemq-broker/src/main/java/org/apache/activemq/transport/TransportLoggerFactory.java,65,private static int defaultJmxPort = 1099;
activemq-broker/src/main/java/org/apache/activemq/transport/TransportLoggerFactory.java,138,int id = getNextId();
activemq-broker/src/main/java/org/apache/activemq/transport/TransportLoggerFactory.java,184,return LoggerFactory.getLogger(TransportLogger.class.getName()+".Connection:" + id);
activemq-broker/src/main/java/org/apache/activemq/transport/logwriters/DefaultLogWriter.java,40,log.debug("SENDING REQUEST: "+command);
activemq-broker/src/main/java/org/apache/activemq/transport/logwriters/DefaultLogWriter.java,45,log.debug("GOT RESPONSE: "+response);
activemq-broker/src/main/java/org/apache/activemq/transport/logwriters/DefaultLogWriter.java,50,log.debug("SENDING ASNYC REQUEST: "+command);
activemq-broker/src/main/java/org/apache/activemq/transport/logwriters/DefaultLogWriter.java,55,log.debug("SENDING: "+command);
activemq-broker/src/main/java/org/apache/activemq/transport/logwriters/DefaultLogWriter.java,60,log.debug("RECEIVED: " + command);
activemq-broker/src/main/java/org/apache/activemq/transport/logwriters/DefaultLogWriter.java,65,log.debug("RECEIVED Exception: "+error, error);
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,95,synchronized (transactionStore) {
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,96,transactionStore.rollback(getTransactionId());
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,98,try {
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,99,fireAfterRollback();
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,101,LOG.warn("POST ROLLBACK FAILED: ", e);
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,102,XAException xae = new XAException("POST ROLLBACK FAILED");
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,103,xae.errorCode = XAException.XAER_RMERR;
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,104,xae.initCause(e);
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,105,throw xae;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1047,if (enableRecoveryFile) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1048,recoveryFile.seek(RECOVERY_FILE_HEADER_SIZE);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1052,try {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1053,checksum.update(w.getDiskBound(), 0, pageSize);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1055,throw IOExceptionSupport.create("Cannot create recovery file. Reason: " + t, t);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1057,recoveryFile.writeLong(w.page.getPageId());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1058,recoveryFile.write(w.getDiskBound(), 0, pageSize);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1066,try {
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,152,return subSelectorCache.get(destination);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,59,private int serverSessionId = getNextLogId();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,60,private final Logger log = LoggerFactory.getLogger(ServerSessionImpl.class.getName() + ":" + serverSessionId);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,770,private XAException toXAException(JMSException e) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,719,private void checkReadOnlyProperties() throws MessageNotWriteableException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,305,Location location = journal.getNextLocation(null);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,306,while (location != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,308,location = journal.getNextLocation(location);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,365,try {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,367,LOG.info("delivering pending commit outcome for tid: " + txid);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,368,broker.commitTransaction(null, txid, false);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,371,LOG.info("delivering rollback outcome to store for tid: " + txid);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,372,broker.forgetTransaction(null, txid);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,374,persistCompletion(txid);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,376,LOG.error("failed to deliver pending outcome for tid: " + txid, ex);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,219,Sequence sequence = new Sequence(location.getOffset(), nextOffset - 1);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,243,dataFile.setLength((int) dataFile.corruptedBlocks.removeLastSequence().getFirst());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,709,this.transactionContext = null;
activemq-client/src/main/java/org/apache/activemq/command/Message.java,80,protected ByteSequence marshalledProperties;
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransportServer.java,38,private boolean disposed;
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransportServer.java,66,if (disposed) {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransportServer.java,119,VMTransportFactory.stopped(this);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,255,((JDBCPersistenceAdapter)persistenceAdapter).rollbackLastAck(context, priority, jdbcTopicMessageStore.getDestination(), subName, clientId);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,976,String subName = rs.getString(3);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,977,String subId = rs.getString(4);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,529,if (ackedAndPrepared.contains(entry.getValue().messageId)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,554,if (ackedAndPrepared.contains(entry.getValue().messageId)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,826,if (ackedAndPrepared.contains(entry.getValue().messageId)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,868,if (ackedAndPrepared.contains(entry.getValue().messageId)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1227,StoredDestination sd = getStoredDestination(command.getDestination(), tx);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,57,public boolean removeMessage(String messageId) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,69,public boolean copyMessageTo(String messageId, String destinationName) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,75,public int copyMatchingMessagesTo(String selector, String destinationName) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,81,public int copyMatchingMessagesTo(String selector, String destinationName, int maximumMessages) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,87,public boolean moveMessageTo(String messageId, String destinationName) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1233,set.addAll(pagedInMessages.values());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1300,set.addAll(pagedInMessages.values());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1388,set.addAll(pagedInMessages.values());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,125,private PreviouslyDeliveredMap<MessageId, Boolean> previouslyDeliveredMessages;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,712,inProgressClearRequiredFlag.decrementAndGet();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1081,for (Entry<MessageId, Boolean> entry: previouslyDeliveredMessages.entrySet()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1082,if (!entry.getValue()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1109,for (Entry<MessageId, Boolean> entry: previouslyDeliveredMessages.entrySet()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1110,if (!entry.getValue()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1184,session.connection.rollbackDuplicate(this, md.getMessage());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1210,if (nonBlockingRedelivery) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1211,if (!unconsumedMessages.isClosed()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1213,final LinkedList<MessageDispatch> pendingRedeliveries =
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1214,new LinkedList<MessageDispatch>(deliveredMessages);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1221,for(MessageDispatch dispatch : pendingRedeliveries) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1233,unconsumedMessages.stop();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1235,for (MessageDispatch md : deliveredMessages) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1236,unconsumedMessages.enqueueFirst(md);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1239,if (redeliveryDelay > 0 && !unconsumedMessages.isClosed()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1241,session.getScheduler().executeAfterDelay(new Runnable() {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1244,if (started.get()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1245,start();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1253,start();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1261,if (messageListener.get() != null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1262,session.redispatch(this, unconsumedMessages);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1273,for (Entry<MessageId, Boolean> entry: previouslyDeliveredMessages.entrySet()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1274,if (!entry.getValue()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1275,removeFromDeliveredMessages(entry.getKey());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1314,if (this.info.isBrowser() || !session.connection.isDuplicate(this, md.getMessage())) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1337,if (!unconsumedMessages.isRunning()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1339,session.connection.rollbackDuplicate(this, md.getMessage());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1405,if (previouslyDeliveredMessages == null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1406,previouslyDeliveredMessages = new PreviouslyDeliveredMap<MessageId, Boolean>(session.getTransactionContext().getTransactionId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1408,for (MessageDispatch delivered : deliveredMessages) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1409,previouslyDeliveredMessages.put(delivered.getMessage().getMessageId(), false);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,1922,for (MessageDispatch md : c) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,1923,this.connection.rollbackDuplicate(dispatcher, md.getMessage());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1294,int oldMaxSize = getMaxPageSize();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1295,setMaxPageSize((int) this.destinationStatistics.getMessages().getCount());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1296,doPageIn(true);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1297,setMaxPageSize(oldMaxSize);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,275,exception.printStackTrace(stream);
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,300,protected void acknowledge(ConnectionContext context, MessageAck ack, MessageReference node) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnector.java,217,String remoteHost = transport.getRemoteAddress();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnector.java,224,String remoteHost = transport.getRemoteAddress();
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,269,updated.remove(failedConnectTransportURI);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,759,if (!updated.isEmpty()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,766,return updated;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,768,ArrayList<URI> l = new ArrayList<URI>(uris);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,771,removed = l.remove(failedConnectTransportURI);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,908,List<URI> connectList = getConnectList();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,531,if (connect != null) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,153,lastBatchId = messageId;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualDestinationInterceptor.java,66,public synchronized void create(Broker broker, ConnectionContext context, ActiveMQDestination destination) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/store/PersistenceAdapter.java,158,void checkpoint(boolean sync) throws IOException;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBPersistenceAdapter.java,80,public void checkpoint(boolean sync) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBPersistenceAdapter.java,81,this.letter.checkpoint(sync);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,297,LOG.info("periodic checkpoint/cleanup disabled, will ocurr on clean shutdown/restart");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,942,startCheckpoint();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,146,public void checkpoint(final boolean sync) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,148,persistenceAdapter.checkpoint(sync);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,56,import org.apache.activemq.command.MessageAck;
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,130,if (messageReference.isExpired()) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1585,if (tempDataStore == null) {
activemq-client/src/main/java/org/apache/activemq/broker/SslContext.java,120,if( sslContext == null ) {
activemq-client/src/main/java/org/apache/activemq/broker/SslContext.java,121,if( provider == null ) {
activemq-client/src/main/java/org/apache/activemq/broker/SslContext.java,122,sslContext = SSLContext.getInstance(protocol);
activemq-client/src/main/java/org/apache/activemq/broker/SslContext.java,124,sslContext = SSLContext.getInstance(protocol, provider);
activemq-client/src/main/java/org/apache/activemq/broker/SslContext.java,126,sslContext.init(getKeyManagersAsArray(), getTrustManagersAsArray(), getSecureRandom());
activemq-client/src/main/java/org/apache/activemq/broker/SslContext.java,130,public void setSSLContext(SSLContext sslContext) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,271,serverSessionPool.close();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,108,return stale || !session.isRunning();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,162,log.debug("Running");
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,165,log.debug("run loop start");
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,168,if ( session.isRunning() ) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,199,log.debug("Run finished");
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,192,activeSessions.remove(ss);
activemq-client/src/main/java/org/apache/activemq/ActiveMQXASession.java,71,public boolean getTransacted() throws JMSException {
activemq-client/src/main/java/org/apache/activemq/ActiveMQXASession.java,72,return getTransactionContext().isInXATransaction();
activemq-client/src/main/java/org/apache/activemq/ActiveMQXASession.java,102,public boolean isAutoAcknowledge() {
activemq-client/src/main/java/org/apache/activemq/ActiveMQXASession.java,103,return true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,136,private final Runnable expireMessagesTask = new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,98,purgeInactiveDestinations();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,700,private final Runnable expireMessagesTask = new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,49,private boolean started=false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,38,private boolean started;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,48,private boolean cacheEnabled=true;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,84,persistenceAdapter.commitTransaction(ctx);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,131,try {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,134,if (connection != null && !connection.getAutoCommit()) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,143,try {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,144,if (connection != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,145,connection.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,150,connection = null;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,170,if (!connection.getAutoCommit()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,163,private final Set<TransactionStore> stores = new HashSet<TransactionStore>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,167,stores.add(store);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,170,public Set<TransactionStore> getStores() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,212,for (TransactionStore store : tx.getStores()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,213,store.commit(txid, true, null, null);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,260,for (TransactionStore store : tx.getStores()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,261,store.rollback(txid);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,351,getTx(xid).trackStore(adapter.createTransactionStore());
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,30,import org.apache.activemq.ActiveMQMessageAudit;
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,86,final ConnectionContext context = new ConnectionContext();
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,134,Destination destination =  addDestination(context, amqDestination, false);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,135,registerSync(destination, transaction, ack);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,138,private void registerSync(Destination destination, Transaction transaction, BaseCommand command) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,139,Synchronization sync = new PreparedDestinationCompletion(destination, command.isMessage());
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,150,final Destination destination;
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,153,public PreparedDestinationCompletion(final Destination destination, boolean messageSend) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,179,destination.clearPendingMessages();
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,189,destination.clearPendingMessages();
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,190,destination.getDestinationStatistics().getEnqueues().add(opCount);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,191,destination.getDestinationStatistics().getMessages().add(opCount);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,196,destination.getDestinationStatistics().getDequeues().add(opCount);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,197,destination.getDestinationStatistics().getMessages().subtract(opCount);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Destination.java,239,public void clearPendingMessages();
activemq-broker/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,319,public void clearPendingMessages() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,320,next.clearPendingMessages();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,436,dispatched.remove(node);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,437,nodeDest.getDestinationStatistics().getInflight().decrement();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1179,public void clearPendingMessages() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,763,public void clearPendingMessages() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,215,setCacheEnabled(false);
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,33,public class ProxyTopicMessageStore implements TopicMessageStore {
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,35,final TopicMessageStore delegate;
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,38,this.delegate = delegate;
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,87,return delegate.lookupSubscription(clientId, subscriptionName);
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,93,delegate.acknowledge(context, clientId, subscriptionName, messageId, ack);
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,103,delegate.deleteSubscription(clientId, subscriptionName);
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,109,delegate.recoverSubscription(clientId, subscriptionName, listener);
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,115,delegate.recoverNextMessages(clientId, subscriptionName, maxReturned, listener);
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,120,delegate.resetBatching(clientId, subscriptionName);
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,130,return delegate.getAllSubscriptions();
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,140,return delegate.getMessageCount(clientId, subscriberName);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,110,persistenceAdapter.commitTransaction(ctx);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,253,tx = preparedTransactions.remove(txid);
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,74,setStateFinished();
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,90,LOG.warn("Store COMMIT FAILED: ", t);
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,91,rollback();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,87,private MemoryTransactionStore transactionStore;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,192,MessageStore rc = new JDBCMessageStore(this, getAdapter(), wireFormat, destination, audit);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,193,if (transactionStore != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,194,rc = transactionStore.proxy(rc);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,200,TopicMessageStore rc = new JDBCTopicMessageStore(this, getAdapter(), wireFormat, destination, audit);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,201,if (transactionStore != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,202,rc = transactionStore.proxy(rc);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,244,if (transactionStore == null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,245,transactionStore = new JdbcMemoryTransactionStore(this);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,149,return perPriority[javax.jms.Message.DEFAULT_PRIORITY];
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,308,recovered.perPriority[isPrioritizedMessages() ? priority : javax.jms.Message.DEFAULT_PRIORITY].recovered = sequenceId;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,21,import java.util.HashMap;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,31,import org.apache.activemq.store.ProxyTopicMessageStore;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,50,private HashMap<ActiveMQDestination, MessageStore> topicStores = new HashMap<ActiveMQDestination, MessageStore>();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,288,protected void onProxyTopicStore(ProxyTopicMessageStore proxyTopicMessageStore) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,289,topicStores.put(proxyTopicMessageStore.getDestination(), proxyTopicMessageStore.getDelegate());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,297,JDBCTopicMessageStore jdbcTopicMessageStore = (JDBCTopicMessageStore) topicStores.get(lastAckCommand.getMessageAck().getDestination());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,304,((JDBCPersistenceAdapter)persistenceAdapter).getBrokerService().getRegionBroker().getDestinationMap().get(removeMessageCommand.getMessageAck().getDestination()).getDestinationStatistics().getMessages().increment();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2115,public void trackRecoveredAcks(ArrayList<MessageAck> acks) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2116,this.indexLock.writeLock().lock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2117,try {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2118,for (MessageAck ack : acks) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2122,this.indexLock.writeLock().unlock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2127,if (acks != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2128,this.indexLock.writeLock().lock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2129,try {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2130,for (MessageAck ack : acks) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2134,this.indexLock.writeLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,188,Message msg = (Message) ((JDBCPersistenceAdapter)persistenceAdapter).getWireFormat().unmarshal(new ByteSequence(message));
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,192,tx.add(new RemoveMessageCommand() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,205,return null;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnector.java,448,while (result && tokenizer.hasMoreTokens()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnector.java,459,boolean result = true;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,478,topicName = mqttTopicMap.get(message.getJMSDestination());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,481,mqttTopicMap.put(message.getJMSDestination(), topicName);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,255,LOG.warn("Transport (" + transport.getRemoteAddress() + ") failed, reason:  " + e
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,175,diskBoundLocation = -1;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,803,serialExecutor.execute(new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,805,public void run() {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,806,try {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,807,localBroker.oneway(destInfo);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,814,localBroker.oneway(destInfo);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,896,protected void addSubscription(DemandSubscription sub) throws IOException {
