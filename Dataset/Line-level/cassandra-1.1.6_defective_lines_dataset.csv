File,Line_number,SRC
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,725,cfs.table.clearSnapshot(validator.request.sessionid);
src/java/org/apache/cassandra/db/Column.java,280,AbstractType<?> valueValidator = metadata.getValueValidator(name());
src/java/org/apache/cassandra/cql3/statements/SelectStatement.java,1204,throw new InvalidRequestException(String.format("%s cannot be restricted by more than one reation if it includes a IN", name));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,137,Tuple tuple = TupleFactory.getInstance().newTuple();
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,314,throw new ConfigurationException("thrift_max_message_length_in_mb must be greater than thrift_framed_transport_size_in_mb when using TFramedTransport");
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,588,return conf.thrift_max_message_length_in_mb * 1024 * 1024;
src/java/org/apache/cassandra/thrift/CassandraDaemon.java,127,TProtocolFactory tProtocolFactory = new TBinaryProtocol.Factory(true, true, DatabaseDescriptor.getThriftMaxMessageLength());
src/java/org/apache/cassandra/thrift/TBinaryProtocol.java,37,this(trans, false, true);
src/java/org/apache/cassandra/thrift/TBinaryProtocol.java,61,super(strictRead, strictWrite, readLength);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,240,Tuple tuple = keyToTuple(key, cfDef, parseType(cfDef.getKey_validation_class()));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,299,private Tuple keyToTuple(ByteBuffer key, CfDef cfDef, AbstractType comparator) throws IOException
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,301,Tuple tuple = TupleFactory.getInstance().newTuple(1);
src/java/org/apache/cassandra/db/Memtable.java,125,return (long) (currentSize.get() * cfs.liveRatio * 1.25);
src/java/org/apache/cassandra/utils/SlabAllocator.java,52,private volatile int regionCount;
src/java/org/apache/cassandra/net/OutboundTcpConnection.java,74,backlog.put(new Entry(message, id, System.currentTimeMillis()));
src/java/org/apache/cassandra/net/OutboundTcpConnection.java,126,writeConnected(m, id);
src/java/org/apache/cassandra/net/OutboundTcpConnection.java,163,logger.error("error writing to " + poolReference.endPoint(), e);
src/java/org/apache/cassandra/net/OutboundTcpConnection.java,165,logger.debug("error writing to " + poolReference.endPoint(), e);
src/java/org/apache/cassandra/net/OutboundTcpConnection.java,292,this.timestamp = timestamp;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,33,import org.apache.commons.logging.Log;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,34,import org.apache.commons.logging.LogFactory;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,90,private static final Log logger = LogFactory.getLog(CassandraStorage.class);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,446,CacheService.instance.rowCache.put(new RowCacheKey(metadata.cfId, key), data);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,102,static
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,105,StorageService.optionalTasks.scheduleWithFixedDelay(new MeteredFlusher(), 1000, 1000, TimeUnit.MILLISECONDS);
src/java/org/apache/cassandra/db/MeteredFlusher.java,36,class MeteredFlusher implements Runnable
src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java,43,import org.apache.cassandra.db.ColumnFamilyStore;
src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java,44,import org.apache.cassandra.db.Directories;
src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java,45,import org.apache.cassandra.db.SystemTable;
src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java,46,import org.apache.cassandra.db.Table;
src/java/org/apache/cassandra/io/sstable/Descriptor.java,103,hashCode = Objects.hashCode(directory, generation, ksname, cfname);
src/java/org/apache/cassandra/io/sstable/Descriptor.java,269,return that.directory.equals(this.directory) && that.generation == this.generation && that.ksname.equals(this.ksname) && that.cfname.equals(this.cfname);
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,559,return pathname.isDirectory();
src/java/org/apache/cassandra/gms/Gossiper.java,1136,Thread.sleep(intervalInMillis);
src/java/org/apache/cassandra/service/MigrationManager.java,244,assert Gossiper.instance.isEnabled();
src/java/org/apache/cassandra/db/HintedHandOffManager.java,382,try
src/java/org/apache/cassandra/db/HintedHandOffManager.java,384,compact().get();
src/java/org/apache/cassandra/db/HintedHandOffManager.java,388,throw new RuntimeException(e);
src/java/org/apache/cassandra/service/AntiEntropyService.java,681,logger.info(String.format("[repair #%s] Cannot proceed on repair because a neighbor (%s) is dead: session failed", getName(), endpoint));
src/java/org/apache/cassandra/service/AntiEntropyService.java,682,return;
src/java/org/apache/cassandra/tools/NodeCmd.java,925,System.exit(0);
src/java/org/apache/cassandra/hadoop/ColumnFamilyOutputFormat.java,157,TTransport transport = ConfigHelper.getOutputTransportFactory(conf).openTransport(socket);
src/java/org/apache/cassandra/hadoop/ColumnFamilyOutputFormat.java,158,TBinaryProtocol binaryProtocol = new TBinaryProtocol(transport);
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,163,TTransport transport = ConfigHelper.getInputTransportFactory(conf).openTransport(socket);
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,164,TBinaryProtocol binaryProtocol = new TBinaryProtocol(transport);
src/java/org/apache/cassandra/hadoop/ConfigHelper.java,507,TTransport transport = getInputTransportFactory(conf).openTransport(socket);
src/java/org/apache/cassandra/hadoop/ConfigHelper.java,508,return new Cassandra.Client(new TBinaryProtocol(transport));
src/java/org/apache/cassandra/thrift/ITransportFactory.java,33,TTransport openTransport(TSocket socket) throws LoginException, TTransportException;
src/java/org/apache/cassandra/thrift/TFramedTransportFactory.java,31,public TTransport openTransport(TSocket socket) throws TTransportException
src/java/org/apache/cassandra/thrift/TFramedTransportFactory.java,33,TTransport transport = new TFramedTransport(socket);
src/java/org/apache/cassandra/db/compaction/LazilyCompactedRow.java,94,maxTimestamp = reducer == null ? Long.MIN_VALUE : reducer.maxTimestampSeen;
src/java/org/apache/cassandra/io/sstable/SSTableMetadata.java,228,maxTimestamp = Long.MIN_VALUE;
src/java/org/apache/cassandra/net/OutboundTcpConnectionPool.java,66,con.closeSocket();
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,356,boolean cacheLoading = keyCache != null && !keysToLoadInCache.isEmpty();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,241,Set<Integer> compactedSSTables = new HashSet<Integer>();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,243,compactedSSTables.addAll(sstable.getAncestors());
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,245,Set<SSTableReader> liveSSTables = new HashSet<SSTableReader>();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,249,sstable.releaseReference(); // this amount to deleting the sstable
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,250,else
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,251,liveSSTables.add(sstable);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,253,data.addInitialSSTables(liveSSTables);
src/java/org/apache/cassandra/db/compaction/CompactionTask.java,35,import org.apache.cassandra.io.sstable.SSTable;
src/java/org/apache/cassandra/db/compaction/CompactionTask.java,36,import org.apache.cassandra.io.sstable.SSTableReader;
src/java/org/apache/cassandra/db/compaction/CompactionTask.java,37,import org.apache.cassandra.io.sstable.SSTableWriter;
src/java/org/apache/cassandra/db/compaction/CompactionTask.java,130,Map<SSTableReader, Map<DecoratedKey, Long>> cachedKeyMap =  new HashMap<SSTableReader, Map<DecoratedKey, Long>>();
src/java/org/apache/cassandra/db/compaction/CompactionTask.java,175,SSTableReader toIndex = writer.closeAndOpenReader(getMaxDataAge(toCompact));
src/java/org/apache/cassandra/db/compaction/CompactionTask.java,176,cachedKeyMap.put(toIndex, cachedKeys);
src/java/org/apache/cassandra/db/compaction/CompactionTask.java,177,sstables.add(toIndex);
src/java/org/apache/cassandra/db/compaction/CompactionTask.java,204,SSTableReader key = ssTableReaderMapEntry.getKey();
src/java/org/apache/cassandra/db/compaction/CompactionTask.java,206,key.cacheKey(entry.getKey(), entry.getValue());
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,316,File directory = new File(ksname);
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,323,Pair<Descriptor, String> p = Descriptor.fromFilename(directory, filename.trim());
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,326,throw new IllegalArgumentException(filename + " does not appear to be a data file");
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,330,cfname = p.left.cfname;
src/java/org/apache/cassandra/io/compress/CompressedRandomAccessReader.java,22,import java.nio.channels.FileChannel;
src/java/org/apache/cassandra/io/compress/CompressedRandomAccessReader.java,26,import com.google.common.primitives.Ints;
src/java/org/apache/cassandra/io/compress/CompressedRandomAccessReader.java,51,private byte[] compressed;
src/java/org/apache/cassandra/io/compress/CompressedRandomAccessReader.java,57,private final byte[] checksumBytes = new byte[4];
src/java/org/apache/cassandra/io/compress/CompressedRandomAccessReader.java,59,private final FileInputStream source;
src/java/org/apache/cassandra/io/compress/CompressedRandomAccessReader.java,60,private final FileChannel channel;
src/java/org/apache/cassandra/io/compress/CompressedRandomAccessReader.java,66,compressed = new byte[metadata.compressor().initialCompressedBufferLength(metadata.chunkLength())];
src/java/org/apache/cassandra/io/compress/CompressedRandomAccessReader.java,70,source = new FileInputStream(getFD());
src/java/org/apache/cassandra/io/compress/CompressedRandomAccessReader.java,71,channel = source.getChannel(); // for position manipulation
src/java/org/apache/cassandra/io/compress/CompressedRandomAccessReader.java,86,compressed = new byte[chunk.length];
src/java/org/apache/cassandra/io/compress/CompressedRandomAccessReader.java,91,validBufferBytes = metadata.compressor().uncompress(compressed, 0, chunk.length, buffer, 0);
src/java/org/apache/cassandra/io/compress/CompressedRandomAccessReader.java,118,return Ints.fromByteArray(checksumBytes);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,151,tuple.append(new DataByteArray(key.array(), key.position()+key.arrayOffset(), key.limit()+key.arrayOffset()));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,187,tuple.append(new DataByteArray(lastKey.array(), lastKey.position()+lastKey.arrayOffset(), lastKey.limit()+lastKey.arrayOffset()));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,197,tuple.append(new DataByteArray(key.array(), key.position()+key.arrayOffset(), key.limit()+key.arrayOffset()));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,310,return tuple;
src/java/org/apache/cassandra/thrift/ThriftValidation.java,498,IPartitioner p = StorageService.getPartitioner();
src/java/org/apache/cassandra/utils/Throttle.java,66,targetBytesPerMS = newTargetBytesPerMS;
src/java/org/apache/cassandra/io/compress/CompressionParameters.java,28,import org.apache.avro.util.Utf8;
src/java/org/apache/cassandra/io/compress/CompressionParameters.java,45,public final double crcChance;
src/java/org/apache/cassandra/io/compress/CompressionParameters.java,67,this(sstableCompressor, null, Collections.<String, String>emptyMap());
src/java/org/apache/cassandra/io/compress/CompressionParameters.java,75,String chance = otherOptions.get(CRC_CHECK_CHANCE);
src/java/org/apache/cassandra/io/compress/CompressionParameters.java,76,this.crcChance = (chance == null) ? DEFAULT_CRC_CHECK_CHANCE : Double.parseDouble(chance);
src/java/org/apache/cassandra/io/compress/CompressionParameters.java,110,Set<String> supportedOpts = compressor.supportedOptions();
src/java/org/apache/cassandra/io/compress/CompressionParameters.java,203,throw new ConfigurationException("crc_check_chance should be between 0.0 to 1.0");
src/java/org/apache/cassandra/db/compaction/AbstractCompactedRow.java,35,public abstract class AbstractCompactedRow
src/java/org/apache/cassandra/cql/CFPropDefs.java,31,import org.apache.cassandra.io.compress.SnappyCompressor;
src/java/org/apache/cassandra/cql/CFPropDefs.java,33,import org.slf4j.Logger;
src/java/org/apache/cassandra/cql/CFPropDefs.java,34,import org.slf4j.LoggerFactory;
src/java/org/apache/cassandra/cql/CFPropDefs.java,36,import java.util.HashMap;
src/java/org/apache/cassandra/cql/CFPropDefs.java,37,import java.util.HashSet;
src/java/org/apache/cassandra/cql/CFPropDefs.java,38,import java.util.Map;
src/java/org/apache/cassandra/cql/CFPropDefs.java,39,import java.util.Set;
src/java/org/apache/cassandra/cql/CFPropDefs.java,66,private static final String DEFAULT_COMPRESSOR = SnappyCompressor.isAvailable() ? SnappyCompressor.class.getCanonicalName() : null;
src/java/org/apache/cassandra/cql/CFPropDefs.java,117,put(CompressionParameters.SSTABLE_COMPRESSION, CFMetaData.DEFAULT_COMPRESSOR);
src/java/org/apache/cassandra/cql3/CFPropDefs.java,21,import java.util.Collections;
src/java/org/apache/cassandra/cql3/CFPropDefs.java,38,import org.slf4j.Logger;
src/java/org/apache/cassandra/cql3/CFPropDefs.java,39,import org.slf4j.LoggerFactory;
src/java/org/apache/cassandra/cql3/CFPropDefs.java,101,put(CompressionParameters.SSTABLE_COMPRESSION, CFMetaData.DEFAULT_COMPRESSOR);
src/java/org/apache/cassandra/cql3/CFPropDefs.java,172,cfm.compressionParameters(CompressionParameters.create(compressionParameters));
src/java/org/apache/cassandra/cql3/statements/CreateColumnFamilyStatement.java,27,import org.apache.cassandra.auth.Permission;
src/java/org/apache/cassandra/cql3/statements/CreateColumnFamilyStatement.java,28,import org.apache.commons.lang.StringUtils;
src/java/org/apache/cassandra/cql3/statements/CreateColumnFamilyStatement.java,47,import org.apache.cassandra.utils.Pair;
src/java/org/apache/cassandra/service/StorageService.java,547,Schema.instance.updateVersionAndAnnounce();
src/java/org/apache/cassandra/service/MigrationManager.java,28,import java.util.concurrent.Callable;
src/java/org/apache/cassandra/service/MigrationManager.java,75,rectifySchema(UUID.fromString(value.value), endpoint);
src/java/org/apache/cassandra/service/MigrationManager.java,83,rectifySchema(UUID.fromString(value.value), endpoint);
src/java/org/apache/cassandra/service/MigrationManager.java,111,StageManager.getStage(Stage.MIGRATION).submit(new MigrationTask(endpoint));
src/java/org/apache/cassandra/dht/RangeStreamer.java,41,import org.apache.cassandra.utils.FBUtilities;
src/java/org/apache/cassandra/dht/RangeStreamer.java,143,Multimap<Range<Token>, InetAddress> rangeAddresses = strat.getRangeAddresses(metadata);
src/java/org/apache/cassandra/dht/RangeStreamer.java,220,final CountDownLatch latch = new CountDownLatch(toFetch().entries().size());
src/java/org/apache/cassandra/dht/RangeStreamer.java,225,Collection<Range<Token>> ranges = entry.getValue().getValue();
src/java/org/apache/cassandra/dht/RangeStreamer.java,240,onSuccess(); // calling onSuccess for latch countdown
src/java/org/apache/cassandra/db/RowMutation.java,456,public RowMutation deserializeFixingTimestamps(DataInput dis, int version) throws IOException
src/java/org/apache/cassandra/db/RowMutation.java,458,RowMutation mutation = deserialize(dis, version);
src/java/org/apache/cassandra/db/RowMutation.java,460,long now = FBUtilities.timestampMicros();
src/java/org/apache/cassandra/db/RowMutation.java,461,Map<Integer, ColumnFamily> fixedModifications = new HashMap<Integer, ColumnFamily>();
src/java/org/apache/cassandra/db/RowMutation.java,465,ColumnFamily cfOld = modification.getValue();
src/java/org/apache/cassandra/db/RowMutation.java,466,ColumnFamily cf = ColumnFamily.create(cfOld.metadata());
src/java/org/apache/cassandra/db/RowMutation.java,469,cf.delete(cfOld.getLocalDeletionTime(), cfOld.getMarkedForDeleteAt() > now ? now : cfOld.getMarkedForDeleteAt());
src/java/org/apache/cassandra/db/RowMutation.java,476,cf.addColumn(column);
src/java/org/apache/cassandra/db/RowMutation.java,477,continue;
src/java/org/apache/cassandra/db/RowMutation.java,481,cf.addColumn(new DeletedColumn(column.name(), column.value(), now));
src/java/org/apache/cassandra/db/RowMutation.java,482,else
src/java/org/apache/cassandra/db/RowMutation.java,483,cf.addColumn(new Column(column.name(), column.value(), now));
src/java/org/apache/cassandra/db/RowMutation.java,486,fixedModifications.put(modification.getKey(), cf);
src/java/org/apache/cassandra/db/RowMutation.java,489,return new RowMutation(mutation.getTable(), mutation.key(), fixedModifications);
src/java/org/apache/cassandra/service/MigrationManager.java,307,schema.add(RowMutation.serializer().deserializeFixingTimestamps(in, version));
src/java/org/apache/cassandra/db/DefsTable.java,177,long timestamp = FBUtilities.timestampMicros();
src/java/org/apache/cassandra/db/DefsTable.java,227,mutation.add(new QueryPath(columnFamily, null, column.name()), column.value(), timestamp);
src/java/org/apache/cassandra/db/DefsTable.java,320,logger.error("Can't accept schema migrations from Cassandra versions previous to 1.1, please update first.");
src/java/org/apache/cassandra/net/MessagingService.java,31,import java.util.concurrent.LinkedBlockingQueue;
src/java/org/apache/cassandra/net/MessagingService.java,40,import org.apache.cassandra.concurrent.NamedThreadFactory;
src/java/org/apache/cassandra/net/MessagingService.java,70,public static final int VERSION_07 = 1;
src/java/org/apache/cassandra/net/MessagingService.java,72,public static final int VERSION_10 = 3;
src/java/org/apache/cassandra/net/MessagingService.java,73,public static final int VERSION_11 = 4;
src/java/org/apache/cassandra/net/MessagingService.java,74,public static final int version_ = VERSION_11;
src/java/org/apache/cassandra/cache/ConcurrentLinkedHashCacheProvider.java,45,return (int) Math.min(meter.measure(value), Integer.MAX_VALUE);
src/java/org/apache/cassandra/service/StorageProxy.java,856,command.predicate,
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,481,lastColumn = next.right.values().iterator().next().name();
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,537,key.put(this.getCurrentKey());
src/java/org/apache/cassandra/cql/QueryProcessor.java,721,clientState.hasColumnFamilySchemaAccess(createCf.getName(), Permission.CREATE);
src/java/org/apache/cassandra/db/RowIteratorFactory.java,20,import java.io.Closeable;
src/java/org/apache/cassandra/db/RowIteratorFactory.java,23,import com.google.common.collect.AbstractIterator;
src/java/org/apache/cassandra/db/RowIteratorFactory.java,126,private static class ConvertToColumnIterator extends AbstractIterator<IColumnIterator> implements CloseableIterator<IColumnIterator>
src/java/org/apache/cassandra/db/RowIteratorFactory.java,141,Map.Entry<DecoratedKey, ColumnFamily> entry = iter.next();
src/java/org/apache/cassandra/db/RowIteratorFactory.java,142,return filter.getMemtableColumnIterator(entry.getValue(), entry.getKey());
src/java/org/apache/cassandra/db/RowIteratorFactory.java,144,return endOfData();
src/java/org/apache/cassandra/io/sstable/SSTableScanner.java,178,DecoratedKey<?> key = SSTableReader.decodeKey(sstable.partitioner,
src/java/org/apache/cassandra/io/sstable/SSTableScanner.java,192,return row = filter.getSSTableColumnIterator(sstable, file, key);
src/java/org/apache/cassandra/thrift/CassandraServer.java,429,int requestedCount = predicate.slice_range.count;
src/java/org/apache/cassandra/thrift/CassandraServer.java,433,predicate.slice_range.count = Math.min(pageSize, requestedCount);
src/java/org/apache/cassandra/thrift/CassandraServer.java,438,ColumnOrSuperColumn firstColumn = columns.get(columns.size() - 1);
src/java/org/apache/cassandra/thrift/CassandraServer.java,442,requestedCount -= newColumns;
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26116,case 1: // KEYSPACE
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26118,this.keyspace = iprot.readString();
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26138,if (this.keyspace != null) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26139,oprot.writeFieldBegin(KEYSPACE_FIELD_DESC);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26140,oprot.writeString(this.keyspace);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26149,StringBuilder sb = new StringBuilder("describe_keyspace_args(");
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26152,sb.append("keyspace:");
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26153,if (this.keyspace == null) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26156,sb.append(this.keyspace);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26165,if (keyspace == null) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26166,throw new org.apache.thrift.protocol.TProtocolException("Required field 'keyspace' was not present! Struct: " + toString());
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26188,public static class describe_keyspace_result implements org.apache.thrift.TBase<describe_keyspace_result, describe_keyspace_result._Fields>, java.io.Serializable, Cloneable   {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26189,private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("describe_keyspace_result");
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26191,private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26192,private static final org.apache.thrift.protocol.TField NFE_FIELD_DESC = new org.apache.thrift.protocol.TField("nfe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26193,private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)2);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26195,public KsDef success; // required
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26196,public NotFoundException nfe; // required
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26202,NFE((short)1, "nfe"),
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26203,IRE((short)2, "ire");
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26220,case 1: // NFE
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26221,return NFE;
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26222,case 2: // IRE
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26269,new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KsDef.class)));
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26270,tmpMap.put(_Fields.NFE, new org.apache.thrift.meta_data.FieldMetaData("nfe", org.apache.thrift.TFieldRequirementType.DEFAULT,
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26271,new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26275,org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(describe_keyspace_result.class, metaDataMap);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26278,public describe_keyspace_result() {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26281,public describe_keyspace_result(
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26282,KsDef success,
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26283,NotFoundException nfe,
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26288,this.nfe = nfe;
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26295,public describe_keyspace_result(describe_keyspace_result other) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26297,this.success = new KsDef(other.success);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26299,if (other.isSetNfe()) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26300,this.nfe = new NotFoundException(other.nfe);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26307,public describe_keyspace_result deepCopy() {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26308,return new describe_keyspace_result(this);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26314,this.nfe = null;
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26318,public KsDef getSuccess() {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26322,public describe_keyspace_result setSuccess(KsDef success) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26342,public NotFoundException getNfe() {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26343,return this.nfe;
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26346,public describe_keyspace_result setNfe(NotFoundException nfe) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26347,this.nfe = nfe;
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26348,return this;
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26351,public void unsetNfe() {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26352,this.nfe = null;
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26356,public boolean isSetNfe() {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26357,return this.nfe != null;
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26360,public void setNfeIsSet(boolean value) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26361,if (!value) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26362,this.nfe = null;
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26370,public describe_keyspace_result setIre(InvalidRequestException ire) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26396,setSuccess((KsDef)value);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26398,break;
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26400,case NFE:
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26401,if (value == null) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26402,unsetNfe();
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26404,setNfe((NotFoundException)value);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26424,case NFE:
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26425,return getNfe();
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26443,case NFE:
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26444,return isSetNfe();
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26456,return this.equals((describe_keyspace_result)that);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26460,public boolean equals(describe_keyspace_result that) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26473,boolean this_present_nfe = true && this.isSetNfe();
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26474,boolean that_present_nfe = true && that.isSetNfe();
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26475,if (this_present_nfe || that_present_nfe) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26477,return false;
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26479,return false;
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26503,boolean present_nfe = true && (isSetNfe());
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26504,builder.append(present_nfe);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26506,builder.append(nfe);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26516,public int compareTo(describe_keyspace_result other) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26522,describe_keyspace_result typedOther = (describe_keyspace_result)other;
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26534,lastComparison = Boolean.valueOf(isSetNfe()).compareTo(typedOther.isSetNfe());
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26535,if (lastComparison != 0) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26536,return lastComparison;
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26538,if (isSetNfe()) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26539,lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nfe, typedOther.nfe);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26540,if (lastComparison != 0) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26541,return lastComparison;
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26572,if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26573,this.success = new KsDef();
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26574,this.success.read(iprot);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26576,org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26578,break;
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26579,case 1: // NFE
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26580,if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26581,this.nfe = new NotFoundException();
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26582,this.nfe.read(iprot);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26587,case 2: // IRE
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26611,this.success.write(oprot);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26612,oprot.writeFieldEnd();
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26614,oprot.writeFieldBegin(NFE_FIELD_DESC);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26615,this.nfe.write(oprot);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26628,StringBuilder sb = new StringBuilder("describe_keyspace_result(");
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26639,sb.append("nfe:");
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26640,if (this.nfe == null) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26641,sb.append("null");
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26643,sb.append(this.nfe);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26645,first = false;
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26646,if (!first) sb.append(", ");
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26680,public static class describe_splits_args implements org.apache.thrift.TBase<describe_splits_args, describe_splits_args._Fields>, java.io.Serializable, Cloneable   {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26681,private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("describe_splits_args");
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26776,org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(describe_splits_args.class, metaDataMap);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26779,public describe_splits_args() {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26782,public describe_splits_args(
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26799,public describe_splits_args(describe_splits_args other) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26814,public describe_splits_args deepCopy() {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26815,return new describe_splits_args(this);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26831,public describe_splits_args setCfName(String cfName) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26855,public describe_splits_args setStart_token(String start_token) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26879,public describe_splits_args setEnd_token(String end_token) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,26903,public describe_splits_args setKeys_per_split(int keys_per_split) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27001,return this.equals((describe_splits_args)that);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27005,public boolean equals(describe_splits_args that) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27075,public int compareTo(describe_splits_args other) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27081,describe_splits_args typedOther = (describe_splits_args)other;
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27211,StringBuilder sb = new StringBuilder("describe_splits_args(");
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27279,public static class describe_splits_result implements org.apache.thrift.TBase<describe_splits_result, describe_splits_result._Fields>, java.io.Serializable, Cloneable   {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27280,private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("describe_splits_result");
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27285,public List<String> success; // required
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27356,new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27360,org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(describe_splits_result.class, metaDataMap);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27363,public describe_splits_result() {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27366,public describe_splits_result(
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27367,List<String> success,
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27378,public describe_splits_result(describe_splits_result other) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27380,List<String> __this__success = new ArrayList<String>();
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27381,for (String other_element : other.success) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27382,__this__success.add(other_element);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27391,public describe_splits_result deepCopy() {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27392,return new describe_splits_result(this);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27405,public java.util.Iterator<String> getSuccessIterator() {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27409,public void addToSuccess(String elem) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27411,this.success = new ArrayList<String>();
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27416,public List<String> getSuccess() {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27420,public describe_splits_result setSuccess(List<String> success) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27444,public describe_splits_result setIre(InvalidRequestException ire) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27470,setSuccess((List<String>)value);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27517,return this.equals((describe_splits_result)that);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27521,public boolean equals(describe_splits_result that) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27563,public int compareTo(describe_splits_result other) {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27569,describe_splits_result typedOther = (describe_splits_result)other;
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27611,org.apache.thrift.protocol.TList _list169 = iprot.readListBegin();
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27612,this.success = new ArrayList<String>(_list169.size);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27615,String _elem171; // required
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27616,_elem171 = iprot.readString();
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27617,this.success.add(_elem171);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27650,oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.success.size()));
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27653,oprot.writeString(_iter172);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,27669,StringBuilder sb = new StringBuilder("describe_splits_result(");
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,34790,org.apache.thrift.protocol.TList _list173 = iprot.readListBegin();
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,34791,this.values = new ArrayList<ByteBuffer>(_list173.size);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,34794,ByteBuffer _elem175; // required
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,34795,_elem175 = iprot.readBinary();
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,34796,this.values.add(_elem175);
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,34831,oprot.writeBinary(_iter176);
interface/thrift/gen-java/org/apache/cassandra/thrift/Constants.java,47,public static final String VERSION = "19.32.0";
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,47,import org.apache.commons.lang.StringUtils;
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,49,import org.apache.hadoop.mapred.*;
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,50,import org.apache.hadoop.mapreduce.InputFormat;
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,51,import org.apache.hadoop.mapreduce.InputSplit;
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,52,import org.apache.hadoop.mapreduce.JobContext;
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,53,import org.apache.hadoop.mapreduce.RecordReader;
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,54,import org.apache.hadoop.mapreduce.TaskAttemptContext;
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,55,import org.apache.hadoop.mapreduce.TaskAttemptID;
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,57,import org.slf4j.Logger;
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,58,import org.slf4j.LoggerFactory;
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,211,List<String> tokens = getSubSplits(keyspace, cfName, range, conf);
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,228,Token left = factory.fromString(tokens.get(i - 1));
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,229,Token right = factory.fromString(tokens.get(i));
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,234,ColumnFamilySplit split = new ColumnFamilySplit(factory.toString(subrange.left), factory.toString(subrange.right), endpoints);
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,243,private List<String> getSubSplits(String keyspace, String cfName, TokenRange range, Configuration conf) throws IOException
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,257,return client.describe_splits(cfName, range.start_token, range.end_token, splitsize);
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,146,totalRowCount = ConfigHelper.getInputSplitSize(conf);
src/java/org/apache/cassandra/hadoop/ColumnFamilySplit.java,62,return Long.MAX_VALUE;
src/java/org/apache/cassandra/service/StorageService.java,2191,List<Token> tokens = new ArrayList<Token>();
src/java/org/apache/cassandra/service/StorageService.java,2193,tokens.add(range.left);
src/java/org/apache/cassandra/service/StorageService.java,2198,int splits = keys.size() * DatabaseDescriptor.getIndexInterval() / keysPerSplit;
src/java/org/apache/cassandra/service/StorageService.java,2204,int index = i * (keys.size() / splits);
src/java/org/apache/cassandra/service/StorageService.java,2205,tokens.add(keys.get(index).token);
src/java/org/apache/cassandra/thrift/CassandraServer.java,888,List<Token> tokens = StorageService.instance.getSplits(state().getKeyspace(), cfName, new Range<Token>(tf.fromString(start_token), tf.fromString(end_token)), keys_per_split);
src/java/org/apache/cassandra/thrift/CassandraServer.java,889,List<String> splits = new ArrayList<String>(tokens.size());
src/java/org/apache/cassandra/thrift/CassandraServer.java,892,splits.add(tf.toString(token));
src/java/org/apache/cassandra/thrift/CassandraServer.java,894,return splits;
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,479,totalRead++;
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,132,assert decoratedKey != null : "Keys must not be null";
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,133,assert decoratedKey.key.remaining() > 0 : "Keys must not be empty";
src/java/org/apache/cassandra/cql/jdbc/JdbcDate.java,120,return new Date(ByteBufferUtil.toLong(bytes));
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,891,results = results == null ? overlaps : Sets.union(results, overlaps);
src/java/org/apache/cassandra/config/Config.java,23,import org.apache.cassandra.cache.ConcurrentLinkedHashCacheProvider;
src/java/org/apache/cassandra/config/Config.java,138,public String row_cache_provider = ConcurrentLinkedHashCacheProvider.class.getSimpleName();
src/java/org/apache/cassandra/thrift/CassandraServer.java,676,IPartitioner p = StorageService.getPartitioner();
src/java/org/apache/cassandra/thrift/CassandraServer.java,680,Token.TokenFactory tokenFactory = p.getTokenFactory();
src/java/org/apache/cassandra/thrift/CassandraServer.java,687,bounds = new Bounds<RowPosition>(RowPosition.forKey(range.start_key, p), RowPosition.forKey(range.end_key, p));
src/java/org/apache/cassandra/db/compaction/LeveledCompactionStrategy.java,50,private final LeveledManifest manifest;
src/java/org/apache/cassandra/tools/NodeProbe.java,61,private static final String fmtUrl = "service:jmx:rmi:///jndi/rmi://%s:%d/jmxrmi";
src/java/org/apache/cassandra/utils/ByteBufferUtil.java,124,return string(buffer, UTF_8);
src/java/org/apache/cassandra/utils/ByteBufferUtil.java,138,return string(buffer, position, length, UTF_8);
src/java/org/apache/cassandra/utils/ByteBufferUtil.java,231,return ByteBuffer.wrap(s.getBytes(UTF_8));
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,90,Thread.sleep(100);
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,208,activeClients.decrementAndGet();
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,213,inputTransport.close();
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,218,outputTransport.close();
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,368,return cfLastWrite.keySet();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1324,DecoratedKey dk = new DecoratedKey(partitioner.getToken(ByteBuffer.wrap(key.getBytes())), ByteBuffer.wrap(key.getBytes()));
src/java/org/apache/cassandra/service/StorageService.java,512,FBUtilities.waitOnFutures(flushes);
src/java/org/apache/cassandra/db/DataTracker.java,469,int count = 0;
src/java/org/apache/cassandra/db/DataTracker.java,472,sum += sstable.getEstimatedColumnCount().mean();
src/java/org/apache/cassandra/db/DataTracker.java,473,count++;
src/java/org/apache/cassandra/service/MigrationManager.java,59,public class MigrationManager implements IEndpointStateChangeSubscriber
src/java/org/apache/cassandra/service/MigrationManager.java,73,return;
src/java/org/apache/cassandra/service/StorageService.java,368,Gossiper.instance.unregister(migrationManager);
src/java/org/apache/cassandra/service/StorageService.java,544,Gossiper.instance.register(migrationManager);
src/java/org/apache/cassandra/streaming/IncomingStreamReader.java,94,session.finished(remoteFile, reader);
src/java/org/apache/cassandra/streaming/IncomingStreamReader.java,106,private SSTableReader streamIn(DataInput input, PendingFile localFile, PendingFile remoteFile) throws IOException
src/java/org/apache/cassandra/streaming/IncomingStreamReader.java,153,return writer.closeAndOpenReader();
src/java/org/apache/cassandra/streaming/StreamInSession.java,52,private final List<SSTableReader> readers = new ArrayList<SSTableReader>();
src/java/org/apache/cassandra/streaming/StreamInSession.java,130,public void finished(PendingFile remoteFile, SSTableReader reader) throws IOException
src/java/org/apache/cassandra/streaming/StreamInSession.java,135,assert reader != null;
src/java/org/apache/cassandra/streaming/StreamInSession.java,136,readers.add(reader);
src/java/org/apache/cassandra/net/OutboundTcpConnection.java,36,import org.apache.cassandra.config.DatabaseDescriptor;
src/java/org/apache/cassandra/gms/FailureDetector.java,259,private final double MAX_INTERVAL_IN_MS = DatabaseDescriptor.getRpcTimeout();
src/java/org/apache/cassandra/net/MessagingService.java,515,public void waitForStreaming() throws InterruptedException
src/java/org/apache/cassandra/net/MessagingService.java,520,e.shutdown();
src/java/org/apache/cassandra/service/StorageService.java,2688,setMode(Mode.DRAINING, "waiting for streaming", false);
src/java/org/apache/cassandra/service/StorageService.java,2689,MessagingService.instance().waitForStreaming();
src/java/org/apache/cassandra/service/StorageService.java,1899,return table.getColumnFamilyStores();
src/java/org/apache/cassandra/service/StorageService.java,1902,Set<ColumnFamilyStore> valid = new HashSet<ColumnFamilyStore>();
src/java/org/apache/cassandra/service/StorageService.java,1048,case STATUS:
src/java/org/apache/cassandra/service/StorageService.java,1049,String apStateValue = value.value;
src/java/org/apache/cassandra/service/StorageService.java,1050,String[] pieces = apStateValue.split(VersionedValue.DELIMITER_STR, -1);
src/java/org/apache/cassandra/service/StorageService.java,1051,assert (pieces.length > 0);
src/java/org/apache/cassandra/service/StorageService.java,1053,String moveName = pieces[0];
src/java/org/apache/cassandra/service/StorageService.java,1056,handleStateBootstrap(endpoint, pieces);
src/java/org/apache/cassandra/service/StorageService.java,1058,handleStateNormal(endpoint, pieces);
src/java/org/apache/cassandra/service/StorageService.java,1060,handleStateRemoving(endpoint, pieces);
src/java/org/apache/cassandra/service/StorageService.java,1062,handleStateLeaving(endpoint, pieces);
src/java/org/apache/cassandra/service/StorageService.java,1064,handleStateLeft(endpoint, pieces);
src/java/org/apache/cassandra/service/StorageService.java,1066,handleStateMoving(endpoint, pieces);
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,102,endpoints = new ArrayList<InetAddress>(calculateNaturalEndpoints(searchToken, tokenMetadataClone));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,906,writeColumnsFromBag(key, (DefaultDataBag) t.get(1));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,918,writeColumnsFromBag(key, (DefaultDataBag) t.get(i));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,962,private void writeColumnsFromBag(ByteBuffer key, DefaultDataBag bag) throws IOException
src/java/org/apache/cassandra/cache/AutoSavingCache.java,291,logger.warn("Failed to delete {}", file.getAbsolutePath());
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,63,this.tokenMetadata.register(this);
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,72,return cachedEndpoints.get(t);
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,77,cachedEndpoints.put(t, addr);
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,82,logger.debug("clearing cached endpoints");
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,83,cachedEndpoints.clear();
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,100,TokenMetadata tokenMetadataClone = tokenMetadata.cloneOnlyTokenMap();
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,101,keyToken = TokenMetadata.firstToken(tokenMetadataClone.sortedTokens(), searchToken);
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,103,cacheEndpoint(keyToken, endpoints);
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,193,clearEndpointCache();
src/java/org/apache/cassandra/locator/TokenMetadata.java,25,import java.util.concurrent.CopyOnWriteArrayList;
src/java/org/apache/cassandra/locator/TokenMetadata.java,30,import org.apache.cassandra.utils.Pair;
src/java/org/apache/cassandra/locator/TokenMetadata.java,85,private final CopyOnWriteArrayList<AbstractReplicationStrategy> subscribers = new CopyOnWriteArrayList<AbstractReplicationStrategy>();
src/java/org/apache/cassandra/locator/TokenMetadata.java,265,invalidateCaches();
src/java/org/apache/cassandra/locator/TokenMetadata.java,293,invalidateCaches();
src/java/org/apache/cassandra/locator/TokenMetadata.java,695,subscriber.invalidateCachedTokenEndpointValues();
src/java/org/apache/cassandra/locator/TokenMetadata.java,701,subscribers.add(subscriber);
src/java/org/apache/cassandra/locator/TokenMetadata.java,706,subscribers.remove(subscriber);
src/java/org/apache/cassandra/gms/FailureDetector.java,172,heartbeatWindow.add(now);
src/java/org/apache/cassandra/gms/FailureDetector.java,254,private final double PHI_FACTOR = 1.0 / Math.log(10.0);
src/java/org/apache/cassandra/gms/FailureDetector.java,268,double interArrivalTime;
src/java/org/apache/cassandra/gms/FailureDetector.java,275,interArrivalTime = Gossiper.intervalInMillis / 2;
src/java/org/apache/cassandra/gms/FailureDetector.java,279,else
src/java/org/apache/cassandra/gms/FailureDetector.java,321,: 0.0;
src/java/org/apache/cassandra/db/SystemTable.java,428,forceBlockingFlush(INDEX_CF);
src/java/org/apache/cassandra/utils/FBUtilities.java,434,throw new ConfigurationException(String.format("Unable to find %s class '%s'", readable, classname));
src/java/org/apache/cassandra/db/HintedHandOffManager.java,235,while (!gossiper.getEndpointStateForEndpoint(endpoint).getApplicationState(ApplicationState.SCHEMA).value.equals(
src/java/org/apache/cassandra/service/StorageService.java,635,try
src/java/org/apache/cassandra/service/StorageService.java,639,Thread.sleep(LoadBroadcaster.BROADCAST_INTERVAL);
src/java/org/apache/cassandra/service/StorageService.java,643,throw new AssertionError(e);
src/java/org/apache/cassandra/db/commitlog/CommitLogAllocator.java,306,String keypace = Schema.instance.getCF(dirtyCFId).left;
src/java/org/apache/cassandra/db/commitlog/CommitLogAllocator.java,307,final ColumnFamilyStore cfs = Table.open(keypace).getColumnFamilyStore(dirtyCFId);
src/java/org/apache/cassandra/db/commitlog/CommitLogAllocator.java,315,cfs.forceFlush();
src/java/org/apache/cassandra/db/commitlog/CommitLogAllocator.java,318,StorageService.optionalTasks.execute(runnable);
src/java/org/apache/cassandra/db/commitlog/CommitLogReplayer.java,21,import java.io.DataInputStream;
src/java/org/apache/cassandra/db/commitlog/CommitLogReplayer.java,22,import java.io.EOFException;
src/java/org/apache/cassandra/db/commitlog/CommitLogReplayer.java,23,import java.io.File;
src/java/org/apache/cassandra/db/commitlog/CommitLogReplayer.java,24,import java.io.IOException;
src/java/org/apache/cassandra/db/DataTracker.java,295,postReplace(notCompacting, Collections.<SSTableReader>emptySet());
src/java/org/apache/cassandra/db/DataTracker.java,312,removeOldSSTablesSize(replacements);
src/java/org/apache/cassandra/db/DataTracker.java,324,postReplace(oldSSTables, replacements);
src/java/org/apache/cassandra/db/DataTracker.java,330,removeOldSSTablesSize(oldSSTables);
src/java/org/apache/cassandra/db/DataTracker.java,357,assert firstToCompact : sstable + " was already marked compacted";
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,135,CfDef cfDef = getCfDef(loadSignature);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,155,bag.add(columnToTuple(entry.getValue(), cfDef, parseType(cfDef.getComparator_type())));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,190,bag.add(columnToTuple(entry.getValue(), cfDef, parseType(cfDef.getComparator_type())));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,204,bag.add(columnToTuple(entry.getValue(), cfDef, parseType(cfDef.getComparator_type())));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,211,bag.add(columnToTuple(entry.getValue(), cfDef, parseType(cfDef.getComparator_type())));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,232,CfDef cfDef = getCfDef(loadSignature);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,250,tuple.append(columnToTuple(cf.get(cdef.name), cfDef, parseType(cfDef.getComparator_type())));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,252,else
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,262,bag.add(columnToTuple(entry.getValue(), cfDef, parseType(cfDef.getComparator_type())));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,270,Tuple throwaway = columnToTuple(cf.get(cdef.name), cfDef, parseType(cfDef.getComparator_type()));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,593,CfDef cfDef = getCfDef(loadSignature);
src/java/org/apache/cassandra/dht/BootStrapper.java,59,private static final long BOOTSTRAP_TIMEOUT = 30000; // default bootstrap timeout of 30s
src/java/org/apache/cassandra/dht/BootStrapper.java,187,MessagingService.instance().sendRR(message, maxEndpoint, btc, timeout);
src/java/org/apache/cassandra/dht/BootStrapper.java,188,Token token = btc.getToken(timeout);
src/java/org/apache/cassandra/net/MessagingService.java,390,String id = addCallback(cb, message, to, timeout);
src/java/org/apache/cassandra/locator/TokenMetadata.java,532,return leavingEndpoints;
src/java/org/apache/cassandra/locator/TokenMetadata.java,541,return movingEndpoints;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,1092,throw new RuntimeException(e);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,1107,throw new RuntimeException(e);
src/java/org/apache/cassandra/gms/Gossiper.java,241,Set<InetAddress> liveMbrs = new HashSet<InetAddress>(liveEndpoints);
src/java/org/apache/cassandra/gms/Gossiper.java,243,liveMbrs.add(FBUtilities.getBroadcastAddress());
src/java/org/apache/cassandra/gms/Gossiper.java,244,return liveMbrs;
src/java/org/apache/cassandra/service/StorageProxy.java,29,import java.util.concurrent.atomic.AtomicLong;
src/java/org/apache/cassandra/service/StorageProxy.java,1205,Set<InetAddress> allEndpoints = Gossiper.instance.getLiveMembers();
src/java/org/apache/cassandra/db/Directories.java,114,File path = getLocationWithMaximumAvailableSpace(estimatedSize);
src/java/org/apache/cassandra/db/Directories.java,134,path = getLocationWithMaximumAvailableSpace(estimatedSize);
src/java/org/apache/cassandra/db/Directories.java,148,long maxFreeDisk = 0;
src/java/org/apache/cassandra/db/Directories.java,149,File maxLocation = null;
src/java/org/apache/cassandra/db/Directories.java,156,maxLocation = dir;
src/java/org/apache/cassandra/db/Directories.java,160,maxFreeDisk = (long) (0.9 * maxFreeDisk);
src/java/org/apache/cassandra/db/Directories.java,161,logger.debug(String.format("expected data files size is %d; largest free partition (%s) has %d bytes free",
src/java/org/apache/cassandra/db/Directories.java,162,estimatedSize, maxLocation, maxFreeDisk));
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,548,File compactionFileLocation = cfs.directories.getDirectoryForNewSSTables(expectedRangeFileSize);
src/java/org/apache/cassandra/db/compaction/Scrubber.java,81,this.destination = cfs.directories.getDirectoryForNewSSTables(sstable.onDiskLength());
src/java/org/apache/cassandra/db/commitlog/CommitLogArchiver.java,80,restorePointInTime = Strings.isNullOrEmpty(targetTime) ? Long.MAX_VALUE : new SimpleDateFormat("yyyy:MM:dd HH:mm:ss").parse(targetTime).getTime();
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,64,wlen = bits2words(numBits);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,464,public static int bits2words(long numBits) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,465,return (int)(((numBits-1)>>>6)+1);
src/java/org/apache/cassandra/db/SystemTable.java,294,throw new ConfigurationException("Found system table files, but they couldn't be loaded!");
src/java/org/apache/cassandra/db/SystemTable.java,303,return;
src/java/org/apache/cassandra/tools/StandaloneScrubber.java,71,OutputHandler handler = new OutputHandler.SystemOutput(options.verbose, options.debug);
src/java/org/apache/cassandra/gms/Gossiper.java,554,int size = epSet.size();
src/java/org/apache/cassandra/gms/Gossiper.java,558,List<InetAddress> liveEndpoints = new ArrayList<InetAddress>(epSet);
src/java/org/apache/cassandra/dht/OrderPreservingPartitioner.java,170,throw new RuntimeException("The provided key was not UTF8 encoded.", e);
src/java/org/apache/cassandra/io/sstable/SSTableSimpleUnsortedWriter.java,74,super(directory, new CFMetaData(keyspace, columnFamily, subComparator == null ? ColumnFamilyType.Standard : ColumnFamilyType.Super, comparator, subComparator).compressionParameters(compressParameters), partitioner);
src/java/org/apache/cassandra/io/sstable/SSTableSimpleUnsortedWriter.java,75,this.bufferSize = bufferSizeInMB * 1024L * 1024L;
src/java/org/apache/cassandra/io/sstable/SSTableSimpleUnsortedWriter.java,76,this.diskWriter.start();
src/java/org/apache/cassandra/db/DefsTable.java,49,import org.apache.cassandra.utils.FBUtilities;
src/java/org/apache/cassandra/db/DefsTable.java,608,flushSchemaCF(SystemTable.SCHEMA_KEYSPACES_CF);
src/java/org/apache/cassandra/db/DefsTable.java,609,flushSchemaCF(SystemTable.SCHEMA_COLUMNFAMILIES_CF);
src/java/org/apache/cassandra/db/DefsTable.java,610,flushSchemaCF(SystemTable.SCHEMA_COLUMNS_CF);
src/java/org/apache/cassandra/db/SystemTable.java,217,try
src/java/org/apache/cassandra/db/SystemTable.java,223,throw new RuntimeException(e);
src/java/org/apache/cassandra/db/SystemTable.java,227,throw new AssertionError(e);
src/java/org/apache/cassandra/cli/CliMain.java,282,return;
src/java/org/apache/cassandra/cli/CliMain.java,285,evaluateFileStatements(new BufferedReader(fileReader));
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,245,partitioner = FBUtilities.newPartitioner(client.describe_partitioner());
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,249,KsDef ks_def = client.describe_keyspace(keyspace);
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,250,List<String> cfnames = new ArrayList<String>();
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,252,cfnames.add(cfd.name);
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,253,int idx = cfnames.indexOf(cfName);
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,254,CfDef cf_def = ks_def.cf_defs.get(idx);
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,256,comparator = TypeParser.parse(cf_def.comparator_type);
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,257,subComparator = cf_def.subcomparator_type == null ? null : TypeParser.parse(cf_def.subcomparator_type);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,20,import java.math.BigInteger;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,36,import org.apache.cassandra.db.Column;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,39,import org.apache.cassandra.db.marshal.AbstractCompositeType.CompositeComponent;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,46,import org.apache.hadoop.conf.Configuration;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,47,import org.apache.hadoop.fs.Path;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,50,import org.apache.pig.*;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,51,import org.apache.pig.backend.executionengine.ExecException;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,65,public class CassandraStorage extends LoadFunc implements StoreFuncInterface, LoadMetadata
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,69,public final static String PIG_INPUT_RPC_PORT = "PIG_INPUT_RPC_PORT";
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,70,public final static String PIG_INPUT_INITIAL_ADDRESS = "PIG_INPUT_INITIAL_ADDRESS";
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,71,public final static String PIG_INPUT_PARTITIONER = "PIG_INPUT_PARTITIONER";
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,72,public final static String PIG_OUTPUT_RPC_PORT = "PIG_OUTPUT_RPC_PORT";
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,73,public final static String PIG_OUTPUT_INITIAL_ADDRESS = "PIG_OUTPUT_INITIAL_ADDRESS";
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,74,public final static String PIG_OUTPUT_PARTITIONER = "PIG_OUTPUT_PARTITIONER";
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,75,public final static String PIG_RPC_PORT = "PIG_RPC_PORT";
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,76,public final static String PIG_INITIAL_ADDRESS = "PIG_INITIAL_ADDRESS";
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,77,public final static String PIG_PARTITIONER = "PIG_PARTITIONER";
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,78,public final static String PIG_INPUT_FORMAT = "PIG_INPUT_FORMAT";
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,79,public final static String PIG_OUTPUT_FORMAT = "PIG_OUTPUT_FORMAT";
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,84,private final static String DEFAULT_INPUT_FORMAT = "org.apache.cassandra.hadoop.ColumnFamilyInputFormat";
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,85,private final static String DEFAULT_OUTPUT_FORMAT = "org.apache.cassandra.hadoop.ColumnFamilyOutputFormat";
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,96,private String keyspace;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,97,private String column_family;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,98,private String loadSignature;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,99,private String storeSignature;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,101,private Configuration conf;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,104,private String inputFormatClass;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,105,private String outputFormatClass;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,106,private int limit;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,285,private Tuple composeComposite( AbstractCompositeType comparator, ByteBuffer name ) throws IOException
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,287,List<CompositeComponent> result = comparator.deconstruct( name );
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,289,Tuple t = TupleFactory.getInstance().newTuple( result.size() );
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,293,setTupleValue( t, i, result.get(i).comparator.compose( result.get(i).value ) );
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,296,return t;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,304,setTupleValue(tuple, 0, composeComposite((AbstractCompositeType)comparator,key));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,306,else
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,313,private Tuple columnToTuple(IColumn col, CfDef cfDef, AbstractType comparator) throws IOException
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,315,Tuple pair = TupleFactory.getInstance().newTuple(2);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,319,setTupleValue(pair, 0, composeComposite((AbstractCompositeType)comparator,col.name()));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,321,else
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,323,setTupleValue(pair, 0, comparator.compose(col.name()));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,329,Map<ByteBuffer,AbstractType> validators = getValidatorMap(cfDef);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,333,else
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,334,setTupleValue(pair, 1, validators.get(col.name()).compose(col.value()));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,335,return pair;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,337,else
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,340,ArrayList<Tuple> subcols = new ArrayList<Tuple>();
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,342,subcols.add(columnToTuple(subcol, cfDef, parseType(cfDef.getSubcomparator_type())));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,344,pair.set(1, new DefaultDataBag(subcols));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,346,return pair;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,349,private void setTupleValue(Tuple pair, int position, Object value) throws ExecException
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,352,pair.set(position, ((BigInteger) value).intValue());
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,354,pair.set(position, new DataByteArray(ByteBufferUtil.getArray((ByteBuffer) value)));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,356,pair.set(position, new DataByteArray(UUIDGen.decompose((java.util.UUID) value)));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,358,pair.set(position, DateType.instance.decompose((Date) value).getLong());
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,359,else
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,360,pair.set(position, value);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,365,UDFContext context = UDFContext.getUDFContext();
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,366,Properties property = context.getUDFProperties(CassandraStorage.class);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,367,return cfdefFromString(property.getProperty(signature));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,372,UDFContext context = UDFContext.getUDFContext();
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,373,Properties property = context.getUDFProperties(CassandraStorage.class);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,375,return indexExpressionsFromString(property.getProperty(PARTITION_FILTER_SIGNATURE));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,376,else
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,377,return null;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,383,AbstractType comparator;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,384,AbstractType subcomparator;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,385,AbstractType default_validator;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,386,AbstractType key_validator;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,388,comparator = parseType(cfDef.getComparator_type());
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,389,subcomparator = parseType(cfDef.getSubcomparator_type());
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,390,default_validator = parseType(cfDef.getDefault_validation_class());
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,391,key_validator = parseType(cfDef.getKey_validation_class());
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,397,return marshallers;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,400,private Map<ByteBuffer, AbstractType> getValidatorMap(CfDef cfDef) throws IOException
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,402,Map<ByteBuffer, AbstractType> validators = new HashMap<ByteBuffer, AbstractType>();
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,407,AbstractType validator = null;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,408,try
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,410,validator = TypeParser.parse(cd.getValidation_class());
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,411,validators.put(cd.name, validator);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,415,throw new IOException(e);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,419,return validators;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,422,private AbstractType parseType(String type) throws IOException
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,424,try
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,428,return LongType.instance;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,429,return TypeParser.parse(type);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,433,throw new IOException(e);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,440,try
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,442,return FBUtilities.construct(inputFormatClass, "inputformat");
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,446,throw new RuntimeException(e);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,453,this.reader = reader;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,458,String[] params = query.split("&");
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,459,Map<String, String> map = new HashMap<String, String>();
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,462,String[] keyValue = param.split("=");
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,463,map.put(keyValue[0], keyValue[1]);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,465,return map;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,468,private void setLocationFromUri(String location) throws IOException
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,472,try
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,475,throw new Exception("Bad scheme.");
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,476,String[] urlParts = location.split("\\?");
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,479,Map<String, String> urlQuery = getQueryMap(urlParts[1]);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,480,AbstractType comparator = BytesType.instance;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,482,comparator = TypeParser.parse(urlQuery.get("comparator"));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,484,slice_start = comparator.fromString(urlQuery.get("slice_start"));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,486,slice_end = comparator.fromString(urlQuery.get("slice_end"));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,488,slice_reverse = Boolean.parseBoolean(urlQuery.get("reversed"));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,490,limit = Integer.parseInt(urlQuery.get("limit"));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,492,allow_deletes = Boolean.parseBoolean(urlQuery.get("allow_deletes"));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,494,widerows = Boolean.parseBoolean(urlQuery.get("widerows"));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,496,usePartitionFilter = Boolean.parseBoolean(urlQuery.get("use_secondary"));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,498,String[] parts = urlParts[0].split("/+");
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,500,column_family = parts[2];
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,508,private void setConnectionInformation() throws IOException
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,512,ConfigHelper.setInputRpcPort(conf, System.getenv(PIG_RPC_PORT));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,513,ConfigHelper.setOutputRpcPort(conf, System.getenv(PIG_RPC_PORT));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,517,ConfigHelper.setInputRpcPort(conf, System.getenv(PIG_INPUT_RPC_PORT));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,519,ConfigHelper.setOutputRpcPort(conf, System.getenv(PIG_OUTPUT_RPC_PORT));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,523,ConfigHelper.setInputInitialAddress(conf, System.getenv(PIG_INITIAL_ADDRESS));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,524,ConfigHelper.setOutputInitialAddress(conf, System.getenv(PIG_INITIAL_ADDRESS));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,527,ConfigHelper.setInputInitialAddress(conf, System.getenv(PIG_INPUT_INITIAL_ADDRESS));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,529,ConfigHelper.setOutputInitialAddress(conf, System.getenv(PIG_OUTPUT_INITIAL_ADDRESS));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,533,ConfigHelper.setInputPartitioner(conf, System.getenv(PIG_PARTITIONER));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,534,ConfigHelper.setOutputPartitioner(conf, System.getenv(PIG_PARTITIONER));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,537,ConfigHelper.setInputPartitioner(conf, System.getenv(PIG_INPUT_PARTITIONER));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,539,ConfigHelper.setOutputPartitioner(conf, System.getenv(PIG_OUTPUT_PARTITIONER));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,541,inputFormatClass = getFullyQualifiedClassName(System.getenv(PIG_INPUT_FORMAT));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,542,else
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,543,inputFormatClass = DEFAULT_INPUT_FORMAT;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,545,outputFormatClass = getFullyQualifiedClassName(System.getenv(PIG_OUTPUT_FORMAT));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,546,else
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,547,outputFormatClass = DEFAULT_OUTPUT_FORMAT;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,554,return classname.contains(".") ? classname : "org.apache.cassandra.hadoop." + classname;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,644,ResourceSchema innerTupleSchema = new ResourceSchema();
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,645,ResourceFieldSchema innerTupleField = new ResourceFieldSchema();
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,646,innerTupleField.setType(DataType.TUPLE);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,647,innerTupleField.setSchema(innerTupleSchema);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,648,innerTupleField.setName(new String(cdef.getName()));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,650,ResourceFieldSchema idxColSchema = new ResourceFieldSchema();
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,651,idxColSchema.setName("name");
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,654,ResourceFieldSchema valSchema = new ResourceFieldSchema();
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,655,AbstractType validator = validators.get(cdef.name);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,658,valSchema.setName("value");
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,659,valSchema.setType(getPigType(validator));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,661,innerTupleSchema.setFields(new ResourceFieldSchema[] { idxColSchema, valSchema });
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,662,allSchemaFields.add(innerTupleField);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,688,if (type instanceof LongType || type instanceof DateType) // DateType is bad and it should feel bad
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,689,return DataType.LONG;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,690,else if (type instanceof IntegerType || type instanceof Int32Type) // IntegerType will overflow at 2**31, but is kept for compatibility until pig has a BigInteger
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,691,return DataType.INTEGER;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,693,return DataType.CHARARRAY;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,695,return DataType.CHARARRAY;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,697,return DataType.FLOAT;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,699,return DataType.DOUBLE;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,701,return DataType.TUPLE;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,703,return DataType.BYTEARRAY;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,708,return null;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,727,Properties property = context.getUDFProperties(CassandraStorage.class);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,733,List<IndexExpression> indexExpressions = new ArrayList<IndexExpression>();
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,734,Expression.BinaryExpression be = (Expression.BinaryExpression)expression;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,735,ByteBuffer name = ByteBuffer.wrap(be.getLhs().toString().getBytes());
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,736,ByteBuffer value = ByteBuffer.wrap(be.getRhs().toString().getBytes());
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,739,case OP_EQ:
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,740,indexExpressions.add(new IndexExpression(name, IndexOperator.EQ, value));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,741,break;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,742,case OP_GE:
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,743,indexExpressions.add(new IndexExpression(name, IndexOperator.GTE, value));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,744,break;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,745,case OP_GT:
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,746,indexExpressions.add(new IndexExpression(name, IndexOperator.GT, value));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,747,break;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,748,case OP_LE:
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,749,indexExpressions.add(new IndexExpression(name, IndexOperator.LTE, value));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,750,break;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,751,case OP_LT:
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,752,indexExpressions.add(new IndexExpression(name, IndexOperator.LT, value));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,753,break;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,754,case OP_AND:
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,755,indexExpressions.addAll(filterToIndexExpressions(be.getLhs()));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,756,indexExpressions.addAll(filterToIndexExpressions(be.getRhs()));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,757,break;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,758,default:
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,759,throw new RuntimeException("Unsupported expression type: " + expression.getOpType().name());
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,761,return indexExpressions;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,766,CfDef cfdef = getCfDef(loadSignature);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,767,List<ColumnDef> indexes = new ArrayList<ColumnDef>();
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,771,indexes.add(cdef);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,773,return indexes;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,777,public String relativeToAbsolutePath(String location, Path curDir) throws IOException
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,779,return location;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,785,this.loadSignature = signature;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,791,this.storeSignature = signature;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,794,public String relToAbsPathForStoreLocation(String location, Path curDir) throws IOException
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,796,return relativeToAbsolutePath(location, curDir);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,799,public void setStoreLocation(String location, Job job) throws IOException
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,801,conf = job.getConfiguration();
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,802,setLocationFromUri(location);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,803,ConfigHelper.setOutputColumnFamily(conf, keyspace, column_family);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,804,setConnectionInformation();
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,807,throw new IOException("PIG_OUTPUT_RPC_PORT or PIG_RPC_PORT environment variable not set");
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,809,throw new IOException("PIG_OUTPUT_INITIAL_ADDRESS or PIG_INITIAL_ADDRESS environment variable not set");
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,811,throw new IOException("PIG_OUTPUT_PARTITIONER or PIG_PARTITIONER environment variable not set");
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,815,usePartitionFilter = Boolean.valueOf(System.getenv(PIG_USE_SECONDARY));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,817,initSchema(storeSignature);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,822,try
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,824,return FBUtilities.construct(outputFormatClass, "outputformat");
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,828,throw new RuntimeException(e);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,832,public void checkSchema(ResourceSchema schema) throws IOException
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,845,return (ByteBuffer)o;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,847,return ByteBuffer.wrap(new DataByteArray((String)o).get());
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,849,return Int32Type.instance.decompose((Integer)o);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,851,return LongType.instance.decompose((Long)o);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,853,return FloatType.instance.decompose((Float)o);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,855,return DoubleType.instance.decompose((Double)o);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,857,return ByteBuffer.wrap(UUIDGen.decompose((UUID) o));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,858,if(o instanceof Tuple) {
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,859,List<Object> objects = ((Tuple)o).getAll();
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,860,List<ByteBuffer> serialized = new ArrayList<ByteBuffer>(objects.size());
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,861,int totalLength = 0;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,864,ByteBuffer buffer = objToBB(sub);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,865,serialized.add(buffer);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,866,totalLength += 2 + buffer.remaining() + 1;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,868,ByteBuffer out = ByteBuffer.allocate(totalLength);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,871,int length = bb.remaining();
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,872,out.put((byte) ((length >> 8) & 0xFF));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,873,out.put((byte) (length & 0xFF));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,874,out.put(bb);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,875,out.put((byte) 0);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,877,out.flip();
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,878,return out;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,881,return ByteBuffer.wrap(((DataByteArray) o).get());
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,1042,try
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,1047,KsDef ksDef = client.describe_keyspace(keyspace);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,1048,List<CfDef> defs = ksDef.getCf_defs();
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,1053,cfDef = def;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,1054,break;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,1059,else
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,1064,throw new RuntimeException(e);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,1068,throw new RuntimeException(e);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,1072,throw new RuntimeException(e);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,1076,throw new RuntimeException(e);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,1083,assert cfDef != null;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,1088,return Hex.bytesToHex(serializer.serialize(cfDef));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,1098,assert st != null;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,1100,CfDef cfDef = new CfDef();
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,1103,deserializer.deserialize(cfDef, Hex.hexToBytes(st));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,1109,return cfDef;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,1114,assert indexExpressions != null;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,1116,IndexClause indexClause = new IndexClause();
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,1117,indexClause.setExpressions(indexExpressions);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,1118,indexClause.setStart_key("".getBytes());
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,1119,TSerializer serializer = new TSerializer(new TBinaryProtocol.Factory());
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,1120,try
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,1122,return Hex.bytesToHex(serializer.serialize(indexClause));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,1126,throw new RuntimeException(e);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,1132,assert ie != null;
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,1133,TDeserializer deserializer = new TDeserializer(new TBinaryProtocol.Factory());
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,1134,IndexClause indexClause = new IndexClause();
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,1137,deserializer.deserialize(indexClause, Hex.hexToBytes(ie));
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,1141,throw new RuntimeException(e);
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,1143,return indexClause.getExpressions();
src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java,46,public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor
src/java/org/apache/cassandra/net/MessagingService.java,30,import java.util.concurrent.ExecutorService;
src/java/org/apache/cassandra/net/MessagingService.java,62,import org.cliffc.high_scale_lib.NonBlockingHashMap;
src/java/org/apache/cassandra/net/MessagingService.java,564,ExecutorService stage = StageManager.getStage(message.getMessageType());
src/java/org/apache/cassandra/net/MessagingService.java,566,stage.execute(runnable);
src/java/org/apache/cassandra/service/MigrationManager.java,29,import java.util.concurrent.ExecutionException;
src/java/org/apache/cassandra/service/MigrationManager.java,30,import java.util.concurrent.Future;
src/java/org/apache/cassandra/service/MigrationManager.java,116,return StageManager.getStage(Stage.MIGRATION).getActiveCount() == 0;
src/java/org/apache/cassandra/service/StorageProxy.java,210,List<String> mstrings = new ArrayList<String>(mutations.size());
src/java/org/apache/cassandra/service/StorageProxy.java,212,mstrings.add(mutation.toString(true));
src/java/org/apache/cassandra/service/StorageProxy.java,347,sendMessages(localDataCenter, dcMessages, responseHandler);
src/java/org/apache/cassandra/tools/NodeCmd.java,839,probe.getCompactionThreshold(System.out, arguments[0], arguments[1]);
src/java/org/apache/cassandra/tools/NodeProbe.java,429,ColumnFamilyStoreMBean cfsProxy = getCfsProxy(ks, cf);
src/java/org/apache/cassandra/tools/NodeProbe.java,430,outs.println("Current compaction thresholds for " + ks + "/" + cf + ": \n" +
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,135,assert partitioner.preservesOrder() : "ConfigHelper.setInputKeyRange(..) can only be used with a order preserving paritioner";
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,136,assert jobKeyRange.start_key == null : "only start_token supported";
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,137,assert jobKeyRange.end_key == null : "only end_token supported";
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,138,jobRange = new Range<Token>(partitioner.getTokenFactory().fromString(jobKeyRange.start_token),
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,139,partitioner.getTokenFactory().fromString(jobKeyRange.end_token),
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,140,partitioner);
src/java/org/apache/cassandra/tools/NodeCmd.java,991,System.out.print("Requested snapshot for: ");
src/java/org/apache/cassandra/db/compaction/LeveledManifest.java,76,int n = (int) Math.log10(1000 * 1000 * 1000 / maxSSTableSizeInMB);
src/java/org/apache/cassandra/db/commitlog/CommitLogReplayer.java,47,import org.apache.cassandra.utils.ByteBufferUtil;
src/java/org/apache/cassandra/db/commitlog/CommitLogReplayer.java,48,import org.apache.cassandra.utils.FBUtilities;
src/java/org/apache/cassandra/db/commitlog/CommitLogReplayer.java,49,import org.apache.cassandra.utils.PureJavaCrc32;
src/java/org/apache/cassandra/db/commitlog/CommitLogReplayer.java,50,import org.apache.cassandra.utils.WrappedRunnable;
src/java/org/apache/cassandra/db/commitlog/BatchCommitLogExecutorService.java,84,long end = System.nanoTime() + (long)(1000000 * DatabaseDescriptor.getCommitLogSyncBatchWindow());
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1286,assert !key.isMinimum();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1287,DataTracker.View view;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1288,List<SSTableReader> sstables;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1291,view = data.getView();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1294,break;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1297,return new ViewFragment(sstables, Iterables.concat(Collections.singleton(view.memtable), view.memtablesPendingFlush));
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1306,DataTracker.View view;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1370,final ViewFragment view = markReferenced(startWith, stopAt);
src/java/org/apache/cassandra/streaming/StreamingRepairTask.java,120,Collection<SSTableReader> sstables = cfstore.markCurrentSSTablesReferenced();
src/java/org/apache/cassandra/streaming/StreamingRepairTask.java,123,StreamOut.transferSSTables(outsession, sstables, ranges, OperationType.AES);
src/java/org/apache/cassandra/streaming/StreamingRepairTask.java,125,StreamIn.requestRanges(dst, tableName, Collections.singleton(cfstore), ranges, callback, OperationType.AES);
src/java/org/apache/cassandra/dht/BytesToken.java,45,return "Token(bytes[" + Hex.bytesToHex(token) + "])";
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,122,new Object[] {cfs.table.name,
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,123,cfs.columnFamily,
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,124,cfs.getCompactionStrategy().getClass().getSimpleName()});
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,553,long rowsRead = 0;
src/java/org/apache/cassandra/service/AntiEntropyService.java,687,logger.info(String.format("[repair #%s] Cannot repair using snapshots as node %s is pre-1.1", getName(), endpoint));
src/java/org/apache/cassandra/service/AntiEntropyService.java,688,return;
src/java/org/apache/cassandra/cache/CacheKey.java,27,public interface CacheKey
src/java/org/apache/cassandra/cache/ConcurrentLinkedHashCache.java,32,public class ConcurrentLinkedHashCache<K, V> implements ICache<K, V>
src/java/org/apache/cassandra/cache/IRowCacheEntry.java,20,public interface IRowCacheEntry
src/java/org/apache/cassandra/db/index/SecondaryIndexManager.java,23,import java.util.concurrent.ConcurrentNavigableMap;
src/java/org/apache/cassandra/db/index/SecondaryIndexManager.java,24,import java.util.concurrent.ConcurrentSkipListMap;
src/java/org/apache/cassandra/db/index/SecondaryIndexManager.java,25,import java.util.concurrent.ExecutionException;
src/java/org/apache/cassandra/db/index/SecondaryIndexManager.java,26,import java.util.concurrent.Future;
src/java/org/apache/cassandra/io/sstable/IndexHelper.java,45,public static void skipBloomFilter(DataInput in) throws IOException
src/java/org/apache/cassandra/io/sstable/IndexHelper.java,52,FileUtils.skipBytesFully(in, size);
src/java/org/apache/cassandra/io/sstable/IndexHelper.java,54,else
src/java/org/apache/cassandra/io/sstable/IndexHelper.java,57,byte[] skip = new byte[size];
src/java/org/apache/cassandra/io/sstable/IndexHelper.java,58,in.readFully(skip);
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,206,ColumnFamily cf = null;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,212,cf = thisCF;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,214,else
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,40,import org.apache.cassandra.utils.HeapAllocator;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,106,ColumnFamily cf = null;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,109,ColumnFamily thisCF;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,121,cf = thisCF;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,123,else
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,129,return cf;
examples/client_only/src/ClientOnlyExample.java,22,import org.apache.cassandra.db.*;
examples/client_only/src/ClientOnlyExample.java,23,import org.apache.cassandra.db.filter.QueryPath;
examples/client_only/src/ClientOnlyExample.java,24,import org.apache.cassandra.service.StorageProxy;
examples/client_only/src/ClientOnlyExample.java,25,import org.apache.cassandra.service.StorageService;
examples/client_only/src/ClientOnlyExample.java,26,import org.apache.cassandra.thrift.*;
examples/client_only/src/ClientOnlyExample.java,27,import org.apache.cassandra.utils.ByteBufferUtil;
examples/client_only/src/ClientOnlyExample.java,29,import org.apache.thrift.TException;
examples/client_only/src/ClientOnlyExample.java,30,import org.apache.thrift.protocol.TBinaryProtocol;
examples/client_only/src/ClientOnlyExample.java,31,import org.apache.thrift.protocol.TProtocol;
examples/client_only/src/ClientOnlyExample.java,32,import org.apache.thrift.transport.TFramedTransport;
examples/client_only/src/ClientOnlyExample.java,33,import org.apache.thrift.transport.TSocket;
examples/client_only/src/ClientOnlyExample.java,34,import org.apache.thrift.transport.TTransport;
examples/client_only/src/ClientOnlyExample.java,35,import org.apache.thrift.transport.TTransportException;
examples/client_only/src/ClientOnlyExample.java,44,private static final String KEYSPACE = "Keyspace1";
examples/client_only/src/ClientOnlyExample.java,45,private static final String COLUMN_FAMILY = "Standard1";
examples/client_only/src/ClientOnlyExample.java,51,try
examples/client_only/src/ClientOnlyExample.java,53,Thread.sleep(10000L);
examples/client_only/src/ClientOnlyExample.java,57,throw new AssertionError(ex);
examples/client_only/src/ClientOnlyExample.java,66,RowMutation change = new RowMutation(KEYSPACE, ByteBufferUtil.bytes(("key" + i)));
examples/client_only/src/ClientOnlyExample.java,67,ColumnPath cp = new ColumnPath(COLUMN_FAMILY).setColumn(("colb").getBytes());
examples/client_only/src/ClientOnlyExample.java,68,change.add(new QueryPath(cp), ByteBufferUtil.bytes(("value" + i)), 0);
examples/client_only/src/ClientOnlyExample.java,74,StorageProxy.mutate(Arrays.asList(change), ConsistencyLevel.ONE);
examples/client_only/src/ClientOnlyExample.java,85,add(ByteBufferUtil.bytes("colb"));
examples/client_only/src/ClientOnlyExample.java,89,List<ReadCommand> commands = new ArrayList<ReadCommand>();
examples/client_only/src/ClientOnlyExample.java,90,SliceByNamesReadCommand readCommand = new SliceByNamesReadCommand(KEYSPACE, ByteBufferUtil.bytes(("key" + i)),
examples/client_only/src/ClientOnlyExample.java,91,new QueryPath(COLUMN_FAMILY, null, null), cols);
examples/client_only/src/ClientOnlyExample.java,92,readCommand.setDigestQuery(false);
examples/client_only/src/ClientOnlyExample.java,93,commands.add(readCommand);
examples/client_only/src/ClientOnlyExample.java,94,List<Row> rows = StorageProxy.read(commands, ConsistencyLevel.ONE);
examples/client_only/src/ClientOnlyExample.java,96,Row row = rows.get(0);
examples/client_only/src/ClientOnlyExample.java,97,ColumnFamily cf = row.cf;
examples/client_only/src/ClientOnlyExample.java,102,System.out.println(ByteBufferUtil.string(col.name()) + ", " + ByteBufferUtil.string(col.value()));
examples/client_only/src/ClientOnlyExample.java,105,else
examples/client_only/src/ClientOnlyExample.java,106,System.err.println("This output indicates that nothing was read.");
examples/client_only/src/ClientOnlyExample.java,127,setupKeyspace(createConnection());
examples/client_only/src/ClientOnlyExample.java,132,Thread.currentThread().sleep(10000);
examples/client_only/src/ClientOnlyExample.java,151,private static void setupKeyspace(Cassandra.Iface client) throws TException, InvalidRequestException
examples/client_only/src/ClientOnlyExample.java,153,List<CfDef> cfDefList = new ArrayList<CfDef>();
examples/client_only/src/ClientOnlyExample.java,154,CfDef columnFamily = new CfDef(KEYSPACE, COLUMN_FAMILY);
examples/client_only/src/ClientOnlyExample.java,155,cfDefList.add(columnFamily);
examples/client_only/src/ClientOnlyExample.java,157,try
examples/client_only/src/ClientOnlyExample.java,159,client.system_add_keyspace(new KsDef(KEYSPACE, "org.apache.cassandra.locator.SimpleStrategy", 1, cfDefList));
examples/client_only/src/ClientOnlyExample.java,160,int magnitude = client.describe_ring(KEYSPACE).size();
examples/client_only/src/ClientOnlyExample.java,161,try
examples/client_only/src/ClientOnlyExample.java,163,Thread.sleep(1000 * magnitude);
examples/client_only/src/ClientOnlyExample.java,167,throw new RuntimeException(e);
examples/client_only/src/ClientOnlyExample.java,172,logger.warn("Problem creating keyspace: " + probablyExists.getMessage());
examples/client_only/src/ClientOnlyExample.java,176,private static Cassandra.Iface createConnection() throws TTransportException
examples/client_only/src/ClientOnlyExample.java,180,logger.warn("cassandra.host or cassandra.port is not defined, using default");
examples/client_only/src/ClientOnlyExample.java,182,return createConnection( System.getProperty("cassandra.host","localhost"),
examples/client_only/src/ClientOnlyExample.java,183,Integer.valueOf(System.getProperty("cassandra.port","9160")),
examples/client_only/src/ClientOnlyExample.java,184,Boolean.valueOf(System.getProperty("cassandra.framed", "true")) );
examples/client_only/src/ClientOnlyExample.java,187,private static Cassandra.Client createConnection(String host, Integer port, boolean framed) throws TTransportException
examples/client_only/src/ClientOnlyExample.java,189,TSocket socket = new TSocket(host, port);
examples/client_only/src/ClientOnlyExample.java,190,TTransport trans = framed ? new TFramedTransport(socket) : socket;
examples/client_only/src/ClientOnlyExample.java,191,trans.open();
examples/client_only/src/ClientOnlyExample.java,192,TProtocol protocol = new TBinaryProtocol(trans);
examples/client_only/src/ClientOnlyExample.java,194,return new Cassandra.Client(protocol);
src/java/org/apache/cassandra/service/StorageService.java,384,initClient(RING_DELAY);
src/java/org/apache/cassandra/service/StorageService.java,387,public synchronized void initClient(int delay) throws IOException, ConfigurationException
src/java/org/apache/cassandra/service/StorageService.java,400,Gossiper.instance.start((int)(System.currentTimeMillis() / 1000)); // needed for node-ring gathering.
src/java/org/apache/cassandra/service/StorageService.java,401,MessagingService.instance().listen(FBUtilities.getLocalAddress());
src/java/org/apache/cassandra/service/StorageService.java,406,Thread.sleep(delay);
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,382,conf.stream_throughput_outbound_megabits_per_sec = 400;
src/java/org/apache/cassandra/gms/Gossiper.java,826,logger.trace("marking as dead {}", addr);
src/java/org/apache/cassandra/gms/Gossiper.java,830,logger.info("InetAddress {} is now dead.", addr);
src/java/org/apache/cassandra/db/compaction/CompactionController.java,115,return false;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,890,assert overlaps.contains(sstable);
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,130,try
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,162,finally
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,284,compactionLock.readLock().lock();
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,285,compactionLock.writeLock().unlock();
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,286,try
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,290,finally
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,292,compactionLock.readLock().unlock();
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,297,task.unmarkSSTables();
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,371,try
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,375,logger.info("No file to compact for user defined compaction");
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,381,try
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,383,AbstractCompactionStrategy strategy = cfs.getCompactionStrategy();
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,387,finally
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,392,else
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,394,logger.info("SSTables for user defined compaction are already being compacted.");
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,397,finally
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,399,SSTableReader.releaseReferences(sstables);
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,415,SSTableReader found = null;
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,423,found = sstable;
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,424,else
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,425,sstable.releaseReference();
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,427,return found;
src/java/org/apache/cassandra/db/compaction/LeveledCompactionStrategy.java,120,return null;
src/java/org/apache/cassandra/db/compaction/SizeTieredCompactionStrategy.java,54,return null;
src/java/org/apache/cassandra/db/compaction/SizeTieredCompactionStrategy.java,101,return new CompactionTask(cfs, smallestBucket, gcBefore);
src/java/org/apache/cassandra/db/compaction/SizeTieredCompactionStrategy.java,106,return cfs.getSSTables().isEmpty() ? null : new CompactionTask(cfs, filterSuspectSSTables(cfs.getSSTables()), gcBefore);
src/java/org/apache/cassandra/cache/AutoSavingCache.java,109,in = new DataInputStream(new BufferedInputStream(new FileInputStream(path)));
src/java/org/apache/cassandra/cache/AutoSavingCache.java,135,logger.warn(String.format("error reading saved cache %s", path.getAbsolutePath()), e);
src/java/org/apache/cassandra/db/RowMutation.java,22,import java.io.DataInputStream;
src/java/org/apache/cassandra/db/RowMutation.java,36,import org.apache.cassandra.io.util.FastByteArrayInputStream;
src/java/org/apache/cassandra/db/RowMutation.java,312,public synchronized byte[] getSerializedBuffer(int version) throws IOException
src/java/org/apache/cassandra/db/RowMutation.java,314,byte[] bytes = preserializedBuffers.get(version);
src/java/org/apache/cassandra/db/RowMutation.java,318,preserializedBuffers.put(version, bytes);
src/java/org/apache/cassandra/db/RowMutation.java,320,return bytes;
src/java/org/apache/cassandra/db/RowMutation.java,393,public static RowMutation fromBytes(byte[] raw, int version) throws IOException
src/java/org/apache/cassandra/db/RowMutation.java,396,boolean hasCounters = false;
src/java/org/apache/cassandra/db/RowMutation.java,401,hasCounters = true;
src/java/org/apache/cassandra/db/RowMutation.java,402,break;
src/java/org/apache/cassandra/db/RowMutation.java,408,rm.preserializedBuffers.put(version, raw);
src/java/org/apache/cassandra/db/RowMutation.java,409,return rm;
src/java/org/apache/cassandra/db/compaction/SizeTieredCompactionStrategy.java,75,prunedBuckets.add(bucket.subList(0, Math.min(bucket.size(), cfs.getMaximumCompactionThreshold())));
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,43,import org.apache.cassandra.concurrent.NamedThreadFactory;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,44,import org.apache.cassandra.concurrent.StageManager;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,45,import org.apache.cassandra.config.*;
src/java/org/apache/cassandra/db/SystemTable.java,33,import org.apache.cassandra.config.DatabaseDescriptor;
src/java/org/apache/cassandra/db/SystemTable.java,38,import org.apache.cassandra.db.marshal.AsciiType;
src/java/org/apache/cassandra/db/SystemTable.java,39,import org.apache.cassandra.db.marshal.BytesType;
src/java/org/apache/cassandra/db/SystemTable.java,45,import org.apache.cassandra.utils.ByteBufferUtil;
src/java/org/apache/cassandra/db/SystemTable.java,46,import org.apache.cassandra.utils.FBUtilities;
src/java/org/apache/cassandra/service/StorageService.java,545,Gossiper.instance.start(SystemTable.incrementAndGetGeneration()); // needed for node-ring gathering.
src/java/org/apache/cassandra/service/StorageService.java,549,Gossiper.instance.addLocalApplicationState(ApplicationState.RPC_ADDRESS, valueFactory.rpcaddress(DatabaseDescriptor.getRpcAddress()));
src/java/org/apache/cassandra/service/StorageService.java,551,Gossiper.instance.addLocalApplicationState(ApplicationState.STATUS, valueFactory.hibernate(true));
src/java/org/apache/cassandra/service/StorageService.java,556,Gossiper.instance.addLocalApplicationState(ApplicationState.RELEASE_VERSION, valueFactory.releaseVersion());
src/java/org/apache/cassandra/service/StorageService.java,1281,Gossiper.instance.removeEndpoint(endpoint);
src/java/org/apache/cassandra/locator/PropertyFileSnitch.java,155,newDefault = new String[] { "default", "default" };
src/java/org/apache/cassandra/locator/PropertyFileSnitch.java,156,defaultDCRack = newDefault;
src/java/org/apache/cassandra/locator/GossipingPropertyFileSnitch.java,106,throw new RuntimeException("Could not retrieve DC for " + endpoint + " from gossip and PFS compatibility is disabled");
src/java/org/apache/cassandra/locator/GossipingPropertyFileSnitch.java,125,throw new RuntimeException("Could not retrieve rack for " + endpoint + " from gossip and PFS compatibility is disabled");
src/java/org/apache/cassandra/db/Table.java,578,return Table.open(tableName);
src/java/org/apache/cassandra/db/Table.java,581,return Iterables.transform(Schema.instance.getTables(), transformer);
src/java/org/apache/cassandra/service/StorageService.java,2698,List<ColumnFamilyStore> cfses = new ArrayList<ColumnFamilyStore>();
src/java/org/apache/cassandra/service/StorageService.java,2701,Table table = Table.open(tableName);
src/java/org/apache/cassandra/service/StorageService.java,2702,cfses.addAll(table.getColumnFamilyStores());
src/java/org/apache/cassandra/service/StorageService.java,2704,totalCFs = remainingCFs = cfses.size();
src/java/org/apache/cassandra/service/StorageService.java,2707,cfs.forceBlockingFlush();
src/java/org/apache/cassandra/net/OutboundTcpConnection.java,237,socket.setTcpNoDelay(true);
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,707,Iterator<AbstractCompactedRow> nni = Iterators.filter(iter, Predicates.notNull());
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,715,AbstractCompactedRow row = nni.next();
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,716,validator.add(row);
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,414,logger.error("Bloom filter FP chance of zero isn't supposed to happen");
src/java/org/apache/cassandra/cql3/CFPropDefs.java,33,import org.apache.cassandra.db.compaction.AbstractCompactionStrategy;
src/java/org/apache/cassandra/cql3/CFPropDefs.java,164,cfm.bloomFilterFpChance(getDouble(KW_BF_FP_CHANCE, cfm.getBloomFilterFpChance()));
src/java/org/apache/cassandra/service/StorageProxy.java,248,ConsistencyLevel consistency_level,
src/java/org/apache/cassandra/service/StorageProxy.java,249,String localDataCenter,
src/java/org/apache/cassandra/service/StorageProxy.java,250,WritePerformer performer,
src/java/org/apache/cassandra/service/StorageProxy.java,343,scheduleLocalHint(rm, destination, responseHandler, consistency_level);
src/java/org/apache/cassandra/service/StorageProxy.java,350,public static Future<Void> scheduleLocalHint(final RowMutation mutation,
src/java/org/apache/cassandra/service/StorageProxy.java,351,final InetAddress target,
src/java/org/apache/cassandra/service/StorageProxy.java,358,totalHintsInProgress.incrementAndGet();
src/java/org/apache/cassandra/service/StorageProxy.java,359,final AtomicInteger targetHints = hintsInProgress.get(target);
src/java/org/apache/cassandra/service/StorageProxy.java,360,targetHints.incrementAndGet();
src/java/org/apache/cassandra/service/StorageProxy.java,369,try
src/java/org/apache/cassandra/service/StorageProxy.java,380,responseHandler.response(null);
src/java/org/apache/cassandra/service/StorageProxy.java,382,finally
src/java/org/apache/cassandra/service/StorageProxy.java,384,totalHintsInProgress.decrementAndGet();
src/java/org/apache/cassandra/service/StorageProxy.java,385,targetHints.decrementAndGet();
src/java/org/apache/cassandra/service/StorageProxy.java,397,throws IOException
src/java/org/apache/cassandra/service/StorageProxy.java,717,long startTime2 = System.currentTimeMillis();
examples/hadoop_word_count/src/WordCount.java,201,ConfigHelper.setInputPartitioner(job.getConfiguration(), "RandomPartitioner");
examples/hadoop_word_count/src/WordCount.java,219,ConfigHelper.setOutputPartitioner(job.getConfiguration(), "RandomPartitioner");
examples/hadoop_word_count/src/WordCountCounters.java,92,ConfigHelper.setInputPartitioner(job.getConfiguration(), "org.apache.cassandra.dht.RandomPartitioner");
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,183,public void setCompactionStrategyClass(String compactionStrategyClass) throws ConfigurationException
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,185,metadata.compactionStrategyClass = CFMetaData.createCompactionStrategy(compactionStrategyClass);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,186,maybeReloadCompactionStrategy();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,199,public void setCompressionParameters(Map<String,String> opts) throws ConfigurationException
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,201,metadata.compressionParameters = CompressionParameters.create(opts);
src/java/org/apache/cassandra/db/ColumnFamilyStoreMBean.java,199,public void setCompactionStrategyClass(String className) throws ConfigurationException;
src/java/org/apache/cassandra/db/ColumnFamilyStoreMBean.java,215,public void setCompressionParameters(Map<String,String> opts) throws ConfigurationException;
src/java/org/apache/cassandra/service/StorageService.java,701,joinTokenRing(0);
src/java/org/apache/cassandra/service/StorageService.java,904,public List<String> describeRingJMX(String keyspace) throws InvalidRequestException
src/java/org/apache/cassandra/service/StorageService.java,906,List<TokenRange> tokenRanges = describeRing(keyspace);
src/java/org/apache/cassandra/service/StorageService.java,2347,public void move(String newToken) throws IOException, InterruptedException, ConfigurationException
src/java/org/apache/cassandra/service/StorageService.java,2349,getPartitioner().getTokenFactory().validate(newToken);
src/java/org/apache/cassandra/service/StorageService.java,2742,StorageProxy.truncateBlocking(keyspace, columnFamily);
src/java/org/apache/cassandra/service/StorageService.java,2762,throw new ConfigurationException("Couldn't find any Non System Keyspaces to infer replication topology");
src/java/org/apache/cassandra/service/StorageService.java,2764,throw new ConfigurationException("Non System keyspaces doesnt have the same topology");
src/java/org/apache/cassandra/service/StorageService.java,2808,public void updateSnitch(String epSnitchClassName, Boolean dynamic, Integer dynamicUpdateInterval, Integer dynamicResetInterval, Double dynamicBadnessThreshold) throws ConfigurationException
src/java/org/apache/cassandra/service/StorageService.java,2813,IEndpointSnitch newSnitch = FBUtilities.construct(epSnitchClassName, "snitch");
src/java/org/apache/cassandra/service/StorageServiceMBean.java,136,public List <String> describeRingJMX(String keyspace) throws InvalidRequestException;
src/java/org/apache/cassandra/service/StorageServiceMBean.java,277,public void move(String newToken) throws IOException, InterruptedException, ConfigurationException;
src/java/org/apache/cassandra/service/StorageServiceMBean.java,319,public void truncate(String keyspace, String columnFamily) throws UnavailableException, TimeoutException, IOException;
src/java/org/apache/cassandra/service/StorageServiceMBean.java,347,public void updateSnitch(String epSnitchClassName, Boolean dynamic, Integer dynamicUpdateInterval, Integer dynamicResetInterval, Double dynamicBadnessThreshold) throws ConfigurationException;
src/java/org/apache/cassandra/tools/NodeProbe.java,376,public void joinRing() throws IOException, ConfigurationException
src/java/org/apache/cassandra/tools/NodeProbe.java,386,public void move(String newToken) throws IOException, InterruptedException, ConfigurationException
src/java/org/apache/cassandra/tools/NodeProbe.java,506,throw new RuntimeException("Error while executing truncate", e);
src/java/org/apache/cassandra/tools/NodeProbe.java,688,public List<String> describeRing(String keyspaceName) throws InvalidRequestException
src/java/org/apache/cassandra/service/StorageService.java,1944,Collection<Range<Token>> ranges = getLocalRanges(tableName);
src/java/org/apache/cassandra/service/StorageService.java,1991,return;
src/java/org/apache/cassandra/service/StorageService.java,2010,return;
src/java/org/apache/cassandra/service/StorageService.java,2012,Token parsedBeginToken = getPartitioner().getTokenFactory().fromString(beginToken);
src/java/org/apache/cassandra/service/StorageService.java,2013,Token parsedEndToken = getPartitioner().getTokenFactory().fromString(endToken);
src/java/org/apache/cassandra/service/StorageService.java,2016,new Object[] {parsedBeginToken, parsedEndToken, tableName, columnFamilies});
src/java/org/apache/cassandra/service/StorageService.java,2019,return;
src/java/org/apache/cassandra/service/StorageService.java,2020,try
src/java/org/apache/cassandra/service/StorageService.java,2022,future.get();
src/java/org/apache/cassandra/streaming/AbstractStreamSession.java,36,protected Pair<InetAddress, Long> context;
src/java/org/apache/cassandra/streaming/AbstractStreamSession.java,43,this.context = context;
src/java/org/apache/cassandra/streaming/AbstractStreamSession.java,51,return (int)(context.right >> 32);
src/java/org/apache/cassandra/streaming/AbstractStreamSession.java,56,return context.right;
src/java/org/apache/cassandra/streaming/AbstractStreamSession.java,61,return context.left;
src/java/org/apache/cassandra/streaming/FileStreamTask.java,96,StreamOutSession session = StreamOutSession.get(to, header.sessionId);
src/java/org/apache/cassandra/streaming/FileStreamTask.java,110,StreamOutSession session = StreamOutSession.get(to, header.sessionId);
src/java/org/apache/cassandra/streaming/IncomingStreamReader.java,61,InetAddress host = header.broadcastAddress != null ? header.broadcastAddress
src/java/org/apache/cassandra/streaming/IncomingStreamReader.java,62,: ((InetSocketAddress)socket.getRemoteSocketAddress()).getAddress();
src/java/org/apache/cassandra/streaming/StreamHeader.java,24,import java.io.*;
src/java/org/apache/cassandra/streaming/StreamHeader.java,25,import java.net.InetAddress;
src/java/org/apache/cassandra/streaming/StreamHeader.java,26,import java.util.ArrayList;
src/java/org/apache/cassandra/streaming/StreamHeader.java,27,import java.util.Collection;
src/java/org/apache/cassandra/streaming/StreamHeader.java,28,import java.util.Collections;
src/java/org/apache/cassandra/streaming/StreamHeader.java,29,import java.util.List;
src/java/org/apache/cassandra/streaming/StreamHeader.java,32,import org.apache.cassandra.net.CompactEndpointSerializationHelper;
src/java/org/apache/cassandra/streaming/StreamHeader.java,34,import org.apache.cassandra.utils.FBUtilities;
src/java/org/apache/cassandra/streaming/StreamHeader.java,42,public static final int STREAM_IN_SOURCE_FLAG = 0;
src/java/org/apache/cassandra/streaming/StreamHeader.java,43,public static final int STREAM_OUT_SOURCE_FLAG = 1;
src/java/org/apache/cassandra/streaming/StreamHeader.java,61,public final long sessionId;
src/java/org/apache/cassandra/streaming/StreamHeader.java,67,public final InetAddress broadcastAddress;
src/java/org/apache/cassandra/streaming/StreamHeader.java,76,this(table, sessionId, first, pendingFiles, FBUtilities.getBroadcastAddress());
src/java/org/apache/cassandra/streaming/StreamHeader.java,85,this.broadcastAddress = broadcastAddress;
src/java/org/apache/cassandra/streaming/StreamHeader.java,93,dos.writeLong(sh.sessionId);
src/java/org/apache/cassandra/streaming/StreamHeader.java,100,CompactEndpointSerializationHelper.serialize(sh.broadcastAddress, dos);
src/java/org/apache/cassandra/streaming/StreamHeader.java,106,long sessionId = dis.readLong();
src/java/org/apache/cassandra/streaming/StreamHeader.java,115,InetAddress bca = null;
src/java/org/apache/cassandra/streaming/StreamHeader.java,117,bca = CompactEndpointSerializationHelper.deserialize(dis);
src/java/org/apache/cassandra/streaming/StreamHeader.java,118,return new StreamHeader(table, sessionId, file, pendingFiles, bca);
src/java/org/apache/cassandra/streaming/StreamInSession.java,27,import java.util.concurrent.atomic.AtomicInteger;
src/java/org/apache/cassandra/streaming/StreamInSession.java,29,import org.apache.cassandra.config.DatabaseDescriptor;
src/java/org/apache/cassandra/streaming/StreamInSession.java,30,import org.apache.cassandra.net.MessagingService;
src/java/org/apache/cassandra/streaming/StreamInSession.java,38,import org.apache.cassandra.gms.*;
src/java/org/apache/cassandra/streaming/StreamInSession.java,42,import org.apache.cassandra.utils.Pair;
src/java/org/apache/cassandra/streaming/StreamInSession.java,56,private final static AtomicInteger sessionIdCounter = new AtomicInteger(0);
src/java/org/apache/cassandra/streaming/StreamInSession.java,76,return (((long)StreamHeader.STREAM_IN_SOURCE_FLAG << 32) + sessionIdCounter.incrementAndGet());
src/java/org/apache/cassandra/streaming/StreamInSession.java,81,super(null, context, callback);
src/java/org/apache/cassandra/streaming/StreamInSession.java,87,StreamInSession session = new StreamInSession(context, callback);
src/java/org/apache/cassandra/streaming/StreamInSession.java,88,sessions.put(context, session);
src/java/org/apache/cassandra/streaming/StreamInSession.java,95,StreamInSession session = sessions.get(context);
src/java/org/apache/cassandra/streaming/StreamInSession.java,98,StreamInSession possibleNew = new StreamInSession(context, null);
src/java/org/apache/cassandra/streaming/StreamInSession.java,234,sessions.remove(context);
src/java/org/apache/cassandra/streaming/StreamInSession.java,268,StreamInSession session = entry.getValue();
src/java/org/apache/cassandra/streaming/StreamOutSession.java,44,private static final ConcurrentMap<Pair<InetAddress, Long>, StreamOutSession> streams = new NonBlockingHashMap<Pair<InetAddress, Long>, StreamOutSession>();
src/java/org/apache/cassandra/streaming/StreamOutSession.java,45,private final static AtomicInteger sessionIdCounter = new AtomicInteger(0);
src/java/org/apache/cassandra/streaming/StreamOutSession.java,62,return (((long)StreamHeader.STREAM_OUT_SOURCE_FLAG << 32) + sessionIdCounter.incrementAndGet());
src/java/org/apache/cassandra/streaming/StreamOutSession.java,67,return create(table, host, nextSessionId(), callback);
src/java/org/apache/cassandra/streaming/StreamOutSession.java,78,StreamOutSession session = new StreamOutSession(table, context, callback);
src/java/org/apache/cassandra/streaming/StreamOutSession.java,79,streams.put(context, session);
src/java/org/apache/cassandra/streaming/StreamOutSession.java,94,super(table, context, callback);
src/java/org/apache/cassandra/streaming/StreamOutSession.java,135,streams.remove(context);
src/java/org/apache/cassandra/streaming/StreamOutSession.java,166,list.addAll(entry.getValue().getFiles());
src/java/org/apache/cassandra/streaming/StreamReply.java,45,public final long sessionId;
src/java/org/apache/cassandra/streaming/StreamReply.java,78,dos.writeLong(reply.sessionId);
src/java/org/apache/cassandra/streaming/StreamReply.java,85,long sessionId = dis.readLong();
src/java/org/apache/cassandra/db/Table.java,356,ColumnFamilyStore cfs = columnFamilyStores.get(cfId);
src/java/org/apache/cassandra/db/Table.java,357,assert cfs.getColumnFamilyName().equals(cfName);
src/java/org/apache/cassandra/db/Table.java,371,columnFamilyStores.put(cfId, ColumnFamilyStore.createColumnFamilyStore(this, cfName, loadSSTables));
src/java/org/apache/cassandra/gms/Gossiper.java,680,long expireTime = computeExpireTime();
src/java/org/apache/cassandra/gms/Gossiper.java,683,expireTime = expireTimeEndpointMap.get(endpoint);
src/java/org/apache/cassandra/gms/Gossiper.java,685,return expireTime;
src/java/org/apache/cassandra/gms/Gossiper.java,1093,EndpointState localState = endpointStateMap.get(FBUtilities.getBroadcastAddress());
src/java/org/apache/cassandra/gms/Gossiper.java,1096,HeartBeatState hbState = new HeartBeatState(generationNbr);
src/java/org/apache/cassandra/gms/Gossiper.java,1097,localState = new EndpointState(hbState);
src/java/org/apache/cassandra/gms/Gossiper.java,1098,localState.markAlive();
src/java/org/apache/cassandra/gms/Gossiper.java,1099,endpointStateMap.put(FBUtilities.getBroadcastAddress(), localState);
src/java/org/apache/cassandra/gms/Gossiper.java,1172,EndpointState localState = endpointStateMap.get(addr);
src/java/org/apache/cassandra/gms/Gossiper.java,1175,HeartBeatState hbState = new HeartBeatState(generationNbr);
src/java/org/apache/cassandra/gms/Gossiper.java,1176,localState = new EndpointState(hbState);
src/java/org/apache/cassandra/gms/Gossiper.java,1177,localState.markAlive();
src/java/org/apache/cassandra/gms/Gossiper.java,1178,endpointStateMap.put(addr, localState);
src/java/org/apache/cassandra/db/compaction/CompactionController.java,91,this.overlappingTree = overlappingTree;
src/java/org/apache/cassandra/db/DefsTable.java,236,return row.cf == null || (row.cf.isMarkedForDelete() && row.cf.isEmpty());
src/java/org/apache/cassandra/service/StorageService.java,433,initialized = true;
src/java/org/apache/cassandra/tools/NodeCmd.java,1147,toReturn[i - 1] = (String) params.get(i);
src/java/org/apache/cassandra/concurrent/Stage.java,28,STREAM,
src/java/org/apache/cassandra/concurrent/Stage.java,46,case STREAM:
src/java/org/apache/cassandra/concurrent/StageManager.java,50,stages.put(Stage.STREAM, new JMXEnabledThreadPoolExecutor(Stage.STREAM));
src/java/org/apache/cassandra/tools/BulkLoader.java,35,import org.apache.commons.cli.*;
src/java/org/apache/cassandra/tools/BulkLoader.java,166,sb.append(" (avg: ").append(mbPerSec(totalProgress, time - startTime)).append("MB/s)]");;
src/java/org/apache/cassandra/tools/BulkLoader.java,180,private final Map<String, Set<String>> knownCfs = new HashMap<String, Set<String>>();
src/java/org/apache/cassandra/tools/BulkLoader.java,208,List<TokenRange> tokenRanges = client.describe_ring(keyspace);
src/java/org/apache/cassandra/tools/BulkLoader.java,209,List<KsDef> ksDefs = client.describe_keyspaces();
src/java/org/apache/cassandra/tools/BulkLoader.java,225,Set<String> cfs = new HashSet<String>();
src/java/org/apache/cassandra/tools/BulkLoader.java,227,cfs.add(cfDef.name);
src/java/org/apache/cassandra/tools/BulkLoader.java,228,knownCfs.put(ksDef.name, cfs);
src/java/org/apache/cassandra/tools/BulkLoader.java,242,Set<String> cfs = knownCfs.get(keyspace);
src/java/org/apache/cassandra/tools/BulkLoader.java,243,return cfs != null && cfs.contains(cfName);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,128,Arrays.sort(files, new FileUtils.FileComparator());
src/java/org/apache/cassandra/io/util/FileUtils.java,166,public static class FileComparator implements Comparator<File>
src/java/org/apache/cassandra/io/util/FileUtils.java,170,return (int)(f.lastModified() - f2.lastModified());
src/java/org/apache/cassandra/gms/EndpointState.java,22,import java.util.Map;
src/java/org/apache/cassandra/gms/Gossiper.java,713,int localHbVersion = epState.getHeartBeatState().getHeartBeatVersion();
src/java/org/apache/cassandra/net/MessagingService.java,237,getConnectionPool(ep).reset();
src/java/org/apache/cassandra/net/MessagingService.java,314,return getConnectionPool(to).getConnection(msg);
src/java/org/apache/cassandra/utils/ByteBufferUtil.java,342,assert 0 <= length && length <= FBUtilities.MAX_UNSIGNED_SHORT : length;
src/java/org/apache/cassandra/locator/TokenMetadata.java,475,map = HashMultimap.create();
src/java/org/apache/cassandra/locator/TokenMetadata.java,478,map = priorMap;
src/java/org/apache/cassandra/locator/TokenMetadata.java,684,sb.append(System.getProperty("line.separator"));
src/java/org/apache/cassandra/locator/TokenMetadata.java,731,endpoints.addAll(entry.getValue());
src/java/org/apache/cassandra/locator/TokenMetadata.java,735,return endpoints;
src/java/org/apache/cassandra/net/MessagingService.java,545,th.close();
src/java/org/apache/cassandra/net/MessagingService.java,702,server.close();
src/java/org/apache/cassandra/locator/PropertyFileSnitch.java,60,reloadConfiguration();
src/java/org/apache/cassandra/locator/PropertyFileSnitch.java,68,reloadConfiguration();
src/java/org/apache/cassandra/locator/PropertyFileSnitch.java,126,public void reloadConfiguration() throws ConfigurationException
src/java/org/apache/cassandra/utils/FBUtilities.java,362,waitOnFuture(f);
src/java/org/apache/cassandra/tools/NodeCmd.java,762,probe.decommission();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,159,recover(new File(path));
src/java/org/apache/cassandra/db/commitlog/CommitLogReplayer.java,97,recover(file);
src/java/org/apache/cassandra/db/commitlog/CommitLogReplayer.java,117,public void recover(File file) throws IOException
src/java/org/apache/cassandra/utils/Hex.java,68,char[] c = new char[bytes.length * 2];
src/java/org/apache/cassandra/utils/Hex.java,71,int bint = bytes[i];
src/java/org/apache/cassandra/db/compaction/Scrubber.java,51,private SSTableReader newSstable;
src/java/org/apache/cassandra/db/compaction/Scrubber.java,52,private SSTableReader newInOrderSstable;
src/java/org/apache/cassandra/db/compaction/Scrubber.java,290,return newSstable;
src/java/org/apache/cassandra/db/compaction/Scrubber.java,295,return newInOrderSstable;
src/java/org/apache/cassandra/gms/Gossiper.java,882,return true;
src/java/org/apache/cassandra/gms/Gossiper.java,884,return false;
src/java/org/apache/cassandra/gms/Gossiper.java,875,String value = epState.getApplicationState(ApplicationState.STATUS).value;
src/java/org/apache/cassandra/gms/Gossiper.java,876,String[] pieces = value.split(VersionedValue.DELIMITER_STR, -1);
src/java/org/apache/cassandra/gms/Gossiper.java,877,assert (pieces.length > 0);
src/java/org/apache/cassandra/gms/Gossiper.java,878,String state = pieces[0];
src/java/org/apache/cassandra/db/commitlog/CommitLogArchiver.java,53,public final long restorePointInTime;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,149,DataOutputBuffer buffer = new DataOutputBuffer();
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,150,try
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,158,throw new RuntimeException(e);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,108,archiver.maybeRestoreArchive();
src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java,137,logExceptionsAfterExecute(r, t);
src/java/org/apache/cassandra/tools/SSTableExport.java,240,public static void export(Descriptor desc, PrintStream outs, Collection<String> toExport, String[] excludes) throws IOException
src/java/org/apache/cassandra/tools/SSTableExport.java,259,DecoratedKey decoratedKey = partitioner.decorateKey(hexToBytes(key));
src/java/org/apache/cassandra/tools/SSTableExport.java,291,static void export(SSTableReader reader, PrintStream outs, String[] excludes) throws IOException
src/java/org/apache/cassandra/tools/SSTableExport.java,338,public static void export(Descriptor desc, PrintStream outs, String[] excludes) throws IOException
src/java/org/apache/cassandra/tools/SSTableExport.java,340,export(SSTableReader.open(desc), outs, excludes);
src/java/org/apache/cassandra/tools/SSTableExport.java,351,public static void export(Descriptor desc, String[] excludes) throws IOException
src/java/org/apache/cassandra/tools/SSTableExport.java,353,export(desc, System.out, excludes);
src/java/org/apache/cassandra/tools/SSTableImport.java,523,return (type == BytesType.instance) ? hexToBytes(content) : type.fromString(content);
src/java/org/apache/cassandra/service/GCInspector.java,80,return;
src/java/org/apache/cassandra/service/GCInspector.java,85,logGCResults();
src/java/org/apache/cassandra/service/GCInspector.java,88,StorageService.scheduledTasks.scheduleWithFixedDelay(t, INTERVAL_IN_MS, INTERVAL_IN_MS, TimeUnit.MILLISECONDS);
src/java/org/apache/cassandra/service/GCInspector.java,95,Long previousTotal = gctimes.get(gc.getName());
src/java/org/apache/cassandra/service/GCInspector.java,96,Long total = gc.getCollectionTime();
src/java/org/apache/cassandra/service/GCInspector.java,98,previousTotal = 0L;
src/java/org/apache/cassandra/service/GCInspector.java,100,continue;
src/java/org/apache/cassandra/service/GCInspector.java,101,gctimes.put(gc.getName(), total);
src/java/org/apache/cassandra/service/GCInspector.java,102,Long duration = total - previousTotal; // may be zero for a really fast collection
src/java/org/apache/cassandra/service/GCInspector.java,104,Long previousCount = gccounts.get(gc.getName());
src/java/org/apache/cassandra/service/GCInspector.java,105,Long count = gc.getCollectionCount();
src/java/org/apache/cassandra/service/GCInspector.java,108,previousCount = 0L;
src/java/org/apache/cassandra/service/GCInspector.java,110,continue;
src/java/org/apache/cassandra/service/GCInspector.java,112,gccounts.put(gc.getName(), count);
src/java/org/apache/cassandra/service/GCInspector.java,114,MemoryUsage mu = membean.getHeapMemoryUsage();
src/java/org/apache/cassandra/service/GCInspector.java,115,long memoryUsed = mu.getUsed();
src/java/org/apache/cassandra/service/GCInspector.java,116,long memoryMax = mu.getMax();
src/java/org/apache/cassandra/service/GCInspector.java,118,String st = String.format("GC for %s: %s ms for %s collections, %s used; max is %s",
src/java/org/apache/cassandra/service/GCInspector.java,119,gc.getName(), duration, count - previousCount, memoryUsed, memoryMax);
src/java/org/apache/cassandra/service/GCInspector.java,120,long durationPerCollection = duration / (count - previousCount);
src/java/org/apache/cassandra/service/GCInspector.java,122,logger.info(st);
src/java/org/apache/cassandra/service/GCInspector.java,124,logger.debug(st);
src/java/org/apache/cassandra/service/GCInspector.java,127,StatusLogger.log();
src/java/org/apache/cassandra/service/GCInspector.java,132,SSTableDeletingTask.rescheduleFailedTasks();
src/java/org/apache/cassandra/config/Config.java,85,public Integer in_memory_compaction_limit_in_mb = 64;
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,749,return conf.in_memory_compaction_limit_in_mb * 1024 * 1024;
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,754,conf.in_memory_compaction_limit_in_mb = sizeInMB;
src/java/org/apache/cassandra/db/marshal/AbstractCompositeType.java,36,int length = (bb.get() & 0xFF) << 8;
src/java/org/apache/cassandra/db/marshal/AbstractCompositeType.java,37,return length | (bb.get() & 0xFF);
src/java/org/apache/cassandra/db/marshal/AbstractCompositeType.java,43,bb.put((byte) ((length >> 8) & 0xFF));
src/java/org/apache/cassandra/db/marshal/AbstractCompositeType.java,44,bb.put((byte) (length & 0xFF));
src/java/org/apache/cassandra/db/marshal/AbstractCompositeType.java,50,ByteBuffer copy = bb.duplicate();
src/java/org/apache/cassandra/db/marshal/AbstractCompositeType.java,51,copy.limit(copy.position() + length);
src/java/org/apache/cassandra/db/marshal/AbstractCompositeType.java,52,bb.position(bb.position() + length);
src/java/org/apache/cassandra/db/marshal/AbstractCompositeType.java,53,return copy;
src/java/org/apache/cassandra/db/marshal/AbstractCompositeType.java,59,int length = getShortLength(bb);
src/java/org/apache/cassandra/db/marshal/AbstractCompositeType.java,60,return getBytes(bb, length);
src/java/org/apache/cassandra/db/marshal/AbstractCompositeType.java,76,ByteBuffer value1 = getWithShortLength(bb1);
src/java/org/apache/cassandra/db/marshal/AbstractCompositeType.java,77,ByteBuffer value2 = getWithShortLength(bb2);
src/java/org/apache/cassandra/db/marshal/AbstractCompositeType.java,122,l.add(getWithShortLength(bb));
src/java/org/apache/cassandra/db/marshal/AbstractCompositeType.java,140,ByteBuffer value = getWithShortLength(bb);
src/java/org/apache/cassandra/db/marshal/AbstractCompositeType.java,225,putShortLength(bb, component.remaining());
src/java/org/apache/cassandra/db/marshal/AbstractCompositeType.java,248,int length = getShortLength(bb);
src/java/org/apache/cassandra/db/marshal/AbstractCompositeType.java,252,ByteBuffer value = getBytes(bb, length);
src/java/org/apache/cassandra/db/marshal/DynamicCompositeType.java,85,int header = getShortLength(bb);
src/java/org/apache/cassandra/db/marshal/DynamicCompositeType.java,88,String name = ByteBufferUtil.string(getBytes(bb, header));
src/java/org/apache/cassandra/db/marshal/DynamicCompositeType.java,143,int header = getShortLength(bb);
src/java/org/apache/cassandra/db/marshal/DynamicCompositeType.java,146,String name = ByteBufferUtil.string(getBytes(bb, header));
src/java/org/apache/cassandra/db/marshal/DynamicCompositeType.java,176,int header = getShortLength(bb);
src/java/org/apache/cassandra/db/marshal/DynamicCompositeType.java,182,ByteBuffer value = getBytes(bb, header);
src/java/org/apache/cassandra/db/marshal/DynamicCompositeType.java,291,putShortLength(bb, header);
src/java/org/apache/cassandra/db/commitlog/CommitLogArchiver.java,107,String command = archiveCommand.replace("%name", name);
src/java/org/apache/cassandra/db/commitlog/CommitLogArchiver.java,108,command = command.replace("%path", path);
src/java/org/apache/cassandra/db/commitlog/CommitLogReplayer.java,69,private final Checksum checksum;
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,60,private final static long idBase = System.currentTimeMillis();
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,64,static final int ENTRY_OVERHEAD_SIZE = 4 + 8 + 8;
src/java/org/apache/cassandra/config/CFMetaData.java,611,public static CFMetaData fromThrift(org.apache.cassandra.thrift.CfDef cf_def) throws InvalidRequestException, ConfigurationException
src/java/org/apache/cassandra/config/CFMetaData.java,655,.compressionParameters(cp);
src/java/org/apache/cassandra/service/StorageService.java,2182,org.apache.log4j.Logger.getLogger(classQualifier).setLevel(level);
tools/stress/src/org/apache/cassandra/stress/operations/CqlReader.java,26,import java.util.ArrayList;
src/java/org/apache/cassandra/io/compress/CompressedRandomAccessReader.java,80,private void decompressChunk(CompressionMetadata.Chunk chunk) throws IOException
src/java/org/apache/cassandra/io/compress/CompressedRandomAccessReader.java,83,channel.position(chunk.offset);
src/java/org/apache/cassandra/io/compress/CompressedRandomAccessReader.java,101,checksum.reset();
src/java/org/apache/cassandra/io/compress/CompressedRandomAccessReader.java,105,bufferOffset = current & ~(buffer.length - 1);
src/java/org/apache/cassandra/io/util/AbstractDataInput.java,28,protected abstract void seekInternal(int position);
src/java/org/apache/cassandra/io/util/AbstractDataInput.java,29,protected abstract int getPosition();
src/java/org/apache/cassandra/io/util/AbstractDataInput.java,32,!! DataInput methods below are copied from the implementation in Apache Harmony RandomAccessFile.
src/java/org/apache/cassandra/io/util/AbstractDataInput.java,220,int unreadPosition = 0;
src/java/org/apache/cassandra/io/util/AbstractDataInput.java,228,seekInternal(unreadPosition);
src/java/org/apache/cassandra/io/util/AbstractDataInput.java,239,seekInternal(unreadPosition);
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,30,public class MappedFileDataInput extends AbstractDataInput implements FileDataInput
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,55,position = pos;
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,60,return position;
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,72,seekInternal(((MappedFileDataInputMark) mark).position);
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,148,public int skipBytes(int n) throws IOException
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,150,assert n >= 0 : "skipping negative bytes is illegal: " + n;
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,152,return 0;
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,153,int oldPosition = position;
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,154,assert ((long)oldPosition) + n <= Integer.MAX_VALUE;
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,155,position = Math.min(buffer.capacity(), position + n);
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,156,return position - oldPosition;
src/java/org/apache/cassandra/io/util/MemoryInputStream.java,29,public class MemoryInputStream extends AbstractDataInput
src/java/org/apache/cassandra/io/util/MemoryInputStream.java,52,position = pos;
src/java/org/apache/cassandra/io/util/MemoryInputStream.java,60,public int skipBytes(int n) throws IOException
src/java/org/apache/cassandra/io/util/MemoryInputStream.java,62,seekInternal(getPosition() + n);
src/java/org/apache/cassandra/io/util/MemoryInputStream.java,63,return position;
src/java/org/apache/cassandra/io/util/RandomAccessReader.java,31,public class RandomAccessReader extends RandomAccessFile implements FileDataInput
src/java/org/apache/cassandra/io/util/RandomAccessReader.java,42,protected byte[] buffer;
src/java/org/apache/cassandra/io/util/RandomAccessReader.java,47,protected long bufferOffset, current = 0, markedPointer;
src/java/org/apache/cassandra/io/util/RandomAccessReader.java,50,protected int validBufferBytes = 0;
src/java/org/apache/cassandra/io/util/RandomAccessReader.java,67,super(file, "r");
src/java/org/apache/cassandra/io/util/RandomAccessReader.java,69,channel = super.getChannel();
src/java/org/apache/cassandra/io/util/RandomAccessReader.java,82,validBufferBytes = -1; // that will trigger reBuffer() on demand by read/seek operations
src/java/org/apache/cassandra/io/util/RandomAccessReader.java,117,resetBuffer();
src/java/org/apache/cassandra/io/util/RandomAccessReader.java,151,return current;
src/java/org/apache/cassandra/io/util/RandomAccessReader.java,166,long bytes = current - markedPointer;
src/java/org/apache/cassandra/io/util/RandomAccessReader.java,173,markedPointer = current;
src/java/org/apache/cassandra/io/util/RandomAccessReader.java,186,long bytes = current - ((BufferedRandomAccessFileMark) mark).pointer;
src/java/org/apache/cassandra/io/util/RandomAccessReader.java,207,return (int) (current - bufferOffset);
src/java/org/apache/cassandra/io/util/RandomAccessReader.java,212,bufferOffset = current;
src/java/org/apache/cassandra/io/util/RandomAccessReader.java,213,validBufferBytes = 0;
src/java/org/apache/cassandra/io/util/RandomAccessReader.java,252,if (newPosition > length()) // it is save to call length() in read-only mode
src/java/org/apache/cassandra/io/util/RandomAccessReader.java,256,current = newPosition;
src/java/org/apache/cassandra/io/util/RandomAccessReader.java,259,reBuffer();
src/java/org/apache/cassandra/io/util/RandomAccessReader.java,276,assert current >= bufferOffset && current < bufferOffset + validBufferBytes;
src/java/org/apache/cassandra/io/util/RandomAccessReader.java,278,return ((int) buffer[(int) (current++ - bufferOffset)]) & 0xff;
src/java/org/apache/cassandra/io/util/RandomAccessReader.java,304,assert current >= bufferOffset && current < bufferOffset + validBufferBytes
src/java/org/apache/cassandra/io/util/RandomAccessReader.java,305,: String.format("File (%s), current offset %d, buffer offset %d, buffer limit %d",
src/java/org/apache/cassandra/io/util/RandomAccessReader.java,306,getPath(),
src/java/org/apache/cassandra/io/util/RandomAccessReader.java,307,current,
src/java/org/apache/cassandra/io/util/RandomAccessReader.java,308,bufferOffset,
src/java/org/apache/cassandra/io/util/RandomAccessReader.java,309,validBufferBytes);
src/java/org/apache/cassandra/io/util/RandomAccessReader.java,311,int toCopy = Math.min(length, validBufferBytes - bufferCursor());
src/java/org/apache/cassandra/io/util/RandomAccessReader.java,313,System.arraycopy(buffer, bufferCursor(), buff, offset, toCopy);
src/java/org/apache/cassandra/io/util/RandomAccessReader.java,314,current += toCopy;
src/java/org/apache/cassandra/io/util/RandomAccessReader.java,323,byte[] buff = new byte[length];
src/java/org/apache/cassandra/io/util/RandomAccessReader.java,326,return ByteBuffer.wrap(buff);
src/java/org/apache/cassandra/io/util/RandomAccessReader.java,338,throw new UnsupportedOperationException();
src/java/org/apache/cassandra/io/util/RandomAccessReader.java,344,throw new UnsupportedOperationException();
src/java/org/apache/cassandra/io/util/RandomAccessReader.java,350,throw new UnsupportedOperationException();
src/java/org/apache/cassandra/service/StorageProxy.java,1228,return !Gossiper.instance.getUnreachableMembers().isEmpty();
src/java/org/apache/cassandra/service/StorageProxy.java,103,mbs.registerMBean(new StorageProxy(), new ObjectName(MBEAN_NAME));
src/java/org/apache/cassandra/hadoop/BulkOutputFormat.java,70,return new BulkRecordWriter(job, new Progressable(progress));
src/java/org/apache/cassandra/hadoop/BulkRecordWriter.java,89,this.progress = new Progressable(context);
src/java/org/apache/cassandra/hadoop/BulkRecordWriter.java,202,progress.progress();
src/java/org/apache/cassandra/hadoop/BulkRecordWriter.java,233,progress.progress();
src/java/org/apache/cassandra/hadoop/ColumnFamilyOutputFormat.java,124,return new ColumnFamilyRecordWriter(job, new Progressable(progress));
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordWriter.java,94,this.progressable = new Progressable(context);
src/java/org/apache/cassandra/hadoop/Progressable.java,1,package org.apache.cassandra.hadoop;
src/java/org/apache/cassandra/hadoop/Progressable.java,24,import org.apache.hadoop.mapreduce.TaskAttemptContext;
src/java/org/apache/cassandra/hadoop/Progressable.java,27,public class Progressable
src/java/org/apache/cassandra/hadoop/Progressable.java,29,private TaskAttemptContext context;
src/java/org/apache/cassandra/hadoop/Progressable.java,30,private org.apache.hadoop.util.Progressable progressable;
src/java/org/apache/cassandra/hadoop/Progressable.java,34,this.context = context;
src/java/org/apache/cassandra/hadoop/Progressable.java,39,this.progressable = progressable;
src/java/org/apache/cassandra/hadoop/Progressable.java,45,context.progress();
src/java/org/apache/cassandra/hadoop/Progressable.java,46,else
src/java/org/apache/cassandra/hadoop/Progressable.java,47,progressable.progress();
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,156,Double first = scores.get(addresses.get(0));
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,158,return;
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,161,Double next = scores.get(addr);
src/java/org/apache/cassandra/hadoop/BulkOutputFormat.java,42,checkOutputSpecs(context.getConfiguration());
src/java/org/apache/cassandra/hadoop/BulkRecordWriter.java,88,this(context.getConfiguration());
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,322,reporter.progress();
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,140,Configuration conf = context.getConfiguration();
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordWriter.java,93,this(context.getConfiguration());
src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,560,conf = job.getConfiguration();
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,46,private long[] bucketOffsets;
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,58,makeOffsets(bucketCount);
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,71,bucketOffsets = new long[size];
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,73,bucketOffsets[0] = last;
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,79,bucketOffsets[i] = next;
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,122,long[] rv = new long[buckets.length()];
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,124,rv[i] = buckets.get(i);
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,128,buckets.set(i, 0L);
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,178,elements += buckets.get(i);
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,179,sum += buckets.get(i) * bucketOffsets[i];
src/java/org/apache/cassandra/io/util/Memory.java,22,import sun.misc.Unsafe;
src/java/org/apache/cassandra/io/sstable/Descriptor.java,159,return fromFilename(file.getParentFile(), file.getName()).left;
src/java/org/apache/cassandra/io/sstable/Descriptor.java,199,String component = st.nextToken();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1574,directories.clearSnapshot(snapshotName);
src/java/org/apache/cassandra/tools/BulkLoader.java,207,Cassandra.Client client = createThriftClient(host.getHostAddress(), rpcPort, this.user, this.passwd);
src/java/org/apache/cassandra/tools/BulkLoader.java,246,private static Cassandra.Client createThriftClient(String host, int port, String user, String passwd) throws Exception
src/java/org/apache/cassandra/tools/BulkLoader.java,248,TSocket socket = new TSocket(host, port);
src/java/org/apache/cassandra/tools/BulkLoader.java,249,TTransport trans = new TFramedTransport(socket);
src/java/org/apache/cassandra/tools/BulkLoader.java,250,trans.open();
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,1050,private final SSTableScanner scanner;
src/java/org/apache/cassandra/db/Directories.java,32,import org.apache.cassandra.db.compaction.LeveledManifest;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,65,this(type, scanners, controller, DatabaseDescriptor.getInMemoryCompactionLimit() / scanners.size());
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,447,int greaterThan = (index + 1) * -1;
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,450,return indexSummary.getPosition(greaterThan - 1);
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,454,return indexSummary.getPosition(index);
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,711,long sampledPosition = getIndexScanPosition(key);
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,826,deletingTask.schedule();
src/java/org/apache/cassandra/net/MessagingService.java,684,Socket socket = server.accept();
src/java/org/apache/cassandra/net/MessagingService.java,695,throw new RuntimeException(e);
src/java/org/apache/cassandra/gms/Gossiper.java,165,logger.trace("Performing status check ...");
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,148,assert compactedCf != null;
src/java/org/apache/cassandra/config/Config.java,88,public Boolean multithreaded_compaction = false;
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,764,return conf.multithreaded_compaction;
src/java/org/apache/cassandra/db/compaction/CompactionController.java,28,import org.apache.cassandra.config.DatabaseDescriptor;
src/java/org/apache/cassandra/db/compaction/CompactionController.java,117,return true;
src/java/org/apache/cassandra/db/compaction/CompactionController.java,156,long rowSize = 0;
src/java/org/apache/cassandra/db/compaction/CompactionController.java,158,rowSize += row.dataSize;
src/java/org/apache/cassandra/db/compaction/CompactionController.java,171,String keyString = cfs.metadata.getKeyValidator().getString(rows.get(0).getKey().key);
src/java/org/apache/cassandra/db/compaction/CompactionController.java,172,logger.info(String.format("Compacting large row %s/%s:%s (%d bytes) incrementally",
src/java/org/apache/cassandra/db/compaction/CompactionController.java,174,return new LazilyCompactedRow(this, rows);
src/java/org/apache/cassandra/db/compaction/CompactionController.java,176,return new PrecompactedRow(this, rows);
src/java/org/apache/cassandra/db/compaction/CompactionController.java,182,return getCompactedRow(Collections.singletonList(row));
src/java/org/apache/cassandra/db/compaction/CompactionIterable.java,70,protected final List<SSTableIdentityIterator> rows = new ArrayList<SSTableIdentityIterator>();
src/java/org/apache/cassandra/db/compaction/CompactionIterable.java,74,rows.add((SSTableIdentityIterator) current);
src/java/org/apache/cassandra/db/compaction/LazilyCompactedRow.java,39,import org.apache.cassandra.db.marshal.AbstractType;
src/java/org/apache/cassandra/db/compaction/LazilyCompactedRow.java,61,private final boolean shouldPurge;
src/java/org/apache/cassandra/db/compaction/LazilyCompactedRow.java,63,private ColumnFamily emptyColumnFamily;
src/java/org/apache/cassandra/db/compaction/LazilyCompactedRow.java,64,private Reducer reducer;
src/java/org/apache/cassandra/db/compaction/LazilyCompactedRow.java,82,emptyColumnFamily = cf;
src/java/org/apache/cassandra/db/compaction/LazilyCompactedRow.java,84,emptyColumnFamily.delete(cf);
src/java/org/apache/cassandra/db/compaction/LazilyCompactedRow.java,151,iter.next().updateDigest(digest);
src/java/org/apache/cassandra/db/compaction/LazilyCompactedRow.java,174,return emptyColumnFamily.getComparator();
src/java/org/apache/cassandra/db/compaction/LazilyCompactedRow.java,181,reducer = new Reducer();
src/java/org/apache/cassandra/db/compaction/LazilyCompactedRow.java,183,return Iterators.filter(iter, Predicates.notNull());
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,1,package org.apache.cassandra.db.compaction;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,23,import java.io.IOException;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,24,import java.util.ArrayList;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,25,import java.util.Comparator;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,26,import java.util.Iterator;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,27,import java.util.List;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,28,import java.util.concurrent.*;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,31,import com.google.common.collect.AbstractIterator;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,33,import org.slf4j.Logger;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,34,import org.slf4j.LoggerFactory;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,36,import org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,37,import org.apache.cassandra.concurrent.NamedThreadFactory;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,38,import org.apache.cassandra.config.DatabaseDescriptor;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,39,import org.apache.cassandra.db.*;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,41,import org.apache.cassandra.io.sstable.SSTableIdentityIterator;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,43,import org.apache.cassandra.utils.*;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,57,public class ParallelCompactionIterable extends AbstractCompactionIterable
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,61,private final int maxInMemorySize;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,70,super(controller, type, scanners);
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,71,this.maxInMemorySize = maxInMemorySize;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,76,List<CloseableIterator<RowContainer>> sources = new ArrayList<CloseableIterator<RowContainer>>(scanners.size());
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,78,sources.add(new Deserializer(scanner, maxInMemorySize));
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,82,private static class Unwrapper extends AbstractIterator<AbstractCompactedRow> implements CloseableIterator<AbstractCompactedRow>
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,84,private final CloseableIterator<CompactedRowContainer> reducer;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,89,this.reducer = reducer;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,96,return endOfData();
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,98,CompactedRowContainer container = reducer.next();
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,99,AbstractCompactedRow compactedRow;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,130,public void close() throws IOException
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,132,reducer.close();
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,136,private class Reducer extends MergeIterator.Reducer<RowContainer, CompactedRowContainer>
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,138,private final List<RowContainer> rows = new ArrayList<RowContainer>();
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,142,Integer.MAX_VALUE,
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,143,TimeUnit.MILLISECONDS,
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,144,new SynchronousQueue<Runnable>(),
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,145,new NamedThreadFactory("CompactionReducer"));
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,149,rows.add(current);
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,154,assert rows.size() > 0;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,156,CompactedRowContainer compacted = getCompactedRow(rows);
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,157,rows.clear();
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,166,return compacted;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,171,boolean inMemory = true;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,176,inMemory = false;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,177,break;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,186,iterators.add(container.row == null ? container.wrapper : new DeserializedColumnIterator(container.row));
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,187,return new CompactedRowContainer(new LazilyCompactedRow(controller, iterators));
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,192,executor.shutdown();
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,195,private class MergeTask implements Callable<ColumnFamily>
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,201,this.rows = rows;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,204,public ColumnFamily call() throws Exception
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,227,private final Row row;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,232,this.row = row;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,233,iter = row.cf.iterator();
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,238,return row.cf;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,243,return row.key;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,256,public void close() throws IOException {}
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,260,return iter.hasNext();
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,265,return iter.next();
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,270,throw new UnsupportedOperationException();
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,275,private static class Deserializer extends AbstractIterator<RowContainer> implements CloseableIterator<RowContainer>
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,277,private final LinkedBlockingQueue<RowContainer> queue = new LinkedBlockingQueue<RowContainer>(1);
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,278,private static final RowContainer finished = new RowContainer((Row) null);
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,280,private final ICompactionScanner scanner;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,284,this.scanner = ssts;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,287,protected void runMayThrow() throws Exception
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,292,condition.await();
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,296,queue.put(finished);
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,297,break;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,300,SSTableIdentityIterator iter = (SSTableIdentityIterator) scanner.next();
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,304,condition = new SimpleCondition();
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,305,queue.put(new RowContainer(new NotifyingSSTableIdentityIterator(iter, condition)));
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,307,else
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,315,new Thread(runnable, "Deserialize " + scanner.getBackingFiles()).start();
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,320,RowContainer container;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,321,try
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,323,container = queue.take();
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,327,throw new AssertionError(e);
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,329,return container == finished ? endOfData() : container;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,332,public void close() throws IOException
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,334,scanner.close();
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,343,private final SSTableIdentityIterator wrapped;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,348,this.wrapped = wrapped;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,349,this.condition = condition;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,354,return wrapped.getColumnFamily();
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,359,return wrapped.getKey();
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,372,public void close() throws IOException
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,380,return wrapped.hasNext();
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,385,return wrapped.next();
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,390,throw new UnsupportedOperationException();
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,394,private static class RowContainer
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,397,public final Row row;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,398,public final NotifyingSSTableIdentityIterator wrapper;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,403,return o1.getKey().compareTo(o2.getKey());
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,409,this.row = row;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,410,wrapper = null;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,415,this.wrapper = wrapper;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,416,row = null;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,421,return row == null ? wrapper.getKey() : row.key;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,425,private static class CompactedRowContainer
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,427,public final DecoratedKey key;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,429,public final Future<ColumnFamily> future;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,430,public final LazilyCompactedRow row;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,434,this.key = key;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,435,this.future = future;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,436,row = null;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,441,this.row = row;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,442,future = null;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,443,key = null;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,24,import java.io.DataOutput;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,26,import java.io.IOException;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,27,import java.security.MessageDigest;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,28,import java.util.List;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,38,import org.apache.cassandra.io.sstable.SSTableIdentityIterator;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,39,import org.apache.cassandra.io.util.DataOutputBuffer;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,45,public class PrecompactedRow extends AbstractCompactedRow
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,49,private final ColumnFamily compactedCf;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,54,super(key);
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,55,compactedCf = cf;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,60,assert key != null;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,61,assert controller != null;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,62,assert cf != null;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,68,Boolean shouldPurge = null;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,75,ColumnFamily compacted = ColumnFamilyStore.removeDeleted(cf, shouldPurge != null && shouldPurge ? controller.gcBefore : Integer.MIN_VALUE);
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,82,CounterColumn.mergeAndRemoveOldShards(key, compacted, controller.gcBefore, controller.mergeShardBefore);
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,85,return compacted;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,93,CounterColumn.mergeAndRemoveOldShards(key, compacted, controller.gcBefore, controller.mergeShardBefore);
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,94,return compacted;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,99,this(rows.get(0).getKey(),
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,105,assert !rows.isEmpty();
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,154,digest.update(buffer.getData(), 0, buffer.getLength());
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,160,compactedCf.updateDigest(digest);
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,186,return compactedCf;
src/java/org/apache/cassandra/db/compaction/Scrubber.java,67,private final Set<AbstractCompactedRow> outOfOrderRows = new TreeSet<AbstractCompactedRow>(acrComparator);
src/java/org/apache/cassandra/db/compaction/Scrubber.java,104,outputHandler.output("Scrubbing " + sstable);
src/java/org/apache/cassandra/db/compaction/Scrubber.java,117,AbstractCompactedRow prevRow = null;
src/java/org/apache/cassandra/db/compaction/Scrubber.java,171,AbstractCompactedRow compactedRow = controller.getCompactedRow(row);
src/java/org/apache/cassandra/db/compaction/Scrubber.java,207,AbstractCompactedRow compactedRow = controller.getCompactedRow(row);
src/java/org/apache/cassandra/db/compaction/Scrubber.java,268,inOrderWriter.append(row);
src/java/org/apache/cassandra/db/compaction/Scrubber.java,352,return false;
src/java/org/apache/cassandra/gms/FailureDetector.java,165,long now = System.currentTimeMillis();
src/java/org/apache/cassandra/gms/FailureDetector.java,182,long now = System.currentTimeMillis();
src/java/org/apache/cassandra/utils/BoundedStatsDeque.java,30,protected final LinkedBlockingDeque<Double> deque;
src/java/org/apache/cassandra/utils/BoundedStatsDeque.java,34,deque = new LinkedBlockingDeque<Double>(size);
src/java/org/apache/cassandra/service/StorageService.java,237,private Mode operationMode;
src/java/org/apache/cassandra/service/AbstractWriteResponseHandler.java,40,protected final ConsistencyLevel consistencyLevel;
src/java/org/apache/cassandra/io/util/SegmentedFile.java,59,this.path = path;
src/java/org/apache/cassandra/service/StorageProxy.java,641,List<Row> rows = new ArrayList<Row>(initialCommands.size());
src/java/org/apache/cassandra/service/StorageProxy.java,743,repairCommands = new ArrayList<ReadCommand>();
src/java/org/apache/cassandra/service/StorageProxy.java,756,commandsToRetry.clear();
src/java/org/apache/cassandra/service/StorageProxy.java,786,commandsToRetry = new ArrayList<ReadCommand>();
src/java/org/apache/cassandra/db/HintedHandOffManager.java,465,Token.TokenFactory tokenFactory = StorageService.getPartitioner().getTokenFactory();
src/java/org/apache/cassandra/db/HintedHandOffManager.java,467,Map<String, Integer> result = new HashMap<String, Integer>();
src/java/org/apache/cassandra/db/HintedHandOffManager.java,470,if (row.cf == null) // ignore removed rows
src/java/org/apache/cassandra/db/HintedHandOffManager.java,471,continue;
src/java/org/apache/cassandra/db/HintedHandOffManager.java,473,int count = row.cf.getColumnCount();
src/java/org/apache/cassandra/db/HintedHandOffManager.java,475,result.put(tokenFactory.toString(row.key.token), count);
src/java/org/apache/cassandra/db/HintedHandOffManager.java,477,return result;
src/java/org/apache/cassandra/db/HintedHandOffManagerMBean.java,45,public Map<String, Integer> countPendingHints();
src/java/org/apache/cassandra/hadoop/BulkRecordWriter.java,252,private final Map<String, Set<String>> knownCfs = new HashMap<String, Set<String>>();
src/java/org/apache/cassandra/hadoop/BulkRecordWriter.java,320,cfs.add(cfDef.name);
src/java/org/apache/cassandra/hadoop/BulkRecordWriter.java,335,Set<String> cfs = knownCfs.get(keyspace);
src/java/org/apache/cassandra/hadoop/BulkRecordWriter.java,336,return cfs != null && cfs.contains(cfName);
src/java/org/apache/cassandra/io/sstable/SSTableLoader.java,279,public abstract boolean validateColumnFamily(String keyspace, String cfName);
src/java/org/apache/cassandra/service/StorageService.java,3059,return Schema.instance.getCFMetaData(keyspace, cfName) != null;
src/java/org/apache/cassandra/tools/BulkLoader.java,148,completed++;
src/java/org/apache/cassandra/db/compaction/Scrubber.java,132,outputHandler.debug(String.format("row %s is %s bytes", ByteBufferUtil.bytesToHex(key.key), dataSize));
src/java/org/apache/cassandra/db/compaction/Scrubber.java,161,outputHandler.debug(String.format("Index doublecheck: row %s is %s bytes", ByteBufferUtil.bytesToHex(currentIndexKey),  dataSizeFromIndex));
src/java/org/apache/cassandra/config/CFMetaData.java,71,public final static ByteBuffer DEFAULT_KEY_NAME = ByteBufferUtil.bytes("KEY");
src/java/org/apache/cassandra/config/CFMetaData.java,220,public CFMetaData defaultValidator(AbstractType<?> prop) {defaultValidator = prop; updateCfDef(); return this;}
src/java/org/apache/cassandra/config/CFMetaData.java,221,public CFMetaData keyValidator(AbstractType<?> prop) {keyValidator = prop; updateCfDef(); return this;}
src/java/org/apache/cassandra/config/CFMetaData.java,228,public CFMetaData columnMetadata(Map<ByteBuffer,ColumnDefinition> prop) {column_metadata = prop; updateCfDef(); return this;}
src/java/org/apache/cassandra/config/CFMetaData.java,346,.reloadSecondaryIndexMetadata(parent);
src/java/org/apache/cassandra/config/CFMetaData.java,766,updateCfDef();
src/java/org/apache/cassandra/config/CFMetaData.java,1055,try
src/java/org/apache/cassandra/config/CFMetaData.java,1061,throw new ConfigurationException(msg + " alias must be UTF8");
src/java/org/apache/cassandra/cql/QueryProcessor.java,75,public static final String DEFAULT_KEY_NAME = bufferToString(CFMetaData.DEFAULT_KEY_NAME);
src/java/org/apache/cassandra/cql/QueryProcessor.java,137,String keyString = getKeyString(metadata);
src/java/org/apache/cassandra/cql/QueryProcessor.java,352,String realKeyAlias = bufferToString(cfm.getKeyName()).toUpperCase();
src/java/org/apache/cassandra/cql/QueryProcessor.java,517,thriftColumns.add(new Column(metadata.getKeyName()).setValue(row.key.key).setTimestamp(-1));
src/java/org/apache/cassandra/cql/QueryProcessor.java,518,result.schema.name_types.put(metadata.getKeyName(), TypeParser.getShortName(AsciiType.instance));
src/java/org/apache/cassandra/cql/QueryProcessor.java,519,result.schema.value_types.put(metadata.getKeyName(), TypeParser.getShortName(metadata.getKeyValidator()));
src/java/org/apache/cassandra/cql/QueryProcessor.java,540,String keyString = getKeyString(metadata);
src/java/org/apache/cassandra/cql/QueryProcessor.java,936,String keyString;
src/java/org/apache/cassandra/cql/QueryProcessor.java,937,try
src/java/org/apache/cassandra/cql/QueryProcessor.java,939,keyString = ByteBufferUtil.string(metadata.getKeyName());
src/java/org/apache/cassandra/cql/QueryProcessor.java,943,throw new AssertionError(e);
src/java/org/apache/cassandra/cql/QueryProcessor.java,945,return keyString;
src/java/org/apache/cassandra/cql/WhereClause.java,145,String realKeyAlias = null;
src/java/org/apache/cassandra/cql/WhereClause.java,146,try
src/java/org/apache/cassandra/cql/WhereClause.java,149,realKeyAlias = ByteBufferUtil.string(cfm.getKeyName()).toUpperCase();
src/java/org/apache/cassandra/cql/WhereClause.java,153,throw new RuntimeException(e);
src/java/org/apache/cassandra/cql3/CFDefinition.java,41,private static final String DEFAULT_KEY_ALIAS = "key";
src/java/org/apache/cassandra/cql3/CFDefinition.java,42,private static final String DEFAULT_COLUMN_ALIAS = "column";
src/java/org/apache/cassandra/cql3/CFDefinition.java,43,private static final String DEFAULT_VALUE_ALIAS = "value";
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,279,private Condition condition;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,303,logger.debug("parallel lazy deserialize from " + iter.getPath());
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,309,logger.debug("parallel eager deserialize from " + iter.getPath());
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,344,private final Condition condition;
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,374,wrapped.close();
src/java/org/apache/cassandra/db/compaction/ParallelCompactionIterable.java,375,condition.signal();
src/java/org/apache/cassandra/service/AbstractWriteResponseHandler.java,81,condition.signal();
src/java/org/apache/cassandra/service/ReadCallback.java,161,condition.signal();
src/java/org/apache/cassandra/service/TruncateResponseHandler.java,74,condition.signal();
src/java/org/apache/cassandra/utils/SimpleCondition.java,61,set = true;
src/java/org/apache/cassandra/utils/SimpleCondition.java,62,notify();
src/java/org/apache/cassandra/utils/FBUtilities.java,336,InputStream in = FBUtilities.class.getClassLoader().getResourceAsStream("org/apache/cassandra/config/version.properties");
tools/stress/src/org/apache/cassandra/stress/Session.java,191,String node = null;
tools/stress/src/org/apache/cassandra/stress/Session.java,197,tmpNodes.add(node);
tools/stress/src/org/apache/cassandra/stress/Session.java,199,nodes = tmpNodes.toArray(new String[tmpNodes.size()]);
tools/stress/src/org/apache/cassandra/stress/Session.java,200,in.close();
src/java/org/apache/cassandra/db/CollationController.java,168,ColumnFamily returnCF = container.cloneMeShallow();
src/java/org/apache/cassandra/io/sstable/IndexSummary.java,35,public class IndexSummary
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,517,return indexSummary.getKeys();
src/java/org/apache/cassandra/tools/SSTableExport.java,228,outs.flush();
src/java/org/apache/cassandra/tools/SSTableExport.java,411,enumeratekeys(descriptor, System.out);
src/java/org/apache/cassandra/tools/SSTableExport.java,413,else
src/java/org/apache/cassandra/tools/SSTableExport.java,416,export(descriptor, System.out, Arrays.asList(keys), excludes);
src/java/org/apache/cassandra/tools/SSTableExport.java,417,else
src/java/org/apache/cassandra/tools/SSTableExport.java,418,export(descriptor, excludes);
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,511,UUID uuid = MigrationManager.getLastMigrationId();
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,515,logger.info("Couldn't detect any schema definitions in local storage.");
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,518,logger.info("Found table data in data directories. Consider using the CLI to define your schema.");
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,519,else
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,520,logger.info("To create keyspaces and column families, see 'help create keyspace' in the CLI, or set up a schema using the thrift system_* calls.");
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,524,logger.info("Loading schema version " + uuid.toString());
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,525,Collection<KSMetaData> tableDefs = DefsTable.loadFromStorage(uuid);
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,530,logger.warn("No schema definitions were found in local storage.");
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,532,else // if non-system tables where found, trying to load them
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,534,Schema.instance.load(tableDefs);
src/java/org/apache/cassandra/db/DefsTable.java,167,fixSchemaNanoTimestamp(SystemTable.SCHEMA_KEYSPACES_CF);
src/java/org/apache/cassandra/db/DefsTable.java,168,fixSchemaNanoTimestamp(SystemTable.SCHEMA_COLUMNFAMILIES_CF);
src/java/org/apache/cassandra/db/DefsTable.java,169,fixSchemaNanoTimestamp(SystemTable.SCHEMA_COLUMNS_CF);
src/java/org/apache/cassandra/db/DefsTable.java,176,boolean needsCleanup = false;
src/java/org/apache/cassandra/db/DefsTable.java,179,List<Row> rows = SystemTable.serializedSchema(columnFamily);
src/java/org/apache/cassandra/db/DefsTable.java,181,row_check_loop:
src/java/org/apache/cassandra/db/DefsTable.java,185,continue;
src/java/org/apache/cassandra/db/DefsTable.java,191,needsCleanup = true;
src/java/org/apache/cassandra/db/DefsTable.java,194,break row_check_loop;
src/java/org/apache/cassandra/db/DefsTable.java,200,return;
src/java/org/apache/cassandra/db/DefsTable.java,202,logger.info("Fixing timestamps of schema ColumnFamily " + columnFamily + "...");
src/java/org/apache/cassandra/db/DefsTable.java,220,continue;
src/java/org/apache/cassandra/db/DefsTable.java,230,mutation.apply();
src/java/org/apache/cassandra/db/Directories.java,405,return false;
src/java/org/apache/cassandra/db/Directories.java,407,boolean hasSystemKeyspace = false;
src/java/org/apache/cassandra/db/Directories.java,411,hasSystemKeyspace |= (systemDir.exists() && systemDir.isDirectory());
src/java/org/apache/cassandra/db/Directories.java,414,return false;
src/java/org/apache/cassandra/db/Directories.java,418,return false;
src/java/org/apache/cassandra/db/Directories.java,421,int longestLocation = -1;
src/java/org/apache/cassandra/db/Directories.java,437,String ksname = ksm.name;
src/java/org/apache/cassandra/db/Directories.java,440,String cfname = entry.getKey();
src/java/org/apache/cassandra/db/Directories.java,446,throw new RuntimeException(String.format("Starting with 1.1, keyspace names and column family " +
src/java/org/apache/cassandra/db/Directories.java,455,throw new RuntimeException("Starting with 1.1, the keyspace name is included in data filenames.  For "
src/java/org/apache/cassandra/db/Directories.java,456,+ ksm.name + "/" + cfname + ", this puts you over the largest possible filename of 255 characters");
src/java/org/apache/cassandra/db/Directories.java,461,return true;
src/java/org/apache/cassandra/db/Directories.java,474,logger.info("Upgrade from pre-1.1 version detected: migrating sstables to new directory layout");
src/java/org/apache/cassandra/db/Directories.java,479,continue;
src/java/org/apache/cassandra/db/Directories.java,487,continue;
src/java/org/apache/cassandra/db/Directories.java,489,File[] files = ksDir.listFiles();
src/java/org/apache/cassandra/db/Directories.java,493,migrateFile(file, ksDir, null);
src/java/org/apache/cassandra/db/Directories.java,496,migrateSnapshots(ksDir);
src/java/org/apache/cassandra/db/Directories.java,497,migrateBackups(ksDir);
src/java/org/apache/cassandra/db/Directories.java,505,File snapshotDir = new File(ksDir, SNAPSHOT_SUBDIR);
src/java/org/apache/cassandra/db/Directories.java,507,return;
src/java/org/apache/cassandra/db/Directories.java,509,File[] snapshots = snapshotDir.listFiles();
src/java/org/apache/cassandra/db/Directories.java,515,continue;
src/java/org/apache/cassandra/db/Directories.java,517,File[] files = snapshot.listFiles();
src/java/org/apache/cassandra/db/Directories.java,521,migrateFile(f, ksDir, join(SNAPSHOT_SUBDIR, snapshot.getName()));
src/java/org/apache/cassandra/db/Directories.java,524,logger.info("Old snapsot directory {} not deleted by migraation as it is not empty", snapshot);
src/java/org/apache/cassandra/db/Directories.java,528,logger.info("Old directory {} not deleted by migration as it is not empty", snapshotDir);
src/java/org/apache/cassandra/db/Directories.java,533,File backupDir = new File(ksDir, BACKUPS_SUBDIR);
src/java/org/apache/cassandra/db/Directories.java,535,return;
src/java/org/apache/cassandra/db/Directories.java,537,File[] files = backupDir.listFiles();
src/java/org/apache/cassandra/db/Directories.java,541,migrateFile(f, ksDir, BACKUPS_SUBDIR);
src/java/org/apache/cassandra/db/Directories.java,544,logger.info("Old directory {} not deleted by migration as it is not empty", backupDir);
src/java/org/apache/cassandra/db/IndexScanCommand.java,20,package org.apache.cassandra.db;
src/java/org/apache/cassandra/db/IndexScanCommand.java,25,import org.apache.cassandra.dht.AbstractBounds;
src/java/org/apache/cassandra/db/IndexScanCommand.java,26,import org.apache.cassandra.io.IVersionedSerializer;
src/java/org/apache/cassandra/db/IndexScanCommand.java,32,import org.apache.cassandra.thrift.IndexClause;
src/java/org/apache/cassandra/db/IndexScanCommand.java,33,import org.apache.cassandra.thrift.SlicePredicate;
src/java/org/apache/cassandra/db/IndexScanCommand.java,34,import org.apache.cassandra.utils.FBUtilities;
src/java/org/apache/cassandra/db/IndexScanCommand.java,35,import org.apache.thrift.TDeserializer;
src/java/org/apache/cassandra/db/IndexScanCommand.java,36,import org.apache.thrift.TSerializer;
src/java/org/apache/cassandra/db/IndexScanCommand.java,41,public static final IndexScanCommandSerializer serializer = new IndexScanCommandSerializer();
src/java/org/apache/cassandra/db/IndexScanCommand.java,43,public final String keyspace;
src/java/org/apache/cassandra/db/IndexScanCommand.java,44,public final String column_family;
src/java/org/apache/cassandra/db/IndexScanCommand.java,45,public final IndexClause index_clause;
src/java/org/apache/cassandra/db/IndexScanCommand.java,46,public final SlicePredicate predicate;
src/java/org/apache/cassandra/db/IndexScanCommand.java,47,public final AbstractBounds<RowPosition> range;
src/java/org/apache/cassandra/db/IndexScanCommand.java,52,this.keyspace = keyspace;
src/java/org/apache/cassandra/db/IndexScanCommand.java,53,this.column_family = column_family;
src/java/org/apache/cassandra/db/IndexScanCommand.java,54,this.index_clause = index_clause;
src/java/org/apache/cassandra/db/IndexScanCommand.java,55,this.predicate = predicate;
src/java/org/apache/cassandra/db/IndexScanCommand.java,56,this.range = range;
src/java/org/apache/cassandra/db/IndexScanCommand.java,83,static class IndexScanCommandSerializer implements IVersionedSerializer<IndexScanCommand>
src/java/org/apache/cassandra/db/IndexScanCommand.java,85,public void serialize(IndexScanCommand o, DataOutput out, int version) throws IOException
src/java/org/apache/cassandra/db/IndexScanCommand.java,87,out.writeUTF(o.keyspace);
src/java/org/apache/cassandra/db/IndexScanCommand.java,88,out.writeUTF(o.column_family);
src/java/org/apache/cassandra/db/IndexScanCommand.java,89,TSerializer ser = new TSerializer(new TBinaryProtocol.Factory());
src/java/org/apache/cassandra/db/IndexScanCommand.java,90,FBUtilities.serialize(ser, o.index_clause, out);
src/java/org/apache/cassandra/db/IndexScanCommand.java,91,FBUtilities.serialize(ser, o.predicate, out);
src/java/org/apache/cassandra/db/IndexScanCommand.java,95,public IndexScanCommand deserialize(DataInput in, int version) throws IOException
src/java/org/apache/cassandra/db/IndexScanCommand.java,97,String keyspace = in.readUTF();
src/java/org/apache/cassandra/db/IndexScanCommand.java,98,String columnFamily = in.readUTF();
src/java/org/apache/cassandra/db/IndexScanCommand.java,100,TDeserializer dser = new TDeserializer(new TBinaryProtocol.Factory());
src/java/org/apache/cassandra/db/IndexScanCommand.java,102,FBUtilities.deserialize(dser, indexClause, in);
src/java/org/apache/cassandra/db/IndexScanCommand.java,104,FBUtilities.deserialize(dser, predicate, in);
src/java/org/apache/cassandra/db/IndexScanCommand.java,106,return new IndexScanCommand(keyspace, columnFamily, indexClause, predicate, range);
src/java/org/apache/cassandra/db/IndexScanCommand.java,111,throw new UnsupportedOperationException();
src/java/org/apache/cassandra/db/RangeSliceCommand.java,168,assert row_filter != null && !row_filter.isEmpty();
src/java/org/apache/cassandra/db/RangeSliceCommand.java,170,throw new IllegalStateException("Cannot proceed with range query as the remote end has a version < 1.1. Please update the full cluster first.");
src/java/org/apache/cassandra/db/RangeSliceCommand.java,172,CFMetaData cfm = Schema.instance.getCFMetaData(keyspace, column_family);
src/java/org/apache/cassandra/db/RangeSliceCommand.java,173,try
src/java/org/apache/cassandra/db/RangeSliceCommand.java,176,throw new IllegalStateException("Cannot proceed with non-indexed query as the remote end has a version < 1.1. Please update the full cluster first.");
src/java/org/apache/cassandra/db/RangeSliceCommand.java,180,throw new RuntimeException(e);
src/java/org/apache/cassandra/db/RangeSliceCommand.java,183,RowPosition start = range.left;
src/java/org/apache/cassandra/db/RangeSliceCommand.java,184,ByteBuffer startKey = ByteBufferUtil.EMPTY_BYTE_BUFFER;
src/java/org/apache/cassandra/db/RangeSliceCommand.java,187,startKey = ((DecoratedKey)start).key;
src/java/org/apache/cassandra/db/RangeSliceCommand.java,190,IndexClause clause = new IndexClause(row_filter, startKey, maxResults);
src/java/org/apache/cassandra/db/RangeSliceCommand.java,215,else
src/java/org/apache/cassandra/db/RangeSliceCommand.java,253,rowFilter = new ArrayList<IndexExpression>(filterCount);
src/java/org/apache/cassandra/db/RangeSliceCommand.java,258,rowFilter.add(expr);
src/java/org/apache/cassandra/db/RangeSliceCommand.java,265,boolean isPaging = false;
src/java/org/apache/cassandra/db/SystemTable.java,86,DefsTable.fixSchemaNanoTimestamps();
src/java/org/apache/cassandra/db/SystemTable.java,133,try
src/java/org/apache/cassandra/db/SystemTable.java,139,throw new RuntimeException(e);
src/java/org/apache/cassandra/db/compaction/Scrubber.java,130,key = SSTableReader.decodeKey(sstable.partitioner, sstable.descriptor, ByteBufferUtil.readWithShortLength(dataFile));
src/java/org/apache/cassandra/db/compaction/Scrubber.java,203,key = SSTableReader.decodeKey(sstable.partitioner, sstable.descriptor, currentIndexKey);
src/java/org/apache/cassandra/dht/AbstractBounds.java,119,range = range.toTokenBounds();
src/java/org/apache/cassandra/dht/LocalPartitioner.java,42,return decorateKey(key);
src/java/org/apache/cassandra/dht/RandomPartitioner.java,24,import java.nio.charset.CharacterCodingException;
src/java/org/apache/cassandra/dht/RandomPartitioner.java,53,int splitPoint = -1;
src/java/org/apache/cassandra/dht/RandomPartitioner.java,58,splitPoint = i;
src/java/org/apache/cassandra/dht/RandomPartitioner.java,59,break;
src/java/org/apache/cassandra/dht/RandomPartitioner.java,62,assert splitPoint != -1;
src/java/org/apache/cassandra/dht/RandomPartitioner.java,65,String token = null;
src/java/org/apache/cassandra/dht/RandomPartitioner.java,66,try
src/java/org/apache/cassandra/dht/RandomPartitioner.java,68,token = ByteBufferUtil.string(fromdisk, fromdisk.position(), splitPoint - fromdisk.position());
src/java/org/apache/cassandra/dht/RandomPartitioner.java,72,throw new RuntimeException(e);
src/java/org/apache/cassandra/dht/RandomPartitioner.java,74,ByteBuffer key = fromdisk.duplicate();
src/java/org/apache/cassandra/dht/RandomPartitioner.java,75,key.position(splitPoint + 1);
src/java/org/apache/cassandra/io/sstable/Descriptor.java,137,buff.append(version).append(separator);
src/java/org/apache/cassandra/io/sstable/Descriptor.java,194,nexttok = st.nextToken();
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,119,try
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,126,throw (EOFException) e;
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,128,logger.debug("Invalid bloom filter in {}; will rebuild it", sstable);
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,131,try
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,133,IndexHelper.deserializeIndex(file);
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,137,logger.debug("Invalid row summary in {}; will rebuild it", sstable);
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,139,file.seek(this.dataStart);
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,140,inputWithTracker.reset(0);
src/java/org/apache/cassandra/io/sstable/SSTableMetadata.java,219,: ReplayPosition.NONE;
src/java/org/apache/cassandra/io/sstable/SSTableMetadata.java,224,replayPosition = ReplayPosition.NONE;
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,475,bf = LegacyBloomFilter.alwaysMatchingBloomFilter();
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,746,DecoratedKey keyInDisk = SSTableReader.decodeKey(partitioner, descriptor, ByteBufferUtil.readWithShortLength(fdi));
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,912,public static long readRowSize(DataInput in, Descriptor d) throws IOException
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,915,return in.readInt();
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,916,return in.readLong();
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,935,return p.convertFromDiskFormat(bytes);
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,936,return p.decorateKey(bytes);
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,19,package org.apache.cassandra.service;
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,21,import java.util.List;
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,23,import org.slf4j.Logger;
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,24,import org.slf4j.LoggerFactory;
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,26,import org.apache.cassandra.db.*;
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,28,import org.apache.cassandra.net.IVerbHandler;
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,30,import org.apache.cassandra.net.MessagingService;
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,35,private static final Logger logger = LoggerFactory.getLogger(IndexScanVerbHandler.class);
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,39,try
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,42,ColumnFamilyStore cfs = Table.open(command.keyspace).getColumnFamilyStore(command.column_family);
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,43,List<Row> rows = cfs.search(command.index_clause.expressions,
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,44,command.range,
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,45,command.index_clause.count,
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,47,RangeSliceReply reply = new RangeSliceReply(rows);
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,55,throw new RuntimeException(ex);
src/java/org/apache/cassandra/service/MigrationManager.java,225,continue; // we've delt with localhost already
src/java/org/apache/cassandra/service/MigrationManager.java,229,continue;
src/java/org/apache/cassandra/service/MigrationManager.java,379,ColumnFamilyStore cfStore = defs.getColumnFamilyStore(DefsTable.OLD_SCHEMA_CF);
src/java/org/apache/cassandra/service/MigrationManager.java,381,ColumnFamily cf = cfStore.getColumnFamily(filter);
src/java/org/apache/cassandra/service/MigrationManager.java,383,return null;
src/java/org/apache/cassandra/service/MigrationManager.java,384,else
src/java/org/apache/cassandra/service/MigrationManager.java,385,return UUIDGen.getUUID(cf.getColumn(LAST_MIGRATION_KEY).value());
src/java/org/apache/cassandra/service/StorageService.java,333,Gossiper.instance.start((int)(System.currentTimeMillis() / 1000));
src/java/org/apache/cassandra/service/StorageService.java,572,new Object[]{ DatabaseDescriptor.isAutoBootstrap(),
src/java/org/apache/cassandra/service/StorageService.java,573,SystemTable.bootstrapInProgress(),
src/java/org/apache/cassandra/service/StorageService.java,574,SystemTable.bootstrapComplete(),
src/java/org/apache/cassandra/service/StorageService.java,575,DatabaseDescriptor.getSeeds().contains(FBUtilities.getBroadcastAddress())});
src/java/org/apache/cassandra/streaming/IncomingStreamReader.java,124,key = SSTableReader.decodeKey(StorageService.getPartitioner(), localFile.desc, ByteBufferUtil.readWithShortLength(in));
src/java/org/apache/cassandra/streaming/IncomingStreamReader.java,125,long dataSize = SSTableReader.readRowSize(in, localFile.desc);
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,19,package org.apache.cassandra.utils;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,21,import java.nio.ByteBuffer;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,22,import java.util.BitSet;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,24,import org.slf4j.Logger;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,25,import org.slf4j.LoggerFactory;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,29,private static final int EXCESS = 20;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,30,private static final Logger logger = LoggerFactory.getLogger(LegacyBloomFilter.class);
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,42,hashCount = hashes;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,48,long numBits = numElements * bucketsPer + EXCESS;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,49,return new BitSet((int)Math.min(Integer.MAX_VALUE, numBits));
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,58,int maxBucketsPerElement = Math.max(1, BloomCalculations.maxBucketsPerElement(numElements));
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,59,int bucketsPerElement = Math.min(targetBucketsPerElem, maxBucketsPerElement);
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,62,logger.warn(String.format("Cannot provide an optimal LegacyBloomFilter for %d elements (%d/%d buckets per element).",
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,63,numElements, bucketsPerElement, targetBucketsPerElem));
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,65,BloomCalculations.BloomSpecification spec = BloomCalculations.computeBloomSpec(bucketsPerElement);
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,66,return new LegacyBloomFilter(spec.K, bucketsFor(numElements, spec.bucketsPerElement));
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,77,assert maxFalsePosProbability <= 1.0 : "Invalid probability";
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,78,int bucketsPerElement = BloomCalculations.maxBucketsPerElement(numElements);
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,79,BloomCalculations.BloomSpecification spec = BloomCalculations.computeBloomSpec(bucketsPerElement, maxFalsePosProbability);
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,80,return new LegacyBloomFilter(spec.K, bucketsFor(numElements, spec.bucketsPerElement));
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,99,return false;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,102,return true;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,108,This is a general purpose API.
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,125,int n = 0;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,130,n++;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,133,return n;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,139,BitSet set = new BitSet(64);
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,140,set.set(0, 64);
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,141,return new LegacyBloomFilter(1, set);
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,146,return LegacyBloomFilter.getHashBuckets(key, hashCount, buckets());
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,156,int[] result = new int[hashCount];
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,157,int hash1 = MurmurHash.hash32(b, b.position(), b.remaining(), 0);
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,158,int hash2 = MurmurHash.hash32(b, b.position(), b.remaining(), hash1);
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,161,result[i] = Math.abs((hash1 + i * hash2) % max);
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,163,return result;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,166,public BitSet getBitSet(){
src/java/org/apache/cassandra/utils/LegacyBloomFilterSerializer.java,24,import java.io.*;
src/java/org/apache/cassandra/utils/LegacyBloomFilterSerializer.java,25,import java.util.BitSet;
src/java/org/apache/cassandra/utils/LegacyBloomFilterSerializer.java,27,public class LegacyBloomFilterSerializer
src/java/org/apache/cassandra/utils/LegacyBloomFilterSerializer.java,30,throws IOException
src/java/org/apache/cassandra/utils/LegacyBloomFilterSerializer.java,32,throw new UnsupportedOperationException("Shouldn't be serializing legacy bloom filters");
src/java/org/apache/cassandra/utils/LegacyBloomFilterSerializer.java,43,try
src/java/org/apache/cassandra/utils/LegacyBloomFilterSerializer.java,45,BitSet bs = (BitSet) ois.readObject();
src/java/org/apache/cassandra/utils/LegacyBloomFilterSerializer.java,46,return new LegacyBloomFilter(hashes, bs);
src/java/org/apache/cassandra/utils/LegacyBloomFilterSerializer.java,49,throw new RuntimeException(e);
src/java/org/apache/cassandra/utils/LegacyBloomFilterSerializer.java,55,throw new UnsupportedOperationException();
src/java/org/apache/cassandra/db/compaction/LeveledCompactionStrategy.java,80,manifest = LeveledManifest.create(cfs, this.maxSSTableSizeInMB);
src/java/org/apache/cassandra/db/compaction/LeveledManifest.java,89,return create(cfs, maxSSTableSize, cfs.getSSTables());
src/java/org/apache/cassandra/db/compaction/LeveledManifest.java,94,LeveledManifest manifest = new LeveledManifest(cfs, maxSSTableSize);
src/java/org/apache/cassandra/db/compaction/SizeTieredCompactionStrategy.java,35,protected static final long DEFAULT_MIN_SSTABLE_SIZE = 50L * 1024L * 1024L;
src/java/org/apache/cassandra/db/compaction/SizeTieredCompactionStrategy.java,36,protected static final String MIN_SSTABLE_SIZE_KEY = "min_sstable_size";
src/java/org/apache/cassandra/db/compaction/SizeTieredCompactionStrategy.java,37,protected long minSSTableSize;
src/java/org/apache/cassandra/db/compaction/SizeTieredCompactionStrategy.java,44,String optionValue = options.get(MIN_SSTABLE_SIZE_KEY);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1990,ReplayPosition rp = ReplayPosition.getReplayPosition(sstables);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1991,SSTableMetadata.Collector sstableMetadataCollector = SSTableMetadata.createCollector().replayPosition(rp);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1998,sstableMetadataCollector.addAncestor(sstable.descriptor.generation);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,2002,sstableMetadataCollector.addAncestor(i);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,2006,return new SSTableWriter(getTempSSTablePath(location), estimatedRows, metadata, partitioner, sstableMetadataCollector);
src/java/org/apache/cassandra/db/compaction/AbstractCompactionStrategy.java,108,List<SSTableReader> filteredCandidates = new ArrayList<SSTableReader>();
src/java/org/apache/cassandra/db/compaction/AbstractCompactionStrategy.java,113,filteredCandidates.add(candidate);
src/java/org/apache/cassandra/db/compaction/AbstractCompactionStrategy.java,116,return filteredCandidates;
src/java/org/apache/cassandra/db/compaction/LeveledManifest.java,327,return candidates;
src/java/org/apache/cassandra/db/compaction/LeveledManifest.java,331,return Collections.emptyList();
src/java/org/apache/cassandra/db/compaction/LeveledManifest.java,348,new Object[] {i, generations[i].size(), SSTableReader.getTotalBytes(generations[i]), this});
src/java/org/apache/cassandra/db/compaction/SizeTieredCompactionStrategy.java,122,List<Pair<SSTableReader, Long>> tableLengthPairs = new ArrayList<Pair<SSTableReader, Long>>(collection.size());
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,25,import java.util.concurrent.atomic.AtomicInteger;
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,27,import java.util.concurrent.*;
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,43,import org.apache.cassandra.db.*;
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,46,import org.apache.cassandra.dht.AbstractBounds;
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,47,import org.apache.cassandra.dht.IPartitioner;
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,48,import org.apache.cassandra.dht.Range;
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,49,import org.apache.cassandra.dht.Token;
src/java/org/apache/cassandra/cql3/statements/DeleteStatement.java,32,import org.apache.cassandra.db.RowMutation;
src/java/org/apache/cassandra/db/AbstractThreadUnsafeSortedColumns.java,27,public abstract class AbstractThreadUnsafeSortedColumns implements ISortedColumns
src/java/org/apache/cassandra/db/AbstractThreadUnsafeSortedColumns.java,29,private DeletionInfo deletionInfo;
src/java/org/apache/cassandra/db/AbstractThreadUnsafeSortedColumns.java,102,return size() == 0;
src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java,35,public class ArrayBackedSortedColumns extends AbstractThreadUnsafeSortedColumns implements ISortedColumns
src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java,37,private final AbstractType<?> comparator;
src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java,45,return new ArrayBackedSortedColumns(comparator, insertReversed);
src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java,50,return new ArrayBackedSortedColumns(sortedMap.values(), (AbstractType<?>)sortedMap.comparator(), insertReversed);
src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java,56,return factory;
src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java,61,super();
src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java,62,this.comparator = comparator;
src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java,69,this.comparator = comparator;
src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java,76,return factory();
src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java,81,return comparator;
src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java,86,return new ArrayBackedSortedColumns(columns, comparator, reversed);
src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java,140,resolveAgainst(size() - 1, column, allocator);
src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java,206,delete(cm.getDeletionInfo());
src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java,233,resolveAgainst(size() - 1, transformation.apply(otherColumn), allocator);
src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java,278,int pos = binarySearch(name);
src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java,280,columns.remove(pos);
src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java,296,return new ColumnNamesSet();
src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java,397,private class ColumnNamesSet extends AbstractSet<ByteBuffer> implements SortedSet<ByteBuffer>
src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java,401,return columns.size();
src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java,411,return outerIterator.hasNext();
src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java,416,return outerIterator.next().name();
src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java,421,outerIterator.remove();
src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java,428,return getComparator();
src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java,433,final ArrayBackedSortedColumns outerList = ArrayBackedSortedColumns.this;
src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java,435,throw new NoSuchElementException();
src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java,436,return outerList.columns.get(outerList.reversed ? size() - 1 : 0).name();
src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java,441,final ArrayBackedSortedColumns outerList = ArrayBackedSortedColumns.this;
src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java,443,throw new NoSuchElementException();
src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java,444,return outerList.columns.get(outerList.reversed ? 0 : size() - 1).name();
src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java,456,throw new UnsupportedOperationException();
src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java,462,throw new UnsupportedOperationException();
src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java,468,throw new UnsupportedOperationException();
src/java/org/apache/cassandra/db/AtomicSortedColumns.java,48,public class AtomicSortedColumns implements ISortedColumns
src/java/org/apache/cassandra/db/AtomicSortedColumns.java,56,return new AtomicSortedColumns(comparator);
src/java/org/apache/cassandra/db/AtomicSortedColumns.java,61,return new AtomicSortedColumns(sortedMap);
src/java/org/apache/cassandra/db/AtomicSortedColumns.java,67,return factory;
src/java/org/apache/cassandra/db/AtomicSortedColumns.java,72,this(new Holder(comparator));
src/java/org/apache/cassandra/db/AtomicSortedColumns.java,77,this(new Holder(columns));
src/java/org/apache/cassandra/db/AtomicSortedColumns.java,97,return new AtomicSortedColumns(ref.get().cloneMe());
src/java/org/apache/cassandra/db/AtomicSortedColumns.java,218,Holder current, modified;
src/java/org/apache/cassandra/db/AtomicSortedColumns.java,219,do
src/java/org/apache/cassandra/db/AtomicSortedColumns.java,221,current = ref.get();
src/java/org/apache/cassandra/db/AtomicSortedColumns.java,222,modified = current.cloneMe();
src/java/org/apache/cassandra/db/AtomicSortedColumns.java,223,modified.map.remove(name);
src/java/org/apache/cassandra/db/AtomicSortedColumns.java,225,while (!ref.compareAndSet(current, modified));
src/java/org/apache/cassandra/db/AtomicSortedColumns.java,276,return getSortedColumns().iterator();
src/java/org/apache/cassandra/db/CollationController.java,84,ColumnFamily container = ColumnFamily.create(cfs.metadata, factory, filter.filter.isReversed());
src/java/org/apache/cassandra/db/CollationController.java,234,ColumnFamily returnCF = ColumnFamily.create(cfs.metadata, factory, filter.filter.isReversed());
src/java/org/apache/cassandra/db/ColumnFamily.java,33,import org.apache.cassandra.db.marshal.MarshalException;
src/java/org/apache/cassandra/db/ColumnFamily.java,44,private final CFMetaData cfm;
src/java/org/apache/cassandra/db/ColumnFamily.java,53,return create(Schema.instance.getCFMetaData(cfId));
src/java/org/apache/cassandra/db/ColumnFamily.java,58,return create(Schema.instance.getCFMetaData(cfId), factory);
src/java/org/apache/cassandra/db/ColumnFamily.java,63,return create(Schema.instance.getCFMetaData(tableName, cfName));
src/java/org/apache/cassandra/db/ColumnFamily.java,68,return create(cfm, TreeMapBackedSortedColumns.factory());
src/java/org/apache/cassandra/db/ColumnFamily.java,73,return create(cfm, factory, false);
src/java/org/apache/cassandra/db/ColumnFamily.java,78,return new ColumnFamily(cfm, factory.create(cfm.comparator, reversedInsertOrder));
src/java/org/apache/cassandra/db/ColumnFamily.java,84,assert cfm != null;
src/java/org/apache/cassandra/db/ColumnFamily.java,85,this.cfm = cfm;
src/java/org/apache/cassandra/db/ColumnFamily.java,90,ColumnFamily cf = ColumnFamily.create(cfm, factory, reversedInsertOrder);
src/java/org/apache/cassandra/db/ColumnFamily.java,97,return cloneMeShallow(columns.getFactory(), columns.isInsertReversed());
src/java/org/apache/cassandra/db/ColumnFamily.java,108,return cfm.cfType;
src/java/org/apache/cassandra/db/ColumnFamily.java,113,ColumnFamily cf = new ColumnFamily(cfm, columns.cloneMe());
src/java/org/apache/cassandra/db/ColumnFamily.java,114,cf.delete(this);
src/java/org/apache/cassandra/db/ColumnFamily.java,115,return cf;
src/java/org/apache/cassandra/db/ColumnFamily.java,120,return cfm.cfId;
src/java/org/apache/cassandra/db/ColumnFamily.java,128,return cfm;
src/java/org/apache/cassandra/db/ColumnFamily.java,219,columns.clear();
src/java/org/apache/cassandra/db/ColumnFamily.java,229,ColumnFamily cfDiff = ColumnFamily.create(cfm);
src/java/org/apache/cassandra/db/ColumnFamily.java,285,.append(columns).toHashCode();
src/java/org/apache/cassandra/db/ColumnFamily.java,300,&& ByteBufferUtil.compareUnsigned(digest(this), digest(comparison)) == 0;
src/java/org/apache/cassandra/db/ColumnFamily.java,307,CFMetaData cfm = metadata();
src/java/org/apache/cassandra/db/ColumnFamily.java,308,sb.append(cfm == null ? "<anonymous>" : cfm.cfName);
src/java/org/apache/cassandra/db/ColumnFamily.java,313,sb.append(" [").append(getComparator().getColumnsString(getSortedColumns())).append("])");
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1240,ColumnFamily cf = cached.cloneMeShallow(ArrayBackedSortedColumns.factory(), filter.filter.isReversed());
src/java/org/apache/cassandra/db/DefsTable.java,285,keyspaces = new ArrayList<KSMetaData>(columns.size());
src/java/org/apache/cassandra/db/ISortedColumns.java,18,package org.apache.cassandra.db;
src/java/org/apache/cassandra/db/ISortedColumns.java,20,import java.nio.ByteBuffer;
src/java/org/apache/cassandra/db/ISortedColumns.java,21,import java.util.Collection;
src/java/org/apache/cassandra/db/ISortedColumns.java,22,import java.util.Iterator;
src/java/org/apache/cassandra/db/ISortedColumns.java,23,import java.util.SortedMap;
src/java/org/apache/cassandra/db/ISortedColumns.java,24,import java.util.SortedSet;
src/java/org/apache/cassandra/db/ISortedColumns.java,26,import com.google.common.base.Function;
src/java/org/apache/cassandra/db/ISortedColumns.java,28,import org.apache.cassandra.db.marshal.AbstractType;
src/java/org/apache/cassandra/db/ISortedColumns.java,30,import org.apache.cassandra.utils.Allocator;
src/java/org/apache/cassandra/db/ISortedColumns.java,44,public ISortedColumns cloneMe();
src/java/org/apache/cassandra/db/ISortedColumns.java,49,public Factory getFactory();
src/java/org/apache/cassandra/db/ISortedColumns.java,51,public DeletionInfo getDeletionInfo();
src/java/org/apache/cassandra/db/ISortedColumns.java,52,public void delete(DeletionInfo info);
src/java/org/apache/cassandra/db/ISortedColumns.java,53,public void maybeResetDeletionTimes(int gcBefore);
src/java/org/apache/cassandra/db/ISortedColumns.java,91,public void removeColumn(ByteBuffer name);
src/java/org/apache/cassandra/db/ISortedColumns.java,96,public void clear();
src/java/org/apache/cassandra/db/ISortedColumns.java,109,public SortedSet<ByteBuffer> getColumnNames();
src/java/org/apache/cassandra/db/ISortedColumns.java,128,public int size();
src/java/org/apache/cassandra/db/ISortedColumns.java,133,public boolean isEmpty();
src/java/org/apache/cassandra/db/ISortedColumns.java,158,public interface Factory
src/java/org/apache/cassandra/db/ISortedColumns.java,168,public ISortedColumns create(AbstractType<?> comparator, boolean insertReversed);
src/java/org/apache/cassandra/db/Memtable.java,89,private final ConcurrentNavigableMap<RowPosition, ColumnFamily> columnFamilies = new ConcurrentSkipListMap<RowPosition, ColumnFamily>();
src/java/org/apache/cassandra/db/Memtable.java,130,return currentSize.get();
src/java/org/apache/cassandra/db/Memtable.java,186,long deepSize = meter.measure(columnFamilies);
src/java/org/apache/cassandra/db/Memtable.java,214,new Object[]{ cfs, cfs.liveRatio, newRatio, System.currentTimeMillis() - start, objects });
src/java/org/apache/cassandra/db/Memtable.java,229,ColumnFamily previous = columnFamilies.get(key);
src/java/org/apache/cassandra/db/Memtable.java,236,previous = columnFamilies.putIfAbsent(new DecoratedKey(key.token, allocator.clone(key.key)), empty);
src/java/org/apache/cassandra/db/Memtable.java,339,: columnFamilies.subMap(startWith, true, stopAt, true).entrySet().iterator();
src/java/org/apache/cassandra/db/Memtable.java,348,Map.Entry<RowPosition, ColumnFamily> entry = iter.next();
src/java/org/apache/cassandra/db/Memtable.java,351,return (Map.Entry<DecoratedKey, ColumnFamily>)(Object)entry; // yes, it's ugly
src/java/org/apache/cassandra/db/Memtable.java,363,return columnFamilies.isEmpty();
src/java/org/apache/cassandra/db/Memtable.java,436,return columnFamilies.get(key);
src/java/org/apache/cassandra/db/Memtable.java,441,columnFamilies.clear();
src/java/org/apache/cassandra/db/RowIteratorFactory.java,68,iterators.add(new ConvertToColumnIterator(filter, memtable.getEntryIterator(startWith, stopAt)));
src/java/org/apache/cassandra/db/RowIteratorFactory.java,89,this.returnCF = ColumnFamily.create(cfs.metadata);
src/java/org/apache/cassandra/db/RowIteratorFactory.java,129,private final Iterator<Map.Entry<DecoratedKey, ColumnFamily>> iter;
src/java/org/apache/cassandra/db/RowMutation.java,181,cf = ColumnFamily.create(cfm);
src/java/org/apache/cassandra/db/TreeMapBackedSortedColumns.java,32,public class TreeMapBackedSortedColumns extends AbstractThreadUnsafeSortedColumns implements ISortedColumns
src/java/org/apache/cassandra/db/TreeMapBackedSortedColumns.java,40,return new TreeMapBackedSortedColumns(comparator);
src/java/org/apache/cassandra/db/TreeMapBackedSortedColumns.java,45,return new TreeMapBackedSortedColumns(sortedMap);
src/java/org/apache/cassandra/db/TreeMapBackedSortedColumns.java,51,return factory;
src/java/org/apache/cassandra/db/TreeMapBackedSortedColumns.java,71,return factory();
src/java/org/apache/cassandra/db/TreeMapBackedSortedColumns.java,76,return new TreeMapBackedSortedColumns(map);
src/java/org/apache/cassandra/db/TreeMapBackedSortedColumns.java,156,map.remove(name);
src/java/org/apache/cassandra/db/columniterator/IndexedSliceReader.java,33,import org.apache.cassandra.db.ColumnFamily;
src/java/org/apache/cassandra/db/columniterator/IndexedSliceReader.java,34,import org.apache.cassandra.db.DecoratedKey;
src/java/org/apache/cassandra/db/columniterator/SSTableNamesIterator.java,34,import org.apache.cassandra.db.ColumnFamily;
src/java/org/apache/cassandra/db/columniterator/SSTableNamesIterator.java,35,import org.apache.cassandra.db.DecoratedKey;
src/java/org/apache/cassandra/db/columniterator/SimpleSliceReader.java,30,import org.apache.cassandra.db.ColumnFamily;
src/java/org/apache/cassandra/db/columniterator/SimpleSliceReader.java,31,import org.apache.cassandra.db.DecoratedKey;
src/java/org/apache/cassandra/db/compaction/LazilyCompactedRow.java,214,ColumnFamily container = emptyColumnFamily.cloneMeShallow();
src/java/org/apache/cassandra/db/filter/SliceQueryFilter.java,31,import com.google.common.collect.Lists;
src/java/org/apache/cassandra/db/index/keys/KeysSearcher.java,198,data = ColumnFamily.create(baseCfs.metadata);
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,146,columnFamily = ColumnFamily.create(metadata);
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,239,cf.validateColumnFields();
src/java/org/apache/cassandra/io/sstable/SSTableSimpleUnsortedWriter.java,104,previous = ColumnFamily.create(metadata, TreeMapBackedSortedColumns.factory());
src/java/org/apache/cassandra/io/sstable/SSTableSimpleWriter.java,92,return ColumnFamily.create(metadata, TreeMapBackedSortedColumns.factory());
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,236,ColumnFamily cf = ColumnFamily.create(metadata, ArrayBackedSortedColumns.factory());
src/java/org/apache/cassandra/tools/SSTableImport.java,252,ColumnFamily columnFamily = ColumnFamily.create(keyspace, cf);
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,314,throw new IllegalArgumentException("Unknown keyspace " + ksname);
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,318,Collection<Descriptor> descriptors = new ArrayList<Descriptor>(filenames.length);
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,320,String cfname = null;
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,334,throw new IllegalArgumentException("All provided sstables should be for the same column family");
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,337,descriptors.add(p.left);
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,340,ColumnFamilyStore cfs = Table.open(ksname).getColumnFamilyStore(cfname);
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,341,submitUserDefined(cfs, descriptors, getDefaultGcBefore(cfs));
src/java/org/apache/cassandra/db/compaction/CompactionManagerMBean.java,58,public void forceUserDefinedCompaction(String ksname, String dataFiles);
src/java/org/apache/cassandra/db/commitlog/CommitLogReplayer.java,172,checksum.update(serializedSize);
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,250,public ReplayPosition write(RowMutation rowMutation) throws IOException
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,254,markDirty(rowMutation, repPos);
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,256,Checksum checksum = new PureJavaCrc32();
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,259,checksum.update(serializedRow.length);
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,260,buffer.putInt(serializedRow.length);
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,263,buffer.put(serializedRow);
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,264,checksum.update(serializedRow, 0, serializedRow.length);
src/java/org/apache/cassandra/db/CounterColumn.java,110,assert column instanceof CounterColumn : "Wrong class type.";
