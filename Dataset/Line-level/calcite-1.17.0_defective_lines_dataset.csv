File,Line_number,SRC
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4014,SqlNode selectItem = selectItems.get(i);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,67,final List<AbstractConverter> abstractConverters = new ArrayList<>();
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,354,planner.checkForSatisfiedConverters(set, rel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1132,void checkForSatisfiedConverters(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1133,RelSet set,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1134,RelNode rel) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1135,int i = 0;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1136,while (i < set.abstractConverters.size()) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1137,AbstractConverter converter = set.abstractConverters.get(i);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1139,changeTraitsUsingConverters(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1140,rel,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1141,converter.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1142,if (converted == null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1145,if (!isRegistered(converted)) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1612,set.abstractConverters.add((AbstractConverter) rel);
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,66,final RexExecutorImpl executor;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,71,RexExecutorImpl executor,
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,253,final RexExecutable exec =
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,61,private String compile(RexBuilder rexBuilder, List<RexNode> constExps,
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,104,public RexExecutable getExecutable(RexBuilder rexBuilder, List<RexNode> exps,
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,109,RelOptUtil.pushPastProject(topProject.getProjects(), bottomProject);
core/src/main/java/org/apache/calcite/rex/RexWindow.java,53,RexWindowBound upperBound,
core/src/main/java/org/apache/calcite/rex/RexWindow.java,55,assert partitionKeys != null;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1210,final ImmutableBitSet groupSet =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1236,final ImmutableList<ImmutableBitSet> groupSets;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1272,final RelNode r = frame.rel;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,501,if (!belongsToDag(vertex)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,41,import org.apache.calcite.rex.RexLiteral;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,99,leftKeys, rightKeys, ImmutableSet.of(), joinType);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1005,boolean allowAbstractConverters) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1055,RelTraitSet stepTraits =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1058,rel = getSubset(converted, stepTraits);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1126,RelNode changeTraitsUsingConverters(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1127,RelNode rel,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1128,RelTraitSet toTraits) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1129,return changeTraitsUsingConverters(rel, toTraits, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,57,import org.apache.calcite.util.ImmutableIntList;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,138,import static org.apache.calcite.sql.fun.SqlStdOperatorTable.GROUP_ID;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,454,aggMap.put(GROUP_ID, grouping);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1319,case GROUP_ID: // "GROUP_ID()"
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1323,keys = ImmutableIntList.of();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1324,break;
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,118,if (flatGroupSets.isEmpty()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2789,bb.setRoot(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2791,aggConverter.getAggCalls()),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2792,false);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,106,public Result visitChild(int i, RelNode e) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,108,stack.push(new Frame(i, e));
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,530,final String lowerName = name.toLowerCase(Locale.ROOT);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,531,if (lowerName.startsWith("expr$")) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,533,ordinalMap.put(lowerName, node);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,551,Frame(int ordinalInParent, RelNode r) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,553,this.r = r;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,104,protected final Map<String, SqlNode> ordinalMap = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,112,public abstract Result visitChild(int i, RelNode e);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,354,return new Result(node, clauses, alias4, rel.getRowType(), aliases);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,364,return new Result(node, clauses, alias5, rel.getRowType(),
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,365,ImmutableMap.of(alias4, rel.getRowType()));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,822,final SqlNode mappedSqlNode =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,823,ordinalMap.get(field.getName().toLowerCase(Locale.ROOT));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,824,if (mappedSqlNode != null) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,825,return mappedSqlNode;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,946,&& neededAlias != null
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,947,&& (aliases.size() != 1 || !aliases.containsKey(neededAlias))) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,955,return new Builder(rel, clauseList, select, newContext,
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1034,return node;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1036,return asSelect();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1048,return node;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1050,return asSelect();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1084,Context context, Map<String, RelDataType> aliases) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1085,this.rel = rel;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1086,this.clauses = clauses;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1087,this.select = select;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1088,this.context = context;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1144,return SqlImplementor.this.result(select, clauses, rel, aliases);
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,418,return Util.filter(classes, clazz::isAssignableFrom);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,313,if (!inputRels.contains(previous)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3111,convertQueryRecursive(call.getSource(), false, targetRowType).project();
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,493,match.recomputeDigest();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleMatch.java,145,buf.append(", ");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleMatch.java,149,buf.append("]");
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,23,import org.apache.calcite.sql.SqlCallBinding;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,37,import org.apache.calcite.sql.type.SqlTypeUtil;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,39,import org.apache.calcite.sql.validate.SqlValidator;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,40,import org.apache.calcite.sql.validate.SqlValidatorScope;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,41,import org.apache.calcite.util.ImmutableNullableList;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,44,import java.util.List;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,124,private List<RelDataType> collectOperandTypes(
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,125,SqlValidator validator,
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,126,SqlValidatorScope scope,
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,127,SqlCall call) {
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,128,List<RelDataType> argTypes =
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,129,SqlTypeUtil.deriveAndCollectTypes(
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,130,validator, scope, call.getOperandList());
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,131,return ImmutableNullableList.of(
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,132,argTypes.get(VALUE_OPERAND),
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,133,argTypes.get(LOWER_OPERAND),
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,134,argTypes.get(UPPER_OPERAND));
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,139,SqlCallBinding callBinding = (SqlCallBinding) opBinding;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,143,collectOperandTypes(
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,144,callBinding.getValidator(),
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,145,callBinding.getScope(),
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,146,callBinding.getCall()));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,19,import org.apache.calcite.linq4j.Ord;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,23,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,381,groupSetTreeSet.add(
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,384,.union(aggregate.getGroupSet()));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,407,final Map<ImmutableBitSet, Integer> filters = new LinkedHashMap<>();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,408,final int z = groupCount + distinctAggCalls.size();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,413,for (Ord<ImmutableBitSet> groupSet : Ord.zip(groupSets)) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,414,filters.put(groupSet.e, z + groupSet.i);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,419,final RelNode distinct = relBuilder.peek();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,426,for (Map.Entry<ImmutableBitSet, Integer> entry : filters.entrySet()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,427,final long v = groupValue(fullGroupSet, entry.getKey());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,429,relBuilder.alias(
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,430,relBuilder.equals(nodeZ, relBuilder.literal(v)),
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,445,newFilterArg = filters.get(aggregate.getGroupSet());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,449,newFilterArg =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,450,filters.get(
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,453,.union(aggregate.getGroupSet()));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,464,remap(fullGroupSet, aggregate.getGroupSet()),
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,899,final Clause maxClause = maxClause();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,900,boolean needNew = false;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,903,Set<Clause> nonWrapSet = ImmutableSet.of(Clause.SELECT);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,904,for (Clause clause : clauses) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,906,|| (maxClause == clause && !nonWrapSet.contains(clause))) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,907,needNew = true;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,913,needNew = true;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,983,public Clause maxClause() {
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,219,return inferTypeFromOperands(
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,220,opBinding.getTypeFactory(),
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,221,opBinding.collectOperandTypes());
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,260,private RelDataType inferTypeFromOperands(
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,261,RelDataTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,262,List<RelDataType> argTypes) {
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,268,thenTypes.add(argTypes.get(j));
core/src/main/java/org/apache/calcite/runtime/Hook.java,89,QUERY_PLAN;
core/src/main/java/org/apache/calcite/rel/core/Project.java,237,&& false) {
core/src/main/java/org/apache/calcite/rel/core/Project.java,238,pw.item("type", rowType);
core/src/main/java/org/apache/calcite/rex/RexProgram.java,281,int trivialCount = 0;
core/src/main/java/org/apache/calcite/rex/RexProgram.java,285,if (level != SqlExplainLevel.DIGEST_ATTRIBUTES) {
core/src/main/java/org/apache/calcite/rex/RexProgram.java,286,trivialCount = countTrivial(projects);
core/src/main/java/org/apache/calcite/rex/RexProgram.java,303,pw.item(prefix + outFields.get(i).getName(), projects.get(i));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,99,EnumerableRel.Result result = rootRel.implement(this, prefer);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,26,import org.apache.calcite.schema.Table;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,48,super(LogicalTableScan.class, (Predicate<RelNode>) r -> true,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,56,final Table table = relOptTable.unwrap(Table.class);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,57,if (!EnumerableTableScan.canHandle(table)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,58,return null;
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,275,&& table instanceof QueryableTable) {
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,286,throw new AssertionError();
core/src/main/java/org/apache/calcite/util/BitString.java,195,assert bytes != null;
core/src/main/java/org/apache/calcite/util/BitString.java,196,int bitCount = bytes.length * 8;
core/src/main/java/org/apache/calcite/util/BitString.java,199,for (int i = 7; i >= 0; --i) {
core/src/main/java/org/apache/calcite/util/BitString.java,200,sb.append(((b & 1) == 0) ? '0' : '1');
core/src/main/java/org/apache/calcite/util/BitString.java,201,b >>= 1;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1385,final RelDataType source = ((RexCall) node).getOperands().get(0).getType();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1387,final RelDataType target = node.getType();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,610,ImmutableList.Builder<SqlNode> orderNodes = ImmutableList.builder();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,613,orderNodes.add(toSql(program, rfc));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,617,new SqlNodeList(orderNodes.build(), POS);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,629,final int scale = 0;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,630,BigDecimal divider = endUnit.multiplier.scaleByPowerOfTen(-scale);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,633,if (scale > 0) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,634,RelDataType decimalType =
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,639,value = encodeIntervalOrDecimal(value, decimalType, false);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,882,assert o instanceof TimeString;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,883,p = type.getPrecision();
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,884,if (p == RelDataType.PRECISION_NOT_SPECIFIED) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,885,p = 0;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,887,o = ((TimeString) o).round(p);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,888,break;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,898,assert o instanceof TimestampString;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,899,p = type.getPrecision();
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,900,if (p == RelDataType.PRECISION_NOT_SPECIFIED) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,901,p = 0;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,903,o = ((TimestampString) o).round(p);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,904,break;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,6238,private List<String> usingNames(SqlJoin join) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,6239,switch (join.getConditionType()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,6240,case USING:
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,6241,final ImmutableList.Builder<String> list = ImmutableList.builder();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,6242,final Set<String> names = catalogReader.nameMatcher().createSet();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,6243,for (SqlNode node : (SqlNodeList) join.getCondition()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,6244,final String name = ((SqlIdentifier) node).getSimple();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,6245,if (names.add(name)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,6246,list.add(name);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,6249,return list.build();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,6250,case NONE:
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,6251,if (join.isNatural()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,6252,final RelDataType t0 = getValidatedNodeType(join.getLeft());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,6253,final RelDataType t1 = getValidatedNodeType(join.getRight());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,6254,return SqlValidatorUtil.deriveNaturalJoinColumnList(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,6255,catalogReader.nameMatcher(), t0, t1);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,6258,return null;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,33,import org.apache.calcite.sql.dialect.CalciteSqlDialect;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,57,import java.io.PrintWriter;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,58,import java.io.StringWriter;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,262,StringWriter stringWriter = new StringWriter(query.length());
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,263,PrintWriter printWriter = new PrintWriter(stringWriter);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,264,SqlWriter writer = new SqlPrettyWriter(CalciteSqlDialect.DEFAULT, true, printWriter);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,266,query = stringWriter.toString();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,61,import java.util.Collections;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,133,final SqlNodeList selectList =
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,134,new SqlNodeList(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,135,Collections.singletonList(SqlIdentifier.star(SqlParserPos.ZERO)),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,136,SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,140,final SqlPrettyWriter writer = new SqlPrettyWriter(jdbcSchema.dialect);
core/src/main/java/org/apache/calcite/sql/SqlAsOperator.java,75,SqlWriter.FrameTypeEnum.SIMPLE);
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,199,final SqlWriter.Frame joinFrame =
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,200,writer.startList(SqlWriter.FrameTypeEnum.JOIN);
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,205,String natural = "";
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,206,if (join.isNatural()) {
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,207,natural = "NATURAL ";
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,214,writer.sep(natural + "CROSS JOIN");
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,217,writer.sep(natural + "FULL JOIN");
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,220,writer.sep(natural + "INNER JOIN");
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,223,writer.sep(natural + "LEFT JOIN");
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,226,writer.sep(natural + "LEFT SEMI JOIN");
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,229,writer.sep(natural + "RIGHT JOIN");
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,257,writer.endList(joinFrame);
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,339,final SqlWriter.Frame orderFrame =
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,340,writer.startList(SqlWriter.FrameTypeEnum.ORDER_BY_LIST);
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,341,unparseListClause(writer, pattern.orderList);
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,342,writer.endList(orderFrame);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,124,return toSqlString(null).getSql();
core/src/main/java/org/apache/calcite/sql/SqlNode.java,144,if (dialect == null) {
core/src/main/java/org/apache/calcite/sql/SqlNode.java,145,dialect = AnsiSqlDialect.DEFAULT;
core/src/main/java/org/apache/calcite/sql/SqlNode.java,147,SqlPrettyWriter writer = new SqlPrettyWriter(dialect);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,148,writer.setAlwaysUseParentheses(forceParens);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,149,writer.setSelectListItemsOnSeparateLines(false);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,150,writer.setIndentation(0);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,151,unparse(writer, 0, 0);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,19,import org.apache.calcite.sql.fun.SqlStdOperatorTable;
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,108,final SqlWriter.Frame frame =
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,110,: writer.startList("", "");
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,111,commaList(writer);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,112,writer.endList(frame);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,119,for (SqlNode node : list) {
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,120,writer.sep(",");
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,121,node.unparse(writer, 2, 3);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,125,void andOrList(SqlWriter writer, SqlKind sepKind) {
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,126,SqlBinaryOperator sepOp =
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,127,sepKind == SqlKind.AND
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,128,? SqlStdOperatorTable.AND
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,129,: SqlStdOperatorTable.OR;
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,130,for (int i = 0; i < list.size(); i++) {
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,131,SqlNode node = list.get(i);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,132,writer.sep(sepKind.name(), false);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,140,int lprec = (i == 0) ? 0 : sepOp.getRightPrec();
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,141,int rprec = (i == (list.size() - 1)) ? 0 : sepOp.getLeftPrec();
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,142,node.unparse(writer, lprec, rprec);
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,338,unparseListClause(writer, clause, null);
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,345,if (clause instanceof SqlNodeList) {
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,346,if (sepKind != null) {
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,347,((SqlNodeList) clause).andOrList(writer, sepKind);
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,349,((SqlNodeList) clause).commaList(writer);
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,352,clause.unparse(writer, 0, 0);
core/src/main/java/org/apache/calcite/sql/SqlOrderBy.java,93,final SqlWriter.Frame listFrame =
core/src/main/java/org/apache/calcite/sql/SqlOrderBy.java,94,writer.startList(SqlWriter.FrameTypeEnum.ORDER_BY_LIST);
core/src/main/java/org/apache/calcite/sql/SqlOrderBy.java,95,unparseListClause(writer, orderBy.orderList);
core/src/main/java/org/apache/calcite/sql/SqlOrderBy.java,96,writer.endList(listFrame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,146,SqlNode selectClause = select.selectList;
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,147,if (selectClause == null) {
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,148,selectClause = SqlIdentifier.star(SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,150,final SqlWriter.Frame selectListFrame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,151,writer.startList(SqlWriter.FrameTypeEnum.SELECT_LIST);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,152,unparseListClause(writer, selectClause);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,153,writer.endList(selectListFrame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,178,SqlKind whereSepKind = SqlKind.AND;
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,181,whereSepKind = SqlKind.OR;
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,186,while (node.getKind() == whereSepKind) {
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,195,final SqlWriter.Frame whereFrame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,196,writer.startList(SqlWriter.FrameTypeEnum.WHERE_LIST);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,197,unparseListClause(
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,198,writer,
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,199,new SqlNodeList(
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,200,list,
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,201,select.where.getParserPosition()),
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,202,whereSepKind);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,203,writer.endList(whereFrame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,210,final SqlWriter.Frame groupFrame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,211,writer.startList(SqlWriter.FrameTypeEnum.GROUP_BY_LIST);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,212,if (select.groupBy.getList().isEmpty()) {
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,213,final SqlWriter.Frame frame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,214,writer.startList(SqlWriter.FrameTypeEnum.SIMPLE, "(", ")");
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,215,writer.endList(frame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,217,unparseListClause(writer, select.groupBy);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,219,writer.endList(groupFrame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,227,final SqlWriter.Frame windowFrame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,228,writer.startList(SqlWriter.FrameTypeEnum.WINDOW_DECL_LIST);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,229,for (SqlNode windowDecl : select.windowDecls) {
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,230,writer.sep(",");
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,231,windowDecl.unparse(writer, 0, 0);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,233,writer.endList(windowFrame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,237,final SqlWriter.Frame orderFrame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,238,writer.startList(SqlWriter.FrameTypeEnum.ORDER_BY_LIST);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,239,unparseListClause(writer, select.orderBy);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,240,writer.endList(orderFrame);
core/src/main/java/org/apache/calcite/sql/SqlWriter.java,179,SUB_QUERY,
core/src/main/java/org/apache/calcite/sql/SqlWriter.java,224,IDENTIFIER(false);
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,127,private static final SqlWriter.FrameType FRAME_TYPE =
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,128,SqlWriter.FrameTypeEnum.create("CASE");
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,297,writer.startList(FRAME_TYPE, "CASE", "END");
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,26,import org.apache.calcite.util.Unsafe;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,35,import java.io.StringWriter;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,135,new SqlPrettyWriter(AnsiSqlDialect.DEFAULT).getBean();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,141,private final StringWriter sw = new StringWriter();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,142,protected final PrintWriter pw;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,147,protected boolean alwaysUseParentheses;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,148,private boolean keywordsLowerCase;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,150,private boolean quoteAllIdentifiers;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,151,private int indentation;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,152,private boolean clauseStartsLine;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,153,private boolean selectListItemsOnSeparateLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,154,private boolean selectListExtraIndentFlag;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,156,private boolean windowDeclListNewline;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,157,private boolean updateSetListNewline;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,158,private boolean windowNewline;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,159,private SubQueryStyle subQueryStyle;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,160,private boolean whereListItemsOnSeparateLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,162,private boolean caseClausesOnNewLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,163,private int lineLength;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,164,private int charCount;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,172,if (pw == null) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,173,pw = new PrintWriter(sw);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,175,this.pw = pw;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,176,this.dialect = dialect;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,177,this.alwaysUseParentheses = alwaysUseParentheses;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,178,resetSettings();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,179,reset();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,185,this(dialect, alwaysUseParentheses, null);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,189,this(dialect, true);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,199,this.caseClausesOnNewLines = caseClausesOnNewLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,207,this.subQueryStyle = subQueryStyle;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,211,this.windowNewline = windowNewline;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,215,this.windowDeclListNewline = windowDeclListNewline;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,219,return indentation;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,223,return alwaysUseParentheses;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,234,return quoteAllIdentifiers;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,238,return clauseStartsLine;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,242,return selectListItemsOnSeparateLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,246,return whereListItemsOnSeparateLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,250,return selectListExtraIndentFlag;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,254,return keywordsLowerCase;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,258,return lineLength;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,263,indentation = 4;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,264,clauseStartsLine = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,265,selectListItemsOnSeparateLines = false;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,266,selectListExtraIndentFlag = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,267,keywordsLowerCase = false;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,268,quoteAllIdentifiers = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,269,windowDeclListNewline = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,270,updateSetListNewline = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,271,windowNewline = false;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,272,subQueryStyle = SubQueryStyle.HYDE;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,273,alwaysUseParentheses = false;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,274,whereListItemsOnSeparateLines = false;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,275,lineLength = 0;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,276,charCount = 0;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,280,pw.flush();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,281,Unsafe.clear(sw);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,302,this.indentation = indentation;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,350,this.clauseStartsLine = clauseStartsLine;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,358,this.selectListItemsOnSeparateLines = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,386,public void setSelectListExtraIndentFlag(boolean b) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,387,this.selectListExtraIndentFlag = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,394,public void setKeywordsLowerCase(boolean b) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,395,this.keywordsLowerCase = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,404,public void setWhereListItemsOnSeparateLines(boolean b) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,405,this.whereListItemsOnSeparateLines = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,408,public void setAlwaysUseParentheses(boolean b) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,409,this.alwaysUseParentheses = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,413,pw.println();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,414,charCount = 0;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,415,indent(currentIndent);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,423,Spaces.append(pw, indent);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,424,charCount += indent;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,434,public void setQuoteAllIdentifiers(boolean b) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,435,this.quoteAllIdentifiers = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,455,int indentation = getIndentation();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,456,if (frameType instanceof FrameTypeEnum) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,457,FrameTypeEnum frameTypeEnum = (FrameTypeEnum) frameType;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,459,switch (frameTypeEnum) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,460,case WINDOW_DECL_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,461,case VALUES:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,462,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,463,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,464,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,465,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,466,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,467,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,468,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,469,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,470,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,471,windowDeclListNewline,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,472,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,473,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,475,case UPDATE_SET_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,476,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,477,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,478,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,479,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,480,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,481,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,482,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,483,updateSetListNewline,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,484,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,485,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,486,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,487,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,489,case SELECT_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,490,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,491,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,492,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,493,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,494,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,495,selectListExtraIndentFlag ? indentation : 0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,496,selectListItemsOnSeparateLines,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,497,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,498,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,499,selectListItemsOnSeparateLines,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,500,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,501,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,503,case ORDER_BY_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,504,case GROUP_BY_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,505,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,506,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,507,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,508,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,509,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,510,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,511,selectListItemsOnSeparateLines,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,512,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,513,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,514,selectListItemsOnSeparateLines,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,515,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,516,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,518,case SUB_QUERY:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,519,switch (subQueryStyle) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,520,case BLACK:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,526,open = Spaces.padRight("(", indentation);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,527,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,528,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,529,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,530,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,531,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,532,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,533,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,534,true,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,535,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,536,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,537,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,538,false) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,539,protected void _before() {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,540,newlineAndIndent();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,543,case HYDE:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,549,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,550,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,551,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,552,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,553,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,554,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,555,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,556,true,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,557,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,558,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,559,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,560,false) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,561,protected void _before() {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,562,nextWhitespace = NL;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,565,default:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,566,throw Util.unexpected(subQueryStyle);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,569,case ORDER_BY:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,570,case OFFSET:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,571,case FETCH:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,572,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,573,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,574,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,575,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,576,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,577,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,578,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,579,true,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,580,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,581,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,582,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,583,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,585,case SELECT:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,586,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,587,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,588,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,589,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,590,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,591,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,592,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,593,isClauseStartsLine(), // newline before FROM, WHERE etc.
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,594,0, // all clauses appear below SELECT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,595,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,596,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,597,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,599,case SETOP:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,600,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,601,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,602,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,603,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,604,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,605,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,606,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,607,isClauseStartsLine(), // newline before UNION, EXCEPT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,608,0, // all clauses appear below SELECT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,609,isClauseStartsLine(), // newline after UNION, EXCEPT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,610,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,611,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,613,case WINDOW:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,614,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,615,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,616,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,617,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,618,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,619,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,620,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,621,windowNewline,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,622,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,623,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,624,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,625,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,627,case FUN_CALL:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,628,setNeedWhitespace(false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,629,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,630,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,631,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,632,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,633,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,634,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,635,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,636,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,637,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,638,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,639,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,640,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,642,case IDENTIFIER:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,643,case SIMPLE:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,644,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,645,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,646,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,647,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,648,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,649,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,650,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,651,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,652,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,653,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,654,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,655,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,657,case WHERE_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,658,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,659,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,660,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,661,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,662,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,663,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,664,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,665,whereListItemsOnSeparateLines,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,666,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,667,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,668,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,669,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,671,case FROM_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,672,case JOIN:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,673,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,674,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,675,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,676,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,677,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,678,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,679,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,680,isClauseStartsLine(), // newline before UNION, EXCEPT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,681,0, // all clauses appear below SELECT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,682,isClauseStartsLine(), // newline after UNION, EXCEPT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,683,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,684,false) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,685,protected void sep(boolean printFirst, String sep) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,686,boolean newlineBefore =
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,687,newlineBeforeSep
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,688,&& !sep.equals(",");
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,689,boolean newlineAfter =
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,690,newlineAfterSep && sep.equals(",");
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,691,if ((itemCount > 0) || printFirst) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,692,if (newlineBefore && (itemCount > 0)) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,693,pw.println();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,694,charCount = 0;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,695,indent(currentIndent + sepIndent);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,696,setNeedWhitespace(false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,698,keyword(sep);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,699,nextWhitespace = newlineAfter ? NL : " ";
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,701,++itemCount;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,704,default:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,712,if (frameType.getName().equals("CASE")) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,713,if (caseClausesOnNewLines) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,714,newlineAfterOpen = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,716,newlineBeforeClose = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,717,sepIndent = 0;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,720,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,721,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,722,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,723,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,724,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,725,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,726,newlineAfterOpen,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,727,newlineBeforeSep,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,728,sepIndent,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,729,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,730,newlineBeforeClose,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,731,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,750,++frame.itemCount;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,757,if (frameType.needsIndent()) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,758,currentIndent += frame.extraIndent;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,794,if (endedFrame.frameType.needsIndent()) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,795,currentIndent -= this.frame.extraIndent;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,808,pw.flush();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,809,return sw.toString();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,827,pw.print(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,831,charCount += s.length();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,863,pw.print(nextWhitespace);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,864,charCount += nextWhitespace.length();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,875,&& ((charCount + s.length()) >= lineLength);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,891,pw.print(s);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,892,charCount += s.length();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,897,pw.print(x);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,898,charCount += String.valueOf(x).length();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,908,pw.print(qName);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,909,charCount += qName.length();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,963,this.lineLength = lineLength;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1021,private final boolean newlineBeforeClose;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1022,private final boolean newlineAfterClose;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1023,private final boolean newlineAfterOpen;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1025,FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1026,FrameType frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1027,String keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1028,String open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1029,String close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1030,int extraIndent,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1031,boolean newlineAfterOpen,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1032,boolean newlineBeforeSep,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1033,int sepIndent,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1034,boolean newlineAfterSep,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1035,boolean newlineBeforeClose,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1036,boolean newlineAfterClose) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1061,|| (newlineAfterOpen && (itemCount == 0))) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1062,newlineAndIndent();
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,61,final SqlPrettyWriter writer = new SqlPrettyWriter(dialect);
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,62,writer.setAlwaysUseParentheses(false);
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,63,writer.setSelectListItemsOnSeparateLines(false);
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,64,writer.setIndentation(0);
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,32,import org.apache.calcite.sql.dialect.CalciteSqlDialect;
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,47,import java.io.PrintWriter;
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,48,import java.io.StringWriter;
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,193,final SqlNodeList selectList =
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,194,new SqlNodeList(ImmutableList.<SqlNode>of(SqlIdentifier.star(p)), p);
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,217,final StringWriter sw = new StringWriter();
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,218,final PrintWriter pw = new PrintWriter(sw);
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,219,final SqlPrettyWriter w =
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,220,new SqlPrettyWriter(CalciteSqlDialect.DEFAULT, false, pw);
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,221,pw.print("INSERT INTO ");
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,223,pw.print(" ");
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,225,pw.flush();
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,226,final String sql = sw.toString();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,381,identifierList(modify.getInput().getRowType().getFieldNames()));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,589,&& typeFactory.createTypeWithNullability(currentType,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4442,int iAdjusted = i;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4443,if (query instanceof SqlUpdate) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4444,int nUpdateColumns =
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4445,((SqlUpdate) query).getTargetColumnList().size();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4446,assert sourceFields.size() >= nUpdateColumns;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4447,iAdjusted -= sourceFields.size() - nUpdateColumns;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4449,SqlNode node = getNthExpr(query, iAdjusted, sourceCount);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4490,if (update.getTargetColumnList() != null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4491,return update.getTargetColumnList().get(ordinal);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4541,final RelDataType sourceRowType = getNamespace(call).getRowType();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4542,checkTypeAssignment(sourceRowType, targetRowType, call);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,193,List<RexNode> projExprs = rel.getProjects();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,213,RelDataTypeFactory typeFactory =
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,214,rel.getCluster().getTypeFactory();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,36,import java.util.HashMap;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,86,final Map<Integer, Integer> mapInToOutPos = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,87,final List<RexNode> projExprs = rel.getProjects();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,88,final Set<ImmutableBitSet> projUniqueKeySet = new HashSet<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,94,mapInToOutPos.put(((RexInputRef) projExpr).getIndex(), i);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,98,if (mapInToOutPos.isEmpty()) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,101,return projUniqueKeySet;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,107,if (childUniqueKeySet != null) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,110,for (ImmutableBitSet colMask : childUniqueKeySet) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,111,ImmutableBitSet.Builder tmpMask = ImmutableBitSet.builder();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,112,boolean completeKeyProjected = true;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,113,for (int bit : colMask) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,114,if (mapInToOutPos.containsKey(bit)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,115,tmpMask.set(mapInToOutPos.get(bit));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,119,completeKeyProjected = false;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,120,break;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,123,if (completeKeyProjected) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,124,projUniqueKeySet.add(tmpMask.build());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,129,return projUniqueKeySet;
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,83,operand(projectClass, any())),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,638,input = convert(sort.getInput(), traitSet);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,561,boolean changed = false;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,563,changed |= new CaseShuttle().mutate(expList);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,722,switch (operand.getKind()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,723,case CASE:
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,339,if (rank.get(target) < rank.get(ordinal1)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,430,SqlNode expanded = expand(selectItem, scope);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3362,List<SqlNode> children = ((SqlCall) stripDot(current)).getOperandList();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,745,final List<RexNode> castExps =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,746,RexUtil.generateCastExpressions(rexBuilder, castRowType, rowType);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,749,return projectFactory.createProject(rel, castExps,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,753,return projectFactory.createProject(rel, castExps,
core/src/main/java/org/apache/calcite/sql/SqlLateralOperator.java,40,writer.keyword(getName());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,229,|| Number.class.isAssignableFrom(elementType))) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,234,protected final List<RelNode> leaves = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1618,leaves.add(resultRel);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2409,return RelOptUtil.pushDownJoinConditions(originalJoin, relBuilder);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2522,leaves.add(r);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4185,leaves.add(root);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4342,if (leaves.contains(rel) || rel instanceof LogicalMatch) {
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,181,final SqlConformance conformance = conformance();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,182,final CalciteCatalogReader catalogReader = createCatalogReader();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,183,this.validator =
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,184,new CalciteSqlValidator(operatorTable, catalogReader, typeFactory,
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,185,conformance);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,186,this.validator.setIdentifierExpansion(true);
geode/src/main/java/org/apache/calcite/adapter/geode/util/GeodeUtils.java,248,if (o instanceof PdxInstance) {
geode/src/main/java/org/apache/calcite/adapter/geode/util/GeodeUtils.java,249,return Util.toString(
geode/src/main/java/org/apache/calcite/adapter/geode/util/GeodeUtils.java,250,((PdxInstance) o).getFieldNames(), "PDX[", ",", "]");
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,59,return (Integer) expression0.evaluate(evaluator) + (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,60,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,63,+ (Double) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,70,return (Integer) expression0.evaluate(evaluator) / (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,71,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,84,return (Integer) expression0.evaluate(evaluator) > (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,85,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,88,> (Double) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,96,>= (Integer) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,99,>= (Double) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,106,return (Integer) expression0.evaluate(evaluator) < (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,107,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,110,< (Double) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,118,<= (Integer) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,121,<= (Double) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,128,return (Integer) expression0.evaluate(evaluator) * (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,129,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,145,return (Integer) expression0.evaluate(evaluator) - (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,146,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,149,- (Double) expression1.evaluate(evaluator);
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,503,new SqlSingleOperandTypeChecker() {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,504,public boolean checkSingleOperandType(
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,505,SqlCallBinding callBinding,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,506,SqlNode node,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,507,int iFormalOperand,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,508,boolean throwOnFailure) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,509,assert 0 == iFormalOperand;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,510,RelDataType type =
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,511,callBinding.getValidator().deriveType(
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,512,callBinding.getScope(),
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,513,node);
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,514,boolean validationError = false;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,515,if (!type.isStruct()) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,516,validationError = true;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,518,validationError = true;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,520,SqlTypeName typeName =
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,521,type.getFieldList().get(0).getType().getSqlTypeName();
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,522,if (typeName != SqlTypeName.MULTISET
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,523,&& typeName != SqlTypeName.ARRAY) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,524,validationError = true;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,528,if (validationError && throwOnFailure) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,529,throw callBinding.newValidationSignatureError();
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,531,return !validationError;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,534,public boolean checkOperandTypes(
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,535,SqlCallBinding callBinding,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,536,boolean throwOnFailure) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,537,return checkSingleOperandType(
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,538,callBinding,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,539,callBinding.operand(0),
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,540,0,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,541,throwOnFailure);
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,544,public SqlOperandCountRange getOperandCountRange() {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,545,return SqlOperandCountRanges.of(1);
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,548,public String getAllowedSignatures(SqlOperator op, String opName) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,549,return "UNNEST(<MULTISET>)";
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,552,public boolean isOptional(int i) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,553,return false;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,556,public Consistency getConsistency() {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,557,return Consistency.NONE;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,567,OperandTypes.or(COLLECTION_OR_MAP, RECORD_COLLECTION);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2223,return translator.translate(operands.get(0));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2226,translator.translate(operands.get(0), NullAs.IS_NULL),
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,232,for (SqlNode node : thenList) {
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,233,argTypes.add(
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,234,callBinding.getValidator().deriveType(
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,235,callBinding.getScope(), node));
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,248,RelDataType ret = callBinding.getTypeFactory().leastRestrictive(argTypes);
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,62,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,63,operand(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,64,operand(Join.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,65,relFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,128,join.getTraitSet(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,168,static Expression fromInternal(Expression e, Class<?> targetType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,169,if (e == ConstantUntypedNull.INSTANCE) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,170,return e;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,172,if (!(e.getType() instanceof Class)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,173,return e;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,175,if (targetType.isAssignableFrom((Class) e.getType())) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,176,return e;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,179,return Expressions.call(BuiltInMethod.INTERNAL_TO_DATE.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,181,if (targetType == java.sql.Time.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,182,return Expressions.call(BuiltInMethod.INTERNAL_TO_TIME.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,184,if (targetType == java.sql.Timestamp.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,185,return Expressions.call(BuiltInMethod.INTERNAL_TO_TIMESTAMP.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,190,return Expressions.convert_(e,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,193,return e;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,215,static Type toInternal(RelDataType type) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,231,static Expression enforce(final Type storageType,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,232,final Expression e) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,233,if (storageType != null && e.type != storageType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,234,if (e.type == java.sql.Date.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,235,if (storageType == int.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,236,return Expressions.call(BuiltInMethod.DATE_TO_INT.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,238,if (storageType == Integer.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,239,return Expressions.call(BuiltInMethod.DATE_TO_INT_OPTIONAL.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,242,if (storageType == int.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,243,return Expressions.call(BuiltInMethod.TIME_TO_INT.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,245,if (storageType == Integer.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,246,return Expressions.call(BuiltInMethod.TIME_TO_INT_OPTIONAL.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,249,if (storageType == long.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,250,return Expressions.call(BuiltInMethod.TIMESTAMP_TO_LONG.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,252,if (storageType == Long.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,253,return Expressions.call(BuiltInMethod.TIMESTAMP_TO_LONG_OPTIONAL.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,257,return e;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,137,RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,266,RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,601,RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,893,RexToLixTranslator.convert(res, agg.result.getType()));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,918,offs = RexToLixTranslator.convert(offs, int.class);
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,187,return RexToLixTranslator.convert(e, fromType, fieldType);
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,216,return RexToLixTranslator.convert(e, fromType, fieldType);
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,247,return RexToLixTranslator.convert(e, fromType, fieldType);
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,645,if (fieldType != java.sql.Date.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1040,return RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1251,return RexToLixTranslator.convert(result.accumulator().get(1),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,27,import org.apache.calcite.linq4j.tree.ExpressionType;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,31,import org.apache.calcite.linq4j.tree.UnaryExpression;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,222,expression = EnumUtils.enforce(storageType, expression);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,516,convert = convert(operand, typeFactory.getJavaClass(targetType));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,737,convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,928,public static Expression convert(Expression operand, Type toType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,929,final Type fromType = operand.getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,930,return convert(operand, fromType, toType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,933,public static Expression convert(Expression operand, Type fromType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,934,Type toType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,936,return operand;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,940,final Primitive toPrimitive = Primitive.of(toType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,941,final Primitive toBox = Primitive.ofBox(toType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,942,final Primitive fromBox = Primitive.ofBox(fromType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,943,final Primitive fromPrimitive = Primitive.of(fromType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,944,final boolean fromNumber = fromType instanceof Class
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,945,&& Number.class.isAssignableFrom((Class) fromType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,946,if (fromType == String.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,947,if (toPrimitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,948,switch (toPrimitive) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,949,case CHAR:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,950,case SHORT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,951,case INT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,952,case LONG:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,953,case FLOAT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,954,case DOUBLE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,956,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,957,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,959,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,960,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,962,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,963,toPrimitive.boxClass,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,965,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,968,if (toBox != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,969,switch (toBox) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,970,case CHAR:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,972,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,973,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,975,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,976,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,978,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,979,toBox.boxClass,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,981,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,985,if (toPrimitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,986,if (fromPrimitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,988,return Expressions.convert_(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,989,operand, toPrimitive.primitiveClass);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,991,if (fromNumber || fromBox == Primitive.CHAR) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,993,return Expressions.unbox(operand, toPrimitive);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,997,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,998,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1000,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1005,return Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1006,Expressions.equal(operand, RexImpTable.NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1007,RexImpTable.NULL_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1008,Expressions.box(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1009,Expressions.unbox(operand, toBox),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1010,toBox));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1015,if (operand instanceof UnaryExpression) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1016,UnaryExpression una = (UnaryExpression) operand;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1017,if (una.nodeType == ExpressionType.Convert
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1018,|| Primitive.of(una.getType()) == toBox) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1019,return Expressions.box(una.expression, toBox);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1024,if (toBox == Primitive.INT) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1025,return Expressions.call(BuiltInMethod.DATE_TO_INT.method, operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1027,return Expressions.convert_(operand, toType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1032,if (isA(fromType, Primitive.INT)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1033,return Expressions.call(BuiltInMethod.INTERNAL_TO_DATE.method, operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1035,return Expressions.convert_(operand, java.sql.Date.class);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1040,if (isA(fromType, Primitive.INT)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1041,return Expressions.call(BuiltInMethod.INTERNAL_TO_TIME.method, operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1043,return Expressions.convert_(operand, java.sql.Time.class);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1048,if (isA(fromType, Primitive.LONG)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1049,return Expressions.call(BuiltInMethod.INTERNAL_TO_TIMESTAMP.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1050,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1052,return Expressions.convert_(operand, java.sql.Timestamp.class);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1055,if (fromBox != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1058,return Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1059,Expressions.equal(operand, RexImpTable.NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1060,RexImpTable.NULL_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1061,Expressions.new_(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1062,BigDecimal.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1063,Expressions.unbox(operand, fromBox)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1065,if (fromPrimitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1073,return Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1074,Expressions.equal(operand, RexImpTable.NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1075,RexImpTable.NULL_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1076,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1077,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1079,operand));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1081,if (fromPrimitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1082,switch (fromPrimitive) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1083,case DOUBLE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1084,case FLOAT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1087,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1088,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1090,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1091,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1094,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1095,fromPrimitive.boxClass,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1097,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1102,return Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1103,Expressions.equal(operand, RexImpTable.NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1104,RexImpTable.NULL_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1105,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1106,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1108,operand));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1120,return Expressions.convert_(operand, toType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1123,static boolean isA(Type fromType, Primitive primitive) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1124,return Primitive.of(fromType) == primitive
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1125,|| Primitive.ofBox(fromType) == primitive;
core/src/main/java/org/apache/calcite/adapter/enumerable/StrictAggImplementor.java,170,return RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/StrictAggImplementor.java,181,Expression nonNull = RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,150,RexToLixTranslator.convert(recFromCtx, Object[].class);
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,158,return RexToLixTranslator.convert(recordAccess, storageType);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,19,import org.apache.calcite.adapter.enumerable.RexToLixTranslator;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,187,RexToLixTranslator.convert(Expressions.constant(o), clazz);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,336,call.getOperator().unparse(writer, call, leftPrec, rightPrec);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2383,flatElements[i] = (E) Integer.valueOf(++ordinality); // 1-based
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,176,&& token.s.equalsIgnoreCase("ALL")) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,489,if (token.s.equals(hintToken)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,618,if (token.s.equals(hintToken)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,695,if (token.s.equals(hintToken)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,775,if (token.s.equals(hintToken)) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,895,public static int mod(int b0, BigDecimal b1) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,896,return mod(b0, b1.intValue());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,193,import java.util.LinkedHashSet;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3998,private final Set<SubQuery> subQueryList = new LinkedHashSet<>();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4323,if (rowType == null) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4326,return null;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4333,throw new AssertionError();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4362,if (node.equalsDeep(subQuery.node, Litmus.IGNORE)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4371,if (expr.equalsDeep(subQuery.node, Litmus.IGNORE)) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,31,import org.apache.calcite.util.ImmutableIntList;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,110,return;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,113,final ImmutableIntList projects;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,114,final ImmutableList<RexNode> filters;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,118,filters = bindableScan.filters;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,119,projects = bindableScan.projects;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,121,filters = ImmutableList.of();
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,122,projects = scan.identity();
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,125,final List<Integer> projects2 =
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,126,Mappings.apply((Mapping) mapping, projects);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,127,call.transformTo(
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,128,Bindables.BindableTableScan.create(scan.getCluster(), scan.getTable(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,129,filters, projects2));
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,369,final SqlIdentifier sqlTargetTable =
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,370,new SqlIdentifier(modify.getTable().getQualifiedName(), POS);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,861,if (LOGGER.isDebugEnabled()) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,877,return subset;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,879,return register(rel, equivRel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,900,RelOptCost relCost = getCost(rel, rel.getCluster().getMetadataQuery());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,901,if (relCost.isLt(subset.bestCost)) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,927,rel.recomputeDigest();
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,327,subset.bestCost = otherSubset.bestCost;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,328,subset.best = otherSubset.best;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,356,final Set<RelSubset> activeSet = new HashSet<>();
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,357,final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,203,if (rel.set == set && traitSet.satisfies(rel.getTraitSet())) {
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,24,import org.apache.calcite.plan.RelOptPlanner;
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,64,RelOptPlanner planner, SqlRexConvertletTable convertletTable) {
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,66,schema, EnumerableRel.Prefer.ANY, planner, BindableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,67,convertletTable);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,317,context.getRootSchema(), null, planner, resultConvention,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,318,createConvertletTable());
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,725,context.getRootSchema(), prefer, planner, resultConvention,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,726,createConvertletTable());
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,992,RelOptPlanner planner, Prepare.Materialization materialization) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1004,new CalciteMaterializer(this, context, catalogReader, schema, planner,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1005,createConvertletTable());
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1068,RelOptPlanner planner,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1070,SqlRexConvertletTable convertletTable) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1075,this.planner = planner;
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1078,this.rexBuilder = new RexBuilder(typeFactory);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1147,final RelOptCluster cluster = prepare.createCluster(planner, rexBuilder);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1282,prepare.populateMaterializations(context, planner, materialization);
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,269,buff.append(", r");
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,181,if (mq.map.put(key1, NullSentinel.INSTANCE) != null) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,191,mq.map.remove(key1);
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,51,super("ITEM", SqlKind.OTHER_FUNCTION, 100, true, null, null, null);
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeFilter.java,206,case OTHER_FUNCTION:
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,321,if (left.isA(SqlKind.OTHER_FUNCTION) && right.isA(SqlKind.LITERAL)) {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,322,if (((RexCall) left).getOperator() != SqlStdOperatorTable.ITEM) {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,323,return false;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoFilter.java,218,case OTHER_FUNCTION:
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,46,final Properties properties1 = new Properties(properties);
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,47,properties1.setProperty(property.camelName(), value);
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,48,return new CalciteConnectionConfigImpl(properties1);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,738,SqlNode node = field(collation.getFieldIndex());
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,925,Context newContext;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,24,import org.apache.calcite.linq4j.tree.Types;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,157,Types.castIfNecessary(keyClass,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,158,leftResult.physType.fieldReference(left_, pair.left)));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,160,Types.castIfNecessary(keyClass,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,161,rightResult.physType.fieldReference(right_, pair.right)));
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,222,Types.castIfNecessary(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,223,fieldClass(field),
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,224,fieldReference(v1, field)));
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,295,arg0 = Types.castIfNecessary(Comparable.class, arg0);
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,296,arg1 = Types.castIfNecessary(Comparable.class, arg1);
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,394,arg0 = Types.castIfNecessary(Comparable.class, arg0);
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,395,arg1 = Types.castIfNecessary(Comparable.class, arg1);
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,553,Types.castIfNecessary(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,554,returnType,
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,555,fieldReference(v1, field0));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,33,import org.apache.calcite.linq4j.tree.Types;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1173,Types.castIfNecessary(acc.type, add.arguments().get(0)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1808,Types.castIfNecessary(type, operand),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1809,Types.castIfNecessary(type,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1810,Expressions.constant(timeUnit.multiplier)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1836,return Types.castIfNecessary(returnType, expression);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1953,return Types.castIfNecessary(returnType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1955,expressions.get(1)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,935,if (fromType.equals(toType)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1022,return Expressions.box(operand, toBox);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1112,return Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1113,Expressions.equal(operand, RexImpTable.NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1114,RexImpTable.NULL_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1115,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1116,operand,
core/src/main/java/org/apache/calcite/adapter/enumerable/StrictAggImplementor.java,25,import org.apache.calcite.linq4j.tree.Types;
core/src/main/java/org/apache/calcite/adapter/enumerable/StrictAggImplementor.java,58,Expressions.assign(acc, Types.castIfNecessary(acc.type, next))));
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,29,import org.apache.calcite.linq4j.tree.Types;
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,170,return Types.castIfNecessary(
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,171,target.getClass(),
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,176,BuiltInMethod.REFLECTIVE_SCHEMA_GET_TARGET.method));
core/src/main/java/org/apache/calcite/schema/Schemas.java,33,import org.apache.calcite.linq4j.tree.Types;
core/src/main/java/org/apache/calcite/schema/Schemas.java,179,return Types.castIfNecessary(clazz, expression);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Types.java,454,if (returnType instanceof RecordType) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Types.java,456,return expression;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Types.java,458,if (Types.isAssignableFrom(returnType, type)) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,136,e.getLeft().getRowType().getFieldCount());
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,178,Context rightContext, int leftFieldCount) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,199,rightContext, leftFieldCount);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,215,node = stripCastFromString(node);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,269,private static RexNode stripCastFromString(RexNode node) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,283,final RexNode o0b = ((RexCall) o0).getOperands().get(0);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,284,switch (o0b.getType().getSqlTypeName()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,285,case CHAR:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,286,case VARCHAR:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,287,return call.clone(call.getType(), ImmutableList.of(o0b, o1));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,292,final RexNode o1b = ((RexCall) o1).getOperands().get(0);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,293,switch (o1b.getType().getSqlTypeName()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,294,case CHAR:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,295,case VARCHAR:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,296,return call.clone(call.getType(), ImmutableList.of(o0, o1b));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,580,final RexCall call = (RexCall) stripCastFromString(rex);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,599,return createLeftCall(op, nodeList);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,149,writer.append("new java.math.BigDecimal(").append(exact).append("L");
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,322,subset.propagateCostImprovements0(planner, mq, rel, activeSet);
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,328,RelNode rel, Set<RelSubset> activeSet) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,351,parentSubset.propagateCostImprovements(planner, mq, parent,
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,352,activeSet);
core/src/main/java/org/apache/calcite/rel/metadata/CyclicMetadataException.java,28,public static final CyclicMetadataException INSTANCE =
core/src/main/java/org/apache/calcite/rel/metadata/CyclicMetadataException.java,29,new CyclicMetadataException();
core/src/main/java/org/apache/calcite/rel/metadata/CyclicMetadataException.java,32,private CyclicMetadataException() {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,182,throw CyclicMetadataException.INSTANCE;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,293,if (!predicate.apply(join, joinType, exp)) {
core/src/main/java/org/apache/calcite/sql/SqlExplain.java,175,return getFormat() == SqlExplainFormat.XML;
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,95,if (join.getJoinType().generatesNullsOnRight()) {
core/src/main/java/org/apache/calcite/rel/core/Calc.java,171,return copy(traitSet, getInput(),
core/src/main/java/org/apache/calcite/rel/core/Calc.java,172,new RexProgram(program.getInputRowType(),
core/src/main/java/org/apache/calcite/rel/core/Calc.java,173,exprs,
core/src/main/java/org/apache/calcite/rel/core/Calc.java,175,(RexLocalRef) condition,
core/src/main/java/org/apache/calcite/rel/core/Calc.java,176,program.getOutputRowType()));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistribution.java,137,throw new AssertionError(); // TODO:
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,180,assert curRelTrait.getTraitDef() == traitDef;
core/src/main/java/org/apache/calcite/rel/core/Correlate.java,109,new CorrelationId((Integer) input.get("correlationId")),
core/src/main/java/org/apache/calcite/rel/core/Correlate.java,159,.item("requiredColumns", requiredColumns.toString());
core/src/main/java/org/apache/calcite/rel/logical/LogicalCorrelate.java,91,new CorrelationId((Integer) input.get("correlationId")),
core/src/main/java/org/apache/calcite/rex/RexProgram.java,244,return collectExplainTerms("", pw, pw.getDetailLevel());
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,155,List<RexNode> newOperands = apply(call.getOperands());
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,156,if (true) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,159,throw new AssertionError();
core/src/main/java/org/apache/calcite/sql/dialect/BigQuerySqlDialect.java,31,.withNullCollation(NullCollation.LOW));
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,52,RelTrait out, String description) {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,54,RelFactories.LOGICAL_BUILDER, description);
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,61,RelTrait in, RelTrait out, String description) {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,62,this(clazz, predicate, in, out, RelFactories.LOGICAL_BUILDER, description);
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,77,RelBuilderFactory relBuilderFactory, String description) {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,80,description == null
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,82,: description);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,251,return table.unwrap(ScannableTable.class).scan(dataContext);
core/src/main/java/org/apache/calcite/rel/core/Project.java,279,mapping.set(((RexInputRef) exp.e).getIndex(), exp.i);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,107,final Mappings.TargetMapping mapping = project.getMapping();
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,108,if (mapping == null
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,109,|| Mappings.isIdentity(mapping)) {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1117,for (RelDataTypeField field : model.rowType.getFieldList()) {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1118,exprList.add(rexBuilder.makeZeroLiteral(field.getType()));
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1123,exprList.set(target,
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1124,rexBuilder.ensureType(expr.e.getType(),
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1125,RexInputRef.of(expr.i, input.rowType),
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1126,false));
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1128,throw MatchFailed.INSTANCE;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,923,if (needsNullIndicator(type)) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,927,RelDataType indicatorType =
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,928,typeFactory.createSqlType(SqlTypeName.BOOLEAN);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,929,if (type.isNullable()) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,930,indicatorType =
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,931,typeFactory.createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,932,indicatorType,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,933,true);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,935,RelDataTypeField nullIndicatorField =
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,936,new RelDataTypeFieldImpl(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,938,0,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,939,indicatorType);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,940,list.add(nullIndicatorField);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,941,nested = true;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,77,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,198,restructured = false;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,199,List<RexNode> structuringExps = null;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,202,structuringExps = restructureFields(root.getRowType());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,204,if (restructured) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,209,.projectNamed(structuringExps, root.getRowType().getFieldNames(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,211,.build();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,213,return flattened;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,221,if (field.getType().getSqlTypeName() == SqlTypeName.STRUCTURED) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,223,structuringExps.add(restructure(field.getType()));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,225,structuringExps.add(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,226,new RexInputRef(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,227,iRestructureInput,
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,228,field.getType()));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,229,++iRestructureInput;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,235,private RexNode restructure(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,236,RelDataType structuredType) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,238,RexInputRef nullIndicator =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,239,RexInputRef.of(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,240,iRestructureInput++, flattenedRootType.getFieldList());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,243,List<RexNode> inputExprs = restructureFields(structuredType);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,244,RexNode newInvocation =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,245,rexBuilder.makeNewInvocation(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,246,structuredType,
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,247,inputExprs);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,249,if (!structuredType.isNullable()) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,251,return newInvocation;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,256,RexNode[] caseOperands = new RexNode[3];
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,259,caseOperands[0] =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,260,rexBuilder.makeCall(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,261,SqlStdOperatorTable.IS_NULL,
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,262,nullIndicator);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,271,caseOperands[2] = newInvocation;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,273,return rexBuilder.makeCall(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,274,SqlStdOperatorTable.CASE,
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,275,caseOperands);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,295,int newOrdinal = 0;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,299,RelNode oldInput = null;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,300,for (RelNode oldInput1 : currentRel.getInputs()) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,301,RelDataType oldInputType = oldInput1.getRowType();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,302,int n = oldInputType.getFieldCount();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,303,if (oldOrdinal < n) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,304,oldInput = oldInput1;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,305,break;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,308,newOrdinal += newInput.getRowType().getFieldCount();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,309,oldOrdinal -= n;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,311,assert oldInput != null;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,313,RelDataType oldInputType = oldInput.getRowType();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,332,private int calculateFlattenedOffset(RelDataType rowType, int ordinal) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,333,int offset = 0;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,334,if (SqlTypeUtil.needsNullIndicator(rowType)) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,336,++offset;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,338,List<RelDataTypeField> oldFields = rowType.getFieldList();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,339,for (int i = 0; i < ordinal; ++i) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,340,RelDataType oldFieldType = oldFields.get(i).getType();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,341,if (oldFieldType.isStruct()) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,344,RelDataType flattened =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,345,SqlTypeUtil.flattenRecordType(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,346,rexBuilder.getTypeFactory(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,347,oldFieldType,
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,348,null);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,349,final List<RelDataTypeField> fields = flattened.getFieldList();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,350,offset += fields.size();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,352,++offset;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,355,return offset;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,407,RelNode newRel =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,408,rel.copy(rel.getTraitSet(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,409,getNewForOldRel(rel.getInput()),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,410,rel.getCondition().accept(new RewriteRexShuttle()));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,480,final List<Pair<RexNode, String>> flattenedExpList = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,481,flattenProjections(new RewriteRexShuttle(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,482,rel.getProjects(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,483,rel.getRowType().getFieldNames(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,485,flattenedExpList);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,487,.projectNamed(Pair.left(flattenedExpList), Pair.right(flattenedExpList),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,488,true);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,489,setNewForOldRel(rel, relBuilder.build());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,561,String fieldName =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,564,: fieldNames.get(i);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,565,if (!prefix.equals("")) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,566,fieldName = prefix + "$" + fieldName;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,578,RexInputRef inputRef = (RexInputRef) exp;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,582,RelDataType flattenedType =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,583,SqlTypeUtil.flattenRecordType(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,584,rexBuilder.getTypeFactory(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,585,exp.getType(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,586,null);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,587,List<RelDataTypeField> fieldList = flattenedType.getFieldList();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,588,int n = fieldList.size();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,589,for (int j = 0; j < n; ++j) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,591,flattenedExps.add(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,594,fieldName));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,600,if (exp.isA(SqlKind.NEW_SPECIFICATION)) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,603,flattenedExps.add(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,604,Pair.of(rexBuilder.makeLiteral(false),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,605,fieldName));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,607,if (RexLiteral.isNullLiteral(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,608,((RexCall) exp).operands.get(0))) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,611,flattenNullLiteral(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,612,exp.getType(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,613,flattenedExps);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,614,return;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,617,flattenProjections(new RewriteRexShuttle(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,626,int j = 0;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,628,List<RexNode> oldOperands = ((RexCall) exp).getOperands();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,629,if (oldOperands.get(0) instanceof RexInputRef) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,636,for (RelDataTypeField field : newExp.getType().getFieldList()) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,637,flattenedExps.add(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,638,Pair.of(rexBuilder.makeFieldAccess(newExp, field.getIndex()),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,639,fieldName + "$" + (j++)));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,677,flattenInputs(rel.getRowType().getFieldList(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,678,rexBuilder.makeRangeReference(newRel),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,679,flattenedExpList);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,681,.projectNamed(Pair.left(flattenedExpList),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,708,flattenInputs(field.getType().getFieldList(), ref, flattenedExpList);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,790,calculateFlattenedOffset(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1772,if (validator.getValidatedNodeType(node).isNullable()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1773,break;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,744,final UnifyRuleCall call = new UnifyRuleCall(rule, query, target, null);
core/src/main/java/org/apache/calcite/rel/mutable/MutableTableFunctionScan.java,72,&& inputs.equals(((MutableSetOp) obj).getInputs());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,94,private final RexToLixTranslator.InputGetter inputGetter;
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,93,boolean allColumnsInAggregate = aggregate.getGroupSet().
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,94,contains(filterColumns);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,595,throw Extensions.todo();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/VisitorImpl.java,99,return gotoStatement.expression.accept(this);
core/src/main/java/org/apache/calcite/rel/core/Match.java,37,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/rel/core/Match.java,69,protected final List<RexNode> partitionKeys;
core/src/main/java/org/apache/calcite/rel/core/Match.java,99,boolean allRows, List<RexNode> partitionKeys, RelCollation orderKeys,
core/src/main/java/org/apache/calcite/rel/core/Match.java,112,this.partitionKeys = ImmutableList.copyOf(partitionKeys);
core/src/main/java/org/apache/calcite/rel/core/Match.java,180,public List<RexNode> getPartitionKeys() {
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,402,boolean allRows, List<RexNode> partitionKeys, RelCollation orderKeys,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,415,boolean allRows, List<RexNode> partitionKeys, RelCollation orderKeys,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,63,boolean allRows, List<RexNode> partitionKeys, RelCollation orderKeys,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,77,List<RexNode> partitionKeys, RelCollation orderKeys, RexNode interval) {
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,91,boolean allRows, List<RexNode> partitionKeys, RelCollation orderKeys,
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,436,if (e.getPartitionKeys() != null) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,437,for (RexNode rex : e.getPartitionKeys()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,438,SqlNode sqlNode = context.toSql(null, rex);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,439,partitionSqlList.add(sqlNode);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2124,final List<RexNode> partitionKeys = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2127,partitionKeys.add(e);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2267,definitionNodes.build(), measureNodes.build(), after,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2268,subsetMap, allRows, partitionKeys, orders, intervalNode);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1206,final Registrar registrar = new Registrar();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1207,registrar.extraNodes.addAll(fields());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1208,registrar.names.addAll(peek().getRowType().getFieldNames());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1739,final List<RelFieldCollation> fieldCollations = new ArrayList<>();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1740,final List<RexNode> originalExtraNodes = fields();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1741,final List<RexNode> extraNodes = new ArrayList<>(originalExtraNodes);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1742,for (RexNode node : nodes) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1743,final RelFieldCollation collation =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1744,collation(node, RelFieldCollation.Direction.ASCENDING, null,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1745,extraNodes);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1747,.contains(collation.getFieldIndex())) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1748,fieldCollations.add(collation);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1760,final boolean addedFields = extraNodes.size() > originalExtraNodes.size();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1762,assert !addedFields;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1792,if (addedFields) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1793,project(extraNodes);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1799,if (addedFields) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1800,project(originalExtraNodes);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1872,final List<RelFieldCollation> fieldCollations = new ArrayList<>();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1873,for (RexNode orderKey : orderKeys) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1874,final RelFieldCollation.Direction direction;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1875,switch (orderKey.getKind()) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1876,case DESCENDING:
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1877,direction = RelFieldCollation.Direction.DESCENDING;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1878,orderKey = ((RexCall) orderKey).getOperands().get(0);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1879,break;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1880,case NULLS_FIRST:
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1881,case NULLS_LAST:
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1882,throw new AssertionError();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1883,default:
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1884,direction = RelFieldCollation.Direction.ASCENDING;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1885,break;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1887,final RelFieldCollation.NullDirection nullDirection =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1888,direction.defaultNullDirection();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1889,final RexInputRef ref = (RexInputRef) orderKey;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1890,fieldCollations.add(
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1891,new RelFieldCollation(ref.getIndex(), direction, nullDirection));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1924,ImmutableList.copyOf(partitionKeys), RelCollations.of(fieldCollations),
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2017,final List<RexNode> extraNodes = new ArrayList<>();
core/src/main/java/org/apache/calcite/util/Pair.java,208,return new AbstractList<Pair<K, V>>() {
core/src/main/java/org/apache/calcite/util/Pair.java,209,public Pair<K, V> get(int index) {
core/src/main/java/org/apache/calcite/util/Pair.java,210,return Pair.of(ks.get(index), vs.get(index));
core/src/main/java/org/apache/calcite/util/Pair.java,213,public int size() {
core/src/main/java/org/apache/calcite/util/Pair.java,214,return size;
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,127,BINDABLE_WINDOW_RULE);
core/src/main/java/org/apache/calcite/rel/core/Match.java,192,public abstract Match copy(RelNode input, RelDataType rowType,
core/src/main/java/org/apache/calcite/rel/core/Match.java,193,RexNode pattern, boolean strictStart, boolean strictEnd,
core/src/main/java/org/apache/calcite/rel/core/Match.java,194,Map<String, RexNode> patternDefinitions, Map<String, RexNode> measures,
core/src/main/java/org/apache/calcite/rel/core/Match.java,195,RexNode after, Map<String, ? extends SortedSet<String>> subsets,
core/src/main/java/org/apache/calcite/rel/core/Match.java,196,boolean allRows, List<RexNode> partitionKeys, RelCollation orderKeys,
core/src/main/java/org/apache/calcite/rel/core/Match.java,197,RexNode interval);
core/src/main/java/org/apache/calcite/rel/core/Match.java,201,&& traitSet == getTraitSet()) {
core/src/main/java/org/apache/calcite/rel/core/Match.java,202,return this;
core/src/main/java/org/apache/calcite/rel/core/Match.java,205,return copy(inputs.get(0), rowType, pattern, strictStart, strictEnd,
core/src/main/java/org/apache/calcite/rel/core/Match.java,206,patternDefinitions, measures, after, subsets, allRows,
core/src/main/java/org/apache/calcite/rel/core/Match.java,207,partitionKeys, orderKeys, interval);
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,58,private LogicalMatch(RelOptCluster cluster, RelTraitSet traitSet,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,80,return new LogicalMatch(cluster, traitSet, input, rowType, pattern,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,93,final RelTraitSet traitSet = getCluster().traitSetOf(Convention.NONE);
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,94,return new LogicalMatch(getCluster(), traitSet,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,95,input,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,96,rowType,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,97,pattern, strictStart, strictEnd, patternDefinitions, measures,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,98,after, subsets, allRows, partitionKeys, orderKeys,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,99,interval);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,20,import java.util.ArrayList;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,21,import java.util.Arrays;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,28,static final Indent INDENT = new Indent(20);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,31,private int level;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,32,private String indent = "";
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,78,indent = INDENT.get(++level);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,85,indent = INDENT.get(--level);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,95,buf.append(indent);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,147,buf.append(indent);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,199,private static class Indent extends ArrayList<String> {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,200,Indent(int initialCapacity) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,201,super(initialCapacity);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,202,ensureSize(initialCapacity);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,205,public synchronized String of(int index) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,206,ensureSize(index + 1);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,207,return get(index);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,210,private void ensureSize(int targetSize) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,211,if (targetSize < size()) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,212,return;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,214,char[] chars = new char[2 * targetSize];
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,215,Arrays.fill(chars, ' ');
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,217,clear();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,218,for (int i = 0; i < targetSize; i++) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,31,import org.apache.calcite.sql.fun.SqlCastFunction;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,467,RexNode first = removeCast(operands.get(0));
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,476,RexNode first = removeCast(operands.get(0));
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,477,RexNode second = removeCast(operands.get(1));
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,494,private static RexNode removeCast(RexNode inputRef) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,495,if (inputRef instanceof RexCall) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,496,final RexCall castedRef = (RexCall) inputRef;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,497,final SqlOperator operator = castedRef.getOperator();
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,498,if (operator instanceof SqlCastFunction) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,499,inputRef = castedRef.getOperands().get(0);
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,502,return inputRef;
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,30,import org.apache.calcite.sql.SqlOperator;
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,31,import org.apache.calcite.sql.fun.SqlCastFunction;
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,111,inputRef = removeCast(inputRef);
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,112,literal = removeCast(literal);
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,165,private static RexNode removeCast(RexNode inputRef) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,166,if (inputRef instanceof RexCall) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,167,final RexCall castedRef = (RexCall) inputRef;
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,168,final SqlOperator operator = castedRef.getOperator();
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,169,if (operator instanceof SqlCastFunction) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,170,inputRef = castedRef.getOperands().get(0);
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,173,return inputRef;
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,76,super(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3326,case AND:
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3333,final int left2 = leftCount + extraLeftExprs.size();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3335,final RexNode e =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3336,pushDownEqualJoinConditions(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3337,operand,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3338,leftCount,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3339,rightCount,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3340,extraLeftExprs,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3342,final List<RexNode> remainingOperands = Util.skip(operands, i + 1);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3343,final int left3 = leftCount + extraLeftExprs.size();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3344,fix(remainingOperands, left2, left3);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3345,fix(list, left2, left3);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3346,list.add(e);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,361,final String op = (String) map.get("op");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,363,if (op != null) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,442,final List<SqlOperator> operatorList =
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,443,SqlStdOperatorTable.instance().getOperatorList();
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,444,for (SqlOperator operator : operatorList) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,445,if (operator.getName().equals(op)) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,460,private String toJson(SqlOperator operator) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,462,return operator.getName();
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,273,final String aggName = (String) jsonAggCall.get("agg");
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,299,values2.add(
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,300,SqlStdOperatorTable.AS.createCall(POS, value.left,
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,301,new SqlIdentifier(value.right, POS)));
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,306,new SqlIdentifier("DUAL", POS), null, null,
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,326,final List<SqlNode> list = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,327,list.add(query);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,328,list.add(new SqlIdentifier("t", POS));
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,329,for (String fieldName : fieldNames) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,330,list.add(new SqlIdentifier(fieldName, POS));
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,332,query = SqlStdOperatorTable.AS.createCall(POS, list);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,521,private SqlCall as(SqlNode e, String alias) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,522,return SqlStdOperatorTable.AS.createCall(POS, e,
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,523,new SqlIdentifier(alias, POS));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,119,node = SqlStdOperatorTable.AS.createCall(
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,120,POS, node, new SqlIdentifier(name, POS));
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,491,protected boolean requiresAliasForFromItems() {
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,67,String stringValue = ((NlsString) value).getValue();
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,71,assert value instanceof NlsString;
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,72,writer.literal(value.toString());
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,78,private final String identifierQuoteString;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,79,private final String identifierEndQuoteString;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,80,private final String identifierEscapedQuote;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,163,return new ContextImpl(DatabaseProduct.UNKNOWN, null, null, -1, -1, null,
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,278,if (identifierQuoteString == null) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,279,buf.append(val); // quoting is not supported
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,280,return buf;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,282,String val2 =
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,283,val.replaceAll(
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,284,identifierEndQuoteString,
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,285,identifierEscapedQuote);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,286,buf.append(identifierQuoteString);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,287,buf.append(val2);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,288,buf.append(identifierEndQuoteString);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,323,public String quoteStringLiteral(String val) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,324,if (containsNonAscii(val)) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,325,final StringBuilder buf = new StringBuilder();
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,327,return buf.toString();
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,329,val = FakeUtil.replace(val, "'", "''");
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,330,return "'" + val + "'";
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,428,private static boolean containsNonAscii(String s) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,431,if (c < 32 || c >= 128) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,474,&& (val.charAt(val.length() - 1) == '\'')) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,475,if (val.length() > 2) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,476,val = FakeUtil.replace(val, "''", "'");
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,477,return val.substring(1, val.length() - 1);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,480,return "";
core/src/main/java/org/apache/calcite/sql/fun/SqlLiteralChainOperator.java,174,writer.literal(nls.asSql(true, false));
core/src/main/java/org/apache/calcite/sql/fun/SqlLiteralChainOperator.java,177,writer.literal(nls.asSql(false, false));
core/src/main/java/org/apache/calcite/util/NlsString.java,161,boolean suffix) {
core/src/main/java/org/apache/calcite/util/NlsString.java,163,if (prefix && (null != charsetName)) {
core/src/main/java/org/apache/calcite/util/NlsString.java,164,ret.append("_");
core/src/main/java/org/apache/calcite/util/NlsString.java,165,ret.append(charsetName);
core/src/main/java/org/apache/calcite/util/NlsString.java,167,ret.append("'");
core/src/main/java/org/apache/calcite/util/NlsString.java,169,ret.append("'");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,403,final Object literal = map.get("literal");
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,343,if (Predicate.of(t) == null) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,356,if (Predicate.of(t) != null) {
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,407,return Lists.transform(nodes, MutableRels::toMutable);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,97,return rewriteSome(e, builder);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,142,private RexNode rewriteSome(RexSubQuery e, RelBuilder builder) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,165,.aggregate(builder.groupKey(),
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,166,op.comparisonKind == SqlKind.GREATER_THAN
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,170,builder.count(false, "c"),
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,173,.join(JoinRelType.INNER);
core/src/main/java/org/apache/calcite/rel/mutable/MutableMultiRel.java,23,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/rel/mutable/MutableMultiRel.java,35,this.inputs = ImmutableList.copyOf(inputs);
core/src/main/java/org/apache/calcite/adapter/enumerable/ReflectiveCallNotNullImplementor.java,51,return Expressions.call(method, translatedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/ReflectiveCallNotNullImplementor.java,57,return Expressions.call(target, method, translatedOperands);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Shuttle.java,253,public Statement visit(TryStatement tryStatement) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Shuttle.java,254,return tryStatement;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TryStatement.java,39,return shuttle.visit(this);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,312,List<RelNode> inputRels = input.set.getRelsFromAllSubsets();
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,103,if (!description.matches("[A-Za-z][-A-Za-z0-9_.():]*")) {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,81,? "ConverterRule<in=" + in + ",out=" + out + ">"
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,86,materialization.queryRel =
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,87,sqlToRelConverter2.convertQuery(node, true, true).rel;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,499,assert queryDescendant.rowType.equals(targetDescendant.rowType);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,536,MutableRel parent = result.call.query.replaceInParent(result.result);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,547,: Pair.of(result.result, result.call.query);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,141,private final boolean simplify;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,152,this.simplify = Hook.REL_BUILDER_SIMPLIFY.get(true);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1029,action.getConfig().getDefaultSchema() != null
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1040,action.getConfig().getContext(),
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1041,action.getConfig().getCostFactory());
core/src/main/java/org/apache/calcite/tools/Frameworks.java,83,public abstract static class PrepareAction<R> {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,86,this.config = newConfigBuilder() //
core/src/main/java/org/apache/calcite/tools/Frameworks.java,98,public abstract R apply(RelOptCluster cluster, RelOptSchema relOptSchema,
core/src/main/java/org/apache/calcite/tools/Frameworks.java,99,SchemaPlus rootSchema, CalciteServerStatement statement);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,109,public static <R> R withPlanner(final PlannerAction<R> action, //
core/src/main/java/org/apache/calcite/tools/Frameworks.java,111,return withPrepare(
core/src/main/java/org/apache/calcite/tools/Frameworks.java,112,new Frameworks.PrepareAction<R>(config) {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,113,public R apply(RelOptCluster cluster, RelOptSchema relOptSchema,
core/src/main/java/org/apache/calcite/tools/Frameworks.java,114,SchemaPlus rootSchema, CalciteServerStatement statement) {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,115,final CalciteSchema schema =
core/src/main/java/org/apache/calcite/tools/Frameworks.java,116,CalciteSchema.from(
core/src/main/java/org/apache/calcite/tools/Frameworks.java,117,Util.first(config.getDefaultSchema(), rootSchema));
core/src/main/java/org/apache/calcite/tools/Frameworks.java,118,return action.apply(cluster, relOptSchema, schema.root().plus());
core/src/main/java/org/apache/calcite/tools/Frameworks.java,142,public static <R> R withPrepare(PrepareAction<R> action) {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,145,if (action.config.getTypeSystem() != RelDataTypeSystem.DEFAULT) {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,147,action.config.getTypeSystem().getClass().getName());
core/src/main/java/org/apache/calcite/tools/Frameworks.java,154,return new CalcitePrepareImpl().perform(statement, action);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,65,import org.apache.calcite.schema.SchemaPlus;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,66,import org.apache.calcite.server.CalciteServerStatement;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,198,final RelOptCluster[] clusters = {null};
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,199,final RelOptSchema[] relOptSchemas = {null};
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,200,Frameworks.withPrepare(
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,201,new Frameworks.PrepareAction<Void>(config) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,202,public Void apply(RelOptCluster cluster, RelOptSchema relOptSchema,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,203,SchemaPlus rootSchema, CalciteServerStatement statement) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,204,clusters[0] = cluster;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,205,relOptSchemas[0] = relOptSchema;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,206,return null;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,209,return new RelBuilder(config.getContext(), clusters[0], relOptSchemas[0]);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,30,RelFactories.FilterFactory FILTER_FACTORY = EnumerableFilter::create;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,453,ret = factory.createFilter(ret, conditionExp);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,624,return factory.createFilter(child, condition);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,630,return filterFactory.createFilter(child, condition);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,653,return filterFactory.createFilter(child, condition);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,703,return factory.createFilter(rel, condition);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,223,RelNode createFilter(RelNode input, RexNode condition);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,231,public RelNode createFilter(RelNode input, RexNode condition) {
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,232,return LogicalFilter.create(input, condition);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,72,factory.createFilter(newSemiJoin, filter.getCondition());
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,486,relBuilder.push(
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,487,filter.copy(filter.getTraitSet(), newInput, newConditionExpr));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,920,return filter(ImmutableList.copyOf(predicates));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,938,final RelNode filter = filterFactory.createFilter(frame.rel, simplifiedPredicates);
pig/src/main/java/org/apache/calcite/adapter/pig/PigRelFactories.java,74,return new PigFilter(input.getCluster(), input.getTraitSet().replace(PigRel.CONVENTION),
pig/src/main/java/org/apache/calcite/adapter/pig/PigRelFactories.java,75,input, condition);
core/src/main/java/org/apache/calcite/sql/dialect/OracleSqlDialect.java,36,.withIdentifierQuoteString("\""));
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,977,return call.result(call.query);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3334,final int right2 = rightCount + extraRightExprs.size();
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,25,import org.apache.calcite.rel.core.JoinRelType;
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,87,JoinRelType.INNER,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,190,if (RelOptUtil.classifyFilters(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3267,+ rightCount + extraRightExprs.size(),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3268,0, 0, leftCount,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3269,leftCount, leftCount + extraLeftExprs.size(), rightCount);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1628,return values(frame.rel.getRowType());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,40,public static final RelOptRule ENUMERABLE_SEMI_JOIN_RULE =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,41,new EnumerableSemiJoinRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,17,package org.apache.calcite.adapter.enumerable;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,22,import org.apache.calcite.plan.RelOptCluster;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,25,import org.apache.calcite.plan.RelTraitSet;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,26,import org.apache.calcite.rel.InvalidRelException;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,27,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,29,import org.apache.calcite.rel.core.JoinRelType;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,31,import org.apache.calcite.rel.metadata.RelMetadataQuery;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,32,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,34,import org.apache.calcite.util.ImmutableIntList;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,43,EnumerableSemiJoin(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,44,RelOptCluster cluster,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,45,RelTraitSet traits,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,46,RelNode left,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,47,RelNode right,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,48,RexNode condition,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,49,ImmutableIntList leftKeys,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,51,throws InvalidRelException {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,57,ImmutableIntList leftKeys, ImmutableIntList rightKeys) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,58,final RelOptCluster cluster = left.getCluster();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,59,try {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,82,throw new AssertionError(e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,17,package org.apache.calcite.adapter.enumerable;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,19,import org.apache.calcite.plan.Convention;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,20,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,21,import org.apache.calcite.rel.convert.ConverterRule;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,24,import java.util.ArrayList;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,25,import java.util.List;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,30,class EnumerableSemiJoinRule extends ConverterRule {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,31,EnumerableSemiJoinRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,38,final List<RelNode> newInputs = new ArrayList<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,39,for (RelNode input : semiJoin.getInputs()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,40,if (!(input.getConvention() instanceof EnumerableConvention)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,41,input =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,42,convert(input,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,43,input.getTraitSet().replace(EnumerableConvention.INSTANCE));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,45,newInputs.add(input);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,341,final JoinInfo joinInfo = JoinInfo.of(left, right, condition);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,342,return SemiJoin.create(left, right,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,343,condition, joinInfo.leftKeys, joinInfo.rightKeys);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,17,package org.apache.calcite.rel.core;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,19,import org.apache.calcite.plan.Convention;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,20,import org.apache.calcite.plan.RelOptCluster;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,21,import org.apache.calcite.plan.RelOptCost;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,22,import org.apache.calcite.plan.RelOptPlanner;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,23,import org.apache.calcite.plan.RelTraitSet;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,24,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,25,import org.apache.calcite.rel.metadata.RelMdUtil;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,26,import org.apache.calcite.rel.metadata.RelMetadataQuery;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,27,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,28,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,29,import org.apache.calcite.sql.validate.SqlValidatorUtil;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,30,import org.apache.calcite.util.ImmutableIntList;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,31,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,33,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,34,import com.google.common.collect.ImmutableSet;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,43,public class SemiJoin extends EquiJoin {
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,59,public SemiJoin(
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,60,RelOptCluster cluster,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,61,RelTraitSet traitSet,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,62,RelNode left,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,63,RelNode right,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,64,RexNode condition,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,65,ImmutableIntList leftKeys,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,66,ImmutableIntList rightKeys) {
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,67,super(
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,68,cluster,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,69,traitSet,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,70,left,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,71,right,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,72,condition,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,73,leftKeys,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,74,rightKeys,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,75,ImmutableSet.of(),
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,76,JoinRelType.INNER);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,80,public static SemiJoin create(RelNode left, RelNode right, RexNode condition,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,81,ImmutableIntList leftKeys, ImmutableIntList rightKeys) {
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,82,final RelOptCluster cluster = left.getCluster();
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,83,return new SemiJoin(cluster, cluster.traitSetOf(Convention.NONE), left,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,84,right, condition, leftKeys, rightKeys);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,90,RelNode left, RelNode right, JoinRelType joinType, boolean semiJoinDone) {
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,91,assert joinType == JoinRelType.INNER;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,92,final JoinInfo joinInfo = JoinInfo.of(left, right, condition);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,93,assert joinInfo.isEqui();
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,94,return new SemiJoin(getCluster(), traitSet, left, right, condition,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,95,joinInfo.leftKeys, joinInfo.rightKeys);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,99,RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,101,return planner.getCostFactory().makeTinyCost();
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,105,return Util.first(
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,106,RelMdUtil.getSemiJoinRowCount(mq, left, right, joinType, condition),
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,107,1D);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,117,return SqlValidatorUtil.deriveJoinRowType(
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,118,left.getRowType(),
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,119,null,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,120,JoinRelType.INNER,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,121,getCluster().getTypeFactory(),
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,122,null,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,123,ImmutableList.of());
core/src/main/java/org/apache/calcite/rel/mutable/MutableRelType.java,32,SEMIJOIN,
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,246,case SEMIJOIN:
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,247,final MutableSemiJoin semiJoin = (MutableSemiJoin) node;
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,248,relBuilder.push(fromMutable(semiJoin.getLeft(), relBuilder));
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,249,relBuilder.push(fromMutable(semiJoin.getRight(), relBuilder));
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,250,relBuilder.semiJoin(semiJoin.condition);
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,251,return relBuilder.build();
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,17,package org.apache.calcite.rel.mutable;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,19,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,20,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,21,import org.apache.calcite.util.ImmutableIntList;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,23,import java.util.Objects;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,26,public class MutableSemiJoin extends MutableBiRel {
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,27,public final RexNode condition;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,28,public final ImmutableIntList leftKeys;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,29,public final ImmutableIntList rightKeys;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,31,private MutableSemiJoin(
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,32,RelDataType rowType,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,33,MutableRel left,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,34,MutableRel right,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,35,RexNode condition,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,36,ImmutableIntList leftKeys,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,37,ImmutableIntList rightKeys) {
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,38,super(MutableRelType.SEMIJOIN, left.cluster, rowType, left, right);
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,39,this.condition = condition;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,40,this.leftKeys = leftKeys;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,41,this.rightKeys = rightKeys;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,54,public static MutableSemiJoin of(RelDataType rowType, MutableRel left,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,55,MutableRel right, RexNode condition, ImmutableIntList leftKeys,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,56,ImmutableIntList rightKeys) {
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,57,return new MutableSemiJoin(rowType, left, right, condition, leftKeys,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,58,rightKeys);
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,62,return obj == this
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,63,|| obj instanceof MutableSemiJoin
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,69,&& right.equals(((MutableSemiJoin) obj).right);
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,81,.append(")");
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,85,return MutableSemiJoin.of(rowType, left.clone(),
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,86,right.clone(), condition, leftKeys, rightKeys);
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,19,import org.apache.calcite.linq4j.CorrelateJoinType;
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,87,public CorrelateJoinType toLinq4j() {
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,90,return CorrelateJoinType.INNER;
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,92,return CorrelateJoinType.LEFT;
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,94,return CorrelateJoinType.SEMI;
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,96,return CorrelateJoinType.ANTI;
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,309,if (list.size() == 1) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,321,for (List<RexLiteral> tuple : e.getTuples()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,322,selects.add(ANONYMOUS_ROW.createCall(exprList(context, tuple)));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,205,return program.getCollations(mq.collations(input));
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,114,.push(call.rel(3).getInput(0));
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,55,private static final LoadingCache<Object, RelDataType> CACHE =
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,60,private static RelDataType keyToType(@Nonnull Object k) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,61,if (k instanceof RelDataType) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,62,return (RelDataType) k;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,65,final Key key = (Key) k;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,343,return CACHE.getUnchecked(type);
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,141,RelOptUtil.permute(child.cluster.getTypeFactory(), rowType,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4027,&& targetRowType.getFieldCount() >= i
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1348,permute(query, project.getInput(), mapping.inverse());
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1349,final MutableRel result = unifyAggregates(aggregate2, target);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1350,return result == null ? null : call.result(result);
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,142,Mappings.bijection(posList)),
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,222,Iterables.transform(bitSets, input1 -> apply(mapping, input1)));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1302,RelNode aggregate = aggregateFactory.createAggregate(r,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1312,RexNode node = registrar.extraNodes.get(groupField);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1316,fields.add(frame.fields.get(((RexInputRef) node).getIndex()));
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,476,Map<Integer, Integer> mapNewInputToProjOutputs = new HashMap<>();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,591,combinedMap.put(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,603,postProjects.add(entry.getKey() + frame.corDefOutputs.size(),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,604,entry.getValue());
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,611,return register(rel, relBuilder.build(), combinedMap, corDefOutputs);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSqlCastConverter.java,64,operandExpression, toType, nullEqualToEmpty ? "" : null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSqlCastConverter.java,82,nullEqualToEmpty ? "" : null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSqlCastConverter.java,95,nullEqualToEmpty ? "" : null);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,98,info.leftKeys,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,99,info.rightKeys,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,19,import org.apache.calcite.linq4j.tree.BlockBuilder;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,20,import org.apache.calcite.linq4j.tree.Expression;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,21,import org.apache.calcite.linq4j.tree.Expressions;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,23,import org.apache.calcite.plan.RelOptCost;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,24,import org.apache.calcite.plan.RelOptPlanner;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,28,import org.apache.calcite.rel.core.JoinInfo;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,30,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,33,import org.apache.calcite.util.BuiltInMethod;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,35,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,39,public class EnumerableSemiJoin extends SemiJoin implements EnumerableRel {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,52,super(cluster, traits, left, right, condition, leftKeys, rightKeys);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,56,public static EnumerableSemiJoin create(RelNode left, RelNode right, RexNode condition,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,66,throw new AssertionError(e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,71,RelNode left, RelNode right, JoinRelType joinType,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,72,boolean semiJoinDone) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,73,assert joinType == JoinRelType.INNER;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,74,final JoinInfo joinInfo = JoinInfo.of(left, right, condition);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,75,assert joinInfo.isEqui();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,76,try {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,77,return new EnumerableSemiJoin(getCluster(), traitSet, left, right,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,78,condition, joinInfo.leftKeys, joinInfo.rightKeys);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,87,RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,88,double rowCount = mq.getRowCount(this);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,91,final double rightRowCount = right.estimateRowCount(mq);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,92,final double leftRowCount = left.estimateRowCount(mq);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,93,if (Double.isInfinite(leftRowCount)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,94,rowCount = leftRowCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,96,rowCount += Util.nLogN(leftRowCount);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,98,if (Double.isInfinite(rightRowCount)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,99,rowCount = rightRowCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,101,rowCount += rightRowCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,103,return planner.getCostFactory().makeCost(rowCount, 0, 0).multiplyBy(.01d);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,106,public Result implement(EnumerableRelImplementor implementor, Prefer pref) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,107,BlockBuilder builder = new BlockBuilder();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,108,final Result leftResult =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,109,implementor.visitChild(this, 0, (EnumerableRel) left, pref);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,110,Expression leftExpression =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,111,builder.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,113,final Result rightResult =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,114,implementor.visitChild(this, 1, (EnumerableRel) right, pref);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,115,Expression rightExpression =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,116,builder.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,118,final PhysType physType = leftResult.physType;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,119,return implementor.result(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,120,physType,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,121,builder.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,122,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,123,BuiltInMethod.SEMI_JOIN.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,124,Expressions.list(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,125,leftExpression,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,126,rightExpression,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,127,leftResult.physType.generateAccessor(leftKeys),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,129,.toBlock());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,47,return EnumerableSemiJoin.create(newInputs.get(0), newInputs.get(1),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,48,semiJoin.getCondition(), semiJoin.leftKeys, semiJoin.rightKeys);
core/src/main/java/org/apache/calcite/rel/core/Correlate.java,30,import org.apache.calcite.sql.SemiJoinType;
core/src/main/java/org/apache/calcite/rel/logical/LogicalCorrelate.java,28,import org.apache.calcite.sql.SemiJoinType;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,32,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,303,public Boolean areColumnsUnique(SemiJoin rel, RelMetadataQuery mq,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,304,ImmutableBitSet columns, boolean ignoreNulls) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,307,return mq.areColumnsUnique(rel.getLeft(), columns, ignoreNulls);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistinctRowCount.java,27,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistinctRowCount.java,152,public Double getDistinctRowCount(SemiJoin rel, RelMetadataQuery mq,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistinctRowCount.java,153,ImmutableBitSet groupKey, RexNode predicate) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdNodeTypes.java,29,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdNodeTypes.java,117,public Multimap<Class<? extends RelNode>, RelNode> getNodeTypes(SemiJoin rel,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdNodeTypes.java,118,RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdNodeTypes.java,119,return getNodeTypes(rel, SemiJoin.class, mq);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPopulationSize.java,25,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPopulationSize.java,88,public Double getPopulationSize(SemiJoin rel, RelMetadataQuery mq,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPopulationSize.java,89,ImmutableBitSet groupKey) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPopulationSize.java,90,return mq.getPopulationSize(rel.getLeft(), groupKey);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,30,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,37,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,191,public Double getRowCount(SemiJoin rel, RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,194,RexNode semiJoinSelectivity =
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,195,RelMdUtil.makeSemiJoinSelectivityRexNode(mq, rel);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,197,return NumberUtil.multiply(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,198,mq.getSelectivity(rel.getLeft(), semiJoinSelectivity),
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,199,mq.getRowCount(rel.getLeft()));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdSize.java,29,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdSize.java,180,public List<Double> averageColumnSizes(SemiJoin rel, RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,26,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,203,public Set<ImmutableBitSet> getUniqueKeys(SemiJoin rel, RelMetadataQuery mq,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,204,boolean ignoreNulls) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,207,return mq.getUniqueKeys(rel.getLeft(), ignoreNulls);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,28,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,117,public static double computeSemiJoinSelectivity(RelMetadataQuery mq,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,118,SemiJoin rel) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,119,return computeSemiJoinSelectivity(mq, rel.getLeft(), rel.getRight(),
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,120,rel.getLeftKeys(), rel.getRightKeys());
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,35,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,366,if (rel instanceof SemiJoin) {
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,367,final SemiJoin semiJoin = (SemiJoin) rel;
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,368,final MutableRel left = toMutable(semiJoin.getLeft());
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,369,final MutableRel right = toMutable(semiJoin.getRight());
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,370,return MutableSemiJoin.of(semiJoin.getRowType(), left, right,
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,371,semiJoin.getCondition(), semiJoin.getLeftKeys(), semiJoin.getRightKeys());
core/src/main/java/org/apache/calcite/tools/Programs.java,110,EnumerableRules.ENUMERABLE_SEMI_JOIN_RULE,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,625,if (from.getKind() == SqlKind.VALUES) {
core/src/main/java/org/apache/calcite/sql/fun/SqlRollupOperator.java,40,private static void unparseCube(SqlWriter writer, SqlCall call) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,174,final DateTimeUtils.PrecisionTime pt =
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,175,DateTimeUtils.parsePrecisionDateTimeLiteral(dateStr,
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,176,Format.PER_THREAD.get().timestamp, DateTimeUtils.UTC_ZONE, -1);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,504,final Schema schema = new CalciteConnectionImpl.RootSchema();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,91,super();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,234,DatabaseMetaData metaData = connection.getMetaData();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,235,resultSet = metaData.getTables(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,236,catalog,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,237,schema,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,238,null,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,239,null);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,242,while (resultSet.next()) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,243,final String tableName = resultSet.getString(3);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,244,final String catalogName = resultSet.getString(1);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,245,final String schemaName = resultSet.getString(2);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,246,final String tableTypeName = resultSet.getString(4);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,257,tableTypeName == null
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,259,: tableTypeName.toUpperCase(Locale.ROOT).replace(' ', '_');
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,266,new JdbcTable(this, catalogName, schemaName, tableName, tableType);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,267,builder.put(tableName, table);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,634,return call(SqlStdOperatorTable.AS, expr, literal(alias));
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,493,String digest = vertex.getCurrentRel().getDigest();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,494,return mapDigestToVertex.get(digest) != null;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,822,String digest = rel.getDigest();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,823,HepRelVertex equivVertex = mapDigestToVertex.get(digest);
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,889,String oldDigest = vertex.getCurrentRel().toString();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,890,if (mapDigestToVertex.get(oldDigest) == vertex) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,891,mapDigestToVertex.remove(oldDigest);
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,893,String newDigest = rel.getDigest();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,901,mapDigestToVertex.put(newDigest, vertex);
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,966,Iterator<Map.Entry<String, HepRelVertex>> digestIter =
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,88,if (newCalc.getDigest().equals(bottomCalc.getDigest())) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,185,return DatabaseProduct.DERBY;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,953,Context withIdentifierQuoteString(String identifierQuoteString);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,974,String identifierQuoteString, NullCollation nullCollation,
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,1041,public Context withIdentifierQuoteString(String identifierQuoteString) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,1051,public Context withNullCollation(@Nonnull NullCollation nullCollation) {
core/src/main/java/org/apache/calcite/sql/dialect/MssqlSqlDialect.java,44,.withIdentifierQuoteString("["));
core/src/main/java/org/apache/calcite/sql/dialect/RedshiftSqlDialect.java,30,.withIdentifierQuoteString("\""));
core/src/main/java/org/apache/calcite/sql/dialect/VerticaSqlDialect.java,28,.withIdentifierQuoteString("\""));
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,252,side.split.put(aggCall.i, index);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,261,if (rexNode.getType().getSqlTypeName() == SqlTypeName.DATE
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,262,|| rexNode.getType().getSqlTypeName() == SqlTypeName.TIMESTAMP
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,264,== SqlTypeName.TIMESTAMP_WITH_LOCAL_TIME_ZONE) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,312,if (floorValueNode.getType().getSqlTypeName() == SqlTypeName.DATE
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,313,|| floorValueNode.getType().getSqlTypeName() == SqlTypeName.TIMESTAMP
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,315,== SqlTypeName.TIMESTAMP_WITH_LOCAL_TIME_ZONE) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,332,extractColumnName(((RexCall) rexNode).getOperands().get(0), rowType, druidQuery);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,334,final SqlTypeName toTypeName = rexNode.getType().getSqlTypeName();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,335,if (toTypeName == SqlTypeName.DATE || toTypeName == SqlTypeName.TIMESTAMP
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,336,|| toTypeName == SqlTypeName.TIMESTAMP_WITH_LOCAL_TIME_ZONE) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,765,if (druidColumn.left == null || druidColumn.right != null) {
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1485,rewritingMapping.set(k, sourceIdx);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1518,for (int i = 0; i < queryAggregate.getAggCallList().size(); i++) {
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1520,rexBuilder.makeInputRef(result, queryAggregate.getGroupCount() + i));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,473,literal.getValueAs(BigDecimal.class).toString(), POS);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,476,literal.getValueAs(BigDecimal.class).toString(), POS);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFilterableTable.java,72,if (filter.isA(SqlKind.EQUALS)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,20,import org.apache.calcite.jdbc.CalciteSchema;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3042,private void checkRollUpInUsing(SqlIdentifier identifier, SqlNode leftOrRight) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3043,leftOrRight = stripAs(leftOrRight);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3045,if (leftOrRight instanceof SqlIdentifier) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3046,SqlIdentifier from = (SqlIdentifier) leftOrRight;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3049,String name = Util.last(identifier.names);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3051,if (table != null && table.isRolledUp(name)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3052,throw newValidationError(identifier, RESOURCE.rolledUpNotAllowed(name, "USING"));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3095,checkRollUpInUsing(id, left);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3096,checkRollUpInUsing(id, right);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3430,String tableAlias = pair.left;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3433,Table table = findTable(tableAlias);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3434,if (table != null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3436,catalogReader.getConfig());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3450,String tableAlias = pair.left;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3453,Table table = findTable(tableAlias);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3454,if (table != null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3461,CalciteSchema.TableEntry entry = schema.getTable(tableName, caseSensitive);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3462,if (entry != null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3463,return entry.getTable();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3467,for (CalciteSchema subSchema : schema.getSubSchemaMap().values()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3469,if (table != null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3470,return table;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3474,return null;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3480,private Table findTable(String alias) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3481,List<String> names = null;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3482,if (tableScope == null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3484,return null;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3487,for (ScopeChild child : tableScope.children) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3488,if (catalogReader.nameMatcher().matches(child.name, alias)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3489,names = ((SqlIdentifier) child.namespace.getNode()).names;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3490,break;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3493,if (names == null || names.size() == 0) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3494,return null;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3500,CalciteSchema.TableEntry entry =
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3501,SqlValidatorUtil.getTableEntry(catalogReader, names);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3503,return entry == null ? null : entry.getTable();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,66,static String isItem(RexCall call) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,134,final String name = isItem(call);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,141,return strings.get(0).startsWith("$") ? strings.get(0).substring(1) : strings.get(0);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,475,private static class TypeFinder extends VisitorImpl<Void> {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,501,if (constantExpression.value instanceof Type) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,502,types.add((Type) constantExpression.value);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchProject.java,86,StringBuilder query = new StringBuilder();
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,534,super(Double.MAX_VALUE, Math::max);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,476,if (SqlUtil.isNullLiteral(left, false)) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,477,return cx.convertExpression(left);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,479,RexNode arg = cx.convertExpression(left);
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,40,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,90,final RelDataType operandType = callBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,91,final SqlSingleOperandTypeChecker checker = getChecker(operandType);
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,96,private SqlSingleOperandTypeChecker getChecker(RelDataType operandType) {
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,109,throw new AssertionError(operandType.getSqlTypeName());
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,468,return Arrays.equals(v1, v2);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,472,return Arrays.hashCode(t);
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,46,public class ProjectCorrelateTransposeRule  extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,49,new ProjectCorrelateTransposeRule(expr -> true,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,43,new ProjectSetOpTransposeRule(expr -> false,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,98,for (RelNode input : setOp.getInputs()) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,101,Project p = pushProject.createProjectRefsAndExprs(input, true, false);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,102,newSetOpInputs.add(pushProject.createNewProject(p, adjustments));
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,106,SetOp newSetOp =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,107,setOp.copy(setOp.getTraitSet(), newSetOpInputs);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,109,call.transformTo(newSetOp);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,167,|| op.comparisonKind == SqlKind.GREATER_THAN_OR_EQUAL
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,169,: builder.max("m", builder.field(0)),
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,174,return builder.call(SqlStdOperatorTable.CASE,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,175,builder.call(SqlStdOperatorTable.EQUALS,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,176,builder.field("q", "c"), builder.literal(0)),
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,177,builder.literal(false),
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,178,builder.call(SqlStdOperatorTable.IS_TRUE,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,179,builder.call(RelOptUtil.op(op.comparisonKind, null),
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,180,e.operands.get(0), builder.field("q", "m"))),
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,181,builder.literal(true),
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,182,builder.call(SqlStdOperatorTable.GREATER_THAN,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,183,builder.field("q", "c"), builder.field("q", "d")),
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,184,builder.literal(null),
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,185,builder.call(RelOptUtil.op(op.comparisonKind, null),
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,186,e.operands.get(0), builder.field("q", "m")));
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,121,newFilterRel = filter.copy(filter.getTraitSet(), project.getInput(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,41,new ProjectJoinTransposeRule(expr -> true,
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,517,(RexNode) rexBuilder.makeInputRef(
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,632,(RexNode) rexBuilder.makeInputRef(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,239,return builder.build();
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,276,if (hasAmbiguousUnresolvedStar(namespace.getRowType(), field,
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,277,columnName)) {
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,495,if (hasAmbiguousUnresolvedStar(step.rowType, field0, name)) {
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,547,private boolean hasAmbiguousUnresolvedStar(RelDataType rowType,
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,548,RelDataTypeField field, String columnName) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,61,operand(aggregateClass,
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,62,operand(RelNode.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,63,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,70,final RelNode input = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,71,if (!aggregate.getAggCallList().isEmpty() || aggregate.indicator) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,72,return;
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,81,final RelNode newInput = convert(input, aggregate.getTraitSet().simplify());
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,175,return rexBuilder.makeExactLiteral(BigDecimal.ONE);
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,177,return rexBuilder.makeCall(SqlStdOperatorTable.CASE, predicate,
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,178,rexBuilder.makeExactLiteral(BigDecimal.ONE),
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,179,rexBuilder.makeExactLiteral(BigDecimal.ZERO));
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,288,if (operand.ordinalInParent < inputs.size()) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,292,successors = subset.set.subsets;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,307,if (ascending) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,40,import java.util.ArrayList;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,82,final List<RelNode> inputs = call.getChildRels(union);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,84,final List<RelNode> newInputs = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,87,newInputs.add(input);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,91,: "planner promised us at least one Empty child";
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,92,final RelBuilder builder = call.builder();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,93,switch (newInputs.size()) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,94,case 0:
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,96,break;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,97,case 1:
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,98,builder.push(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,99,RelOptUtil.createCastRel(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,100,newInputs.get(0),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,101,union.getRowType(),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,102,true));
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,103,break;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,104,default:
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,105,builder.push(LogicalUnion.create(newInputs, union.all));
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,106,break;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,131,final List<RelNode> inputs = call.getChildRels(minus);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,133,final List<RelNode> newInputs = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,136,newInputs.add(input);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,144,: "planner promised us at least one Empty child";
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,145,final RelBuilder builder = call.builder();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,146,switch (newInputs.size()) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,147,case 0:
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,149,break;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,150,case 1:
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,151,builder.push(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,152,RelOptUtil.createCastRel(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,153,newInputs.get(0),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,154,minus.getRowType(),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,155,true));
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,156,break;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,157,default:
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,158,builder.push(LogicalMinus.create(newInputs, minus.all));
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,159,break;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,192,return node instanceof Values
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,193,&& ((Values) node).getTuples().isEmpty();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,78,private final JdbcSchema jdbcSchema;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,79,private final String jdbcCatalogName;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,80,private final String jdbcSchemaName;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,81,private final String jdbcTableName;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,82,private final Schema.TableType jdbcTableType;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,85,String jdbcSchemaName, String tableName, Schema.TableType jdbcTableType) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,87,this.jdbcSchema = jdbcSchema;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,90,this.jdbcTableName = tableName;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,145,SqlIdentifier tableName() {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,146,final List<String> strings = new ArrayList<>();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,148,strings.add(jdbcSchema.catalog);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,151,strings.add(jdbcSchema.schema);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,153,strings.add(jdbcTableName);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,154,return new SqlIdentifier(strings, SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,140,RelNode createSort(RelTraitSet traits, RelNode input,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,141,RelCollation collation, RexNode offset, RexNode fetch);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,155,public RelNode createSort(RelTraitSet traits, RelNode input,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,156,RelCollation collation, RexNode offset, RexNode fetch) {
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,157,return createSort(input, collation, offset, fetch);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,260,RelNode createJoin(RelNode left, RelNode right, RexNode condition,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,262,boolean semiJoinDone);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,277,public RelNode createJoin(RelNode left, RelNode right, RexNode condition,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,278,JoinRelType joinType, Set<String> variablesStopped,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,279,boolean semiJoinDone) {
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,280,return createJoin(left, right, condition,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,281,CorrelationId.setOf(variablesStopped), joinType, semiJoinDone);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,227,final SqlIdentifier identifier =
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,228,new SqlIdentifier(e.getTable().getQualifiedName(), SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,50,import com.google.common.collect.ImmutableSet;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,516,final RexNode target = apply(e, ImmutableSet.of(),
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,583,final RexNode target = apply(e, ImmutableSet.of(),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2393,assert nTotalFields == (joinRel instanceof SemiJoin
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2394,? nSysFields + nFieldsLeft
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2395,: nSysFields + nFieldsLeft + nFieldsRight);
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,89,!corr.getJoinType().toJoinType().generatesNullsOnLeft(),
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,90,!corr.getJoinType().toJoinType().generatesNullsOnRight(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2395,LogicalCorrelate corr = LogicalCorrelate.create(leftRel, p.r,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2396,p.id, p.requiredColumns, SemiJoinType.of(joinType));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2400,return factory.createFilter(corr, joinCond);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,472,final AggregateCall aggCall =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,473,AggregateCall.create(SqlStdOperatorTable.MIN,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,474,false,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,475,false,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,476,ImmutableList.of(0),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,477,-1,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,478,0,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,479,ret,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,480,null,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,481,extraName);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,483,ret =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,484,LogicalAggregate.create(ret,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,485,ImmutableBitSet.of(), null, ImmutableList.of(aggCall));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,562,ret = relBuilder.push(ret).project(exprs).build();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,564,final AggregateCall aggCall =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,565,AggregateCall.create(SqlStdOperatorTable.MIN,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,566,false,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,567,false,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,568,ImmutableList.of(projectedKeyCount),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,569,-1,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,570,projectedKeyCount,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,571,ret,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,572,null,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,573,null);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,575,ret = LogicalAggregate.create(ret, ImmutableBitSet.range(projectedKeyCount),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,576,null, ImmutableList.of(aggCall));
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,148,return new AggregateCall(aggFunction, distinct, approximate, argList,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,319,return create(aggFunction, distinct, approximate, argList, filterArg,
core/src/main/java/org/apache/calcite/rel/core/Window.java,317,return AggregateCall.create(op, aggCall.distinct,
core/src/main/java/org/apache/calcite/rel/core/Window.java,318,false, getProjectOrdinals(aggCall.getOperands()), -1,
core/src/main/java/org/apache/calcite/rel/core/Window.java,357,boolean distinct) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,282,return AggregateCall.create(aggregation, distinct, false, operands,
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,158,over.isDistinct());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,297,aggCall.isApproximate(), aggCall.getArgList(), -1,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,410,AggregateCall.create(SqlStdOperatorTable.GROUPING, false, false,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,456,AggregateCall.create(aggregation, false, aggCall.isApproximate(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,147,aggregateCall.isApproximate(), ImmutableList.of(i++), -1,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,351,oldCall.isApproximate(), oldCall.getArgList(), oldCall.filterArg,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,237,return AggregateCall.create(roll, false,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,238,aggregateCall.isApproximate(), ImmutableList.of(offset + i), -1,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,175,origCall.isApproximate(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,119,(SqlAggFunction) call.getOperator(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,120,call.getType(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,121,clonedOperands,
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,122,((Window.RexWinAggCall) call).ordinal,
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,123,((Window.RexWinAggCall) call).distinct);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,334,boolean distinct) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,346,final RexOver over = new RexOver(type, operator, exprs, window, distinct);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,352,final RelDataType bigintType = getTypeFactory().createSqlType(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,353,SqlTypeName.BIGINT);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,363,distinct),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,370,operator, exprs, window, distinct),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,376,final RelDataType bigintType = getTypeFactory().createSqlType(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,377,SqlTypeName.BIGINT);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,389,distinct),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,635,getTypeFactory().createSqlType(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,636,SqlTypeName.DECIMAL,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,637,scale + exp.getType().getPrecision(),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,638,scale);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1077,return getTypeFactory().createTypeWithNullability(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1078,type,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1079,valueNullability);
core/src/main/java/org/apache/calcite/rex/RexOver.java,67,boolean distinct) {
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,52,over.isDistinct());
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,44,super("FILTER", SqlKind.FILTER, 2, true, ReturnTypes.ARG0_FORCE_NULLABLE,
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,155,if (call.getKind() == SqlKind.FILTER) {
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,156,call.operand(0).accept(this);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1907,isDistinct);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5188,boolean distinct) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5251,distinct);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5292,distinct);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,756,return new AggCallImpl(aggFunction, distinct, approximate, filter, alias,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1990,boolean approximate, RexNode filter,
core/src/main/java/org/apache/calcite/rel/core/TableFunctionScan.java,75,RelTraitSet traits,
core/src/main/java/org/apache/calcite/rel/core/TableFunctionScan.java,81,super(cluster, traits);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,21,import org.apache.calcite.plan.RelTraitSet;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,43,final RelTraitSet traitSet =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,44,sort.getTraitSet().replace(EnumerableConvention.INSTANCE);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,55,RelNode x = convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,56,input,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,57,input.getTraitSet().replace(EnumerableConvention.INSTANCE));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,59,new EnumerableLimit(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,60,sort.getCluster(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,61,traitSet,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,62,x,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,242,SortUnionTransposeRule.INSTANCE);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3039,final List<String> names = new AbstractList<String>() {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3040,public int size() {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3041,return posList.size();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3044,public String get(int index) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3045,final int pos = posList.get(index);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3046,return fieldNames.get(pos);
core/src/main/java/org/apache/calcite/rel/RelFieldCollation.java,128,public NullDirection defaultNullDirection() {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,481,checkRollup:
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,482,if (groupSets.size() == groupSet.cardinality() + 1) {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,483,ImmutableBitSet g = groupSet;
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,484,for (ImmutableBitSet bitSet : groupSets) {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,485,if (!bitSet.equals(g)) {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,486,break checkRollup;
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,488,g = g.clear(g.length() - 1);
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,490,assert g.isEmpty();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,201,List<SqlNode> groupByList = Expressions.list();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,203,for (int group : e.getGroupSet()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,204,final SqlNode field = builder.context.field(group);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,205,addSelect(selectList, field, e.getRowType());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,206,groupByList.add(field);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,211,aggCallSqlNode = dialect.
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,212,rewriteSingleValueExpr(aggCallSqlNode);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,351,builder = x.builder(e, Clause.FETCH);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,356,builder = x.builder(e, Clause.OFFSET);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,760,public RelFieldCollation.NullDirection defaultNullDirection(
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,955,Context withNullCollation(@Nonnull NullCollation nullCollation);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,534,public RexNode call(SqlOperator operator, RexNode... operands) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,539,private RexNode call(SqlOperator operator, List<RexNode> operandList) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,551,public RexNode call(SqlOperator operator,
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,42,import java.util.AbstractList;
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,83,List<String> fieldNames = new AbstractList<String>() {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,85,return rowType.getFieldList().get(index).getName();
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,89,return rowType.getFieldCount();
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,93,return SqlValidatorUtil.uniquify(fieldNames, true);
core/src/main/java/org/apache/calcite/util/Bug.java,154,public static final boolean CALCITE_461_FIXED = false;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1233,return this;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,492,if (!a.getType().isNullable()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,82,static Class javaRowClass(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,83,JavaTypeFactory typeFactory, RelDataType type) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,84,if (type.isStruct() && type.getFieldCount() == 1) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,85,type = type.getFieldList().get(0).getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,87,final Type clazz = typeFactory.getJavaClass(type);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,88,return clazz instanceof Class ? (Class) clazz : Object[].class;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,422,inputPhysType.convertTo(childExp, physType),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCollect.java,60,Expressions.call(child_,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,206,final RelDataType dummyType = this.rowType;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,207,final Expression e3 =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,208,elementPhysType.convertTo(e2,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,209,PhysTypeImpl.of(typeFactory, dummyType, JavaRowFormat.LIST));
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,51,import static org.apache.calcite.adapter.enumerable.EnumUtils.javaRowClass;
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,73,fieldClasses.add(javaRowClass(typeFactory, field.getType()));
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,239,final JavaRowFormat targetFormat = targetPhysType.getFormat();
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,246,return Expressions.call(exp, BuiltInMethod.SELECT.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,247,generateSelector(o_, Util.range(fieldCount), targetFormat));
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,168,if (type.isStruct() && type.getFieldCount() == 1) {
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,169,return getJavaClass(type.getFieldList().get(0).getType());
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2082,return list;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2057,operand = Expressions.divide(operand,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2058,Expressions.constant(TimeUnit.DAY.multiplier.longValue()));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2068,return Expressions.modulo(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2069,operand, Expressions.constant(TimeUnit.MINUTE.multiplier.longValue()));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2071,operand = Expressions.modulo(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2072,operand, Expressions.constant(TimeUnit.MINUTE.multiplier.longValue()));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2138,return Expressions.modulo(operand, Expressions.constant(factor));
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,662,if (id.names.size() == 1) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPercentageOriginalRows.java,83,double rowCount = mq.getRowCount(input);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPercentageOriginalRows.java,84,double percentage = mq.getPercentageOriginalRows(input);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPercentageOriginalRows.java,103,double left = mq.getPercentageOriginalRows(rel.getLeft());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPercentageOriginalRows.java,104,double right = mq.getPercentageOriginalRows(rel.getRight());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1022,name = SqlValidatorUtil.F_SUGGESTER.apply(name, j, j++);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,52,import java.util.function.Function;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1066,if (paranoid) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1067,final RexNode before = RexUtil.composeDisjunction(rexBuilder, terms);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1096,Function<RexSimplify, RexNode> simplifier) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1097,final RexNode simplified = simplifier.apply(withParanoid(false));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1098,if (!paranoid) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1099,return simplified;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1105,return simplified;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1143,return simplified;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,567,return simplifier.simplifyAnds(operands);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1544,new SqlBaseContextVariable("PI", ReturnTypes.DOUBLE,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1545,SqlFunctionCategory.NUMERIC);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,202,final SqlTypeName sqlTypeName =
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,203,Util.enumVal(SqlTypeName.class, (String) map.get("type"));
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,204,final Integer precision = (Integer) map.get("precision");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,205,final Integer scale = (Integer) map.get("scale");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,206,final RelDataType type;
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,207,if (precision == null) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,208,type = typeFactory.createSqlType(sqlTypeName);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,210,type = typeFactory.createSqlType(sqlTypeName, precision);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,212,type = typeFactory.createSqlType(sqlTypeName, precision, scale);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,214,final boolean nullable = (Boolean) map.get("nullable");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,215,return typeFactory.createTypeWithNullability(type, nullable);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,228,Object toJson(Object value) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,286,final Map<String, Object> map =
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,287,(Map<String, Object>) toJson(node.getType());
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,307,final Object value2 = literal.getValue2();
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,308,if (value2 == null) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,312,map = jsonBuilder.map();
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,313,map.put("literal", null);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,314,map.put("type", literal.getTypeName().name());
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,315,return map;
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,317,return value2;
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,345,map.put("class", call.getOperator().getClass().getName());
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,365,final Object jsonType = map.get("type");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,366,final SqlOperator operator = toOp(op, map);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,368,RelDataType type;
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,369,if (jsonType != null) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,370,type = toType(typeFactory, jsonType);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,372,type = rexBuilder.deriveReturnType(operator, rexOperands);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,374,return rexBuilder.makeCall(type, operator, rexOperands);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,404,final SqlTypeName sqlTypeName =
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,405,Util.enumVal(SqlTypeName.class, (String) map.get("type"));
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,407,return rexBuilder.makeNullLiteral(
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,408,typeFactory.createSqlType(sqlTypeName));
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,410,return toRex(relInput, literal);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,439,private SqlOperator toOp(String op, Map<String, Object> map) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,456,SqlAggFunction toAggregation(String agg, Map<String, Object> map) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,457,return (SqlAggFunction) toOp(agg, map);
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,78,Map<String, Object> o = mapper.readValue(s, TYPE_REF);
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,169,inputs.add(toAggCall(jsonAggCall));
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,272,private AggregateCall toAggCall(Map<String, Object> jsonAggCall) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,275,relJson.toAggregation(aggName, jsonAggCall);
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonWriter.java,40,private final JsonBuilder jsonBuilder;
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonWriter.java,41,private final RelJson relJson;
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonWriter.java,43,private final List<Object> relList;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,60,static final SqlPostfixOperator FOLLOWING_OPERATOR =
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,67,static final SqlPostfixOperator PRECEDING_OPERATOR =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,73,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,692,if (nodeList.size() == 2) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,693,return op.createCall(new SqlNodeList(nodeList, POS));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,695,final List<SqlNode> butLast = Util.skipLast(nodeList);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,696,final SqlNode last = nodeList.get(nodeList.size() - 1);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,697,final SqlNode call = createLeftCall(op, butLast);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,698,return op.createCall(new SqlNodeList(ImmutableList.of(call, last), POS));
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,245,return typeFactory.createStructType(
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,246,Lists.transform(type.getFieldList(),
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,247,field -> toSql(typeFactory, field.getType())),
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,248,type.getFieldNames());
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,250,if (type instanceof JavaType) {
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,251,return typeFactory.createTypeWithNullability(
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,252,typeFactory.createSqlType(type.getSqlTypeName()),
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,253,type.isNullable());
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,255,return type;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,73,return new RelRecordType(key.kind, list.build());
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,145,return canonize(kind, fieldNameList, typeList);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,295,type.getFieldNames());
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,300,if (type instanceof RelRecordType) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,301,return copyRecordType((RelRecordType) type, true, false);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,303,return createTypeWithNullability(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,304,type,
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,305,type.isNullable());
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,321,if (nullable) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,324,newType = copyRecordType((RelRecordType) type, false, true);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,328,newType = copyRecordType((RelRecordType) type, true, false);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,356,final List<RelDataType> types) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,357,final RelDataType type = CACHE.getIfPresent(new Key(kind, names, types));
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,363,return CACHE.getUnchecked(new Key(kind, names2, types2));
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,662,Key(StructKind kind, List<String> names, List<RelDataType> types) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,669,return Objects.hash(kind, names, types);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,677,&& types.equals(((Key) obj).types);
core/src/main/java/org/apache/calcite/rel/type/RelRecordType.java,39,public RelRecordType(StructKind kind, List<RelDataTypeField> fields) {
core/src/main/java/org/apache/calcite/rel/type/RelRecordType.java,46,this(StructKind.FULLY_QUALIFIED, fields);
core/src/main/java/org/apache/calcite/rel/type/RelRecordType.java,56,return false;
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,433,+ "] could not be implemented; planner state:\n");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,220,private String originalRootString;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,240,private final Deque<VolcanoRuleCall> ruleCallStack = new ArrayDeque<>();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,308,this.originalRootString =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,309,RelOptUtil.toString(root, SqlExplainLevel.ALL_ATTRIBUTES);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1169,pw.println(originalRootString);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1170,pw.println("Sets:");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1218,pw.println();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1754,ruleCallStack.push(ruleCall);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1756,ruleCallStack.pop();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,212,getRule().onMatch(this);
core/src/main/java/org/apache/calcite/tools/Programs.java,261,return hep(
core/src/main/java/org/apache/calcite/tools/Programs.java,262,ImmutableList.of((RelOptRule) SubQueryRemoveRule.FILTER,
core/src/main/java/org/apache/calcite/tools/Programs.java,263,SubQueryRemoveRule.PROJECT,
core/src/main/java/org/apache/calcite/tools/Programs.java,264,SubQueryRemoveRule.JOIN), true, metadataProvider);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,61,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,155,private final Map<Pair<String, RelDataType>, RelNode> mapDigestToRel =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1222,private static Pair<String, RelDataType> key(RelNode rel) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1223,return Pair.of(rel.getDigest(), rel.getRowType());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1238,final Pair<String, RelDataType> oldKey =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1239,Pair.of(oldDigest, rel.getRowType());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1240,final RelNode removed = mapDigestToRel.remove(oldKey);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1244,final Pair<String, RelDataType> key = key(rel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1245,final RelNode equivRel = mapDigestToRel.put(key, rel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1253,mapDigestToRel.put(key, equivRel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1296,final Pair<String, RelDataType> key = key(rel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1297,RelNode equivRel = mapDigestToRel.get(key);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1501,Pair<String, RelDataType> key = key(rel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1539,key = key(rel);
core/src/main/java/org/apache/calcite/rel/core/Values.java,36,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/core/Values.java,100,private static Object apply(ImmutableList<RexLiteral> tuple) {
core/src/main/java/org/apache/calcite/rel/core/Values.java,101,String s = tuple.toString();
core/src/main/java/org/apache/calcite/rel/core/Values.java,102,assert s.startsWith("[");
core/src/main/java/org/apache/calcite/rel/core/Values.java,103,assert s.endsWith("]");
core/src/main/java/org/apache/calcite/rel/core/Values.java,104,return "{ " + s.substring(1, s.length() - 1) + " }";
core/src/main/java/org/apache/calcite/rel/core/Values.java,194,.itemIf("tuples", tuples, pw.nest());
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1026,return makeLiteral(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1027,new NlsString(s, null, null),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1028,typeFactory.createSqlType(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1029,SqlTypeName.CHAR,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1030,s.length()),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1031,SqlTypeName.CHAR);
core/src/main/java/org/apache/calcite/rex/RexCall.java,76,for (int i = 0; i < operands.size(); i++) {
core/src/main/java/org/apache/calcite/rex/RexCall.java,77,if (i > 0) {
core/src/main/java/org/apache/calcite/rex/RexCall.java,78,sb.append(", ");
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,219,this.digest = toJavaString(value, typeName);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,315,SqlTypeName typeName) {
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,317,return "null";
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,321,printAsJava(value, pw, typeName, false);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,422,printAsJava(value, pw, typeName, true);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,447,boolean java) {
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,543,return list.get(index).digest;
core/src/main/java/org/apache/calcite/rex/RexOver.java,97,for (int i = 0; i < operands.size(); i++) {
core/src/main/java/org/apache/calcite/rex/RexOver.java,98,if (i > 0) {
core/src/main/java/org/apache/calcite/rex/RexOver.java,99,sb.append(", ");
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,203,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,204,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,205,Coercibility.COERCIBLE);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,207,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,208,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,209,Coercibility.IMPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,213,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,214,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,215,Coercibility.EXPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,222,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,223,col1.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,224,Coercibility.IMPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,227,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,228,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,229,Coercibility.IMPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,235,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,236,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,237,Coercibility.EXPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,248,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,249,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,250,Coercibility.EXPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,259,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,260,col1.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,261,Coercibility.EXPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,264,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,265,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,266,Coercibility.EXPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlPostfixOperator.java,83,new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlPostfixOperator.java,84,collation.getCollationName(),
core/src/main/java/org/apache/calcite/sql/SqlPostfixOperator.java,85,collation.getCoercibility()));
core/src/main/java/org/apache/calcite/sql/SqlPrefixOperator.java,84,new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlPrefixOperator.java,85,collation.getCollationName(),
core/src/main/java/org/apache/calcite/sql/SqlPrefixOperator.java,86,collation.getCoercibility()));
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,203,if (wrappedCharset != null) {
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,208,if (collation != null) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,106,public static Enumerable<Object> of(DataSource dataSource, String sql) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,112,public static Enumerable<Object> of(DataSource dataSource, String sql,
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,119,public static <T> Enumerable<T> of(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,66,final List<Range<Long>> ranges =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,67,extractRanges(e, false);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,76,if (LOGGER.isDebugEnabled()) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,77,LOGGER.debug("Inferred ranges on interval : " + condensedRanges);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,79,return toInterval(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,80,ImmutableList.<Range>copyOf(condensedRanges.asRanges()));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,190,switch (call.getKind()) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,122,columns = getKeyspace().getMaterializedView(columnFamily).getColumns();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,124,columns = getKeyspace().getTable(columnFamily).getColumns();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,169,table = getKeyspace().getMaterializedView(columnFamily);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,171,table = getKeyspace().getTable(columnFamily);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,197,table = getKeyspace().getMaterializedView(columnFamily);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,199,table = getKeyspace().getTable(columnFamily);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,543,case NOT_POSSIBLE: // Just foldAnd
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,585,case NOT_POSSIBLE: // Just foldOr
core/src/main/java/org/apache/calcite/config/CalciteConnectionProperty.java,132,TIME_ZONE("timeZone", Type.STRING, null, false),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,379,+ "\nexpression is " + newRel.toString();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,370,if (operands.size() != 2 && predicate.getKind() == SqlKind.EQUALS) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,371,decompose(excludeSet, predicate);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,372,return;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,81,operandJ(aggregateClass, null,
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,82,aggregate -> aggregate.getGroupType() == Aggregate.Group.SIMPLE,
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,83,operand(joinClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,129,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,130,final Aggregate aggregate = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,131,final Join join = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,132,final RexBuilder rexBuilder = aggregate.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,133,final RelBuilder relBuilder = call.builder();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,140,return;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,142,if (aggregateCall.filterArg >= 0) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,143,return;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,149,if (join.getJoinType() != JoinRelType.INNER) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,150,return;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,153,if (!allowFunctions && !aggregate.getAggCallList().isEmpty()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,154,return;
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,66,filter.getCondition());
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,357,assert tempDigest != null : "post: return != null";
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,358,String prefix = "rel#" + id + ":";
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,362,this.desc = prefix + tempDigest;
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,363,this.digest = this.desc.substring(prefix.length());
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,415,pw.write(value.left + "=" + value.right);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,235,SqlNode[] newOperands = new SqlNode[3];
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,236,newOperands[0] = whenList;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,237,newOperands[1] = thenList;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,238,newOperands[2] = elseExpr;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,239,return op.createCall(null, SqlParserPos.ZERO, newOperands);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,622,final SqlNode lowerBound =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,623,createSqlWindowBound(rexWindow.getLowerBound());
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,624,final SqlNode upperBound =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,625,createSqlWindowBound(rexWindow.getUpperBound());
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,306,return;
core/src/main/java/org/apache/calcite/runtime/CalciteException.java,61,LOGGER.error(toString());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorException.java,59,LOGGER.error(toString());
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1300,Collections.replaceAll(terms, e, rexBuilder.makeLiteral(true));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1334,final int index = terms.indexOf(term);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1335,if (index >= 0) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1336,terms.set(index, rexBuilder.makeLiteral(true));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1371,final int index = terms.indexOf(term);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1372,if (index >= 0) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1373,terms.set(index, rexBuilder.makeLiteral(true));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1409,final int index = terms.indexOf(term);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1410,if (index >= 0) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1411,terms.set(index, rexBuilder.makeLiteral(true));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1446,final int index = terms.indexOf(term);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1447,if (index >= 0) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1448,terms.set(index, rexBuilder.makeLiteral(true));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1460,Collections.replaceAll(terms, e, rexBuilder.makeLiteral(true));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1472,Collections.replaceAll(terms, e, rexBuilder.makeLiteral(true));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,456,inferUnknownTypes(targetType, scope, expanded);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1716,RelDataType inferredType,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1717,SqlValidatorScope scope,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1718,SqlNode node) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1793,if (operandTypeInference == null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1796,Arrays.fill(operandTypes, unknownType);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1804,inferUnknownTypes(operandTypes[i], scope, operands.get(i));
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,56,import org.apache.calcite.rex.RexUtil.ExprSimplifier;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,543,final ExprSimplifier simplifier =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,547,RexNode expr2 = simplifier.apply(expList.get(i));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,149,final RexNode e3 = rexBuilder.makeCast(e.getType(), e2, true);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,651,case INPUT_REF:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,656,if (nullAs == RexImpTable.NullAs.NOT_POSSIBLE
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,657,&& input.type.equals(storageType)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,660,return input;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,662,return handleNull(input, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,682,case FIELD_ACCESS:
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,929,long l = bd.unscaledValue().longValue();
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,932,assert BigDecimal.valueOf(l, scale).equals(bd);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,934,if ((l >= Integer.MIN_VALUE) && (l <= Integer.MAX_VALUE)) {
core/src/main/java/org/apache/calcite/sql/dialect/MysqlSqlDialect.java,108,return new SqlDataTypeSpec(new SqlIdentifier("_UNSIGNED", SqlParserPos.ZERO),
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,164,NullCollation.HIGH, JethroDataSqlDialect.JethroInfo.EMPTY);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,605,type.getPrecision(),
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,994,identifierQuoteString, nullCollation, jethroInfo);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,1004,identifierQuoteString, nullCollation, jethroInfo);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,1014,identifierQuoteString, nullCollation, jethroInfo);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,1024,identifierQuoteString, nullCollation, jethroInfo);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,1034,identifierQuoteString, nullCollation, jethroInfo);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,1044,identifierQuoteString, nullCollation, jethroInfo);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,1054,identifierQuoteString, nullCollation, jethroInfo);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,1064,identifierQuoteString, nullCollation, jethroInfo);
core/src/main/java/org/apache/calcite/sql/dialect/PostgresqlSqlDialect.java,38,.withIdentifierQuoteString("\""));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2493,final BuiltInMethod method =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2494,operand0.getType().getSqlTypeName() == SqlTypeName.TIMESTAMP
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2495,? BuiltInMethod.ADD_MONTHS
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2496,: BuiltInMethod.ADD_MONTHS_INT;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2497,return Expressions.call(method.method, trop0, trop1);
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampAddFunction.java,88,type = typeFactory.createSqlType(SqlTypeName.TIMESTAMP);
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,68,return def.canonizeComposite(compositeTrait);
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,106,RelCompositeTrait<T> canonize(RelTraitDef<T> traitDef) {
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,107,T[] newTraits = null;
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,108,for (int i = 0; i < traits.length; i++) {
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,109,final T trait = traits[i];
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,110,final T trait2 = traitDef.canonize(trait);
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,111,if (trait2 != trait) {
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,112,if (newTraits == null) {
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,113,newTraits = traits.clone();
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,115,newTraits[i] = trait2;
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,118,if (newTraits == null) {
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,119,return this;
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,121,assert false;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,22,import com.google.common.cache.CacheBuilder;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,23,import com.google.common.cache.CacheLoader;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,24,import com.google.common.cache.LoadingCache;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,26,import java.util.List;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,27,import javax.annotation.Nonnull;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,59,private final LoadingCache<T, T> canonicalMap =
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,62,.build(CacheLoader.from(key -> key));
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,71,private final LoadingCache<Object, RelCompositeTrait> canonicalCompositeMap =
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,74,.build(
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,75,new CacheLoader<Object, RelCompositeTrait>() {
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,77,if (key instanceof RelCompositeTrait) {
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,78,return (RelCompositeTrait) key;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,81,final List<RelMultipleTrait> list =
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,82,(List<RelMultipleTrait>) key;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,83,final RelTraitDef def = list.get(0).getTraitDef();
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,84,return (RelCompositeTrait) RelCompositeTrait.of(def, list);
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,129,if (trait instanceof RelCompositeTrait) {
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,130,RelCompositeTrait relCompositeTrait = (RelCompositeTrait) trait;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,131,return (T) canonizeComposite(relCompositeTrait);
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,135,+ " cannot canonize a "
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,136,+ trait.getClass().getName();
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,138,return canonicalMap.getUnchecked(trait);
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,141,final RelCompositeTrait canonizeComposite(RelCompositeTrait compositeTrait) {
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,142,return canonicalCompositeMap.getUnchecked(compositeTrait);
core/src/main/java/org/apache/calcite/sql/fun/SqlDotOperator.java,95,RelDataType nodeType = validator.deriveType(scope, call.getOperandList().get(0));
core/src/main/java/org/apache/calcite/sql/fun/SqlDotOperator.java,98,final String fieldName = call.getOperandList().get(1).toString();
core/src/main/java/org/apache/calcite/sql/fun/SqlDotOperator.java,99,RelDataTypeField field =
core/src/main/java/org/apache/calcite/sql/fun/SqlDotOperator.java,102,throw SqlUtil.newContextException(SqlParserPos.ZERO, Static.RESOURCE.unknownField(fieldName));
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,171,if (RexUtil.eq(first, second)) {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1371,final Map<String, Integer> map = new HashMap<>();
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1373,map.put(e.toString(), map.size());
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1377,final Integer integer = map.get(ref.getName());
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1385,final Integer integer = map.get(call.toString());
core/src/main/java/org/apache/calcite/rel/core/Match.java,280,if (rex.toString().equals(aggCall.toString())) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,62,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,72,import java.util.Map.Entry;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,363,RexBuilder rexBuilder = union.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,365,Map<String, RexNode> finalPreds = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,366,List<RexNode> finalResidualPreds = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,367,for (int i = 0; i < union.getInputs().size(); i++) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,368,RelNode input = union.getInputs().get(i);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,369,RelOptPredicateList info = mq.getPulledUpPredicates(input);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,373,Map<String, RexNode> preds = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,374,List<RexNode> residualPreds = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,376,final String predDigest = pred.toString();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,377,if (i == 0) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,378,preds.put(predDigest, pred);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,381,if (finalPreds.containsKey(predDigest)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,382,preds.put(predDigest, pred);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,384,residualPreds.add(pred);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,390,for (Entry<String, RexNode> e : finalPreds.entrySet()) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,391,if (!preds.containsKey(e.getKey())) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,393,for (int j = 0; j < i; j++) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,394,finalResidualPreds.set(j,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,401,finalPreds = preds;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,404,List<RexNode> preds = new ArrayList<>(finalPreds.values());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,408,final RelOptPredicateList predicates = RelOptPredicateList.EMPTY;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,412,if (!disjPred.isAlwaysTrue()) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,413,preds.add(disjPred);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,415,return RelOptPredicateList.of(rexBuilder, preds);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,485,final Map<String, ImmutableBitSet> exprFields;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,486,final Set<String> allExprDigests;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,487,final Set<String> equalityPredicates;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,514,allExprDigests = new HashSet<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,516,if (lPreds == null) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,521,leftChildPredicates = lPreds.accept(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,524,allExprDigests.add(leftChildPredicates.toString());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,526,exprFields.put(r.toString(), RelOptUtil.InputFinder.bits(r));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,527,allExprDigests.add(r.toString());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,530,if (rPreds == null) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,536,rightChildPredicates = rPreds.accept(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,539,allExprDigests.add(rightChildPredicates.toString());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,541,exprFields.put(r.toString(), RelOptUtil.InputFinder.bits(r));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,542,allExprDigests.add(r.toString());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,561,new ArrayList<>(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,562,Lists.transform(exprs, input -> input.accept(eF)));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,583,final Set<String> allExprDigests = new HashSet<>(this.allExprDigests);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,588,infer(leftChildPredicates, allExprDigests, inferredPredicates,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,597,infer(rightChildPredicates, allExprDigests, inferredPredicates,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,665,private void infer(RexNode predicates, Set<String> allExprsDigests,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,670,&& equalityPredicates.contains(r.toString())) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,683,&& checkTarget(inferringFields, allExprsDigests, simplifiedTarget)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,685,allExprsDigests.add(simplifiedTarget.toString());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,692,return () -> {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,693,ImmutableBitSet fields = exprFields.get(predicate.toString());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,694,if (fields.cardinality() == 0) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,695,return Collections.emptyIterator();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,697,return new ExprsItr(fields);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,702,Set<String> allExprsDigests, RexNode tr) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,708,private void equivalent(int p1, int p2) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,734,JoinConditionBasedPredicateInference.this.equivalent(lPos, rPos);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,735,JoinConditionBasedPredicateInference.this.equalityPredicates
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,736,.add(call.toString());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,52,import java.util.HashSet;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,436,final List<RexNode> unionList = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,437,final Set<String> strings = new HashSet<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,439,for (RexNode rex : RelOptUtil.conjunctions(pred1)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,440,if (strings.add(rex.toString())) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,441,unionList.add(rex);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,444,for (RexNode rex2 : RelOptUtil.conjunctions(pred2)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,445,if (strings.add(rex2.toString())) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,446,unionList.add(rex2);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,466,final List<RexNode> list1 = RelOptUtil.conjunctions(pred1);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,467,final List<RexNode> list2 = RelOptUtil.conjunctions(pred2);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,468,final List<RexNode> minusList = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,470,for (RexNode rex1 : list1) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,471,boolean add = true;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,472,for (RexNode rex2 : list2) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,473,if (rex2.toString().compareTo(rex1.toString()) == 0) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,474,add = false;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,475,break;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,478,if (add) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,479,minusList.add(rex1);
core/src/main/java/org/apache/calcite/rel/mutable/MutableFilter.java,46,&& condition.toString().equals(
core/src/main/java/org/apache/calcite/rel/mutable/MutableFilter.java,52,return Objects.hash(input, condition.toString());
core/src/main/java/org/apache/calcite/rel/mutable/MutableJoin.java,69,&& condition.toString().equals(
core/src/main/java/org/apache/calcite/rel/mutable/MutableJoin.java,78,return Objects.hash(left, right,
core/src/main/java/org/apache/calcite/rel/mutable/MutableJoin.java,79,condition.toString(), joinType, variablesSet);
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,64,&& condition.toString().equals(
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,73,return Objects.hash(left, right,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,74,condition.toString(), leftKeys, rightKeys);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1372,List<String> additionalViewExprs = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1402,final Multimap<String, Integer> exprsLineage = ArrayListMultimap.create();
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1411,int ref = ((RexInputRef) n).getIndex();
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1414,new RexInputRef(childTargetIdx, targetNode.getType()).toString(), k);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1427,new RexInputRef(targetIdx, targetNode.getType()).toString());
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1546,final Multimap<String, Integer> viewExprs = ArrayListMultimap.create();
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1549,viewExprs.put(viewExpr.toString(), numberViewExprs++);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1551,for (String additionalViewExpr : additionalViewExprs) {
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1597,Multimap<String, Integer> exprsLineage = ArrayListMultimap.create();
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1614,exprsLineage.put(expr.toString(), i);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1676,Collection<Integer> c = exprsLineage.get(targetExpr.toString());
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2007,&& sourceEC.getEquivalenceClassesMap().get(uniqueKeyColumnRef).contains(
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2008,foreignKeyColumnRef)) {
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2307,Map<String, Integer> exprsLineage = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2308,Map<String, Integer> exprsLineageLosslessCasts = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2322,exprsLineage.put(e.toString(), i);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2324,exprsLineageLosslessCasts.put(((RexCall) e).getOperands().get(0).toString(), i);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2327,return NodeLineage.of(exprsLineage, exprsLineageLosslessCasts);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2341,Map<String, Integer> exprsLineage = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2342,Map<String, Integer> exprsLineageLosslessCasts = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2351,assert s.size() == 1;
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2354,final RexNode e = RexUtil.swapColumnTableReferences(
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2355,rexBuilder, s.iterator().next(), ec.getEquivalenceClassesMap(), tableMapping);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2356,exprsLineage.put(e.toString(), i);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2358,exprsLineageLosslessCasts.put(((RexCall) e).getOperands().get(0).toString(), i);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2361,return NodeLineage.of(exprsLineage, exprsLineageLosslessCasts);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2389,Integer pos = nodeLineage.exprsLineage.get(e.toString());
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2394,pos = nodeLineage.exprsLineageLosslessCasts.get(e.toString());
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2437,final RexNode expr, final Multimap<String, Integer> exprsLineage) {
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2449,final RexNode expr, final Multimap<String, Integer> exprsLineage,
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2455,Collection<Integer> c = exprsLineage.get(ref.toString());
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2475,Collection<Integer> c = exprsLineage.get(inputRef.toString());
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2495,Collection<Integer> c = exprsLineage.get(call.toString());
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2612,private final Map<String, Integer> exprsLineage;
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2613,private final Map<String, Integer> exprsLineageLosslessCasts;
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2615,private NodeLineage(Map<String, Integer> exprsLineage,
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2616,Map<String, Integer> exprsLineageLosslessCasts) {
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2617,this.exprsLineage = Collections.unmodifiableMap(exprsLineage);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2618,this.exprsLineageLosslessCasts = Collections.unmodifiableMap(exprsLineageLosslessCasts);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2621,protected static NodeLineage of(
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2622,Map<String, Integer> exprsLineage, Map<String, Integer> exprsLineageLosslessCasts) {
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2623,return new NodeLineage(exprsLineage, exprsLineageLosslessCasts);
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,160,final Map<String, RangeSet<Calendar>> operandRanges = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,185,if (RexUtil.eq(condition, filter.getCondition())) {
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,240,private final Map<String, RangeSet<Calendar>> operandRanges;
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,247,Map<String, RangeSet<Calendar>> operandRanges,
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,334,final RangeSet<Calendar> calendarRangeSet =
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,335,operandRanges.get(operand.toString());
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,363,final Map<String, RangeSet<Calendar>> save =
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,402,RangeSet<Calendar> rangeSet = operandRanges.get(operand.toString());
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,441,operandRanges.put(operand.toString(), ImmutableRangeSet.copyOf(s2));
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,571,RangeSet<Calendar> rangeSet = operandRanges.get(operand.toString());
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,583,operandRanges.put(operand.toString(), ImmutableRangeSet.copyOf(s2));
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,64,if (join.getCondition().toString().equals(newCondition.toString())) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,703,addExpr(preserveLeft, call);
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,707,addExpr(preserveRight, call);
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,731,private void addExpr(List<RexNode> exprList, RexNode newExpr) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,732,String newExprString = newExpr.toString();
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,733,for (RexNode expr : exprList) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,734,if (newExprString.compareTo(expr.toString()) == 0) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,735,return;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,738,exprList.add(newExpr);
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,807,int match = findExprInList(rex, rexList1);
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,813,match = findExprInList(rex, rexList2);
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,822,private int findExprInList(RexNode rex, List<RexNode> rexList) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,823,int match = 0;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,824,for (RexNode rexElement : rexList) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,825,if (rexElement.toString().compareTo(rex.toString()) == 0) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,826,return match;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,828,match++;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,830,return -1;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,125,private final Map<Pair<String, String>, RexNode> irreducible;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,126,private final Map<Pair<String, String>, RexNode> results;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,176,Pair<String, String> key = RexUtil.makeKey(node);
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,188,Pair<String, String> key = RexUtil.makeKey(node);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,548,if (!expr2.toString().equals(expList.get(i).toString())) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,605,return RexUtil.eq(subQuery, this.subQuery) ? replacement : subQuery;
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,118,if (RexUtil.eq(node, seek)) {
core/src/main/java/org/apache/calcite/rex/RexCall.java,68,protected String computeDigest(boolean withType) {
core/src/main/java/org/apache/calcite/rex/RexCall.java,69,StringBuilder sb = new StringBuilder(op.getName());
core/src/main/java/org/apache/calcite/rex/RexCall.java,80,RexNode operand = operands.get(i);
core/src/main/java/org/apache/calcite/rex/RexCall.java,81,sb.append(operand.toString());
core/src/main/java/org/apache/calcite/rex/RexCall.java,95,public String toString() {
core/src/main/java/org/apache/calcite/rex/RexCall.java,101,digest = localDigest;
core/src/main/java/org/apache/calcite/rex/RexOver.java,101,RexNode operand = operands.get(i);
core/src/main/java/org/apache/calcite/rex/RexOver.java,102,sb.append(operand.toString());
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,46,private final Map<Pair<String, String>, RexLocalRef> exprMap =
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,332,final Pair<String, String> key;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,428,if (pred == null || !a.toString().equals(pred.ref.toString())) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,528,final Set<String> digests = new HashSet<>();
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,759,final Multimap<String, Pair<String, RexNode>> equalityTerms = ArrayListMultimap.create();
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,760,final Map<String, Pair<Range<C>, List<RexNode>>> rangeTerms =
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,762,final Map<String, String> equalityConstantTerms = new HashMap<>();
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,763,final Set<String> negatedTerms = new HashSet<>();
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,764,final Set<String> nullOperands = new HashSet<>();
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,766,final Set<String> comparedOperands = new HashSet<>();
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,812,RexNode left = call.getOperands().get(0);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,813,comparedOperands.add(left.toString());
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,817,comparedOperands.add(leftCast.getOperands().get(0).toString());
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,819,RexNode right = call.getOperands().get(1);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,820,comparedOperands.add(right.toString());
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,824,comparedOperands.add(rightCast.getOperands().get(0).toString());
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,837,final String literal = comparison.literal.toString();
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,838,final String prevLiteral =
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,839,equalityConstantTerms.put(comparison.ref.toString(), literal);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,845,equalityTerms.put(left.toString(), Pair.of(right.toString(), term));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,855,negatedTerms.add(negatedTerm.toString());
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,858,negatedTerms.add(invertNegatedTerm.toString());
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,882,comparedOperands.add(((RexCall) term).operands.get(0).toString());
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,885,comparedOperands.add(((RexCall) term).operands.get(1).toString());
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,893,nullOperands.add(((RexCall) term).getOperands().get(0).toString());
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,905,for (String ref1 : equalityTerms.keySet()) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,906,final String literal1 = equalityConstantTerms.get(ref1);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,910,Collection<Pair<String, RexNode>> references = equalityTerms.get(ref1);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,911,for (Pair<String, RexNode> ref2 : references) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,912,final String literal2 = equalityConstantTerms.get(ref2.left);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,930,if (!comparedOperands.contains(operand.toString())) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,942,final Set<String> termsSet = new HashSet<>(RexUtil.strings(terms));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,947,final List<String> terms2Set = RexUtil.strings(RelOptUtil.conjunctions(notDisjunction));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,959,for (String negatedTerm : negatedTerms) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1277,Map<String, Pair<Range<C>, List<RexNode>>> rangeTerms, RexNode term,
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1279,Pair<Range<C>, List<RexNode>> p = rangeTerms.get(ref.toString());
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1281,rangeTerms.put(ref.toString(),
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1295,rangeTerms.put(ref.toString(),
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1466,rangeTerms.put(ref.toString(),
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1478,rangeTerms.put(ref.toString(),
core/src/main/java/org/apache/calcite/rex/RexSubQuery.java,112,StringBuilder sb = new StringBuilder(op.getName());
core/src/main/java/org/apache/calcite/rex/RexSubQuery.java,115,sb.append(operand.toString());
core/src/main/java/org/apache/calcite/rex/RexUtil.java,971,public static Pair<String, String> makeKey(RexNode expr) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,972,return Pair.of(expr.toString(), expr.getType().getFullTypeString());
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1045,final Set<String> digests = new HashSet<>(); // to eliminate duplicates
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1048,addAnd(builder, digests, node);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1055,Set<String> digests, RexNode node) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1063,if (!node.isAlwaysTrue() && digests.add(node.toString())) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1109,final Set<String> digests = new HashSet<>(); // to eliminate duplicates
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1111,addOr(builder, digests, node);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1117,Set<String> digests, RexNode node) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1121,addOr(builder, digests, operand);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1125,if (!node.isAlwaysFalse() && digests.add(node.toString())) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1624,if (eq(next, e)) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2030,final Map<String, RexNode> mapDigestToExpr = new HashMap<>();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2039,final String key = expr.toString();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2040,final RexNode previous = mapDigestToExpr.put(key, expr);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2048,return mapDigestToExpr.get(expr.toString());
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2286,final Map<String, RexNode> factors = commonFactors(operands);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2315,private Map<String, RexNode> commonFactors(List<RexNode> nodes) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2316,final Map<String, RexNode> map = new HashMap<>();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2321,map.put(conjunction.toString(), conjunction);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2324,map.keySet().retainAll(strings(RelOptUtil.conjunctions(node)));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2330,private RexNode removeFactor(Map<String, RexNode> factors, RexNode node) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2333,if (!factors.containsKey(operand.toString())) {
core/src/main/java/org/apache/calcite/rex/RexVariable.java,35,assert type != null;
core/src/main/java/org/apache/calcite/rex/RexVariable.java,36,assert name != null;
core/src/main/java/org/apache/calcite/rex/RexVariable.java,37,this.name = name;
core/src/main/java/org/apache/calcite/rex/RexVariable.java,38,this.digest = name;
core/src/main/java/org/apache/calcite/rex/RexVariable.java,39,this.type = type;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,705,int x = findExpr(projectExprs.get(i), projectExprs, i);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,706,if (x >= 0) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,769,private int findExpr(RexNode seek, List<RexNode> exprs, int count) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,770,for (int i = 0; i < count; i++) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,771,RexNode expr = exprs.get(i);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,772,if (expr.toString().equals(seek.toString())) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,773,return i;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,776,return -1;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5050,if (expr.toString().equals(convertedInputExpr.toString())) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1929,SqlOperator nullOp;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1930,SqlOperator eqOp;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1932,nullOp = SqlStdOperatorTable.IS_NULL;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1933,eqOp = SqlStdOperatorTable.EQUALS;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1935,nullOp = SqlStdOperatorTable.IS_NOT_NULL;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1936,eqOp = SqlStdOperatorTable.NOT_EQUALS;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1940,RexNode[] whenThenElse = {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1942,rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, x),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1945,rexBuilder.makeCall(nullOp, y),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1948,rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, y),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1951,rexBuilder.makeCall(nullOp, x),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1954,rexBuilder.makeCall(eqOp,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1955,rexBuilder.makeNotNull(x),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1958,return rexBuilder.makeCall(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1959,SqlStdOperatorTable.CASE,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1960,whenThenElse);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2705,(List) rel.getInputs());
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,790,if (node != call) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,91,String sql = generateSql(jdbcConvention.dialect);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,154,final Expression enumerable =
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,155,builder0.append(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,157,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,158,BuiltInMethod.RESULT_SET_ENUMERABLE_OF.method,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,159,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,160,Schemas.unwrap(jdbcConvention.expression,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,161,JdbcSchema.class),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,162,BuiltInMethod.JDBC_SCHEMA_DATA_SOURCE.method),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,163,sql_,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,164,rowBuilderFactory_));
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,295,private String generateSql(SqlDialect dialect) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,301,return result.asStatement().toSqlString(dialect).getSql();
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,946,return null;
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,99,Function1<ResultSet, Function0<T>> rowBuilderFactory) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,132,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,133,statement.setQueryTimeout(10);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,135,LOGGER.debug("Failed to set query timeout.");
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,147,throw new RuntimeException("while executing SQL [" + sql + "]", e);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,149,if (statement != null) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,150,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,151,statement.close();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,156,if (connection != null) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,157,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,158,connection.close();
core/src/main/java/org/apache/calcite/sql/SqlDynamicParam.java,64,writer.print("?");
core/src/main/java/org/apache/calcite/sql/SqlDynamicParam.java,65,writer.setNeedWhitespace(true);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,152,final String sql = writer.toString();
core/src/main/java/org/apache/calcite/sql/SqlNode.java,153,return new SqlString(dialect, sql);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,24,import org.apache.calcite.sql.util.SqlBuilder;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,813,return new SqlBuilder(dialect, toString()).toSqlString();
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,31,private final String s;
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,39,public SqlString(SqlDialect dialect, String s) {
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,41,this.s = s;
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,42,assert s != null;
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,43,assert dialect != null;
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,47,return s.hashCode();
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,53,&& s.equals(((SqlString) obj).s);
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,65,return s;
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,74,return s;
plus/src/main/java/org/apache/calcite/chinook/CalciteConnectionProvider.java,37,private static final String DRIVER_URL = "jdbc:calcite:";
plus/src/main/java/org/apache/calcite/chinook/CalciteConnectionProvider.java,43,private Properties provideConnectionInfo() throws IOException {
plus/src/main/java/org/apache/calcite/chinook/ConnectionFactory.java,33,return DBWrapper.valueOf(db).connection();
plus/src/main/java/org/apache/calcite/chinook/ConnectionFactory.java,39,private enum DBWrapper {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdTableReferences.java,111,for (RelTableRef leftRef : mq.getTableReferences(leftInput)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdTableReferences.java,119,for (RelTableRef rightRef : mq.getTableReferences(rightInput)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdTableReferences.java,148,for (RelTableRef tableRef : mq.getTableReferences(input)) {
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,107,return new RexCall(
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,108,call.getType(),
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,109,call.getOperator(),
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,110,clonedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,235,if (accPhysType.getJavaRowType() instanceof JavaTypeFactoryImpl.SyntheticRecordType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,238,JavaTypeFactoryImpl.SyntheticRecordType synType =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,240,accPhysType.getJavaRowType();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,241,final ParameterExpression record0_ =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,242,Expressions.parameter(accPhysType.getJavaRowType(), "record0");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,243,initBlock.add(Expressions.declare(0, record0_, null));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,244,initBlock.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,245,Expressions.statement(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,246,Expressions.assign(record0_,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,247,Expressions.new_(accPhysType.getJavaRowType()))));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,248,List<Types.RecordField> fieldList = synType.getRecordFields();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,249,for (int i = 0; i < initExpressions.size(); i++) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,250,Expression right = initExpressions.get(i);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,251,initBlock.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,252,Expressions.statement(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,253,Expressions.assign(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,254,Expressions.field(record0_, fieldList.get(i)),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,255,right)));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,257,initBlock.add(record0_);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,259,initBlock.add(accPhysType.record(initExpressions));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,263,builder.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,277,final BlockBuilder builder2 = new BlockBuilder();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,325,builder2.add(acc_);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,326,final Expression accumulatorAdder =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,327,builder.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,329,Expressions.lambda(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,330,Function2.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,331,builder2.toBlock(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,332,acc_,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,333,inParameter));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,392,accumulatorInitializer,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,393,accumulatorAdder,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,412,Expressions.call(accumulatorInitializer, "apply"),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,413,accumulatorAdder,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,414,resultSelector))));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,443,accumulatorInitializer,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,444,accumulatorAdder,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,774,AggregateCall.create(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,775,SqlStdOperatorTable.SINGLE_VALUE, false, false,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,776,ImmutableList.of(i), -1, 0, rel, null, null));
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,64,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1249,apply(mapping, aggregate.aggCalls);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1253,private static List<AggregateCall> apply(final Mapping mapping,
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1254,List<AggregateCall> aggCallList) {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1255,return Lists.transform(aggCallList,
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1256,call -> call.copy(Mappings.apply2(mapping, call.getArgList()),
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1257,Mappings.apply(mapping, call.filterArg)));
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1306,aggregateCall.type, aggregateCall.name));
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,327,typeChecker, (AggregateFunction) function, false, false, typeFactory);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,69,this(aggFunction, distinct, false, argList, -1, type, name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,83,private AggregateCall(
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,84,SqlAggFunction aggFunction,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,85,boolean distinct,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,86,boolean approximate,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,87,List<Integer> argList,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,88,int filterArg,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,89,RelDataType type,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,90,String name) {
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,106,return create(aggFunction, distinct, false, argList, -1, groupCount, input,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,107,type, name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,114,return create(aggFunction, distinct, false, argList, -1, groupCount, input,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,115,type, name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,133,return create(aggFunction, distinct, approximate, argList, filterArg, type,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,134,name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,141,return create(aggFunction, distinct, false, argList, filterArg, type, name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,149,filterArg, type, name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,219,return new AggregateCall(aggFunction, distinct, approximate, argList,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,220,filterArg, type, name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,260,&& filterArg == other.filterArg;
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,264,return Objects.hash(aggFunction, distinct, argList, filterArg);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,288,public AggregateCall copy(List<Integer> args, int filterArg) {
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,290,filterArg, type, name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,295,return copy(args, filterArg);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,320,newGroupKeyCount, input, newType, getName());
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,327,hasFilter() ? Mappings.apply(mapping, filterArg) : -1);
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,283,filterOperand == null ? -1 : filterOperand, type, null);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1128,if (field.nullDirection != RelFieldCollation.NullDirection.UNSPECIFIED) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1129,boolean first = field.nullDirection == RelFieldCollation.NullDirection.FIRST;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1130,SqlNode nullDirectionNode =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1131,dialect.emulateNullDirection(context.field(field.getFieldIndex()),
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1132,first, field.direction.isDescending());
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1133,if (nullDirectionNode != null) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1134,orderByList.add(nullDirectionNode);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1135,field = new RelFieldCollation(field.getFieldIndex(),
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1136,field.getDirection(),
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1137,RelFieldCollation.NullDirection.UNSPECIFIED);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1140,orderByList.add(context.toSql(field));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,334,final List<Integer> newArgs =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,339,aggCall.isApproximate(), newArgs, -1,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,345,aggCall.isApproximate(), newArgs, -1,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,411,ImmutableIntList.copyOf(fullGroupSet), -1, groupSets.size(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,412,relBuilder.peek(), null, "$g"));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,457,newArgList, newFilterArg, aggregate.getGroupCount(), distinct,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,458,null, aggCall.name);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,667,aggCall.isApproximate(), newArgs,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,668,newFilterArg, aggCall.getType(), aggCall.getName());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,756,aggCall.isApproximate(), newArgs, -1,
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,76,final List<Integer> newKeys = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,78,for (int key : aggregate.getGroupSet()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,79,final RexNode rex = project.getProjects().get(key);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,80,if (rex instanceof RexInputRef) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,81,final int newKey = ((RexInputRef) rex).getIndex();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,82,newKeys.add(newKey);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,83,map.put(key, newKey);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,101,final ImmutableList.Builder<Integer> newArgs = ImmutableList.builder();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,102,for (int arg : aggregateCall.getArgList()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,103,final RexNode rex = project.getProjects().get(arg);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,104,if (rex instanceof RexInputRef) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,105,newArgs.add(((RexInputRef) rex).getIndex());
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,108,return null;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,111,final int newFilterArg;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,112,if (aggregateCall.filterArg >= 0) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,113,final RexNode rex = project.getProjects().get(aggregateCall.filterArg);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,114,if (!(rex instanceof RexInputRef)) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,115,return null;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,117,newFilterArg = ((RexInputRef) rex).getIndex();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,119,newFilterArg = -1;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,121,aggCalls.add(aggregateCall.copy(newArgs.build(), newFilterArg));
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,352,oldAggRel.getGroupCount(), oldAggRel.getInput(), null,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,353,oldCall.name);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,254,aggregateCall.isApproximate(), newArgs, -1,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,176,ImmutableList.of(groupCount + ord.i), -1, groupCount, input,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,177,aggType, origCall.getName());
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,296,aggCall = aggCall.copy(nullableArgs, aggCall.filterArg);
core/src/main/java/org/apache/calcite/sql/SqlAggFunction.java,51,operandTypeChecker, funcType, false, false);
core/src/main/java/org/apache/calcite/sql/SqlAggFunction.java,65,operandTypeChecker, funcType, false, false);
core/src/main/java/org/apache/calcite/sql/SqlAggFunction.java,81,boolean requiresOver) {
core/src/main/java/org/apache/calcite/sql/SqlAggFunction.java,108,validator.validateAggregateParams(call, null, scope);
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,72,SqlCall aggCall = call.operand(0);
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,78,validator.validateAggregateParams(aggCall, condition, scope);
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,95,SqlNode agg = call.operand(0);
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,97,if (!(agg instanceof SqlCall)) {
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,98,throw new IllegalStateException("Argument to SqlOverOperator"
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,99,+ " should be SqlCall, got " + agg.getClass() + ": " + agg);
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,102,final SqlCall aggCall = (SqlCall) agg;
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,117,((SqlValidatorImpl) validator).setValidatedNodeType(agg, ret);
core/src/main/java/org/apache/calcite/sql/SqlRankFunction.java,38,true);
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,121,ImmutableIntList.of(), -1,
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,150,ImmutableList.of(ordinal), -1, aggregateCall.type,
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,151,aggregateCall.name);
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,211,return aggregateCall.copy(ImmutableIntList.of(arg), -1);
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,263,ImmutableList.of(ordinal), -1, aggregateCall.type,
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,264,aggregateCall.name);
core/src/main/java/org/apache/calcite/sql/fun/SqlAbstractGroupFunction.java,58,operandTypeChecker, category, false, false);
core/src/main/java/org/apache/calcite/sql/fun/SqlAnyValueAggFunction.java,47,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlAvgAggFunction.java,54,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlAvgAggFunction.java,55,Preconditions.checkArgument(SqlKind.AVG_AGG_FUNCTIONS.contains(kind), "unsupported sql kind");
core/src/main/java/org/apache/calcite/sql/fun/SqlCovarAggFunction.java,51,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlFirstLastValueAggFunction.java,51,true);
core/src/main/java/org/apache/calcite/sql/fun/SqlHistogramAggFunction.java,56,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,81,true);
core/src/main/java/org/apache/calcite/sql/fun/SqlMinMaxAggFunction.java,78,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlNthValueAggFunction.java,34,true);
core/src/main/java/org/apache/calcite/sql/fun/SqlNtileAggFunction.java,40,true);
core/src/main/java/org/apache/calcite/sql/fun/SqlSingleValueAggFunction.java,54,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1966,SqlFunctionCategory.SYSTEM, false, false) {
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1978,SqlFunctionCategory.SYSTEM, false, false) {
core/src/main/java/org/apache/calcite/sql/fun/SqlSumAggFunction.java,57,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlSumEmptyIsZeroAggFunction.java,51,false);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,60,boolean requiresOrder, boolean requiresOver, RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,63,SqlFunctionCategory.USER_DEFINED_FUNCTION, requiresOrder, requiresOver);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidator.java,302,SqlValidatorScope scope);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4853,validateAggregateParams(call, null, scope);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5126,SqlValidatorScope scope) {
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,797,for (int i : aggCall.getArgList()) {
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,798,inputFieldsUsed.set(i);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1108,false, ImmutableList.of(), -1, longType, null),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1110,false, args, -1, longType, null)));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4666,&& (op.isAggregator() || op.getKind() == SqlKind.FILTER)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4917,translateAgg((SqlCall) call.operand(0), call.operand(1), call);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4951,translateAgg(call, null, call);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4966,private void translateAgg(SqlCall call, SqlNode filter, SqlCall outerCall) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1290,aggCall1.approximate, args,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1291,filterArg, groupSet.cardinality(), r, null, aggCall1.alias);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,597,int newFilterArg = aggCall.filterArg;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,599,|| (uniqueFilterRefs.size() == 1 && allHaveFilters) // filters get extracted
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,600,|| project.getProjects().get(newFilterArg).isAlwaysTrue()) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,601,newFilterArg = -1;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,603,newCalls.add(aggCall.copy(aggCall.getArgList(), newFilterArg));
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1210,relBuilder.aggregateCall(
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1211,rollupAgg,
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1212,aggCall.isDistinct(), aggCall.isApproximate(), null,
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1213,aggCall.name,
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1214,rexBuilder.makeInputRef(relBuilder.peek(),
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1215,aggregate.getGroupCount() + i)));
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1482,relBuilder.aggregateCall(
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1483,rollupAgg, queryAggCall.isDistinct(), queryAggCall.isApproximate(),
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1484,null, queryAggCall.name, rexBuilder.makeInputRef(input, k)));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,277,final SortedSet<Integer> bottomGroupSet = new TreeSet<>();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,278,bottomGroupSet.addAll(aggregate.getGroupSet().asList());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,281,bottomGroupSet.addAll(aggCall.getArgList());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,298,ImmutableBitSet.of(bottomGroupSet).cardinality(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,305,aggregate.copy(
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,306,aggregate.getTraitSet(), relBuilder.build(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,307,false, ImmutableBitSet.of(bottomGroupSet), null, bottomAggregateCalls));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,319,newArgList.add(bottomGroupSet.headSet(arg).size());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,335,Lists.newArrayList(bottomGroupSet.size() + nonDistinctAggCallProcessedSoFar);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,360,for (int bottomGroup : bottomGroupSet) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,120,relBuilder.aggregateCall(aggCall.getAggregation(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,121,aggCall.isDistinct(), aggCall.isApproximate(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,122,filterArg, aggCall.name, args));
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,127,builder.aggregateCall(SqlStdOperatorTable.SINGLE_VALUE, false,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,128,false, null, null, builder.field(0)));
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,388,builder.aggregateCall(SqlStdOperatorTable.COUNT, false, false, null,
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,870,relBuilder.aggregateCall(aggCall.getAggregation(),
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,871,aggCall.isDistinct(), aggCall.isApproximate(),
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,872,filterArg, aggCall.name, args);
core/src/main/java/org/apache/calcite/tools/PigRelBuilder.java,149,aggregateCall(SqlStdOperatorTable.COLLECT, false, false, null,
core/src/main/java/org/apache/calcite/tools/PigRelBuilder.java,150,getAlias(), row));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,727,return aggregateCall(aggFunction, distinct, false, filter, alias,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,728,ImmutableList.copyOf(operands));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,734,return aggregateCall(aggFunction, distinct, approximate, filter, alias,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,735,ImmutableList.copyOf(operands));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,741,return aggregateCall(aggFunction, distinct, false, filter, alias, operands);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,748,if (filter != null) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,749,if (filter.getType().getSqlTypeName() != SqlTypeName.BOOLEAN) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,750,throw RESOURCE.filterMustBeBoolean().ex();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,752,if (filter.getType().isNullable()) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,753,filter = call(SqlStdOperatorTable.IS_TRUE, filter);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,757,ImmutableList.copyOf(operands));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,762,return aggregateCall(SqlStdOperatorTable.COUNT, distinct, false, null,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,763,alias, operands);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,768,return aggregateCall(SqlStdOperatorTable.COUNT, false, false, null, alias);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,773,return aggregateCall(SqlStdOperatorTable.SUM, distinct, false, null, alias,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,774,operand);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,779,return aggregateCall(SqlStdOperatorTable.AVG, distinct, false, null, alias,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,780,operand);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,785,return aggregateCall(SqlStdOperatorTable.MIN, false, false, null, alias,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,786,operand);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,791,return aggregateCall(SqlStdOperatorTable.MAX, false, false, null, alias,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,792,operand);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1981,private static class AggCallImpl implements AggCall {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1985,private final RexNode filter;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1986,private final String alias;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1987,private final ImmutableList<RexNode> operands;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1991,String alias, ImmutableList<RexNode> operands) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1992,this.aggFunction = aggFunction;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1995,this.filter = filter;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1997,this.operands = operands;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelate.java,29,import org.apache.calcite.rel.core.JoinRelType;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelate.java,101,Expression selector =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelate.java,102,EnumUtils.joinSelector(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelate.java,104,: JoinRelType.INNER, physType,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelate.java,105,ImmutableList.of(leftResult.physType, rightResult.physType));
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,733,assert table != null;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,107,starRelOptTable.toRel(RelOptUtil.getContext(cluster));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,23,import org.apache.calcite.rel.RelRoot;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2796,public static RelOptTable.ToRelContext getContext(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2797,final RelOptCluster cluster) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2798,return new RelOptTable.ToRelContext() {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2799,public RelOptCluster getCluster() {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2800,return cluster;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2803,public RelRoot expandView(RelDataType rowType, String queryString,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2804,List<String> schemaPath, List<String> viewPath) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2805,throw new UnsupportedOperationException();
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,31,import org.apache.calcite.rel.RelRoot;
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,35,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,52,class LixToRelTranslator implements RelOptTable.ToRelContext {
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,63,public RelOptCluster getCluster() {
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,64,return cluster;
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,67,public RelRoot expandView(RelDataType rowType, String queryString,
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,68,List<String> schemaPath, List<String> viewPath) {
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,69,return preparingStmt.expandView(rowType, queryString, schemaPath, viewPath);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,63,public class PlannerImpl implements Planner {
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,232,new SqlToRelConverter(new ViewExpanderImpl(), validator,
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,249,List<String> schemaPath, List<String> viewPath) {
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,250,SqlParser parser = SqlParser.create(queryString, parserConfig);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,251,SqlNode sqlNode;
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,252,try {
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,253,sqlNode = parser.parseQuery();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,255,throw new RuntimeException("parse failed", e);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,258,final SqlConformance conformance = conformance();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,259,final CalciteCatalogReader catalogReader =
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,260,createCatalogReader().withSchemaPath(schemaPath);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,261,final SqlValidator validator =
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,262,new CalciteSqlValidator(operatorTable, catalogReader, typeFactory,
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,263,conformance);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,264,validator.setIdentifierExpansion(true);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,267,final RexBuilder rexBuilder = createRexBuilder();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,268,final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,269,final SqlToRelConverter.Config config = SqlToRelConverter
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,274,.build();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,275,final SqlToRelConverter sqlToRelConverter =
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,276,new SqlToRelConverter(new ViewExpanderImpl(), validator,
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,277,catalogReader, cluster, convertletTable, config);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,280,root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,281,final RelBuilder relBuilder =
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,282,config.getRelBuilderFactory().create(cluster, null);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,283,root = root.withRel(
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,284,RelDecorrelator.decorrelateQuery(root.rel, relBuilder));
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,286,return PlannerImpl.this.root;
core/src/main/java/org/apache/calcite/prepare/Prepare.java,178,RelOptUtil.getContext(cluster);
core/src/main/java/org/apache/calcite/prepare/Prepare.java,401,public RelRoot expandView(RelDataType rowType, String queryString,
core/src/main/java/org/apache/calcite/prepare/Prepare.java,402,List<String> schemaPath, List<String> viewPath) {
core/src/main/java/org/apache/calcite/prepare/Prepare.java,403,throw new UnsupportedOperationException();
core/src/main/java/org/apache/calcite/prepare/QueryableRelBuilder.java,102,return ((TranslatableTable) table).toRel(translator, relOptTable);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,30,import org.apache.calcite.plan.RelOptUtil;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,151,relBuilder.push(aggregateRelOptTable.toRel(RelOptUtil.getContext(cluster)));
core/src/main/java/org/apache/calcite/rel/rules/LoptSemiJoinOptimizer.java,284,RelOptUtil.getContext(factRel.getCluster()));
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,22,import org.apache.calcite.plan.RelOptUtil;
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,56,RelOptUtil.getContext(oldRel.getCluster()));
core/src/main/java/org/apache/calcite/schema/impl/ViewTable.java,121,private RelRoot expandView(RelOptTable.ToRelContext preparingStmt,
core/src/main/java/org/apache/calcite/schema/impl/ViewTable.java,124,RelRoot root = preparingStmt.expandView(rowType, queryString, schemaPath, viewPath);
core/src/main/java/org/apache/calcite/schema/impl/ViewTable.java,126,root = root.withRel(RelOptUtil.createCastRel(root.rel, rowType, true));
core/src/main/java/org/apache/calcite/schema/impl/ViewTable.java,127,return root;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,104,import java.util.ArrayDeque;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,108,import java.util.Deque;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2675,final Deque<RelNode> stack = new ArrayDeque<>();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3194,return new RelOptTable.ToRelContext() {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3195,public RelOptCluster getCluster() {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3196,return cluster;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3200,RelDataType rowType,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3201,String queryString,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3202,List<String> schemaPath,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3203,List<String> viewPath) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3204,return viewExpander.expandView(rowType, queryString, schemaPath, viewPath);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,638,final SqlCall aggFunctionCall =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,639,rexOver.getAggOperator().createCall(POS, nodeList);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,642,sqlWindow);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,723,SqlOperator op = aggCall.getAggregation();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,724,if (op instanceof SqlSumEmptyIsZeroAggFunction) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,725,op = SqlStdOperatorTable.SUM;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,727,final List<SqlNode> operands = Expressions.list();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,729,operands.add(field(arg));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,731,return op.createCall(
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,732,aggCall.isDistinct() ? SqlSelectKeyword.DISTINCT.symbol(POS) : null,
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,733,POS, operands.toArray(new SqlNode[0]));
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,884,if (s.equals("(")) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,885,throw new RuntimeException("Use 'startList'");
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,887,if (s.equals(")")) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,888,throw new RuntimeException("Use 'endList'");
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,108,final ImmutableList<ImmutableBitSet> newGroupSets =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,109,ImmutableList.copyOf(
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,110,Iterables.transform(aggregate.getGroupSets(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,111,bitSet -> Mappings.apply(mapping, bitSet)));
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,288,.aggregate(relBuilder.groupKey(belowAggregateKey, null),
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,157,relBuilder.aggregate(relBuilder.groupKey(newGroupSet, null), newAggCalls);
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,131,relBuilder.aggregate(relBuilder.groupKey(topAggRel.getGroupSet(), null),
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,130,relBuilder.aggregate(relBuilder.groupKey(aggRel.getGroupSet(), null),
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,110,relBuilder.aggregate(relBuilder.groupKey(groupSet, null),
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,698,return groupKey_(groupSet, false, groupSets);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,705,return groupKey_(groupSet, indicator, groupSets);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,709,ImmutableList<ImmutableBitSet> groupSets) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,713,if (groupSets == null) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,714,groupSets = ImmutableList.of(groupSet);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,719,Lists.transform(groupSets,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,721,return groupKey(nodes, indicator, nodeLists);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,75,public final ImmutableList<Node> nodes;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,83,public final ImmutableList<String> uniqueColumnNames;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,86,private Lattice(CalciteSchema rootSchema, ImmutableList<Node> nodes,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,89,Double rowCountEstimate, ImmutableList<Column> columns,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,90,ImmutableList<Measure> defaultMeasures, ImmutableList<Tile> tiles) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,92,this.nodes = Objects.requireNonNull(nodes);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,97,this.defaultMeasures = Objects.requireNonNull(defaultMeasures);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,102,for (int i = 0; i < nodes.size(); i++) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,103,Node node = nodes.get(i);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,104,if (i == 0) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,105,assert node.parent == null;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,107,assert nodes.subList(0, i).contains(node.parent);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,115,uniqueColumnNames =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,116,ImmutableList.copyOf(
core/src/main/java/org/apache/calcite/materialize/Lattice.java,117,SqlValidatorUtil.uniquify(
core/src/main/java/org/apache/calcite/materialize/Lattice.java,118,Lists.transform(columns, input -> input.alias), true));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,136,String current) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,220,final List<Node> usedNodes = new ArrayList<>();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,232,for (Node node : nodes) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,235,use(usedNodes, node);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,238,if (usedNodes.isEmpty()) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,239,usedNodes.add(nodes.get(0));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,242,usedNodes.addAll(nodes);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,257,dialect.quoteIdentifier(buf, column.identifiers());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,258,dialect.quoteIdentifier(groupBuf, column.identifiers());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,259,final String fieldName = uniqueColumnNames.get(i);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,260,columnNames.add(fieldName);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,261,if (!column.alias.equals(fieldName)) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,263,dialect.quoteIdentifier(buf, fieldName);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,266,if (groupSet.isEmpty()) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,267,groupBuf.append("()");
core/src/main/java/org/apache/calcite/materialize/Lattice.java,284,dialect.quoteIdentifier(buf, arg.identifiers());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,298,for (Node node : usedNodes) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,299,if (node.parent != null) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,302,dialect.quoteIdentifier(buf, node.scan.getTable().getQualifiedName());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,305,if (node.parent != null) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,308,for (IntPair pair : node.link) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,312,final Column left = columns.get(node.parent.startCol + pair.source);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,313,dialect.quoteIdentifier(buf, left.identifiers());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,316,dialect.quoteIdentifier(buf, right.identifiers());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,338,private static void use(List<Node> usedNodes, Node node) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,339,if (!usedNodes.contains(node)) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,340,if (node.parent != null) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,341,use(usedNodes, node.parent);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,343,usedNodes.add(node);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,349,for (Node node : nodes) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,350,tables.add(node.scan.getTable().unwrap(Table.class));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,356,return new Builder(calciteSchema, sql);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,360,return Lists.transform(aggCallList,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,361,call -> new Measure(call.getAggregation(),
core/src/main/java/org/apache/calcite/materialize/Lattice.java,362,Lists.transform(call.getArgList(), columns::get)));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,421,public static class Node {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,422,public final TableScan scan;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,423,public final Node parent;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,424,public final ImmutableList<IntPair> link;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,425,public final int startCol;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,426,public final int endCol;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,427,public final String alias;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,429,public Node(TableScan scan, Node parent, List<IntPair> link,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,430,int startCol, int endCol, String alias) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,431,this.scan = Objects.requireNonNull(scan);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,432,this.parent = parent;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,433,this.link = link == null ? null : ImmutableList.copyOf(link);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,434,assert (parent == null) == (link == null);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,435,assert startCol >= 0;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,436,assert endCol > startCol;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,437,this.startCol = startCol;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,438,this.endCol = endCol;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,439,this.alias = alias;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,445,public static final DirectedGraph.EdgeFactory<RelNode, Edge> FACTORY =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,450,Edge(RelNode source, RelNode target) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,454,public RelNode getTarget() {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,455,return (RelNode) target;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,458,public RelNode getSource() {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,459,return (RelNode) source;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,468,public Measure(SqlAggFunction agg, Iterable<Column> args) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,473,public int compareTo(Measure measure) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,474,int c = agg.getName().compareTo(measure.agg.getName());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,475,if (c != 0) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,476,return c;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,478,return compare(args, measure.args);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,482,return "Measure: [agg: " + agg + ", args: " + args + "]";
core/src/main/java/org/apache/calcite/materialize/Lattice.java,493,&& this.args.equals(((Measure) obj).args);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,507,return Lists.transform(args, input -> input.ordinal);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,527,public static class Column implements Comparable<Column> {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,529,public final String table;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,530,public final String column;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,533,private Column(int ordinal, String table, String column, String alias) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,535,this.table = Objects.requireNonNull(table);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,536,this.column = Objects.requireNonNull(column);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,574,private final List<Node> nodes = new ArrayList<>();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,575,private final ImmutableList<Column> columns;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,577,private final ImmutableList.Builder<Measure> defaultMeasureListBuilder =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,578,ImmutableList.builder();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,588,public Builder(CalciteSchema schema, String sql) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,605,final DirectedGraph<RelNode, Edge> graph =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,607,for (RelNode node : relNodes) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,608,graph.addVertex(node);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,611,final RelNode source = relNodes.get(tempLink[0][0]);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,612,final RelNode target = relNodes.get(tempLink[1][0]);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,622,Node previous = null;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,623,final Map<RelNode, Node> map = new IdentityHashMap<>();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,624,int previousColumn = 0;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,625,for (RelNode relNode : TopologicalOrderIterator.of(graph)) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,626,final List<Edge> edges = graph.getInwardEdges(relNode);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,627,Node node;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,628,final int column = previousColumn
core/src/main/java/org/apache/calcite/materialize/Lattice.java,629,+ relNode.getRowType().getFieldCount();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,630,if (previous == null) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,633,+ relNode);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,635,node = new Node((TableScan) relNode, null, null,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,636,previousColumn, column, aliases.get(nodes.size()));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,643,node = new Node((TableScan) relNode,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,644,map.get(edge.getSource()), edge.pairs, previousColumn, column,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,645,aliases.get(nodes.size()));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,647,nodes.add(node);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,648,map.put(relNode, node);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,649,previous = node;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,650,previousColumn = column;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,653,final ImmutableList.Builder<Column> builder = ImmutableList.builder();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,654,final ImmutableListMultimap.Builder<String, Column> aliasBuilder =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,655,ImmutableListMultimap.builder();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,656,int c = 0;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,657,for (Node node : nodes) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,658,if (node.scan != null) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,659,for (String name : node.scan.getRowType().getFieldNames()) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,660,final Column column = new Column(c++, node.alias, name, name);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,661,builder.add(column);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,662,aliasBuilder.put(column.alias, column);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,666,columns = builder.build();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,667,columnsByAlias = aliasBuilder.build();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,711,return new Lattice(rootSchema, ImmutableList.copyOf(nodes), auto,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,713,columns, defaultMeasureListBuilder.build(), tileListBuilder.build());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,720,public ImmutableList<Column> resolveArgs(Object args) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,786,for (Column column1 : columns) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,796,public Measure resolveMeasure(String aggName, Object args) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,799,return new Measure(agg, list);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,813,public void addMeasure(Measure measure) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,814,defaultMeasureListBuilder.add(measure);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,522,latticeBuilder.resolveMeasure(jsonMeasure.agg, jsonMeasure.args);
core/src/main/java/org/apache/calcite/plan/RelOptLattice.java,43,return lattice.nodes.get(0).scan.getTable();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,70,private HepProgram mainProgram;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,78,private Map<String, HepRelVertex> mapDigestToVertex;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,80,private final Set<RelOptRule> allRules;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,88,private boolean noDAG;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,95,private DirectedGraph<HepRelVertex, DefaultEdge> graph;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,130,boolean noDAG,
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,135,this.onCopyHook =
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,136,Util.first(onCopyHook, Functions.ignore2());
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,137,mapDigestToVertex = new HashMap<>();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,138,graph = DefaultDirectedGraph.create();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,142,allRules = new LinkedHashSet<>();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,143,this.noDAG = noDAG;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,820,if (!noDAG) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,411,public abstract class Context {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,415,protected Context(int fieldCount) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,416,this(fieldCount, false);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,419,protected Context(int fieldCount, boolean ignoreCast) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,555,sqlSubQuery = visitChild(0, subQuery.rel).asQueryOrValues();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,773,return new AliasContext(aliases, qualified);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,777,return new JoinContext(leftContext, rightContext);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,781,return new MatchRecognizeContext(((AliasContext) context).aliases);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,788,protected MatchRecognizeContext(Map<String, RelDataType> aliases) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,789,super(aliases, false);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,805,public class AliasContext extends Context {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,810,protected AliasContext(Map<String, RelDataType> aliases,
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,811,boolean qualified) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,812,super(computeFieldCount(aliases));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,841,class JoinContext extends Context {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,846,private JoinContext(Context leftContext, Context rightContext) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,847,super(leftContext.fieldCount + rightContext.fieldCount);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,928,newContext = new Context(selectList.size()) {
core/src/main/java/org/apache/calcite/schema/impl/StarTable.java,92,return typeFactory.createStructType(typeList, lattice.uniqueColumnNames);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,179,private SqlRexConvertletTable convertletTable =
core/src/main/java/org/apache/calcite/tools/Frameworks.java,180,StandardConvertletTable.INSTANCE;
core/src/main/java/org/apache/calcite/tools/Frameworks.java,181,private SqlOperatorTable operatorTable = SqlStdOperatorTable.instance();
core/src/main/java/org/apache/calcite/tools/Frameworks.java,182,private ImmutableList<Program> programs = ImmutableList.of();
core/src/main/java/org/apache/calcite/tools/Frameworks.java,185,private SqlParser.Config parserConfig =
core/src/main/java/org/apache/calcite/tools/Frameworks.java,186,SqlParser.Config.DEFAULT;
core/src/main/java/org/apache/calcite/tools/Frameworks.java,187,private SqlToRelConverter.Config sqlToRelConverterConfig =
core/src/main/java/org/apache/calcite/tools/Frameworks.java,188,SqlToRelConverter.Config.DEFAULT;
core/src/main/java/org/apache/calcite/tools/Frameworks.java,192,private RelDataTypeSystem typeSystem = RelDataTypeSystem.DEFAULT;
core/src/main/java/org/apache/calcite/tools/Frameworks.java,194,private ConfigBuilder() {}
core/src/main/java/org/apache/calcite/tools/Frameworks.java,199,defaultSchema, costFactory, typeSystem, executor);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,310,RexExecutor executor) {
core/src/main/java/org/apache/calcite/util/graph/DefaultDirectedGraph.java,38,final Map<V, VertexInfo<V, E>> vertexMap =
core/src/main/java/org/apache/calcite/util/graph/DefaultDirectedGraph.java,57,StringBuilder buf = new StringBuilder();
core/src/main/java/org/apache/calcite/util/graph/DefaultDirectedGraph.java,63,.append(")");
core/src/main/java/org/apache/calcite/util/graph/DefaultDirectedGraph.java,64,return buf.toString();
core/src/main/java/org/apache/calcite/util/graph/DefaultEdge.java,27,this.source = source;
core/src/main/java/org/apache/calcite/util/graph/DefaultEdge.java,28,this.target = target;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,909,if (constants.containsKey(inputRef)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,910,stack.add(Constancy.REDUCIBLE_CONSTANT);
core/src/main/java/org/apache/calcite/rex/RexFieldCollation.java,36,String s = left.toString();
core/src/main/java/org/apache/calcite/rex/RexFieldCollation.java,40,s += " DESC";
core/src/main/java/org/apache/calcite/rex/RexFieldCollation.java,43,s += " NULLS FIRST";
core/src/main/java/org/apache/calcite/rex/RexFieldCollation.java,46,s += " NULLS LAST";
core/src/main/java/org/apache/calcite/rex/RexFieldCollation.java,52,return s;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,960,List<AggregateCall> aggCallList = rel.getAggCallList();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,961,HashSet<Integer> aggregatesArgs = new HashSet<>();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,962,for (AggregateCall aggregateCall: aggCallList) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,963,aggregatesArgs.addAll(aggregateCall.getArgList());
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,965,for (Integer aggregatesArg : aggregatesArgs) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,966,SqlNode selectNode = ((SqlSelect) node).getSelectList().get(aggregatesArg);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,967,if (!(selectNode instanceof SqlBasicCall)) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,968,continue;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,970,for (SqlNode operand : ((SqlBasicCall) selectNode).getOperands()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,971,if (operand instanceof SqlCall) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,972,final SqlOperator operator = ((SqlCall) operand).getOperator();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,973,if (operator instanceof SqlAggFunction) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,974,return true;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,686,if (!(target instanceof RexCorrelVariable)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,687,throw new RuntimeException(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,690,if (correlates == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,691,throw new RuntimeException("Cannot translate " + expr + " since "
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,692,+ "correlate variables resolver is not defined");
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,694,InputGetter getter =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,695,correlates.apply(((RexCorrelVariable) target).getName());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,696,return getter.field(list, fieldAccess.getField().getIndex(), storageType);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,806,RexCall cast = (RexCall) refExp;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,807,refExp = cast.getOperands().get(0);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,809,if (refExp.isA(SqlKind.NEW_SPECIFICATION)) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,810,return ((RexCall) refExp).operands
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,811,.get(fieldAccess.getField().getIndex());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,813,if (!(refExp instanceof RexFieldAccess)) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,816,fieldAccess = (RexFieldAccess) refExp;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,197,(cx, call) -> cx.getRexBuilder().makeCall(SqlStdOperatorTable.DOT,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,199,cx.getRexBuilder().makeLiteral(call.operand(1).toString())));
core/src/main/java/org/apache/calcite/util/BuiltInMethod.java,436,METADATA_REL(Metadata.class, "rel");
core/src/main/java/org/apache/calcite/rex/RexFieldCollation.java,32,super(left, ImmutableSet.copyOf(right));
linq4j/src/main/java/org/apache/calcite/linq4j/tree/OptimizeShuttle.java,244,&& Primitive.is(expression0.getType())) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/OptimizeShuttle.java,256,&& Primitive.is(expression0.getType())) {
core/src/main/java/org/apache/calcite/rex/RexCall.java,124,case IS_NOT_FALSE:
core/src/main/java/org/apache/calcite/rex/RexCall.java,125,case NOT:
core/src/main/java/org/apache/calcite/rex/RexCall.java,126,return operands.get(0).isAlwaysFalse();
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,532,if (digests.add(operand.digest)) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,531,operand = simplify_(operand);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1374,assert !generateNullsOnLeft : "not implemented";
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1375,assert !generateNullsOnRight : "not implemented";
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3266,assert c < 0 : "not sorted";
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3282,assert c < 0 : "not sorted";
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,658,final RexNode disjunction = RexUtil.composeDisjunction(rexBuilder, terms);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,660,return rexBuilder.makeCast(call.getType(), disjunction);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,662,return disjunction;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1865,&& call2.getOperands().get(1) instanceof RexLiteral) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,167,implementor.allCorrelateVariables);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScan.java,81,(JavaTypeFactory) getCluster().getTypeFactory(), bb, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableThetaJoin.java,183,implementor.allCorrelateVariables)));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,277,inputGetter);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,426,getBlockBuilderWinAggFrameResultContextFunction(typeFactory, result,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,427,translatedConstants, comparator_, rows_, i_, startX, endX,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,428,minX, maxX,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,523,final JavaTypeFactory typeFactory, final Result result,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,524,final List<Expression> translatedConstants,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,543,block, inputGetter);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1742,translatedOperands.get(2));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,109,private RexToLixTranslator(RexProgram program, JavaTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,110,Expression root, InputGetter inputGetter, BlockBuilder list) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,111,this(program, typeFactory, root, inputGetter, list,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,112,Collections.emptyMap(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,113,new RexBuilder(typeFactory));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,116,private RexToLixTranslator(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,117,RexProgram program,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,118,JavaTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,119,Expression root,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,120,InputGetter inputGetter,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,121,BlockBuilder list,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,122,Map<RexNode, Boolean> exprNullableMap,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,123,RexBuilder builder) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,124,this(program, typeFactory, root, inputGetter, list, exprNullableMap,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,125,builder, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,128,private RexToLixTranslator(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,129,RexProgram program,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,130,JavaTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,131,Expression root,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,132,InputGetter inputGetter,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,133,BlockBuilder list,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,134,Map<? extends RexNode, Boolean> exprNullableMap,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,135,RexBuilder builder,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,136,RexToLixTranslator parent) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,137,this(program, typeFactory, root, inputGetter, list, exprNullableMap,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,138,builder, parent, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,141,private RexToLixTranslator(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,142,RexProgram program,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,151,this.program = program;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,152,this.typeFactory = typeFactory;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,153,this.root = root;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,155,this.list = list;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,156,this.exprNullableMap = exprNullableMap;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,157,this.builder = builder;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,158,this.parent = parent;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,159,this.correlates = correlates;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,177,JavaTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,178,BlockBuilder list,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,179,PhysType outputPhysType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,180,Expression root,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,181,InputGetter inputGetter,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,182,Function1<String, InputGetter> correlates) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,198,BlockBuilder list, InputGetter inputGetter) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,200,return new RexToLixTranslator(null, typeFactory, root, inputGetter, list);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,911,public static Expression translateCondition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,912,RexProgram program,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,913,JavaTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,914,BlockBuilder list,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,915,InputGetter inputGetter,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,916,Function1<String, InputGetter> correlates) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,922,new RexToLixTranslator(program, typeFactory, root, inputGetter, list);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1218,nullable, builder, this, correlates);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1226,block, ImmutableMap.of(), builder, this, correlates);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1235,Collections.emptyMap(), builder, this, correlates);
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,97,RexToLixTranslator.translateProjects(program, javaTypeFactory, builder,
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,98,null, root, inputGetter, correlates);
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,133,cfg.typeSystem(RelDataTypeSystem.class, RelDataTypeSystem.DEFAULT);
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,80,RexToLixTranslator.translateProjects(programBuilder.getProgram(),
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,81,javaTypeFactory, blockBuilder, null, root_, getter, null);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,194,return trim_(s, false, true, ' ');
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,199,return trim_(s, true, false, ' ');
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,203,public static String trim(boolean leading, boolean trailing, String seek,
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,205,return trim_(s, leading, trailing, seek.charAt(0));
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,209,private static String trim_(String s, boolean left, boolean right, char c) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,216,if (s.charAt(j - 1) != c) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,228,if (s.charAt(i) != c) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1465,s = trim_(s, true, true, ' ');
core/src/main/java/org/apache/calcite/util/BuiltInMethod.java,279,String.class),
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,349,null);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodCallExpression.java,53,this(method.getGenericReturnType(), method, targetExpression, expressions);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,599,RelDataType int8Type =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,600,cx.getTypeFactory().createSqlType(SqlTypeName.BIGINT);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,601,final RexNode[] casts = new RexNode[2];
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,602,casts[0] =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,603,rexBuilder.makeCast(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,604,cx.getTypeFactory().createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,605,int8Type,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,606,exprs.get(0).getType().isNullable()),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,607,exprs.get(0));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,608,casts[1] =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,609,rexBuilder.makeCast(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,610,cx.getTypeFactory().createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,611,int8Type,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,612,exprs.get(1).getType().isNullable()),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,613,exprs.get(1));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,434,return rexBuilder.makeLiteral(false);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,111,public static String substring(String s, int from, int for_) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,112,return s.substring(from - 1, Math.min(from - 1 + for_, s.length()));
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,116,public static String substring(String s, int from) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,117,return s.substring(from - 1);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,121,public static ByteString substring(ByteString b, int from, int for_) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,122,return b.substring(from - 1, Math.min(from - 1 + for_, b.length()));
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,126,public static ByteString substring(ByteString b, int from) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,127,return b.substring(from - 1);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,17,package org.apache.calcite.adapter.elasticsearch;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,19,import org.apache.calcite.adapter.java.AbstractQueryableTable;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,20,import org.apache.calcite.linq4j.Enumerable;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,21,import org.apache.calcite.linq4j.Enumerator;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,22,import org.apache.calcite.linq4j.QueryProvider;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,23,import org.apache.calcite.linq4j.Queryable;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,24,import org.apache.calcite.plan.RelOptCluster;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,25,import org.apache.calcite.plan.RelOptTable;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,26,import org.apache.calcite.rel.RelNode;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,27,import org.apache.calcite.rel.type.RelDataType;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,28,import org.apache.calcite.rel.type.RelDataTypeFactory;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,29,import org.apache.calcite.schema.SchemaPlus;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,30,import org.apache.calcite.schema.TranslatableTable;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,31,import org.apache.calcite.schema.impl.AbstractTableQueryable;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,32,import org.apache.calcite.sql.type.SqlTypeName;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,34,import com.fasterxml.jackson.databind.ObjectMapper;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,36,import java.util.List;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,37,import java.util.Map;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,38,import java.util.Objects;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,43,abstract class AbstractElasticsearchTable extends AbstractQueryableTable
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,44,implements TranslatableTable {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,46,final String indexName;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,47,final String typeName;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,48,final ObjectMapper mapper;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,56,AbstractElasticsearchTable(String indexName, String typeName, ObjectMapper mapper) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,57,super(Object[].class);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,58,this.indexName = Objects.requireNonNull(indexName, "indexName");
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,59,this.typeName = Objects.requireNonNull(typeName, "typeName");
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,60,this.mapper = Objects.requireNonNull(mapper, "mapper");
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,64,return "ElasticsearchTable{" + indexName + "/" + typeName + "}";
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,67,public RelDataType getRowType(RelDataTypeFactory relDataTypeFactory) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,68,final RelDataType mapType = relDataTypeFactory.createMapType(
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,69,relDataTypeFactory.createSqlType(SqlTypeName.VARCHAR),
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,70,relDataTypeFactory.createTypeWithNullability(
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,71,relDataTypeFactory.createSqlType(SqlTypeName.ANY),
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,72,true));
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,73,return relDataTypeFactory.builder().add("_MAP", mapType).build();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,76,public <T> Queryable<T> asQueryable(QueryProvider queryProvider, SchemaPlus schema,
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,77,String tableName) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,78,return new ElasticsearchQueryable<>(queryProvider, schema, this, tableName);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,81,public RelNode toRel(RelOptTable.ToRelContext context, RelOptTable relOptTable) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,82,final RelOptCluster cluster = context.getCluster();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,83,return new ElasticsearchTableScan(cluster, cluster.traitSetOf(ElasticsearchRel.CONVENTION),
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,84,relOptTable, this, null);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,96,protected abstract String scriptedFieldPrefix();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,109,protected abstract Enumerable<Object> find(String index, List<String> ops,
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,110,List<Map.Entry<String, Class>> fields);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,118,public static class ElasticsearchQueryable<T> extends AbstractTableQueryable<T> {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,119,ElasticsearchQueryable(QueryProvider queryProvider, SchemaPlus schema,
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,120,AbstractElasticsearchTable table, String tableName) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,121,super(queryProvider, schema, table, tableName);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,124,public Enumerator<T> enumerator() {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,125,return null;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,128,private String getIndex() {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,129,return schema.unwrap(ElasticsearchSchema.class).getIndex();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,132,private AbstractElasticsearchTable getTable() {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,133,return (AbstractElasticsearchTable) table;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,143,public Enumerable<Object> find(List<String> ops,
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,144,List<Map.Entry<String, Class>> fields) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/AbstractElasticsearchTable.java,145,return getTable().find(getIndex(), ops, fields);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchConstants.java,33,String SOURCE = SOURCE_GROOVY;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchConstants.java,38,String AGG_SUM = "SUM";
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchConstants.java,39,String AGG_SUM0 = "$SUM0";
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchConstants.java,40,String AGG_COUNT = "COUNT";
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchConstants.java,41,String AGG_MIN = "MIN";
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchConstants.java,42,String AGG_MAX = "MAX";
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchConstants.java,43,String AGG_AVG = "AVG";
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchEnumerators.java,36,private static Function1<ElasticsearchSearchResult.SearchHit, Map> mapGetter() {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchEnumerators.java,37,return new Function1<ElasticsearchSearchResult.SearchHit, Map>() {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchEnumerators.java,38,public Map apply(ElasticsearchSearchResult.SearchHit hits) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchEnumerators.java,44,private static Function1<ElasticsearchSearchResult.SearchHit, Object> singletonGetter(
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchEnumerators.java,47,return new Function1<ElasticsearchSearchResult.SearchHit, Object>() {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchEnumerators.java,48,public Object apply(ElasticsearchSearchResult.SearchHit hits) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchEnumerators.java,49,return convert(hits.sourceOrFields(), fieldClass);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchEnumerators.java,62,private static Function1<ElasticsearchSearchResult.SearchHit, Object[]> listGetter(
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchEnumerators.java,64,return new Function1<ElasticsearchSearchResult.SearchHit, Object[]>() {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchEnumerators.java,65,public Object[] apply(ElasticsearchSearchResult.SearchHit hit) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchEnumerators.java,71,objects[i] = convert(hit.value(name), type);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchEnumerators.java,78,static Function1<ElasticsearchSearchResult.SearchHit, Object> getter(
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchEnumerators.java,81,return fields == null
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchEnumerators.java,83,: fields.size() == 1
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchEnumerators.java,85,: (Function1) listGetter(fields);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchFilter.java,26,import org.apache.calcite.rel.core.Project;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchFilter.java,73,List<String> fieldNames;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchFilter.java,74,if (input instanceof Project) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchFilter.java,75,final List<RexNode> projects = ((Project) input).getProjects();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchFilter.java,76,fieldNames = new ArrayList<>(projects.size());
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchFilter.java,77,for (RexNode project : projects) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchFilter.java,78,String name = project.accept(MapProjectionFieldVisitor.INSTANCE);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchFilter.java,79,fieldNames.add(name);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchFilter.java,82,fieldNames = ElasticsearchRules.elasticsearchFieldNames(getRowType());
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchFilter.java,106,String translateMatch(RexNode condition) throws IOException, ExpressionNotAnalyzableException {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchMethod.java,30,ELASTICSEARCH_QUERYABLE_FIND(AbstractElasticsearchTable.ElasticsearchQueryable.class,
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchProject.java,104,for (String opfield : implementor.list) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchProject.java,105,if (opfield.startsWith("\"_source\"")) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchProject.java,106,implementor.list.remove(opfield);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRel.java,45,AbstractElasticsearchTable elasticsearchTable;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRel.java,47,public void add(String findOp) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRel.java,51,public void visitChild(int ordinal, RelNode input) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,56,ElasticsearchProjectRule.INSTANCE
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,150,+ "is not supported by ElasticsearchProject");
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSchema.java,67,try {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSchema.java,68,for (String type: listTypes()) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSchema.java,69,builder.put(type, new ElasticsearchTable(client, mapper, index, type));
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSchema.java,72,throw new UncheckedIOException("Failed to get types for " + index, e);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSchema.java,84,private Set<String> listTypes() throws IOException  {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,26,import org.apache.calcite.rel.core.Project;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,32,import org.apache.calcite.util.Util;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,34,import java.util.ArrayList;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,60,if (!collation.getFieldCollations().isEmpty()) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,61,final List<String> keys = new ArrayList<>();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,62,if (input instanceof Project) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,63,final List<RexNode> projects = ((Project) input).getProjects();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,65,for (RelFieldCollation fieldCollation : collation.getFieldCollations()) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,66,RexNode project = projects.get(fieldCollation.getFieldIndex());
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,67,String name = project.accept(MapProjectionFieldVisitor.INSTANCE);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,68,keys.add(ElasticsearchRules.quote(name) + ": " + direction(fieldCollation));
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,71,final List<RelDataTypeField> fields = getRowType().getFieldList();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,73,for (RelFieldCollation fieldCollation : collation.getFieldCollations()) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,74,final String name = fields.get(fieldCollation.getFieldIndex()).getName();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,75,keys.add(ElasticsearchRules.quote(name) + ": " + direction(fieldCollation));
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,79,implementor.add("\"sort\": [ " + Util.toString(keys, "{", "}, {", "}") + "]");
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,83,implementor.add("\"from\": " + ((RexLiteral) offset).getValue());
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,87,implementor.add("\"size\": " + ((RexLiteral) fetch).getValue());
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,91,private String direction(RelFieldCollation fieldCollation) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,92,switch (fieldCollation.getDirection()) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,93,case DESCENDING:
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,94,case STRICTLY_DESCENDING:
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,95,return "\"desc\"";
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,96,case ASCENDING:
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,97,case STRICTLY_ASCENDING:
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,98,default:
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,99,return "\"asc\"";
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchTable.java,48,public class ElasticsearchTable extends AbstractElasticsearchTable {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchTable.java,61,super(indexName, typeName, Objects.requireNonNull(mapper, "mapper"));
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchTable.java,98,List<Map.Entry<String, Class>> fields) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchTable.java,100,final String query;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchTable.java,101,if (!ops.isEmpty()) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchTable.java,102,query = "{" + Util.toString(ops, "", ", ", "") + "}";
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchTable.java,104,query = "{}";
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchTable.java,108,ElasticsearchSearchResult result = httpRequest(query);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchTable.java,109,final Function1<ElasticsearchSearchResult.SearchHit, Object> getter =
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchTable.java,111,return Linq4j.asEnumerable(result.searchHits().hits()).select(getter);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchTable.java,117,private ElasticsearchSearchResult httpRequest(String query) throws IOException {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchTable.java,120,HttpEntity entity = new StringEntity(query, ContentType.APPLICATION_JSON);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchTable.java,131,return mapper.readValue(is, ElasticsearchSearchResult.class);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchTableScan.java,40,private final AbstractElasticsearchTable elasticsearchTable;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchTableScan.java,53,RelOptTable table, AbstractElasticsearchTable elasticsearchTable,
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchTableScan.java,56,this.elasticsearchTable = Objects.requireNonNull(elasticsearchTable);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,33,import org.apache.calcite.prepare.CalcitePrepareImpl;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,38,import org.apache.calcite.runtime.Hook;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,64,final BlockBuilder list = new BlockBuilder();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,65,final ElasticsearchRel.Implementor elasticsearchImplementor =
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,66,new ElasticsearchRel.Implementor();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,67,elasticsearchImplementor.visitChild(0, getInput());
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,69,final PhysType physType = PhysTypeImpl.of(implementor.getTypeFactory(), rowType,
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,71,final Expression fields = list.append("fields",
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,84,final Expression table = list.append("table",
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,85,elasticsearchImplementor.table
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,86,.getExpression(AbstractElasticsearchTable.ElasticsearchQueryable.class));
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,87,List<String> opList = elasticsearchImplementor.list;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,88,final Expression ops = list.append("ops", constantArrayList(opList, String.class));
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,89,Expression enumerable = list.append("enumerable",
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,91,fields));
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,92,if (CalcitePrepareImpl.DEBUG) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,93,System.out.println("Elasticsearch: " + opList);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,95,Hook.QUERY_PLAN.run(opList);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,96,list.add(Expressions.return_(null, enumerable));
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,97,return implementor.result(physType, list.toBlock());
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/QueryBuilders.java,24,import java.util.Locale;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/QueryBuilders.java,249,writeScalar(generator, value);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/QueryBuilders.java,262,private static void writeScalar(JsonGenerator generator, Object value) throws IOException {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/QueryBuilders.java,263,if (value == null) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/QueryBuilders.java,264,generator.writeNull();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/QueryBuilders.java,266,generator.writeString(Objects.toString(value));
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/QueryBuilders.java,269,generator.writeNumber(value.toString());
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/QueryBuilders.java,271,generator.writeBoolean((Boolean) value);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/QueryBuilders.java,273,final String message = String.format(Locale.ROOT, "Unsupported type %s : %s",
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/QueryBuilders.java,274,value.getClass(), value);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/QueryBuilders.java,275,throw new IllegalArgumentException(message);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/QueryBuilders.java,343,writeScalar(generator, gt);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/QueryBuilders.java,349,writeScalar(generator, lt);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,540,subQuery = (RexSubQuery) rex;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,541,sqlSubQuery = visitChild(0, subQuery.rel).asQueryOrValues();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,542,List<RexNode> operands = subQuery.operands;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,543,SqlNode op0;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,544,if (operands.size() == 1) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,545,op0 = toSql(program, operands.get(0));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,547,final List<SqlNode> cols = toSql(program, operands);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,548,op0 = new SqlNodeList(cols, POS);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,550,return subQuery.getOperator().createCall(POS, op0, sqlSubQuery);
core/src/main/java/org/apache/calcite/profile/Profiler.java,207,map.put("cardinality", cardinality);
core/src/main/java/org/apache/calcite/profile/Profiler.java,211,map.put("expectedCardinality", expectedCardinality);
core/src/main/java/org/apache/calcite/profile/Profiler.java,212,map.put("surprise", surprise());
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2547,c1 = c2;
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2548,p1 = p2;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,74,StringBuilder out, CharSequence ... args) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,129,+ new String(bytes, StandardCharsets.UTF_8));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,148,try (final JsonParser parser = factory.createParser(in)) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,649,+ new String(bytes, StandardCharsets.UTF_8));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,660,boolean addFilter, int startIndex, RelNode filter, RelNode ... trailingNodes) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,216,String bigString = new String(chars);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,219,add(bigString.substring(0, i * 2));
plus/src/main/java/org/apache/calcite/adapter/os/SqlShell.java,103,final PrintWriter out =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,870,if ((sqlNode instanceof SqlCall) && containsInOperator(sqlNode)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,871,SqlCall sqlCall = (SqlCall) sqlNode;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,873,|| (sqlCall.getOperator() == SqlStdOperatorTable.OR)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,874,SqlNode[] sqlOperands = ((SqlBasicCall) sqlCall).operands;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,875,for (int i = 0; i < sqlOperands.length; i++) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,876,sqlOperands[i] = pushDownNotForIn(scope, sqlOperands[i]);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,878,return reg(scope, sqlNode);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,880,SqlNode childNode = sqlCall.operand(0);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,881,assert childNode instanceof SqlCall;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,882,SqlBasicCall childSqlCall = (SqlBasicCall) childNode;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,883,if (childSqlCall.getOperator() == SqlStdOperatorTable.AND) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,884,SqlNode[] andOperands = childSqlCall.getOperands();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,885,SqlNode[] orOperands = new SqlNode[andOperands.length];
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,886,for (int i = 0; i < orOperands.length; i++) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,887,orOperands[i] = reg(scope,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,888,SqlStdOperatorTable.NOT.createCall(SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,889,andOperands[i]));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,891,for (int i = 0; i < orOperands.length; i++) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,892,orOperands[i] = pushDownNotForIn(scope, orOperands[i]);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,894,return reg(scope,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,895,SqlStdOperatorTable.OR.createCall(SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,896,orOperands[0], orOperands[1]));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,898,SqlNode[] orOperands = childSqlCall.getOperands();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,899,SqlNode[] andOperands = new SqlNode[orOperands.length];
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,900,for (int i = 0; i < andOperands.length; i++) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,901,andOperands[i] = reg(scope,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,902,SqlStdOperatorTable.NOT.createCall(SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,903,orOperands[i]));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,905,for (int i = 0; i < andOperands.length; i++) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,906,andOperands[i] = pushDownNotForIn(scope, andOperands[i]);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,908,return reg(scope,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,909,SqlStdOperatorTable.AND.createCall(SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,910,andOperands[0], andOperands[1]));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,912,SqlNode[] notOperands = childSqlCall.getOperands();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,913,assert notOperands.length == 1;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,914,return pushDownNotForIn(scope, notOperands[0]);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,916,SqlNode[] inOperands = childSqlCall.getOperands();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,917,SqlInOperator inOp =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,918,(SqlInOperator) childSqlCall.getOperator();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,919,if (inOp.kind == SqlKind.NOT_IN) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,920,return reg(scope,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,921,SqlStdOperatorTable.IN.createCall(SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,922,inOperands[0], inOperands[1]));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,924,return reg(scope,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,925,SqlStdOperatorTable.NOT_IN.createCall(SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,926,inOperands[0], inOperands[1]));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,931,return sqlNode;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,936,return sqlNode;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,940,return sqlNode;
core/src/main/java/org/apache/calcite/rex/RexInterpreter.java,91,return Util.first(literal.getValue4(), NullSentinel.INSTANCE);
core/src/main/java/org/apache/calcite/rex/RexInterpreter.java,325,if (value == NullSentinel.INSTANCE) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,374,ImmutableList.of(((RexCall) a).getOperands().get(0))));
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,411,return al;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,183,case RPAREN:
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,184,iter.previous();
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,185,return;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,188,break;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,572,purgeSelectExprsKeepAliases();
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,38,UNION, INTERSECT, EXCEPT,
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,336,if (pos < sql.length()) {
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,462,return new SqlAdvisor(validator);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,146,final List<SqlMoniker> result;
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,147,if (word.length() > 0) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,148,result = new ArrayList<SqlMoniker>();
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,149,if (quoted) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,151,word = word.substring(1);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,152,for (SqlMoniker hint : completionHints) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,153,String cname = hint.toString();
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,154,if (cname.startsWith(word)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,155,result.add(hint);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,160,for (SqlMoniker hint : completionHints) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,161,String cname = hint.toString();
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,163,&& cname.substring(0, word.length()).equalsIgnoreCase(word)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,164,result.add(hint);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,169,result = completionHints;
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,220,if (hintList.contains(star) && !isSelectListItem(sqlNode, pos)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,241,final SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,110,&& (sql.charAt(wordStart - 1) == '"')) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,128,&& (sql.charAt(wordEnd) == '"')) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,327,SqlSimpleParser simpleParser = new SqlSimpleParser(HINT_TOKEN);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,394,SqlSimpleParser parser = new SqlSimpleParser(HINT_TOKEN);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,423,SqlParser parser = SqlParser.create("");
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,437,SqlParser parser = SqlParser.create(sql);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,134,Tokenizer tokenizer = new Tokenizer(sql, hintToken);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,278,case '"':
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,281,start = pos;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,282,++pos;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,283,while (pos < sql.length()) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,284,c = sql.charAt(pos);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,285,++pos;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,286,if (c == '"') {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,287,if (pos < sql.length()) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,288,char c1 = sql.charAt(pos);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,289,if (c1 == '"') {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,292,++pos;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,294,break;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,297,break;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,301,match = sql.substring(start, pos);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,302,if (match.startsWith("\" " + hintToken + " ")) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,303,return new Token(TokenType.ID, hintToken);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,305,return new Token(TokenType.DQID, match);
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,51,SqlMatchRecognize matchRecognize;
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,216,public SqlMatchRecognize getMatchRecognize() {
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,217,return matchRecognize;
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,220,public void setMatchRecognize(SqlMatchRecognize matchRecognize) {
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,221,this.matchRecognize = matchRecognize;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5620,SqlNode expandedExpr = fqId;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5626,&& !DynamicRecordType.isDynamicStarColName(Util.last(id.names))) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5627,SqlNode[] inputs = new SqlNode[2];
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5628,inputs[0] = fqId;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5629,inputs[1] = SqlLiteral.createCharString(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5630,Util.last(id.names),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5631,id.getParserPosition());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5632,SqlBasicCall item_call = new SqlBasicCall(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5633,SqlStdOperatorTable.ITEM,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5634,inputs,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5635,id.getParserPosition());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5636,expandedExpr = item_call;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5808,expr = getScope().fullyQualify((SqlIdentifier) expr).identifier;
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeFilter.java,228,if (NUMERIC_TYPES.contains(typeName)) {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,46,import java.util.Locale;
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,458,assert map.comparator() == NameSet.COMPARATOR;
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,459,return map.subMap(s.toUpperCase(Locale.ROOT), true,
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,460,s.toLowerCase(Locale.ROOT), true);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,466,assert set.comparator() == NameSet.COMPARATOR;
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,467,return set.subSet(name.toUpperCase(Locale.ROOT), true,
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,468,name.toLowerCase(Locale.ROOT), true);
core/src/main/java/org/apache/calcite/util/NameMap.java,28,import static org.apache.calcite.util.NameSet.COMPARATOR;
core/src/main/java/org/apache/calcite/util/NameMap.java,62,if (map.containsKey(name)) {
core/src/main/java/org/apache/calcite/util/NameMap.java,63,return ImmutableSortedMap.of(name, map.get(name));
core/src/main/java/org/apache/calcite/util/NameMap.java,65,return ImmutableSortedMap.of();
core/src/main/java/org/apache/calcite/util/NameMultimap.java,21,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/util/NameMultimap.java,29,import java.util.TreeMap;
core/src/main/java/org/apache/calcite/util/NameMultimap.java,31,import static org.apache.calcite.util.NameSet.COMPARATOR;
core/src/main/java/org/apache/calcite/util/NameMultimap.java,38,private final NavigableMap<String, List<V>> map;
core/src/main/java/org/apache/calcite/util/NameMultimap.java,41,private NameMultimap(NavigableMap<String, List<V>> map) {
core/src/main/java/org/apache/calcite/util/NameMultimap.java,43,assert this.map.comparator() == COMPARATOR;
core/src/main/java/org/apache/calcite/util/NameMultimap.java,48,this(new TreeMap<String, List<V>>(COMPARATOR));
core/src/main/java/org/apache/calcite/util/NameMultimap.java,66,final List<V> list = map.get(key);
core/src/main/java/org/apache/calcite/util/NameMultimap.java,77,if (caseSensitive) {
core/src/main/java/org/apache/calcite/util/NameMultimap.java,78,final List<V> list = map.get(name);
core/src/main/java/org/apache/calcite/util/NameMultimap.java,79,if (list != null && !list.isEmpty()) {
core/src/main/java/org/apache/calcite/util/NameMultimap.java,80,final ImmutableList.Builder<Map.Entry<String, V>> builder =
core/src/main/java/org/apache/calcite/util/NameMultimap.java,81,ImmutableList.builder();
core/src/main/java/org/apache/calcite/util/NameMultimap.java,82,for (V v : list) {
core/src/main/java/org/apache/calcite/util/NameMultimap.java,83,builder.add(Pair.of(name, v));
core/src/main/java/org/apache/calcite/util/NameMultimap.java,85,return builder.build();
core/src/main/java/org/apache/calcite/util/NameMultimap.java,87,return ImmutableList.of();
core/src/main/java/org/apache/calcite/util/NameMultimap.java,107,return !range(name, caseSensitive).isEmpty();
core/src/main/java/org/apache/calcite/util/NameMultimap.java,113,return map;
core/src/main/java/org/apache/calcite/util/NameSet.java,19,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/util/NameSet.java,20,import com.google.common.collect.ImmutableSortedSet;
core/src/main/java/org/apache/calcite/util/NameSet.java,25,import java.util.Locale;
core/src/main/java/org/apache/calcite/util/NameSet.java,26,import java.util.NavigableSet;
core/src/main/java/org/apache/calcite/util/NameSet.java,28,import java.util.TreeSet;
core/src/main/java/org/apache/calcite/util/NameSet.java,37,public static final Comparator<String> COMPARATOR = (o1, o2) -> {
core/src/main/java/org/apache/calcite/util/NameSet.java,38,int c = o1.compareToIgnoreCase(o2);
core/src/main/java/org/apache/calcite/util/NameSet.java,39,if (c == 0) {
core/src/main/java/org/apache/calcite/util/NameSet.java,40,c = o1.compareTo(o2);
core/src/main/java/org/apache/calcite/util/NameSet.java,42,return c;
core/src/main/java/org/apache/calcite/util/NameSet.java,45,private final NavigableSet<String> names;
core/src/main/java/org/apache/calcite/util/NameSet.java,48,private NameSet(NavigableSet<String> names) {
core/src/main/java/org/apache/calcite/util/NameSet.java,50,assert names.comparator() == COMPARATOR;
core/src/main/java/org/apache/calcite/util/NameSet.java,55,this(new TreeSet<>(COMPARATOR));
core/src/main/java/org/apache/calcite/util/NameSet.java,60,return new NameSet(ImmutableSortedSet.copyOf(NameSet.COMPARATOR, names));
core/src/main/java/org/apache/calcite/util/NameSet.java,64,names.add(name);
core/src/main/java/org/apache/calcite/util/NameSet.java,71,if (caseSensitive) {
core/src/main/java/org/apache/calcite/util/NameSet.java,72,if (names.contains(name)) {
core/src/main/java/org/apache/calcite/util/NameSet.java,73,return ImmutableList.of(name);
core/src/main/java/org/apache/calcite/util/NameSet.java,75,return ImmutableList.of();
core/src/main/java/org/apache/calcite/util/NameSet.java,86,if (names.contains(name)) {
core/src/main/java/org/apache/calcite/util/NameSet.java,87,return true;
core/src/main/java/org/apache/calcite/util/NameSet.java,89,if (!caseSensitive) {
core/src/main/java/org/apache/calcite/util/NameSet.java,94,return false;
core/src/main/java/org/apache/calcite/util/NameSet.java,99,return Collections.unmodifiableSet(names);
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,114,System.out.println("======================");
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,115,System.out.println(source);
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,116,System.out.println("======================");
core/src/main/java/org/apache/calcite/runtime/Hook.java,111,public <T, R> Closeable add(final Consumer<T> handler) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,307,RelNode newInput = getNewForOldRel(oldInput1);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,314,newOrdinal += calculateFlattenedOffset(oldInputType, oldOrdinal);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,315,return newOrdinal;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,526,programBuilder.addCondition(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,527,new RexLocalRef(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,528,getNewForOldInput(conditionRef.getIndex()),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,529,conditionRef.getType()));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,579,int newOffset = getNewForOldInput(inputRef.getIndex());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,590,RelDataTypeField field = fieldList.get(j);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,592,Pair.of(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,593,new RexInputRef(newOffset + j, field.getType()),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,630,RexInputRef inputRef = (RexInputRef) oldOperands.get(0);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,631,int newOffset = getNewForOldInput(inputRef.getIndex());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,632,newExp = rexBuilder.makeCall(exp.getType(), ((RexCall) exp).getOperator(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,633,ImmutableList.of(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,634,rexBuilder.makeInputRef(inputRef.getType(), newOffset), oldOperands.get(1)));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,762,final int newIndex = getNewForOldInput(oldIndex);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,768,RelDataType fieldType = removeDistinct(input.getType());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,769,RexInputRef newInput = new RexInputRef(newIndex, fieldType);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,770,return newInput;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,784,RelDataType fieldType = removeDistinct(fieldAccess.getType());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,795,iInput += getNewForOldInput(inputRef.getIndex());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,796,return new RexInputRef(iInput, fieldType);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,98,import java.util.Iterator;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,994,final List<String> names = new ArrayList<>();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,995,final List<RexNode> exprList = new ArrayList<>();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,996,final Iterator<String> nameIterator = fieldNames.iterator();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,997,for (RexNode node : nodes) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,998,if (simplify) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,999,node = simplifier.simplifyPreservingType(node);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1001,exprList.add(node);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1002,String name = nameIterator.hasNext() ? nameIterator.next() : null;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1003,names.add(name != null ? name : inferAlias(exprList, node));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1005,final Frame frame = stack.peek();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1012,for (int i = 0; i < names.size(); ++i) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1013,RexNode node = exprList.get(i);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1014,String name = names.get(i);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1024,names.set(i, name);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1041,final RelDataType inputRowType = peek().getRowType();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1042,if (!force && RexUtil.isIdentity(exprList, inputRowType)) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1043,if (names.equals(inputRowType.getFieldNames())) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1054,projectFactory.createProject(frame.rel, ImmutableList.copyOf(exprList),
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1055,names);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1063,public RelBuilder project(RexNode... nodes) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1064,return project(ImmutableList.copyOf(nodes));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1149,project(fields(), newFieldNames, true);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1153,if (peek().getRowType().getFieldNames().equals(oldFieldNames)) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1154,final RelNode r = peek();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1155,if (r instanceof Project) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1156,stack.pop();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1157,push(((Project) r).getInput());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1160,return this;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1168,private String inferAlias(List<RexNode> exprList, RexNode expr) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1174,return inferAlias(exprList, ((RexCall) expr).getOperands().get(0));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1177,for (;;) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1178,final int i = exprList.indexOf(expr);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1179,if (i < 0) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1180,break;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1529,Lists.transform(pair.fields, field ->
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1531,.add(alias).build(), field.right));
core/src/main/java/org/apache/calcite/model/ModelHandler.java,80,final ObjectMapper mapper = new ObjectMapper();
core/src/main/java/org/apache/calcite/model/ModelHandler.java,81,mapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,82,mapper.configure(JsonParser.Feature.ALLOW_SINGLE_QUOTES, true);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,83,mapper.configure(JsonParser.Feature.ALLOW_COMMENTS, true);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,86,root = mapper.readValue(
core/src/main/java/org/apache/calcite/model/ModelHandler.java,87,uri.substring("inline:".length()), JsonRoot.class);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,444,if (!a.getType().isNullable()) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,445,return rexBuilder.makeLiteral(false);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,450,RexNode simplified = simplifyIsNotNull(a);
core/src/main/java/org/apache/calcite/util/Sources.java,52,URL url_ = new URL(url);
core/src/main/java/org/apache/calcite/util/Sources.java,53,return new FileSource(url_);
core/src/main/java/org/apache/calcite/util/Sources.java,79,if (url.getProtocol().equals("file")) {
core/src/main/java/org/apache/calcite/util/Sources.java,80,this.file = new File(url.getFile());
core/src/main/java/org/apache/calcite/util/Sources.java,82,this.file = null;
core/src/main/java/org/apache/calcite/util/Sources.java,114,return file != null ? file.getPath() : url.toExternalForm();
core/src/main/java/org/apache/calcite/util/Sources.java,152,String path;
core/src/main/java/org/apache/calcite/util/Sources.java,154,path = child.file().getPath();
core/src/main/java/org/apache/calcite/util/Sources.java,159,path = child.url().getPath();
core/src/main/java/org/apache/calcite/util/Sources.java,160,if (path.startsWith("/")) {
core/src/main/java/org/apache/calcite/util/Sources.java,161,return child;
core/src/main/java/org/apache/calcite/util/Sources.java,165,return Sources.url(url + "/" + path);
file/src/main/java/org/apache/calcite/adapter/file/FileReader.java,68,doc = Jsoup.connect(source.path()).get();
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,723,if (terms.containsAll(terms2)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,75,int windowCount = 0;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,178,final int w = implementor.windowCount++;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,180,Expressions.parameter(int.class, builder.newName("prevStart" + w));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,182,Expressions.parameter(int.class, builder.newName("prevEnd" + w));
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,124,if (variables.contains(declaration.parameter.name)) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,125,Expression x = append(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,126,newName(declaration.parameter.name, optimize),
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,127,declaration.initializer);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,136,add(statement);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,240,return (decl.modifiers & Modifier.FINAL) != 0;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,343,final SubstituteVariableVisitor visitor = new SubstituteVariableVisitor(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,496,private final Map<ParameterExpression, Expression> map;
core/src/main/java/org/apache/calcite/util/NameMap.java,23,import java.util.Locale;
core/src/main/java/org/apache/calcite/util/NameMap.java,68,return map.subMap(name.toUpperCase(Locale.ROOT), true,
core/src/main/java/org/apache/calcite/util/NameMap.java,69,name.toLowerCase(Locale.ROOT), true);
core/src/main/java/org/apache/calcite/util/NameMultimap.java,26,import java.util.Locale;
core/src/main/java/org/apache/calcite/util/NameMultimap.java,90,final ImmutableList.Builder<Map.Entry<String, V>> builder =
core/src/main/java/org/apache/calcite/util/NameMultimap.java,91,ImmutableList.builder();
core/src/main/java/org/apache/calcite/util/NameMultimap.java,92,NavigableMap<String, List<V>> m =
core/src/main/java/org/apache/calcite/util/NameMultimap.java,93,map.subMap(name.toUpperCase(Locale.ROOT), true,
core/src/main/java/org/apache/calcite/util/NameMultimap.java,94,name.toLowerCase(Locale.ROOT), true);
core/src/main/java/org/apache/calcite/util/NameMultimap.java,95,for (Map.Entry<String, List<V>> entry : m.entrySet()) {
core/src/main/java/org/apache/calcite/util/NameMultimap.java,96,for (V v : entry.getValue()) {
core/src/main/java/org/apache/calcite/util/NameMultimap.java,97,builder.add(Pair.of(entry.getKey(), v));
core/src/main/java/org/apache/calcite/util/NameMultimap.java,100,return builder.build();
core/src/main/java/org/apache/calcite/util/NameSet.java,78,return names.subSet(name.toUpperCase(Locale.ROOT), true,
core/src/main/java/org/apache/calcite/util/NameSet.java,79,name.toLowerCase(Locale.ROOT), true);
core/src/main/java/org/apache/calcite/util/NameSet.java,90,final String s = names.ceiling(name.toLowerCase(Locale.ROOT));
core/src/main/java/org/apache/calcite/util/NameSet.java,91,return s != null
core/src/main/java/org/apache/calcite/util/NameSet.java,92,&& s.equalsIgnoreCase(name);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,130,if (SqlKind.AVG_AGG_FUNCTIONS.contains(kind)) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,263,int argOrdinal) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,267,oldCall.filterArg >= 0);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,272,oldCall.filterArg,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,427,final int argRefOrdinal = lookupOrAdd(inputExprs, argRef);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,435,argSquared.getType(), oldAggRel, oldCall, argSquaredOrdinal);
core/src/main/java/org/apache/calcite/sql/SqlKind.java,1067,LAST_VALUE, COVAR_POP, COVAR_SAMP, REGR_SXX, REGR_SYY,
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,49,SqlValidator.STRICT
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,50,? OperandTypes.ANY
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,51,: OperandTypes.ONE_OR_MORE,
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,52,SqlFunctionCategory.NUMERIC, false, false);
core/src/main/java/org/apache/calcite/sql/fun/SqlCovarAggFunction.java,46,ReturnTypes.COVAR_FUNCTION,
core/src/main/java/org/apache/calcite/sql/fun/SqlCovarAggFunction.java,52,Preconditions.checkArgument(kind == SqlKind.COVAR_POP
core/src/main/java/org/apache/calcite/sql/fun/SqlCovarAggFunction.java,53,|| kind == SqlKind.COVAR_SAMP
core/src/main/java/org/apache/calcite/sql/fun/SqlCovarAggFunction.java,54,|| kind == SqlKind.REGR_SXX
core/src/main/java/org/apache/calcite/sql/fun/SqlCovarAggFunction.java,55,|| kind == SqlKind.REGR_SYY);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,769,public static final SqlReturnTypeInference COVAR_FUNCTION = opBinding -> {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,347,exprList.add(cx.convertExpression(whenList.get(i)));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,348,exprList.add(cx.convertExpression(thenList.get(i)));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,350,exprList.add(cx.convertExpression(call.getElseOperand()));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,352,RexBuilder rexBuilder = cx.getRexBuilder();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,480,RelDataType type = dataType.deriveType(typeFactory);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1109,if (!sumRex.getType().equals(avgType)) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1110,sumCast = SqlStdOperatorTable.CAST.createCall(pos,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1111,new SqlDataTypeSpec(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1112,new SqlIdentifier(avgType.getSqlTypeName().getName(), pos),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1113,avgType.getPrecision(), avgType.getScale(), null, null, pos));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1115,sumCast = sum;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1150,final RexNode argRex = cx.convertExpression(argInput);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1151,final SqlNode arg;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1152,if (!argRex.getType().equals(varType)) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1153,arg = SqlStdOperatorTable.CAST.createCall(pos,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1154,new SqlDataTypeSpec(new SqlIdentifier(varType.getSqlTypeName().getName(), pos),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1155,varType.getPrecision(), varType.getScale(), null, null, pos));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1157,arg = argInput;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1160,final SqlNode argSquared =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1161,SqlStdOperatorTable.MULTIPLY.createCall(pos, arg, arg);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1162,final SqlNode sumArgSquared =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1163,SqlStdOperatorTable.SUM.createCall(pos, argSquared);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1164,final SqlNode sum =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1165,SqlStdOperatorTable.SUM.createCall(pos, arg);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1167,SqlStdOperatorTable.MULTIPLY.createCall(pos, sum, sum);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1168,final SqlNode count =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1169,SqlStdOperatorTable.COUNT.createCall(pos, arg);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1171,SqlStdOperatorTable.DIVIDE.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1172,pos, sumSquared, count);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1174,SqlStdOperatorTable.MINUS.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1175,pos, sumArgSquared, avgSumSquared);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1178,denominator = count;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1180,final SqlNumericLiteral one =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1181,SqlLiteral.createExactNumeric("1", pos);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1182,denominator =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1183,SqlStdOperatorTable.MINUS.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1184,pos, count, one);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1187,SqlStdOperatorTable.DIVIDE.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1188,pos, diff, denominator);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1191,final SqlNumericLiteral half =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1192,SqlLiteral.createExactNumeric("0.5", pos);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1193,result =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1194,SqlStdOperatorTable.POWER.createCall(pos, div, half);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1182,SqlNode sqlNode1 = validator.validate(sqlNode);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1188,sqlToRelConverter.convertQuery(sqlNode1, true, false);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,265,final SqlNode validatedSqlNode = validator.validate(sqlNode);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,279,root = sqlToRelConverter.convertQuery(validatedSqlNode, true, false);
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,496,throw new AssertionError("invalid literal: " + node);
core/src/main/java/org/apache/calcite/sql/fun/SqlMonotonicBinaryOperator.java,76,switch (call.getOperandLiteralValue(1, BigDecimal.class).signum()) {
core/src/main/java/org/apache/calcite/sql/fun/SqlMonotonicBinaryOperator.java,103,switch (call.getOperandLiteralValue(0, BigDecimal.class).signum()) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,245,.equals(UPPER_HINT_TOKEN),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,805,for (RelDataTypeField field : rowType.getFieldList()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,806,hintList.add(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,807,new SqlMonikerImpl(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,808,field.getName(),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,809,SqlMonikerType.COLUMN));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,444,RexFieldAccess access = (RexFieldAccess) rex;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,445,final RexCorrelVariable variable =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,446,(RexCorrelVariable) access.getReferenceExpr();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,447,final Context aliasContext = correlTableMap.get(variable.id);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,448,return aliasContext.field(access.getField().getIndex());
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,144,private final RelBuilder relBuilder;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,149,private final ReflectUtil.MethodDispatcher<Frame> dispatcher =
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,150,ReflectUtil.createMethodDispatcher(Frame.class, this, "decorrelateRel",
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,154,private RelNode currentRel;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,156,private final Context context;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,161,private final Map<RelNode, Frame> map = new HashMap<>();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,268,.build();
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,29,import java.util.ArrayList;
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,72,final List<SqlNode> columnNames = Util.skip(operands, 2);
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,73,for (final SqlNode operand : columnNames) {
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,74,String name = ((SqlIdentifier) operand).getSimple();
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,75,if (nameList.contains(name)) {
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,76,throw validator.newValidationError(operand,
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,77,RESOURCE.aliasListDuplicate(name));
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,79,nameList.add(name);
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,81,if (nameList.size() != rowType.getFieldCount()) {
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,83,final SqlNode node = operands.size() == 3
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,85,: new SqlNodeList(columnNames, SqlParserPos.sum(columnNames));
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,86,throw validator.newValidationError(node,
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,87,RESOURCE.aliasListDegree(rowType.getFieldCount(), getString(rowType),
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,88,nameList.size()));
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,91,for (RelDataTypeField field : rowType.getFieldList()) {
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,92,typeList.add(field.getType());
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,95,typeList,
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,96,nameList);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2037,final boolean needAlias = call.operandCount() > 2;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,619,currentRel = parent;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,826,boolean alreadySorted = collation.getFieldCollations().isEmpty();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,827,for (RelCollation inputCollation : mq.collations(input)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,829,alreadySorted = true;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,830,break;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,834,boolean alreadySmaller = true;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,836,if (rowCount != null && fetch != null) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,837,final int offsetVal = offset == null ? 0 : RexLiteral.intValue(offset);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,838,final int limit = RexLiteral.intValue(fetch);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,839,if ((double) offsetVal + (double) limit < rowCount) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,840,alreadySmaller = false;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,843,return alreadySorted && alreadySmaller;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,364,static DruidJsonFilter toDruidFilters(final RexNode rexNode, RelDataType rowType,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,365,DruidQuery druidQuery) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,375,return toDruidFilters(Iterables.getOnlyElement(((RexCall) rexNode).getOperands()), rowType,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,376,druidQuery);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,379,final DruidJsonFilter simpleFilter = toDruidFilters(Iterables
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,380,.getOnlyElement(((RexCall) rexNode).getOperands()), rowType, druidQuery);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,389,final DruidJsonFilter druidFilter = toDruidFilters(e, rowType, druidQuery);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,483,final DruidJsonFilter druidJsonFilter = DruidJsonFilter
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,484,.toDruidFilters(filter.getCondition(), filter.getInput().getRowType(), this);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,728,private static DruidJsonFilter computeFilter(@Nullable Filter filterRel,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,729,DruidQuery druidQuery) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,736,return DruidJsonFilter.toDruidFilters(filter, inputRowType, druidQuery);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,980,final DruidJsonFilter jsonFilter = computeFilter(filter, this);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1035,havingJsonFilter = DruidJsonFilter
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1036,.toDruidFilters(havingFilter.getCondition(), havingFilter.getInput().getRowType(), this);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1455,DruidJsonFilter druidFilter = DruidJsonFilter
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1456,.toDruidFilters(filterNode, druidQuery.table.getRowType(), druidQuery);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,163,DruidJsonFilter druidJsonFilter = DruidJsonFilter
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,164,.toDruidFilters(e, filter.getInput().getRowType(), query);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,262,final DruidJsonFilter druidJsonFilter = DruidJsonFilter
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,263,.toDruidFilters(cond, query.getTopNode().getRowType(), query);
core/src/main/java/org/apache/calcite/sql/type/CompositeOperandTypeChecker.java,214,min = Math.min(min, range.getMax());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1944,case MATCH_RECOGNIZE:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1945,convertMatchRecognize(bb, (SqlCall) from);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1946,return;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2110,protected void convertMatchRecognize(Blackboard bb, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2111,final SqlMatchRecognize matchRecognize = (SqlMatchRecognize) call;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4812,this.bb = bb;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4813,this.aggregatingSelectScope =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4814,(AggregatingSelectScope) bb.getValidator().getSelectScope(select);
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,26,import java.net.URLConnection;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,30,import javax.net.ssl.HttpsURLConnection;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,40,URLConnection conn = new URL(url).openConnection();
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,41,final HttpURLConnection httpConn = (HttpURLConnection) conn;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,46,if (httpConn instanceof HttpsURLConnection) {
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,47,HttpsURLConnection httpsConn = (HttpsURLConnection) httpConn;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,48,httpsConn.setSSLSocketFactory(
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,49,TrustAllSslSocketFactory.createSSLSocketFactory());
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,50,httpsConn.setHostnameVerifier((arg0, arg1) -> true);
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,53,return httpConn;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2007,final SqlJoin join = (SqlJoin) from;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2008,final SqlValidatorScope scope = validator.getJoinScope(from);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2009,final Blackboard fromBlackboard = createBlackboard(scope, null, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2010,SqlNode left = join.getLeft();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2011,SqlNode right = join.getRight();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2012,final boolean isNatural = join.isNatural();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2013,final JoinType joinType = join.getJoinType();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2014,final SqlValidatorScope leftScope =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2015,Util.first(validator.getJoinScope(left),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2016,((DelegatingScope) bb.scope).getParent());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2017,final Blackboard leftBlackboard =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2018,createBlackboard(leftScope, null, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2019,final SqlValidatorScope rightScope =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2020,Util.first(validator.getJoinScope(right),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2021,((DelegatingScope) bb.scope).getParent());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2022,final Blackboard rightBlackboard =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2023,createBlackboard(rightScope, null, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2024,convertFrom(leftBlackboard, left);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2025,RelNode leftRel = leftBlackboard.root;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2026,convertFrom(rightBlackboard, right);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2027,RelNode rightRel = rightBlackboard.root;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2028,JoinRelType convertedJoinType = convertJoinType(joinType);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2029,RexNode conditionExp;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2030,final SqlValidatorNamespace leftNamespace = validator.getNamespace(left);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2031,final SqlValidatorNamespace rightNamespace = validator.getNamespace(right);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2032,if (isNatural) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2033,final RelDataType leftRowType = leftNamespace.getRowType();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2034,final RelDataType rightRowType = rightNamespace.getRowType();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2035,final List<String> columnList =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2036,SqlValidatorUtil.deriveNaturalJoinColumnList(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2037,catalogReader.nameMatcher(), leftRowType, rightRowType);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2038,conditionExp = convertUsing(leftNamespace, rightNamespace, columnList);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2040,conditionExp =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2041,convertJoinCondition(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2042,fromBlackboard,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2043,leftNamespace,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2044,rightNamespace,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2045,join.getCondition(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2046,join.getConditionType(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2047,leftRel,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2048,rightRel);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2051,final RelNode joinRel =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2052,createJoin(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2053,fromBlackboard,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2054,leftRel,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2055,rightRel,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2056,conditionExp,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2057,convertedJoinType);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2058,bb.setRoot(joinRel, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2579,private RexNode convertJoinCondition(Blackboard bb,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2581,SqlValidatorNamespace rightNamespace,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2582,SqlNode condition,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2583,JoinConditionType conditionType,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2586,if (condition == null) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2587,return rexBuilder.makeLiteral(true);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2591,switch (conditionType) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2592,case ON:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2593,bb.setRoot(ImmutableList.of(leftRel, rightRel));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2594,return bb.convertExpression(condition);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2595,case USING:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2596,final SqlNodeList list = (SqlNodeList) condition;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2597,final List<String> nameList = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2598,for (SqlNode columnName : list) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2599,final SqlIdentifier id = (SqlIdentifier) columnName;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2600,String name = id.getSimple();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2601,nameList.add(name);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2603,return convertUsing(leftNamespace, rightNamespace, nameList);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2604,default:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2605,throw Util.unexpected(conditionType);
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,33,import io.airlift.tpch.TpchColumn;
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,34,import io.airlift.tpch.TpchEntity;
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,35,import io.airlift.tpch.TpchTable;
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,123,return tpchColumn.getLong(current);
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,162,return column.getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,91,RelTraitSet traitSet = cluster.traitSet();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,834,final int ref = lookupGroupExpr(groupAnalyzer, groupExpr);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnOrigins.java,65,return mq.getColumnOrigins(rel.getInput(), iOutputColumn);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,757,public SqlImplementor implementor() {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,929,public SqlNode field(int ordinal) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,47,import org.apache.calcite.sql.SqlBinaryOperator;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,196,SqlNode sqlCondition = null;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,198,SqlNode x = convertConditionToSqlNode(operand, leftContext,
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,200,if (sqlCondition == null) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,201,sqlCondition = x;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,203,sqlCondition = op.createCall(POS, sqlCondition, x);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,206,return sqlCondition;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,561,switch (operand.getKind()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,562,case IN:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,563,return SqlStdOperatorTable.NOT_IN
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,564,.createCall(POS, ((SqlCall) node).getOperandList());
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,565,case LIKE:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,566,return SqlStdOperatorTable.NOT_LIKE
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,567,.createCall(POS, ((SqlCall) node).getOperandList());
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,568,case SIMILAR:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,569,return SqlStdOperatorTable.NOT_SIMILAR_TO
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,570,.createCall(POS, ((SqlCall) node).getOperandList());
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,571,default:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,596,if (op instanceof SqlBinaryOperator && nodeList.size() > 2) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,601,return op.createCall(new SqlNodeList(nodeList, POS));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,691,private SqlNode createLeftCall(SqlOperator op, List<SqlNode> nodeList) {
core/src/main/java/org/apache/calcite/config/Lex.java,30,ORACLE(Quoting.DOUBLE_QUOTE, Casing.TO_UPPER, Casing.UNCHANGED, true),
core/src/main/java/org/apache/calcite/config/Lex.java,37,MYSQL(Quoting.BACK_TICK, Casing.UNCHANGED, Casing.UNCHANGED, false),
core/src/main/java/org/apache/calcite/config/Lex.java,45,MYSQL_ANSI(Quoting.DOUBLE_QUOTE, Casing.UNCHANGED, Casing.UNCHANGED, false),
core/src/main/java/org/apache/calcite/config/Lex.java,51,SQL_SERVER(Quoting.BRACKET, Casing.UNCHANGED, Casing.UNCHANGED, false),
core/src/main/java/org/apache/calcite/config/Lex.java,58,JAVA(Quoting.BACK_TICK, Casing.UNCHANGED, Casing.UNCHANGED, true);
core/src/main/java/org/apache/calcite/config/Lex.java,68,boolean caseSensitive) {
core/src/main/java/org/apache/calcite/config/Lex.java,69,this.quoting = quoting;
core/src/main/java/org/apache/calcite/config/Lex.java,70,this.unquotedCasing = unquotedCasing;
core/src/main/java/org/apache/calcite/config/Lex.java,71,this.quotedCasing = quotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlAbstractParserImpl.java,501,public abstract void switchTo(String stateName);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,250,SqlParser.ConfigBuilder configBuilder = SqlParser.configBuilder();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,251,configBuilder.setUnquotedCasing(Casing.UNCHANGED);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,255,parsedQuery = (SqlSelect) SqlParser.create(query, configBuilder.build()).parseQuery();
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,469,return SqlParser.create(sql, parserConfig.build());
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,738,.setCaseSensitive(config.caseSensitive());
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,742,parserConfig.setParserFactory(parserFactory);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,30,import java.util.Objects;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,83,return create(s, configBuilder().build());
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,196,Config DEFAULT = configBuilder().build();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,211,private Casing quotedCasing = Lex.ORACLE.quotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,212,private Casing unquotedCasing = Lex.ORACLE.unquotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,213,private Quoting quoting = Lex.ORACLE.quoting;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,214,private int identifierMaxLength = DEFAULT_IDENTIFIER_MAX_LENGTH;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,215,private boolean caseSensitive = Lex.ORACLE.caseSensitive;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,216,private SqlConformance conformance = SqlConformanceEnum.DEFAULT;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,217,private SqlParserImplFactory parserFactory = SqlParserImpl.FACTORY;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,223,this.quotedCasing = config.quotedCasing();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,224,this.unquotedCasing = config.unquotedCasing();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,225,this.quoting = config.quoting();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,226,this.identifierMaxLength = config.identifierMaxLength();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,227,this.conformance = config.conformance();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,228,this.parserFactory = config.parserFactory();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,233,this.quotedCasing = Objects.requireNonNull(quotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,234,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,238,this.unquotedCasing = Objects.requireNonNull(unquotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,239,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,243,this.quoting = Objects.requireNonNull(quoting);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,244,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,248,this.caseSensitive = caseSensitive;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,249,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,253,this.identifierMaxLength = identifierMaxLength;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,254,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,260,if (allowBangEqual != conformance.isBangEqualAllowed()) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,261,setConformance(
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,262,new SqlDelegatingConformance(conformance) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,272,this.conformance = conformance;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,273,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,277,this.parserFactory = Objects.requireNonNull(factory);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,278,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,282,setCaseSensitive(lex.caseSensitive);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,283,setUnquotedCasing(lex.unquotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,284,setQuotedCasing(lex.quotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,285,setQuoting(lex.quoting);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,286,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,292,return new ConfigImpl(identifierMaxLength, quotedCasing, unquotedCasing,
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,293,quoting, caseSensitive, conformance, parserFactory);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,301,private static class ConfigImpl implements Config {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,302,private final int identifierMaxLength;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,303,private final boolean caseSensitive;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,304,private final SqlConformance conformance;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,305,private final Casing quotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,306,private final Casing unquotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,307,private final Quoting quoting;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,308,private final SqlParserImplFactory parserFactory;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,310,private ConfigImpl(int identifierMaxLength, Casing quotedCasing,
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,311,Casing unquotedCasing, Quoting quoting, boolean caseSensitive,
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,312,SqlConformance conformance, SqlParserImplFactory parserFactory) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,313,this.identifierMaxLength = identifierMaxLength;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,314,this.caseSensitive = caseSensitive;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,315,this.conformance = Objects.requireNonNull(conformance);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,316,this.quotedCasing = Objects.requireNonNull(quotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,317,this.unquotedCasing = Objects.requireNonNull(unquotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,318,this.quoting = Objects.requireNonNull(quoting);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,319,this.parserFactory = Objects.requireNonNull(parserFactory);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,322,public int identifierMaxLength() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,323,return identifierMaxLength;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,326,public Casing quotedCasing() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,327,return quotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,330,public Casing unquotedCasing() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,331,return unquotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,334,public Quoting quoting() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,335,return quoting;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,338,public boolean caseSensitive() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,339,return caseSensitive;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,342,public SqlConformance conformance() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,343,return conformance;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,346,public boolean allowBangEqual() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,347,return conformance.isBangEqualAllowed();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,350,public SqlParserImplFactory parserFactory() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,351,return parserFactory;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1271,for (int i = 0; i < groupCount; i++) {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1279,projects.add(groupCount + i);
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,247,public final ImmutableList<ImmutableBitSet> groupSets;
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,256,this.groupSets = ImmutableList.copyOf(groupSets);
core/src/main/java/org/apache/calcite/tools/PigRelBuilder.java,127,ImmutableList.copyOf((Iterable) groupKeys);
core/src/main/java/org/apache/calcite/tools/PigRelBuilder.java,131,final int groupCount = groupKeyList.get(0).nodes.size();
core/src/main/java/org/apache/calcite/tools/PigRelBuilder.java,138,for (Ord<GroupKeyImpl> groupKey : Ord.reverse(groupKeyList)) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1225,if (unique != null && unique) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1231,if (maxRowCount != null && maxRowCount <= 1D) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1239,final SortedSet<ImmutableBitSet> groupSetSet =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1240,new TreeSet<>(ImmutableBitSet.ORDERING);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1248,groupSetSet.add(groupSet2);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1250,groupSets = ImmutableList.copyOf(groupSetSet);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1261,if (aggCall instanceof AggCallImpl) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1262,final AggCallImpl aggCall1 = (AggCallImpl) aggCall;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1263,registrar.registerExpressions(aggCall1.operands);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1264,if (aggCall1.filter != null) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1265,registrar.registerExpression(aggCall1.filter);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1275,final AggregateCall aggregateCall;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1276,if (aggCall instanceof AggCallImpl) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1277,final AggCallImpl aggCall1 = (AggCallImpl) aggCall;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1278,final List<Integer> args =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1279,registrar.registerExpressions(aggCall1.operands);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1280,final int filterArg = aggCall1.filter == null ? -1
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1281,: registrar.registerExpression(aggCall1.filter);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1282,if (aggCall1.distinct && !aggCall1.aggFunction.isQuantifierAllowed()) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1283,throw new IllegalArgumentException("DISTINCT not allowed");
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1285,if (aggCall1.filter != null && !aggCall1.aggFunction.allowsFilter()) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1286,throw new IllegalArgumentException("FILTER not allowed");
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1288,aggregateCall =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1289,AggregateCall.create(aggCall1.aggFunction, aggCall1.distinct,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1293,aggregateCall = ((AggCallImpl2) aggCall).aggregateCall;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1295,aggregateCalls.add(aggregateCall);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2003,private static class AggCallImpl2 implements AggCall {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,345,isNullOpperands.addAll(keyIsNulls);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1308,boolean allowCast) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1323,return makeCharLiteral(padRight((NlsString) value, type.getPrecision()));
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,48,import java.util.AbstractList;
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,444,Comparable value,
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,446,SqlTypeName typeName,
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,533,assert value == null;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,415,if (simplified != null) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,416,return simplified;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,418,return call;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1090,terms.set(i, term);
core/src/main/java/org/apache/calcite/sql/fun/SqlInOperator.java,63,assert kind == SqlKind.IN || kind == SqlKind.NOT_IN;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,123,GEOMETRY(PrecScale.NO_NO, true, ExtraSqlTypes.GEOMETRY, SqlTypeFamily.GEO);
core/src/main/java/org/apache/calcite/util/Util.java,1972,if (size < 15) {
core/src/main/java/org/apache/calcite/util/Util.java,2002,if (isDistinct(list)) {
core/src/main/java/org/apache/calcite/util/Util.java,2355,return Collector.of(ImmutableList::builder, ImmutableList.Builder::add,
core/src/main/java/org/apache/calcite/util/Util.java,2356,(t, u) -> {
core/src/main/java/org/apache/calcite/util/Util.java,2357,t.addAll(u.build());
core/src/main/java/org/apache/calcite/util/Util.java,2358,return t;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,119,case BETWEEN:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,120,case IN:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,228,ImmutableList.Builder<Range<Long>> ranges =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,229,ImmutableList.builder();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,257,if (e.getKind() != SqlKind.IN && e.getKind() != SqlKind.NOT_IN) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,345,case IN:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,346,case NOT_IN:
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeFilter.java,110,List<RexNode> disjunctions = RelOptUtil.disjunctions(condition);
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoFilter.java,71,new Translator(MongoRules.mongoFieldNames(getRowType()));
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoFilter.java,85,Translator(List<String> fieldNames) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoFilter.java,97,for (RexNode node : RelOptUtil.disjunctions(condition)) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverter.java,82,final MongoRel.Implementor mongoImplementor = new MongoRel.Implementor();
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,184,RelDataTypeFamily castFrom = call.getOperandType(0).getFamily();
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,185,RelDataTypeFamily castTo = call.getOperandType(1).getFamily();
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,186,if (castFrom instanceof SqlTypeFamily
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,187,&& castTo instanceof SqlTypeFamily
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,188,&& nonMonotonicCasts.containsEntry(castFrom, castTo)) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,357,continue;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3865,inferUnknownTypes(unknownType, groupScope, groupList);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,28,import org.apache.calcite.rel.type.RelDataTypeSystem;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,30,import org.apache.calcite.schema.Function;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,31,import org.apache.calcite.schema.FunctionParameter;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,44,import org.apache.calcite.sql.type.FamilyOperandTypeChecker;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,49,import org.apache.calcite.sql.type.SqlTypeFactoryImpl;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,67,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,139,private Collection<Function> getFunctionsFrom(List<String> names) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,140,final List<Function> functions2 = new ArrayList<>();
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,253,final Predicate<Function> predicate;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,284,final SqlTypeFactoryImpl typeFactory =
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,285,new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,289,for (Function function : schema.getFunctions(name, true)) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,291,table.add(
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,292,toOp(typeFactory, id, function));
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,298,private SqlOperator toOp(SqlIdentifier name, final Function function) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,299,return toOp(typeFactory, name, function);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,307,private static SqlOperator toOp(RelDataTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,308,SqlIdentifier name, final Function function) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,309,List<RelDataType> argTypes = new ArrayList<>();
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,310,List<SqlTypeFamily> typeFamilies = new ArrayList<>();
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,311,for (FunctionParameter o : function.getParameters()) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,312,final RelDataType type = o.getType(typeFactory);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,313,argTypes.add(type);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,314,typeFamilies.add(
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,315,Util.first(type.getSqlTypeName().getFamily(), SqlTypeFamily.ANY));
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,317,final FamilyOperandTypeChecker typeChecker =
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,318,OperandTypes.family(typeFamilies, i ->
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,319,function.getParameters().get(i).isOptional());
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,320,final List<RelDataType> paramTypes = toSql(typeFactory, argTypes);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,322,return new SqlUserDefinedFunction(name, infer((ScalarFunction) function),
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,323,InferTypes.explicit(argTypes), typeChecker, paramTypes, function);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,325,return new SqlUserDefinedAggFunction(name,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,326,infer((AggregateFunction) function), InferTypes.explicit(argTypes),
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,329,return new SqlUserDefinedTableMacro(name, ReturnTypes.CURSOR,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,330,InferTypes.explicit(argTypes), typeChecker, paramTypes,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,331,(TableMacro) function);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,333,return new SqlUserDefinedTableFunction(name, ReturnTypes.CURSOR,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,334,InferTypes.explicit(argTypes), typeChecker, paramTypes,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,335,(TableFunction) function);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,364,private static List<RelDataType> toSql(
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,365,final RelDataTypeFactory typeFactory, List<RelDataType> types) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,366,return Lists.transform(types, type -> toSql(typeFactory, type));
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,381,return null;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,392,public void registerRules(RelOptPlanner planner) throws Exception {
core/src/main/java/org/apache/calcite/sql/SqlAggFunction.java,83,operandTypeChecker, null, funcType);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,122,if (hasAssignment() && !(call.getOperator() instanceof SqlUnresolvedFunction)) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,126,if (call.getOperator() instanceof SqlFunction) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,127,final List<RelDataType> paramTypes =
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,128,((SqlFunction) call.getOperator()).getParamTypes();
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,129,if (paramTypes != null && operandList.size() < paramTypes.size()) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,130,final List<SqlNode> list = Lists.newArrayList(operandList);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,131,while (list.size() < paramTypes.size()) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,132,list.add(DEFAULT_CALL);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,134,return list;
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,137,return operandList;
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,155,final SqlFunction operator = (SqlFunction) call.getOperator();
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,28,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,48,private final List<RelDataType> paramTypes;
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,72,operandTypeChecker, null, category);
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,112,List<RelDataType> paramTypes,
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,119,this.paramTypes =
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,120,paramTypes == null ? null : ImmutableList.copyOf(paramTypes);
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,147,return paramTypes;
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,156,return Functions.generate(paramTypes.size(), i -> "arg" + i);
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,505,SqlUtil.lookupRoutine(validator.getOperatorTable(), getNameAsId(),
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,405,SqlOperatorTable opTab,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,406,SqlIdentifier funcName,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,407,List<RelDataType> argTypes,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,408,List<String> argNames,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,409,SqlSyntax sqlSyntax,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,410,SqlKind sqlKind,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,503,SqlSyntax syntax,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,504,final Iterator<SqlOperator> routines,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,516,if (paramTypes == null) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,579,final List<RelDataType> paramTypes = function.getParamTypes();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,580,if (paramTypes == null) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,593,private static RelDataType bestMatch(List<SqlFunction> sqlFunctions, int i,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,597,List<RelDataType> paramTypes = function.getParamTypes();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,598,if (paramTypes == null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,19,import org.apache.calcite.jdbc.JavaTypeFactoryImpl;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,20,import org.apache.calcite.linq4j.function.Experimental;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,21,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,23,import org.apache.calcite.rel.type.RelDataTypeFactoryImpl;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,25,import org.apache.calcite.schema.FunctionParameter;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,33,import org.apache.calcite.sql.type.SqlTypeName;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,36,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,38,import java.util.ArrayList;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,39,import java.util.List;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,53,public final RelDataTypeFactory typeFactory;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,61,super(Util.last(opName.names), opName, SqlKind.OTHER_FUNCTION,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,62,returnTypeInference, operandTypeInference, operandTypeChecker,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,65,this.typeFactory = typeFactory;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,69,List<RelDataType> argTypes = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,70,for (FunctionParameter o : function.getParameters()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,71,final RelDataType type = o.getType(typeFactory);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,72,argTypes.add(type);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,74,return toSql(argTypes);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,77,private List<RelDataType> toSql(List<RelDataType> types) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,78,return Lists.transform(types, this::toSql);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,81,private RelDataType toSql(RelDataType type) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,82,if (type instanceof RelDataTypeFactoryImpl.JavaType
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,84,== Object.class) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,85,return typeFactory.createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,86,typeFactory.createSqlType(SqlTypeName.ANY), true);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,88,return JavaTypeFactoryImpl.toSql(typeFactory, type);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,92,public List<RelDataType> getParameterTypes(
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,93,final RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,94,return Lists.transform(function.getParameters(),
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,95,parameter -> parameter.getType(typeFactory));
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,99,public RelDataType getReturnType(RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,100,return function.getReturnType(typeFactory);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,51,this(opName, returnTypeInference, operandTypeInference, operandTypeChecker,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,52,paramTypes, function, SqlFunctionCategory.USER_DEFINED_FUNCTION);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,56,protected SqlUserDefinedFunction(SqlIdentifier opName,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,59,SqlOperandTypeChecker operandTypeChecker,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,60,List<RelDataType> paramTypes,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,63,super(Util.last(opName.names), opName, SqlKind.OTHER_FUNCTION,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,64,returnTypeInference, operandTypeInference, operandTypeChecker,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,65,paramTypes, category);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,43,List<RelDataType> paramTypes,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,45,super(opName, returnTypeInference, operandTypeInference, operandTypeChecker,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,46,paramTypes, function, SqlFunctionCategory.USER_DEFINED_TABLE_FUNCTION);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,53,import java.util.Objects;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,69,super(Util.last(opName.names), opName, SqlKind.OTHER_FUNCTION,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,70,returnTypeInference, operandTypeInference, operandTypeChecker,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,71,Objects.requireNonNull(paramTypes),
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,156,return Lists.transform(operator.getParamNames(), paramName -> {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,157,for (SqlNode operand2 : call.getOperandList()) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,158,final SqlCall call2 = (SqlCall) operand2;
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,159,assert operand2.getKind() == SqlKind.ARGUMENT_ASSIGNMENT;
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,160,final SqlIdentifier id = call2.operand(1);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,161,if (id.getSimple().equals(paramName)) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,162,return call2.operand(0);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,165,return DEFAULT_CALL;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3175,String clause) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3355,SqlNode current, SqlValidatorScope scope, String optionalClause) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3380,SqlNode current, SqlValidatorScope scope) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3423,SqlCall aggCall, SqlNode parent) {
core/src/main/java/org/apache/calcite/rex/RexFieldAccess.java,63,assert expr.getType().getFieldList().get(field.getIndex()) == field;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,275,public static SqlOperatorTable operatorTable(String className) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,279,ModelHandler.addFunctions(schema.plus(), null, ImmutableList.of(),
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,280,className, "*", true);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,138,for (Map.Entry<String, ScalarFunction> entry
core/src/main/java/org/apache/calcite/model/ModelHandler.java,139,: ScalarFunctionImpl.createAll(clazz).entries()) {
core/src/main/java/org/apache/calcite/sql/SqlAsOperator.java,54,OperandTypes.ANY_ANY);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,215,try {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,216,final SqlNode node = call.operand(ordinal);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,217,return SqlLiteral.unchain(node).getValueAs(clazz);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,224,return SqlUtil.isNullLiteral(call.operand(ordinal), allowCast);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,228,return SqlUtil.isLiteral(call.operand(ordinal), allowCast);
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,241,public SqlKind getKind() {
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,259,public <T> T getValueAs(Class<T> clazz) {
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,434,if (node instanceof SqlIntervalQualifier) {
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,435,SqlIntervalQualifier qualifier = (SqlIntervalQualifier) node;
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,436,return qualifier.timeUnitRange;
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,486,if (node instanceof SqlLiteral) {
core/src/main/java/org/apache/calcite/sql/SqlOverOperator.java,55,OperandTypes.ANY_ANY);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,211,if (allowCast) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,212,if (node.getKind() == SqlKind.CAST) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,213,SqlCall call = (SqlCall) node;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,214,if (isLiteral(call.operand(0), false)) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,216,return true;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,220,return false;
core/src/main/java/org/apache/calcite/sql/fun/SqlArgumentAssignmentOperator.java,40,InferTypes.RETURN_TYPE, OperandTypes.ANY_ANY);
core/src/main/java/org/apache/calcite/sql/fun/SqlCollectionTableOperator.java,40,OperandTypes.ANY);
core/src/main/java/org/apache/calcite/sql/type/FamilyOperandTypeChecker.java,66,SqlTypeFamily family = families.get(iFormalOperand);
core/src/main/java/org/apache/calcite/sql/type/FamilyOperandTypeChecker.java,67,if (family == SqlTypeFamily.ANY) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeFamily.java,70,GEO;
core/src/main/java/org/apache/calcite/sql/validate/AggVisitor.java,85,opTab.lookupOperatorOverloads(sqlFunction.getSqlIdentifier(),
core/src/main/java/org/apache/calcite/sql/validate/AggVisitor.java,87,for (SqlOperator operator2 : list) {
core/src/main/java/org/apache/calcite/sql/validate/AggVisitor.java,88,if (operator2.isAggregator() && !operator2.requiresOver()) {
core/src/main/java/org/apache/calcite/sql/validate/AggVisitor.java,91,if (aggregate) {
core/src/main/java/org/apache/calcite/sql/validate/AggVisitor.java,92,found(call);
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,57,if (operator instanceof SqlUserDefinedTableFunction) {
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,58,assert type.getSqlTypeName() == SqlTypeName.CURSOR
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,59,: "User-defined table function should have CURSOR type, not " + type;
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,60,final SqlUserDefinedTableFunction udf =
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,61,(SqlUserDefinedTableFunction) operator;
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,62,return udf.getRowType(validator.typeFactory, callBinding.operands());
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,64,assert type.getSqlTypeName() == SqlTypeName.CURSOR
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,65,: "User-defined table macro should have CURSOR type, not " + type;
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,66,final SqlUserDefinedTableMacro udf =
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,67,(SqlUserDefinedTableMacro) operator;
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,69,.getRowType(validator.typeFactory);
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,71,return type;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,20,import org.apache.calcite.rel.type.RelDataTypeFactory;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,24,import org.apache.calcite.sql.SqlNode;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,38,public class SqlUserDefinedTableFunction extends SqlUserDefinedFunction {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,67,public RelDataType getRowType(RelDataTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,68,List<SqlNode> operandList) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,70,SqlUserDefinedTableMacro.convertArguments(typeFactory, operandList,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,71,function, getNameAsId(), false);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,72,return getFunction().getRowType(typeFactory, arguments);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,84,public Type getElementType(RelDataTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,85,List<SqlNode> operandList) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,87,SqlUserDefinedTableMacro.convertArguments(typeFactory, operandList,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,88,function, getNameAsId(), false);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,20,import org.apache.calcite.linq4j.tree.BlockBuilder;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,21,import org.apache.calcite.linq4j.tree.Expression;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,22,import org.apache.calcite.linq4j.tree.Expressions;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,23,import org.apache.calcite.linq4j.tree.FunctionExpression;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,26,import org.apache.calcite.rel.type.RelDataTypeFactoryImpl;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,31,import org.apache.calcite.sql.SqlCall;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,36,import org.apache.calcite.sql.SqlLiteral;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,37,import org.apache.calcite.sql.SqlNode;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,38,import org.apache.calcite.sql.SqlUtil;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,42,import org.apache.calcite.util.ImmutableNullableList;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,43,import org.apache.calcite.util.NlsString;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,44,import org.apache.calcite.util.Pair;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,47,import com.google.common.collect.ImmutableMap;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,51,import java.util.Collections;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,61,public class SqlUserDefinedTableMacro extends SqlFunction {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,82,public TranslatableTable getTable(RelDataTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,83,List<SqlNode> operandList) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,84,List<Object> arguments = convertArguments(typeFactory, operandList,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,85,tableMacro, getNameAsId(), true);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,100,public static List<Object> convertArguments(RelDataTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,101,List<SqlNode> operandList, Function function,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,102,SqlIdentifier opName,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,103,boolean failOnNonLiteral) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,104,List<Object> arguments = new ArrayList<>(operandList.size());
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,106,for (Pair<FunctionParameter, SqlNode> pair
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,107,: Pair.zip(function.getParameters(), operandList)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,108,try {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,109,final Object o = getValue(pair.right);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,110,final Object o2 = coerce(o, pair.left.getType(typeFactory));
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,111,arguments.add(o2);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,117,+ ") is not literal: " + pair.right);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,119,final RelDataType type = pair.left.getType(typeFactory);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,120,final Object value;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,126,arguments.add(value);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,132,private static Object getValue(SqlNode right) throws NonLiteralException {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,133,switch (right.getKind()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,134,case ARRAY_VALUE_CONSTRUCTOR:
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,135,final List<Object> list = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,136,for (SqlNode o : ((SqlCall) right).getOperandList()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,137,list.add(getValue(o));
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,139,return ImmutableNullableList.copyOf(list);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,140,case MAP_VALUE_CONSTRUCTOR:
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,141,final ImmutableMap.Builder<Object, Object> builder2 =
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,142,ImmutableMap.builder();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,143,final List<SqlNode> operands = ((SqlCall) right).getOperandList();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,144,for (int i = 0; i < operands.size(); i += 2) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,145,final SqlNode key = operands.get(i);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,146,final SqlNode value = operands.get(i + 1);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,147,builder2.put(getValue(key), getValue(value));
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,149,return builder2.build();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,150,default:
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,151,if (SqlUtil.isNullLiteral(right, true)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,152,return null;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,154,if (SqlUtil.isLiteral(right)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,155,return ((SqlLiteral) right).getValue();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,157,if (right.getKind() == SqlKind.DEFAULT) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,158,return null; // currently NULL is the only default value
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,160,throw new NonLiteralException();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,164,private static Object coerce(Object o, RelDataType type) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,165,if (o == null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,166,return null;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,168,if (!(type instanceof RelDataTypeFactoryImpl.JavaType)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,169,return null;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,171,final RelDataTypeFactoryImpl.JavaType javaType =
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,172,(RelDataTypeFactoryImpl.JavaType) type;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,173,final Class clazz = javaType.getJavaClass();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,175,if (clazz.isAssignableFrom(o.getClass())) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,176,return o;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,185,BlockBuilder bb = new BlockBuilder();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,186,final Expression expr =
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,188,bb.add(Expressions.return_(null, expr));
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,189,final FunctionExpression convert =
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,190,Expressions.lambda(bb.toBlock(), Collections.emptyList());
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,191,return convert.compile().dynamicInvoke();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,196,private static class NonLiteralException extends Exception {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2331,final TranslatableTable table =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2332,udf.getTable(typeFactory, callBinding.operands());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2344,elementType = udtf.getElementType(typeFactory, callBinding.operands());
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFilterableTable.java,61,final int[] fields = CsvEnumerator.identityList(fieldTypes.size());
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFilterableTable.java,66,new CsvEnumerator.ArrayRowConverter(fieldTypes, fields));
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvScannableTable.java,47,final int[] fields = CsvEnumerator.identityList(fieldTypes.size());
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvScannableTable.java,52,new CsvEnumerator.ArrayRowConverter(fieldTypes, fields));
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchemaFactory.java,38,static final String ROWTIME_COLUMN_NAME = "ROWTIME";
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvStreamScannableTable.java,65,final int[] fields = CsvEnumerator.identityList(fieldTypes.size());
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvStreamScannableTable.java,70,new CsvEnumerator.ArrayRowConverter(fieldTypes, fields, true));
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,17,package org.apache.calcite.adapter.csv;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,44,class CsvEnumerator<E> implements Enumerator<E> {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,46,private final String[] filterValues;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,63,CsvEnumerator(Source source, AtomicBoolean cancelFlag,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,64,List<CsvFieldType> fieldTypes) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,65,this(source, cancelFlag, fieldTypes, identityList(fieldTypes.size()));
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,68,CsvEnumerator(Source source, AtomicBoolean cancelFlag,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,69,List<CsvFieldType> fieldTypes, int[] fields) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,75,CsvEnumerator(Source source, AtomicBoolean cancelFlag, boolean stream,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,79,this.filterValues = filterValues;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,93,int[] fields) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,94,if (fields.length == 1) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,95,final int field = fields[0];
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,98,return new ArrayRowConverter(fieldTypes, fields);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,111,static RelDataType deduceRowType(JavaTypeFactory typeFactory, Source source,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,112,List<CsvFieldType> fieldTypes, Boolean stream) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,117,names.add(CsvSchemaFactory.ROWTIME_COLUMN_NAME);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,174,public static CSVReader openCsv(Source source) throws IOException {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,206,String filterValue = filterValues[i];
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,235,static int[] identityList(int n) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,328,private final CsvFieldType[] fieldTypes;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,329,private final int[] fields;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,333,ArrayRowConverter(List<CsvFieldType> fieldTypes, int[] fields) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,334,this.fieldTypes = fieldTypes.toArray(new CsvFieldType[0]);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,335,this.fields = fields;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,336,this.stream = false;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,339,ArrayRowConverter(List<CsvFieldType> fieldTypes, int[] fields, boolean stream) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,340,this.fieldTypes = fieldTypes.toArray(new CsvFieldType[0]);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,341,this.fields = fields;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,354,final Object[] objects = new Object[fields.length];
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,355,for (int i = 0; i < fields.length; i++) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,356,int field = fields[i];
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,357,objects[i] = convert(fieldTypes[field], strings[field]);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,363,final Object[] objects = new Object[fields.length + 1];
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,365,for (int i = 0; i < fields.length; i++) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,366,int field = fields[i];
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,367,objects[i + 1] = convert(fieldTypes[field], strings[field]);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,374,private static class SingleColumnRowConverter extends RowConverter {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFieldType.java,17,package org.apache.calcite.adapter.csv;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFieldType.java,33,enum CsvFieldType {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvStreamReader.java,17,package org.apache.calcite.adapter.csv;
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,19,import org.apache.calcite.adapter.csv.CsvFilterableTable;
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,54,this.tables = ImmutableList.copyOf(tables);
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,90,final Source baseSource = Sources.of(baseDirectory);
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,91,File[] files = baseDirectory.listFiles((dir, name) -> {
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,92,final String nameSansGz = trim(name, ".gz");
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,94,|| nameSansGz.endsWith(".json");
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,96,if (files == null) {
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,97,System.out.println("directory " + baseDirectory + " not found");
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,98,files = new File[0];
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,101,for (File file : files) {
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,102,Source source = Sources.of(file);
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,103,Source sourceSansGz = source.trim(".gz");
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,104,final Source sourceSansJson = sourceSansGz.trimOrNull(".json");
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,105,if (sourceSansJson != null) {
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,110,final Source sourceSansCsv = sourceSansGz.trimOrNull(".csv");
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,111,if (sourceSansCsv != null) {
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,112,addTable(builder, source, sourceSansCsv.relative(baseSource).path(),
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,113,null);
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,145,final Table table = new CsvFilterableTable(source, null);
file/src/main/java/org/apache/calcite/adapter/file/FileSchemaFactory.java,37,public FileSchemaFactory() {
file/src/main/java/org/apache/calcite/adapter/file/FileSchemaFactory.java,46,File directoryFile = baseDirectory;
file/src/main/java/org/apache/calcite/adapter/file/FileSchemaFactory.java,48,if (baseDirectory != null && directory != null) {
file/src/main/java/org/apache/calcite/adapter/file/FileSchemaFactory.java,50,if (!directoryFile.isAbsolute()) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/JsonEnumerator.java,17,package org.apache.calcite.adapter.csv;
example/csv/src/main/java/org/apache/calcite/adapter/csv/JsonTable.java,17,package org.apache.calcite.adapter.csv;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,927,private static class CheckingUserDefinedFunctionVisitor extends RexVisitorImpl<Void> {
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,400,protected void notifyDiscard(
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,401,RelNode rel) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,559,RelNode joinRel, ImmutableBitSet groupKey) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,562,RelNode left = joinRel.getInputs().get(0);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,563,RelNode right = joinRel.getInputs().get(1);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,574,return numDistinctVals(population, mq.getRowCount(joinRel));
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,385,Join joinRel,
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,388,JoinRelType joinType = joinRel.getJoinType();
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,395,filters.add(joinRel.getCondition());
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,405,shiftRightFilter(joinRel, left, multiJoin,
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,750,return selfJoin.getLeftFactor();
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,752,return selfJoin.getRightFactor();
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,766,return selfJoin.getLeftFactor() == factIdx;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,779,return selfJoin.getRightFactor() == factIdx;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,795,assert selfJoin.getRightFactor() == rightFactor;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,796,return selfJoin.getColumnMapping().get(rightOffset);
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,830,private class RemovableSelfJoin {
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,834,private int leftFactor;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,840,private int rightFactor;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,847,private Map<Integer, Integer> columnMapping;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,858,public int getLeftFactor() {
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,859,return leftFactor;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,862,public int getRightFactor() {
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,863,return rightFactor;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,866,public Map<Integer, Integer> getColumnMapping() {
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,867,return columnMapping;
core/src/main/java/org/apache/calcite/sql/SqlBinaryStringLiteral.java,67,literal -> ((SqlBinaryStringLiteral) literal).getBitString())),
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,54,return getNlsString().getCollation();
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,79,literal -> ((SqlCharStringLiteral) literal).getNlsString())),
core/src/main/java/org/apache/calcite/sql/fun/SqlLiteralChainOperator.java,169,NlsString nls = ((SqlCharStringLiteral) rand).getNlsString();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,58,private static DruidJsonFilter toEqualityKindDruidFilter(RexNode rexNode, RelDataType rowType,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,59,DruidQuery druidQuery) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,60,if (rexNode.getKind() != SqlKind.EQUALS && rexNode.getKind() != SqlKind.NOT_EQUALS) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,154,final String literalValue = DruidJsonFilter.toDruidLiteral(rexLiteral, rowType, druidQuery);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,161,final Pair<String, ExtractionFunction> druidColumn = DruidQuery.toDruidColumn(refNode, rowType,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,162,druidQuery);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1113,throw new IllegalStateException("Can not plan Druid Query");
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1127,private JsonLimit computeSort(@Nullable Integer fetch, List<Integer> collationIndexes,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1128,List<Direction> collationDirections, ImmutableBitSet numericCollationIndexes,
pig/src/main/java/org/apache/calcite/adapter/pig/PigAggregate.java,190,result.add("  " + fieldName + DISTINCT_FIELD_SUFFIX + " = DISTINCT " + relAlias + '.'
pig/src/main/java/org/apache/calcite/adapter/pig/PigAggregate.java,191,+ fieldName + ";\n");
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,24,import org.apache.calcite.plan.RelOptRuleOperand;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,32,import org.apache.calcite.rel.core.RelFactories;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,59,CassandraFilterRule.INSTANCE,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,60,CassandraProjectRule.INSTANCE,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,61,CassandraSortRule.INSTANCE,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,62,CassandraLimitRule.INSTANCE
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,91,protected final Convention out;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,93,CassandraConverterRule(Class<? extends RelNode> clazz,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,94,String description) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,95,this(clazz, r -> true, description);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,98,<R extends RelNode> CassandraConverterRule(Class<R> clazz,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,99,Predicate<? super R> predicate,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,100,String description) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,101,super(clazz, predicate, Convention.NONE,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,102,CassandraRel.CONVENTION, RelFactories.LOGICAL_BUILDER, description);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,103,this.out = CassandraRel.CONVENTION;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,111,private static class CassandraFilterRule extends RelOptRule {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,117,private static final CassandraFilterRule INSTANCE = new CassandraFilterRule();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,119,private CassandraFilterRule() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,120,super(operand(LogicalFilter.class, operand(CassandraTableScan.class, none())),
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,203,public void onMatch(RelOptRuleCall call) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,214,public RelNode convert(LogicalFilter filter, CassandraTableScan scan) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,232,private static class CassandraProjectRule extends CassandraConverterRule {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,233,private static final CassandraProjectRule INSTANCE = new CassandraProjectRule();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,235,private CassandraProjectRule() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,236,super(LogicalProject.class, "CassandraProjectRule");
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,250,public RelNode convert(RelNode rel) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,263,private static class CassandraSortRule extends RelOptRule {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,265,private static final RelOptRuleOperand CASSANDRA_OP =
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,266,operand(CassandraToEnumerableConverter.class,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,267,operandJ(CassandraFilter.class, null,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,269,CassandraFilter::isSinglePartition, any()));
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,271,private static final CassandraSortRule INSTANCE = new CassandraSortRule();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,273,private CassandraSortRule() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,274,super(
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,275,operandJ(Sort.class, null,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,277,sort -> sort.offset == null && sort.fetch == null, CASSANDRA_OP),
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,290,public boolean matches(RelOptRuleCall call) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,357,public void onMatch(RelOptRuleCall call) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,371,private static class CassandraLimitRule extends RelOptRule {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,372,private static final CassandraLimitRule INSTANCE = new CassandraLimitRule();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,374,private CassandraLimitRule() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,375,super(operand(EnumerableLimit.class, operand(CassandraToEnumerableConverter.class, any())),
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,387,public void onMatch(RelOptRuleCall call) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,24,import org.apache.calcite.tools.RelBuilderFactory;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,26,import java.util.function.Predicate;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,33,public static final ConverterRule INSTANCE =
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,41,public CassandraToEnumerableConverterRule(
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,42,RelBuilderFactory relBuilderFactory) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,43,super(RelNode.class, (Predicate<RelNode>) r -> true,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,44,CassandraRel.CONVENTION, EnumerableConvention.INSTANCE,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,45,relBuilderFactory, "CassandraToEnumerableConverterRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,31,EnumerableAggregateRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,32,super(LogicalAggregate.class, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,33,EnumerableConvention.INSTANCE, "EnumerableAggregateRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,36,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,36,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,41,import java.util.function.Predicate;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,89,public static final EnumerableToBindableConverterRule INSTANCE =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,97,public EnumerableToBindableConverterRule(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,98,RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,99,super(EnumerableRel.class, (Predicate<RelNode>) r -> true,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,100,EnumerableConvention.INSTANCE, BindableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,101,relBuilderFactory, "EnumerableToBindableConverterRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,23,import org.apache.calcite.rel.core.Calc;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,27,import java.util.function.Predicate;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,34,EnumerableCalcRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,37,super(LogicalCalc.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,39,Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,40,RelFactories.LOGICAL_BUILDER, "EnumerableCalcRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,43,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCollectRule.java,30,EnumerableCollectRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCollectRule.java,31,super(Collect.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCollectRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelateRule.java,24,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelateRule.java,26,import java.util.function.Predicate;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelateRule.java,37,public EnumerableCorrelateRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelateRule.java,38,super(LogicalCorrelate.class, (Predicate<RelNode>) r -> true,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelateRule.java,39,Convention.NONE, EnumerableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelateRule.java,43,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,20,import org.apache.calcite.plan.RelOptUtil;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,26,import java.util.function.Predicate;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,33,EnumerableFilterRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,34,super(LogicalFilter.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,36,Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,37,RelFactories.LOGICAL_BUILDER, "EnumerableFilterRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,40,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterToCalcRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterToCalcRule.java,30,public class EnumerableFilterToCalcRule extends RelOptRule {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterToCalcRule.java,37,super(operand(EnumerableFilter.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterToCalcRule.java,40,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,23,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,25,import java.util.function.Predicate;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,33,public static final EnumerableInterpreterRule INSTANCE =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,41,public EnumerableInterpreterRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,42,super(RelNode.class, (Predicate<RelNode>) r -> true,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,43,BindableConvention.INSTANCE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,44,relBuilderFactory, "EnumerableInterpreterRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersectRule.java,31,EnumerableIntersectRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersectRule.java,32,super(LogicalIntersect.class, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersectRule.java,33,EnumerableConvention.INSTANCE, "EnumerableIntersectRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersectRule.java,36,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableJoinRule.java,36,EnumerableJoinRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableJoinRule.java,37,super(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableJoinRule.java,38,LogicalJoin.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableJoinRule.java,39,Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableJoinRule.java,40,EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,31,class EnumerableLimitRule extends RelOptRule {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,33,super(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,34,operand(Sort.class, any()),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,43,EnumerableMergeJoinRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,44,super(LogicalJoin.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,45,Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,46,EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMinusRule.java,30,EnumerableMinusRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMinusRule.java,31,super(LogicalMinus.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMinusRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,20,import org.apache.calcite.plan.RelOptUtil;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,26,import java.util.function.Predicate;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,33,EnumerableProjectRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,34,super(LogicalProject.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,36,Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,37,RelFactories.LOGICAL_BUILDER, "EnumerableProjectRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,40,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectToCalcRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectToCalcRule.java,27,public class EnumerableProjectToCalcRule extends RelOptRule {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectToCalcRule.java,34,super(operand(EnumerableProject.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectToCalcRule.java,37,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,20,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,35,new EnumerableJoinRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,38,new EnumerableMergeJoinRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,44,new EnumerableCorrelateRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,50,new EnumerableProjectRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,53,new EnumerableFilterRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,56,new EnumerableCalcRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,59,new EnumerableAggregateRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,62,new EnumerableSortRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,65,new EnumerableLimitRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,68,new EnumerableUnionRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,71,new EnumerableIntersectRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,74,new EnumerableMinusRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,77,new EnumerableTableModifyRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,80,new EnumerableValuesRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,83,new EnumerableWindowRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,86,new EnumerableCollectRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,89,new EnumerableUncollectRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,92,new EnumerableFilterToCalcRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,95,new EnumerableProjectToCalcRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,98,new EnumerableTableScanRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,101,new EnumerableTableFunctionScanRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSortRule.java,29,EnumerableSortRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSortRule.java,30,super(Sort.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,25,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,27,import java.util.function.Predicate;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,35,public EnumerableTableFunctionScanRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,36,this(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,44,public EnumerableTableFunctionScanRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,45,super(LogicalTableFunctionScan.class, (Predicate<RelNode>) r -> true,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,46,Convention.NONE, EnumerableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,53,LogicalTableFunctionScan tbl = (LogicalTableFunctionScan) rel;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,56,tbl.getCall(), tbl.getColumnMappings());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModifyRule.java,25,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModifyRule.java,27,import java.util.function.Predicate;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModifyRule.java,39,public EnumerableTableModifyRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModifyRule.java,40,super(LogicalTableModify.class, (Predicate<RelNode>) r -> true,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModifyRule.java,41,Convention.NONE, EnumerableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,27,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,29,import java.util.function.Predicate;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,38,public EnumerableTableScanRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,39,this(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,47,public EnumerableTableScanRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,49,Convention.NONE, EnumerableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollectRule.java,30,EnumerableUncollectRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollectRule.java,31,super(Uncollect.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollectRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnionRule.java,30,EnumerableUnionRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnionRule.java,31,super(LogicalUnion.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnionRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,23,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,25,import java.util.function.Predicate;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,37,public EnumerableValuesRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,38,super(LogicalValues.class, (Predicate<RelNode>) r -> true,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,39,Convention.NONE, EnumerableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindowRule.java,30,EnumerableWindowRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindowRule.java,31,super(LogicalWindow.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindowRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,27,import org.apache.calcite.plan.RelTrait;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,61,import org.apache.calcite.rex.RexOver;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,81,import java.util.function.Predicate;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,95,return rules(out, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,100,return ImmutableList.of(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,101,new JdbcToEnumerableConverterRule(out, relBuilderFactory),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,102,new JdbcJoinRule(out, relBuilderFactory),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,103,new JdbcCalcRule(out, relBuilderFactory),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,104,new JdbcProjectRule(out, relBuilderFactory),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,105,new JdbcFilterRule(out, relBuilderFactory),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,106,new JdbcAggregateRule(out, relBuilderFactory),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,107,new JdbcSortRule(out, relBuilderFactory),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,108,new JdbcUnionRule(out, relBuilderFactory),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,109,new JdbcIntersectRule(out, relBuilderFactory),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,110,new JdbcMinusRule(out, relBuilderFactory),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,111,new JdbcTableModificationRule(out, relBuilderFactory),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,112,new JdbcValuesRule(out, relBuilderFactory));
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,117,protected final JdbcConvention out;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,121,JdbcConverterRule(Class<? extends RelNode> clazz, RelTrait in,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,122,JdbcConvention out, String description) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,123,this(clazz, (Predicate<RelNode>) r -> true, in, out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,124,RelFactories.LOGICAL_BUILDER, description);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,127,<R extends RelNode> JdbcConverterRule(Class<R> clazz,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,128,Predicate<? super R> predicate, RelTrait in, JdbcConvention out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,129,RelBuilderFactory relBuilderFactory, String description) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,130,super(clazz, predicate, in, out, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,131,this.out = out;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,136,<R extends RelNode> JdbcConverterRule(Class<R> clazz,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,137,com.google.common.base.Predicate<? super R> predicate,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,138,RelTrait in, JdbcConvention out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,139,RelBuilderFactory relBuilderFactory, String description) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,140,this(clazz, (Predicate<R>) predicate, in, out, relBuilderFactory,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,141,description);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,148,public JdbcJoinRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,149,this(out, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,153,public JdbcJoinRule(JdbcConvention out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,154,RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,155,super(Join.class, (Predicate<RelNode>) r -> true, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,156,out, relBuilderFactory, "JdbcJoinRule");
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,308,private JdbcCalcRule(JdbcConvention out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,309,RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,310,super(Calc.class, (Predicate<RelNode>) r -> true, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,311,out, relBuilderFactory, "JdbcCalcRule");
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,384,public JdbcProjectRule(final JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,385,this(out, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,389,public JdbcProjectRule(final JdbcConvention out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,390,RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,391,super(Project.class, (Predicate<Project>) project ->
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,394,&& !userDefinedFunctionInProject(project),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,395,Convention.NONE, out, relBuilderFactory, "JdbcProjectRule");
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,409,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,467,public JdbcFilterRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,468,this(out, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,472,public JdbcFilterRule(JdbcConvention out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,473,RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,474,super(Filter.class,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,475,(Predicate<Filter>) r -> !userDefinedFunctionInFilter(r),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,476,Convention.NONE, out, relBuilderFactory, "JdbcFilterRule");
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,485,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,525,public JdbcAggregateRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,526,this(out, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,530,public JdbcAggregateRule(JdbcConvention out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,531,RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,532,super(Aggregate.class, (Predicate<RelNode>) r -> true, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,533,out, relBuilderFactory, "JdbcAggregateRule");
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,536,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,610,public JdbcSortRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,611,this(out, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,615,public JdbcSortRule(JdbcConvention out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,616,RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,617,super(Sort.class, (Predicate<RelNode>) r -> true, Convention.NONE, out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,618,relBuilderFactory, "JdbcSortRule");
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,621,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,681,public JdbcUnionRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,682,this(out, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,686,public JdbcUnionRule(JdbcConvention out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,687,RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,688,super(Union.class, (Predicate<RelNode>) r -> true, Convention.NONE, out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,689,relBuilderFactory, "JdbcUnionRule");
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,692,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,732,private JdbcIntersectRule(JdbcConvention out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,733,RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,734,super(Intersect.class, (Predicate<RelNode>) r -> true, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,735,out, relBuilderFactory, "JdbcIntersectRule");
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,738,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,779,private JdbcMinusRule(JdbcConvention out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,780,RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,781,super(Minus.class, (Predicate<RelNode>) r -> true, Convention.NONE, out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,782,relBuilderFactory, "JdbcMinusRule");
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,785,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,818,private JdbcTableModificationRule(JdbcConvention out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,819,RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,820,super(TableModify.class, (Predicate<RelNode>) r -> true,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,821,Convention.NONE, out, relBuilderFactory, "JdbcTableModificationRule");
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,894,private JdbcValuesRule(JdbcConvention out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,895,RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,896,super(Values.class, (Predicate<RelNode>) r -> true, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,897,out, relBuilderFactory, "JdbcValuesRule");
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverterRule.java,23,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverterRule.java,25,import java.util.function.Predicate;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverterRule.java,34,public JdbcToEnumerableConverterRule(JdbcConvention out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverterRule.java,35,RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverterRule.java,36,super(RelNode.class, (Predicate<RelNode>) r -> true, out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverterRule.java,37,EnumerableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,30,import org.apache.calcite.plan.RelOptUtil;
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,45,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,80,import java.util.function.Predicate;
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,89,new BindableTableScanRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,92,new BindableFilterRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,95,new BindableProjectRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,98,new BindableSortRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,101,new BindableJoinRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,107,new BindableValuesRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,110,new BindableAggregateRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,113,new BindableWindowRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,142,public static class BindableTableScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,150,super(operand(LogicalTableScan.class, none()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,267,public BindableFilterRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,268,super(LogicalFilter.class,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,270,Convention.NONE, BindableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,274,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,334,public BindableProjectRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,335,super(LogicalProject.class,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,337,Convention.NONE, BindableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,341,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,392,public BindableSortRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,393,super(Sort.class, (Predicate<RelNode>) r -> true, Convention.NONE,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,394,BindableConvention.INSTANCE, relBuilderFactory, "BindableSortRule");
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,397,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,448,public BindableJoinRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,449,super(LogicalJoin.class, (Predicate<RelNode>) r -> true,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,450,Convention.NONE, BindableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,454,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,520,Convention.NONE, BindableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,524,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,593,public BindableValuesRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,594,super(LogicalValues.class, (Predicate<RelNode>) r -> true,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,595,Convention.NONE, BindableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,671,public BindableAggregateRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,672,super(LogicalAggregate.class, (Predicate<RelNode>) r -> true,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,673,Convention.NONE, BindableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,677,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,736,public BindableWindowRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,737,super(LogicalWindow.class, (Predicate<RelNode>) r -> true,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,738,Convention.NONE, BindableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,742,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,24,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,26,import java.util.function.Predicate;
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,34,public static final ConverterRule INSTANCE =
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,42,public NoneToBindableConverterRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,43,super(RelNode.class, (Predicate<RelNode>) r -> true, Convention.NONE,
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,44,BindableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/plan/CommonRelSubExprRule.java,25,public abstract class CommonRelSubExprRule extends RelOptRule {
core/src/main/java/org/apache/calcite/plan/CommonRelSubExprRule.java,34,super(operand);
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,449,protected boolean equals(RelOptRule that) {
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,646,private static class ConverterRelOptRuleOperand extends RelOptRuleOperand {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,141,FILTER_PREDICATE =
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,312,new TraitMatchingRule(converter, RelFactories.LOGICAL_BUILDER));
core/src/main/java/org/apache/calcite/plan/hep/HepProgramBuilder.java,115,instruction.rule = rule;
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,22,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,30,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,103,public static class ExpandConversionRule extends RelOptRule {
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,105,new ExpandConversionRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,113,super(operand(AbstractConverter.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,116,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,25,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,35,public abstract class ConverterRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,53,this(clazz, (Predicate<RelNode>) r -> true, in, out,
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,78,super(convertOperand(clazz, predicate, in),
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,79,relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,83,this.inTrait = Objects.requireNonNull(in);
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,84,this.outTrait = Objects.requireNonNull(out);
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,87,assert in.getTraitDef() == out.getTraitDef();
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,101,public Convention getOutConvention() {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,136,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,33,public class TraitMatchingRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,36,private final ConverterRule converter;
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,42,this(converterRule, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,54,super(
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,55,operand(
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,56,converterRule.getOperand().getMatchedClass(),
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,57,operand(RelNode.class, any())),
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,58,relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,60,assert converterRule.getOperand().childPolicy
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,61,== RelOptRuleOperandChildPolicy.ANY;
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,62,this.converter = converterRule;
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,68,return converter.getOutConvention();
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,71,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,73,if (input.getTraitSet().contains(converter.getOutTrait())) {
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,74,converter.onMatch(call);
core/src/main/java/org/apache/calcite/rel/rules/AbstractJoinExtractFilterRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AbstractJoinExtractFilterRule.java,45,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/AbstractJoinExtractFilterRule.java,48,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,81,public static final AggregateExpandDistinctAggregatesRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,87,public static final AggregateExpandDistinctAggregatesRule JOIN =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,91,public final boolean useGroupingSets;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,99,super(operand(clazz, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,100,this.useGroupingSets = useGroupingSets;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,120,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,171,if (useGroupingSets) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,64,this(
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,65,operand(aggregateClass,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,66,operandJ(inputClass, null, r -> !(r instanceof Project), any())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,67,relBuilderFactory);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,72,super(operand, builderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,75,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,29,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,59,public static final AggregateFilterTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,63,this(
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,64,operand(Aggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,65,operand(Filter.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,66,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,72,super(operand, relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,75,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,65,public static final AggregateJoinTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,70,public static final AggregateJoinTransposeRule EXTENDED =
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,74,private final boolean allowFunctions;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,80,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,84,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,85,this.allowFunctions = allowFunctions;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,208,if (!allowFunctions) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,52,public static final AggregateProjectMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,59,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,60,operand(aggregateClass,
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,61,operand(projectClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,62,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,65,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,64,public static final AggregateProjectPullUpConstantsRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,70,public static final AggregateProjectPullUpConstantsRule INSTANCE2 =
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,89,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,90,operandJ(aggregateClass, null, Aggregate::isSimple,
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,91,operand(inputClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,92,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,97,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,85,public static final AggregateReduceFunctionsRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,94,super(operand, relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,107,public void onMatch(RelOptRuleCall ruleCall) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,38,public static final AggregateRemoveRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,60,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,68,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,26,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,63,public static final AggregateStarTableRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,70,public static final AggregateStarTableRule INSTANCE2 =
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,107,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,44,public static final AggregateUnionAggregateRule AGG_ON_FIRST_INPUT =
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,51,public static final AggregateUnionAggregateRule AGG_ON_SECOND_INPUT =
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,63,public static final AggregateUnionAggregateRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,79,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,80,operandJ(aggregateClass, null, Aggregate::isSimple,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,81,operand(unionClass,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,82,operand(firstUnionInputClass, any()),
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,83,operand(secondUnionInputClass, any()))),
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,84,relBuilderFactory, desc);
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,99,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,55,public static final AggregateUnionTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,73,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,74,operand(aggregateClass,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,75,operand(unionClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,76,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,88,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,56,public static final AggregateValuesRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,65,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,66,operandJ(Aggregate.class, null,
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,67,aggregate -> aggregate.getGroupCount() == 0,
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,68,operandJ(Values.class, null,
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,69,values -> values.getTuples().isEmpty(), none())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,70,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,41,public static final CalcMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,52,super(
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,53,operand(
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,54,Calc.class,
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,55,operand(Calc.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,56,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,61,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,24,import org.apache.calcite.rex.RexProgram;
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,40,public static final CalcRemoveRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,51,super(operand(LogicalCalc.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,56,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,57,LogicalCalc calc = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,58,RexProgram program = calc.getProgram();
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,59,if (!program.isTrivial()) {
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,60,return;
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,42,public static final CalcSplitRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,51,super(operand(Calc.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,39,private final Class consumerRelClass;
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,41,private final boolean coerceNames;
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,49,this(consumerRelClass, coerceNames, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,62,super(
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,63,operand(consumerRelClass, any()),
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,64,relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,66,this.consumerRelClass = consumerRelClass;
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,67,this.coerceNames = coerceNames;
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,76,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,78,if (consumerRel.getClass() != consumerRelClass) {
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,92,coerceNames);
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,100,coerceNames);
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,25,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,67,import java.util.function.Predicate;
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,93,private static final Predicate<Filter> FILTER_PREDICATE =
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,94,filter -> {
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,95,try (ExtractFinder finder = ExtractFinder.THREAD_INSTANCES.get()) {
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,97,: "previous user did not clean up";
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,98,filter.getCondition().accept(finder);
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,102,|| finder.opKinds.contains(SqlKind.CEIL);
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,107,new FilterDateRangeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,174,super(operandJ(Filter.class, null, FILTER_PREDICATE, any()),
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,175,relBuilderFactory, "FilterDateRangeRule");
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,53,public static final FilterAggregateTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,67,RelBuilderFactory builderFactory,
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,69,this(
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,70,operand(filterClass,
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,71,operand(aggregateClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,72,builderFactory);
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,76,RelBuilderFactory builderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,77,super(operand, builderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,91,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,42,public static final FilterCalcMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,53,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,54,operand(
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,55,Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,56,operand(LogicalCalc.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,57,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,62,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,69,if (calc.getProgram().containsAggs()) {
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,44,public static final FilterCorrelateRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,52,public FilterCorrelateRule(RelBuilderFactory builderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,53,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,54,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,55,operand(Correlate.class, RelOptRule.any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,56,builderFactory, "FilterCorrelateRule");
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,71,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,21,import org.apache.calcite.plan.RelOptRuleOperand;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,42,import java.util.Objects;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,56,public static final FilterJoinRule FILTER_ON_JOIN =
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,63,public static final FilterJoinRule DUMB_FILTER_ON_JOIN =
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,68,public static final FilterJoinRule JOIN =
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,72,private final boolean smart;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,77,private final Predicate predicate;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,85,protected FilterJoinRule(RelOptRuleOperand operand, String id,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,86,boolean smart, RelBuilderFactory relBuilderFactory, Predicate predicate) {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,87,super(operand, relBuilderFactory, "FilterJoinRule:" + id);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,88,this.smart = smart;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,89,this.predicate = Objects.requireNonNull(predicate);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,97,protected FilterJoinRule(RelOptRuleOperand operand, String id,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,98,boolean smart, RelFactories.FilterFactory filterFactory,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,99,RelFactories.ProjectFactory projectFactory) {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,100,this(operand, id, smart, RelBuilder.proto(filterFactory, projectFactory),
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,109,protected FilterJoinRule(RelOptRuleOperand operand, String id,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,110,boolean smart, RelFactories.FilterFactory filterFactory,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,111,RelFactories.ProjectFactory projectFactory,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,112,Predicate predicate) {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,113,this(operand, id, smart, RelBuilder.proto(filterFactory, projectFactory),
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,114,predicate);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,142,if (smart
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,301,public static class JoinConditionPushRule extends FilterJoinRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,304,super(RelOptRule.operand(Join.class, RelOptRule.any()),
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,306,predicate);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,323,public static class FilterIntoJoinRule extends FilterJoinRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,326,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,327,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,328,operand(Join.class, RelOptRule.any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,330,predicate);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,338,this(smart, RelBuilder.proto(filterFactory, projectFactory), predicate);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,36,public static final FilterMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,45,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,46,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,47,operand(Filter.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,48,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,58,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,22,import org.apache.calcite.rel.logical.LogicalFilter;
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,34,public static final FilterMultiJoinMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,43,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,51,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,28,import org.apache.calcite.rex.RexOver;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,44,public static final FilterProjectTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,48,private final boolean copyFilter;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,49,private final boolean copyProject;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,64,this(
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,67,copyFilter, copyProject, relBuilderFactory);
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,77,projectFactory == null,
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,78,RelBuilder.proto(filterFactory, projectFactory));
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,86,super(operand, relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,87,this.copyFilter = copyFilter;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,88,this.copyProject = copyProject;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,93,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,97,if (RexOver.containsOver(project.getProjects(), null)) {
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,120,if (copyFilter) {
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,129,RelNode newProjRel =
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,130,copyProject
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,137,call.transformTo(newProjRel);
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,44,public static final FilterRemoveIsNotDistinctFromRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,56,super(operand(Filter.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,61,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,94,private class RemoveIsNotDistinctFromRexShuttle extends RexShuttle {
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,95,RexBuilder rexBuilder;
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,103,public RexNode visitCall(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,41,public static final FilterSetOpTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,50,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,51,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,52,operand(SetOp.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,53,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,58,this(RelBuilder.proto(Contexts.of(filterFactory)));
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,64,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,43,public static final FilterTableFunctionTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,52,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,53,operand(LogicalFilter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,54,operand(LogicalTableFunctionScan.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,55,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,61,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,26,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,52,public abstract class FilterTableScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,59,public static final FilterTableScanRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,74,public static final FilterTableScanRule INTERPRETER =
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,93,this(operand, RelFactories.LOGICAL_BUILDER, description);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,99,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,48,public static final FilterToCalcRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,59,super(operand(LogicalFilter.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,64,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,70,public static final IntersectToDistinctRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,76,public IntersectToDistinctRule(Class<? extends Intersect> intersectClazz,
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,78,super(operand(intersectClazz, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,83,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,40,public static final JoinAddRedundantSemiJoinRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,51,super(operand(clazz, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,56,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,53,public static final JoinAssociateRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,62,super(
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,63,operand(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,64,operand(Join.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,65,operand(RelSubset.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,66,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,71,public void onMatch(final RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,61,private final boolean swapOuter;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,71,this.swapOuter = swapOuter;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,75,this(LogicalJoin.class, RelFactories.LOGICAL_BUILDER, swapOuter);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,143,public void onMatch(final RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,151,final RelNode swapped = swap(join, this.swapOuter, call.builder());
core/src/main/java/org/apache/calcite/rel/rules/JoinExtractFilterRule.java,42,public static final JoinExtractFilterRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/JoinExtractFilterRule.java,53,super(operand(clazz, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,28,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,61,public static final JoinProjectTransposeRule BOTH_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,68,public static final JoinProjectTransposeRule LEFT_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,74,public static final JoinProjectTransposeRule RIGHT_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,82,public static final JoinProjectTransposeRule BOTH_PROJECT_INCLUDE_OUTER =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,90,public static final JoinProjectTransposeRule LEFT_PROJECT_INCLUDE_OUTER =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,97,public static final JoinProjectTransposeRule RIGHT_PROJECT_INCLUDE_OUTER =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,106,private final boolean includeOuter;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,114,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,115,this.includeOuter = includeOuter;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,122,this(operand, description, false, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,128,this(operand, description, false,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,129,RelBuilder.proto(Contexts.of(projectFactory)));
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,136,this(operand, description, includeOuter,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,137,RelBuilder.proto(Contexts.of(projectFactory)));
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,143,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,144,Join joinRel = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,145,JoinRelType joinType = joinRel.getJoinType();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,147,Project leftProj;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,148,Project rightProj;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,155,&& (includeOuter || !joinType.generatesNullsOnLeft())) {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,156,leftProj = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,157,leftJoinChild = getProjectChild(call, leftProj, true);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,159,leftProj = null;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,163,&& (includeOuter || !joinType.generatesNullsOnRight())) {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,164,rightProj = getRightChild(call);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,165,rightJoinChild = getProjectChild(call, rightProj, false);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,167,rightProj = null;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,168,rightJoinChild = joinRel.getRight();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,170,if ((leftProj == null) && (rightProj == null)) {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,183,RelDataType joinChildrenRowType =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,188,joinRel.getCluster().getTypeFactory(),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,197,int nProjExprs = joinRel.getRowType().getFieldCount();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,199,final RexBuilder rexBuilder = joinRel.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,202,leftProj,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,209,List<RelDataTypeField> leftFields =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,211,int nFieldsLeft = leftFields.size();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,213,rightProj,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,230,RexProgram bottomProgram =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,237,RexProgramBuilder topProgramBuilder =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,242,topProgramBuilder.addCondition(joinRel.getCondition());
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,243,RexProgram topProgram = topProgramBuilder.getProgram();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,244,RexProgram mergedProgram =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,253,RexNode newCondition =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,256,Join newJoinRel =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,257,joinRel.copy(joinRel.getTraitSet(), newCondition,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,258,leftJoinChild, rightJoinChild, joinRel.getJoinType(),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,259,joinRel.isSemiJoinDone());
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,264,List<RexLocalRef> projList = mergedProgram.getProjectList();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,265,List<RelDataTypeField> newJoinFields =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,266,newJoinRel.getRowType().getFieldList();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,267,int nJoinFields = newJoinFields.size();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,285,relBuilder.push(newJoinRel);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,286,relBuilder.project(newProjExprs, joinRel.getRowType().getFieldNames());
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,290,relBuilder.convert(joinRel.getRowType(), false);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,352,Project projRel,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,360,if (projRel != null) {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,362,projRel.getNamedProjects();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,387,(RexNode) rexBuilder.makeInputRef(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,388,field.getType(),
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,40,public static final JoinPushExpressionsRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,44,public JoinPushExpressionsRule(Class<? extends Join> clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,46,super(operand(clazz, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,50,public JoinPushExpressionsRule(Class<? extends Join> clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,52,this(clazz, RelBuilder.proto(projectFactory));
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,26,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,68,public static final RelOptRule RIGHT =
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,69,new JoinPushThroughJoinRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,71,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,75,public static final RelOptRule LEFT =
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,76,new JoinPushThroughJoinRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,78,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,80,private final boolean right;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,86,Class<? extends Join> clazz, RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,87,super(
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,88,operand(clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,89,operand(clazz, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,91,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,92,this.right = right;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,97,Class<? extends Join> clazz, ProjectFactory projectFactory) {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,98,this(description, right, clazz, RelBuilder.proto(projectFactory));
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,102,if (right) {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,27,import org.apache.calcite.rex.RexBuilder;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,44,public static final JoinPushTransitivePredicatesRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,49,public JoinPushTransitivePredicatesRule(Class<? extends Join> clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,51,super(operand(clazz, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,55,public JoinPushTransitivePredicatesRule(Class<? extends Join> clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,57,this(clazz, RelBuilder.proto(Contexts.of(filterFactory)));
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,70,final RexBuilder rexBuilder = join.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,73,RelNode lChild = join.getLeft();
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,75,RelNode curr = lChild;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,78,call.getPlanner().onCopy(curr, lChild);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,81,RelNode rChild = join.getRight();
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,83,RelNode curr = rChild;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,86,call.getPlanner().onCopy(curr, rChild);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,90,lChild, rChild, join.getJoinType(), join.isSemiJoinDone());
core/src/main/java/org/apache/calcite/rel/rules/JoinToCorrelateRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinToCorrelateRule.java,77,this(RelBuilder.proto(Contexts.of(filterFactory)));
core/src/main/java/org/apache/calcite/rel/rules/JoinToCorrelateRule.java,82,public boolean matches(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinToCorrelateRule.java,96,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,25,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,106,public static final JoinToMultiJoinRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,113,this(clazz, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,119,public JoinToMultiJoinRule(Class<? extends Join> clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,121,super(
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,122,operand(clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,123,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,124,operand(RelNode.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,125,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,130,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,38,public static final JoinUnionTransposeRule LEFT_UNION =
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,46,public static final JoinUnionTransposeRule RIGHT_UNION =
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,63,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,66,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,69,public static final LoptOptimizeJoinRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,74,super(operand(MultiJoin.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,86,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,295,final TreeSet<Integer> sortedFactors = new TreeSet<>();
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,296,sortedFactors.addAll(simpleFactors.keySet());
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,299,sortedFactors.toArray(new Integer[0]);
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,1640,Pair.of(
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,1641,(RexNode) rexBuilder.makeInputRef(currFields.get(i).getType(), i),
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,23,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,48,public static final MaterializedViewFilterScanRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,54,.build();
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,60,super(operand(Filter.class, operand(TableScan.class, null, none())),
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,61,relBuilderFactory, "MaterializedViewFilterScanRule");
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,66,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,80,Collections.singletonList((RelNode) scan));
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,88,new HepPlanner(program, planner.getContext());
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,72,public static final MultiJoinOptimizeBushyRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,81,super(operand(MultiJoin.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,62,public static final MultiJoinProjectTransposeRule MULTI_BOTH_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,63,new MultiJoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,64,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,65,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,66,operand(MultiJoin.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,67,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,68,operand(MultiJoin.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,69,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,72,public static final MultiJoinProjectTransposeRule MULTI_LEFT_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,73,new MultiJoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,74,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,75,some(
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,76,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,77,operand(MultiJoin.class, any())))),
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,78,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,81,public static final MultiJoinProjectTransposeRule MULTI_RIGHT_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,82,new MultiJoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,83,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,84,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,85,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,86,operand(MultiJoin.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,87,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,96,this(operand, RelFactories.LOGICAL_BUILDER, description);
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,104,super(operand, description, false, relBuilderFactory);
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,48,public static final ProjectCalcMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,59,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,60,operand(
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,61,LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,62,operand(LogicalCalc.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,63,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,68,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,69,final LogicalProject project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,70,final LogicalCalc calc = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,48,public static final ProjectCorrelateTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,57,private final PushProjector.ExprCondition preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,63,RelBuilderFactory relFactory) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,64,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,65,operand(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,66,operand(Correlate.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,67,relFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,68,this.preserveExprCondition = preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,73,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,74,Project origProj = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,75,final Correlate corr = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,81,PushProjector pushProject =
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,82,new PushProjector(
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,83,origProj,
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,84,call.builder().literal(true),
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,85,corr,
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,86,preserveExprCondition,
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,87,call.builder());
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,88,if (pushProject.locateAllRefs()) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,94,RelNode leftProjRel =
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,95,pushProject.createProjectRefsAndExprs(
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,96,corr.getLeft(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,99,RelNode rightProjRel =
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,100,pushProject.createProjectRefsAndExprs(
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,101,corr.getRight(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,105,Map<Integer, Integer> requiredColsMap = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,108,int[] adjustments = pushProject.getAdjustments();
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,110,for (Integer col : corr.getRequiredColumns()) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,116,RexBuilder rexBuilder = call.builder().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,118,CorrelationId correlationId = corr.getCluster().createCorrel();
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,121,leftProjRel.getRowType(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,125,rightProjRel = rightProjRel.accept(
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,127,new RexFieldAccessReplacer(corr.getCorrelationId(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,131,Correlate newCorrRel =
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,132,corr.copy(
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,133,corr.getTraitSet(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,134,leftProjRel,
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,135,rightProjRel,
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,138,corr.getJoinType());
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,142,RelNode topProject =
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,143,pushProject.createNewProject(newCorrRel, adjustments);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,29,import org.apache.calcite.rex.RexOver;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,37,public static final ProjectFilterTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,46,private final PushProjector.ExprCondition preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,56,public ProjectFilterTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,57,Class<? extends Project> projectClass,
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,58,Class<? extends Filter> filterClass,
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,59,RelBuilderFactory relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,61,this(
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,62,operand(
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,63,projectClass,
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,64,operand(filterClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,71,super(operand, relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,72,this.preserveExprCondition = preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,78,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,40,public static final ProjectJoinTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,49,private final PushProjector.ExprCondition preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,61,RelBuilderFactory relFactory) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,66,this.preserveExprCondition = preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,72,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,73,Project origProj = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,83,PushProjector pushProject =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,85,origProj,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,88,preserveExprCondition,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,90,if (pushProject.locateAllRefs()) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,96,RelNode leftProjRel =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,97,pushProject.createProjectRefsAndExprs(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,101,RelNode rightProjRel =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,102,pushProject.createProjectRefsAndExprs(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,109,int[] adjustments = pushProject.getAdjustments();
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,111,List<RelDataTypeField> projJoinFieldList = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,112,projJoinFieldList.addAll(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,114,projJoinFieldList.addAll(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,115,leftProjRel.getRowType().getFieldList());
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,116,projJoinFieldList.addAll(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,117,rightProjRel.getRowType().getFieldList());
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,119,pushProject.convertRefsAndExprs(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,121,projJoinFieldList,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,126,Join newJoinRel =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,130,leftProjRel,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,131,rightProjRel,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,137,RelNode topProject =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,138,pushProject.createNewProject(newJoinRel, adjustments);
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,40,public static final ProjectMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,46,private final boolean force;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,56,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,57,operand(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,58,operand(Project.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,59,relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,61,this.force = force;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,66,this(force, RelBuilder.proto(projectFactory));
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,71,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,101,if (!force) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,112,if (force
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,36,public static final ProjectMultiJoinMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,43,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,44,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,45,operand(MultiJoin.class, any())), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,50,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,43,public static final ProjectRemoveRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,56,super(operandJ(Project.class, null, ProjectRemoveRule::isTrivial, any()),
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,57,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,62,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,42,public static final ProjectSetOpTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,51,private PushProjector.ExprCondition preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,64,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,65,operand(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,66,LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,67,operand(SetOp.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,68,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,69,this.preserveExprCondition = preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,75,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,76,LogicalProject origProj = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,77,SetOp setOp = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,85,PushProjector pushProject =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,86,new PushProjector(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,87,origProj, null, setOp, preserveExprCondition, call.builder());
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,88,pushProject.locateAllRefs();
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,90,List<RelNode> newSetOpInputs = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,91,int[] adjustments = pushProject.getAdjustments();
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,17,package org.apache.calcite.rel.rules;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,20,import org.apache.calcite.plan.RelOptRuleCall;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,21,import org.apache.calcite.plan.RelOptRuleOperand;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,22,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,23,import org.apache.calcite.rel.core.Project;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,25,import org.apache.calcite.rel.core.Sort;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,26,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,28,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,38,public static final ProjectSortTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,39,new ProjectSortTransposeRule(Project.class, Sort.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,40,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,45,private ProjectSortTransposeRule(Class<Project> projectClass,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,46,Class<Sort> sortClass, RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,47,this(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,48,operand(projectClass,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,49,operand(sortClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,50,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,54,protected ProjectSortTransposeRule(RelOptRuleOperand operand) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,55,this(operand, RelFactories.LOGICAL_BUILDER, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,59,protected ProjectSortTransposeRule(RelOptRuleOperand operand,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,60,RelBuilderFactory relBuilderFactory, String description) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,61,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,66,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,67,final Project project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,68,final Sort sort = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,69,if (sort.getClass() != Sort.class) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,70,return;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,72,RelNode newProject =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,73,project.copy(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,74,project.getTraitSet(), ImmutableList.of(sort.getInput()));
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,75,final Sort newSort =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,76,sort.copy(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,77,sort.getTraitSet(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,78,newProject,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,79,sort.getCollation(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,80,sort.offset,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,81,sort.fetch);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,82,call.transformTo(newSort);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,50,public abstract class ProjectTableScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,57,public static final ProjectTableScanRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,72,public static final ProjectTableScanRule INTERPRETER =
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,92,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,45,public static final ProjectToCalcRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,56,super(operand(LogicalProject.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,61,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,23,import org.apache.calcite.plan.RelOptRuleOperand;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,78,public static final ProjectToWindowRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,81,public static final ProjectToWindowRule PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,93,public ProjectToWindowRule(RelOptRuleOperand operand,
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,94,RelBuilderFactory relBuilderFactory, String description) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,95,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,114,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,115,operandJ(Calc.class, null,
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,116,calc -> RexOver.containsOver(calc.getProgram()), any()),
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,117,relBuilderFactory, "ProjectToWindowRule");
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,120,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,121,Calc calc = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,122,assert RexOver.containsOver(calc.getProgram());
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,145,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,146,operandJ(Project.class, null,
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,147,project -> RexOver.containsOver(project.getProjects(), null),
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,148,any()),
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,149,relBuilderFactory, "ProjectToWindowRule:project");
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,154,assert RexOver.containsOver(project.getProjects(), null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,50,public static final ProjectWindowTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,59,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,60,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,61,operand(LogicalWindow.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,62,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,66,final LogicalProject project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,67,final LogicalWindow window = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,180,final LogicalProject newTopProj = project.copy(
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,193,private ImmutableBitSet findReference(final LogicalProject project,
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,194,final LogicalWindow window) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,28,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,44,import static org.apache.calcite.plan.RelOptRule.any;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,45,import static org.apache.calcite.plan.RelOptRule.none;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,46,import static org.apache.calcite.plan.RelOptRule.operand;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,47,import static org.apache.calcite.plan.RelOptRule.operandJ;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,48,import static org.apache.calcite.plan.RelOptRule.some;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,49,import static org.apache.calcite.plan.RelOptRule.unordered;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,77,operand(LogicalUnion.class,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,78,unordered(operandJ(Values.class, null, Values::isEmpty, none()))),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,80,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,81,final LogicalUnion union = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,83,assert inputs != null;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,85,for (RelNode input : inputs) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,86,if (!isEmpty(input)) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,95,builder.push(union).empty();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,108,call.transformTo(builder.build());
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,125,operand(LogicalMinus.class,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,126,unordered(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,127,operandJ(Values.class, null, Values::isEmpty, none()))),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,129,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,130,final LogicalMinus minus = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,132,assert inputs != null;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,134,for (RelNode input : inputs) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,135,if (!isEmpty(input)) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,140,break;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,148,builder.push(minus).empty();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,161,call.transformTo(builder.build());
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,179,operand(LogicalIntersect.class,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,180,unordered(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,181,operandJ(Values.class, null, Values::isEmpty, none()))),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,183,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,184,LogicalIntersect intersect = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,185,final RelBuilder builder = call.builder();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,186,builder.push(intersect).empty();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,187,call.transformTo(builder.build());
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,207,new RemoveEmptySingleRule(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,208,(Predicate<Project>) project -> true, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,222,new RemoveEmptySingleRule(Filter.class, "PruneEmptyFilter");
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,235,new RemoveEmptySingleRule(Sort.class, "PruneEmptySort");
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,249,operand(Sort.class, any()), "PruneSortLimit0") {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,251,Sort sort = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,252,if (sort.fetch != null
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,254,&& RexLiteral.intValue(sort.fetch) == 0) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,276,new RemoveEmptySingleRule(Aggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,277,(Predicate<Aggregate>) Aggregate::isNotGrandTotal,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,278,RelFactories.LOGICAL_BUILDER, "PruneEmptyAggregate");
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,292,operand(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,293,some(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,294,operandJ(Values.class, null, Values::isEmpty, none()),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,295,operand(RelNode.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,298,Join join = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,299,if (join.getJoinType().generatesNullsOnLeft()) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,302,return;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,304,call.transformTo(call.builder().push(join).empty().build());
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,320,operand(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,321,some(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,322,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,323,operandJ(Values.class, null, Values::isEmpty, none()))),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,326,Join join = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,327,if (join.getJoinType().generatesNullsOnRight()) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,330,return;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,332,call.transformTo(call.builder().push(join).empty().build());
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,343,description);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,350,super(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,351,operandJ(clazz, null, predicate,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,352,operandJ(Values.class, null, Values::isEmpty, none())),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,353,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,361,this(clazz, (Predicate<R>) predicate::apply, relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,362,description);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,365,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,70,public static final ReduceDecimalsRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,79,super(operand(LogicalCalc.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,85,public Convention getOutConvention() {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,90,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,124,public class DecimalShuttle extends RexShuttle {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,129,public DecimalShuttle(RexBuilder rexBuilder) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,222,private class ExpanderMap {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,271,public RexExpander getExpander(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,293,public abstract class RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,297,RexBuilder builder;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,303,RelDataType int8;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,309,RelDataType real8;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,314,public RexExpander(RexBuilder builder) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,725,private class CastExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,823,private class BinaryArithmeticExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,834,public RexNode expand(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1014,private class FloorExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1063,private class CeilExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1114,private class CaseExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1151,private class PassThroughExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1156,public boolean canExpand(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1186,private class CastArgAsDoubleExpander extends CastArgAsTypeExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1206,private abstract class CastArgAsTypeExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1213,public RexNode expand(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1246,private class ReinterpretExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1251,public boolean canExpand(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1256,public RexNode expand(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,114,public static final ReduceExpressionsRule PROJECT_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,122,public static final ReduceExpressionsRule JOIN_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,130,public static final ReduceExpressionsRule CALC_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,134,protected final boolean matchNullability;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,141,public static class FilterReduceExpressionsRule extends ReduceExpressionsRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,145,this(filterClass, true, relBuilderFactory);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,150,super(filterClass, matchNullability, relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,164,matchNullability)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,268,public static class ProjectReduceExpressionsRule extends ReduceExpressionsRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,272,this(projectClass, true, relBuilderFactory);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,277,super(projectClass, matchNullability, relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,289,matchNullability)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,305,public static class JoinReduceExpressionsRule extends ReduceExpressionsRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,309,this(joinClass, true, relBuilderFactory);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,314,super(joinClass, matchNullability, relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,332,matchNullability)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,361,public static class CalcReduceExpressionsRule extends ReduceExpressionsRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,365,this(calcClass, true, relBuilderFactory);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,370,super(calcClass, matchNullability, relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,392,matchNullability)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,465,protected ReduceExpressionsRule(Class<? extends RelNode> clazz,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,466,boolean matchNullability, RelBuilderFactory relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,467,String description) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,468,super(operand(clazz, any()), relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,469,this.matchNullability = matchNullability;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,473,protected ReduceExpressionsRule(Class<? extends RelNode> clazz,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,474,RelBuilderFactory relBuilderFactory, String description) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,475,this(clazz, true, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,830,private final RelDataTypeFactory typeFactory;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,849,this.typeFactory = typeFactory;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,40,public static final SemiJoinFilterTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,49,super(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,51,some(operand(LogicalFilter.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,52,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,58,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,60,LogicalFilter filter = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,62,RelNode newSemiJoin =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,49,public static final SemiJoinJoinTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,58,super(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,60,some(operand(Join.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,61,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,67,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,79,int nFieldsX = join.getLeft().getRowType().getFieldList().size();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,80,int nFieldsY = join.getRight().getRowType().getFieldList().size();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,81,int nFieldsZ = semiJoin.getRight().getRowType().getFieldList().size();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,82,int nTotalFields = nFieldsX + nFieldsY + nFieldsZ;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,112,RexNode newSemiJoinFilter;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,154,RelNode leftSemiJoinOp;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,167,RelNode leftJoinRel;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,168,RelNode rightJoinRel;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,170,leftJoinRel = newSemiJoin;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,171,rightJoinRel = join.getRight();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,173,leftJoinRel = join.getLeft();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,174,rightJoinRel = newSemiJoin;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,177,RelNode newJoinRel =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,181,leftJoinRel,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,182,rightJoinRel,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,186,call.transformTo(newJoinRel);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,36,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,56,public static final SemiJoinProjectTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,65,super(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,67,some(operand(LogicalProject.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,68,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,73,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,75,LogicalProject project = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,121,RexBuilder rexBuilder = project.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,122,RelDataTypeFactory typeFactory = rexBuilder.getTypeFactory();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,123,RelNode rightChild = semiJoin.getRight();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,37,public static final SemiJoinRemoveRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,49,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,61,public static final SemiJoinRule PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,65,public static final SemiJoinRule JOIN =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,69,protected SemiJoinRule(Class<Project> projectClass, Class<Join> joinClass,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,70,Class<Aggregate> aggregateClass, RelBuilderFactory relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,71,String description) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,72,super(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,73,operand(projectClass,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,74,some(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,76,some(operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,77,operand(aggregateClass, any()))))),
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,78,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,81,protected SemiJoinRule(Class<Join> joinClass, Class<Aggregate> aggregateClass,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,82,RelBuilderFactory relBuilderFactory, String description) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,83,super(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,85,some(operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,87,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,155,super(projectClass, joinClass, aggregateClass,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,156,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,176,super(joinClass, aggregateClass, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,181,final Join join = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,182,final RelNode left = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,183,final Aggregate aggregate = call.rel(2);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,184,perform(call, null, join, left, aggregate);
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,29,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,47,public static final SortJoinTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,57,this(sortClass, joinClass, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,63,super(
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,64,operand(sortClass,
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,65,operand(joinClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,66,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,30,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,55,public static final SortProjectTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,65,this(sortClass, projectClass, RelFactories.LOGICAL_BUILDER, null);
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,73,this(sortClass, projectClass, RelFactories.LOGICAL_BUILDER, description);
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,81,this(
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,82,operand(sortClass,
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,84,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,90,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,95,super(operand);
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,100,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,152,equiv = ImmutableMap.of((RelNode) newSort, project.getInput());
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveConstantKeysRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveConstantKeysRule.java,26,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveConstantKeysRule.java,42,public static final SortRemoveConstantKeysRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveConstantKeysRule.java,46,super(
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveConstantKeysRule.java,47,operand(Sort.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveConstantKeysRule.java,48,RelFactories.LOGICAL_BUILDER, "SortRemoveConstantKeysRule");
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,35,public static final SortRemoveRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,44,super(operand(Sort.class, any()), relBuilderFactory, "SortRemoveRule");
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,22,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,52,private final boolean matchNullFetch;
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,57,this(Sort.class, Union.class, matchNullFetch, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,70,super(
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,71,operand(sortClass,
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,72,operand(unionClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,73,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,74,this.matchNullFetch = matchNullFetch;
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,87,&& (matchNullFetch || sort.fetch != null);
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,90,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,21,import org.apache.calcite.plan.RelOptRuleOperand;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,44,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,68,public static final SubQueryRemoveRule PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,71,public static final SubQueryRemoveRule FILTER =
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,74,public static final SubQueryRemoveRule JOIN =
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,84,public SubQueryRemoveRule(RelOptRuleOperand operand,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,85,RelBuilderFactory relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,86,String description) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,87,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,497,public static class SubQueryProjectRemoveRule extends SubQueryRemoveRule {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,498,public SubQueryProjectRemoveRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,499,super(
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,500,operandJ(Project.class, null,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,501,RexUtil.SubQueryFinder::containsSubQuery, any()),
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,502,relBuilderFactory, "SubQueryRemoveRule:Project");
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,505,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,506,final Project project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,507,final RelBuilder builder = call.builder();
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,508,final RexSubQuery e =
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,509,RexUtil.SubQueryFinder.find(project.getProjects());
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,510,assert e != null;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,511,final RelOptUtil.Logic logic =
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,512,LogicVisitor.find(RelOptUtil.Logic.TRUE_FALSE_UNKNOWN,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,513,project.getProjects(), e);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,514,builder.push(project.getInput());
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,515,final int fieldCount = builder.peek().getRowType().getFieldCount();
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,517,logic, builder, 1, fieldCount);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,518,final RexShuttle shuttle = new ReplaceSubQueryShuttle(e, target);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,519,builder.project(shuttle.apply(project.getProjects()),
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,520,project.getRowType().getFieldNames());
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,521,call.transformTo(builder.build());
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,527,public static class SubQueryFilterRemoveRule extends SubQueryRemoveRule {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,528,public SubQueryFilterRemoveRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,529,super(
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,530,operandJ(Filter.class, null, RexUtil.SubQueryFinder::containsSubQuery,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,531,any()), relBuilderFactory, "SubQueryRemoveRule:Filter");
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,534,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,535,final Filter filter = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,536,final RelBuilder builder = call.builder();
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,537,builder.push(filter.getInput());
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,538,int count = 0;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,539,RexNode c = filter.getCondition();
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,540,while (true) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,541,final RexSubQuery e = RexUtil.SubQueryFinder.find(c);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,542,if (e == null) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,543,assert count > 0;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,544,break;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,546,++count;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,547,final RelOptUtil.Logic logic =
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,548,LogicVisitor.find(RelOptUtil.Logic.TRUE, ImmutableList.of(c), e);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,549,final Set<CorrelationId>  variablesSet =
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,550,RelOptUtil.getVariablesUsed(e.rel);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,551,final RexNode target = apply(e, variablesSet, logic,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,552,builder, 1, builder.peek().getRowType().getFieldCount());
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,553,final RexShuttle shuttle = new ReplaceSubQueryShuttle(e, target);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,554,c = c.accept(shuttle);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,556,builder.filter(c);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,557,builder.project(fields(builder, filter.getRowType().getFieldCount()));
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,558,call.transformTo(builder.build());
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,564,public static class SubQueryJoinRemoveRule extends SubQueryRemoveRule {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,565,public SubQueryJoinRemoveRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,566,super(
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,567,operandJ(Join.class, null, RexUtil.SubQueryFinder::containsSubQuery,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,568,any()), relBuilderFactory, "SubQueryRemoveRule:Join");
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,571,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,572,final Join join = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,573,final RelBuilder builder = call.builder();
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,574,final RexSubQuery e =
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,575,RexUtil.SubQueryFinder.find(join.getCondition());
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,576,assert e != null;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,578,LogicVisitor.find(RelOptUtil.Logic.TRUE,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,579,ImmutableList.of(join.getCondition()), e);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,580,builder.push(join.getLeft());
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,581,builder.push(join.getRight());
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,582,final int fieldCount = join.getRowType().getFieldCount();
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,584,logic, builder, 2, fieldCount);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,586,builder.join(join.getJoinType(), shuttle.apply(join.getCondition()));
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,587,builder.project(fields(builder, join.getRowType().getFieldCount()));
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,588,call.transformTo(builder.build());
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,37,new TableScanRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,47,super(operand(LogicalTableScan.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,52,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,32,public static final UnionEliminatorRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,40,public UnionEliminatorRule(Class<? extends Union> clazz,
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,42,super(operand(clazz, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,43,public static final UnionMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,46,public static final UnionMergeRule INTERSECT_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,49,public static final UnionMergeRule MINUS_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,56,public UnionMergeRule(Class<? extends SetOp> unionClazz, String description,
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,58,super(
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,59,operand(unionClazz,
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,60,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,61,operand(RelNode.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,62,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,66,public UnionMergeRule(Class<? extends Union> unionClazz,
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,68,this(unionClazz, null, RelBuilder.proto(setOpFactory));
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,73,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/UnionPullUpConstantsRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/UnionPullUpConstantsRule.java,50,public static final UnionPullUpConstantsRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,36,public static final UnionToDistinctRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,44,public UnionToDistinctRule(Class<? extends Union> unionClazz,
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,52,this(unionClazz, RelBuilder.proto(setOpFactory));
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,57,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,75,public static final ValuesReduceRule FILTER_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,92,public static final ValuesReduceRule PROJECT_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,109,public static final ValuesReduceRule PROJECT_FILTER_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,134,public ValuesReduceRule(RelOptRuleOperand operand,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,135,RelBuilderFactory relBuilderFactory, String desc) {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,136,super(operand, relBuilderFactory, desc);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,137,Util.discard(LOGGER);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,29,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,44,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,60,new DeltaProjectTransposeRule(RelFactories.LOGICAL_BUILDER),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,61,new DeltaFilterTransposeRule(RelFactories.LOGICAL_BUILDER),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,62,new DeltaAggregateTransposeRule(RelFactories.LOGICAL_BUILDER),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,63,new DeltaSortTransposeRule(RelFactories.LOGICAL_BUILDER),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,64,new DeltaUnionTransposeRule(RelFactories.LOGICAL_BUILDER),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,65,new DeltaJoinTransposeRule(RelFactories.LOGICAL_BUILDER),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,66,new DeltaTableScanRule(RelFactories.LOGICAL_BUILDER),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,67,new DeltaTableScanToEmptyRule(RelFactories.LOGICAL_BUILDER));
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,77,public DeltaProjectTransposeRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,78,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,79,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,80,operand(Project.class, any())),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,81,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,104,public DeltaFilterTransposeRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,105,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,106,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,107,operand(Filter.class, any())),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,108,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,130,public DeltaAggregateTransposeRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,131,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,132,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,134,any())),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,135,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,159,public DeltaSortTransposeRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,160,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,161,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,162,operand(Sort.class, any())),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,163,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,186,public DeltaUnionTransposeRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,187,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,188,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,189,operand(Union.class, any())),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,190,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,221,public DeltaTableScanRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,222,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,223,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,224,operand(TableScan.class, none())),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,225,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,262,public DeltaTableScanToEmptyRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,263,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,264,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,265,operand(TableScan.class, none())),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,266,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,296,this(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,304,public DeltaJoinTransposeRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,305,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,306,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,307,operand(Join.class, any())),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,308,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,311,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,24,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,240,new FilterJoinRule.FilterIntoJoinRule(true, f,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,243,new FilterProjectTransposeRule(Filter.class, Project.class, true,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,261,new FilterJoinRule.FilterIntoJoinRule(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,262,true, f,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,265,new FilterJoinRule.JoinConditionPushRule(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,266,f,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1744,private final class RemoveSingleAggregateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1745,RemoveSingleAggregateRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1746,super(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1747,operand(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1749,operand(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1752,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1755,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1796,private final class RemoveCorrelationForScalarProjectRule extends RelOptRule {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1797,RemoveCorrelationForScalarProjectRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1798,super(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1800,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1803,operand(RelNode.class, any())))),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1804,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1807,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1815,setCurrent(call.getPlanner().getRoot(), correlate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1830,RexNode joinCond = relBuilder.literal(true);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1832,|| (joinCond != relBuilder.literal(true))) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1854,&& cm.mapRefRelToCorRef.containsKey(right)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1920,if (!checkCorVars(correlate, project, filter, correlatedKeyList)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1934,removeCorrelationExpr(filter.getCondition(), false);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1945,if (!checkCorVars(correlate, project, null, null)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1960,createProjectWithAdditionalExprs(right,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1962,Pair.of(relBuilder.literal(true), "nullIndicator")));
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1984,projectJoinOutputWithNullability(join, project, nullIndicatorPos);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1988,removeCorVarFromTree(correlate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1993,private final class RemoveCorrelationForScalarAggregateRule
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1994,extends RelOptRule {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1995,RemoveCorrelationForScalarAggregateRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1996,super(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1998,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2002,operand(RelNode.class, any()))))),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2003,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2006,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2017,setCurrent(call.getPlanner().getRoot(), correlate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2067,&& cm.mapRefRelToCorRef.containsKey(right)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2108,removeCorrelationExpr(joinKey, false);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2131,if (!checkCorVars(correlate,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2132,aggInputProject,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2133,filter,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2181,joinCond =
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2182,removeCorrelationExpr(filter.getCondition(), false);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2190,if (!checkCorVars(correlate, aggInputProject, null, null)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2254,right =
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2255,createProjectWithAdditionalExprs(right,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2256,ImmutableList.of(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2257,Pair.of(rexBuilder.makeLiteral(true),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2288,removeCorrelationExpr(aggInputProjExpr,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2343,removeCorrelationExpr(aggOutputProjects.get(0), false);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2355,removeCorVarFromTree(correlate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2368,private final class AdjustProjectForCountAggregateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2369,final boolean flavor;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2371,AdjustProjectForCountAggregateRule(boolean flavor,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2373,super(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2374,flavor
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2376,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2380,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2382,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2383,this.flavor = flavor;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2386,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2391,if (flavor) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2418,if (generatedCorRels.contains(correlate)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2424,setCurrent(call.getPlanner().getRoot(), correlate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2444,RexNode joinCond = relBuilder.literal(true);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2446,|| (joinCond != relBuilder.literal(true))) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2484,generatedCorRels.add(newCorrelate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2489,if (cm.mapCorToCorRel.get(correlate.getCorrelationId()) == correlate) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2490,cm.mapCorToCorRel.put(correlate.getCorrelationId(), newCorrelate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2494,aggregateCorrelatorOutput(newCorrelate, aggOutputProject, isCount);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,30,import org.apache.calcite.rel.core.RelFactories;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,54,import org.apache.calcite.tools.RelBuilderFactory;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,82,public static final DruidFilterRule FILTER =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,83,new DruidFilterRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,84,public static final DruidProjectRule PROJECT =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,85,new DruidProjectRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,86,public static final DruidAggregateRule AGGREGATE =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,87,new DruidAggregateRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,88,public static final DruidAggregateProjectRule AGGREGATE_PROJECT =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,89,new DruidAggregateProjectRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,90,public static final DruidSortRule SORT =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,91,new DruidSortRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,92,public static final DruidSortProjectTransposeRule SORT_PROJECT_TRANSPOSE =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,93,new DruidSortProjectTransposeRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,94,public static final DruidProjectSortTransposeRule PROJECT_SORT_TRANSPOSE =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,95,new DruidProjectSortTransposeRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,96,public static final DruidProjectFilterTransposeRule PROJECT_FILTER_TRANSPOSE =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,97,new DruidProjectFilterTransposeRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,98,public static final DruidFilterProjectTransposeRule FILTER_PROJECT_TRANSPOSE =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,99,new DruidFilterProjectTransposeRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,100,public static final DruidAggregateFilterTransposeRule AGGREGATE_FILTER_TRANSPOSE =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,101,new DruidAggregateFilterTransposeRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,102,public static final DruidFilterAggregateTransposeRule FILTER_AGGREGATE_TRANSPOSE =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,103,new DruidFilterAggregateTransposeRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,105,new DruidPostAggregationProjectRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,106,public static final DruidAggregateExtractProjectRule PROJECT_EXTRACT_RULE =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,107,new DruidAggregateExtractProjectRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,109,new DruidHavingFilterRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,130,public static class DruidFilterRule extends RelOptRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,137,public DruidFilterRule(RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,138,super(operand(Filter.class, operand(DruidQuery.class, none())),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,139,relBuilderFactory, null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,142,public void onMatch(RelOptRuleCall call) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,246,public static class DruidHavingFilterRule extends RelOptRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,248,public DruidHavingFilterRule(RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,249,super(operand(Filter.class, operand(DruidQuery.class, none())),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,250,relBuilderFactory, null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,276,public static class DruidProjectRule extends RelOptRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,283,public DruidProjectRule(RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,284,super(operand(Project.class, operand(DruidQuery.class, none())),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,285,relBuilderFactory, null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,288,public void onMatch(RelOptRuleCall call) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,371,public static class DruidPostAggregationProjectRule extends RelOptRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,378,public DruidPostAggregationProjectRule(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,379,RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,380,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,381,operand(Project.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,382,operand(DruidQuery.class, none())),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,383,relBuilderFactory, null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,386,public void onMatch(RelOptRuleCall call) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,426,public static class DruidAggregateRule extends RelOptRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,433,public DruidAggregateRule(RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,434,super(operand(Aggregate.class, operand(DruidQuery.class, none())),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,435,relBuilderFactory, null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,438,public void onMatch(RelOptRuleCall call) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,472,public static class DruidAggregateProjectRule extends RelOptRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,479,public DruidAggregateProjectRule(RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,480,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,481,operand(Aggregate.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,482,operand(Project.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,483,operand(DruidQuery.class, none()))),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,484,relBuilderFactory, null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,487,public void onMatch(RelOptRuleCall call) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,714,public static class DruidSortProjectTransposeRule
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,715,extends SortProjectTransposeRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,722,public DruidSortProjectTransposeRule(RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,723,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,724,operand(Sort.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,725,operand(Project.class, operand(DruidQuery.class, none()))),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,726,relBuilderFactory, null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,735,public static class DruidProjectSortTransposeRule
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,743,public DruidProjectSortTransposeRule(RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,744,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,745,operand(Project.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,746,operand(Sort.class, operand(DruidQuery.class, none()))),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,747,relBuilderFactory, null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,755,public static class DruidSortRule extends RelOptRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,762,public DruidSortRule(RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,763,super(operand(Sort.class, operand(DruidQuery.class, none())),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,764,relBuilderFactory, null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,767,public void onMatch(RelOptRuleCall call) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,795,public static class DruidProjectFilterTransposeRule
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,796,extends ProjectFilterTransposeRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,803,public DruidProjectFilterTransposeRule(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,804,RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,805,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,806,operand(Project.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,807,operand(Filter.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,808,operand(DruidQuery.class, none()))),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,819,public static class DruidFilterProjectTransposeRule
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,820,extends FilterProjectTransposeRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,827,public DruidFilterProjectTransposeRule(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,828,RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,829,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,830,operand(Filter.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,831,operand(Project.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,832,operand(DruidQuery.class, none()))),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,833,true, true, relBuilderFactory);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,842,public static class DruidAggregateFilterTransposeRule
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,843,extends AggregateFilterTransposeRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,850,public DruidAggregateFilterTransposeRule(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,851,RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,852,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,853,operand(Aggregate.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,854,operand(Filter.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,855,operand(DruidQuery.class, none()))),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,856,relBuilderFactory);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,865,public static class DruidFilterAggregateTransposeRule
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,866,extends FilterAggregateTransposeRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,873,public DruidFilterAggregateTransposeRule(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,874,RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,875,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,876,operand(Filter.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,877,operand(Aggregate.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,878,operand(DruidQuery.class, none()))),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,879,relBuilderFactory);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,889,public static class DruidAggregateExtractProjectRule
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,890,extends AggregateExtractProjectRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,897,public DruidAggregateExtractProjectRule(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,898,RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,899,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,900,operand(Aggregate.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,901,operand(DruidQuery.class, none())),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,902,relBuilderFactory);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,24,import org.apache.calcite.plan.RelTrait;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,167,final Convention out;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,169,ElasticsearchConverterRule(Class<? extends RelNode> clazz, RelTrait in, Convention out,
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,170,String description) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,171,super(clazz, in, out, description);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,172,this.out = out;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,181,private static final ElasticsearchSortRule INSTANCE =
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,182,new ElasticsearchSortRule();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,184,private ElasticsearchSortRule() {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,185,super(Sort.class, Convention.NONE, ElasticsearchRel.CONVENTION,
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,203,private static final ElasticsearchFilterRule INSTANCE = new ElasticsearchFilterRule();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,205,private ElasticsearchFilterRule() {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,206,super(LogicalFilter.class, Convention.NONE, ElasticsearchRel.CONVENTION,
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,224,private static final ElasticsearchProjectRule INSTANCE = new ElasticsearchProjectRule();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,226,private ElasticsearchProjectRule() {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,227,super(LogicalProject.class, Convention.NONE, ElasticsearchRel.CONVENTION,
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverterRule.java,23,import org.apache.calcite.rel.core.RelFactories;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverterRule.java,24,import org.apache.calcite.tools.RelBuilderFactory;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverterRule.java,26,import java.util.function.Predicate;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverterRule.java,33,static final ConverterRule INSTANCE =
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverterRule.java,34,new ElasticsearchToEnumerableConverterRule(RelFactories.LOGICAL_BUILDER);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverterRule.java,41,private ElasticsearchToEnumerableConverterRule(
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverterRule.java,42,RelBuilderFactory relBuilderFactory) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverterRule.java,43,super(RelNode.class, (Predicate<RelNode>) r -> true,
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverterRule.java,44,ElasticsearchRel.CONVENTION, EnumerableConvention.INSTANCE,
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverterRule.java,45,relBuilderFactory, "ElasticsearchToEnumerableConverterRule");
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,19,import org.apache.calcite.plan.RelOptRule;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,25,import org.apache.calcite.tools.RelBuilderFactory;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,34,public class CsvProjectTableScanRule extends RelOptRule {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,35,public static final CsvProjectTableScanRule INSTANCE =
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,43,public CsvProjectTableScanRule(RelBuilderFactory relBuilderFactory) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,44,super(
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,45,operand(LogicalProject.class,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,46,operand(CsvTableScan.class, none())),
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,47,relBuilderFactory,
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,45,import java.util.function.Predicate;
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,146,private static final GeodeProjectRule INSTANCE = new GeodeProjectRule();
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,148,private GeodeProjectRule() {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,149,super(LogicalProject.class, "GeodeProjectRule");
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,166,final RelTraitSet traitSet = project.getTraitSet().replace(out);
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,170,convert(project.getInput(), out),
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,182,private static final GeodeAggregateRule INSTANCE = new GeodeAggregateRule();
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,184,GeodeAggregateRule() {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,185,super(LogicalAggregate.class, "GeodeAggregateRule");
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,190,final RelTraitSet traitSet = aggregate.getTraitSet().replace(out);
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,206,private static class GeodeSortLimitRule extends RelOptRule {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,209,new GeodeSortLimitRule(
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,211,sort -> sort.offset == null);
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,213,GeodeSortLimitRule(Predicate<Sort> predicate) {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,214,super(operandJ(Sort.class, null, predicate, any()), "GeodeSortLimitRule");
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,236,private static class GeodeFilterRule extends RelOptRule {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,238,private static final GeodeFilterRule INSTANCE = new GeodeFilterRule();
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,240,private GeodeFilterRule() {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,241,super(operand(LogicalFilter.class, operand(GeodeTableScan.class, none())),
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,332,public void onMatch(RelOptRuleCall call) {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,356,protected final Convention out;
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,358,GeodeConverterRule(Class<? extends RelNode> clazz, String description) {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,359,super(clazz, Convention.NONE, GeodeRel.CONVENTION, description);
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,360,this.out = GeodeRel.CONVENTION;
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeToEnumerableConverterRule.java,30,public static final ConverterRule INSTANCE = new GeodeToEnumerableConverterRule();
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeToEnumerableConverterRule.java,32,private GeodeToEnumerableConverterRule() {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeToEnumerableConverterRule.java,33,super(RelNode.class, GeodeRel.CONVENTION, EnumerableConvention.INSTANCE,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,24,import org.apache.calcite.plan.RelTrait;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,250,protected final Convention out;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,252,MongoConverterRule(Class<? extends RelNode> clazz, RelTrait in,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,253,Convention out, String description) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,254,super(clazz, in, out, description);
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,255,this.out = out;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,264,public static final MongoSortRule INSTANCE = new MongoSortRule();
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,266,private MongoSortRule() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,267,super(Sort.class, Convention.NONE, MongoRel.CONVENTION,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,271,public RelNode convert(RelNode rel) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,287,private static final MongoFilterRule INSTANCE = new MongoFilterRule();
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,289,private MongoFilterRule() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,290,super(LogicalFilter.class, Convention.NONE, MongoRel.CONVENTION,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,294,public RelNode convert(RelNode rel) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,310,private static final MongoProjectRule INSTANCE = new MongoProjectRule();
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,312,private MongoProjectRule() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,313,super(LogicalProject.class, Convention.NONE, MongoRel.CONVENTION,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,317,public RelNode convert(RelNode rel) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,500,public static final RelOptRule INSTANCE = new MongoAggregateRule();
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,502,private MongoAggregateRule() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,503,super(LogicalAggregate.class, Convention.NONE, MongoRel.CONVENTION,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,507,public RelNode convert(RelNode rel) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,23,import org.apache.calcite.rel.core.RelFactories;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,24,import org.apache.calcite.tools.RelBuilderFactory;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,26,import java.util.function.Predicate;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,33,public static final ConverterRule INSTANCE =
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,34,new MongoToEnumerableConverterRule(RelFactories.LOGICAL_BUILDER);
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,41,public MongoToEnumerableConverterRule(RelBuilderFactory relBuilderFactory) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,42,super(RelNode.class, (Predicate<RelNode>) r -> true, MongoRel.CONVENTION,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,43,EnumerableConvention.INSTANCE, relBuilderFactory,
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,54,private static final PigFilterRule INSTANCE = new PigFilterRule();
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,56,private PigFilterRule() {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,57,super(LogicalFilter.class, Convention.NONE, PigRel.CONVENTION, "PigFilterRule");
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,60,public RelNode convert(RelNode rel) {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,73,private static final PigTableScanRule INSTANCE = new PigTableScanRule();
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,75,private PigTableScanRule() {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,76,super(LogicalTableScan.class, Convention.NONE, PigRel.CONVENTION, "PigTableScanRule");
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,79,public RelNode convert(RelNode rel) {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,81,final RelTraitSet traitSet = scan.getTraitSet().replace(PigRel.CONVENTION);
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,91,private static final PigProjectRule INSTANCE = new PigProjectRule();
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,93,private PigProjectRule() {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,94,super(LogicalProject.class, Convention.NONE, PigRel.CONVENTION, "PigProjectRule");
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,97,public RelNode convert(RelNode rel) {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,110,private static final PigAggregateRule INSTANCE = new PigAggregateRule();
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,112,private PigAggregateRule() {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,113,super(LogicalAggregate.class, Convention.NONE, PigRel.CONVENTION, "PigAggregateRule");
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,116,public RelNode convert(RelNode rel) {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,129,private static final PigJoinRule INSTANCE = new PigJoinRule();
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,131,private PigJoinRule() {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,132,super(LogicalJoin.class, Convention.NONE, PigRel.CONVENTION, "PigJoinRule");
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,135,public RelNode convert(RelNode rel) {
pig/src/main/java/org/apache/calcite/adapter/pig/PigToEnumerableConverterRule.java,29,public static final ConverterRule INSTANCE =
pig/src/main/java/org/apache/calcite/adapter/pig/PigToEnumerableConverterRule.java,30,new PigToEnumerableConverterRule();
pig/src/main/java/org/apache/calcite/adapter/pig/PigToEnumerableConverterRule.java,32,private PigToEnumerableConverterRule() {
pig/src/main/java/org/apache/calcite/adapter/pig/PigToEnumerableConverterRule.java,33,super(RelNode.class, PigRel.CONVENTION, EnumerableConvention.INSTANCE,
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,17,package org.apache.calcite.adapter.spark;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,19,import org.apache.calcite.adapter.enumerable.EnumerableConvention;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,20,import org.apache.calcite.plan.RelTraitSet;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,21,import org.apache.calcite.rel.RelNode;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,22,import org.apache.calcite.rel.convert.ConverterRule;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,23,import org.apache.calcite.rel.core.RelFactories;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,24,import org.apache.calcite.tools.RelBuilderFactory;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,26,import java.util.function.Predicate;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,33,public class EnumerableToSparkConverterRule extends ConverterRule {
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,34,public static final EnumerableToSparkConverterRule INSTANCE =
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,35,new EnumerableToSparkConverterRule(RelFactories.LOGICAL_BUILDER);
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,42,public EnumerableToSparkConverterRule(RelBuilderFactory relBuilderFactory) {
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,43,super(RelNode.class, (Predicate<RelNode>) r -> true,
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,44,EnumerableConvention.INSTANCE, SparkRel.CONVENTION, relBuilderFactory,
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,48,public RelNode convert(RelNode rel) {
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,49,RelTraitSet newTraitSet = rel.getTraitSet().replace(getOutTrait());
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,50,return new EnumerableToSparkConverter(
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,51,rel.getCluster(), newTraitSet, rel);
spark/src/main/java/org/apache/calcite/adapter/spark/JdbcToSparkConverterRule.java,25,import java.util.function.Predicate;
spark/src/main/java/org/apache/calcite/adapter/spark/JdbcToSparkConverterRule.java,36,super(RelNode.class, (Predicate<RelNode>) r -> true, out,
spark/src/main/java/org/apache/calcite/adapter/spark/JdbcToSparkConverterRule.java,37,SparkRel.CONVENTION, relBuilderFactory, "JdbcToSparkConverterRule");
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,92,EnumerableToSparkConverterRule.INSTANCE,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,93,SparkToEnumerableConverterRule.INSTANCE,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,100,public static final EnumerableToSparkConverterRule INSTANCE =
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,101,new EnumerableToSparkConverterRule();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,103,private EnumerableToSparkConverterRule() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,104,super(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,105,RelNode.class, EnumerableConvention.INSTANCE, SparkRel.CONVENTION,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,117,public static final SparkToEnumerableConverterRule INSTANCE =
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,118,new SparkToEnumerableConverterRule();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,120,private SparkToEnumerableConverterRule() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,121,super(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,122,RelNode.class, SparkRel.CONVENTION, EnumerableConvention.INSTANCE,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,132,public static final SparkValuesRule SPARK_VALUES_RULE =
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,133,new SparkValuesRule();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,137,private SparkValuesRule() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,138,super(LogicalValues.class, Convention.NONE, SparkRel.CONVENTION,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,212,public static final SparkCalcRule SPARK_CALC_RULE =
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,213,new SparkCalcRule();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,219,private static class SparkCalcRule
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,220,extends ConverterRule {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,221,private SparkCalcRule() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,222,super(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,223,LogicalCalc.class,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,224,Convention.NONE,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,225,SparkRel.CONVENTION,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,229,public RelNode convert(RelNode rel) {
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,21,import org.apache.calcite.plan.RelOptRule;
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,25,import org.apache.calcite.rel.core.RelFactories;
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,57,extends RelOptRule {
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,76,new SplunkPushDownRule(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,77,operand(LogicalProject.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,78,operand(LogicalFilter.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,79,operand(LogicalProject.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,80,operand(SplunkTableScan.class, none())))),
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,81,RelFactories.LOGICAL_BUILDER, "proj on filter on proj");
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,84,new SplunkPushDownRule(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,85,operand(LogicalFilter.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,86,operand(LogicalProject.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,87,operand(SplunkTableScan.class, none()))),
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,88,RelFactories.LOGICAL_BUILDER, "filter on proj");
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,91,new SplunkPushDownRule(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,92,operand(LogicalFilter.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,93,operand(SplunkTableScan.class, none())),
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,94,RelFactories.LOGICAL_BUILDER, "filter");
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,97,new SplunkPushDownRule(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,98,operand(LogicalProject.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,99,operand(SplunkTableScan.class, none())),
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,100,RelFactories.LOGICAL_BUILDER, "proj");
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,103,protected SplunkPushDownRule(RelOptRuleOperand rule, String id) {
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,104,this(rule, RelFactories.LOGICAL_BUILDER, id);
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,108,protected SplunkPushDownRule(RelOptRuleOperand rule,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,110,super(rule, relBuilderFactory, "SplunkPushDownRule: " + id);
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,115,public void onMatch(RelOptRuleCall call) {
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,301,s = s.append(" NOT ");
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,34,import org.apache.calcite.linq4j.tree.UnaryExpression;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,279,defineUnary(UNARY_MINUS, Negate, NullPolicy.STRICT);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,280,defineUnary(UNARY_PLUS, UnaryPlus, NullPolicy.STRICT);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,300,jdbcImplementor.visitChild(0, getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,122,final Result leftResult = visitChild(0, e.getLeft()).resetAlias();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,123,final Result rightResult = visitChild(1, e.getRight()).resetAlias();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,152,Result x = visitChild(0, input);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,153,parseCorrelTable(e, x);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,165,final Builder builder = x.builder(e, Clause.WHERE);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,173,Result x = visitChild(0, e.getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,176,return x;
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,178,final Builder builder =
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,179,x.builder(e, Clause.SELECT);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,180,final List<SqlNode> selectList = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,182,SqlNode sqlExpr = builder.context.toSql(null, ref);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,183,addSelect(selectList, sqlExpr, e.getRowType());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,186,builder.setSelect(new SqlNodeList(selectList, POS));
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,193,final Result x = visitChild(0, e.getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,222,return builder.result();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,255,Result x = visitChild(0, e.getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,256,parseCorrelTable(e, x);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,258,Builder builder =
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,261,: x.builder(e);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,340,Result x = visitChild(0, e.getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,341,Builder builder = x.builder(e, Clause.ORDER_BY);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,348,x = builder.result();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,353,x = builder.result();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,358,x = builder.result();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,360,return x;
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,377,visitChild(0, modify.getInput()).asQueryOrValues();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,386,final Result input = visitChild(0, modify.getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,398,final Result input = visitChild(0, modify.getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,430,final Result x = visitChild(0, input);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,155,final Result result = visitChild(input.i, input.e);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,371,final ImmutableMap.Builder<String, RelDataType> builder =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,372,ImmutableMap.builder();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,867,final Expressions.FluentList<Clause> clauses;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,875,this.clauses = Expressions.list(clauses);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,933,return ((SqlCall) selectItem).operand(0);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,984,Clause maxClause = null;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,985,for (Clause clause : clauses) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,986,if (maxClause == null || clause.ordinal() > maxClause.ordinal()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,987,maxClause = clause;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,990,assert maxClause != null;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,991,return maxClause;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1070,ImmutableMap.of(neededAlias, neededType));
spark/src/main/java/org/apache/calcite/adapter/spark/JdbcToSparkConverter.java,116,jdbcImplementor.visitChild(0, getInput());
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,71,boolean deep, Resolved resolved) {
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,72,if (names.size() == 1
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,73,&& names.equals(withItem.name.names)) {
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,74,final SqlValidatorNamespace ns = validator.getNamespace(withItem);
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,75,final Step path = Path.EMPTY.plus(ns.getRowType(), 0, names.get(0),
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,76,StructKind.FULLY_QUALIFIED);
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,77,resolved.found(ns, false, null, path, null);
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,78,return;
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,80,super.resolve(names, nameMatcher, deep, resolved);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTableScan.java,66,planner.addRule(CassandraToEnumerableConverterRule.INSTANCE);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,23,import org.apache.calcite.rel.core.RelFactories;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,34,new CassandraToEnumerableConverterRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,33,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,90,new EnumerableToBindableConverterRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,22,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,34,new EnumerableInterpreterRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcConvention.java,23,import org.apache.calcite.rel.rules.FilterSetOpTransposeRule;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcConvention.java,24,import org.apache.calcite.rel.rules.ProjectRemoveRule;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcConvention.java,69,planner.addRule(FilterSetOpTransposeRule.INSTANCE);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcConvention.java,70,planner.addRule(ProjectRemoveRule.INSTANCE);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,117,ImmutableList.of(
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,118,NoneToBindableConverterRule.INSTANCE,
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,33,import org.apache.calcite.rel.rules.CalcSplitRule;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,34,import org.apache.calcite.rel.rules.FilterTableScanRule;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,35,import org.apache.calcite.rel.rules.ProjectTableScanRule;
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,35,new NoneToBindableConverterRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,28,import org.apache.calcite.rel.rules.AggregateFilterTransposeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,29,import org.apache.calcite.rel.rules.AggregateProjectMergeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,30,import org.apache.calcite.rel.rules.FilterJoinRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,31,import org.apache.calcite.rel.rules.JoinProjectTransposeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,32,import org.apache.calcite.rel.rules.ProjectFilterTransposeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,33,import org.apache.calcite.rel.rules.ProjectMergeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,34,import org.apache.calcite.rel.rules.ProjectRemoveRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,205,ImmutableList.of(ProjectFilterTransposeRule.INSTANCE,
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,206,AggregateProjectMergeRule.INSTANCE,
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,207,AggregateFilterTransposeRule.INSTANCE),
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,274,ImmutableList.of(
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,275,JoinProjectTransposeRule.RIGHT_PROJECT,
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,276,JoinProjectTransposeRule.LEFT_PROJECT,
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,277,FilterJoinRule.FilterIntoJoinRule.FILTER_ON_JOIN,
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,278,ProjectRemoveRule.INSTANCE,
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,279,ProjectMergeRule.INSTANCE),
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,24,import org.apache.calcite.rel.rules.FilterProjectTransposeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,25,import org.apache.calcite.rel.rules.ProjectMergeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,26,import org.apache.calcite.rel.rules.ProjectRemoveRule;
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,163,public boolean isDistinct() {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,169,public boolean isKey(ImmutableBitSet columns) {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,184,public final RelOptQuery getQuery() {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,210,public boolean isValid(boolean fail) {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,243,public final double getRows() {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,252,public final Set<String> getVariablesStopped() {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,285,public final RelOptCost computeSelfCost(RelOptPlanner planner) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,82,new AggregateExpandDistinctAggregatesRule(LogicalAggregate.class, true,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,83,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,88,new AggregateExpandDistinctAggregatesRule(LogicalAggregate.class, false,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,89,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,60,new AggregateFilterTransposeRule();
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,62,private AggregateFilterTransposeRule() {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,29,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,30,import org.apache.calcite.rel.logical.LogicalJoin;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,66,new AggregateJoinTransposeRule(LogicalAggregate.class, LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,67,RelFactories.LOGICAL_BUILDER, false);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,71,new AggregateJoinTransposeRule(LogicalAggregate.class, LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,72,RelFactories.LOGICAL_BUILDER, true);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,26,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,53,new AggregateProjectMergeRule(Aggregate.class, Project.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,25,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,26,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,65,new AggregateProjectPullUpConstantsRule(LogicalAggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,66,LogicalProject.class, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,71,new AggregateProjectPullUpConstantsRule(LogicalAggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,72,RelNode.class, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,26,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,27,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,86,new AggregateReduceFunctionsRule(operand(LogicalAggregate.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,87,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,24,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,39,new AggregateRemoveRule(LogicalAggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,40,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,34,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,38,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,64,new AggregateStarTableRule(
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,65,operandJ(Aggregate.class, null, Aggregate::isSimple,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,66,some(operand(StarTable.StarTableScan.class, none()))),
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,67,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,71,new AggregateStarTableRule(
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,72,operandJ(Aggregate.class, null, Aggregate::isSimple,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,73,operand(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,74,operand(StarTable.StarTableScan.class, none()))),
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,75,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,78,final Aggregate aggregate = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,79,final Project project = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,80,final StarTable.StarTableScan scan = call.rel(2);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,81,final RelNode rel =
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,82,AggregateProjectMergeRule.apply(call, aggregate, project);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,83,final Aggregate aggregate2;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,84,final Project project2;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,85,if (rel instanceof Aggregate) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,86,project2 = null;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,87,aggregate2 = (Aggregate) rel;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,89,project2 = (Project) rel;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,90,aggregate2 = (Aggregate) project2.getInput();
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,92,return;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,94,apply(call, project2, aggregate2, scan);
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,25,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,26,import org.apache.calcite.rel.logical.LogicalUnion;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,45,new AggregateUnionAggregateRule(LogicalAggregate.class, LogicalUnion.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,46,LogicalAggregate.class, RelNode.class, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,52,new AggregateUnionAggregateRule(LogicalAggregate.class, LogicalUnion.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,53,RelNode.class, LogicalAggregate.class, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,64,new AggregateUnionAggregateRule(LogicalAggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,65,LogicalUnion.class, RelNode.class, RelNode.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,66,RelFactories.LOGICAL_BUILDER, "AggregateUnionAggregateRule");
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,27,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,28,import org.apache.calcite.rel.logical.LogicalUnion;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,56,new AggregateUnionTransposeRule(LogicalAggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,57,LogicalUnion.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,57,new AggregateValuesRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,22,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,42,new CalcMergeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,22,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,41,new CalcRemoveRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,43,new CalcSplitRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,54,new FilterAggregateTransposeRule(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,55,RelFactories.LOGICAL_BUILDER, Aggregate.class);
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,22,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,43,new FilterCalcMergeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,45,new FilterCorrelateRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,57,new FilterIntoJoinRule(true, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,64,new FilterIntoJoinRule(false, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,37,new FilterMergeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,21,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,35,new FilterMultiJoinMergeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,46,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,45,new FilterRemoveIsNotDistinctFromRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,42,new FilterSetOpTransposeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,44,new FilterTableFunctionTransposeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,19,import org.apache.calcite.adapter.enumerable.EnumerableInterpreter;
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,60,new FilterTableScanRule(
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,61,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,62,operandJ(TableScan.class, null, FilterTableScanRule::test,
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,63,none())),
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,64,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,66,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,67,final Filter filter = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,68,final TableScan scan = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,69,apply(call, filter, scan);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,75,new FilterTableScanRule(
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,76,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,77,operand(EnumerableInterpreter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,78,operandJ(TableScan.class, null, FilterTableScanRule::test,
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,79,none()))),
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,80,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,82,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,83,final Filter filter = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,84,final TableScan scan = call.rel(2);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,85,apply(call, filter, scan);
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,22,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,49,new FilterToCalcRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,25,import org.apache.calcite.rel.logical.LogicalIntersect;
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,71,new IntersectToDistinctRule(LogicalIntersect.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,25,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,41,new JoinAddRedundantSemiJoinRule(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,42,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,26,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,54,new JoinAssociateRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,56,public static final JoinCommuteRule INSTANCE = new JoinCommuteRule(false);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,59,public static final JoinCommuteRule SWAP_OUTER = new JoinCommuteRule(true);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,74,private JoinCommuteRule(boolean swapOuter) {
core/src/main/java/org/apache/calcite/rel/rules/JoinExtractFilterRule.java,20,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/JoinExtractFilterRule.java,21,import org.apache.calcite.rel.logical.LogicalJoin;
core/src/main/java/org/apache/calcite/rel/rules/JoinExtractFilterRule.java,43,new JoinExtractFilterRule(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinExtractFilterRule.java,44,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,30,import org.apache.calcite.rel.logical.LogicalJoin;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,31,import org.apache.calcite.rel.logical.LogicalProject;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,62,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,63,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,64,operand(LogicalProject.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,65,operand(LogicalProject.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,69,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,70,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,71,some(operand(LogicalProject.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,75,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,76,operand(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,77,LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,78,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,79,operand(LogicalProject.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,83,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,84,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,85,operand(LogicalProject.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,86,operand(LogicalProject.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,88,true, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,91,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,92,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,93,some(operand(LogicalProject.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,95,true, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,98,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,99,operand(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,100,LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,101,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,102,operand(LogicalProject.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,104,true, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,41,new JoinPushExpressionsRule(Join.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,45,new JoinPushTransitivePredicatesRule(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,46,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,26,import org.apache.calcite.rel.logical.LogicalJoin;
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,107,new JoinToMultiJoinRule(LogicalJoin.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,39,new JoinUnionTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,40,operand(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,41,operand(Union.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,42,operand(RelNode.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,43,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,47,new JoinUnionTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,48,operand(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,49,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,50,operand(Union.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,51,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,70,new LoptOptimizeJoinRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,32,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,49,new MaterializedViewFilterScanRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,73,new MultiJoinOptimizeBushyRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,22,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,49,new ProjectCalcMergeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,28,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,50,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,25,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,26,import org.apache.calcite.rel.logical.LogicalFilter;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,27,import org.apache.calcite.rel.logical.LogicalProject;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,38,new ProjectFilterTransposeRule(LogicalProject.class, LogicalFilter.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,42,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,22,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,37,new ProjectMultiJoinMergeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,44,new ProjectRemoveRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,44,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,19,import org.apache.calcite.adapter.enumerable.EnumerableInterpreter;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,26,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,58,new ProjectTableScanRule(
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,59,operand(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,60,operandJ(TableScan.class, null, ProjectTableScanRule::test,
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,61,none())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,62,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,65,final Project project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,66,final TableScan scan = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,67,apply(call, project, scan);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,73,new ProjectTableScanRule(
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,74,operand(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,75,operand(EnumerableInterpreter.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,76,operandJ(TableScan.class, null, ProjectTableScanRule::test,
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,77,none()))),
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,78,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,81,final Project project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,82,final TableScan scan = call.rel(2);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,83,apply(call, project, scan);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,22,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,46,new ProjectToCalcRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,28,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,79,new CalcToWindowRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,82,new ProjectToLogicalProjectAndWindowRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,51,new ProjectWindowTransposeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,71,new ReduceDecimalsRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,31,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,32,import org.apache.calcite.rel.logical.LogicalCalc;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,33,import org.apache.calcite.rel.logical.LogicalFilter;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,34,import org.apache.calcite.rel.logical.LogicalProject;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,106,public static final ReduceExpressionsRule FILTER_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,108,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,115,new ProjectReduceExpressionsRule(LogicalProject.class, true,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,116,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,124,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,131,new CalcReduceExpressionsRule(LogicalCalc.class, true,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,132,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,41,new SemiJoinFilterTransposeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,50,new SemiJoinJoinTransposeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,57,new SemiJoinProjectTransposeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,64,private SemiJoinProjectTransposeRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,21,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,38,new SemiJoinRemoveRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,28,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,62,new ProjectToSemiJoinRule(Project.class, Join.class, Aggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,63,RelFactories.LOGICAL_BUILDER, "SemiJoinRule:project");
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,66,new JoinToSemiJoinRule(Join.class, Aggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,67,RelFactories.LOGICAL_BUILDER, "SemiJoinRule:join");
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,31,import org.apache.calcite.rel.logical.LogicalJoin;
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,32,import org.apache.calcite.rel.logical.LogicalSort;
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,48,new SortJoinTransposeRule(LogicalSort.class,
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,49,LogicalJoin.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,32,import org.apache.calcite.rel.logical.LogicalProject;
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,56,new SortProjectTransposeRule(Sort.class, LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,57,RelFactories.LOGICAL_BUILDER, null);
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveConstantKeysRule.java,43,new SortRemoveConstantKeysRule();
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveConstantKeysRule.java,45,private SortRemoveConstantKeysRule() {
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,36,new SortRemoveRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,42,public static final SortUnionTransposeRule INSTANCE = new SortUnionTransposeRule(false);
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,48,public static final SortUnionTransposeRule MATCH_NULL_FETCH = new SortUnionTransposeRule(true);
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,56,private SortUnionTransposeRule(boolean matchNullFetch) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,30,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,69,new SubQueryProjectRemoveRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,72,new SubQueryFilterRemoveRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,75,new SubQueryJoinRemoveRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,21,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,23,import org.apache.calcite.rel.logical.LogicalUnion;
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,33,new UnionEliminatorRule(LogicalUnion.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,27,import org.apache.calcite.rel.logical.LogicalIntersect;
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,28,import org.apache.calcite.rel.logical.LogicalMinus;
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,29,import org.apache.calcite.rel.logical.LogicalUnion;
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,44,new UnionMergeRule(LogicalUnion.class, "UnionMergeRule",
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,45,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,47,new UnionMergeRule(LogicalIntersect.class, "IntersectMergeRule",
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,48,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,50,new UnionMergeRule(LogicalMinus.class, "MinusMergeRule",
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,51,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/UnionPullUpConstantsRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/UnionPullUpConstantsRule.java,51,new UnionPullUpConstantsRule(Union.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,23,import org.apache.calcite.rel.logical.LogicalUnion;
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,37,new UnionToDistinctRule(LogicalUnion.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,25,import org.apache.calcite.rel.core.Values;
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,76,new ValuesReduceRule(
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,77,operand(LogicalFilter.class,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,78,operandJ(LogicalValues.class, null, Values::isNotEmpty, none())),
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,79,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,81,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,82,LogicalFilter filter = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,83,LogicalValues values = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,84,apply(call, null, filter, values);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,93,new ValuesReduceRule(
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,94,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,95,operandJ(LogicalValues.class, null, Values::isNotEmpty, none())),
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,96,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,98,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,99,LogicalProject project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,100,LogicalValues values = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,101,apply(call, project, null, values);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,110,new ValuesReduceRule(
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,111,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,112,operand(LogicalFilter.class,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,113,operandJ(LogicalValues.class, null, Values::isNotEmpty,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,114,none()))),
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,115,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,117,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,118,LogicalProject project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,119,LogicalFilter filter = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,120,LogicalValues values = call.rel(2);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,121,apply(call, project, filter, values);
core/src/main/java/org/apache/calcite/tools/Programs.java,40,import org.apache.calcite.rel.rules.AggregateExpandDistinctAggregatesRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,41,import org.apache.calcite.rel.rules.AggregateReduceFunctionsRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,42,import org.apache.calcite.rel.rules.AggregateStarTableRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,44,import org.apache.calcite.rel.rules.FilterAggregateTransposeRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,46,import org.apache.calcite.rel.rules.FilterJoinRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,47,import org.apache.calcite.rel.rules.FilterProjectTransposeRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,48,import org.apache.calcite.rel.rules.FilterTableScanRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,50,import org.apache.calcite.rel.rules.JoinAssociateRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,51,import org.apache.calcite.rel.rules.JoinCommuteRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,53,import org.apache.calcite.rel.rules.JoinToMultiJoinRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,54,import org.apache.calcite.rel.rules.LoptOptimizeJoinRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,55,import org.apache.calcite.rel.rules.MultiJoinOptimizeBushyRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,57,import org.apache.calcite.rel.rules.ProjectMergeRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,59,import org.apache.calcite.rel.rules.SemiJoinRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,60,import org.apache.calcite.rel.rules.SortProjectTransposeRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,61,import org.apache.calcite.rel.rules.SubQueryRemoveRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,123,SemiJoinRule.PROJECT,
core/src/main/java/org/apache/calcite/tools/Programs.java,124,SemiJoinRule.JOIN,
core/src/main/java/org/apache/calcite/tools/Programs.java,127,? JoinAssociateRule.INSTANCE
core/src/main/java/org/apache/calcite/tools/Programs.java,128,: ProjectMergeRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,129,AggregateStarTableRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,130,AggregateStarTableRule.INSTANCE2,
core/src/main/java/org/apache/calcite/tools/Programs.java,131,FilterTableScanRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,132,FilterProjectTransposeRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,133,FilterJoinRule.FILTER_ON_JOIN,
core/src/main/java/org/apache/calcite/tools/Programs.java,134,AggregateExpandDistinctAggregatesRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,135,AggregateReduceFunctionsRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,136,FilterAggregateTransposeRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,137,JoinCommuteRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,140,SortProjectTransposeRule.INSTANCE);
core/src/main/java/org/apache/calcite/tools/Programs.java,235,ImmutableList.of(JoinCommuteRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,236,JoinAssociateRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,240,? MultiJoinOptimizeBushyRule.INSTANCE
core/src/main/java/org/apache/calcite/tools/Programs.java,241,: LoptOptimizeJoinRule.INSTANCE);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,21,import org.apache.calcite.rel.core.RelFactories;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,36,new CsvProjectTableScanRule(RelFactories.LOGICAL_BUILDER);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTableScan.java,81,planner.addRule(CsvProjectTableScanRule.INSTANCE);
pig/src/main/java/org/apache/calcite/adapter/pig/PigTableScan.java,27,import org.apache.calcite.rel.rules.AggregateExpandDistinctAggregatesRule;
pig/src/main/java/org/apache/calcite/adapter/pig/PigTableScan.java,83,planner.removeRule(AggregateExpandDistinctAggregatesRule.INSTANCE);
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,49,import org.apache.calcite.rel.rules.FilterToCalcRule;
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,50,import org.apache.calcite.rel.rules.ProjectToCalcRule;
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,90,ProjectToCalcRule.INSTANCE,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,91,FilterToCalcRule.INSTANCE,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraFilter.java,182,private static String literalValue(RexLiteral literal) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraFilter.java,183,Object value = literal.getValue2();
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,19,import org.apache.calcite.avatica.util.DateTimeUtils;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,541,final SimpleDateFormat format =
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,542,new SimpleDateFormat(
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,544,Locale.ROOT);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,545,format.setTimeZone(DateTimeUtils.UTC_ZONE);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,55,import java.util.Locale;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,60,import java.util.TimeZone;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,78,final TimeZone utc = DateTimeUtils.UTC_ZONE;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,80,new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.ROOT);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,81,UTC_TIMESTAMP_FORMAT.setTimeZone(utc);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,82,TIMESTAMP_FORMAT = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.ROOT);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,83,TIMESTAMP_FORMAT.setTimeZone(utc);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,19,import org.apache.calcite.avatica.util.DateTimeUtils;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,47,private static final SimpleDateFormat DATE_FORMATTER = getDateFormatter();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,633,private static SimpleDateFormat getDateFormatter() {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,634,final SimpleDateFormat dateFormatter = new SimpleDateFormat(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,635,TimeExtractionFunction.ISO_TIME_FORMAT,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,636,Locale.ROOT);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,637,dateFormatter.setTimeZone(DateTimeUtils.UTC_ZONE);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,638,return dateFormatter;
druid/src/main/java/org/apache/calcite/adapter/druid/ExtractionDimensionSpec.java,98,if (!TimeExtractionFunction.ISO_TIME_FORMAT.equals(format)) {
druid/src/main/java/org/apache/calcite/adapter/druid/TimeExtractionFunction.java,70,public static final String ISO_TIME_FORMAT = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'";
druid/src/main/java/org/apache/calcite/adapter/druid/TimeExtractionFunction.java,109,return new TimeExtractionFunction(ISO_TIME_FORMAT, null, timeZone, null);
druid/src/main/java/org/apache/calcite/adapter/druid/TimeExtractionFunction.java,150,return new TimeExtractionFunction(ISO_TIME_FORMAT, granularity, timeZone,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2187,scopes.put(node, parentScope);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,221,map.put("agg", toJson(node.getAggregation()));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,948,final Map<String, RelDataType> newAliases =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,956,needNew ? null : aliases);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,219,return type.isNullable() ? Integer.class : int.class;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,221,return type.isNullable() ? Long.class : long.class;
core/src/main/java/org/apache/calcite/adapter/enumerable/NullPolicy.java,36,AND,
core/src/main/java/org/apache/calcite/adapter/enumerable/NullPolicy.java,39,OR,
core/src/main/java/org/apache/calcite/adapter/enumerable/NullPolicy.java,42,NOT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,22,import org.apache.calcite.linq4j.Ord;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,78,import static org.apache.calcite.linq4j.tree.ExpressionType.AndAlso;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,87,import static org.apache.calcite.linq4j.tree.ExpressionType.Not;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,89,import static org.apache.calcite.linq4j.tree.ExpressionType.OrElse;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,102,import static org.apache.calcite.sql.fun.SqlStdOperatorTable.CASE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,233,private final Map<SqlOperator, CallImplementor> map = new HashMap<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,240,defineMethod(ROW, BuiltInMethod.ARRAY.method, NullPolicy.ANY);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,256,final TrimImplementor trimImplementor = new TrimImplementor();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,257,defineImplementor(TRIM, NullPolicy.STRICT, trimImplementor, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,260,defineBinary(AND, AndAlso, NullPolicy.AND, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,261,defineBinary(OR, OrElse, NullPolicy.OR, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,262,defineUnary(NOT, Not, NullPolicy.NOT);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,289,defineImplementor(RAND, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,290,new NotNullImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,291,final NotNullImplementor[] implementors = {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,292,new ReflectiveCallNotNullImplementor(BuiltInMethod.RAND.method),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,295,public Expression implement(RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,296,RexCall call, List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,297,return implementors[call.getOperands().size()]
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,298,.implement(translator, call, translatedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,301,defineImplementor(RAND_INTEGER, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,302,new NotNullImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,303,final NotNullImplementor[] implementors = {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,304,null,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,305,new ReflectiveCallNotNullImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,306,BuiltInMethod.RAND_INTEGER.method),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,307,new ReflectiveCallNotNullImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,310,public Expression implement(RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,311,RexCall call, List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,312,return implementors[call.getOperands().size()]
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,313,.implement(translator, call, translatedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,331,map.put(PI, (translator, call, nullAs) -> Expressions.constant(Math.PI));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,334,defineImplementor(DATETIME_PLUS, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,335,new DatetimeArithmeticImplementor(), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,336,defineImplementor(MINUS_DATE, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,337,new DatetimeArithmeticImplementor(), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,338,defineImplementor(EXTRACT, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,339,new ExtractImplementor(), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,340,defineImplementor(FLOOR, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,343,BuiltInMethod.UNIX_DATE_FLOOR.method), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,344,defineImplementor(CEIL, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,347,BuiltInMethod.UNIX_DATE_CEIL.method), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,349,map.put(IS_NULL, new IsXxxImplementor(null, false));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,350,map.put(IS_NOT_NULL, new IsXxxImplementor(null, true));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,351,map.put(IS_TRUE, new IsXxxImplementor(true, false));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,352,map.put(IS_NOT_TRUE, new IsXxxImplementor(true, true));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,353,map.put(IS_FALSE, new IsXxxImplementor(false, false));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,354,map.put(IS_NOT_FALSE, new IsXxxImplementor(false, true));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,358,new MethodImplementor(BuiltInMethod.LIKE.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,359,defineImplementor(LIKE, NullPolicy.STRICT, likeImplementor, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,360,defineImplementor(NOT_LIKE, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,361,NotImplementor.of(likeImplementor), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,363,new MethodImplementor(BuiltInMethod.SIMILAR.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,364,defineImplementor(SIMILAR_TO, NullPolicy.STRICT, similarImplementor, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,365,defineImplementor(NOT_SIMILAR_TO, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,366,NotImplementor.of(similarImplementor), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,375,new MethodImplementor(BuiltInMethod.IS_EMPTY.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,376,defineImplementor(IS_EMPTY, NullPolicy.NONE, isEmptyImplementor, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,377,defineImplementor(IS_NOT_EMPTY, NullPolicy.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,378,NotImplementor.of(isEmptyImplementor), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,380,new MethodImplementor(BuiltInMethod.IS_A_SET.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,381,defineImplementor(IS_A_SET, NullPolicy.NONE, isASetImplementor, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,382,defineImplementor(IS_NOT_A_SET, NullPolicy.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,383,NotImplementor.of(isASetImplementor), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,395,new MethodImplementor(BuiltInMethod.SUBMULTISET_OF.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,396,defineImplementor(SUBMULTISET_OF, NullPolicy.NONE, subMultisetImplementor, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,397,defineImplementor(NOT_SUBMULTISET_OF,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,398,NullPolicy.NONE, NotImplementor.of(subMultisetImplementor), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,400,map.put(CASE, new CaseImplementor());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,402,map.put(CAST, new CastOptimizedImplementor());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,404,defineImplementor(REINTERPRET, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,405,new ReinterpretImplementor(), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,407,final CallImplementor value = new ValueConstructorImplementor();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,412,map.put(DEFAULT, (translator, call, nullAs) -> Expressions.constant(null));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,488,private void defineImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,489,SqlOperator operator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,490,NullPolicy nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,491,NotNullImplementor implementor,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,492,boolean harmonize) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,493,CallImplementor callImplementor =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,494,createImplementor(implementor, nullPolicy, harmonize);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,495,map.put(operator, callImplementor);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,498,private static RexCall call2(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,499,boolean harmonize,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,500,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,501,RexCall call) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,502,if (!harmonize) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,503,return call;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,505,final List<RexNode> operands2 =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,506,harmonize(translator, call.getOperands());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,507,if (operands2.equals(call.getOperands())) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,508,return call;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,510,return call.clone(call.getType(), operands2);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,517,switch (nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,518,case ANY:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,519,case STRICT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,520,case SEMI_STRICT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,521,return (translator, call, nullAs) -> implementNullSemantics0(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,522,translator, call, nullAs, nullPolicy, harmonize,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,523,implementor);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,524,case AND:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,526,if (nullAs == NullAs.FALSE) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,527,nullPolicy2 = NullPolicy.ANY;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,537,return (translator, call, nullAs) -> {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,538,assert call.getOperator() == AND
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,539,: "AND null semantics is supported only for AND operator. Actual operator is "
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,540,+ String.valueOf(call.getOperator());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,541,final RexCall call2 = call2(false, translator, call);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,542,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,544,case TRUE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,547,case FALSE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,550,final List<Expression> expressions =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,551,translator.translateList(call2.getOperands(), nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,552,return Expressions.foldAnd(expressions);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,553,case NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,554,case IS_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,555,case IS_NOT_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,556,final List<Expression> nullAsTrue =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,557,translator.translateList(call2.getOperands(), NullAs.TRUE);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,558,final List<Expression> nullAsIsNull =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,559,translator.translateList(call2.getOperands(), NullAs.IS_NULL);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,560,Expression hasFalse =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,561,Expressions.not(Expressions.foldAnd(nullAsTrue));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,562,Expression hasNull = Expressions.foldOr(nullAsIsNull);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,563,return nullAs.handle(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,564,Expressions.condition(hasFalse, BOXED_FALSE_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,565,Expressions.condition(hasNull, NULL_EXPR, BOXED_TRUE_EXPR)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,566,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,567,throw new IllegalArgumentException(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,571,case OR:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,579,return (translator, call, nullAs) -> {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,580,assert call.getOperator() == OR
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,581,: "OR null semantics is supported only for OR operator. Actual operator is "
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,582,+ String.valueOf(call.getOperator());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,583,final RexCall call2 = call2(harmonize, translator, call);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,584,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,586,case TRUE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,589,case FALSE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,592,final List<Expression> expressions =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,593,translator.translateList(call2.getOperands(), nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,594,return Expressions.foldOr(expressions);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,595,case NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,596,case IS_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,597,case IS_NOT_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,598,final List<Expression> nullAsFalse =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,599,translator.translateList(call2.getOperands(), NullAs.FALSE);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,600,final List<Expression> nullAsIsNull =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,601,translator.translateList(call2.getOperands(), NullAs.IS_NULL);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,602,Expression hasTrue = Expressions.foldOr(nullAsFalse);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,603,Expression hasNull = Expressions.foldOr(nullAsIsNull);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,604,Expression result = nullAs.handle(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,605,Expressions.condition(hasTrue, BOXED_TRUE_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,606,Expressions.condition(hasNull, NULL_EXPR, BOXED_FALSE_EXPR)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,607,return result;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,608,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,609,throw new IllegalArgumentException(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,613,case NOT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,617,return new CallImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,618,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,619,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,620,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,621,case NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,622,return Expressions.call(BuiltInMethod.NOT.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,623,translator.translateList(call.getOperands(), nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,624,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,625,return Expressions.not(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,626,translator.translate(call.getOperands().get(0),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,627,negate(nullAs)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,631,private NullAs negate(NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,632,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,633,case FALSE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,634,return NullAs.TRUE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,635,case TRUE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,636,return NullAs.FALSE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,637,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,638,return nullAs;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,642,case NONE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,643,return (translator, call, nullAs) -> {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,644,final RexCall call2 = call2(false, translator, call);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,645,return implementCall(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,646,translator, call2, implementor, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,648,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,649,throw new AssertionError(nullPolicy);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,653,private void defineMethod(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,654,SqlOperator operator, String functionName, NullPolicy nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,655,defineImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,656,operator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,657,nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,658,new MethodNameImplementor(functionName),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,659,false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,662,private void defineMethod(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,663,SqlOperator operator, Method method, NullPolicy nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,664,defineImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,665,operator, nullPolicy, new MethodImplementor(method), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,668,private void defineMethodReflective(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,669,SqlOperator operator, Method method, NullPolicy nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,670,defineImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,671,operator, nullPolicy, new ReflectiveCallNotNullImplementor(method),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,672,false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,675,private void defineUnary(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,676,SqlOperator operator, ExpressionType expressionType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,677,NullPolicy nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,678,defineImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,679,operator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,680,nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,681,new UnaryImplementor(expressionType), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,684,private void defineBinary(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,685,SqlOperator operator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,686,ExpressionType expressionType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,687,NullPolicy nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,688,String backupMethodName) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,689,defineImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,690,operator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,691,nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,692,new BinaryImplementor(expressionType, backupMethodName),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,693,true);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,696,public static final RexImpTable INSTANCE = new RexImpTable();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,698,public CallImplementor get(final SqlOperator operator) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,706,return ((ImplementableFunction) udf).getImplementor();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,740,static Expression maybeNegate(boolean negate, Expression expression) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,741,if (!negate) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,742,return expression;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,744,return Expressions.not(expression);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,759,Expressions.equal(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,760,operand,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,761,NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,767,private static boolean nullable(RexCall call, int i) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,768,return call.getOperands().get(i).getType().isNullable();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,772,private static List<RexNode> harmonize(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,773,final RexToLixTranslator translator, final List<RexNode> operands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,774,int nullCount = 0;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,775,final List<RelDataType> types = new ArrayList<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,776,final RelDataTypeFactory typeFactory =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,777,translator.builder.getTypeFactory();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,778,for (RexNode operand : operands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,779,RelDataType type = operand.getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,780,type = toSql(typeFactory, type);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,781,if (translator.isNullable(operand)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,782,++nullCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,784,type = typeFactory.createTypeWithNullability(type, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,786,types.add(type);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,788,if (allSame(types)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,791,return operands;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,793,final RelDataType type = typeFactory.leastRestrictive(types);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,794,if (type == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,798,return operands;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,800,assert (nullCount > 0) == type.isNullable();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,801,final List<RexNode> list = new ArrayList<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,802,for (RexNode operand : operands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,803,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,804,translator.builder.ensureType(type, operand, false));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,806,return list;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,833,private static Expression implementNullSemantics0(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,834,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,835,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,836,NullAs nullAs,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,837,NullPolicy nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,838,boolean harmonize,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,839,NotNullImplementor implementor) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,840,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,841,case IS_NOT_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,844,switch (nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,845,case STRICT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,846,return Expressions.foldAnd(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,847,translator.translateList(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,848,call.getOperands(), nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,850,break;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,851,case IS_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,854,switch (nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,855,case STRICT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,856,return Expressions.foldOr(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,857,translator.translateList(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,858,call.getOperands(), nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,860,break;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,862,final RexCall call2 = call2(harmonize, translator, call);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,863,try {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,864,return implementNullSemantics(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,865,translator, call2, nullAs, nullPolicy, implementor);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,867,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,868,case NOT_POSSIBLE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,869,throw e;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,870,case FALSE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,871,return FALSE_EXPR;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,872,case TRUE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,873,return TRUE_EXPR;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,874,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,875,return NULL_EXPR;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,880,private static Expression implementNullSemantics(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,881,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,882,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,883,NullAs nullAs,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,884,NullPolicy nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,885,NotNullImplementor implementor) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,886,final List<Expression> list = new ArrayList<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,887,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,888,case NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,891,if (translator.isNullable(operand.e)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,892,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,893,translator.translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,894,operand.e, NullAs.IS_NULL));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,895,translator = translator.setNullable(operand.e, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,898,final Expression box =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,899,Expressions.box(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,900,implementCall(translator, call, implementor, nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,901,return optimize(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,902,Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,903,Expressions.foldOr(list),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,905,box));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,906,case FALSE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,909,if (translator.isNullable(operand.e)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,910,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,911,translator.translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,912,operand.e, NullAs.IS_NOT_NULL));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,913,translator = translator.setNullable(operand.e, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,916,list.add(implementCall(translator, call, implementor, nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,917,return Expressions.foldAnd(list);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,918,case TRUE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,921,if (translator.isNullable(operand.e)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,922,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,923,translator.translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,924,operand.e, NullAs.IS_NULL));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,925,translator = translator.setNullable(operand.e, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,928,list.add(implementCall(translator, call, implementor, nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,929,return Expressions.foldOr(list);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,930,case NOT_POSSIBLE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,937,final Map<RexNode, Boolean> nullable = new HashMap<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,938,switch (nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,939,case STRICT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,942,for (RexNode arg : call.getOperands()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,943,if (translator.isNullable(arg) && !nullable.containsKey(arg)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,944,nullable.put(arg, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,948,nullable.put(call, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,949,translator = translator.setNullable(nullable);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,951,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,952,return implementCall(translator, call, implementor, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,956,private static Expression implementCall(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,957,final RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,958,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,959,NotNullImplementor implementor,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,960,final NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,961,List<Expression> translatedOperands =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,962,translator.translateList(call.getOperands());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,965,if (nullAs == NullAs.NOT_POSSIBLE) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,966,List<Expression> nullHandled = translatedOperands;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,967,for (int i = 0; i < translatedOperands.size(); i++) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,968,RexNode arg = call.getOperands().get(i);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,969,Expression e = translatedOperands.get(i);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,970,if (!translator.isNullable(arg)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,971,if (nullHandled == translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,972,nullHandled = new ArrayList<>(translatedOperands.subList(0, i));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,974,nullHandled.add(translator.handleNull(e, nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,976,nullHandled.add(e);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,979,translatedOperands = nullHandled;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,981,Expression result =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,982,implementor.implement(translator, call, translatedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,983,return translator.handleNull(result, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1041,x,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1051,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1052,BuiltInMethod.IS_TRUE.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1053,x);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1055,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1056,BuiltInMethod.IS_NOT_FALSE.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1057,x);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1727,private static class TrimImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1728,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1729,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1730,final Object value =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1731,((ConstantExpression) translatedOperands.get(0)).value;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1741,translatedOperands.get(1),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1753,super(methodName);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1758,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1759,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1767,return translatedOperands.get(0);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1773,Expression operand = translatedOperands.get(0);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1789,final ConstantExpression tur =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1790,(ConstantExpression) translatedOperands.get(1);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1791,final TimeUnitRange timeUnitRange = (TimeUnitRange) tur.value;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1815,private static class MethodImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1818,MethodImplementor(Method method) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1822,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1823,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1824,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1825,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1834,final Type returnType =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1835,translator.typeFactory.getJavaClass(call.getType());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1865,private static class MethodNameImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1868,MethodNameImplementor(String methodName) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1872,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1873,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1874,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1875,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1879,translatedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1884,private static class BinaryImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1908,BinaryImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1909,ExpressionType expressionType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1910,String backupMethodName) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1915,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1916,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1917,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1918,List<Expression> expressions) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1935,return callBackupMethodAnyType(translator, call, expressions);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1938,final Type type0 = expressions.get(0).getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1939,final Type type1 = expressions.get(1).getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1947,expressions);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1951,final Type returnType =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1952,translator.typeFactory.getJavaClass(call.getType());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1954,Expressions.makeBinary(expressionType, expressions.get(0),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1990,private static class UnaryImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1993,UnaryImplementor(ExpressionType expressionType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1997,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1998,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1999,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2000,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2001,final Expression operand = translatedOperands.get(0);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2002,final UnaryExpression e = Expressions.makeUnary(expressionType, operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2003,if (e.type.equals(operand.type)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2008,return Expressions.convert_(e, operand.type);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2013,private static class ExtractImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2014,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2015,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2017,(TimeUnitRange) ((ConstantExpression) translatedOperands.get(0)).value;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2019,Expression operand = translatedOperands.get(1);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2062,translatedOperands.get(0), operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2169,private static class CaseImplementor implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2170,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2171,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2172,return implementRecurse(translator, call, nullAs, 0);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2175,private Expression implementRecurse(RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2176,RexCall call, NullAs nullAs, int i) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2177,List<RexNode> operands = call.getOperands();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2178,if (i == operands.size() - 1) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2180,return translator.translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2181,translator.builder.ensureType(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2182,call.getType(), operands.get(i), false), nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2184,Expression ifTrue;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2185,try {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2186,ifTrue = translator.translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2187,translator.builder.ensureType(call.getType(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2188,operands.get(i + 1),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2189,false), nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2191,ifTrue = null;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2194,Expression ifFalse;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2195,try {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2196,ifFalse = implementRecurse(translator, call, nullAs, i + 2);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2198,if (ifTrue == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2199,throw RexToLixTranslator.AlwaysNull.INSTANCE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2201,ifFalse = null;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2204,Expression test = translator.translate(operands.get(i), NullAs.FALSE);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2206,return ifTrue == null || ifFalse == null
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2208,: Expressions.condition(test, ifTrue, ifFalse);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2214,private static class CoalesceImplementor implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2215,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2216,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2217,return implementRecurse(translator, call.operands, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2221,List<RexNode> operands, NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2222,if (operands.size() == 1) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2227,translator.translate(operands.get(0), nullAs),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2228,implementRecurse(translator, Util.skip(operands), nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2235,private static class CastOptimizedImplementor implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2236,private final CallImplementor accurate;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2238,private CastOptimizedImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2239,accurate = createImplementor(new CastImplementor(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2240,NullPolicy.STRICT, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2243,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2244,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2247,if (call.getType().equals(arg.getType())) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2249,return translator.translate(arg, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2253,&& nullAs == NullAs.NULL
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2257,translator.typeFactory, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2259,return accurate.implement(translator, call, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2264,private static class CastImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2265,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2266,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2267,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2268,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2269,assert call.getOperands().size() == 1;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2270,final RelDataType sourceType = call.getOperands().get(0).getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2275,final boolean nullable =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2278,&& !Primitive.is(translatedOperands.get(0).getType());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2280,translator.nullifyType(call.getType(), nullable);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2282,targetType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2283,translatedOperands.get(0));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2288,private static class ReinterpretImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2289,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2290,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2291,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2292,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2294,return translatedOperands.get(0);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2300,implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2301,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2302,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2303,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2304,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2305,return translator.translateConstructor(call.getOperands(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2306,call.getOperator().getKind());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2311,private static class ItemImplementor
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2312,implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2313,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2314,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2315,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2316,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2318,getImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2319,call.getOperands().get(0).getType().getSqlTypeName());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2324,final NullPolicy nullPolicy = NullPolicy.ANY;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2325,return implementNullSemantics0(translator, call, nullAs, nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2326,false, implementor);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2332,return new MethodImplementor(BuiltInMethod.ARRAY_ITEM.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2334,return new MethodImplementor(BuiltInMethod.MAP_ITEM.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2336,return new MethodImplementor(BuiltInMethod.ANY_ITEM.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2346,implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2347,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2348,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2349,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2350,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2351,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2352,case IS_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2353,return Expressions.constant(false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2354,case IS_NOT_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2355,return Expressions.constant(true);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2395,private static class IsXxxImplementor
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2396,implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2397,private final Boolean seek;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2398,private final boolean negate;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2400,IsXxxImplementor(Boolean seek, boolean negate) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2401,this.seek = seek;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2402,this.negate = negate;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2405,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2406,RexToLixTranslator translator, RexCall call, NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2407,List<RexNode> operands = call.getOperands();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2408,assert operands.size() == 1;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2409,if (seek == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2410,return translator.translate(operands.get(0),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2411,negate ? NullAs.IS_NOT_NULL : NullAs.IS_NULL);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2413,return maybeNegate(negate == seek,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2414,translator.translate(operands.get(0),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2415,seek ? NullAs.FALSE : NullAs.TRUE));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2421,private static class NotImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2422,private final NotNullImplementor implementor;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2424,NotImplementor(NotNullImplementor implementor) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2428,private static NotNullImplementor of(NotNullImplementor implementor) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2432,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2433,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2434,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2435,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2437,implementor.implement(translator, call, translatedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2444,implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2445,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2446,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2448,Expression trop0 = translatedOperands.get(0);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2451,Expression trop1 = translatedOperands.get(1);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,33,import org.apache.calcite.rel.type.RelDataTypeFactoryImpl;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,46,import org.apache.calcite.sql.SqlKind;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,54,import com.google.common.collect.ImmutableMap;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,61,import java.util.Collections;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,62,import java.util.LinkedHashMap;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,76,public class RexToLixTranslator {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,96,private final Map<? extends RexNode, Boolean> exprNullableMap;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,97,private final RexToLixTranslator parent;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,147,Map<? extends RexNode, Boolean> exprNullableMap,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,149,RexToLixTranslator parent,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,221,Expression expression = translate0(expr, nullAs, storageType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,223,assert expression != null;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,224,return list.append("v", expression);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,608,public Expression handleNull(Expression input, RexImpTable.NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,609,final Expression nullHandled = nullAs.handle(input);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,612,if (nullHandled instanceof ConstantExpression) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,613,return nullHandled;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,618,if (nullHandled == input) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,619,return input;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,626,String unboxVarName = "v_unboxed";
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,627,if (input instanceof ParameterExpression) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,628,unboxVarName = ((ParameterExpression) input).name + "_unboxed";
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,630,ParameterExpression unboxed = Expressions.parameter(nullHandled.getType(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,631,list.newName(unboxVarName));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,632,list.add(Expressions.declare(Modifier.FINAL, unboxed, nullHandled));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,634,return unboxed;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,645,private Expression translate0(RexNode expr, RexImpTable.NullAs nullAs,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,646,Type storageType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,647,if (nullAs == RexImpTable.NullAs.NULL && !expr.getType().isNullable()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,648,nullAs = RexImpTable.NullAs.NOT_POSSIBLE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,650,switch (expr.getKind()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,663,case LOCAL_REF:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,664,return translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,665,deref(expr),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,666,nullAs,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,667,storageType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,668,case LITERAL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,669,return translateLiteral(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,670,(RexLiteral) expr,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,671,nullifyType(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,672,expr.getType(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,674,&& nullAs != RexImpTable.NullAs.NOT_POSSIBLE),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,675,typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,676,nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,677,case DYNAMIC_PARAM:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,678,return translateParameter((RexDynamicParam) expr, nullAs, storageType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,679,case CORREL_VARIABLE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,680,throw new RuntimeException("Cannot translate " + expr + ". Correlated"
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,681,+ " variables should always be referenced by field access");
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,683,RexFieldAccess fieldAccess = (RexFieldAccess) expr;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,684,RexNode target = deref(fieldAccess.getReferenceExpr());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,697,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,698,if (expr instanceof RexCall) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,699,return translateCall((RexCall) expr, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,701,throw new RuntimeException(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,720,private Expression translateCall(RexCall call, RexImpTable.NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,721,final SqlOperator operator = call.getOperator();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,722,CallImplementor implementor =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,723,RexImpTable.INSTANCE.get(operator);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,724,if (implementor == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,725,throw new RuntimeException("cannot translate call " + call);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,727,return implementor.implement(this, call, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,731,private Expression translateParameter(RexDynamicParam expr,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,732,RexImpTable.NullAs nullAs, Type storageType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,733,if (storageType == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,734,storageType = typeFactory.getJavaClass(expr.getType());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,736,return nullAs.handle(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,738,Expressions.call(root, BuiltInMethod.DATA_CONTEXT_GET.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,739,Expressions.constant("?" + expr.getIndex())),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,740,storageType));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,762,throw AlwaysNull.INSTANCE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1128,public Expression translateConstructor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1129,List<RexNode> operandList, SqlKind kind) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1130,switch (kind) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1131,case MAP_VALUE_CONSTRUCTOR:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1132,Expression map =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1133,list.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1135,Expressions.new_(LinkedHashMap.class),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1136,false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1137,for (int i = 0; i < operandList.size(); i++) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1138,RexNode key = operandList.get(i++);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1139,RexNode value = operandList.get(i);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1140,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1141,Expressions.statement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1142,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1143,map,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1144,BuiltInMethod.MAP_PUT.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1145,Expressions.box(translate(key)),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1146,Expressions.box(translate(value)))));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1148,return map;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1149,case ARRAY_VALUE_CONSTRUCTOR:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1150,Expression lyst =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1151,list.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1153,Expressions.new_(ArrayList.class),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1154,false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1155,for (RexNode value : operandList) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1156,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1157,Expressions.statement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1158,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1159,lyst,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1160,BuiltInMethod.COLLECTION_ADD.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1161,Expressions.box(translate(value)))));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1163,return lyst;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1164,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1165,throw new AssertionError("unexpected: " + kind);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1181,if (!e.getType().isNullable()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1182,return false;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1184,final Boolean b = isKnownNullable(e);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1185,return b == null || b;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1194,protected Boolean isKnownNullable(RexNode node) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1195,if (!exprNullableMap.isEmpty()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1196,Boolean nullable = exprNullableMap.get(node);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1197,if (nullable != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1198,return nullable;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1201,return parent == null ? null : parent.isKnownNullable(node);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1206,public RexToLixTranslator setNullable(RexNode e, boolean nullable) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1207,return setNullable(Collections.singletonMap(e, nullable));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1214,if (nullable == null || nullable.isEmpty()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1215,return this;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1217,return new RexToLixTranslator(program, typeFactory, root, inputGetter, list,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1238,public RelDataType nullifyType(RelDataType type, boolean nullable) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1239,if (!nullable) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1240,final Primitive primitive = javaPrimitive(type);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1241,if (primitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1242,return typeFactory.createJavaType(primitive.primitiveClass);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1245,return typeFactory.createTypeWithNullability(type, nullable);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1248,private Primitive javaPrimitive(RelDataType type) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1249,if (type instanceof RelDataTypeFactoryImpl.JavaType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1250,return Primitive.ofBox(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1251,((RelDataTypeFactoryImpl.JavaType) type).getJavaClass());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1253,return null;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1324,static class AlwaysNull extends ControlFlowException {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1326,public static final AlwaysNull INSTANCE = new AlwaysNull();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1328,private AlwaysNull() {}
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,19,import org.apache.calcite.runtime.FlatLists;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,41,private final String string;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,58,this.string = computeString();
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,472,List<RelTrait> newTraits;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,473,switch (traits.length) {
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,474,case 0:
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,475,newTraits = ImmutableList.of(canonizedTrait);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,476,break;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,477,case 1:
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,478,newTraits = FlatLists.of(traits[0], canonizedTrait);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,479,break;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,480,case 2:
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,481,newTraits = FlatLists.of(traits[0], traits[1], canonizedTrait);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,482,break;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,483,default:
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,485,.add(canonizedTrait).build();
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,487,return cache.getOrAdd(newTraits);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,548,RelTraitSet getOrAdd(List<RelTrait> traits) {
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,549,RelTraitSet traitSet1 = map.get(traits);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,550,if (traitSet1 != null) {
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,551,return traitSet1;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,555,map.put(traits, traitSet);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,556,return traitSet;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFieldImpl.java,52,return index
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFieldImpl.java,54,^ type.hashCode();
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,185,return Iterables.transform(nodes, SqlNode::getParserPosition);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,105,fieldCounts.add(elementType.getFieldCount());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,106,inputTypes.add(FlatProductInputType.LIST);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,114,final Expression lambda =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,115,Expressions.call(BuiltInMethod.FLAT_PRODUCT.method,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,114,this.hook = Hook.TRIMMED.add(node -> {
core/src/main/java/org/apache/calcite/sql/SqlOverOperator.java,95,SqlWindow w = validator.resolveWindow(window, scope, false);
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,530,SqlWindow win = validator.resolveWindow(this, operandScope, false);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2778,public boolean isAggregate(SqlNode selectNode) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,38,import org.apache.calcite.rel.rules.ProjectSortTransposeRule;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,736,extends ProjectSortTransposeRule {
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,65,connector.setSoLingerTime(-1);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,390,return dummyProject(fieldCount, newInput);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,417,return result(relBuilder.build(), mapping);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,439,relBuilder.project(ImmutableList.<RexNode>of(expr), ImmutableList.of("DUMMY"));
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,440,return result(relBuilder.build(), mapping);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,883,return result(relBuilder.build(), mapping);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,39,RelFactories.LOGICAL_BUILDER, expr -> false);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,60,PushProjector.ExprCondition preserveExprCondition) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,65,preserveExprCondition, relBuilderFactory);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,69,PushProjector.ExprCondition preserveExprCondition,
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,70,RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,79,Project origProj;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,80,Filter filter;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,82,origProj = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,85,origProj = null;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,88,RelNode rel = filter.getInput();
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,89,RexNode origFilter = filter.getCondition();
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,92,&& RexOver.containsOver(origProj.getProjects(), null)) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,101,PushProjector pushProjector =
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,102,new PushProjector(
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,103,origProj, origFilter, rel, preserveExprCondition, call.builder());
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,104,RelNode topProject = pushProjector.convertProject(null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,810,relBuilderFactory);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2406,final ImmutableBitSet inputBits = inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2629,final List<RexNode> list = new ArrayList<>();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2630,pushShuttle(project).visitList(nodes, list);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2631,return list;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3572,super(true);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3573,this.inputBitSet = ImmutableBitSet.builder();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3574,this.extraFields = extraFields;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3588,return analyze(node).inputBitSet.build();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3598,return inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3602,inputBitSet.set(inputRef.getIndex());
core/src/main/java/org/apache/calcite/rel/core/Match.java,229,private static class AggregateFinder extends RexVisitorImpl {
core/src/main/java/org/apache/calcite/rel/core/Match.java,258,for (RexNode rex : call.getOperands()) {
core/src/main/java/org/apache/calcite/rel/core/Match.java,259,rex.accept(this);
core/src/main/java/org/apache/calcite/rel/core/Match.java,302,private static class PatternVarFinder extends RexVisitorImpl {
core/src/main/java/org/apache/calcite/rel/core/Match.java,315,for (RexNode node : call.getOperands()) {
core/src/main/java/org/apache/calcite/rel/core/Match.java,316,node.accept(this);
core/src/main/java/org/apache/calcite/rel/core/Match.java,327,for (RexNode rex : rexNodeList) {
core/src/main/java/org/apache/calcite/rel/core/Match.java,328,rex.accept(this);
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,34,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,111,for (RexNode expr : program.getExprList()) {
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,112,expr.accept(vuv);
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,265,final List<RexNode> rexNodesWindow = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,266,for (RexNode rexNode : program.getExprList()) {
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,267,rexNodesWindow.add(rexNode.accept(shuttle));
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,269,final List<RexNode> refToWindow = toInputRefs(rexNodesWindow);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,134,final ImmutableBitSet inputFieldsUsed = inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,209,final ImmutableBitSet inputFieldsUsed = inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,198,private static class ExtractFinder extends RexVisitorImpl
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,136,final List<RexNode> newBottomList = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,138,.visitList(bottom, newBottomList);
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,456,return inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,19,import org.apache.calcite.linq4j.Ord;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,39,import org.apache.calcite.rex.RexVisitorImpl;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,365,for (final Ord<RexNode> expr : Ord.zip(exprs)) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,366,expr.e.accept(
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,367,new RexVisitorImpl<Void>(true) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,368,public Void visitLocalRef(RexLocalRef localRef) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,369,graph.addEdge(localRef.getIndex(), expr.i);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,370,return null;
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,175,final List<RexNode> topProjExps = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,176,for (RexNode rexNode : project.getChildExps()) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,177,topProjExps.add(rexNode.accept(indexAdjustment));
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,209,for (RexNode rexNode : project.getChildExps()) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,210,rexNode.accept(referenceFinder);
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,230,for (Window.RexWinAggCall rexWinAggCall : group.aggCalls) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,231,rexWinAggCall.accept(referenceFinder);
core/src/main/java/org/apache/calcite/rel/rules/UnionPullUpConstantsRule.java,38,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/rel/rules/UnionPullUpConstantsRule.java,113,topChildExprs = ImmutableList.copyOf(RexUtil.apply(mapping, topChildExprs));
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,32,public class LogicVisitor implements RexBiVisitor<Logic, Logic> {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,80,public Logic visitCall(RexCall call, Logic logic) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,117,private Logic end(RexNode node, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,124,public Logic visitInputRef(RexInputRef inputRef, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,125,return end(inputRef, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,128,public Logic visitLocalRef(RexLocalRef localRef, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,129,return end(localRef, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,132,public Logic visitLiteral(RexLiteral literal, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,133,return end(literal, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,136,public Logic visitOver(RexOver over, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,140,public Logic visitCorrelVariable(RexCorrelVariable correlVariable,
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,141,Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,142,return end(correlVariable, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,145,public Logic visitDynamicParam(RexDynamicParam dynamicParam, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,146,return end(dynamicParam, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,149,public Logic visitRangeRef(RexRangeRef rangeRef, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,150,return end(rangeRef, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,153,public Logic visitFieldAccess(RexFieldAccess fieldAccess, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,157,public Logic visitSubQuery(RexSubQuery subQuery, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,167,return end(ref, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,171,return end(ref, arg);
core/src/main/java/org/apache/calcite/rex/RexAnalyzer.java,49,predicates.pulledUpPredicates.forEach(p -> p.accept(variableCollector));
core/src/main/java/org/apache/calcite/rex/RexInterpreter.java,30,import java.util.ArrayList;
core/src/main/java/org/apache/calcite/rex/RexInterpreter.java,127,final List<Comparable> values = new ArrayList<>(call.operands.size());
core/src/main/java/org/apache/calcite/rex/RexInterpreter.java,128,for (RexNode operand : call.operands) {
core/src/main/java/org/apache/calcite/rex/RexInterpreter.java,129,values.add(operand.accept(this));
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,114,for (RexNode expr : exprList) {
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,115,expr.accept(shuttle);
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,163,public void visitList(
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,164,List<? extends RexNode> exprs, List<RexNode> outExprs) {
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,165,for (RexNode expr : exprs) {
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,166,outExprs.add(expr.accept(this));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1238,public static Iterable<RexNode> apply(Mappings.TargetMapping mapping,
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1240,final RexPermuteInputsShuttle shuttle = RexPermuteInputsShuttle.of(mapping);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1241,return Iterables.transform(nodes, e -> e.accept(shuttle));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1542,public static Iterable<RexNode> shift(Iterable<RexNode> nodes, int offset) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1543,return new RexShiftShuttle(offset).apply(nodes);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2011,RexVisitor<Void> visitor =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2012,new RexVisitorImpl<Void>(true) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2014,occurrences.add(ref.getTableRef());
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2015,return super.visitTableInputRef(ref);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2018,for (RexNode e : nodes) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2019,e.accept(visitor);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2172,for (RexNode operand : call.operands) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2173,operand.accept(this);
core/src/main/java/org/apache/calcite/rex/RexVisitorImpl.java,61,for (RexNode partitionKey : window.partitionKeys) {
core/src/main/java/org/apache/calcite/rex/RexVisitorImpl.java,62,partitionKey.accept(this);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,372,ImmutableBitSet inputFieldsUsed = inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,461,new RelOptUtil.InputFinder(inputExtraFields);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,462,inputFinder.inputBitSet.addAll(fieldsUsed);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,464,final ImmutableBitSet inputFieldsUsed = inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,569,new RelOptUtil.InputFinder(combinedInputExtraFields);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,570,inputFinder.inputBitSet.addAll(fieldsUsed);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,572,final ImmutableBitSet fieldsUsedPlus = inputFinder.inputBitSet.build();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,334,private static Pair<List<RexNode>, List<RexNode>> splitProjects(final RexBuilder rexBuilder,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,335,final RelNode input, List<RexNode> nodes) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,336,final RelOptUtil.InputReferencedVisitor visitor = new RelOptUtil.InputReferencedVisitor();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,337,for (RexNode node : nodes) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,338,node.accept(visitor);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,352,final List<RexNode> aboveNodes = new ArrayList<>();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,353,for (RexNode node : nodes) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,354,aboveNodes.add(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,355,node.accept(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,356,new RexShuttle() {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,358,final int index = positions.indexOf(ref.getIndex());
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,359,return rexBuilder.makeInputRef(belowTypes.get(index), index);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,44,import java.util.ArrayList;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,153,List<String> visitList(List<RexNode> list) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,154,final List<String> strings = new ArrayList<>();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,155,for (RexNode node: list) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,156,strings.add(node.accept(this));
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,158,return strings;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/PredicateAnalyzer.java,39,import java.util.ArrayList;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/PredicateAnalyzer.java,46,import java.util.stream.Collectors;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/PredicateAnalyzer.java,129,.collect(Collectors.toList());
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/PredicateAnalyzer.java,130,return rexBuilder.makeCall(SqlStdOperatorTable.NOT_LIKE, operands);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/PredicateAnalyzer.java,230,List<Expression> operands = new ArrayList<>();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/PredicateAnalyzer.java,231,for (RexNode node : call.getOperands()) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/PredicateAnalyzer.java,232,final Expression nodeExpr = node.accept(this);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/PredicateAnalyzer.java,233,operands.add(nodeExpr);
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,113,final List<String> strings = visitList(call.operands);
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,132,List<String> visitList(List<RexNode> list) {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,133,final List<String> strings = new ArrayList<>();
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,134,for (RexNode node : list) {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,135,strings.add(node.accept(this));
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,137,return strings;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,52,import java.util.ArrayList;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,238,public List<String> visitList(List<RexNode> list) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,240,for (RexNode node : list) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,241,strings.add(node.accept(this));
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,243,return strings;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1172,executor.reduce(rexBuilder, ImmutableList.of(e), reducedValues);
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,151,return set.getOrCreateSubset(getCluster(), traitSet1);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,979,public RelSubset getSubset(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,980,RelNode rel,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,981,RelTraitSet traits) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,982,return getSubset(rel, traits, false);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,985,public RelSubset getSubset(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,986,RelNode rel,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,987,RelTraitSet traits,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,988,boolean createIfMissing) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,996,if (createIfMissing) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,997,return set.getOrCreateSubset(rel.getCluster(), traits);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1404,root =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1405,set.getOrCreateSubset(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1406,root.getCluster(),
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1407,root.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1328,subset.getCluster(), subset.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1658,return subset;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,217,private static final BigDecimal TWO = BigDecimal.valueOf(2L);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,322,this.relBuilder = config.getRelBuilderFactory().create(cluster, null);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2405,final Join originalJoin =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2406,(Join) RelFactories.DEFAULT_JOIN_FACTORY.createJoin(leftRel, rightRel,
core/src/main/java/org/apache/calcite/sql/SqlInsert.java,65,return ImmutableNullableList.of(keywords, targetTable, source, columnList);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,90,operand(RelNode.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/AbstractJoinExtractFilterRule.java,41,public abstract class AbstractJoinExtractFilterRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,77,public final class AggregateExpandDistinctAggregatesRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,51,public class AggregateExtractProjectRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,58,public class AggregateFilterTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,64,public class AggregateJoinTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,51,public class AggregateProjectMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,60,public class AggregateProjectPullUpConstantsRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,81,public class AggregateReduceFunctionsRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,62,public class AggregateStarTableRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,41,public class AggregateUnionAggregateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,54,public class AggregateUnionTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,38,public class CalcMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,41,public class CalcSplitRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,36,public class CoerceInputsRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,172,public static class FilterDateRangeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,47,public class FilterAggregateTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,39,public class FilterCalcMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,42,public class FilterCorrelateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,50,public abstract class FilterJoinRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,33,public class FilterMultiJoinMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,38,public class FilterProjectTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,40,public final class FilterRemoveIsNotDistinctFromRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,40,public class FilterSetOpTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,42,public class FilterTableFunctionTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,45,public class FilterToCalcRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,69,public class IntersectToDistinctRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,39,public class JoinAddRedundantSemiJoinRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,49,public class JoinAssociateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,52,public class JoinCommuteRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,58,public class JoinProjectTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,38,public class JoinPushExpressionsRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,65,public class JoinPushThroughJoinRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,42,public class JoinPushTransitivePredicatesRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinToCorrelateRule.java,60,public class JoinToCorrelateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,105,public class JoinToMultiJoinRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,37,public class JoinUnionTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,68,public class LoptOptimizeJoinRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,47,public class MaterializedViewFilterScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,71,public class MultiJoinOptimizeBushyRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,45,public class ProjectCalcMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,36,public class ProjectFilterTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,39,public class ProjectJoinTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,39,public class ProjectMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,35,public class ProjectMultiJoinMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,41,public class ProjectSetOpTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,37,public class ProjectSortTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,42,public class ProjectToCalcRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,75,public abstract class ProjectToWindowRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,47,public class ProjectWindowTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,69,public class ReduceDecimalsRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,39,public class SemiJoinFilterTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,48,public class SemiJoinJoinTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,55,public class SemiJoinProjectTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,36,public class SemiJoinRemoveRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,45,public abstract class SemiJoinRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,45,public class SortJoinTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,54,public class SortProjectTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,34,public class SortRemoveRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,37,public class SortUnionTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,67,public abstract class SubQueryRemoveRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,33,public class TableScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,42,public class UnionMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/UnionPullUpConstantsRule.java,48,public class UnionPullUpConstantsRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,35,public class UnionToDistinctRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,66,public abstract class ValuesReduceRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,70,public static class DeltaProjectTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,97,public static class DeltaFilterTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,123,public static class DeltaAggregateTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,152,public static class DeltaSortTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,179,public static class DeltaUnionTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,214,public static class DeltaTableScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,255,public static class DeltaTableScanToEmptyRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,292,public static class DeltaJoinTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,36,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,61,import org.apache.calcite.sql.fun.SqlStdOperatorTable;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,568,final List<RexNode> removableCasts = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,570,predicates.constantMap, constExps, addCasts, removableCasts);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,571,if (constExps.isEmpty() && removableCasts.isEmpty()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,572,return changed;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,579,if (!removableCasts.isEmpty()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,580,final List<RexNode> reducedExprs = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,581,for (RexNode exp : removableCasts) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,582,RexCall call = (RexCall) exp;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,583,reducedExprs.add(call.getOperands().get(0));
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,585,RexReplacer replacer =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,587,Collections.nCopies(removableCasts.size(), false));
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,588,replacer.mutate(expList);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,592,return true;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,662,List<RexNode> constExps, List<Boolean> addCasts,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,663,List<RexNode> removableCasts) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,666,addCasts, removableCasts);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,840,private final List<RexNode> removableCasts;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,846,List<Boolean> addCasts, List<RexNode> removableCasts) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,853,this.removableCasts = removableCasts;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,988,if (call.getOperator() == SqlStdOperatorTable.CAST) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,989,reduceCasts(call);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1003,private void reduceCasts(RexCall outerCast) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1004,List<RexNode> operands = outerCast.getOperands();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1005,if (operands.size() != 1) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1006,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1008,RelDataType outerCastType = outerCast.getType();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1009,RelDataType operandType = operands.get(0).getType();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1010,if (operandType.equals(outerCastType)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1011,removableCasts.add(outerCast);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1012,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1020,if (!(operands.get(0) instanceof RexCall)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1021,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1023,RexCall innerCast = (RexCall) operands.get(0);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1024,if (innerCast.getOperator() != SqlStdOperatorTable.CAST) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1025,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1027,if (innerCast.getOperands().size() != 1) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1028,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1030,RelDataType outerTypeNullable =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1031,typeFactory.createTypeWithNullability(outerCastType, true);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1032,RelDataType innerTypeNullable =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1033,typeFactory.createTypeWithNullability(operandType, true);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1034,if (outerTypeNullable != innerTypeNullable) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1035,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1037,if (operandType.isNullable()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1038,removableCasts.add(innerCast);
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,65,ImmutableIntList list = ImmutableIntList.copyOf(numbers);
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,66,if (numbers.size() > 1
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,67,&& !Ordering.natural().isOrdered(list)) {
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,68,list = ImmutableIntList.copyOf(Ordering.natural().sortedCopy(list));
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,137,return getTraitDef().canonize(
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,138,new RelDistributionImpl(type,
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,139,ImmutableIntList.copyOf(
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,124,ImmutableList.of(RelCollations.of(RexUtil.apply(map, fc))));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1223,newFieldCollations.add(apply(mapping, fieldCollation));
core/src/main/java/org/apache/calcite/util/Permutation.java,418,try {
core/src/main/java/org/apache/calcite/util/Permutation.java,419,return targets[source];
core/src/main/java/org/apache/calcite/util/Permutation.java,421,throw new Mappings.NoElementException("invalid source " + source);
core/src/main/java/org/apache/calcite/util/Permutation.java,429,try {
core/src/main/java/org/apache/calcite/util/Permutation.java,430,return sources[target];
core/src/main/java/org/apache/calcite/util/Permutation.java,432,throw new Mappings.NoElementException("invalid target " + target);
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,835,int getTarget(int target);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,24,import org.apache.calcite.rex.RexBuilder;
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,25,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,26,import org.apache.calcite.rex.RexProgram;
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,27,import org.apache.calcite.rex.RexProgramBuilder;
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,65,RexBuilder rexBuilder = topFilter.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,66,RexProgram bottomProgram = createProgram(bottomFilter);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,67,RexProgram topProgram = createProgram(topFilter);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,69,RexProgram mergedProgram =
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,70,RexProgramBuilder.mergePrograms(
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,71,topProgram,
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,72,bottomProgram,
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,73,rexBuilder);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,75,RexNode newCondition =
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,76,mergedProgram.expandLocalRef(
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,77,mergedProgram.getCondition());
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,81,.filter(newCondition);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,92,private RexProgram createProgram(Filter filterRel) {
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,93,RexProgramBuilder programBuilder =
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,94,new RexProgramBuilder(
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,95,filterRel.getRowType(),
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,96,filterRel.getCluster().getRexBuilder());
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,97,programBuilder.addIdentity();
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,98,programBuilder.addCondition(filterRel.getCondition());
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,99,return programBuilder.getProgram();
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,331,planner.reregister(this, otherRel);
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,222,return rexBuilder.makeInputRef(field.getType(), arg);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,70,return create(getCluster(), rowType, tuples);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,44,LogicalValues values = (LogicalValues) rel;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,45,return EnumerableValues.create(values.getCluster(), values.getRowType(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,46,values.getTuples());
core/src/main/java/org/apache/calcite/rel/logical/LogicalValues.java,86,() -> RelMdCollation.values(mq, rowType, tuples));
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,255,call.transformTo(call.builder().push(sort).empty().build());
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,342,this(clazz, (Predicate<R>) project -> true, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,366,SingleRel single = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,367,call.transformTo(call.builder().push(single).empty().build());
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,125,Preconditions.checkArgument(updateColumnList == null);
core/src/main/java/org/apache/calcite/rel/RelCollations.java,66,return new RelCollationImpl(ImmutableList.copyOf(fieldCollations));
core/src/main/java/org/apache/calcite/rel/RelCollations.java,69,final ImmutableList.Builder<RelFieldCollation> builder =
core/src/main/java/org/apache/calcite/rel/RelCollations.java,70,ImmutableList.builder();
core/src/main/java/org/apache/calcite/rel/RelCollations.java,71,final Set<Integer> set = new HashSet<>();
core/src/main/java/org/apache/calcite/rel/RelCollations.java,72,for (RelFieldCollation fieldCollation : fieldCollations) {
core/src/main/java/org/apache/calcite/rel/RelCollations.java,73,if (set.add(fieldCollation.getFieldIndex())) {
core/src/main/java/org/apache/calcite/rel/RelCollations.java,74,builder.add(fieldCollation);
core/src/main/java/org/apache/calcite/rel/RelCollations.java,77,return new RelCollationImpl(builder.build());
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,70,RelDistributionImpl trait =
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,71,new RelDistributionImpl(RelDistribution.Type.HASH_DISTRIBUTED, list);
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,72,return RelDistributionTraitDef.INSTANCE.canonize(trait);
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,78,RelDistributionImpl trait =
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,79,new RelDistributionImpl(RelDistribution.Type.RANGE_DISTRIBUTED, list);
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,80,return RelDistributionTraitDef.INSTANCE.canonize(trait);
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,411,protected MulticastRelOptListener getListener() {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,244,if (planner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,258,planner.listener.relEquivalenceFound(event);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,277,if (planner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,263,if (planner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,270,planner.listener.relEquivalenceFound(event);
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,298,if (planner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,303,planner.listener.relChosen(event);
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,446,if (planner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,451,planner.listener.relChosen(event);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,29,import org.apache.calcite.plan.RelOptListener;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,214,RelOptListener listener;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1662,public void addListener(RelOptListener newListener) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1665,if (listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1666,throw Util.needToImplement("multiple VolcanoPlanner listeners");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1668,listener = newListener;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,118,if (volcanoPlanner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,125,volcanoPlanner.listener.ruleProductionSucceeded(event);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,138,if (volcanoPlanner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,145,volcanoPlanner.listener.ruleProductionSucceeded(event);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,198,if (volcanoPlanner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,205,volcanoPlanner.listener.ruleAttempted(event);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,225,if (volcanoPlanner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,232,volcanoPlanner.listener.ruleAttempted(event);
core/src/main/java/org/apache/calcite/rel/mutable/MutableScan.java,39,&& rel.equals(((MutableScan) obj).rel);
core/src/main/java/org/apache/calcite/rel/mutable/MutableScan.java,43,return rel.hashCode();
core/src/main/java/org/apache/calcite/util/Sources.java,88,this.url = null;
core/src/main/java/org/apache/calcite/util/Sources.java,92,return (url != null ? url : file).toString();
core/src/main/java/org/apache/calcite/util/Sources.java,96,if (url == null) {
core/src/main/java/org/apache/calcite/util/Sources.java,97,throw new UnsupportedOperationException();
core/src/main/java/org/apache/calcite/util/Sources.java,142,if (url != null) {
core/src/main/java/org/apache/calcite/util/Sources.java,164,if (url != null) {
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,180,if (withDetail) {
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,183,&& typeSystem.getDefaultPrecision(typeName) > -1) {
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,184,printPrecision = true;
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,186,if (typeName.getDefaultScale() > -1) {
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,187,printScale = true;
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2289,int y = m / 12;
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2290,y0 += y;
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2291,m0 += m - y * 12;
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,552,final int updateCount;
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,568,MetaResultSet.create(h.connectionId, h.id, false, signature, null);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdMinRowCount.java,61,return rowCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,38,final RelTraitSet traitSet =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,39,agg.getTraitSet().replace(EnumerableConvention.INSTANCE);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,44,convert(agg.getInput(), EnumerableConvention.INSTANCE),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnionRule.java,38,final RelTraitSet traitSet = union.getTraitSet().replace(out);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnionRule.java,40,convertList(union.getInputs(), out), union.all);
core/src/main/java/org/apache/calcite/plan/Convention.java,47,boolean canConvertConvention(Convention toConvention);
core/src/main/java/org/apache/calcite/plan/Convention.java,62,boolean useAbstractConvertersForConversion(RelTraitSet fromTraits,
core/src/main/java/org/apache/calcite/plan/Convention.java,63,RelTraitSet toTraits);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,147,final RelSubset subset = getOrCreateSubset(rel.getCluster(), traitSet);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,153,VolcanoPlanner planner, RelOptCluster cluster, RelSubset subset, boolean subsetToOthers) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,156,for (RelSubset other : subsets) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,161,|| (subsetToOthers
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,162,&& !subset.getConvention().useAbstractConvertersForConversion(
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,164,|| (!subsetToOthers
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,165,&& !other.getConvention().useAbstractConvertersForConversion(
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,166,other.getTraitSet(), subset.getTraitSet()))) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,171,subset.getTraitSet().difference(other.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,173,boolean addAbstractConverter = true;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,174,int numTraitNeedConvert = 0;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,176,for (RelTrait curOtherTrait : difference) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,177,RelTraitDef traitDef = curOtherTrait.getTraitDef();
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,178,RelTrait curRelTrait = subset.getTraitSet().getTrait(traitDef);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,182,if (curRelTrait == null) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,183,addAbstractConverter = false;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,184,break;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,187,boolean canConvert = false;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,188,boolean needConvert = false;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,189,if (subsetToOthers) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,192,canConvert = traitDef.canConvert(
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,193,cluster.getPlanner(), curRelTrait, curOtherTrait, subset);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,194,needConvert = !curRelTrait.satisfies(curOtherTrait);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,197,canConvert = traitDef.canConvert(
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,198,cluster.getPlanner(), curOtherTrait, curRelTrait, other);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,199,needConvert = !curOtherTrait.satisfies(curRelTrait);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,202,if (!canConvert) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,203,addAbstractConverter = false;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,207,if (needConvert) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,208,numTraitNeedConvert++;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,212,if (addAbstractConverter && numTraitNeedConvert > 0) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,213,if (subsetToOthers) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,214,final AbstractConverter converter =
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,215,new AbstractConverter(cluster, subset, null, other.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,216,planner.register(converter, other);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,218,final AbstractConverter converter =
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,219,new AbstractConverter(cluster, other, null, subset.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,220,planner.register(converter, subset);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,227,RelOptCluster cluster,
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,228,RelTraitSet traits) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,233,final VolcanoPlanner planner =
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,234,(VolcanoPlanner) cluster.getPlanner();
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,236,addAbstractConverters(planner, cluster, subset, true);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,242,addAbstractConverters(planner, cluster, subset, false);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,322,RelSubset subset =
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,323,getOrCreateSubset(
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,324,otherSubset.getCluster(),
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,325,otherSubset.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,94,boolean boosted;
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,104,this.boosted = false;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,549,return rel2.set.getOrCreateSubset(rel.getCluster(), toTraits.simplify());
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,32,import org.apache.calcite.rex.RexCall;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,38,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,126,RexNode condition = variableReplacer.go(oldCondition);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,190,private static class VariableReplacer {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,204,public RexNode go(RexNode rex) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,205,if (rex instanceof RexCall) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,206,ImmutableList.Builder<RexNode> builder =
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,207,ImmutableList.builder();
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,208,final RexCall call = (RexCall) rex;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,209,for (RexNode operand : call.operands) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,210,builder.add(go(operand));
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,212,return call.clone(call.getType(), builder.build());
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,214,RexInputRef var = (RexInputRef) rex;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,215,int index = var.getIndex();
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,216,if (index < leftFields.size()) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,218,return rexBuilder.makeInputRef(
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,219,leftFields.get(index).getType(),
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,220,rightFields.size() + index);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,222,index -= leftFields.size();
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,223,if (index < rightFields.size()) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,225,return rexBuilder.makeInputRef(
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,226,rightFields.get(index).getType(),
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,227,index);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,231,+ ", rightFieldCount=" + rightFields.size());
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,233,return rex;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,410,if (canAssignFrom(left.getType(), operand.getType())) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,442,private static boolean canAssignFrom(RelDataType type1, RelDataType type2) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,448,return name1.compareTo(name2) >= 0;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,450,return true;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,441,routines = filterRoutinesByTypePrecedence(sqlSyntax, routines, argTypes);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,502,private static Iterator<SqlOperator> filterRoutinesByParameterType(
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,524,final Map<Integer, Integer> map = new HashMap<>();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,525,for (Ord<String> argName : Ord.zip(argNames)) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,526,final int i = function.getParamNames().indexOf(argName.e);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,527,if (i < 0) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,528,return false;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,530,map.put(i, argName.i);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,532,permutedArgTypes = Functions.generate(paramTypes.size(), a0 -> {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,533,if (map.containsKey(a0)) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,534,return argTypes.get(map.get(a0));
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,536,return null;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,564,List<RelDataType> argTypes) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,575,final RelDataType bestMatch = bestMatch(sqlFunctions, argType.i, precList);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,583,final RelDataType paramType = paramTypes.get(argType.i);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,594,RelDataTypePrecedenceList precList) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,601,final RelDataType paramType = paramTypes.get(i);
core/src/main/java/org/apache/calcite/schema/Schemas.java,227,return table.scan(root, ImmutableList.of());
core/src/main/java/org/apache/calcite/schema/Schemas.java,235,return table.scan(root, ImmutableList.of(),
core/src/main/java/org/apache/calcite/rel/core/Window.java,232,assert orderKeys != null : "precondition: ordinals != null";
core/src/main/java/org/apache/calcite/rel/core/Window.java,233,assert keys != null;
core/src/main/java/org/apache/calcite/rel/core/Window.java,234,this.keys = keys;
core/src/main/java/org/apache/calcite/rel/core/Window.java,236,this.lowerBound = lowerBound;
core/src/main/java/org/apache/calcite/rel/core/Window.java,237,this.upperBound = upperBound;
core/src/main/java/org/apache/calcite/rel/core/Window.java,238,this.orderKeys = orderKeys;
core/src/main/java/org/apache/calcite/rel/core/Window.java,248,final StringBuilder buf = new StringBuilder();
core/src/main/java/org/apache/calcite/rel/core/Window.java,249,buf.append("window(partition ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,250,buf.append(keys);
core/src/main/java/org/apache/calcite/rel/core/Window.java,251,buf.append(" order by ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,252,buf.append(orderKeys);
core/src/main/java/org/apache/calcite/rel/core/Window.java,253,buf.append(isRows ? " rows " : " range ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,254,if (lowerBound != null) {
core/src/main/java/org/apache/calcite/rel/core/Window.java,255,if (upperBound != null) {
core/src/main/java/org/apache/calcite/rel/core/Window.java,256,buf.append("between ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,257,buf.append(lowerBound);
core/src/main/java/org/apache/calcite/rel/core/Window.java,258,buf.append(" and ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,259,buf.append(upperBound);
core/src/main/java/org/apache/calcite/rel/core/Window.java,261,buf.append(lowerBound);
core/src/main/java/org/apache/calcite/rel/core/Window.java,266,buf.append(" aggs ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,267,buf.append(aggCalls);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,324,RelDataType type,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,325,SqlAggFunction operator,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,326,List<RexNode> exprs,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,327,List<RexNode> partitionKeys,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,328,ImmutableList<RexFieldCollation> orderKeys,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,329,RexWindowBound lowerBound,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,330,RexWindowBound upperBound,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,331,boolean physical,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,335,assert operator != null;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,336,assert exprs != null;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,337,assert partitionKeys != null;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,338,assert orderKeys != null;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,345,physical);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,375,Preconditions.checkArgument(physical, "DISALLOW PARTIAL over RANGE");
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,416,boolean isRows) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,422,isRows);
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,64,RexWindowBound lowerBound = window.getLowerBound().accept(this);
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,65,RexWindowBound upperBound = window.getUpperBound().accept(this);
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,66,if (update[0]
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,68,|| (upperBound != window.getUpperBound() && upperBound != null)) {
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,69,return new RexWindow(
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,70,clonedPartitionKeys,
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,71,clonedOrderKeys,
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,72,lowerBound,
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,73,upperBound,
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,74,window.isRows());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,21,import java.io.PrintWriter;
core/src/main/java/org/apache/calcite/rex/RexWindow.java,22,import java.io.StringWriter;
core/src/main/java/org/apache/calcite/rex/RexWindow.java,59,this.lowerBound = lowerBound;
core/src/main/java/org/apache/calcite/rex/RexWindow.java,60,this.upperBound = upperBound;
core/src/main/java/org/apache/calcite/rex/RexWindow.java,84,StringWriter sw = new StringWriter();
core/src/main/java/org/apache/calcite/rex/RexWindow.java,85,PrintWriter pw = new PrintWriter(sw);
core/src/main/java/org/apache/calcite/rex/RexWindow.java,86,int clauseCount = 0;
core/src/main/java/org/apache/calcite/rex/RexWindow.java,88,if (clauseCount++ > 0) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,89,pw.print(' ');
core/src/main/java/org/apache/calcite/rex/RexWindow.java,91,pw.print("PARTITION BY ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,94,pw.print(", ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,96,RexNode partitionKey = partitionKeys.get(i);
core/src/main/java/org/apache/calcite/rex/RexWindow.java,97,pw.print(partitionKey.toString());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,101,if (clauseCount++ > 0) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,102,pw.print(' ');
core/src/main/java/org/apache/calcite/rex/RexWindow.java,104,pw.print("ORDER BY ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,107,pw.print(", ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,109,RexFieldCollation orderKey = orderKeys.get(i);
core/src/main/java/org/apache/calcite/rex/RexWindow.java,110,pw.print(orderKey.toString());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,113,if (lowerBound == null) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,116,if (clauseCount++ > 0) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,117,pw.print(' ');
core/src/main/java/org/apache/calcite/rex/RexWindow.java,119,if (isRows) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,120,pw.print("ROWS ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,122,pw.print("RANGE ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,124,pw.print(lowerBound.toString());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,126,if (clauseCount++ > 0) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,127,pw.print(' ');
core/src/main/java/org/apache/calcite/rex/RexWindow.java,129,if (isRows) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,130,pw.print("ROWS BETWEEN ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,132,pw.print("RANGE BETWEEN ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,134,pw.print(lowerBound.toString());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,135,pw.print(" AND ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,136,pw.print(upperBound.toString());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,138,return sw.toString();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,19,import org.apache.calcite.sql.SqlKind;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,20,import org.apache.calcite.sql.SqlLiteral;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,22,import org.apache.calcite.sql.SqlWindow;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,38,|| SqlWindow.isUnboundedFollowing(node)) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,39,return new RexWindowBoundUnbounded(node);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,41,if (SqlWindow.isCurrentRow(node)) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,42,return new RexWindowBoundCurrentRow();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,44,return new RexWindowBoundBounded(rexNode);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,111,private static class RexWindowBoundUnbounded extends RexWindowBound {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,112,private final SqlNode node;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,114,RexWindowBoundUnbounded(SqlNode node) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,115,this.node = node;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,119,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,123,return SqlWindow.isUnboundedPreceding(node);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,127,return SqlWindow.isUnboundedFollowing(node);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,131,return ((SqlLiteral) node).getValue().toString();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,135,return isPreceding() ? 0 : 2;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,139,if (this == o) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,140,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,142,if (o == null || getClass() != o.getClass()) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,143,return false;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,146,RexWindowBoundUnbounded that = (RexWindowBoundUnbounded) o;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,148,if (!node.equals(that.node)) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,149,return false;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,152,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,156,return node.hashCode();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,163,private static class RexWindowBoundCurrentRow extends RexWindowBound {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,165,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,169,return "CURRENT ROW";
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,173,return 1;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,177,return getClass() == obj.getClass();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,181,return 123;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,188,private static class RexWindowBoundBounded extends RexWindowBound {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,189,private final SqlKind sqlKind;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,190,private final RexNode offset;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,192,RexWindowBoundBounded(RexNode node) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,193,assert node instanceof RexCall
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,194,: "RexWindowBoundBounded window bound should be either 'X preceding'"
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,195,+ " or 'X following' call. Actual type is " + node;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,196,RexCall call = (RexCall) node;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,197,this.offset = call.getOperands().get(0);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,198,this.sqlKind = call.getKind();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,199,assert this.offset != null
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,200,: "RexWindowBoundBounded offset should not be null";
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,203,private RexWindowBoundBounded(SqlKind sqlKind, RexNode offset) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,204,this.sqlKind = sqlKind;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,205,this.offset = offset;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,209,return sqlKind == SqlKind.PRECEDING;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,213,return sqlKind == SqlKind.FOLLOWING;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,217,return offset;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,221,R r = offset.accept(visitor);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,222,if (r instanceof RexNode && r != offset) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,223,return new RexWindowBoundBounded(sqlKind, (RexNode) r);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,225,return this;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,229,return offset.toString() + " " + sqlKind.toString();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,233,if (this == o) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,234,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,236,if (o == null || getClass() != o.getClass()) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,237,return false;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,240,RexWindowBoundBounded that = (RexWindowBoundBounded) o;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,242,if (!offset.equals(that.offset)) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,243,return false;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,245,if (sqlKind != that.sqlKind) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,246,return false;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,249,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,253,int result = sqlKind.hashCode();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,254,result = 31 * result + offset.hashCode();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,255,return result;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,233,final SqlWindow tmp;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,234,if (lowerBound == null || upperBound == null) {
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,236,tmp = new SqlWindow(getParserPosition(), null, null, partitionList,
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,237,orderList, isRows, lowerBound, upperBound, allowPartial);
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,238,tmp.populateBounds();
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,240,tmp = this;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,242,if (tmp.lowerBound instanceof SqlLiteral
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,243,&& tmp.upperBound instanceof SqlLiteral) {
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,244,int lowerKey = RexWindowBound.create(tmp.lowerBound, null).getOrderKey();
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,245,int upperKey = RexWindowBound.create(tmp.upperBound, null).getOrderKey();
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,246,return lowerKey > -1 && lowerKey <= upperKey;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,248,return false;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,763,setLowerBound(
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,764,SqlWindow.createUnboundedPreceding(getParserPosition()));
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,767,setLowerBound(
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,768,SqlWindow.createCurrentRow(getParserPosition()));
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,771,SqlParserPos pos = orderList.getParserPosition();
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,772,setUpperBound(
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,773,orderList.size() == 0
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,775,: SqlWindow.createCurrentRow(pos));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidator.java,381,SqlWindow resolveWindow(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidator.java,384,boolean populateBounds);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4778,SqlValidatorScope scope,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4779,boolean populateBounds) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4799,if (populateBounds) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4800,window.populateBounds();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1847,validator.resolveWindow(windowOrRef, bb.scope, true);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1850,if (aggCall.getKind() == SqlKind.ROW_NUMBER) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1851,window.setLowerBound(SqlWindow.createUnboundedPreceding(SqlParserPos.ZERO));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1852,window.setUpperBound(SqlWindow.createCurrentRow(SqlParserPos.ZERO));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1853,window.setRows(SqlLiteral.createBoolean(true, SqlParserPos.ZERO));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1861,RexNode lowerBound = bb.convertExpression(window.getLowerBound());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1862,RexNode upperBound = bb.convertExpression(window.getUpperBound());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1863,SqlNodeList orderList = window.getOrderList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1864,if ((orderList.size() == 0) && !window.isRows()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1904,RexWindowBound.create(window.getLowerBound(), lowerBound),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1905,RexWindowBound.create(window.getUpperBound(), upperBound),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1906,window,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1908,RexNode overNode = rexAgg.accept(visitor);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1910,return overNode;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5180,private final SqlWindow window;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5187,SqlWindow window,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5193,this.window = window;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5248,window.isRows(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5249,window.isAllowPartial(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5289,window.isRows(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5290,window.isAllowPartial(),
core/src/main/java/org/apache/calcite/rex/RexOver.java,152,public static boolean containsOver(List<RexNode> exprs, RexNode condition) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,186,joinType.generatesNullsOnRight())))).toBlock());
core/src/main/java/org/apache/calcite/util/BuiltInMethod.java,148,boolean.class, boolean.class),
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3208,Function2<TSource, TInner, TResult> resultSelector) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3235,int c = leftKey.compareTo(rightKey);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3264,int c = leftKey.compareTo(leftKey2);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3280,int c = rightKey.compareTo(rightKey2);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1000,return SqlStdOperatorTable.AS.createCall(POS, node,
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1001,new SqlIdentifier(neededAlias, POS));
core/src/main/java/org/apache/calcite/sql/fun/SqlMinMaxAggFunction.java,70,super(kind.name(),
core/src/main/java/org/apache/calcite/sql/fun/SqlMinMaxAggFunction.java,75,OperandTypes.COMPARABLE_ORDERED,
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1424,return s.replaceAll("0*E", "E").replace("E+", "E");
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1435,return s.replaceAll("0*E", "E").replace("E+", "E");
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1441,if (s.startsWith("0")) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,253,if (identifierQuoteString == null) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,254,return val; // quoting is not supported
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,256,String val2 =
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,257,val.replaceAll(
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,258,identifierEndQuoteString,
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,259,identifierEscapedQuote);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,260,return identifierQuoteString + val2 + identifierEndQuoteString;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,309,s = s.replaceAll(" ", "");
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,310,s = s.replaceAll("\n", "");
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,311,s = s.replaceAll("\t", "");
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,312,s = s.replaceAll("\r", "");
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,313,s = s.replaceAll("\f", "");
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,314,s = s.replaceAll("'", "");
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,902,String qName = name;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,905,qName = dialect.quoteIdentifier(name);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,907,maybeWhitespace(qName);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,885,sig = sig.replaceAll("'", "");
core/src/main/java/org/apache/calcite/util/BitString.java,51,assert bits.replaceAll("1", "").replaceAll("0", "").length() == 0
core/src/main/java/org/apache/calcite/util/Util.java,711,return s.replaceAll("\r\n", "\n");
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchProject.java,82,+ expr.replaceAll("\"", "") + "\"}");
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoTable.java,159,private static Integer parseIntString(String valueString) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoTable.java,160,return Integer.parseInt(valueString.replaceAll("[^0-9]", ""));
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,402,value = value.replaceAll("%", "*");
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1795,return Expressions.call(floorMethod, tur,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1796,call(operand, type, TimeUnit.DAY));
core/src/main/java/org/apache/calcite/rex/RexAnalyzer.java,131,switch (call.getKind()) {
core/src/main/java/org/apache/calcite/rex/RexAnalyzer.java,132,case CAST:
core/src/main/java/org/apache/calcite/rex/RexAnalyzer.java,135,default:
core/src/main/java/org/apache/calcite/rex/RexAnalyzer.java,136,return super.visitCall(call);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,38,(Predicate<Calc>) RelOptUtil::containsMultisetOrWindowedAgg,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,35,(Predicate<LogicalFilter>) RelOptUtil::containsMultisetOrWindowedAgg,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,35,(Predicate<LogicalProject>) RelOptUtil::containsMultisetOrWindowedAgg,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,269,(Predicate<LogicalFilter>) RelOptUtil::containsMultisetOrWindowedAgg,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,336,(Predicate<LogicalProject>) RelOptUtil::containsMultisetOrWindowedAgg,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,71,import org.apache.calcite.rex.RexMultisetUtil;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,134,static final boolean B = false;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,142,RelOptUtil::containsMultisetOrWindowedAgg;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,148,RelOptUtil::containsMultisetOrWindowedAgg;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,153,RelOptUtil::containsMultisetOrWindowedAgg;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3085,public static boolean containsMultisetOrWindowedAgg(Calc calc) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3086,return !(B
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3088,|| calc.getProgram().containsAggs());
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3093,public static boolean containsMultisetOrWindowedAgg(Filter filter) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3094,return !(B
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3096,|| RexOver.containsOver(filter.getCondition()));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3101,public static boolean containsMultisetOrWindowedAgg(Project project) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3102,return !(B
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3104,|| RexOver.containsOver(project.getProjects(), null));
core/src/main/java/org/apache/calcite/sql/SqlDialectFactoryImpl.java,116,return new MysqlSqlDialect(c);
core/src/main/java/org/apache/calcite/sql/SqlDialectFactoryImpl.java,134,return new PostgresqlSqlDialect(c);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,70,import com.google.common.collect.LinkedHashMultimap;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,74,import com.google.common.collect.SetMultimap;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,248,private final SetMultimap<String, Class> ruleNames =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,249,LinkedHashMultimap.create();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,458,if (ruleNames.put(ruleName, rule.getClass())) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,459,Set<Class> x = ruleNames.get(ruleName);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,460,if (x.size() > 1) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,461,throw new RuntimeException("Rule description '" + ruleName
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,462,+ "' is not unique; classes: " + x);
