File,Line_number,SRC
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,189,username
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,271,doRFC2254Encoding(dn), username
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,57,ObjectName[] queues = broker.getTopics();
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,58,return getManagedObjects(queues, TopicViewMBean.class);
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,66,ObjectName[] queues = broker.getDurableTopicSubscribers();
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,67,return getManagedObjects(queues, DurableSubscriptionViewMBean.class);
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,75,ObjectName[] queues = broker.getInactiveDurableTopicSubscribers();
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,76,return getManagedObjects(queues, DurableSubscriptionViewMBean.class);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionFactory.java,101,throw new JMSException(e.getMessage());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,204,cleanup();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,207,physicalConnection.close();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,208,destroyed = true;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,238,localAndXATransaction.cleanup();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,22,import javax.jms.Connection;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,24,import javax.jms.XAConnection;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,25,import javax.jms.XASession;
activemq-ra/src/main/java/org/apache/activemq/ra/LocalAndXATransaction.java,33,private final TransactionContext transactionContext;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,171,log.debug("JMS Session is no longer running (maybe due to loss of connection?), marking ServerSesison as stale");
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,177,log.debug("Endpoint failed to process message.", e);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,179,log.info("Endpoint failed to process message. Reason: " + e.getMessage());
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,258,return "ServerSessionImpl:" + serverSessionId;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,224,for (Iterator i = l.iterator(); i.hasNext();) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,225,dispatchToSession((MessageDispatch)i.next());
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,228,LOG.error("Error redispatching unconsumed messages from stale session", t);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,116,serverSessionPool.closeIdleSessions();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,169,session.run();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,265,int activeCount = closeIdleSessions();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,281,activeCount = closeIdleSessions();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,286,protected int closeIdleSessions() {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,183,MessageAvailableConsumer consumer = (MessageAvailableConsumer)client.getConsumer(destination, request.getHeader(WebClient.selectorName));
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,186,if (message != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,189,writeResponse(request, response, message);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,190,return;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,192,long timeout = getReadTimeout(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,198,Continuation continuation = null;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,199,Listener listener = null;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,203,message = consumer.receive(10);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,208,continuation = ContinuationSupport.getContinuation(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,210,if (continuation.isExpired()) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,211,response.setStatus(HttpServletResponse.SC_NO_CONTENT);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,212,return;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,215,continuation.setTimeout(timeout);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,216,continuation.suspend();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,219,listener = (Listener)consumer.getAvailableListener();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,220,if (listener == null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,221,listener = new Listener(consumer);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,222,consumer.setAvailableListener(listener);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,226,listener.setContinuation(continuation);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,229,writeResponse(request, response, message);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,231,throw new ServletException("Could not post JMS message: " + e, e);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,267,TextMessage textMsg = (TextMessage)message;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,274,ObjectMessage objectMsg = (ObjectMessage)message;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,327,protected long getReadTimeout(HttpServletRequest request) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,328,long answer = defaultReadTimeout;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,330,String name = request.getParameter(readTimeoutParameter);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,331,if (name != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,332,answer = asLong(name);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,334,if (answer < 0 || answer > maximumReadTimeout) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,335,answer = maximumReadTimeout;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,337,return answer;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,362,try {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,363,Message message = consumer.receiveNoWait();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,364,continuation.setAttribute("message", message);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,63,return configuration;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,66,public void setConfiguration(WebConsoleConfiguration configuration) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,67,this.configuration = configuration;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,78,throws IOException, MalformedObjectNameException {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,79,Set<ObjectName> brokers = findBrokers(connection);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,80,if (brokers.size() == 0) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,81,throw new IOException("No broker could be found in the JMX.");
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,83,ObjectName name = brokers.iterator().next();
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,84,return name;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,90,Set brokers = findBrokers(connection);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,94,ObjectName name = (ObjectName)brokers.iterator().next();
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,95,BrokerViewMBean mbean = (BrokerViewMBean)MBeanServerInvocationHandler.newProxyInstance(connection, name, BrokerViewMBean.class, true);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,99,public String getBrokerName() throws Exception,
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,100,MalformedObjectNameException {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,136,if (this.configuration.getJmxUser() != null) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,137,env.put("jmx.remote.credentials", new String[] {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,138,this.configuration.getJmxUser(),
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,139,this.configuration.getJmxPassword() });
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,144,for (JMXServiceURL url : jmxUrls) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,145,try {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,146,JMXConnector connector = JMXConnectorFactory.connect(url, env);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,147,connector.connect();
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,148,MBeanServerConnection connection = connector
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,149,.getMBeanServerConnection();
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,151,Set<ObjectName> brokers = findBrokers(connection);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,152,if (brokers.size() > 0) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,153,LOG.info("Connected via JMX to the broker at " + url);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,154,return connector;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,158,exception = e;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,161,if (exception != null) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,162,if (exception instanceof RuntimeException) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,163,throw (RuntimeException) exception;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,165,throw new RuntimeException(exception);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,168,throw new IllegalStateException("No broker is found at any of the "
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,169,+ jmxUrls.size() + " configured urls");
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,197,throws IOException, MalformedObjectNameException {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,198,ObjectName name;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,199,if (this.brokerName == null) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,206,Set<ObjectName> brokers = connection.queryNames(name, null);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,210,public void purgeQueue(ActiveMQDestination destination) throws Exception {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,211,QueueViewMBean queue = getQueue(destination.getPhysicalName());
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,212,queue.purge();
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,215,public ManagementContext getManagementContext() {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,216,throw new IllegalStateException("not supported");
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,221,protected <T> Collection<T> getManagedObjects(ObjectName[] names,
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,222,Class<T> type) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,223,MBeanServerConnection connection;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,224,try {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,225,connection = getMBeanServerConnection();
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,227,throw new RuntimeException(e);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,230,List<T> answer = new ArrayList<T>();
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,231,if (connection != null) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,232,for (int i = 0; i < names.length; i++) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,233,ObjectName name = names[i];
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,234,T value = (T) MBeanServerInvocationHandler.newProxyInstance(
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,235,connection, name, type, true);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,236,if (value != null) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,237,answer.add(value);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,241,return answer;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,250,public Object newProxyInstance(ObjectName objectName, Class interfaceClass,boolean notificationBroadcaster) throws Exception {
activemq-camel/src/main/java/org/apache/activemq/camel/component/ActiveMQComponent.java,65,answer.setConnectionFactory(new ActiveMQConnectionFactory(brokerURL));
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,218,NameParser parser = context.getNameParser("");
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,219,Name contextName = parser.parse(context.getNameInNamespace());
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,220,Name baseName = parser.parse(getLDAPPropertyValue(USER_BASE));
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,221,Name entryName = parser.parse(result.getName());
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,222,Name name = contextName.addAll(baseName);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,223,name = name.addAll(entryName);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,224,String dn = name.toString();
activemq-camel/src/main/java/org/apache/activemq/camel/component/CamelEndpointLoader.java,23,import javax.annotation.PreDestroy;
activemq-camel/src/main/java/org/apache/activemq/camel/component/CamelEndpointLoader.java,24,import javax.jms.Connection;
activemq-camel/src/main/java/org/apache/activemq/camel/component/CamelEndpointLoader.java,25,import javax.jms.ConnectionFactory;
activemq-camel/src/main/java/org/apache/activemq/camel/component/CamelEndpointLoader.java,27,import org.apache.activemq.EnhancedConnection;
activemq-camel/src/main/java/org/apache/activemq/camel/component/CamelEndpointLoader.java,39,import org.apache.camel.util.ObjectHelper;
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnectionFactory.java,60,public class PooledConnectionFactory implements ConnectionFactory, Service {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,226,throw new RuntimeException("Endpoint after delivery notification failure", e);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,60,private String readTimeoutParameter = "readTimeout";
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,65,private HashMap<String, WebClient> clients = new HashMap<String, WebClient>();
assembly/src/release/example/src/ProducerTool.java,169,if (transacted) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,207,return brokers;
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,23,import org.eclipse.jetty.continuation.ContinuationSupport;
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,28,import org.apache.activemq.MessageAvailableListener;
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,30,import java.util.LinkedList;
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,38,private long maximumReadTimeout;
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,39,private AjaxWebClient client;
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,42,private LinkedList<UndeliveredAjaxMessage> undeliveredMessages = new LinkedList<UndeliveredAjaxMessage>();
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,69,LOG.debug( "message is " + message );
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,70,if( message != null ) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,71,if( continuation.isSuspended() ) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,72,LOG.debug( "Resuming suspended continuation " + continuation );
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,73,continuation.setAttribute("undelivered_message", new UndeliveredAjaxMessage( message, consumer ) );
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,76,LOG.debug( "Message available, but continuation is already resumed.  Buffer for next time." );
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,77,bufferMessageForDelivery( message, consumer );
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,93,bufferMessageForDelivery( message, consumer );
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,100,public void bufferMessageForDelivery( Message message, MessageConsumer consumer ) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,101,if( message != null ) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,102,synchronized( undeliveredMessages ) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,103,undeliveredMessages.addLast( new UndeliveredAjaxMessage( message, consumer ) );
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,356,for (Iterator<UndeliveredAjaxMessage> it = undeliveredMessages.iterator(); it.hasNext(); ) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,68,private String readTimeoutParameter = "timeout";
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,73,private HashMap<String,AjaxWebClient> ajaxWebClients = new HashMap<String,AjaxWebClient>();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,272,message = (Message)undelivered_message.getMessage();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,359,Message msg = (Message)undelivered.getMessage();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,236,Connection connection = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,238,connection = makeConnection();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,239,if (connection instanceof XAConnection) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,240,XASession session = ((XAConnection)connection).createXASession();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,241,XAResource xaResource = session.getXAResource();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,242,return new XAResource[] {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,243,xaResource
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,246,return new XAResource[] {};
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,250,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,251,connection.close();
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,161,return true;
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,170,return true;
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,172,return false;
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,59,this.pool.incrementReferenceCount();
activemq-web/src/main/java/org/apache/activemq/web/PortfolioPublishServlet.java,71,out.print(refreshRate);
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,30,import org.apache.activemq.broker.jmx.*;
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,125,Set<ObjectName> queryResult = queryNames(query, null);
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionKey.java,51,return equals((ConnectionKey)that);
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,46,private long firstUsed = lastUsed;
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,146,expiredCheck();
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,157,if (hasExpired) {
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,165,|| expiryTimeout > 0 && System.currentTimeMillis() > firstUsed + expiryTimeout) {
activemq-web/src/main/java/org/apache/activemq/web/SessionPool.java,35,private LinkedList<Session> sessions = new LinkedList<Session>();
activemq-web/src/main/java/org/apache/activemq/web/SessionPool.java,43,connection = getConnectionFactory().createConnection();
activemq-web/src/main/java/org/apache/activemq/web/SessionPool.java,44,connection.start();
activemq-web/src/main/java/org/apache/activemq/web/SessionPool.java,45,return connection;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,60,public static List queryMBeans(MBeanServerConnection jmxConnection, List queryList) throws Exception {
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,112,return new WildcardToRegExTransformFilter(new MBeansRegExQueryFilter(new MBeansObjectNameQueryFilter(jmxConnection)));
activemq-xmpp/src/main/java/org/apache/activemq/transport/xmpp/XmppTransport.java,54,import org.jabber.etherx.streams.Features;
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,22,import java.util.Enumeration;
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,25,import java.util.Properties;
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,56,private static String usersFile;
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,57,private static String groupsFile;
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,58,private static Properties users;
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,59,private static Properties groups;
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,61,private Set<Principal> principals = new HashSet<Principal>();
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,71,debug = "true".equalsIgnoreCase((String)options.get("debug"));
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,73,reload = "true".equalsIgnoreCase((String)options.get("reload"));
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,80,try {
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,81,users = new Properties();
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,82,java.io.FileInputStream in = new java.io.FileInputStream(uf);
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,83,users.load(in);
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,84,in.close();
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,86,LOG.warn("Unable to load user properties file " + uf);
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,96,try {
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,97,groups = new Properties();
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,98,java.io.FileInputStream in = new java.io.FileInputStream(gf);
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,99,groups.load(in);
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,100,in.close();
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,102,LOG.warn("Unable to load group properties file " + gf);
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,135,user = ((NameCallback)callbacks[0]).getName();
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,136,char[] tmpPassword = ((PasswordCallback)callbacks[1]).getPassword();
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,162,String name = (String)enumeration.nextElement();
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,163,String[] userList = ((String)groups.getProperty(name) + "").split(",");
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,76,private ConnectionConsumer consumer;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,130,consumer = connection.createDurableConnectionConsumer(
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,138,consumer = connection.createConnectionConsumer(
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,184,throw new NotSupportedException("That type of ActicationSpec not supported: " + activationSpec.getClass());
activemq-web-console/src/main/java/org/apache/activemq/web/handler/BindingBeanNameUrlHandlerMapping.java,20,import java.util.UUID;
activemq-web-console/src/main/java/org/apache/activemq/web/handler/BindingBeanNameUrlHandlerMapping.java,28,import org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping;
activemq-web-console/src/main/java/org/apache/activemq/web/handler/BindingBeanNameUrlHandlerMapping.java,51,if (object instanceof DestinationFacade) {
activemq-web-console/src/main/java/org/apache/activemq/web/handler/BindingBeanNameUrlHandlerMapping.java,53,if (!Arrays.asList(((DestinationFacade)object).getSupportedHttpMethods()).contains(request.getMethod())) {
activemq-web-console/src/main/java/org/apache/activemq/web/handler/BindingBeanNameUrlHandlerMapping.java,54,throw new UnsupportedOperationException("Unsupported method " + request.getMethod() + " for path " + request.getRequestURI());
activemq-web-console/src/main/java/org/apache/activemq/web/handler/BindingBeanNameUrlHandlerMapping.java,57,if (!request.getSession().getAttribute("secret").equals(request.getParameter("secret"))) {
activemq-web-console/src/main/java/org/apache/activemq/web/handler/BindingBeanNameUrlHandlerMapping.java,58,throw new UnsupportedOperationException("Possible CSRF attack");
activemq-console/src/main/java/org/apache/activemq/console/command/BstatCommand.java,68,queryTokens.add("--vuew");
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,397,sendShutdown.countDown();
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,134,bridge.start();
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,111,final SimpleDiscoveryEvent event = (SimpleDiscoveryEvent)devent;
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,112,if (event.failed.compareAndSet(false, true)) {
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,114,listener.onServiceRemove(event);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,74,if (info.getDestination().isTemporary() || broker == null || broker.getTempDataStore()==null ) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,126,LOG.debug("Activating " + this);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,80,private BrokerService brokerService;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,96,if (!isFull() && matched.isEmpty()  && !isSlave()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,496,node.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,501,md.setDestination(node.getRegionDestination().getActiveMQDestination());
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,502,dispatchedCounter.incrementAndGet();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,505,if (singleDestination) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,506,if (destination == null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,507,destination = node.getRegionDestination();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,509,if (destination != node.getRegionDestination()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,510,singleDestination = false;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,515,md.setTransmitCallback(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,517,public void run() {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,518,node.getRegionDestination().getDestinationStatistics().getDispatched().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,519,node.getRegionDestination().getDestinationStatistics().getInflight().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,520,node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,526,node.getRegionDestination().getDestinationStatistics().getDispatched().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,527,node.getRegionDestination().getDestinationStatistics().getInflight().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,528,node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,505,connectionInfo.setTransportContext(stompTransport.getPeerCertificates());
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransport.java,20,import java.security.cert.X509Certificate;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransport.java,34,public X509Certificate[] getPeerCertificates();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,20,import java.security.cert.X509Certificate;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,29,import org.apache.activemq.transport.tcp.SslTransport;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,43,private static final Logger LOG = LoggerFactory.getLogger(StompTransportFilter.class);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,99,public X509Certificate[] getPeerCertificates() {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,103,LOG.debug("Peer Identity has been verified\n");
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,77,SslTransportServer server = new SslTransportServer(this, location, (SSLServerSocketFactory)serverSocketFactory);
activemq-optional/src/main/java/org/apache/activemq/transport/ws/StompSocket.java,20,import java.security.cert.X509Certificate;
activemq-optional/src/main/java/org/apache/activemq/transport/ws/StompSocket.java,83,public X509Certificate[] getPeerCertificates() {
activemq-optional/src/main/java/org/apache/activemq/transport/ws/StompSocket.java,84,return null;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,135,private volatile int receiveCounter;
activemq-core/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,20,import org.apache.activemq.broker.*;
activemq-core/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,21,import org.apache.activemq.broker.jmx.ManagedTransportConnector;
activemq-core/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,89,isSSL = (transportConnector.getServer() instanceof SslTransportServer);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportServer.java,59,public SslTransportServer(
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportServer.java,60,SslTransportFactory transportFactory,
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportServer.java,61,URI location,
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportServer.java,62,SSLServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,393,throw new ExceededMaximumConnectionsException("Exceeded the maximum " +
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,401,options.put("maxInactivityDurationInitalDelay",
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,403,options.put("minmumWireFormatVersion",
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,421,Transport configuredTransport =
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,439,public int getSoTimeout() {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,440,return soTimeout;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,443,public void setSoTimeout(int soTimeout) {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,444,this.soTimeout = soTimeout;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,447,public int getSocketBufferSize() {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,448,return socketBufferSize;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,451,public void setSocketBufferSize(int socketBufferSize) {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,452,this.socketBufferSize = socketBufferSize;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,455,public int getConnectionTimeout() {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,456,return connectionTimeout;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,459,public void setConnectionTimeout(int connectionTimeout) {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,460,this.connectionTimeout = connectionTimeout;
activemq-core/src/main/java/org/apache/activemq/transport/udp/UdpTransportServer.java,37,import org.apache.activemq.transport.reliable.Replayer;
activemq-web/src/main/java/org/apache/activemq/web/PortfolioPublishServlet.java,73,out.println("<body>Published <b>" + count + "</b> of " + total + " price messages.  Refresh = " + refreshRate + "s");
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,88,subscriptionRecoveryPolicy = new NoSubscriptionRecoveryPolicy();
kahadb/src/main/java/org/apache/kahadb/util/SequenceSet.java,110,Sequence sequence = getHead();
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOOutputStream.java,26,import org.apache.activemq.transport.tcp.TimeStampStream;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,559,checkConnected();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,562,connected.set(false);
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,97,cs.removeTransactionState(info.getTransactionId());
kahadb/src/main/java/org/apache/kahadb/index/BTreeNode.java,335,tx.free(child.getPage());
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,50,public void addDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,51,addDestination(context, info.getDestination(),true);
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,52,super.addDestinationInfo(context, info);
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,56,public Destination addDestination(ConnectionContext context, ActiveMQDestination destination,boolean create) throws Exception {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,64,return super.addDestination(context, destination,create);
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,76,throw new SecurityException("User " + securityContext.getUserName() + " is not authorized to create: " + destination);
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,87,final SecurityContext securityContext = context.getSecurityContext();
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,88,if (securityContext == null) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,89,throw new SecurityException("User is not authenticated.");
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,91,Set<?> allowedACLs = null;
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,92,if (!destination.isTemporary()) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,93,allowedACLs = authorizationMap.getAdminACLs(destination);
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,95,allowedACLs = authorizationMap.getTempDestinationAdminACLs();
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,98,if (!securityContext.isBrokerContext() && allowedACLs != null && !securityContext.isInOneOf(allowedACLs)) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,105,public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,107,final SecurityContext subject = context.getSecurityContext();
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,108,if (subject == null) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,109,throw new SecurityException("User is not authenticated.");
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,118,if (!subject.isBrokerContext() && allowedACLs != null && !subject.isInOneOf(allowedACLs)) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,119,throw new SecurityException("User " + subject.getUserName() + " is not authorized to read from: " + info.getDestination());
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,121,subject.getAuthorizedReadDests().put(info.getDestination(), info.getDestination());
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,150,SecurityContext subject = context.getSecurityContext();
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,151,if (subject == null) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,152,throw new SecurityException("User is not authenticated.");
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,154,if (!subject.isBrokerContext() && info.getDestination() != null) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,162,if (allowedACLs != null && !subject.isInOneOf(allowedACLs)) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,163,throw new SecurityException("User " + subject.getUserName() + " is not authorized to write to: " + info.getDestination());
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,165,subject.getAuthorizedWriteDests().put(info.getDestination(), info.getDestination());
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,173,SecurityContext subject = producerExchange.getConnectionContext().getSecurityContext();
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,174,if (subject == null) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,175,throw new SecurityException("User is not authenticated.");
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,177,if (!subject.isBrokerContext() && !subject.getAuthorizedWriteDests().contains(messageSend.getDestination())) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,186,if (allowedACLs != null && !subject.isInOneOf(allowedACLs)) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,187,throw new SecurityException("User " + subject.getUserName() + " is not authorized to write to: " + messageSend.getDestination());
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,189,subject.getAuthorizedWriteDests().put(messageSend.getDestination(), messageSend.getDestination());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,843,synchronized (deliveredMessages) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,844,deliveredMessages.remove(md);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,847,ackLater(md, MessageAck.DELIVERED_ACK_TYPE);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1066,MessageAck ack = new MessageAck(md,MessageAck.INDIVIDUAL_ACK_TYPE,1);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,996,session.sendAck(ack);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,317,if (!disposed.get()) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,318,setupStaticDestinations();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,320,LOG.warn("Network connection between " + localBroker + " and " + remoteBroker + "(" + remoteBrokerName + ") was interrupted during establishment.");
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,20,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,56,throws JMSException {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,57,super(broker,usageManager, context, info);
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,58,this.pending = new StoreDurableSubscriberCursor(broker,context.getClientId(), info.getSubscriptionName(), info.getPrefetchSize(), this);
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,102,Topic topic = (Topic)destination;
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,107,this.enqueueCounter+=pending.size();
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,109,TopicMessageStore store = (TopicMessageStore)destination.getMessageStore();
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,111,this.enqueueCounter+=store.getMessageCount(subscriptionKey.getClientId(),subscriptionKey.getSubscriptionName());
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,121,public void activate(SystemUsage memoryManager, ConnectionContext context,
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,122,ConsumerInfo info) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,129,.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,130,Topic topic = (Topic) iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,145,.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,146,Topic topic = (Topic) iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,231,synchronized(pending) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,307,return false;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,108,sub.activate(usageManager, context, info);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,246,response.setStatus(HttpServletResponse.SC_NO_CONTENT);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,249,response.setStatus(HttpServletResponse.SC_OK);
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,37,return load(classDesc.getName(), cl);
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,56,try {
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,57,return Class.forName(className, false, cl);
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,60,if (clazz != null) {
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,61,return clazz;
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,63,return Class.forName(className, false, FALLBACK_CLASS_LOADER);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1945,for (Iterator<ActiveMQSession> i = this.sessions.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1946,ActiveMQSession s = i.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1947,if (s.isInUse(destination)) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2228,for (Iterator<ActiveMQSession> i = this.sessions.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2229,ActiveMQSession s = i.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2230,s.close(command.getConsumerId());
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2233,for (Iterator<ActiveMQSession> i = this.sessions.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2234,ActiveMQSession s = i.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2235,s.setPrefetchSize(command.getConsumerId(), command.getPrefetch());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,189,throw new InvalidDestinationException(
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,194,throw new InvalidDestinationException(
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,401,throw new JMSException(
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,57,timer.purge();//remove cancelled TimerTasks
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,75,return new HttpClientTransport(textWireFormat, location);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportFactory.java,59,return new HttpsClientTransport(asTextWireFormat(wf), location);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,557,if (!started.get()) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,44,protected Connection connection;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,45,protected boolean stopping;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,136,try {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,137,if (connection != null && !connection.isClosed()) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,139,connection.rollback();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,141,LOG.warn("Exception while rollbacking the connection on shutdown", sqle);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,143,try {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,144,connection.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,146,LOG.debug("Exception while closing connection on shutdown", ignored);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,151,LOG.warn("Exception while checking close status of connection on shutdown", sqle);
activemq-core/src/main/java/org/apache/activemq/blob/BlobDownloader.java,30,private BlobTransferPolicy blobTransferPolicy;
activemq-core/src/main/java/org/apache/activemq/blob/BlobDownloader.java,33,this.blobTransferPolicy = transferPolicy;
activemq-core/src/main/java/org/apache/activemq/blob/BlobUploader.java,35,private BlobTransferPolicy blobTransferPolicy;
activemq-core/src/main/java/org/apache/activemq/blob/BlobUploader.java,40,this.blobTransferPolicy = blobTransferPolicy;
activemq-core/src/main/java/org/apache/activemq/blob/BlobUploader.java,45,this.blobTransferPolicy = blobTransferPolicy;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,35,import java.util.concurrent.CopyOnWriteArrayList;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,67,private final List<ObjectName> registeredMBeanNames = new CopyOnWriteArrayList<ObjectName>();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,117,for (Iterator<ObjectName> iter = registeredMBeanNames.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,118,ObjectName name = iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,300,this.registeredMBeanNames.add(name);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,319,if (beanServer != null && beanServer.isRegistered(name) && this.registeredMBeanNames.remove(name)) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,320,beanServer.unregisterMBean(name);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageProducer.java,205,if (destination == info.getDestination()) {
activemq-core/src/main/java/org/apache/activemq/xbean/BrokerFactoryBean.java,23,import org.slf4j.Logger;
activemq-core/src/main/java/org/apache/activemq/xbean/BrokerFactoryBean.java,24,import org.slf4j.LoggerFactory;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,20,import java.io.File;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,23,import java.util.Map;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,29,import org.slf4j.Logger;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,30,import org.slf4j.LoggerFactory;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,37,import org.springframework.core.io.ClassPathResource;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,38,import org.springframework.core.io.FileSystemResource;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,40,import org.springframework.core.io.UrlResource;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,41,import org.springframework.util.ResourceUtils;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,84,import org.apache.activemq.thread.DefaultThreadPools;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,162,this.messageAuthorizationPolicy = connector.getMessageAuthorizationPolicy();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,963,LOG.warn("cannot create async transport stopper thread.. not waiting for stop to complete, reason:", t);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,974,protected void doStop() throws Exception, InterruptedException {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,975,LOG.debug("Stopping connection: " + transport.getRemoteAddress());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,987,LOG.trace("Exception caught stopping", ignore);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,993,LOG.debug("Could not stop transport: " + e, e);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1024,LOG.debug("Cleaning up connection resources: " + getRemoteAddress());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1031,LOG.debug("Connection Stopped: " + getRemoteAddress());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,34,import org.apache.activemq.thread.DefaultThreadPools;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,216,DefaultThreadPools.getDefaultTaskRunnerFactory().execute(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,304,: taskRunnerFactory);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,52,super(connector, transport, broker, factory);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnector.java,52,return new ManagedTransportConnection(this, transport, getBroker(), isDisableAsyncDispatch() ? null : getTaskRunnerFactory(), managementContext, connectorName);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,48,import org.apache.activemq.thread.DefaultThreadPools;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,129,reconnectTask = DefaultThreadPools.getDefaultTaskRunnerFactory().createTaskRunner(new Task() {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,320,synchronized (reconnectMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,322,if (!started) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,323,return;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,325,started = false;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,326,disposed = true;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,327,connected = false;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,333,if (connectedTransport.get() != null) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,334,transportToStop = connectedTransport.getAndSet(null);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,336,reconnectMutex.notifyAll();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,338,synchronized (sleepMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,339,sleepMutex.notifyAll();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,341,reconnectTask.shutdown();
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,33,import org.apache.activemq.thread.DefaultThreadPools;
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,160,reconnectTask = DefaultThreadPools.getDefaultTaskRunnerFactory().createTaskRunner(new Task() {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,294,synchronized (reconnectMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,295,ServiceStopper ss = new ServiceStopper();
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,297,if (!started) {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,298,return;
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,300,started = false;
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,301,disposed = true;
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,302,connected=false;
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,304,for (Iterator<FanoutTransportHandler> iter = transports.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,305,FanoutTransportHandler th = iter.next();
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,306,if (th.transport != null) {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,307,ss.stop(th.transport);
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,311,LOG.debug("Stopped: " + this);
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,312,ss.throwFirstException();
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,314,reconnectTask.shutdown();
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,40,import org.apache.activemq.thread.DefaultThreadPools;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,519,DefaultThreadPools.getDefaultTaskRunnerFactory().execute(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,537,LOG.debug("Caught exception closing socket",e);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,26,import org.apache.activemq.thread.DefaultThreadPools;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,65,import org.apache.activemq.thread.DefaultThreadPools;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,87,private final TaskRunnerFactory asyncTaskRunner = DefaultThreadPools.getDefaultTaskRunnerFactory();
activemq-core/src/main/java/org/apache/activemq/thread/DefaultThreadPools.java,19,import java.util.concurrent.Executor;
activemq-core/src/main/java/org/apache/activemq/thread/DefaultThreadPools.java,20,import java.util.concurrent.ScheduledThreadPoolExecutor;
activemq-core/src/main/java/org/apache/activemq/thread/DefaultThreadPools.java,21,import java.util.concurrent.ThreadFactory;
activemq-core/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,46,this("ActiveMQ Task", Thread.NORM_PRIORITY, true, 1000);
activemq-core/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,87,execute(runnable, "ActiveMQ Task");
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,29,import org.apache.activemq.thread.DefaultThreadPools;
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,116,DefaultThreadPools.getDefaultTaskRunnerFactory().execute(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1145,addAckLocationForRetroactiveSub(tx, sd, ackLocation, subscriptionKey);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1648,private void addAckLocationForRetroactiveSub(Transaction tx, StoredDestination sd, Long messageSequence, String subscriptionKey) throws IOException {
kahadb/src/main/java/org/apache/kahadb/util/Sequence.java,55,return first == last ? "" + first : first + "-" + last;
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,59,PropertyEditorManager.registerEditor(String[].class, StringArrayEditor.class);
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,94,Object value = method.invoke(target, new Object[] {});
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,201,setter.invoke(target, new Object[] {value});
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,204,setter.invoke(target, new Object[] {convert(value, setter.getParameterTypes()[0])});
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,17,package org.apache.activemq.util;
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,19,import java.beans.PropertyEditorSupport;
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,20,import java.util.ArrayList;
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,21,import java.util.List;
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,22,import java.util.StringTokenizer;
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,25,public class StringArrayEditor extends PropertyEditorSupport {
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,27,public void setAsText(String text) {
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,28,if (text == null || text.length() == 0) {
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,29,setValue(null);
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,31,StringTokenizer stok = new StringTokenizer(text, ",");
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,32,final List<String> list = new ArrayList<String>();
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,34,while (stok.hasMoreTokens()) {
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,35,list.add(stok.nextToken());
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,38,Object array = list.toArray(new String[list.size()]);
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,40,setValue(array);
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,44,public String getAsText() {
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,45,Object[] objects = (Object[]) getValue();
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,46,if (objects == null || objects.length == 0) {
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,47,return null;
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,50,StringBuffer result = new StringBuffer(String.valueOf(objects[0]));
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,51,for (int i = 1; i < objects.length; i++) {
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,52,result.append(",").append(objects[i]);
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,55,return result.toString();
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,21,import java.lang.reflect.Array;
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,30,import java.util.Set;
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,48,String[] existingSearchPath = PropertyEditorManager.getEditorSearchPath();
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,49,String[] newSearchPath = (String[]) Array.newInstance(String.class,
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,50,existingSearchPath.length + additionalPath.length);
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,51,System.arraycopy(existingSearchPath, 0,
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,52,newSearchPath, 0,
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,53,existingSearchPath.length);
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,54,System.arraycopy(additionalPath, 0,
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,55,newSearchPath, existingSearchPath.length,
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,56,additionalPath.length);
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,58,PropertyEditorManager.setEditorSearchPath(newSearchPath);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,899,systemUsage.getMemoryUsage().setLimit(1024 * 1024 * 64); // Default
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,795,checkClosed();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,37,protected boolean batchResetNeeded = true;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,56,clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,57,super.start();
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,52,public class PooledConnection implements TopicConnection, QueueConnection, EnhancedConnection {
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,55,private boolean stopped;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,292,+ ",storeHasMessages=" + this.storeHasMessages + ",size=" + this.size + ",cacheEnabled=" + isCacheEnabled();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,152,enqueueCounter++;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,59,public static final int MAX_ROWS = 10000;
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,777,void readPage(long pageId, byte[] data) throws IOException {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1655,LOG.warn("Async task tunner failed to wakeup ", e);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,452,waitStarted();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1213,protected void waitStarted() throws InterruptedException {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1214,startedLatch.await();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1218,protected void clearDownSubscriptions() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1219,subscriptionMapByLocalId.clear();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1220,subscriptionMapByRemoteId.clear();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,25,import java.security.KeyStore;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,42,import org.apache.commons.logging.Log;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,43,import org.apache.commons.logging.LogFactory;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,63,private static final Log LOG = LogFactory.getLog(ActiveMQSslConnectionFactory.class);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,139,return trustStoreManagers;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,143,KeyManagerFactory kmf =
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,144,KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,157,return keystoreManagers;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,178,InputStream ins = null;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,179,try {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,180,URL url = new URL(urlOrResource);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,181,ins = url.openStream();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,183,catch (MalformedURLException ignore) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,184,ins = null;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,188,if (ins == null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,189,ins = getClass().getClassLoader().getResourceAsStream(urlOrResource);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,192,if (ins == null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,196,return ins;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,72,private Timer clientCleanupTimer = new Timer();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,928,return storeSize.get();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,199,protected AtomicLong storeSize = new AtomicLong(0);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,968,if ((0.5 * info.getPrefetchSize()) <= (deliveredCounter - additionalWindowSize)) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,331,backups.clear();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,342,if (transportToStop != null) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,343,transportToStop.stop();
kahadb/src/main/java/org/apache/kahadb/index/BTreeNode.java,285,throw new IOException("BTree corrupted: Cylce detected.");
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,209,if (uri.getQuery() != null) {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,210,return false;
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,212,String ssp = stripPrefix(uri.getRawSchemeSpecificPart().trim(), "(").trim();
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,213,ssp = stripPrefix(ssp, "//").trim();
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,214,try {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,215,new URI(ssp);
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,217,return false;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,328,for (BackupTransport t : backups) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,329,t.setDisposed(true);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,968,sessionTaskRunner = new TaskRunnerFactory("ActiveMQ Session Task", ThreadPriorities.INBOUND_CLIENT_SESSION, false, 1000, isUseDedicatedTaskRunner());
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,39,QueueMessageReference ref = ((Queue)destination).getMessage(messageId);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,40,Message rc = ref.getMessage();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,41,if (rc == null) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,42,return null;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,44,return OpenTypeSupport.convert(rc);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,987,pageInMessages(false);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,189,headers.put(name, value);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,22,import java.io.FileInputStream;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,37,import org.apache.activemq.broker.BrokerService;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,40,import org.apache.activemq.transport.tcp.SslTransportFactory;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,108,if (!brokerURL.getScheme().equals("ssl")) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,109,return super.createTransport();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,113,if (keyManager == null || trustManager == null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,114,trustManager = createTrustManager();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,118,SslTransportFactory sslFactory = new SslTransportFactory();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,119,SslContext ctx = new SslContext(keyManager, trustManager, secureRandom);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,120,SslContext.setCurrentSslContext(ctx);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,121,return sslFactory.doConnect(brokerURL);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,131,InputStream tsStream = getUrlOrResourceAsStream(trustStore);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,133,trustedCertStore.load(tsStream, trustStorePassword.toCharArray());
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,134,TrustManagerFactory tmf  =
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,135,TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,137,tmf.init(trustedCertStore);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,138,trustStoreManagers = tmf.getTrustManagers();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,148,byte[] sslCert = loadClientCredential(keyStore);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,151,if (sslCert != null && sslCert.length > 0) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,152,ByteArrayInputStream bin = new ByteArrayInputStream(sslCert);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,153,ks.load(bin, keyStorePassword.toCharArray());
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,154,kmf.init(ks, keyStorePassword.toCharArray());
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,155,keystoreManagers = kmf.getKeyManagers();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,209,public void setTrustStore(String trustStore) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,237,public void setKeyStore(String keyStore) {
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,334,public void fastProducer(ConnectionContext context,ProducerInfo producerInfo) {
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,335,super.fastProducer(context, producerInfo);
activemq-core/src/main/java/org/apache/activemq/broker/Broker.java,365,void fastProducer(ConnectionContext context,ProducerInfo producerInfo);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerFilter.java,274,public void fastProducer(ConnectionContext context,ProducerInfo producerInfo) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerFilter.java,275,next.fastProducer(context, producerInfo);
activemq-core/src/main/java/org/apache/activemq/broker/EmptyBroker.java,266,public void fastProducer(ConnectionContext context,ProducerInfo producerInfo) {
activemq-core/src/main/java/org/apache/activemq/broker/ErrorBroker.java,276,public void fastProducer(ConnectionContext context,ProducerInfo producerInfo) {
activemq-core/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java,285,public void fastProducer(ConnectionContext context,ProducerInfo producerInfo) {
activemq-core/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java,286,getNext().fastProducer(context, producerInfo);
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,73,private boolean advisdoryForFastProducers;
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,382,public boolean isAdvisdoryForFastProducers() {
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,383,return advisdoryForFastProducers;
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,389,public void setAdvisdoryForFastProducers(boolean advisdoryForFastProducers) {
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,390,this.advisdoryForFastProducers = advisdoryForFastProducers;
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,484,if (advisdoryForFastProducers) {
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,485,broker.fastProducer(context, producerInfo);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,75,private boolean advisdoryForFastProducers;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,152,destination.setAdvisdoryForFastProducers(isAdvisdoryForFastProducers());
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,635,public boolean isAdvisdoryForFastProducers() {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,636,return advisdoryForFastProducers;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,642,public void setAdvisdoryForFastProducers(boolean advisdoryForFastProducers) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,643,this.advisdoryForFastProducers = advisdoryForFastProducers;
activemq-core/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,502,public void fastProducer(ConnectionContext context, ProducerInfo producerInfo) {
activemq-core/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,506,super.fastProducer(context, producerInfo);
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQInitialContextFactory.java,51,private static final String[] DEFAULT_CONNECTION_FACTORY_NAMES = {"ConnectionFactory", "QueueConnectionFactory", "TopicConnectionFactory"};
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,196,((TopicRegion)topicRegion).setKeepDurableSubsActive(keepDurableSubsActive);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,201,consumers.add(subscription);
activemq-core/src/main/java/org/apache/activemq/network/jms/DestinationBridge.java,114,if (attempt > 0) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,153,throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,161,oldMessages = messageEvictionStrategy.evictMessages(list);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,162,for (MessageReference ref : list) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,163,ref.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,168,messagesToEvict = oldMessages.length;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,169,for (int i = 0; i < messagesToEvict; i++) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,170,MessageReference oldMessage = oldMessages[i];
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,171,discard(oldMessage);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,280,destination.getDestinationStatistics().getInflight().subtract(ack.getMessageCount());
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,389,if (enableAudit && audit==null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,397,return getDispatchedQueueSize()  >= info.getPrefetchSize();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,468,private void dispatchMatched() throws IOException {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,404,ConsumerId id = new ConsumerId(sessionId, consumerIdGenerator.getNextSequenceId());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,967,public void dumpTables(Connection c) throws SQLException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,968,printQuery(c, "Select * from ACTIVEMQ_MSGS", System.out);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,983,ResultSetMetaData metaData = set.getMetaData();
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,31,import org.apache.activemq.command.*;
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,324,ActiveMQTopic topic = AdvisorySupport.getSlowConsumerAdvisoryTopic(destination.getActiveMQDestination());
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,325,ActiveMQMessage advisoryMessage = new ActiveMQMessage();
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,326,advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_CONSUMER_ID, subs.getConsumerInfo().getConsumerId().toString());
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,327,fireAdvisory(context, topic, subs.getConsumerInfo(), null, advisoryMessage);
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,337,ActiveMQTopic topic = AdvisorySupport.getFastProducerAdvisoryTopic(producerInfo.getDestination());
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,338,ActiveMQMessage advisoryMessage = new ActiveMQMessage();
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,339,advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_PRODUCER_ID, producerInfo.getProducerId().toString());
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,340,fireAdvisory(context, topic, producerInfo, null, advisoryMessage);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,145,boolean inProgressClearRequiredFlag;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,668,inProgressClearRequiredFlag = true;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,674,if (inProgressClearRequiredFlag) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,676,if (inProgressClearRequiredFlag) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,689,inProgressClearRequiredFlag = false;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DatabaseLocker.java,41,boolean keepAlive();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,155,public boolean keepAlive() {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,610,LOG.error("Failed to get database when trying keepalive: " + e, e);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,619,LOG.info("No longer able to keep the exclusive lock so giving up being a master");
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,98,+ "( ID " + longDataType + " NOT NULL, TIME " + longDataType
activemq-core/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,35,private BrokerService broker;
activemq-core/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,95,while (isPersistenceAdapterDown()) {
activemq-core/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,101,LOG.warn("Failure occurred while restarting broker connectors", e);
activemq-core/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,120,LOG.info("Stopping the broker due to IO exception, " + exception, exception);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,649,for (Iterator<ActiveMQTempDestination> i = this.activeTempDestinations.values().iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,650,ActiveMQTempDestination c = i.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,651,c.delete();
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,238,int intialParen = ssp.indexOf("(");
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,239,if (intialParen == 0) {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,240,rc.host = ssp.substring(0, intialParen);
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,246,p = ssp.lastIndexOf(")");
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,247,componentString = ssp.substring(intialParen + 1, p);
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,390,public int indexOfParenthesisMatch(String str) {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,391,int result = -1;
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,393,return result;
activemq-core/src/main/java/org/apache/activemq/command/XATransactionId.java,21,import org.apache.activemq.util.HexSupport;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,38,void doAddMessage(TransactionContext c, long sequence, MessageId messageID, ActiveMQDestination destination, byte[] data, long expiration, byte priority) throws SQLException, IOException;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,48,void doRemoveMessage(TransactionContext c, long seq) throws SQLException, IOException;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,52,void doSetLastAck(TransactionContext c, ActiveMQDestination destination, String clientId, String subscriptionName, long seq, long prio) throws SQLException, IOException;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,95,void doSetLastAckWithPriority(TransactionContext c, ActiveMQDestination destination, String clientId, String subscriptionName, long re, long re1) throws SQLException, IOException;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,170,long seq = getStoreSequenceIdForMessageId(ack.getLastMessageId())[0];
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,175,adapter.doRemoveMessage(c, seq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,298,long[] storedValues = getStoreSequenceIdForMessageId(messageId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,311,private long[] getStoreSequenceIdForMessageId(MessageId messageId) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,312,long[] result = new long[]{-1, Byte.MAX_VALUE -1};
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,313,TransactionContext c = persistenceAdapter.getTransactionContext();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,314,try {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,315,result = adapter.getStoreSequenceId(c, destination, messageId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,317,JDBCPersistenceAdapter.log("JDBC Failure: ", e);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,318,throw IOExceptionSupport.create("Failed to get store sequenceId for messageId: " + messageId +", on: " + destination + ". Reason: " + e, e);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,320,c.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,322,return result;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,222,transactionStore = new MemoryTransactionStore(this);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,64,adapter.doSetLastAckWithPriority(c, destination, clientId, subscriptionName, res[0], res[1]);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,66,adapter.doSetLastAck(c, destination, clientId, subscriptionName, res[0], res[1]);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,229,LOG.trace(key + " existing last recovered: " + lastRecovered);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,266,subscriberLastRecoveredMap.remove(getSubscriptionKey(clientId, subscriptionName));
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,135,+ "(ID, MSGID_PROD, MSGID_SEQ, CONTAINER, EXPIRATION, PRIORITY, MSG) VALUES (?, ?, ?, ?, ?, ?, ?)";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,434,+ " WHERE CONTAINER=?";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,445,+ " WHERE CONTAINER=? AND ID > ? ORDER BY ID";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,498,+ " SET LAST_ACKED_ID = ? WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,21,import java.io.OutputStream;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,28,import javax.jms.JMSException;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,55,ResultSet rs = null;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,204,long expiration, byte priority) throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,326,public void doRemoveMessage(TransactionContext c, long seq) throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,331,s = c.getConnection().prepareStatement(this.statements.getRemoveMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,336,s.setLong(1, seq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,406,public void doSetLastAckWithPriority(TransactionContext c, ActiveMQDestination destination, String clientId,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,407,String subscriptionName, long seq, long prio) throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,412,s = c.getConnection().prepareStatement(this.statements.getUpdateLastPriorityAckRowOfDurableSubStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,417,s.setLong(1, seq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,421,s.setLong(5, prio);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,425,throw new SQLException("Failed update last ack with priority: " + prio + ", for sub: " + subscriptionName);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,436,public void doSetLastAck(TransactionContext c, ActiveMQDestination destination, String clientId,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,437,String subscriptionName, long seq, long priority) throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,442,s = c.getConnection().prepareStatement(this.statements.getUpdateDurableLastAckStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,447,s.setLong(1, seq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,864,public byte[] doGetNextDurableSubscriberMessageStatement(TransactionContext c, ActiveMQDestination destination,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,865,String clientId, String subscriberName) throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,870,s = c.getConnection().prepareStatement(this.statements.getNextDurableSubscriberMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,871,s.setString(1, destination.getQualifiedName());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,872,s.setString(2, clientId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,873,s.setString(3, subscriberName);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,875,if (!rs.next()) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,876,return null;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,878,return getBinaryData(rs, 1);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1011,throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1012,PreparedStatement s = null;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1013,ResultSet rs = null;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1014,cleanupExclusiveLock.readLock().lock();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1015,try {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1016,s = c.getConnection().prepareStatement(this.statements.getLastProducerSequenceIdStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1017,s.setString(1, id.toString());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1018,rs = s.executeQuery();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1019,long seq = -1;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1020,if (rs.next()) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1021,seq = rs.getLong(1);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1023,return seq;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1025,cleanupExclusiveLock.readLock().unlock();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1026,close(rs);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1027,close(s);
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,48,ConcurrentHashMap<Object, Tx> inflightTransactions = new ConcurrentHashMap<Object, Tx>();
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,49,ConcurrentHashMap<TransactionId, Tx> preparedTransactions = new ConcurrentHashMap<TransactionId, Tx>();
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,50,final PersistenceAdapter persistenceAdapter;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,55,private final ArrayList<AddMessageCommand> messages = new ArrayList<AddMessageCommand>();
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,57,private final ArrayList<RemoveMessageCommand> acks = new ArrayList<RemoveMessageCommand>();
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,156,return new ProxyTopicMessageStore(messageStore) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,190,public void prepare(TransactionId txid) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,236,public void rollback(TransactionId txid) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,314,final void acknowledge(final TopicMessageStore destination, final String clientId, final String subscriptionName,
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,218,if (tx == null) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,219,if (postCommit != null) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,220,postCommit.run();
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,222,return;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,19,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,20,import java.util.ArrayList;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,21,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,22,import java.util.concurrent.ConcurrentHashMap;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,23,import java.util.concurrent.Future;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,225,synchronized (this) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,226,tx.commit();
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,227,if (postCommit != null) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,228,postCommit.run();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,163,throw new ProtocolException("Illegal destination name: [" + name + "] -- ActiveMQ STOMP destinations "
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,39,import org.slf4j.Logger;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,40,import org.slf4j.LoggerFactory;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,79,requestTimeout = asLong(name);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,123,String point = "activemq:"
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,125,+ "?requestTimeout=" + requestTimeout;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,127,String body = (String)client.getProducerTemplate().requestBody(point, text);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,130,writeMessageResponse(response.getWriter(), answer);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,132,IOException ex = new IOException();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,133,ex.initCause(e);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,134,throw ex;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,140,long timeToLive = getSendTimeToLive(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,185,message = (Message)request.getAttribute("message");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,269,if (txt.startsWith("<?")) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,270,txt = txt.substring(txt.indexOf("?>") + 2);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,272,writer.print(txt);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,276,writer.print(object.toString());
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,286,String clientId = request.getParameter("clientId");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,287,if (clientId != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,288,synchronized(this) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,289,LOG.debug("Getting local client [" + clientId + "]");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,290,WebClient client = clients.get(clientId);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,291,if (client == null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,292,LOG.debug("Creating new client [" + clientId + "]");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,293,client = new WebClient();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,294,clients.put(clientId, client);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,296,return client;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,300,return WebClient.getWebClient(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,368,continuation.resume();
activemq-pool/src/main/java/org/apache/activemq/pool/XaConnectionPool.java,27,import org.apache.activemq.ActiveMQConnection;
activemq-pool/src/main/java/org/apache/activemq/pool/XaConnectionPool.java,28,import org.apache.commons.pool.ObjectPoolFactory;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,414,if (txt.startsWith("<?")) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,415,txt = txt.substring(txt.indexOf("?>") + 2);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,417,writer.print(txt);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,421,writer.print(object.toString());
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,281,if (getJmxServiceUrl() != null) {
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,282,context.printException(new IllegalArgumentException("JMX URL already specified."));
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,283,tokens.clear();
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,285,try {
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,286,this.setJmxServiceUrl(new JMXServiceURL(jmxUrl));
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,288,context.printException(e);
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,289,tokens.clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,115,super.addSubscription(context, sub);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,130,sub.add(context, this);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,131,consumers.add(sub);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,133,subscriptionRecoveryPolicy.recover(context, this, sub);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,141,sub.add(context, this);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,142,consumers.add(sub);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportFactory.java,23,import java.util.Map;
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportFactory.java,29,import org.apache.activemq.util.IntrospectionSupport;
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportFactory.java,48,HttpsTransportServer result = new HttpsTransportServer(location, this);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,45,if (keyPassword == null) {
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,48,if (keyStoreType != null) {
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,51,if (secureRandomCertficateAlgorithm != null) {
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,54,if (keyCertificateAlgorithm != null) {
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,57,if (trustCertificateAlgorithm != null) {
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,60,if (protocol != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,305,dispatched.remove(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,161,synchronized (pending) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,167,topic.deactivate(context, this);
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,171,for (final MessageReference node : dispatched) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,173,Integer count = redeliveredMessages.get(node.getMessageId());
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,174,if (count != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,175,redeliveredMessages.put(node.getMessageId(), Integer.valueOf(count.intValue() + 1));
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,177,redeliveredMessages.put(node.getMessageId(), Integer.valueOf(1));
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,180,synchronized (pending) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,181,pending.addMessageFirst(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,184,node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,187,synchronized(dispatched) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,188,dispatched.clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,190,if (!keepDurableSubsActive && pending.isTransient()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,191,synchronized (pending) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,272,synchronized (pending) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,286,synchronized(dispatched) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,23,import java.util.concurrent.CopyOnWriteArrayList;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,59,protected final List<MessageReference> dispatched = new CopyOnWriteArrayList<MessageReference>();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,69,private final Object dispatchLock = new Object();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,178,recoverMessage(node.getMessage(),true);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,179,lastCachedId = node.getMessageId();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,214,thread.setDaemon(true);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1052,getRegionSubscriptions(consumerInfo.getDestination().isTopic());
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1112,private final Collection<Subscription> getRegionSubscriptions(boolean isTopic) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1113,RegionBroker region = (RegionBroker) brokerService.getRegionBroker();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1115,(isTopic ? region.getTopicRegion() : region.getQueueRegion());
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1116,return abstractRegion.getSubscriptions().values();
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,146,sub.add(context, this);
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,48,if (matchesSomeConsumer(message, dest)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,54,private boolean matchesSomeConsumer(Message message, Destination dest) throws IOException {
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,60,for (Subscription sub: subs) {
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopicInterceptor.java,52,return new ActiveMQQueue(prefix + original.getPhysicalName() + postfix);
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,54,if( lockCounter>0 ) {
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,59,if (System.getProperty(getVmLockKey()) != null) {
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,60,throw new IOException("File '" + file + "' could not be locked as lock is already held for this jvm.");
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,62,if (lock == null) {
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,63,readFile = new RandomAccessFile(file, "rw");
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,64,IOException reason = null;
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,65,try {
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,68,reason = IOExceptionSupport.create("File '" + file + "' could not be locked.",e);
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,70,reason = ioe;
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,72,if (lock != null) {
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,73,lockCounter++;
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,74,System.setProperty(getVmLockKey(), new Date().toString());
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,77,closeReadFile();
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,78,if (reason != null) {
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,79,throw reason;
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,81,throw new IOException("File '" + file + "' could not be locked.");
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,95,if( lockCounter!=0 ) {
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,110,if( deleteOnUnlock ) {
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,38,public class JmDNS
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,59,protected boolean closed = false;
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,181,public JmDNS() throws IOException
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,184,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,199,public JmDNS(InetAddress addr) throws IOException
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,201,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,217,private void init(InetAddress address, String name) throws IOException
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,257,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,268,private void openMulticastSocket(HostInfo hostInfo) throws IOException
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,293,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,374,public InetAddress getInterface() throws IOException
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,412,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,462,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,500,public void addServiceTypeListener(ServiceTypeListener listener) throws IOException
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,597,public void registerService(ServiceInfo info) throws IOException
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,612,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,648,new Canceler(info, lock).start();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,651,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,655,lock.wait();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,687,Object lock = new Object();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,688,new Canceler(list, lock).start();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,691,synchronized (lock) {
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,692,if (!closed) {
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,693,lock.wait();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,741,do
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,763,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,781,do
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,817,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,825,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,923,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,940,private void handleResponse(DNSIncoming msg) throws IOException
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,962,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,968,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,997,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1019,private void handleQuery(DNSIncoming in, InetAddress addr, int port) throws IOException
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1032,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1042,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1062,DNSOutgoing addAnswer(DNSIncoming in, InetAddress addr, int port, DNSOutgoing out, DNSRecord rec) throws IOException
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1068,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1089,private void send(DNSOutgoing out) throws IOException
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1096,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1112,class SocketListener implements Runnable
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1116,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1128,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1148,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1175,private class RecordReaper extends TimerTask
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1234,private class Prober extends TimerTask
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1270,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1280,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1315,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1370,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1403,private class Announcer extends TimerTask
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1463,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1517,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1543,private class Renewer extends TimerTask
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1603,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1657,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1683,private class Responder extends TimerTask
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1717,|| q.type == DNSConstants.TYPE_TXT
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1718,|| q.type == DNSConstants.TYPE_A
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1719,|| q.type == DNSConstants.TYPE_AAAA
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1721,|| services.containsKey(q.name.toLowerCase()));
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1754,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1794,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1805,case DNSConstants.TYPE_A:
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1809,DNSRecord answer = localHost.getDNS4AddressRecord();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1812,answers.add(answer);
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1814,break;
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1816,case DNSConstants.TYPE_AAAA:
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1819,DNSRecord answer = localHost.getDNS6AddressRecord();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1822,answers.add(answer);
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1824,break;
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1826,case DNSConstants.TYPE_PTR:
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1833,ServiceInfo info = (ServiceInfo) serviceIterator.next();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1838,DNSRecord answer = localHost.getDNS4AddressRecord();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1841,answers.add(answer);
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1843,answer = localHost.getDNS6AddressRecord();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1846,answers.add(answer);
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1848,answers.add(new DNSRecord.Pointer(info.type, DNSConstants.TYPE_PTR, DNSConstants.CLASS_IN, DNSConstants.DNS_TTL, info.getQualifiedName()));
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1849,answers.add(new DNSRecord.Service(info.getQualifiedName(), DNSConstants.TYPE_SRV, DNSConstants.CLASS_IN | DNSConstants.CLASS_UNIQUE, DNSConstants.DNS_TTL, info.priority, info.weight, info.port, localHost.getName()));
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1850,answers.add(new DNSRecord.Text(info.getQualifiedName(), DNSConstants.TYPE_TXT, DNSConstants.CLASS_IN | DNSConstants.CLASS_UNIQUE, DNSConstants.DNS_TTL, info.text));
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1858,answers.add(new DNSRecord.Pointer("_services._mdns._udp.local.", DNSConstants.TYPE_PTR, DNSConstants.CLASS_IN, DNSConstants.DNS_TTL, (String) serviceTypeIterator.next()));
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1861,break;
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1865,case DNSConstants.TYPE_TXT:
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1867,ServiceInfo info = (ServiceInfo) services.get(q.name.toLowerCase());
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1870,DNSRecord answer = localHost.getDNS4AddressRecord();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1873,answers.add(answer);
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1875,answer = localHost.getDNS6AddressRecord();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1878,answers.add(answer);
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1880,answers.add(new DNSRecord.Pointer(info.type, DNSConstants.TYPE_PTR, DNSConstants.CLASS_IN, DNSConstants.DNS_TTL, info.getQualifiedName()));
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1881,answers.add(new DNSRecord.Service(info.getQualifiedName(), DNSConstants.TYPE_SRV, DNSConstants.CLASS_IN | DNSConstants.CLASS_UNIQUE, DNSConstants.DNS_TTL, info.priority, info.weight, info.port, localHost.getName()));
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1882,answers.add(new DNSRecord.Text(info.getQualifiedName(), DNSConstants.TYPE_TXT, DNSConstants.CLASS_IN | DNSConstants.CLASS_UNIQUE, DNSConstants.DNS_TTL, info.text));
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1884,break;
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1886,default :
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1889,break;
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1948,private class TypeResolver extends TimerTask
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1962,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1977,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1984,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2008,private class ServiceResolver extends TimerTask
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2028,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2041,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2052,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2059,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2083,private class ServiceInfoResolver extends TimerTask
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2105,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2127,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2135,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2155,private class Canceler extends TimerTask
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2207,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2234,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2239,closed=true;
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2257,private class Shutdown implements Runnable
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2298,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2433,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2444,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2482,private static class ServiceCollector implements ServiceListener
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2564,else
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,69,String key = (String)entry.getKey();
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,70,String value = (String)entry.getValue();
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,72,if (key.startsWith("java.naming.queue")) {
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,73,String key1 = key.substring("java.naming.queue.".length());
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,74,key1 = key1.replace('.', '/');
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,75,environment1.put("queue." + key1, value);
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,77,String key1 = key.substring("java.naming.topic.".length());
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,78,key1 = key1.replace('.', '/');
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,79,environment1.put("topic." + key1, value);
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,81,String key1 = key.substring("java.naming.".length());
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,82,environment1.put(key1, value);
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,84,String key1 = key.substring("java.naming.".length());
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,85,environment1.put(key1, value);
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,90,value = value.replace(';', ',');
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,91,environment1.put(Context.PROVIDER_URL, value);
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,93,environment1.put(key, value);
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,85,public ConnectionConsumer createConnectionConsumer(Destination destination, String selector,
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,87,throws JMSException {
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,89,.createConnectionConsumer(destination, selector, serverSessionPool, maxMessages);
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,92,public ConnectionConsumer createConnectionConsumer(Topic topic, String s,
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,94,throws JMSException {
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,98,public ConnectionConsumer createDurableConnectionConsumer(Topic topic, String selector, String s1,
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,100,throws JMSException {
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,124,public ConnectionConsumer createConnectionConsumer(Queue queue, String selector,
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,126,throws JMSException {
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,133,return (QueueSession)createSession(transacted, ackMode);
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,137,return (TopicSession)createSession(transacted, ackMode);
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,141,return pool.createSession(transacted, ackMode);
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,166,return (ActiveMQSession)getConnection().createSession(key.isTransacted(), key.getAckMode());
activemq-pool/src/main/java/org/apache/activemq/pool/PooledSession.java,46,import javax.jms.Session;
activemq-pool/src/main/java/org/apache/activemq/pool/PooledSession.java,165,return getInternalSession().createTemporaryQueue();
activemq-pool/src/main/java/org/apache/activemq/pool/PooledSession.java,169,return getInternalSession().createTemporaryTopic();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,269,if (messages.isRecoveryRequired()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,158,LOG.debug("Deactivating " + this);
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,179,if (keepDurableSubsActive&& pending.isTransient()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,67,audit=null;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,98,super.getMessageAudit().clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,101,tsp.getMessageAudit().clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,135,return "TopicStorePrefetch(" + clientId + "," + subscriberName + ")" + super.toString();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,67,PreparedStatement statement = null;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,72,statement = connection.prepareStatement(sql);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,73,statement.execute();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,113,if (null != statement) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,115,statement.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,119,statement = null;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,156,PreparedStatement statement = null;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,159,statement = connection.prepareStatement(statements.getLockUpdateStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,160,statement.setLong(1, System.currentTimeMillis());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,161,int rows = statement.executeUpdate();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,168,if (statement != null) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,170,statement.close();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,81,nonPersistent.stop();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,82,nonPersistent.gc();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,394,indexLock.readLock().lock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,407,indexLock.readLock().unlock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,419,indexLock.readLock().lock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,437,indexLock.readLock().unlock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,446,indexLock.readLock().lock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,457,indexLock.readLock().unlock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,483,indexLock.readLock().lock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,504,indexLock.readLock().unlock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,676,indexLock.readLock().lock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,692,indexLock.readLock().unlock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,702,indexLock.readLock().lock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,716,indexLock.readLock().unlock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,879,indexLock.readLock().lock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,906,indexLock.readLock().unlock();
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerStore.java,19,import java.io.DataInput;
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerStore.java,20,import java.io.DataOutput;
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerStore.java,21,import java.io.File;
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerStore.java,22,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerStore.java,23,import java.util.ArrayList;
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerStore.java,24,import java.util.HashMap;
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerStore.java,25,import java.util.HashSet;
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerStore.java,26,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerStore.java,27,import java.util.List;
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerStore.java,28,import java.util.Map;
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerStore.java,29,import java.util.Set;
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerStore.java,30,import java.util.Map.Entry;
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerStore.java,34,import org.slf4j.Logger;
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerStore.java,35,import org.slf4j.LoggerFactory;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,60,public void doStop() throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,61,if (isStarting()) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,62,setPendingStop(true);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,63,return;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,65,synchronized (this) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,66,unregisterMBean(byClientIdName);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,67,unregisterMBean(byAddressName);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,68,byClientIdName = null;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,69,byAddressName = null;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,71,super.doStop();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,158,pendingCount = persistent.size() + nonPersistent.size();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,23,import java.util.*;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,39,import org.slf4j.Logger;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,40,import org.slf4j.LoggerFactory;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,441,AjaxWebClient client = ajaxWebClients.get( sessionKey );
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,103,if(!isSlowConsumer()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,104,setSlowConsumer(true);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,105,for (Destination dest: destinations) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,106,dest.slowConsumer(getContext(), this);
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,204,prefetchExtension = 0;
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,261,+ getPendingQueueSize() + ", dispatched=" + dispatchCounter + ", inflight=" + dispatched.size() + ", prefetchExtension=" + this.prefetchExtension;
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,287,for (Iterator iter = dispatched.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,288,MessageReference node = (MessageReference) iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,60,protected int prefetchExtension;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,93,final long dispatchCounterBeforePull;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,94,synchronized(this) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,95,prefetchExtension++;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,96,dispatchCounterBeforePull = dispatchCounter;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,100,for (Destination dest : destinations) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,101,dest.iterate();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,103,dispatchPending();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,107,if (dispatchCounterBeforePull == dispatchCounter) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,109,if (pull.getTimeout() == -1) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,111,add(QueueMessageReference.NULL_MESSAGE);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,112,dispatchPending();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,114,if (pull.getTimeout() > 0) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,115,scheduler.executeAfterDelay(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,117,public void run() {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,118,pullTimeout(dispatchCounterBeforePull);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,133,synchronized (pendingLock) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,134,if (dispatchCounterBeforePull == dispatchCounter) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,153,pending.addMessageLast(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,206,assertAckMatchesDispatched(ack);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,255,if (ack.getLastMessageId().equals(messageId)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,258,prefetchExtension = Math.max(0, prefetchExtension - index);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,261,prefetchExtension = Math.max(prefetchExtension, index);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,310,prefetchExtension = Math.max(prefetchExtension, index + 1);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,375,prefetchExtension = Math.max(0, prefetchExtension
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,376,- (index + 1));
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,393,if (callDispatchMatched && destination != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,415,protected void assertAckMatchesDispatched(MessageAck ack) throws JMSException {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,474,return dispatched.size() - prefetchExtension >= info.getPrefetchSize();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,481,return (dispatched.size() - prefetchExtension) <= (info.getPrefetchSize() * .4);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,488,return (dispatched.size() - prefetchExtension) >= (info.getPrefetchSize() * .9);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,493,return info.getPrefetchSize() + prefetchExtension - dispatched.size();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,554,for (MessageReference r : dispatched) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,555,if( r.getRegionDestination() == destination) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,641,prefetchExtension = Math.max(0, prefetchExtension - 1);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,669,node.getRegionDestination().getDestinationStatistics().getInflight().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,707,MessageDispatch md = new MessageDispatch();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,709,md.setConsumerId(info.getConsumerId());
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,711,return md;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,713,MessageDispatch md = new MessageDispatch();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,714,md.setConsumerId(info.getConsumerId());
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,718,return md;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,58,import org.apache.activemq.command.*;
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,121,getConnection().setClientID(clientID);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,97,public synchronized void run() {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,302,DestinationView view = null;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,303,removeAndRemember(topics, key, view);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,304,removeAndRemember(queues, key, view);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,305,removeAndRemember(temporaryQueues, key, view);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,306,removeAndRemember(temporaryTopics, key, view);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,328,private void removeAndRemember(Map<ObjectName, DestinationView> map, ObjectName key, DestinationView view) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,75,import org.apache.activemq.util.*;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,422,brokerService.getBroker().removeBroker(null, remoteBrokerInfo);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,423,brokerService.getBroker().networkBridgeStopped(remoteBrokerInfo);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,424,LOG.info(configuration.getBrokerName() + " bridge to " + remoteBrokerName + " stopped");
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,93,if (peer.async) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,95,peer.wakeup();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,97,transportListener = peer.transportListener;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,112,dispatch(peer, transportListener, command);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,115,public void dispatch(VMTransport transport, TransportListener transportListener, Object command) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,120,transport.receiveCounter++;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,121,transportListener.onCommand(command);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,126,public void start() throws Exception {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,133,Object command;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,136,dispatch(this, transportListener, command);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,214,if (command != null) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,220,return !mq.isEmpty();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,329,protected void wakeup() {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,330,if (async) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,336,try {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,337,taskRunner.wakeup();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,339,Thread.currentThread().interrupt();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,368,throw new IOException("Not supported");
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportServer.java,79,super.stop();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportServer.java,80,if (connectionCount.decrementAndGet() == 0
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportServer.java,81,&& disposeOnDisconnect) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportServer.java,82,VMTransportServer.this.stop();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,29,import org.apache.activemq.thread.TaskRunnerFactory;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,30,import org.apache.activemq.thread.Valve;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,36,import org.apache.activemq.util.IOExceptionSupport;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,50,protected boolean disposed;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,55,protected LinkedBlockingQueue<Object> messageQueue;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,56,protected boolean started;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,59,private TaskRunner taskRunner;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,60,private final Object lazyInitMutext = new Object();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,61,private final Valve enqueueValve = new Valve(true);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,62,protected final AtomicBoolean stopping = new AtomicBoolean();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,75,if (disposed) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,83,TransportListener transportListener=null;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,86,peer.enqueueValve.increment();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,88,if (peer.disposed || peer.stopping.get()) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,92,if (peer.started) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,94,peer.getMessageQueue().put(command);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,100,peer.getMessageQueue().put(command);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,109,peer.enqueueValve.decrement();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,116,if( transportListener!=null ) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,117,if( command == DISCONNECT ) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,118,transportListener.onException(new TransportDisposedIOException("Peer (" + peer.toString() + ") disposed."));
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,127,if (transportListener == null) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,128,throw new IOException("TransportListener not set.");
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,130,try {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,131,enqueueValve.turnOff();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,132,if (messageQueue != null && !async) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,134,while ((command = messageQueue.poll()) != null && !stopping.get() ) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,135,receiveCounter++;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,139,started = true;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,140,wakeup();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,142,enqueueValve.turnOn();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,146,if( stopping.get() ) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,147,stop();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,152,stopping.set(true);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,155,if( enqueueValve.isOn() ) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,164,TaskRunner tr = null;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,165,try {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,166,enqueueValve.turnOff();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,167,if (!disposed) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,168,started = false;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,169,disposed = true;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,170,if (taskRunner != null) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,171,tr = taskRunner;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,172,taskRunner = null;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,176,stopping.set(false);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,177,enqueueValve.turnOn();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,179,if (tr != null) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,180,tr.shutdown(1000);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,193,final TransportListener tl;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,194,try {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,196,enqueueValve.increment();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,197,tl = transportListener;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,198,if (!started || disposed || tl == null || stopping.get()) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,199,if( stopping.get() ) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,202,getMessageQueue().clear();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,204,return false;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,209,enqueueValve.decrement();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,212,LinkedBlockingQueue<Object> mq = getMessageQueue();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,215,if( command == DISCONNECT ) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,216,tl.onException(new TransportDisposedIOException("Peer (" + peer.toString() + ") disposed."));
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,218,tl.onCommand(command);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,228,try {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,231,this.transportListener = commandListener;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,232,wakeup();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,237,throw new RuntimeException(e);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,241,private LinkedBlockingQueue<Object> getMessageQueue() {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,242,synchronized (lazyInitMutext) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,243,if (messageQueue == null) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,244,messageQueue = new LinkedBlockingQueue<Object>(this.asyncQueueDepth);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,246,return messageQueue;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,331,synchronized (lazyInitMutext) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,332,if (taskRunner == null) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,333,taskRunner = DefaultThreadPools.getDefaultTaskRunnerFactory().createTaskRunner(this, "VMTransport: " + toString());
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,348,public boolean isDisposed() {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,349,return disposed;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,352,public boolean isConnected() {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,353,return started;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,356,public void reconnect(URI uri) throws IOException {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,357,throw new IOException("Not supported");
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,367,public void updateURIs(boolean reblance,URI[] uris) throws IOException {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportServer.java,78,if (stopping.compareAndSet(false, true) && !disposed) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompConnection.java,55,outputStream.write(0);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompConnection.java,64,outputStream.write(0);
activemq-web/src/main/java/org/apache/activemq/web/DestinationFacade.java,108,if (jmsDestination == null) {
activemq-web/src/main/java/org/apache/activemq/web/DestinationFacade.java,133,return new String[]{"GET", "POST"};
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1055,synchronized (reconnectMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,104,protected final Map<MessageId, Runnable> messagesWaitingForSpace = Collections
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,105,.synchronizedMap(new LinkedHashMap<MessageId, Runnable>());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1642,if (optimizedDispatch || isSlave()) {
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,47,public abstract class ActiveMQDestination extends JNDIBaseStorable implements DataStructure, Destination, Externalizable, Comparable {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2203,protected void startDestinationsInPersistenceStore(Broker broker) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2204,Set destinations = destinationFactory.getDestinations();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2205,if (destinations != null) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2206,Iterator iter = destinations.iterator();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2207,ConnectionContext adminConnectionContext = broker.getAdminConnectionContext();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2208,if (adminConnectionContext == null) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2209,ConnectionContext context = new ConnectionContext();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2210,context.setBroker(broker);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2211,adminConnectionContext = context;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2212,broker.setAdminConnectionContext(adminConnectionContext);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2214,while (iter.hasNext()) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2215,ActiveMQDestination destination = (ActiveMQDestination) iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2216,broker.addDestination(adminConnectionContext, destination,false);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,71,public JDBCMessageStore(JDBCPersistenceAdapter persistenceAdapter, JDBCAdapter adapter, WireFormat wireFormat, ActiveMQDestination destination, ActiveMQMessageAudit audit) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,49,public JDBCTopicMessageStore(JDBCPersistenceAdapter persistenceAdapter, JDBCAdapter adapter, WireFormat wireFormat, ActiveMQTopic topic, ActiveMQMessageAudit audit) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1635,if (LOG.isTraceEnabled()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1636,LOG.trace("Message " + msg.getMessageId() + " sent to " + this.destination);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,287,public Destination addDestination(ConnectionContext context, ActiveMQDestination destination,boolean create) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,304,answer = tempQueueRegion.addDestination(context, destination,create);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,307,answer = tempTopicRegion.addDestination(context, destination,create);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,455,demandConsumerDispatched++;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,456,if (demandConsumerDispatched > (demandConsumerInfo.getPrefetchSize() * .75)) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,457,remoteBroker.oneway(new MessageAck(md, MessageAck.STANDARD_ACK_TYPE, demandConsumerDispatched));
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,458,demandConsumerDispatched = 0;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,607,LOG.debug(configuration.getBrokerName() + " bridging sub on " + localBroker + " from " + remoteBrokerName + " : " + info);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1335,if (this.defaultSocketURIString ==null) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1344,this.defaultSocketURIString =result;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1345,break;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,19,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,20,import java.net.URI;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,21,import java.util.HashMap;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,22,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,23,import java.util.LinkedList;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,24,import java.util.List;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,25,import java.util.Map;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,26,import java.util.Properties;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,27,import java.util.concurrent.ConcurrentHashMap;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,28,import java.util.concurrent.CopyOnWriteArrayList;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,29,import java.util.concurrent.CountDownLatch;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,30,import java.util.concurrent.TimeUnit;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,31,import java.util.concurrent.atomic.AtomicBoolean;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,32,import java.util.concurrent.atomic.AtomicInteger;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,33,import java.util.concurrent.atomic.AtomicReference;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,34,import java.util.concurrent.locks.ReentrantReadWriteLock;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,37,import javax.transaction.xa.XAResource;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,400,self += ",";
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,409,connectedBrokers += ",";
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,414,connectedBrokers += self;
activemq-core/src/main/java/org/apache/activemq/transport/failover/BackupTransport.java,21,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/transport/failover/BackupTransport.java,22,import java.net.URI;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,20,import java.io.BufferedReader;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,22,import java.io.FileReader;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,23,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,24,import java.io.InputStreamReader;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,25,import java.io.InterruptedIOException;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,26,import java.net.InetAddress;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,27,import java.net.MalformedURLException;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,28,import java.net.URI;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,29,import java.net.URL;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,30,import java.util.ArrayList;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,31,import java.util.HashSet;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,32,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,33,import java.util.LinkedHashMap;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,34,import java.util.List;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,35,import java.util.Map;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,36,import java.util.Set;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,37,import java.util.StringTokenizer;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,38,import java.util.concurrent.CopyOnWriteArrayList;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,39,import java.util.concurrent.atomic.AtomicReference;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,828,BackupTransport bt = backups.remove(0);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1041,List<URI> add = new ArrayList<URI>();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1043,Set<URI> set = new HashSet<URI>();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1046,if (uri != null) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1047,set.add(uri);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1050,for (URI uri : set) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1051,if (copy.remove(uri) == false) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1052,add.add(uri);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1056,this.updated.clear();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1057,this.updated.addAll(add);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1058,for (URI uri : copy) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1059,this.uris.remove(uri);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1061,add(rebalance, add.toArray(new URI[add.size()]));
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,19,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,20,import java.net.URI;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,21,import java.net.URISyntaxException;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,22,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,24,import java.util.StringTokenizer;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,25,import java.util.concurrent.CopyOnWriteArrayList;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,26,import java.util.regex.Pattern;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,27,import javax.management.ObjectName;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,211,brokerInfo.setBrokerURL(getServer().getConnectURI().toString());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,263,URI theConnectURI = getConnectUri();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,229,try {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,230,enqueueValve.turnOff();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,234,enqueueValve.turnOn();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,151,if (subscriptions.get(sub.getConsumerInfo()) != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,133,DurableTopicSubscription sub = durableSubscriptions.remove(key);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1116,try {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1128,result = true;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1129,LOG.error("Failed to verify URI " + newURI + " already known: " + e);
activemq-console/src/main/java/org/apache/activemq/console/command/store/amq/AMQJournalTool.java,124,context = new VelocityContext();
activemq-console/src/main/java/org/apache/activemq/console/command/store/amq/AMQJournalTool.java,125,List keys = Arrays.asList(context.getKeys());
activemq-console/src/main/java/org/apache/activemq/console/command/store/amq/AMQJournalTool.java,128,.iterator(); iterator.hasNext();) {
activemq-console/src/main/java/org/apache/activemq/console/command/store/amq/AMQJournalTool.java,129,Map.Entry kv = (Map.Entry) iterator.next();
activemq-console/src/main/java/org/apache/activemq/console/command/store/amq/AMQJournalTool.java,130,String name = (String) kv.getKey();
activemq-console/src/main/java/org/apache/activemq/console/command/store/amq/AMQJournalTool.java,131,String value = (String) kv.getValue();
activemq-console/src/main/java/org/apache/activemq/console/command/store/amq/AMQJournalTool.java,133,if (!keys.contains(name)) {
activemq-console/src/main/java/org/apache/activemq/console/command/store/amq/AMQJournalTool.java,134,context.put(name, value);
activemq-console/src/main/java/org/apache/activemq/console/command/store/amq/AMQJournalTool.java,174,curr = manager.getNextLocation(curr);
activemq-console/src/main/java/org/apache/activemq/console/command/store/amq/AMQJournalTool.java,192,Location location = entry.getLocation();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,65,return broker.getBrokerId().toString();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,69,return broker.getBrokerName();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,95,return broker.getDestinationStatistics().getEnqueues().getCount();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,99,return broker.getDestinationStatistics().getDequeues().getCount();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,103,return broker.getDestinationStatistics().getConsumers().getCount();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,107,return broker.getDestinationStatistics().getMessages().getCount();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,111,return broker.getDestinationStatistics().getMessagesCached().getCount();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,153,broker.getDestinationStatistics().reset();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,157,broker.getDestinationStatistics().setEnabled(true);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,161,broker.getDestinationStatistics().setEnabled(false);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,165,return broker.getDestinationStatistics().isEnabled();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,181,return broker.getTopics();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,185,return broker.getQueues();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,189,return broker.getTemporaryTopics();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,193,return broker.getTemporaryQueues();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,197,return broker.getTopicSubscribers();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,201,return broker.getDurableTopicSubscribers();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,205,return broker.getQueueSubscribers();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,209,return broker.getTemporaryTopicSubscribers();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,213,return broker.getTemporaryQueueSubscribers();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,217,return broker.getInactiveDurableTopicSubscribers();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,245,broker.getContextBroker().addDestination(BrokerSupport.getConnectionContext(broker.getContextBroker()), new ActiveMQTopic(name),true);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,249,broker.getContextBroker().addDestination(BrokerSupport.getConnectionContext(broker.getContextBroker()), new ActiveMQQueue(name),true);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,253,broker.getContextBroker().removeDestination(BrokerSupport.getConnectionContext(broker.getContextBroker()), new ActiveMQTopic(name),
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,254,1000);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,258,broker.getContextBroker().removeDestination(BrokerSupport.getConnectionContext(broker.getContextBroker()), new ActiveMQQueue(name),
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,259,1000);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,265,context.setBroker(broker);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,276,Subscription subscription = broker.addConsumer(context, info);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,277,broker.removeConsumer(context, info);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,289,context.setBroker(broker);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,291,broker.removeSubscription(context, info);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,26,import javax.jms.JMSException;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,28,import org.apache.activemq.command.ActiveMQBytesMessage;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,29,import org.apache.activemq.command.ActiveMQDestination;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,30,import org.apache.activemq.command.ActiveMQMessage;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,31,import org.apache.activemq.command.ConsumerInfo;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,32,import org.apache.activemq.command.MessageAck;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,33,import org.apache.activemq.command.MessageDispatch;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,34,import org.apache.activemq.command.MessageId;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,35,import org.apache.activemq.command.TransactionId;
activemq-core/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,54,if (cause.getMessage().contains(noSpaceMessage)) {
activemq-core/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,65,if (cause instanceof SQLException && cause.getMessage().contains(sqlExceptionMessage)) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,19,import java.io.DataInput;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,20,import java.io.DataInputStream;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,21,import java.io.DataOutput;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,22,import java.io.DataOutputStream;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,23,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,24,import java.util.HashMap;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,26,import java.util.Map;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,100,if (contentLength != null) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,421,ServerSocket result = new ServerSocket(port);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,422,result.setReuseAddress(true);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,423,return result;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,306,response = command.visit(this);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,293,dispatchAsync(ce);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,312,if (responseRequired) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,611,ConsumerId consumerId = (ConsumerId) iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,619,ProducerId producerId = (ProducerId) iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,724,SessionId sessionId = (SessionId) iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,733,DestinationInfo di = (DestinationInfo) iter.next();
activemq-console/src/main/java/org/apache/activemq/console/filter/MessagesQueryFilter.java,80,CompositeData[] messages = (CompositeData[]) jmxConnection.invoke(destName, "browse", new Object[] {}, new String[] {});
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2195,LOG.info("Ignoring IO exception, " + exception, exception);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,20,import java.util.AbstractList;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,270,store.recover(new MessageRecoveryListener() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,271,double totalMessageCount = store.getMessageCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,272,int recoveredMessageCount = 0;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,274,public boolean recoverMessage(Message message) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,277,if ((++recoveredMessageCount % 50000) == 0) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,278,LOG.info("cursor for " + getActiveMQDestination().getQualifiedName() + " has recovered "
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,279,+ recoveredMessageCount + " messages. " +
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,280,(int)(recoveredMessageCount*100/totalMessageCount) + "% complete");
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,282,if (message.isExpired()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,283,if (broker.isExpired(message)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,284,messageExpired(createConnectionContext(), createMessageReference(message));
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,287,destinationStatistics.getMessages().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,289,return true;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,291,if (hasSpace()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,292,message.setRegionDestination(Queue.this);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,293,messagesLock.writeLock().lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,294,try{
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,295,try {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,296,messages.addMessageLast(message);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,298,LOG.error("Failed to add message to cursor", e);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,301,messagesLock.writeLock().unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,303,destinationStatistics.getMessages().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,304,return true;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,306,return false;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,309,public boolean recoverMessageReference(MessageId messageReference) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,310,throw new RuntimeException("Should not be called.");
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,313,public boolean hasSpace() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,314,return true;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,317,public boolean isDuplicate(MessageId id) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,318,return false;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,322,int messageCount = store.getMessageCount();
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,20,import java.net.InetSocketAddress;
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,21,import java.net.URI;
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,28,import org.eclipse.jetty.server.bio.SocketConnector;
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,30,import org.eclipse.jetty.server.session.SessionHandler;
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,31,import org.eclipse.jetty.servlet.ServletHandler;
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,33,import org.eclipse.jetty.servlet.ServletMapping;
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,53,connector = new SocketConnector();
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,57,server.setConnectors(new Connector[] {
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,58,connector
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,62,contextHandler.setContextPath("/");
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,63,contextHandler.setServer(server);
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,64,server.setHandler(contextHandler);
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,66,SessionHandler sessionHandler = new SessionHandler();
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,67,contextHandler.setHandler(sessionHandler);
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,69,ServletHandler servletHandler = new ServletHandler();
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,70,sessionHandler.setHandler(servletHandler);
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,73,holder.setName("WSStomp");
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,74,holder.setClassName(StompServlet.class.getName());
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,75,servletHandler.setServlets(new ServletHolder[] {
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,76,holder
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,79,ServletMapping mapping = new ServletMapping();
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,80,mapping.setServletName("WSStomp");
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,81,mapping.setPathSpec("/*");
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,82,servletHandler.setServletMappings(new ServletMapping[] {
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,83,mapping
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,465,broker.acknowledge(consumerExchange, ack);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,831,if (stopping.get()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1295,jmsEx = JMSExceptionSupport.create(er.getException());
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/LastImageSubscriptionRecoveryPolicy.java,62,DestinationFilter filter = DestinationFilter.parseFilter(destination);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/LastImageSubscriptionRecoveryPolicy.java,63,if (filter.matches(lastImage.getMessage().getDestination())) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/LastImageSubscriptionRecoveryPolicy.java,64,result.add(lastImage.getMessage());
activemq-core/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,59,private DataStructure marshallCache[] = new DataStructure[MARSHAL_CACHE_SIZE];
activemq-core/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,60,private DataStructure unmarshallCache[] = new DataStructure[MARSHAL_CACHE_SIZE];
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2209,if (text.equals("shutdown")) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,36,import javax.management.ObjectName;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,42,import org.apache.activemq.command.BrokerId;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,43,import org.apache.activemq.command.BrokerInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,44,import org.apache.activemq.command.Command;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,45,import org.apache.activemq.command.CommandTypes;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,46,import org.apache.activemq.command.ConnectionControl;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,47,import org.apache.activemq.command.ConnectionError;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,48,import org.apache.activemq.command.ConnectionId;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,49,import org.apache.activemq.command.ConnectionInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,50,import org.apache.activemq.command.ConsumerControl;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,51,import org.apache.activemq.command.ConsumerId;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,52,import org.apache.activemq.command.ConsumerInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,53,import org.apache.activemq.command.ControlCommand;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,54,import org.apache.activemq.command.DataArrayResponse;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,55,import org.apache.activemq.command.DestinationInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,56,import org.apache.activemq.command.ExceptionResponse;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,57,import org.apache.activemq.command.FlushCommand;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,58,import org.apache.activemq.command.IntegerResponse;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,59,import org.apache.activemq.command.KeepAliveInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,60,import org.apache.activemq.command.Message;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,61,import org.apache.activemq.command.MessageAck;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,62,import org.apache.activemq.command.MessageDispatch;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,63,import org.apache.activemq.command.MessageDispatchNotification;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,64,import org.apache.activemq.command.MessagePull;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,65,import org.apache.activemq.command.ProducerAck;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,66,import org.apache.activemq.command.ProducerId;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,67,import org.apache.activemq.command.ProducerInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,68,import org.apache.activemq.command.RemoveSubscriptionInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,69,import org.apache.activemq.command.Response;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,70,import org.apache.activemq.command.SessionId;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,71,import org.apache.activemq.command.SessionInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,72,import org.apache.activemq.command.ShutdownInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,73,import org.apache.activemq.command.TransactionId;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,74,import org.apache.activemq.command.TransactionInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,75,import org.apache.activemq.command.WireFormatInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,76,import org.apache.activemq.network.*;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,94,import org.apache.activemq.util.*;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,159,TaskRunnerFactory taskRunnerFactory) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,610,for (Iterator iter = session.getConsumerIds().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,618,for (Iterator iter = session.getProducerIds().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,670,this.faultTolerantConnection=info.isFaultTolerant();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,698,LOG.warn("Failed to add Connection " + info.getConnectionId() + ", reason: " +  e.toString());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,723,for (Iterator iter = cs.getSessionIds().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,732,for (Iterator iter = cs.getTempDestinations().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,947,DefaultThreadPools.getDefaultTaskRunnerFactory().execute(new Runnable(){
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1002,for (Iterator<Command> iter = dispatchQueue.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1156,return this.faultTolerantConnection;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1188,LOG.info((passive?"Passive":"Active")+" Slave Broker " + info.getBrokerName() + " is attached");
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1209,for (Iterator<TransportConnection> iter = connections.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1245,LOG.error("Failed to create responder end of duplex network bridge " + duplexNetworkConnectorId , e);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1398,TransportConnectionState state) {
activemq-core/src/main/java/org/apache/activemq/util/IdGenerator.java,59,LOG.warn("could not generate unique stub", ioe);
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,223,return new HashMap<ActiveMQDestination, Destination>(destinations);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,133,Map<ActiveMQDestination, Destination> answer = getQueueRegion().getDestinationMap();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,286,server = null;
activemq-core/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,109,if (connector instanceof ManagedTransportConnector) {
activemq-core/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,110,ManagedTransportConnector managedTransportConnector = (ManagedTransportConnector) connector;
activemq-core/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,111,isSSL = (managedTransportConnector.getServer() instanceof SslTransportServer);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,55,private LinkedList<MessageReference> memoryList = new LinkedList<MessageReference>();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,200,memoryList.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,210,memoryList.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,248,memoryList.addFirst(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,258,memoryList.addFirst(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,321,if (memoryList.remove(node)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,400,LinkedList<MessageReference> tmpList = new LinkedList<MessageReference>(this.memoryList);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,401,this.memoryList = new LinkedList<MessageReference>();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,402,while (!tmpList.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,403,MessageReference node = tmpList.removeFirst();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,407,memoryList.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,417,while (!memoryList.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,418,MessageReference node = memoryList.removeFirst();
activemq-web/src/main/java/org/apache/activemq/web/MessageServletSupport.java,128,if (correlationID != null) {
activemq-pool/src/main/java/org/apache/activemq/pool/PooledSession.java,324,return consumer;
activemq-pool/src/main/java/org/apache/activemq/pool/PooledSession.java,337,public String toString() {
activemq-pool/src/main/java/org/apache/activemq/pool/PooledSession.java,338,return "PooledSession { " + session + " }";
activemq-core/src/main/java/org/apache/activemq/broker/ProducerBrokerExchange.java,136,+ messageSend.getMessageId().getProducerSequenceId() + "] less than last stored: "  + lastSendSequenceNumber);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1308,result.setConnectionContext(context);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1305,if (context.isReconnect()) {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,169,LOG.debug("command: " + msg.getCommandId());
activemq-core/src/main/java/org/apache/activemq/broker/ProducerBrokerExchange.java,39,private long lastSendSequenceNumber = -1;
activemq-core/src/main/java/org/apache/activemq/broker/ProducerBrokerExchange.java,132,if (lastSendSequenceNumber > 0) {
activemq-core/src/main/java/org/apache/activemq/broker/ProducerBrokerExchange.java,133,if (messageSend.getMessageId().getProducerSequenceId() <= lastSendSequenceNumber) {
activemq-core/src/main/java/org/apache/activemq/broker/ProducerBrokerExchange.java,135,LOG.debug("suppressing duplicate message send [" + messageSend.getMessageId() + "] with producerSequenceId ["
activemq-core/src/main/java/org/apache/activemq/broker/ProducerBrokerExchange.java,143,lastSendSequenceNumber = l;
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,28,private static final ClassLoader FALLBACK_CLASS_LOADER = ClassLoadingAwareObjectInputStream.class.getClassLoader();
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,35,protected Class resolveClass(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException {
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,40,protected Class resolveProxyClass(String[] interfaces) throws IOException, ClassNotFoundException {
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,48,return Proxy.getProxyClass(cinterfaces[0].getClassLoader(), cinterfaces);
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,55,throws ClassNotFoundException {
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,59,final Class clazz = (Class) primClasses.get(className);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1951,public List getUnconsumedMessages() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,210,List getUnconsumedMessages() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,110,private static final IdGenerator CONNECTION_ID_GENERATOR = new IdGenerator();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,664,ServiceSupport.dispose(this.transport);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,681,if (executor != null){
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,685,LOG.error("Error shutting down thread pool " + e,e);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1257,if (LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1258,LOG.debug(getConsumerId() + " ignoring (auto acking) duplicate: " + md.getMessage());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1260,MessageAck ack = new MessageAck(md, MessageAck.STANDARD_ACK_TYPE, 1);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1277,LOG.warn("acking duplicate delivery as poison, redelivery must be pending to another"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1279,+ failoverRedeliveryWaitPeriod + ". Message: " + md);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,669,LOG.debug("Setting up new connection id: " + info.getConnectionId() + ", address: " + getRemoteAddress());
activemq-core/src/main/java/org/apache/activemq/command/ConnectionInfo.java,40,private boolean failoverReconnect;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,525,LOG.debug("Caught exception closing socket",e);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,532,latch.await(1,TimeUnit.SECONDS);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,29,import org.eclipse.jetty.server.bio.SocketConnector;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,30,import org.eclipse.jetty.server.handler.ContextHandler;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,31,import org.eclipse.jetty.server.session.SessionHandler;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,32,import org.eclipse.jetty.servlet.ServletHandler;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,33,import org.eclipse.jetty.servlet.ServletHolder;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,34,import org.eclipse.jetty.servlet.ServletMapping;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,81,connector = new SocketConnector();
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,86,server.setConnectors(new Connector[] {
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,87,connector
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,90,ContextHandler contextHandler = new ContextHandler();
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,91,contextHandler.setContextPath("/");
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,92,contextHandler.setServer(server);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,93,server.setHandler(contextHandler);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,95,SessionHandler sessionHandler = new SessionHandler();
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,96,contextHandler.setHandler(sessionHandler);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,98,ServletHandler servletHandler = new ServletHandler();
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,99,sessionHandler.setHandler(servletHandler);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,101,ServletHolder holder = new ServletHolder();
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,102,holder.setName("httpTunnel");
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,103,holder.setClassName(HttpTunnelServlet.class.getName());
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,104,servletHandler.setServlets(new ServletHolder[] {
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,105,holder
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,108,ServletMapping mapping = new ServletMapping();
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,109,mapping.setServletName("httpTunnel");
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,110,mapping.setPathSpec("/*");
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,111,servletHandler.setServletMappings(new ServletMapping[] {
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,112,mapping
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,41,sslConnector.setKeystore(keyStore);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,42,sslConnector.setPassword(keyStorePassword);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,46,sslConnector.setKeyPassword(keyStorePassword);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,49,sslConnector.setKeystoreType(keyStoreType);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,52,sslConnector.setSecureRandomAlgorithm(secureRandomCertficateAlgorithm);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,55,sslConnector.setSslKeyManagerFactoryAlgorithm(keyCertificateAlgorithm);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,58,sslConnector.setSslTrustManagerFactoryAlgorithm(trustCertificateAlgorithm);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,61,sslConnector.setProtocol(protocol);
activemq-optional/src/main/java/org/apache/activemq/transport/ws/StompServlet.java,54,protected WebSocket doWebSocketConnect(HttpServletRequest request, String protocol) {
activemq-optional/src/main/java/org/apache/activemq/transport/ws/StompSocket.java,39,class StompSocket extends TransportSupport implements WebSocket, StompTransport {
activemq-optional/src/main/java/org/apache/activemq/transport/ws/StompSocket.java,40,Outbound outbound;
activemq-optional/src/main/java/org/apache/activemq/transport/ws/StompSocket.java,44,public void onConnect(Outbound outbound) {
activemq-optional/src/main/java/org/apache/activemq/transport/ws/StompSocket.java,45,this.outbound=outbound;
activemq-optional/src/main/java/org/apache/activemq/transport/ws/StompSocket.java,48,public void onMessage(byte frame, byte[] data,int offset, int length) {}
activemq-optional/src/main/java/org/apache/activemq/transport/ws/StompSocket.java,50,public void onMessage(byte frame, String data) {
activemq-optional/src/main/java/org/apache/activemq/transport/ws/StompSocket.java,58,public void onDisconnect() {
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,29,import org.eclipse.jetty.server.handler.ContextHandler;
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,61,ContextHandler contextHandler = new ContextHandler();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,795,if (!checkpointThread.isAlive()) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1419,if (metadata.version >= 3) {
activemq-optional/src/main/java/org/apache/activemq/transport/util/TextWireFormat.java,37,public abstract Object unmarshalText(String text);
activemq-optional/src/main/java/org/apache/activemq/transport/util/TextWireFormat.java,39,public abstract Object unmarshalText(Reader reader);
activemq-optional/src/main/java/org/apache/activemq/transport/util/TextWireFormat.java,41,public abstract String marshalText(Object command);
activemq-optional/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java,58,public String marshalText(Object command) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,328,connection.setExceptionListener(exceptionListener);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,360,Map map = URISupport.parseQuery(this.brokerURL.getQuery());
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,361,if (buildFromMap(IntrospectionSupport.extractProperties(map, "jms."))) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,373,if (buildFromMap(IntrospectionSupport.extractProperties(data.getParameters(), "jms."))) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,917,this.exceptionListener = exceptionListener;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,920,public int getAuditDepth() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,921,return auditDepth;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,924,public void setAuditDepth(int auditDepth) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,925,this.auditDepth = auditDepth;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,928,public int getAuditMaximumProducerNumber() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,929,return auditMaximumProducerNumber;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,932,public void setAuditMaximumProducerNumber(int auditMaximumProducerNumber) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,933,this.auditMaximumProducerNumber = auditMaximumProducerNumber;
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,27,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,108,if (uri != null) {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,184,questionMark = -1;
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,325,public static String createQueryString(Map options) throws URISyntaxException {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,330,for (Iterator iter = options.keySet().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,336,String key = (String)iter.next();
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,356,public static URI createRemainingURI(URI originalURI, Map params) throws URISyntaxException {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,739,if (!message.isResponseRequired()) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,536,LOG.error("Failed to start ActiveMQ JMS Message Broker. Reason: " + e, e);
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,21,import org.apache.activemq.command.BrokerId;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,22,import org.apache.activemq.command.BrokerInfo;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,24,import org.apache.activemq.command.ConsumerInfo;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,25,import org.apache.activemq.command.Endpoint;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,26,import org.apache.activemq.command.NetworkBridgeFilter;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,28,import org.apache.activemq.util.ServiceSupport;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,43,protected final BrokerId remoteBrokerPath[] = new BrokerId[] {null};
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,44,protected Object brokerInfoMutex = new Object();
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,50,remoteBrokerNameKnownLatch.countDown();
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,53,protected void serviceRemoteBrokerInfo(Command command) throws IOException {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,54,synchronized (brokerInfoMutex) {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,55,BrokerInfo remoteBrokerInfo = (BrokerInfo)command;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,56,BrokerId remoteBrokerId = remoteBrokerInfo.getBrokerId();
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,60,Endpoint from = command.getFrom();
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,61,if (from == null) {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,62,LOG.warn("Incoming command does not have a from endpoint: " + command);
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,64,from.setBrokerInfo(remoteBrokerInfo);
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,66,if (localBrokerId != null) {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,67,if (localBrokerId.equals(remoteBrokerId)) {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,68,LOG.info("Disconnecting loop back connection.");
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,70,ServiceSupport.dispose(this);
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,73,if (!disposed.get()) {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,74,triggerLocalStartBridge();
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,79,protected void addRemoteBrokerToBrokerPath(ConsumerInfo info) throws IOException {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,80,info.setBrokerPath(appendToBrokerPath(info.getBrokerPath(), getFromBrokerId(info)));
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,86,protected BrokerId getFromBrokerId(Command command) throws IOException {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,87,BrokerId answer = null;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,88,Endpoint from = command.getFrom();
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,89,if (from == null) {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,90,LOG.warn("Incoming command does not have a from endpoint: " + command);
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,92,answer = from.getBrokerId();
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,94,if (answer != null) {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,95,return answer;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,97,throw new IOException("No broker ID is available for endpoint: " + from + " from command: "
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,98,+ command);
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,110,protected BrokerId[] getRemoteBrokerPath() {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,111,return remoteBrokerPath;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,19,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,21,import org.apache.activemq.command.BrokerId;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,22,import org.apache.activemq.command.BrokerInfo;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,23,import org.apache.activemq.command.Command;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,24,import org.apache.activemq.command.ConsumerInfo;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,25,import org.apache.activemq.command.NetworkBridgeFilter;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,27,import org.apache.activemq.util.ServiceSupport;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,41,protected final BrokerId remoteBrokerPath[] = new BrokerId[] {null};
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,42,protected Object brokerInfoMutex = new Object();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,43,protected BrokerId remoteBrokerId;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,50,protected void serviceRemoteBrokerInfo(Command command) throws IOException {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,51,synchronized (brokerInfoMutex) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,52,BrokerInfo remoteBrokerInfo = (BrokerInfo)command;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,53,remoteBrokerId = remoteBrokerInfo.getBrokerId();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,54,remoteBrokerPath[0] = remoteBrokerId;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,55,remoteBrokerName = remoteBrokerInfo.getBrokerName();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,56,if (localBrokerId != null) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,57,if (localBrokerId.equals(remoteBrokerId)) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,58,if (LOG.isTraceEnabled()) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,59,LOG.trace(configuration.getBrokerName() + " disconnecting remote loop back connection: " + remoteBrokerName);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,61,ServiceSupport.dispose(this);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,64,if (LOG.isTraceEnabled()) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,65,LOG.trace("counting down remoteBrokerNameKnownLatch with: " + command);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,67,remoteBrokerNameKnownLatch.countDown();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,71,protected void addRemoteBrokerToBrokerPath(ConsumerInfo info) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,72,info.setBrokerPath(appendToBrokerPath(info.getBrokerPath(), getRemoteBrokerPath()));
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,75,protected void serviceLocalBrokerInfo(Command command) throws InterruptedException {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,76,synchronized (brokerInfoMutex) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,77,localBrokerId = ((BrokerInfo)command).getBrokerId();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,78,localBrokerPath[0] = localBrokerId;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,79,localBrokerIdKnownLatch.countDown();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,80,if (remoteBrokerId != null) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,81,if (remoteBrokerId.equals(localBrokerId)) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,82,if (LOG.isTraceEnabled()) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,83,LOG.trace(configuration.getBrokerName() + " disconnecting local loop back connection.");
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,85,waitStarted();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,86,ServiceSupport.dispose(this);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,96,protected BrokerId[] getRemoteBrokerPath() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,97,return remoteBrokerPath;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,73,import org.apache.activemq.transport.TransportListener;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,114,protected CountDownLatch remoteBrokerNameKnownLatch = new CountDownLatch(1);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,115,protected CountDownLatch localBrokerIdKnownLatch = new CountDownLatch(1);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,274,protected void startLocalBridge() throws Throwable {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,280,remoteBrokerNameKnownLatch.await();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,329,LOG.trace(configuration.getBrokerName() + " starting remote Bridge, localBroker=" + localBroker);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,373,if (!disposed.get()) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,374,triggerLocalStartBridge();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,425,remoteBrokerNameKnownLatch.countDown();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1215,localBrokerIdKnownLatch.await();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1225,protected abstract void serviceLocalBrokerInfo(Command command) throws InterruptedException;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1227,protected abstract void addRemoteBrokerToBrokerPath(ConsumerInfo info) throws IOException;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1229,protected abstract void serviceRemoteBrokerInfo(Command command) throws IOException;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1231,protected abstract BrokerId[] getRemoteBrokerPath();
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,97,if ( localURI.equals(uri) || (connectionFilter != null && !connectionFilter.connectTo(uri))) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,159,return converter.createTempQueue(name);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,161,return converter.createTempTopic(name);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,622,public ActiveMQDestination createTempQueue(String name) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,625,rc = new ActiveMQTempQueue(connectionId, tempDestinationGenerator.getNextSequenceId());
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,627,tempDestinations.put(name, rc);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,629,return rc;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,632,public ActiveMQDestination createTempTopic(String name) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,633,ActiveMQDestination rc = tempDestinations.get(name);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,634,if( rc == null ) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,635,rc = new ActiveMQTempTopic(connectionId, tempDestinationGenerator.getNextSequenceId());
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/IndividualDeadLetterStrategy.java,41,public ActiveMQDestination getDeadLetterQueueFor(Message message,
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/IndividualDeadLetterStrategy.java,42,Subscription subscription) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/IndividualDeadLetterStrategy.java,119,String name = prefix + message.getDestination().getPhysicalName();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,116,protected final AtomicBoolean remoteInterupted = new AtomicBoolean(false);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,161,remoteBroker.setTransportListener(new TransportListener() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,172,public void transportInterupted() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,175,if (remoteInterupted.compareAndSet(false, true)) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,176,LOG.info("Outbound transport to " + remoteBrokerName + " interrupted.");
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,177,if (localBridgeStarted.get()) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,178,clearDownSubscriptions();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,179,synchronized (DemandForwardingBridgeSupport.this) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,180,try {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,181,localBroker.oneway(localConnectionInfo.createRemoveCommand());
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,183,LOG.debug("local broker is now disposed", td);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,185,LOG.warn("Caught exception from local start", e);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,189,localBridgeStarted.set(false);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,190,remoteBridgeStarted.set(false);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,191,startedLatch = new CountDownLatch(2);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,192,localStartedLatch = new CountDownLatch(1);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,196,public void transportResumed() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,197,if (remoteInterupted.compareAndSet(true, false)) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,201,if (!lastConnectSucceeded.get()) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,202,try {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,203,LOG.debug("Previous connection was never fully established. Sleeping for second to avoid busy loop.");
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,204,Thread.sleep(1000);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,206,Thread.currentThread().interrupt();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,209,lastConnectSucceeded.set(false);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,210,try {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,211,startLocalBridge();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,212,remoteBridgeStarted.set(true);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,213,startedLatch.countDown();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,214,LOG.info("Outbound transport to " + remoteBrokerName + " resumed");
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,216,LOG.error("Caught exception  from local start in resume transport", e);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,217,serviceLocalException(e);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,262,Thread.currentThread().setName("StartRemotelBridge: localBroker=" + localBroker);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,796,if (!remoteInterupted.get()) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,797,stop();
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,93,if( bridges.containsKey(uri) ) {
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,94,LOG.debug("Discovery agent generated a duplicate onServiceAdd event for: "+uri );
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,95,return;
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,135,bridges.put(uri, bridge);
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,164,NetworkBridge bridge = bridges.remove(uri);
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,165,if (bridge == null) {
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,166,return;
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,169,ServiceSupport.dispose(bridge);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,96,private long timeout = -1;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,99,private int maxReconnectAttempts;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,100,private int startupMaxReconnectAttempts;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,230,if (started) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,231,LOG.warn("Transport (" + transport.getRemoteAddress() + ") failed to " + connectedTransportURI
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,232,+ " , attempting to automatically reconnect due to: " + e);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,233,LOG.debug("Transport failed with the following exception:", e);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,302,LOG.debug("Started.");
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,321,LOG.debug("Stopped.");
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,823,if (!useExponentialBackOff || reconnectDelay == DEFAULT_INITIAL_RECONNECT_DELAY) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,824,reconnectDelay = initialReconnectDelay;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,861,if (started) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,865,LOG.debug("Connection established");
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,887,LOG.debug("transport resumed by transport listener not set");
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,913,int reconnectAttempts = 0;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,914,if (firstConnection) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,915,if (this.startupMaxReconnectAttempts != 0) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,916,reconnectAttempts = this.startupMaxReconnectAttempts;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,919,if (reconnectAttempts == 0) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,920,reconnectAttempts = this.maxReconnectAttempts;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,922,if (reconnectAttempts > 0 && ++connectFailures >= reconnectAttempts) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,923,LOG.error("Failed to connect to transport after: " + connectFailures + " attempt(s)");
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,938,if (transportListener != null) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,939,if (connectionFailure instanceof IOException) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,940,transportListener.onException((IOException) connectionFailure);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,942,transportListener.onException(IOExceptionSupport.create(connectionFailure));
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,945,reconnectMutex.notifyAll();
activemq-core/src/main/java/org/apache/activemq/transport/MutexTransport.java,26,private final Object writeMutex = new Object();
activemq-core/src/main/java/org/apache/activemq/transport/MutexTransport.java,33,synchronized (writeMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/MutexTransport.java,39,synchronized (writeMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/MutexTransport.java,45,synchronized (writeMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/MutexTransport.java,51,synchronized (writeMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,140,stompTransport.sendToActiveMQ(command);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,257,sendToActiveMQ(message, createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,326,sendToActiveMQ(tx, createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,355,sendToActiveMQ(tx, createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,386,sendToActiveMQ(tx, createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,456,sendToActiveMQ(info, createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,468,sendToActiveMQ(sub.getConsumerInfo().createRemoveCommand(), createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,560,sendToActiveMQ(connectionInfo.createRemoveCommand(), createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,561,sendToActiveMQ(new ShutdownInfo(), createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,626,sendToActiveMQ(new DestinationInfo(connectionId, DestinationInfo.ADD_OPERATION_TYPE, rc), null);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,636,sendToActiveMQ(new DestinationInfo(connectionId, DestinationInfo.ADD_OPERATION_TYPE, rc), null);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,23,import java.util.Set;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,27,import java.util.concurrent.CopyOnWriteArraySet;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,68,protected final Valve dispatchValve = new Valve(true);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,220,size--;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,221,setCacheEnabled(false);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,222,batchList.remove(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/OrderedPendingList.java,92,public void remove(MessageReference message) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/OrderedPendingList.java,94,PendingNode node = this.map.remove(message.getMessageId());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/PendingList.java,28,public void remove(MessageReference message);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/PrioritizedPendingList.java,64,public void remove(MessageReference message) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/PrioritizedPendingList.java,66,PendingNode node = this.map.remove(message.getMessageId());
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,79,protocolConverter.getStompTransport().sendToActiveMQ(ack);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,57,final Command command = (Command)o;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,70,protocolConverter.onStompCommand((StompFrame)command);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,80,if (l!=null) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,90,if (n!=null) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,360,findAllDestinationsStatement = "SELECT DISTINCT CONTAINER FROM " + getFullAckTableName();
activemq-core/src/main/java/org/apache/activemq/broker/util/TraceBrokerPathPlugin.java,20,import java.util.Map;
activemq-core/src/main/java/org/apache/activemq/broker/util/TraceBrokerPathPlugin.java,40,private String stampProperty = "BrokerPath";
activemq-core/src/main/java/org/apache/activemq/broker/util/TraceBrokerPathPlugin.java,43,public String getStampProperty() {
activemq-core/src/main/java/org/apache/activemq/broker/util/TraceBrokerPathPlugin.java,44,return stampProperty;
activemq-core/src/main/java/org/apache/activemq/broker/util/TraceBrokerPathPlugin.java,47,public void setStampProperty(String stampProperty) {
activemq-core/src/main/java/org/apache/activemq/broker/util/TraceBrokerPathPlugin.java,48,this.stampProperty = stampProperty;
activemq-core/src/main/java/org/apache/activemq/broker/util/TraceBrokerPathPlugin.java,51,public void preProcessDispatch(MessageDispatch messageDispatch) {
activemq-core/src/main/java/org/apache/activemq/broker/util/TraceBrokerPathPlugin.java,52,try {
activemq-core/src/main/java/org/apache/activemq/broker/util/TraceBrokerPathPlugin.java,53,String brokerStamp = (String)messageDispatch.getMessage().getProperty(getStampProperty());
activemq-core/src/main/java/org/apache/activemq/broker/util/TraceBrokerPathPlugin.java,54,if (brokerStamp == null) {
activemq-core/src/main/java/org/apache/activemq/broker/util/TraceBrokerPathPlugin.java,55,brokerStamp = getBrokerName();
activemq-core/src/main/java/org/apache/activemq/broker/util/TraceBrokerPathPlugin.java,57,brokerStamp += "," + getBrokerName();
activemq-core/src/main/java/org/apache/activemq/broker/util/TraceBrokerPathPlugin.java,59,messageDispatch.getMessage().setProperty(getStampProperty(), brokerStamp);
activemq-core/src/main/java/org/apache/activemq/broker/util/TraceBrokerPathPlugin.java,61,LOG.warn("Setting broker property failed " + ioe, ioe);
activemq-core/src/main/java/org/apache/activemq/broker/util/TraceBrokerPathPlugin.java,63,super.preProcessDispatch(messageDispatch);
activemq-core/src/main/java/org/apache/activemq/network/MBeanNetworkListener.java,71,ObjectName objectName = createNetworkBridgeObjectName(bridge);
activemq-core/src/main/java/org/apache/activemq/network/MBeanNetworkListener.java,72,brokerService.getManagementContext().unregisterMBean(objectName);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,23,import java.util.concurrent.ConcurrentHashMap;
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,71,private final static ConcurrentHashMap<TransactionId, List<TransactionContext>> ENDED_XA_TRANSACTION_CONTEXTS = new ConcurrentHashMap<TransactionId, List<TransactionContext>>();
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,431,List<TransactionContext> l = ENDED_XA_TRANSACTION_CONTEXTS.remove(x);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,432,if (l != null && !l.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,433,if (LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,434,LOG.debug("firing afterCommit callbacks on XA_RDONLY from prepare: " + xid);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,436,for (TransactionContext ctx : l) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,437,ctx.afterCommit();
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,445,List<TransactionContext> l = ENDED_XA_TRANSACTION_CONTEXTS.remove(x);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,446,if (l != null && !l.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,447,for (TransactionContext ctx : l) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,448,try {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,449,ctx.afterRollback();
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,451,if (LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,452,LOG.debug("failed to firing afterRollback callbacks on prepare failure, txid: " + x + ", context: " + ctx, ignored);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,489,List<TransactionContext> l = ENDED_XA_TRANSACTION_CONTEXTS.remove(x);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,490,if (l != null && !l.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,491,for (TransactionContext ctx : l) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,492,ctx.afterRollback();
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,528,List<TransactionContext> l = ENDED_XA_TRANSACTION_CONTEXTS.remove(x);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,529,if (l != null && !l.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,530,for (TransactionContext ctx : l) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,538,List<TransactionContext> l = ENDED_XA_TRANSACTION_CONTEXTS.remove(x);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,539,if (l != null && !l.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,540,for (TransactionContext ctx : l) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,541,try {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,542,ctx.afterRollback();
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,544,if (LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,545,LOG.debug("failed to firing afterRollback callbacks commit failure, txid: " + x + ", context: " + ctx, ignored);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,582,ENDED_XA_TRANSACTION_CONTEXTS.remove(x);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,681,List<TransactionContext> l = ENDED_XA_TRANSACTION_CONTEXTS.get(transactionId);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,682,if (l == null) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,683,l = new ArrayList<TransactionContext>(3);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,684,ENDED_XA_TRANSACTION_CONTEXTS.put(transactionId, l);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,685,l.add(this);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,687,l.add(this);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1051,Collection<Subscription> currentSubs =
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1071,+ ", sub: " + candidateInfo + " is duplicated by network subscription with equal or higher network priority: "
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1083,+ ", which has a higher priority, new sub: " + candidateInfo + ", networkComsumerIds: "
activemq-web/src/main/java/org/apache/activemq/web/MessageServletSupport.java,341,if (answer == null && "text/xml".equals(request.getContentType())) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServletSupport.java,359,return request.getHeader(WebClient.selectorName);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,508,LOG.trace("Waiting for transport to reconnect..: " + command);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,512,LOG.info("Failover timed out after " + (end - start) + "ms");
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,519,LOG.debug("Interupted: " + e, e);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,829,Transport t = bt.getTransport();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,830,URI uri = bt.getUri();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,831,t.setTransportListener(myTransportListener);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,832,try {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,833,if (started) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,834,restoreTransport(t);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,836,reconnectDelay = initialReconnectDelay;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,837,failedConnectTransportURI = null;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,838,connectedTransportURI = uri;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,839,connectedTransport.set(t);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,840,reconnectMutex.notifyAll();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,841,connectFailures = 0;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,842,LOG.info("Successfully reconnected to backup " + uri);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,843,return false;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,845,LOG.debug("Backup transport failed", e);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,851,while (iter.hasNext() && connectedTransport.get() == null && !disposed) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,852,URI uri = iter.next();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,853,Transport t = null;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,856,SslContext.setCurrentSslContext(brokerSslContext);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,857,t = TransportFactory.compositeConnect(uri);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,858,t.setTransportListener(myTransportListener);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,859,t.start();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,862,restoreTransport(t);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,868,connectedTransport.set(t);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,899,LOG.debug("Connect fail to: " + uri + ", reason: " + e);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,900,if (t != null) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,902,t.stop();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,904,LOG.debug("Stop of failed transport: " + t + " failed with reason: " + ee);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,470,private boolean isShutdownCommand(Command command) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,471,return (command != null && (command.isShutdownInfo() || command instanceof RemoveInfo));
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,482,if (isShutdownCommand(command) && connectedTransport.get() == null) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,488,if (command instanceof RemoveInfo || command.isMessageAck()) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,492,Response response = new Response();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,493,response.setCorrelationId(command.getCommandId());
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,494,myTransportListener.onCommand(response);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,21,import java.io.FileNotFoundException;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,117,private boolean updateURIsSupported=true;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,118,private boolean reconnectSupported=true;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,122,private boolean rebalanceUpdateURIs=true;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,133,boolean doReconnect = !disposed;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,173,if (!initialized) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,177,if(command.isConnectionControl()) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,616,for (int i = 0; i < u.length; i++) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,617,if (!contains(u[i])) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,618,uris.add(u[i]);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,628,for (int i = 0; i < u.length; i++) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,629,uris.remove(u[i]);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,637,if (contains(newURI)==false) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,683,LOG.debug("urlList connectionList:" + l + ", from: " + uris);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,718,Map tmpMap = null;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,722,for (Iterator<Command> iter2 = tmpMap.values().iterator(); iter2.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,723,Command command = iter2.next();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,756,final boolean doReconnect() {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,757,Exception failure = null;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,758,synchronized (reconnectMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,763,String fileURL = getUpdateURIsURL();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,764,if (fileURL != null) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,765,BufferedReader in = null;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,766,String newUris = null;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,767,StringBuffer buffer = new StringBuffer();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,769,try {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,770,in = new BufferedReader(getURLStream(fileURL));
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,771,while (true) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,772,String line = in.readLine();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,773,if (line == null) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,774,break;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,776,buffer.append(line);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,778,newUris = buffer.toString();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,780,LOG.error("Failed to read updateURIsURL: " + fileURL, ioe);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,782,if (in != null) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,783,try {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,784,in.close();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,791,processNewTransports(isRebalanceUpdateURIs(), newUris);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,811,LOG.debug("Doing rebalance from: " + connectedTransportURI + " to " + connectList);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,818,LOG.debug("Caught an exception stopping existing transport for rebalance", e);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,855,LOG.debug("Attempting connect to: " + uri);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,951,LOG.debug("Waiting " + reconnectDelay + " ms before attempting connection. ");
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,952,synchronized (sleepMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,953,try {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,954,sleepMutex.wait(reconnectDelay);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,956,Thread.currentThread().interrupt();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,984,for (Iterator<URI> iter = connectList.iterator(); iter.hasNext() && backups.size() < backupPoolSize;) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1019,add(true, new URI[] { uri });
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1027,this.reconnectSupported=value;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1035,this.updateURIsSupported=value;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1044,for (int i = 0; i < updatedURIs.length; i++) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1045,URI uri = updatedURIs[i];
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1117,for (URI uri:uris) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1118,if (newURI.getPort()==uri.getPort()) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1119,InetAddress newAddr = InetAddress.getByName(newURI.getHost());
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1120,InetAddress addr = InetAddress.getByName(uri.getHost());
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1121,if (addr.equals(newAddr)) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1122,result = true;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1123,break;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransportFactory.java,61,Map options = compositData.getParameters();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransportFactory.java,70,public FailoverTransport createTransport(Map parameters) throws IOException {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,38,import org.apache.activemq.MessageAvailableListener;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,169,Map consumerDestinationNameMap = client.getDestinationNameMap();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,277,List consumers = client.getConsumers();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,315,response.getWriter().println(m);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,431,long now = (new Date()).getTime();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,434,String clientId = request.getParameter( "clientId" );
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,483,Iterator it = ajaxWebClients.entrySet().iterator();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,485,Map.Entry<String,AjaxWebClient> e = (Map.Entry<String,AjaxWebClient>)it.next();
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,91,return (transactionId != null && transactionId.isXATransaction()) || !ENDED_XA_TRANSACTION_CONTEXTS.isEmpty();
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,249,+ " syncCount: "
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,291,+ " syncCount: "
kahadb/src/main/java/org/apache/kahadb/util/Scheduler.java,30,public static final Timer CLOCK_DAEMON = new Timer("KahaDB Scheduler", true);
kahadb/src/main/java/org/apache/kahadb/util/Scheduler.java,37,TimerTask timerTask = new SchedulerTimerTask(task);
kahadb/src/main/java/org/apache/kahadb/util/Scheduler.java,38,CLOCK_DAEMON.scheduleAtFixedRate(timerTask, period, period);
kahadb/src/main/java/org/apache/kahadb/util/Scheduler.java,43,TimerTask ticket = TIMER_TASKS.remove(task);
kahadb/src/main/java/org/apache/kahadb/util/Scheduler.java,51,TimerTask timerTask = new SchedulerTimerTask(task);
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,28,public final class Scheduler extends ServiceSupport {
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,30,private Timer timer;
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,38,TimerTask timerTask = new SchedulerTimerTask(task);
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,39,timer.scheduleAtFixedRate(timerTask, period, period);
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,54,TimerTask ticket = timerTasks.remove(task);
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,62,TimerTask timerTask = new SchedulerTimerTask(task);
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,21,import java.util.HashMap;
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,23,import java.util.Map;
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,41,private Map<SessionKey, SessionPool> cache;
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,53,this(connection, new HashMap<SessionKey, SessionPool>(), poolFactory);
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,82,public ConnectionPool(ActiveMQConnection connection, Map<SessionKey, SessionPool> cache, ObjectPoolFactory poolFactory) {
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,90,try {
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,91,connection.start();
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,93,started.set(false);
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,94,throw(e);
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,105,SessionPool pool = cache.get(key);
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,107,pool = createSessionPool(key);
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,108,cache.put(key, pool);
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,163,if (hasFailed
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,80,OutputStream stream = blob.setBinaryStream(data.length);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,81,stream.write(data);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,82,stream.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,83,s.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,87,s.setBlob(1, blob);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,230,discard(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,276,discard(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,405,discard(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,451,protected void discard(MessageReference message) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,452,message.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,454,LOG.debug("Discarding message " + message);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,456,ConnectionContext ctx = new ConnectionContext(new NonCachedMessageEvaluationContext());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,457,ctx.setBroker(broker);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,458,broker.getRoot().sendToDeadLetterQueue(ctx, message, null);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,246,this.initialized = true;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,140,if (ack.getFirstMessageId() == null) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,141,ack.setFirstMessageId(id);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,153,count++;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,429,sendToActiveMQ(consumerInfo, createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBTransactionStore.java,269,synchronized (this) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,41,import org.apache.activemq.command.MessageId;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,783,process(data, location);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,790,try {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,793,this.indexLock.writeLock().unlock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,798,if (after != null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,799,after.run();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,838,process(data, location);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,855,void process(JournalCommand<?> data, final Location location) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,874,process(command, location);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,957,protected void process(KahaCommitCommand command, Location location) throws IOException {
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,495,public void isFull(ConnectionContext context, Usage usage) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Destination.java,205,void isFull(ConnectionContext context, Usage usage);
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,230,public void isFull(ConnectionContext context, Usage usage) {
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,936,List<BaseDestination> list = new ArrayList<BaseDestination>();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,940,if (d instanceof BaseDestination) {
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,941,BaseDestination bd = (BaseDestination) d;
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,942,bd.markForGC(timeStamp);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,943,if (bd.canGC()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,944,list.add(bd);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,949,if (list.isEmpty() == false) {
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,954,for (BaseDestination dest : list) {
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,955,dest.getLog().info(
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,957,+ " ms - removing ...");
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,131,throw new JMSException("Could no disambiguate on queue|Topic-name totransform pollymorphic destination into a ActiveMQ destination: " + dest);
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,66,protected final Object destinationsMutex = new Object();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,97,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,107,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,119,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,186,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,216,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,222,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,247,LOG
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,248,.warn("A duplicate subscription was detected. Clients may be misbehaving. Later warnings you may see about subscription removal are a consequence of this.");
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,282,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,283,for (Iterator iter = destinationMap.get(info.getDestination()).iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,284,Destination dest = (Destination) iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,315,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,331,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,332,for (Iterator iter = destinationMap.get(info.getDestination()).iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,333,Destination dest = (Destination) iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,396,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,412,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,443,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,457,for (Iterator<Subscription> iter = subscriptions.values().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,458,Subscription sub = iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,461,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,462,for (Iterator<Destination> iter = destinations.values().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,463,Destination dest = iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,485,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,486,for (Iterator iter = destinationMap.get(info.getDestination()).iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,487,Destination dest = (Destination) iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,502,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,503,for (Iterator iter = destinationMap.get(info.getDestination()).iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,504,Destination dest = (Destination) iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,80,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,81,for (Iterator<Destination> iter = destinations.values().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,82,Destination dest = iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,141,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,142,for (Iterator<Destination> iter = destinations.values().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,143,Destination dest = iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,145,if (dest instanceof Topic){
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,146,Topic topic = (Topic)dest;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,147,topic.deleteSubscription(context, key);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,203,for (Iterator<DurableTopicSubscription> iterator = durableSubscriptions.values().iterator(); iterator.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,204,DurableTopicSubscription sub = iterator.next();
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,283,Page next;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,284,if (current.getType() == Page.PAGE_PART_TYPE) {
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,285,next = load(current.getNext(), null);
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,287,next = allocate();
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,290,next.txId = current.txId;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,293,int oldPos = pos;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,294,pos = 0;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,296,current.makePagePart(next.getPageId(), getWriteTransactionId());
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,297,current.write(this);
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,300,byte[] data = new byte[pageSize];
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,301,System.arraycopy(buf, 0, data, 0, pageSize);
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,302,Transaction.this.write(current, data);
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,305,pos = 0;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,307,skip(Page.PAGE_HEADER_SIZE);
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,309,System.arraycopy(buf, pageSize, buf, pos, oldPos - pageSize);
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,310,pos += oldPos - pageSize;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,311,current = next;
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/VirtualDestinationInterceptor.java,46,public synchronized Destination intercept(Destination destination) {
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/VirtualDestinationInterceptor.java,47,Set virtualDestinations = destinationMap.get(destination.getActiveMQDestination());
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/VirtualDestinationInterceptor.java,49,for (Iterator iter = virtualDestinations.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,354,if (lc == Byte.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,355,if (rc == Short.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,356,lv = Short.valueOf(((Number)lv).shortValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,358,lv = Integer.valueOf(((Number)lv).intValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,360,lv = Long.valueOf(((Number)lv).longValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,362,lv = new Float(((Number)lv).floatValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,364,lv = new Double(((Number)lv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,366,return Boolean.FALSE;
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,369,if (rc == Integer.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,370,lv = Integer.valueOf(((Number)lv).intValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,372,lv = Long.valueOf(((Number)lv).longValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,374,lv = new Float(((Number)lv).floatValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,376,lv = new Double(((Number)lv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,378,return Boolean.FALSE;
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,381,if (rc == Long.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,382,lv = Long.valueOf(((Number)lv).longValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,384,lv = new Float(((Number)lv).floatValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,386,lv = new Double(((Number)lv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,388,return Boolean.FALSE;
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,391,if (rc == Integer.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,392,rv = Long.valueOf(((Number)rv).longValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,394,lv = new Float(((Number)lv).floatValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,396,lv = new Double(((Number)lv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,398,return Boolean.FALSE;
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,401,if (rc == Integer.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,402,rv = new Float(((Number)rv).floatValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,404,rv = new Float(((Number)rv).floatValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,406,lv = new Double(((Number)lv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,408,return Boolean.FALSE;
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,411,if (rc == Integer.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,412,rv = new Double(((Number)rv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,414,rv = new Double(((Number)rv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,416,rv = new Float(((Number)rv).doubleValue());
activemq-fileserver/src/main/java/org/apache/activemq/util/RestFilter.java,182,out.close();
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,260,return "DurableTopicSubscription-" + getSubscriptionKey() + ", id=" + info.getConsumerId() + ", destinations=" + destinations.size() + ", total=" + enqueueCounter + ", pending="
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1072,+ existingSub.getConsumerInfo()  + ", networkComsumerIds: " + existingSub.getConsumerInfo().getNetworkConsumerIds());
activemq-core/src/main/java/org/apache/activemq/kaha/MapContainer.java,85,boolean containsKey(K key);
activemq-core/src/main/java/org/apache/activemq/kaha/MapContainer.java,93,V get(K key);
activemq-core/src/main/java/org/apache/activemq/kaha/MapContainer.java,99,boolean containsValue(K o);
activemq-core/src/main/java/org/apache/activemq/kaha/MapContainer.java,106,void putAll(Map<K, V> map);
activemq-core/src/main/java/org/apache/activemq/kaha/MapContainer.java,140,V remove(K key);
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,48,private String name;
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,324,private void addChild(T child) {
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,331,private void removeChild(T child) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,416,if (!memoryList.isEmpty()) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,153,return "[PageWrite:"+page.getPageId()+"]";
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,784,if( enablePageCaching ) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,785,pageCache.remove(pageId);
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,879,void removeFromCache(Page page) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,881,pageCache.remove(page.getPageId());
kahadb/src/main/java/org/apache/kahadb/util/LinkedNode.java,200,throw new IllegalArgumentException("This node is already linked to a node");
kahadb/src/main/java/org/apache/kahadb/util/SequenceSet.java,207,Sequence rc = new Sequence(sequence.first, sequence.first+count);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,907,stop();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,556,metadata.producerSequenceIdTracker.rollback(new MessageId(keys.messageId));
activemq-core/src/main/java/org/apache/activemq/util/IdGenerator.java,131,result = id.substring(0, index + 1);
activemq-web/src/main/java/org/apache/activemq/web/SessionPool.java,90,if (session != null) {
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,627,new RuntimeException(e);
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,79,if (broker == null) {
activemq-core/src/main/java/org/apache/activemq/util/BitArray.java,137,dataOut.writeByte((int)bits);
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,318,WRITE_CHECK_TIMER.scheduleAtFixedRate(writeCheckerTask, initialDelayTime,writeCheckTime);
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,319,READ_CHECK_TIMER.scheduleAtFixedRate(readCheckerTask, initialDelayTime,readCheckTime);
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,359,WRITE_CHECK_TIMER.cancel();
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,360,READ_CHECK_TIMER.cancel();
activemq-console/src/main/java/org/apache/activemq/console/command/PurgeCommand.java,87,List messages = JmxMBeansUtil.createMessageQueryFilter(createJmxConnection(), queueName).query(queryAddObjects);
activemq-console/src/main/java/org/apache/activemq/console/command/PurgeCommand.java,88,purgeMessages(queueName, messages);
activemq-console/src/main/java/org/apache/activemq/console/command/PurgeCommand.java,116,public void purgeMessages(ObjectName queue, List messages) throws Exception {
activemq-console/src/main/java/org/apache/activemq/console/command/PurgeCommand.java,117,Object[] param = new Object[1];
activemq-console/src/main/java/org/apache/activemq/console/command/PurgeCommand.java,118,for (Iterator i = messages.iterator(); i.hasNext();) {
activemq-console/src/main/java/org/apache/activemq/console/command/PurgeCommand.java,119,CompositeData msg = (CompositeData)i.next();
activemq-console/src/main/java/org/apache/activemq/console/command/PurgeCommand.java,120,param[0] = "" + msg.get("JMSMessageID");
activemq-console/src/main/java/org/apache/activemq/console/command/PurgeCommand.java,121,context.printInfo("Removing message: " + param[0] + " from queue: " + queue.getKeyProperty("Destination"));
activemq-console/src/main/java/org/apache/activemq/console/command/PurgeCommand.java,122,createJmxConnection().invoke(queue, "removeMessage", param, new String[] {
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationStatistics.java,62,addStatistic("expired", expired);
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,22,import java.lang.reflect.Constructor;
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,30,import java.util.Set;
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,37,import sun.management.ConnectorAddressLink;
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,57,public static String getJVM() {
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,58,return System.getProperty("java.vm.specification.vendor");
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,61,public static boolean isSunJVM() {
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,62,return getJVM().equals("Sun Microsystems Inc.");
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,92,Class monitoredHostClass = Class.forName("sun.jvmstat.monitor.MonitoredHost", true, loader);
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,93,Method getMonitoredHostMethod = monitoredHostClass.getMethod("getMonitoredHost", String.class);
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,94,Object host = getMonitoredHostMethod.invoke(null, (String)null);
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,96,Method activeVmsMethod = host.getClass().getMethod("activeVms", null);
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,97,Set vms = (Set)activeVmsMethod.invoke(host, null);
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,98,for (Object vmid: vms) {
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,99,int pid = ((Integer) vmid).intValue();
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,101,Class vmIdentifierClass = Class.forName("sun.jvmstat.monitor.VmIdentifier", true, loader);
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,102,Constructor vmIdentifierConstructor = vmIdentifierClass.getConstructor(String.class);
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,103,Object vmIdentifier = vmIdentifierConstructor.newInstance(vmid.toString());
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,104,Method getMonitoredVmMethod = host.getClass().getMethod("getMonitoredVm", vmIdentifierClass);
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,105,Object mvm = getMonitoredVmMethod.invoke(host, vmIdentifier);
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,107,Class monitoredVmUtilClass = Class.forName("sun.jvmstat.monitor.MonitoredVmUtil", true, loader);
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,108,Method commandLineMethod = monitoredVmUtilClass.getMethod("commandLine", Class.forName("sun.jvmstat.monitor.MonitoredVm", true, loader));
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,109,String name = (String)commandLineMethod.invoke(null, mvm);
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,110,if (name.contains("run.jar start")) {
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,111,connectingPid = pid;
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,112,jmxUrl = ConnectorAddressLink.importFrom(pid);
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,113,break;
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,120,context.print("Connecting to pid: " + connectingPid);
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,122,context.print("Connecting to JMX URL: " + jmxUrl);
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,160,this.jmxUser = jmxUser;
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,176,this.jmxPassword = jmxPassword;
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,279,String jmxUrl = ConnectorAddressLink.importFrom(pid);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,202,answer.add(OpenTypeSupport.convert(message));
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/AbstractDeadLetterStrategy.java,37,private ActiveMQMessageAudit audit = new ActiveMQMessageAudit();
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/AbstractDeadLetterStrategy.java,43,if (audit.isDuplicate(message)) {
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,72,throw new ServletException("No such attribute 'transportFactory' available in the ServletContext");
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,216,IOExceptionSupport.create(e);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1057,suppress = hasLowerPriority(sub, candidate.getLocalInfo());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,87,protected BrokerService brokerService;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,186,protected Journal journal;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,187,protected Metadata metadata = new Metadata();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,231,private void loadPageFile() throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,232,this.indexLock.writeLock().lock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,233,try {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,234,final PageFile pageFile = getPageFile();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,270,pageFile.flush();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,276,private void startCheckpoint() {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,322,public void open() throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,323,if( opened.compareAndSet(false, true) ) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,325,loadPageFile();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,326,startCheckpoint();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,332,if( lockFile == null ) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,338,while (true) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,343,LOG.info("Database "+lockFileName+" is locked... waiting " + (getDatabaseLockedWaitDelay() / 1000) + " seconds for the database to be unlocked. Reason: " + e);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,374,open();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,375,store(new KahaTraceCommand().setMessage("LOADED " + new Date()));
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,383,public void close() throws IOException, InterruptedException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,384,if( opened.compareAndSet(true, false)) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,385,this.indexLock.writeLock().lock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,386,try {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,387,pageFile.tx().execute(new Transaction.Closure<IOException>() {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,388,public void execute(Transaction tx) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,389,checkpointUpdate(tx, true);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,392,pageFile.unload();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,393,metadata = new Metadata();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,395,this.indexLock.writeLock().unlock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,397,journal.close();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,399,checkpointThread.join();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,401,lockFile.unlock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,402,lockFile=null;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,454,long start = System.currentTimeMillis();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,455,Location producerAuditPosition = recoverProducerAudit();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,456,Location lastIndoubtPosition = getRecoveryPosition();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,458,Location recoveryPosition = minimum(producerAuditPosition, lastIndoubtPosition);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,460,if (recoveryPosition != null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,461,int redoCounter = 0;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,462,LOG.info("Recovering from the journal ...");
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,463,while (recoveryPosition != null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,464,JournalCommand<?> message = load(recoveryPosition);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,465,metadata.lastUpdate = recoveryPosition;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,466,process(message, recoveryPosition, lastIndoubtPosition);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,467,redoCounter++;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,468,recoveryPosition = journal.getNextLocation(recoveryPosition);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,470,long end = System.currentTimeMillis();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,471,LOG.info("Recovery replayed " + redoCounter + " operations from the journal in " + ((end - start) / 1000.0f) + " seconds.");
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,500,private Location minimum(Location producerAuditPosition,
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,502,Location min = null;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,503,if (producerAuditPosition != null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,504,min = producerAuditPosition;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,505,if (lastIndoubtPosition != null && lastIndoubtPosition.compareTo(producerAuditPosition) < 0) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,506,min = lastIndoubtPosition;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,509,min = lastIndoubtPosition;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,511,return min;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,514,private Location recoverProducerAudit() throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,515,if (metadata.producerSequenceIdTrackerLocation != null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,516,KahaProducerAuditCommand audit = (KahaProducerAuditCommand) load(metadata.producerSequenceIdTrackerLocation);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,517,try {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,518,ObjectInputStream objectIn = new ObjectInputStream(audit.getAudit().newInput());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,519,metadata.producerSequenceIdTracker = (ActiveMQMessageAuditNoSync) objectIn.readObject();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,521,IOException ioe = new IOException("Failed to read producerAudit: " + cfe);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,522,ioe.initCause(cfe);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,523,throw ioe;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,525,return journal.getNextLocation(metadata.producerSequenceIdTrackerLocation);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,528,return journal.getNextLocation(null);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,546,protected void matched(Location key, Long value) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,547,matches.add(value);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,566,LOG.info("Rolled back " + undoCounter + " messages from the index in " + ((end - start) / 1000.0f) + " seconds.");
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,668,LOG.info("Detected missing/corrupt journal files.  Dropped " + undoCounter + " messages from the index in " + ((end - start) / 1000.0f) + " seconds.");
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,672,private Location nextRecoveryPosition;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,673,private Location lastRecoveryPosition;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,675,public void incrementalRecover() throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,676,this.indexLock.writeLock().lock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,678,if( nextRecoveryPosition == null ) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,679,if( lastRecoveryPosition==null ) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,680,nextRecoveryPosition = getRecoveryPosition();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,682,nextRecoveryPosition = journal.getNextLocation(lastRecoveryPosition);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,685,while (nextRecoveryPosition != null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,686,lastRecoveryPosition = nextRecoveryPosition;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,687,metadata.lastUpdate = lastRecoveryPosition;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,688,JournalCommand<?> message = load(lastRecoveryPosition);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,689,process(message, lastRecoveryPosition);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,690,nextRecoveryPosition = journal.getNextLocation(lastRecoveryPosition);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,721,long start;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,722,this.indexLock.writeLock().lock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,725,if( !opened.get() ) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,726,return;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,736,long end = System.currentTimeMillis();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,737,if( LOG_SLOW_ACCESS_TIME>0 && end-start > LOG_SLOW_ACCESS_TIME) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,738,LOG.info("Slow KahaDB access: cleanup took "+(end-start));
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,743,public void checkpoint(Callback closure) throws Exception {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,744,this.indexLock.writeLock().lock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,771,if (before != null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,772,before.run();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,784,long end = System.currentTimeMillis();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,785,if( LOG_SLOW_ACCESS_TIME>0 && end-start > LOG_SLOW_ACCESS_TIME) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,786,LOG.info("Slow KahaDB access: Journal append took: "+(start2-start)+" ms, Index update took "+(end-start2)+" ms");
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,789,this.indexLock.writeLock().lock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,791,metadata.lastUpdate = location;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,805,throw ioe;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1010,private final HashSet<Integer> journalFilesBeingReplicated = new HashSet<Integer>();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1180,if( journalFilesBeingReplicated!=null ) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1181,gcCandidateSet.removeAll(journalFilesBeingReplicated);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1192,while( !gcCandidateSet.isEmpty() ) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1193,Integer last = gcCandidateSet.last();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1194,if( last >= firstTxLocation.getDataFileId() ) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1195,gcCandidateSet.remove(last);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1197,break;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1205,if( gcCandidateSet.isEmpty() ) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1206,break;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1213,if( first==null ) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1214,SortedSet<Integer> subset = gcCandidateSet.headSet(second.getDataFileId()+1);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1215,if( !subset.isEmpty() && subset.last() == second.getDataFileId() ) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1216,subset.remove(second.getDataFileId());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1218,return !subset.isEmpty();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1220,SortedSet<Integer> subset = gcCandidateSet.tailSet(first.getDataFileId());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1221,if( !subset.isEmpty() && subset.first() == first.getDataFileId() ) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1222,subset.remove(first.getDataFileId());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1224,return !subset.isEmpty();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1226,SortedSet<Integer> subset = gcCandidateSet.subSet(first.getDataFileId(), second.getDataFileId()+1);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1227,if( !subset.isEmpty() && subset.first() == first.getDataFileId() ) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1228,subset.remove(first.getDataFileId());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1230,if( !subset.isEmpty() && subset.last() == second.getDataFileId() ) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1231,subset.remove(second.getDataFileId());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1233,return !subset.isEmpty();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1238,for (Location l : keys) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1240,if( last != fileId ) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1241,gcCandidateSet.remove(fileId);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1275,LOG.debug("Cleanup removing the data files: "+gcCandidateSet);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1276,journal.removeDataFiles(gcCandidateSet);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1293,return journalFilesBeingReplicated;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1301,private final HashMap<String, StoredDestination> storedDestinations = new HashMap<String, StoredDestination>();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1923,return pageFile;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1926,public Journal getJournal() throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1930,return journal;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1973,public void setBrokerService(BrokerService brokerService) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1974,this.brokerService = brokerService;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2433,IOException ioe = new IOException("Failed to read HashSet<String>: " + cfe);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2434,ioe.initCause(cfe);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2435,throw ioe;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,884,starting = true;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,913,starting = false;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,914,if (pendingStop) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,915,LOG.debug("Calling the delayed stop()");
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,922,synchronized (this) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,923,pendingStop = true;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,924,if (starting) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,925,LOG.debug("stop() called in the middle of start(). Delaying...");
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,926,return;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,955,+ "': ", e);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1263,private void doAsyncSendPacket(Command command) throws JMSException {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1264,try {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1265,this.transport.oneway(command);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1267,throw JMSExceptionSupport.create(e);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1327,throws JMSException {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1328,try {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1329,Response response = (Response) (timeout > 0
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1332,if (response != null && response.isException()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1333,ExceptionResponse er = (ExceptionResponse)response;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1334,if (er.getException() instanceof JMSException) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1335,throw (JMSException)er.getException();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1337,throw JMSExceptionSupport.create(er.getException());
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1340,return response;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1342,throw JMSExceptionSupport.create(e);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1826,LOG.debug("Async client internal exception occurred with no exception listener registered: "
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1858,onAsyncException(error);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1859,if (!closing.get() && !closed.get()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1860,executor.execute(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1861,public void run() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1862,transportFailed(error);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1863,ServiceSupport.dispose(ActiveMQConnection.this.transport);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1864,brokerInfoReceived.countDown();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1865,try {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1866,cleanup();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1868,LOG.warn("Exception during connection cleanup, " + e, e);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1870,for (Iterator<TransportListener> iter = transportListeners
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1871,.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1872,TransportListener listener = iter.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1873,listener.onException(error);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1893,connectionConsumer.clearMessagesInProgress();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2298,public IOException getFirstFailureError() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2299,return firstFailureError;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2302,protected void waitForTransportInterruptionProcessingToComplete() throws InterruptedException {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2303,CountDownLatch cdl = this.transportInterruptionProcessingComplete;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2304,if (cdl != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2313,protected void transportInterruptionProcessingComplete() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2314,CountDownLatch cdl = this.transportInterruptionProcessingComplete;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2315,if (cdl != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2316,cdl.countDown();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2317,try {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2318,signalInterruptionProcessingComplete();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,28,import java.util.LinkedList;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,62,import org.apache.activemq.security.SecurityContext;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,66,import org.apache.activemq.thread.Scheduler;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,354,LinkedList<BrowserDispatch> browserDispatches = new LinkedList<BrowserDispatch>();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,408,pagedInMessagesLock.readLock().lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,409,try{
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,410,BrowserDispatch browserDispatch = new BrowserDispatch(browserSubscription);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,411,browserDispatches.addLast(browserDispatch);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,413,pagedInMessagesLock.readLock().unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1349,BrowserDispatch getNextBrowserDispatch() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1350,pagedInMessagesLock.readLock().lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1351,try{
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1352,if (browserDispatches.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1353,return null;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1355,return browserDispatches.removeFirst();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1357,pagedInMessagesLock.readLock().unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1417,BrowserDispatch pendingBrowserDispatch = getNextBrowserDispatch();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,2077,public void onUsageChanged(Usage usage, int oldPercentUsage, int newPercentUsage) {
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,379,return new ThreadPoolExecutor(0, Integer.MAX_VALUE, 10, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(), factory);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,969,ActiveMQDestination[] dests = excludedDestinations;
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,25,import javax.management.ObjectName;
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,26,import javax.management.QueryExp;
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,115,ObjectName query = new ObjectName("org.apache.activemq:BrokerName=" + brokerName + ",Type=Connection,*");
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,124,+ ",Type=Connection,ConnectorName=" + connectorName + ",*");
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,235,if (context.isFaultTolerant() || context.isNetworkConnection()){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,237,try{
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,238,removeConnection(oldContext, info, new Exception("remove stale client"));
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,240,LOG.warn("Failed to remove stale connection ",e);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,499,|| (producerExchange.getRegion() != null && producerExchange.getRegion().getDestinationMap().get(message.getDestination()) == null)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,800,long expiration=message.getExpiration();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,818,MessageReference node, Subscription subscription){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,819,try{
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,820,if(node!=null){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,821,Message message=node.getMessage();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,822,if(message!=null && node.getRegionDestination()!=null){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,823,DeadLetterStrategy deadLetterStrategy=node
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,824,.getRegionDestination().getDeadLetterStrategy();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,825,if(deadLetterStrategy!=null){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,826,if(deadLetterStrategy.isSendToDeadLetterQueue(message)){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,828,message = message.copy();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,829,stampAsExpired(message);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,830,message.setExpiration(0);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,831,if(!message.isPersistent()){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,832,message.setPersistent(true);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,833,message.setProperty("originalDeliveryMode",
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,840,ActiveMQDestination deadLetterDestination=deadLetterStrategy
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,841,.getDeadLetterQueueFor(message, subscription);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,842,if (context.getBroker()==null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,843,context.setBroker(getRoot());
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,845,BrokerSupport.resendNoCopy(context,message,
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,846,deadLetterDestination);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,849,if (LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,850,LOG.debug("Dead Letter message with no DLQ strategy in place, message id: "
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,857,LOG.warn("Caught an exception sending to DLQ: "+node,e);
kahadb/src/main/java/org/apache/kahadb/index/HashIndex.java,348,LOG.debug("Resizing done.  New bins start at: "+metadata.binPageId);
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,162,diskBound = current;
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,163,current = null;
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,171,return current == null;
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,175,return diskBound == null && current == null;
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,472,private long toOffset(long pageId) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,827,write.setCurrent(value.page, value.current);
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,832,if( canStartWriteBatch() ) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,924,private void writeBatch() throws IOException {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,926,CountDownLatch checkpointLatch;
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,927,ArrayList<PageWrite> batch;
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,928,synchronized( writes ) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,938,if (write.diskBound == null) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,949,try {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,950,if (enableRecoveryFile) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,957,Checksum checksum = new Adler32();
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,958,for (PageWrite w : batch) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,959,try {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,960,checksum.update(w.diskBound, 0, pageSize);
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,962,throw IOExceptionSupport.create(
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,968,if (recoveryPageCount > recoveryFileMaxPageCount) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,969,int t = Math.max(recoveryFileMinPageCount, batch.size());
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,970,recoveryFile.setLength(recoveryFileSizeForPages(t));
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,974,recoveryFile.seek(0);
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,976,recoveryFile.writeLong(nextTxid.get());
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,980,recoveryFile.writeLong(checksum.getValue());
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,982,recoveryFile.writeInt(batch.size());
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,985,recoveryFile.seek(RECOVERY_FILE_HEADER_SIZE);
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,987,for (PageWrite w : batch) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,988,recoveryFile.writeLong(w.page.getPageId());
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,989,recoveryFile.write(w.diskBound, 0, pageSize);
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,992,if (enableDiskSyncs) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,994,recoveryFile.getFD().sync();
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,997,recoveryPageCount = batch.size();
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1000,for (PageWrite w : batch) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1001,writeFile.seek(toOffset(w.page.getPageId()));
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1002,writeFile.write(w.diskBound, 0, pageSize);
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1003,w.done();
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1007,if (enableDiskSyncs) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1008,writeFile.getFD().sync();
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1012,synchronized (writes) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1013,for (PageWrite w : batch) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1016,if (w.isDone()) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1017,writes.remove(w.page.getPageId());
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1022,if( checkpointLatch!=null ) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1023,checkpointLatch.countDown();
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,19,import java.io.DataInputStream;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,20,import java.io.EOFException;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,21,import java.io.IOException;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,22,import java.io.InputStream;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,23,import java.io.OutputStream;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,24,import java.util.HashMap;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,25,import java.util.Iterator;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,26,import java.util.NoSuchElementException;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,29,import org.apache.kahadb.util.ByteSequence;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,30,import org.apache.kahadb.util.DataByteArrayInputStream;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,31,import org.apache.kahadb.util.DataByteArrayOutputStream;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,32,import org.apache.kahadb.util.Marshaller;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,33,import org.apache.kahadb.util.Sequence;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,34,import org.apache.kahadb.util.SequenceSet;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,94,private HashMap<Long, PageWrite> writes=new HashMap<Long, PageWrite>();
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,686,writes.put(key, new PageWrite(page, data));
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,462,indexLock.readLock().lock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,477,indexLock.readLock().unlock();
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,40,import org.apache.activemq.command.MessageId;
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,142,currentCacheSize += 400;
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,470,messageCache.put(send.getMessageId(), send.copy());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,33,import java.util.concurrent.CopyOnWriteArraySet;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,464,if (exclusiveConsumer == null
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,677,if (store != null && message.isPersistent()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1169,Set<MessageReference> set = new CopyOnWriteArraySet<MessageReference>();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1234,Set<MessageReference> set = new CopyOnWriteArraySet<MessageReference>();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1325,Set<QueueMessageReference> set = new CopyOnWriteArraySet<QueueMessageReference>();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1623,final void messageSent(final ConnectionContext context, final Message msg) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1741,if (!pagedInMessages.containsKey(ref.getMessageId())) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,199,synchronized public PList getPList(final String name) throws Exception {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,204,PList result = this.persistentLists.get(name);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,205,if (result == null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,206,final PList pl = new PList(this);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,207,pl.setName(name);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,208,getPageFile().tx().execute(new Transaction.Closure<IOException>() {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,209,public void execute(Transaction tx) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,210,pl.setRootId(tx.allocate().getPageId());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,211,pl.load(tx);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,212,metaData.storedSchedulers.put(tx, name, pl);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,215,result = pl;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,216,this.persistentLists.put(name, pl);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,218,final PList load = result;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,219,getPageFile().tx().execute(new Transaction.Closure<IOException>() {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,220,public void execute(Transaction tx) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,221,load.load(tx);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,225,return result;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,228,synchronized public boolean removePList(final String name) throws Exception {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,230,final PList pl = this.persistentLists.remove(name);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,231,result = pl != null;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,232,if (result) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,233,getPageFile().tx().execute(new Transaction.Closure<IOException>() {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,234,public void execute(Transaction tx) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,235,metaData.storedSchedulers.remove(tx, name);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,236,pl.destroy(tx);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1067,releaseLocks();
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,299,return token != null && token.length() == 1 && token.charAt(0) == '*';
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,360,return super.isFull() || (systemUsage != null && systemUsage.getTempUsage().isFull());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,178,this.store.incrementJournalCount(tx, location);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,213,this.store.incrementJournalCount(tx, location);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,436,this.store.decrementJournalCount(tx, entry.getLocation());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,25,import java.util.HashSet;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,29,import java.util.Set;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,34,import org.slf4j.Logger;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,35,import org.slf4j.LoggerFactory;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,43,import org.apache.kahadb.util.IntegerMarshaller;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,51,public class PListStore extends ServiceSupport {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,84,BTreeIndex<Integer, Integer> journalRC;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,89,this.journalRC = new BTreeIndex<Integer, Integer>(pageFile, tx.allocate().getPageId());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,96,this.journalRC.setKeyMarshaller(IntegerMarshaller.INSTANCE);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,97,this.journalRC.setValueMarshaller(IntegerMarshaller.INSTANCE);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,98,this.journalRC.load(tx);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,113,this.journalRC = new BTreeIndex<Integer, Integer>(pageFile, is.readLong());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,114,this.journalRC.setKeyMarshaller(IntegerMarshaller.INSTANCE);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,115,this.journalRC.setValueMarshaller(IntegerMarshaller.INSTANCE);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,120,os.writeLong(this.journalRC.getPageId());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,311,synchronized void incrementJournalCount(Transaction tx, Location location) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,312,int logId = location.getDataFileId();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,313,Integer val = this.metaData.journalRC.get(tx, logId);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,314,int refCount = val != null ? val.intValue() + 1 : 1;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,315,this.metaData.journalRC.put(tx, logId, refCount);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,319,synchronized void decrementJournalCount(Transaction tx, Location location) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,320,int logId = location.getDataFileId();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,321,if (logId != Location.NOT_SET) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,322,int refCount = this.metaData.journalRC.get(tx, logId);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,323,refCount--;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,324,if (refCount <= 0) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,325,this.metaData.journalRC.remove(tx, logId);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,326,Set<Integer> set = new HashSet<Integer>();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,327,set.add(logId);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,328,this.journal.removeDataFiles(set);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,330,this.metaData.journalRC.put(tx, logId, refCount);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,53,throws SQLException, JMSException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,59,s = c.prepareStatement(statements.getAddMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,60,s.setLong(1, seq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,61,s.setString(2, destinationName);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,62,s.setString(3, messageID);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,63,s.setString(4, " ");
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,66,throw new JMSException("Failed to broker message: " + messageID + " in container.");
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,71,s = c.prepareStatement(statements.getFindMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,72,s.setLong(1, seq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,75,throw new JMSException("Failed to broker message: " + messageID + " in container.");
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,86,s = c.prepareStatement(statements.getUpdateMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,88,s.setLong(2, seq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,91,throw (SQLException)new SQLException("BLOB could not be updated: " + e).initCause(e);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,93,try {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,94,rs.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,97,try {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,98,s.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,104,public byte[] doGetMessage(TransactionContext c, long seq) throws SQLException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,110,s.setLong(1, seq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,130,throw (SQLException)new SQLException("BLOB could not be updated: " + e).initCause(e);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,132,try {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,133,rs.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,136,try {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,137,s.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,785,private static void close(PreparedStatement s) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,792,private static void close(ResultSet rs) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,210,Integer count = redeliveredMessages.get(node.getMessageId());
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,211,if (count != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,212,md.setRedeliveryCounter(count.intValue());
activemq-core/src/main/java/org/apache/activemq/broker/region/NullMessageReference.java,117,throw new RuntimeException("not implemented");
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,35,private final PendingList batchList;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,105,public final void reset() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,188,+ " current node Id: " + node.getMessageId());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,293,Message message = (Message) iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,294,last = message;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,297,message.setRegionDestination(regionDestination);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,298,message.setMemoryUsage(this.getSystemUsage().getMemoryUsage());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,300,message.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,301,return message;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,45,private static final int UNKNOWN = -1;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,53,private int cacheCurrentLowestPriority = UNKNOWN;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,200,final int priority = msg.getPriority();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,201,if (isStarted() && this.prioritizedMessages && immediatePriorityDispatch && !tsp.isCacheEnabled()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,202,if (priority > tsp.getCurrentLowestPriority()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,204,LOG.trace("enabling cache for cursor on high priority message " + priority
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,205,+ ", current lowest: " + tsp.getCurrentLowestPriority());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,207,tsp.setCacheEnabled(true);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,208,cacheCurrentLowestPriority = tsp.getCurrentLowestPriority();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,213,if (LOG.isTraceEnabled()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,214,LOG.trace("disabling/clearing cache for cursor on lower priority message "
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,216,+ " cache lowest: " + cacheCurrentLowestPriority);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,218,tsp.setCacheEnabled(false);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,219,cacheCurrentLowestPriority = UNKNOWN;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,221,tsp.addMessageLast(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,333,cacheCurrentLowestPriority = UNKNOWN;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,41,private int currentLowestPriority;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,56,resetCurrentLowestPriority();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,59,private void resetCurrentLowestPriority() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,60,currentLowestPriority = 9;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,63,public synchronized int getCurrentLowestPriority() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,64,return currentLowestPriority;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,83,if (recovered) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,84,currentLowestPriority = Math.min(currentLowestPriority, message.getPriority());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,103,boolean empty = this.store.isEmpty();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,104,if (empty) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,105,resetCurrentLowestPriority();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,107,return empty;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,110,LOG.error("Failed to get message count", e);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,122,public synchronized void gc() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,123,super.gc();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,124,resetCurrentLowestPriority();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,73,void doDeleteOldMessages(TransactionContext c, boolean isPrioritizedMessages) throws SQLException, IOException;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,104,adapter.doAddMessage(c,sequenceId, messageId, destination, data, message.getExpiration(), message.getPriority());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,337,getAdapter().doDeleteOldMessages(c, false);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,338,getAdapter().doDeleteOldMessages(c, true);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,186,if (delegate.hasSpace()) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,190,lastRecovered.recovered = sequenceId;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,59,private String deleteOldMessagesStatement;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,382,+ " WHERE ( EXPIRATION<>0 AND EXPIRATION<?)"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,383,+ " OR (ID <= "
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,388,+ "        AND " + getFullAckTableName() + ".PRIORITY=" + getFullMessageTableName() + ".PRIORITY )"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,394,public String getDeleteOldMessagesStatement() {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,395,if (deleteOldMessagesStatement == null) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,397,+ " WHERE ( EXPIRATION<>0 AND EXPIRATION<?)"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,398,+ " OR (ID <= "
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,399,+ "     ( SELECT min(" + getFullAckTableName() + ".LAST_ACKED_ID)"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,400,+ "       FROM " + getFullAckTableName() + " WHERE "
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,401,+          getFullAckTableName() + ".CONTAINER="
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,402,+          getFullMessageTableName() + ".CONTAINER )"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,403,+ "   )";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,406,return deleteOldMessagesStatement;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,657,public void setDeleteOldMessagesStatement(String deleteOldMessagesStatment) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,658,this.deleteOldMessagesStatement = deleteOldMessagesStatment;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,661,public void setDeleteOldMessagesStatementWithPriority(String deleteOldMessagesStatmentWithPriority) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,662,this.deleteOldMessagesStatementWithPriority = deleteOldMessagesStatmentWithPriority;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/AxionJDBCAdapter.java,57,statements.setDeleteOldMessagesStatement("DELETE FROM " + statements.getFullMessageTableName() + " WHERE ( EXPIRATION<>0 AND EXPIRATION<?)");
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,542,s.setMaxRows(maxRows);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,742,public void doDeleteOldMessages(TransactionContext c, boolean isPrioritizedMessages) throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,746,if (isPrioritizedMessages) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,747,LOG.debug("Executing SQL: " + this.statements.getDeleteOldMessagesStatementWithPriority());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,748,s = c.getConnection().prepareStatement(this.statements.getDeleteOldMessagesStatementWithPriority());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,750,LOG.debug("Executing SQL: " + this.statements.getDeleteOldMessagesStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,751,s = c.getConnection().prepareStatement(this.statements.getDeleteOldMessagesStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,753,s.setLong(1, System.currentTimeMillis());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,755,LOG.debug("Deleted " + i + " old message(s).");
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,120,ScheduledMessage.AMQ_SCHEDULER_MANAGEMENT_DESTINATION, 0,
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,121,ScheduledMessage.AMQ_SCHEDULER_MANAGEMENT_DESTINATION.length());
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,125,JobScheduler scheduler = getInternalScheduler();
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,126,ActiveMQDestination replyTo = messageSend.getReplyTo();
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,128,String action = (String) messageSend.getProperty(ScheduledMessage.AMQ_SCHEDULER_ACTION);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,130,if (action != null ) {
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,132,Object startTime = messageSend.getProperty(ScheduledMessage.AMQ_SCHEDULER_ACTION_START_TIME);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,133,Object endTime = messageSend.getProperty(ScheduledMessage.AMQ_SCHEDULER_ACTION_END_TIME);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,135,if (replyTo != null && action.equals(ScheduledMessage.AMQ_SCHEDULER_ACTION_BROWSE)) {
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,137,if( startTime != null && endTime != null ) {
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,139,long start = (Long) TypeConversionSupport.convert(startTime, Long.class);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,140,long finish = (Long) TypeConversionSupport.convert(endTime, Long.class);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,142,for (Job job : scheduler.getAllJobs(start, finish)) {
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,143,sendScheduledJob(producerExchange.getConnectionContext(), job, replyTo);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,146,for (Job job : scheduler.getAllJobs()) {
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,147,sendScheduledJob(producerExchange.getConnectionContext(), job, replyTo);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,151,if (jobId != null && action.equals(ScheduledMessage.AMQ_SCHEDULER_ACTION_REMOVE)) {
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,152,scheduler.remove(jobId);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,155,if( startTime != null && endTime != null ) {
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,157,long start = (Long) TypeConversionSupport.convert(startTime, Long.class);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,158,long finish = (Long) TypeConversionSupport.convert(endTime, Long.class);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,160,scheduler.removeAllJobs(start, finish);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,162,scheduler.removeAllJobs();
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,200,Object cronValue = messageSend.getProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,211,new MessageId(this.producerId, this.messageIdGenerator.getNextSequenceId()));
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,257,throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,263,msg.setPersistent(false);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,264,msg.setType(AdvisorySupport.ADIVSORY_MESSAGE_TYPE);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,265,msg.setMessageId(new MessageId(this.producerId, this.messageIdGenerator.getNextSequenceId()));
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,266,msg.setDestination(replyTo);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,267,msg.setResponseRequired(false);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,268,msg.setProducerId(this.producerId);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,271,msg.setProperty("scheduledJobId", job.getJobId());
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,273,final boolean originalFlowControl = context.isProducerFlowControl();
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,274,final ProducerBrokerExchange producerExchange = new ProducerBrokerExchange();
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,275,producerExchange.setConnectionContext(context);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,276,producerExchange.setMutable(true);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,277,producerExchange.setProducerState(new ProducerState(new ProducerInfo()));
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,278,try {
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,279,context.setProducerFlowControl(false);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,280,this.next.send(producerExchange, msg);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,282,context.setProducerFlowControl(originalFlowControl);
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,137,LOG.warn("Network bridge between: " + localURI + " and: " + uri + " was correctly stopped before it was correctly started.");
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,148,return;
activemq-optional/src/main/java/org/apache/activemq/transport/ws/StompSocket.java,92,outbound.sendMessage(WebSocket.SENTINEL_FRAME, command.toString());
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2114,final Map context = MDCHelper.getCopyOfContextMap();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2118,MDCHelper.setContextMap(context);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,946,final Map context = MDCHelper.getCopyOfContextMap();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,951,MDCHelper.setContextMap(context);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,23,import java.util.Map;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,42,import org.apache.activemq.util.MDCHelper;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,212,final Map context = MDCHelper.getCopyOfContextMap();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,218,MDCHelper.setContextMap(context);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,239,final Map context = MDCHelper.getCopyOfContextMap();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,242,MDCHelper.setContextMap(context);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,257,final Map context = MDCHelper.getCopyOfContextMap();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,260,MDCHelper.setContextMap(context);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,391,final Map map = MDCHelper.getCopyOfContextMap();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,395,MDCHelper.setContextMap(map);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,437,final Map map = MDCHelper.getCopyOfContextMap();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,440,MDCHelper.setContextMap(map);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,655,final Map map = MDCHelper.getCopyOfContextMap();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,658,MDCHelper.setContextMap(map);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,684,final Map map = MDCHelper.getCopyOfContextMap();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,687,MDCHelper.setContextMap(map);
activemq-core/src/main/java/org/apache/activemq/thread/DedicatedTaskRunner.java,19,import org.apache.activemq.util.MDCHelper;
activemq-core/src/main/java/org/apache/activemq/thread/DedicatedTaskRunner.java,21,import java.util.Map;
activemq-core/src/main/java/org/apache/activemq/thread/DedicatedTaskRunner.java,38,final Map context = MDCHelper.getCopyOfContextMap();
activemq-core/src/main/java/org/apache/activemq/thread/DedicatedTaskRunner.java,41,MDCHelper.setContextMap(context);
activemq-core/src/main/java/org/apache/activemq/thread/DeterministicTaskRunner.java,19,import org.apache.activemq.util.MDCHelper;
activemq-core/src/main/java/org/apache/activemq/thread/DeterministicTaskRunner.java,20,import org.slf4j.MDC;
activemq-core/src/main/java/org/apache/activemq/thread/DeterministicTaskRunner.java,22,import java.util.Map;
activemq-core/src/main/java/org/apache/activemq/thread/DeterministicTaskRunner.java,42,final Map context = MDCHelper.getCopyOfContextMap();
activemq-core/src/main/java/org/apache/activemq/thread/DeterministicTaskRunner.java,46,if (context != null) {
activemq-core/src/main/java/org/apache/activemq/thread/DeterministicTaskRunner.java,47,MDCHelper.setContextMap(context);
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,19,import org.apache.activemq.util.MDCHelper;
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,21,import java.util.Map;
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,42,final Map context = MDCHelper.getCopyOfContextMap();
activemq-core/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,45,MDCHelper.setContextMap(context);
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,21,import java.util.Map;
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,22,import java.util.concurrent.SynchronousQueue;
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,23,import java.util.concurrent.ThreadFactory;
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,24,import java.util.concurrent.ThreadPoolExecutor;
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,25,import java.util.concurrent.TimeUnit;
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,32,import org.apache.activemq.util.MDCHelper;
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,115,final Map context = MDCHelper.getCopyOfContextMap();
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,119,MDCHelper.setContextMap(context);
activemq-core/src/main/java/org/apache/activemq/util/MDCHelper.java,17,package org.apache.activemq.util;
activemq-core/src/main/java/org/apache/activemq/util/MDCHelper.java,19,import org.slf4j.MDC;
activemq-core/src/main/java/org/apache/activemq/util/MDCHelper.java,21,import java.util.Hashtable;
activemq-core/src/main/java/org/apache/activemq/util/MDCHelper.java,22,import java.util.Map;
activemq-core/src/main/java/org/apache/activemq/util/MDCHelper.java,27,public class MDCHelper {
activemq-core/src/main/java/org/apache/activemq/util/MDCHelper.java,29,public static Map getCopyOfContextMap() {
activemq-core/src/main/java/org/apache/activemq/util/MDCHelper.java,30,Map map = MDC.getCopyOfContextMap();
activemq-core/src/main/java/org/apache/activemq/util/MDCHelper.java,31,if (map == null) {
activemq-core/src/main/java/org/apache/activemq/util/MDCHelper.java,32,map = new Hashtable();
activemq-core/src/main/java/org/apache/activemq/util/MDCHelper.java,34,return map;
activemq-core/src/main/java/org/apache/activemq/util/MDCHelper.java,37,public static void setContextMap(Map map) {
activemq-core/src/main/java/org/apache/activemq/util/MDCHelper.java,38,if (map == null) {
activemq-core/src/main/java/org/apache/activemq/util/MDCHelper.java,39,map = new Hashtable();
activemq-core/src/main/java/org/apache/activemq/util/MDCHelper.java,41,MDC.setContextMap(map);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,31,import java.util.concurrent.ExecutorService;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,32,import java.util.concurrent.Future;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,33,import java.util.concurrent.FutureTask;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,34,import java.util.concurrent.LinkedBlockingQueue;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,35,import java.util.concurrent.Semaphore;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,36,import java.util.concurrent.ThreadFactory;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,37,import java.util.concurrent.ThreadPoolExecutor;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,38,import java.util.concurrent.TimeUnit;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,185,this.queueExecutor = new ThreadPoolExecutor(1, asyncExecutorMaxThreads, 0L, TimeUnit.MILLISECONDS,
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,193,this.topicExecutor = new ThreadPoolExecutor(1, asyncExecutorMaxThreads, 0L, TimeUnit.MILLISECONDS,
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1043,interface StoreTask {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1074,void aquireLocks() {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1087,void releaseLocks() {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1110,releaseLocks();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1148,void aquireLocks() {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1162,void releaseLocks() {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1206,releaseLocks();
activemq-core/src/main/java/org/apache/activemq/transport/udp/UdpTransportFactory.java,63,UdpTransport transport = (UdpTransport) createTransport(location, wf);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/KahaStore.java,502,lock = lockFile.getChannel().tryLock(0, lockFile.getChannel().size(), false);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/ControlFile.java,78,lock = randomAccessFile.getChannel().tryLock(0, randomAccessFile.getChannel().size(), false);
activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/IndexManager.java,191,return indexFile.getChannel().tryLock(0, indexFile.getChannel().size(), false);
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,1097,lock = lockFile.getChannel().tryLock(0, lockFile.getChannel().size(), false);
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,66,lock = readFile.getChannel().tryLock(0, readFile.getChannel().size(), false);
activemq-pool/src/main/java/org/apache/activemq/pool/PooledSession.java,109,if (transactional) {
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,85,return e;
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,108,byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,109,int len = in.read(buffer);
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,110,while (len >= 0) {
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,111,out.write(buffer, 0, len);
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,112,len = in.read(buffer);
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,114,in.close();
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,115,out.close();
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,119,MAX_DIR_NAME_LENGTH = Integer.valueOf(System.getProperty("MaximumDirNameLength","200")).intValue();
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,120,MAX_FILE_NAME_LENGTH = Integer.valueOf(System.getProperty("MaximumFileNameLength","64")).intValue();
activemq-jaas/src/main/java/org/apache/activemq/jaas/TextFileCertificateLoginModule.java,89,try {
activemq-jaas/src/main/java/org/apache/activemq/jaas/TextFileCertificateLoginModule.java,90,java.io.FileInputStream in = new java.io.FileInputStream(usersFile);
activemq-jaas/src/main/java/org/apache/activemq/jaas/TextFileCertificateLoginModule.java,92,in.close();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,67,InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(resource);
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,68,if (in != null) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,69,ByteArrayOutputStream out = new ByteArrayOutputStream();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,70,byte[] buf = new byte[4096];
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,71,int len = in.read(buf);
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,72,while (len >= 0) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,73,out.write(buf, 0, len);
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,74,len = in.read(buf);
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,76,in.close();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,77,out.close();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,78,data = out.toByteArray();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,79,jsCache.put(resource, data);
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,91,DestinationViewMBean destinationViewMBean = iter.next();
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,92,if (name.equals(destinationViewMBean.getName())) {
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,93,return destinationViewMBean;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,147,while (endpointWorkers.size() > 0) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,148,ActiveMQEndpointActivationKey key = endpointWorkers.keySet().iterator().next();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,149,endpointDeactivation(key.getMessageEndpointFactory(), key.getActivationSpec());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,208,ActiveMQEndpointWorker worker = endpointWorkers.remove(key);
activemq-console/src/main/java/org/apache/activemq/console/Main.java,107,app.runTaskClass(tokens);
activemq-console/src/main/java/org/apache/activemq/console/Main.java,108,System.exit(0);
activemq-console/src/main/java/org/apache/activemq/console/Main.java,211,public void runTaskClass(List<String> tokens) throws Throwable {
activemq-console/src/main/java/org/apache/activemq/console/command/ShellCommand.java,89,return -1;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionRequestInfo.java,65,public void configure(ActiveMQConnectionFactory factory) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,45,protected ActiveMQConnectionFactory createConnectionFactory(ActiveMQConnectionRequestInfo connectionRequestInfo) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,46,ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,47,connectionRequestInfo.configure(factory);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,60,public ActiveMQConnection makeConnection(ActiveMQConnectionRequestInfo connectionRequestInfo) throws JMSException{
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,61,return makeConnection(connectionRequestInfo, createConnectionFactory(connectionRequestInfo));
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,121,cf = createConnectionFactory(getInfo());
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,41,private BrokerService brokerService;
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,43,public LocalBrokerFacade(BrokerService brokerService) {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,44,this.brokerService = brokerService;
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,47,public BrokerService getBrokerService() {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,48,return brokerService;
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,50,public String getBrokerName() throws Exception {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,51,return brokerService.getBrokerName();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,53,public Broker getBroker() throws Exception {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,54,return brokerService.getBroker();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,56,public ManagementContext getManagementContext() {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,57,return brokerService.getManagementContext();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,59,public BrokerViewMBean getBrokerAdmin() throws Exception {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,60,return brokerService.getAdminView();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,62,public ManagedRegionBroker getManagedBroker() throws Exception {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,63,BrokerView adminView = brokerService.getAdminView();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,64,if (adminView == null) {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,65,return null;
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,67,return adminView.getBroker();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,71,Set destinations = getManagedBroker().getQueueRegion().getDestinations(destination);
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,72,for (Iterator i = destinations.iterator(); i.hasNext();) {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,73,Destination dest = (Destination) i.next();
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,19,import java.util.ArrayList;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,20,import java.util.Enumeration;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,21,import java.util.HashSet;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,22,import java.util.List;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,23,import java.util.Properties;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,24,import java.util.Set;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,25,import java.util.StringTokenizer;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,99,private final Set queryViews = new HashSet(10);
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,110,List addMBeans = JmxMBeansUtil.queryMBeans(createJmxConnection(), queryAddObjects, queryViews);
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,114,List subMBeans = JmxMBeansUtil.queryMBeans(createJmxConnection(), querySubObjects, queryViews);
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,115,addMBeans.removeAll(subMBeans);
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,118,context.printMBean(JmxMBeansUtil.filterMBeansView(addMBeans, queryViews));
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,19,import java.util.ArrayList;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,20,import java.util.Collection;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,21,import java.util.HashMap;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,22,import java.util.Iterator;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,23,import java.util.List;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,24,import java.util.Map;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,25,import java.util.Set;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,105,newData = data.getClass().newInstance();
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,108,newData = new HashMap<Object, Object>();
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,19,import java.util.Iterator;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,20,import java.util.List;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,21,import java.util.Set;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,23,import javax.management.ObjectName;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,25,import javax.management.remote.JMXServiceURL;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,27,import org.apache.activemq.console.filter.GroupPropertiesViewFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,28,import org.apache.activemq.console.filter.MBeansAttributeQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,29,import org.apache.activemq.console.filter.MBeansObjectNameQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,30,import org.apache.activemq.console.filter.MBeansRegExQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,31,import org.apache.activemq.console.filter.MapTransformFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,32,import org.apache.activemq.console.filter.MessagesQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,33,import org.apache.activemq.console.filter.PropertiesViewFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,34,import org.apache.activemq.console.filter.QueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,35,import org.apache.activemq.console.filter.StubQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,36,import org.apache.activemq.console.filter.WildcardToMsgSelectorTransformFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,37,import org.apache.activemq.console.filter.WildcardToRegExTransformFilter;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,235,throw new ResourceException("Could cleanup the ActiveMQ connection: " + e, e);
activemq-camel/src/main/java/org/apache/activemq/camel/component/ActiveMQConfiguration.java,26,import org.springframework.jms.connection.SingleConnectionFactory;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,33,import org.apache.activemq.ActiveMQQueueSession;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,35,import org.apache.activemq.ActiveMQTopicSession;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,73,return new ServerSessionImpl(this, (ActiveMQSession)session, activeMQAsfEndpointWorker.workManager, endpoint, true, batchSize);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,77,return new ServerSessionImpl(this, (ActiveMQSession)session, activeMQAsfEndpointWorker.workManager, endpoint, false, batchSize);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,223,List l = session.getUnconsumedMessages();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,233,physicalConnection.cleanup();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,125,String clientId = activationSpec.getClientId();
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,19,import java.util.Enumeration;
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,20,import java.util.HashMap;
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,21,import java.util.Map;
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,40,public MessageQuery(BrokerFacade brokerFacade, SessionPool sessionPool) throws JMSException {
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,41,super(brokerFacade, sessionPool);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,24,import org.springframework.beans.factory.DisposableBean;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,31,private SessionPool sessionPool;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,33,private Session session;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,37,public QueueBrowseQuery(BrokerFacade brokerFacade, SessionPool sessionPool) throws JMSException {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,39,this.sessionPool = sessionPool;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,40,this.session = sessionPool.borrowSession();
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,48,sessionPool.returnSession(session);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,49,session = null;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,65,queue = session.createQueue(getValidDestination());
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,82,public Session getSession() {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,83,return session;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,20,import java.io.IOException;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,21,import java.io.PrintWriter;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,22,import java.util.HashMap;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,24,import javax.jms.Destination;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,25,import javax.jms.JMSException;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,26,import javax.jms.Message;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,27,import javax.jms.MessageConsumer;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,28,import javax.jms.ObjectMessage;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,29,import javax.jms.TextMessage;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,30,import javax.servlet.ServletConfig;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,31,import javax.servlet.ServletException;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,32,import javax.servlet.http.HttpServletRequest;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,33,import javax.servlet.http.HttpServletResponse;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,250,String type = getContentType(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,251,if (type != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,252,response.setContentType(type);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,59,private int serverSessionId = getNextLogId();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,60,private final Logger log = LoggerFactory.getLogger(ServerSessionImpl.class.getName() + ":" + serverSessionId);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,255,serverSessionPool.close();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,108,return stale || !session.isRunning();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,162,log.debug("Running");
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,165,log.debug("run loop start");
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,168,if ( session.isRunning() ) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,199,log.debug("Run finished");
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,192,activeSessions.remove(ss);
