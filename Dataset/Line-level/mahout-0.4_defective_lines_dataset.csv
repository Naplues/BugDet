File,Line_number,SRC
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,61,private int slice;
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,68,if (slice >= numSlices()) {
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,71,int i = slice++;
math/src/main/java/org/apache/mahout/math/MatrixVectorView.java,109,return iterator();
math/src/main/java/org/apache/mahout/math/SparseRowMatrix.java,46,true,
math/src/main/java/org/apache/mahout/math/SparseRowMatrix.java,47,randomAccess);
examples/src/main/java/org/apache/mahout/cf/taste/example/bookcrossing/BookCrossingBooleanRecommender.java,57,public List<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer) throws TasteException {
examples/src/main/java/org/apache/mahout/cf/taste/example/bookcrossing/BookCrossingBooleanRecommender.java,58,return recommender.recommend(userID, howMany, rescorer);
examples/src/main/java/org/apache/mahout/cf/taste/example/bookcrossing/BookCrossingRecommender.java,57,return recommender.recommend(userID, howMany, rescorer);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,27,import org.apache.hadoop.mapred.FileInputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,28,import org.apache.hadoop.mapred.FileOutputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,29,import org.apache.hadoop.mapred.JobConf;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,30,import org.apache.hadoop.mapred.MapReduceBase;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,31,import org.apache.hadoop.mapred.Mapper;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,32,import org.apache.hadoop.mapred.OutputCollector;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,33,import org.apache.hadoop.mapred.Reducer;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,34,import org.apache.hadoop.mapred.Reporter;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,35,import org.apache.hadoop.mapred.SequenceFileInputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,36,import org.apache.hadoop.mapred.SequenceFileOutputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,48,import java.util.Iterator;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,64,matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,65,outputVectorPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,66,TimesSquaredMapper.class,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,67,VectorSummingReducer.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,75,outDim,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,76,matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,77,outputVectorPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,78,TimesMapper.class,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,79,VectorSummingReducer.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,98,conf.setJobName("TimesSquaredJob: " + matrixInputPath);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,105,SequenceFile.Writer inputVectorPathWriter = new SequenceFile.Writer(fs,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,106,conf, inputVectorPath, NullWritable.class, VectorWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,108,inputVectorPathWriter.append(NullWritable.get(), inputVW);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,111,DistributedCache.setCacheFiles(new URI[] {ivpURI}, conf);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,117,FileInputFormat.addInputPath(conf, matrixInputPath);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,118,conf.setInputFormat(SequenceFileInputFormat.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,119,FileOutputFormat.setOutputPath(conf, new Path(outputVectorPathBase, OUTPUT_VECTOR_FILENAME));
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,120,conf.setMapperClass(mapClass);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,121,conf.setMapOutputKeyClass(NullWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,122,conf.setMapOutputValueClass(VectorWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,123,conf.setReducerClass(redClass);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,124,conf.setCombinerClass(redClass);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,125,conf.setOutputFormat(SequenceFileOutputFormat.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,126,conf.setOutputKeyClass(NullWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,127,conf.setOutputValueClass(VectorWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,128,return conf;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,134,Path outputFile = new Path(outputPath, "part-00000");
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,145,public static class TimesSquaredMapper<T extends WritableComparable> extends MapReduceBase
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,146,implements Mapper<T,VectorWritable, NullWritable,VectorWritable> {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,153,public void configure(JobConf conf) {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,175,: new DenseVector(outDim);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,182,public void map(T rowNum,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,183,VectorWritable v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,184,OutputCollector<NullWritable,VectorWritable> out,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,185,Reporter rep) throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,200,public void close() throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,208,public void map(IntWritable rowNum,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,209,VectorWritable v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,210,OutputCollector<NullWritable,VectorWritable> out,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,211,Reporter rep) {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,220,public static class VectorSummingReducer extends MapReduceBase
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,221,implements Reducer<NullWritable,VectorWritable,NullWritable,VectorWritable> {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,226,public void configure(JobConf conf) {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,234,public void reduce(NullWritable n,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,235,Iterator<VectorWritable> vectors,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,236,OutputCollector<NullWritable,VectorWritable> out,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,237,Reporter reporter) throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,238,while (vectors.hasNext()) {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,239,VectorWritable v = vectors.next();
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,244,out.collect(NullWritable.get(), new VectorWritable(outputVector));
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,20,import org.apache.hadoop.fs.FileSystem;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,23,import org.apache.hadoop.mapred.FileInputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,24,import org.apache.hadoop.mapred.FileOutputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,25,import org.apache.hadoop.mapred.JobConf;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,26,import org.apache.hadoop.mapred.MapReduceBase;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,27,import org.apache.hadoop.mapred.Mapper;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,28,import org.apache.hadoop.mapred.OutputCollector;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,29,import org.apache.hadoop.mapred.Reducer;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,30,import org.apache.hadoop.mapred.Reporter;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,31,import org.apache.hadoop.mapred.SequenceFileInputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,32,import org.apache.hadoop.mapred.SequenceFileOutputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,35,import org.apache.mahout.math.RandomAccessSparseVector;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,36,import org.apache.mahout.math.SequentialAccessSparseVector;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,37,import org.apache.mahout.math.Vector;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,41,import java.util.Iterator;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,48,public static final String NUM_ROWS_KEY = "SparseRowMatrix.numRows";
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,81,conf.setJobName("TransposeJob: " + matrixInputPath + " transpose -> " + matrixOutputPath);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,83,matrixInputPath = fs.makeQualified(matrixInputPath);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,84,matrixOutputPath = fs.makeQualified(matrixOutputPath);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,85,conf.setInt(NUM_ROWS_KEY, numInputRows);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,87,FileInputFormat.addInputPath(conf, matrixInputPath);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,88,conf.setInputFormat(SequenceFileInputFormat.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,89,FileOutputFormat.setOutputPath(conf, matrixOutputPath);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,90,conf.setMapperClass(TransposeMapper.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,92,conf.setMapOutputKeyClass(IntWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,94,conf.setOutputFormat(SequenceFileOutputFormat.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,95,conf.setOutputKeyClass(IntWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,96,conf.setOutputValueClass(VectorWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,97,return conf;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,100,public static class TransposeMapper extends MapReduceBase
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,110,int row = r.get();
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,115,r.set(e.index());
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,31,public MatrixWritable() {
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,115,public static void writeMatrix(DataOutput out, Matrix matrix) throws IOException {
math/src/main/java/org/apache/mahout/math/SparseMatrix.java,93,result[COL] = Math.max(result[COL], vectorEntry
math/src/main/java/org/apache/mahout/math/SparseMatrix.java,94,.getNumNondefaultElements());
math/src/main/java/org/apache/mahout/math/SparseMatrix.java,61,SparseMatrix clone = (SparseMatrix) super.clone();
core/src/main/java/org/apache/mahout/classifier/sgd/TPrior.java,20,import org.apache.commons.math.special.Gamma;
math/src/main/java/org/apache/mahout/math/SingularValueDecomposition.java,277,if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {
math/src/main/java/org/apache/mahout/math/SingularValueDecomposition.java,291,double t = (ks == p ? 0.0 : Math.abs(e[ks])) + (ks == k + 1 ? 0.0 : Math.abs(e[ks - 1]));
math/src/main/java/org/apache/mahout/math/SingularValueDecomposition.java,292,if (Math.abs(s[ks]) <= eps * t) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,20,import org.apache.mahout.math.list.DoubleArrayList;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,43,private boolean sorted = true;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,46,private DoubleArrayList starter = new DoubleArrayList(100);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,49,private final double[] q = new double[5];
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,59,sorted = false;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,67,if (n < 100) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,68,starter.add(sample);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,71,starter.add(sample);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,72,for (int i = 0; i <= 4; i++) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,73,q[i] = getQuartile(i);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,77,starter = null;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,80,q[0] = Math.min(sample, q[0]);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,81,q[4] = Math.max(sample, q[4]);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,83,double rate = 2 * (q[3] - q[1]) / n;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,84,q[1] += (Math.signum(sample - q[1]) - 0.5) * rate;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,86,q[3] += (Math.signum(sample - q[3]) + 0.5) * rate;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,88,if (q[1] < q[0]) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,89,q[1] = q[0];
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,92,if (q[3] > q[4]) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,93,q[3] = q[4];
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,114,private void sort() {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,115,if (!sorted && starter != null) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,117,sorted = true;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,126,if (n > 100 || starter == null) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,127,return q[i];
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,129,sort();
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,130,switch (i) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,131,case 0:
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,132,if (n == 0) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,133,throw new IllegalArgumentException("Must have at least one sample to estimate minimum value");
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,135,return starter.get(0);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,136,case 1:
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,137,case 2:
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,138,case 3:
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,139,if (n >= 2) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,140,double x = i * (n - 1) / 4.0;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,141,int k = (int) Math.floor(x);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,142,double u = x - k;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,143,return starter.get(k) * (1 - u) + starter.get(k + 1) * u;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,145,throw new IllegalArgumentException("Must have at least two samples to estimate quartiles");
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,147,case 4:
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,148,if (n == 0) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,149,throw new IllegalArgumentException("Must have at least one sample to estimate maximum value");
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,151,return starter.get(starter.size() - 1);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,152,default:
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,153,throw new IllegalArgumentException("Quartile number must be in the range [0..4] not " + i);
core/src/main/java/org/apache/mahout/vectorizer/encoders/InteractionValueEncoder.java,22,import java.util.Arrays;
core/src/main/java/org/apache/mahout/vectorizer/encoders/InteractionValueEncoder.java,23,import java.util.Locale;
core/src/main/java/org/apache/mahout/vectorizer/encoders/InteractionValueEncoder.java,89,trace(String.format("%s:%s", Arrays.toString(originalForm1), Arrays.toString(originalForm2)), n);
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,81,StringBuilder result = new StringBuilder();
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,82,result.append('{');
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,83,Iterator<Element> it = iterateNonZero();
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,84,while (it.hasNext()) {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,85,Element e = it.next();
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,86,result.append(e.index());
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,87,result.append(':');
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,88,result.append(e.get());
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,94,return result.toString();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,120,StringBuilder result = new StringBuilder();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,121,result.append('{');
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,122,Iterator<Element> it = iterateNonZero();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,123,while (it.hasNext()) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,124,Element e = it.next();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,125,result.append(e.index());
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,126,result.append(':');
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,127,result.append(e.get());
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,128,result.append(',');
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,133,return result.toString();
core/src/main/java/org/apache/mahout/classifier/sgd/CsvRecordFactory.java,20,import com.google.common.base.CharMatcher;
core/src/main/java/org/apache/mahout/classifier/sgd/CsvRecordFactory.java,23,import com.google.common.base.Splitter;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,130,if (result.length() > 1) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,131,result.setCharAt(result.length() - 1, '}');
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,65,abuilder.withName("minSupport").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,69,abuilder.withName("analyzerName").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,73,abuilder.withName("chunkSize").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,77,abuilder.withName("weight").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,81,abuilder.withName("minDF").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,90,abuilder.withName("minLLR").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,92,.withShortName("ml").create();
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,95,abuilder.withName("numReducers").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,99,abuilder.withName("norm").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,101,+ "Must be greater or equal to 0.  The default is not to normalize").withShortName("n").create();
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,104,.withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,106,.withShortName("lnorm").create();
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,110,.withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,112,+ " (2 = bigrams, 3 = trigrams, etc) Default Value:1").withShortName("ng").create();
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,115,.withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,117,.withShortName("seq").create();
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,120,.withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,122,.withShortName("nv").create();
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,127,.create();
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,134,.create();
core/src/main/java/org/apache/mahout/math/VectorWritable.java,20,import org.apache.hadoop.conf.Configured;
core/src/main/java/org/apache/mahout/math/VectorWritable.java,21,import org.apache.hadoop.io.Writable;
core/src/main/java/org/apache/mahout/math/VectorWritable.java,23,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/mahout/math/VectorWritable.java,41,public VectorWritable() {
examples/src/main/java/org/apache/mahout/classifier/sgd/LogisticModelParameters.java,120,if (lr != null) {
examples/src/main/java/org/apache/mahout/classifier/sgd/LogisticModelParameters.java,121,lr.close();
examples/src/main/java/org/apache/mahout/classifier/sgd/LogisticModelParameters.java,123,targetCategories = csv.getTargetCategories();
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,169,Path clustersOut = buildClusters(new Configuration(),
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,180,clusterData(input,
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,292,clusterData(input,
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,446,public static void clusterData(Path input,
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyDriver.java,468,clusterDataMR(input, clustersIn, output);
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyDriver.java,539,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelCountingMapper.java,45,for (String item : items) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,504,for (int row = 0; row < size; row++) {
core/src/main/java/org/apache/mahout/common/TimingStatistics.java,81,return '\n' + "nCalls = " + nCalls + ";\n" + "sum = " + sumTime / 1000000000.0 + "s;\n"
core/src/main/java/org/apache/mahout/common/TimingStatistics.java,82,+ "min = " + minTime / 1000000.0 + "ms;\n" + "max = " + maxTime / 1000000.0 + "ms;\n"
core/src/main/java/org/apache/mahout/common/TimingStatistics.java,84,/ 1000000.0 + "ms;";
core/src/main/java/org/apache/mahout/common/TimingStatistics.java,91,public final class Call {
core/src/main/java/org/apache/mahout/common/TimingStatistics.java,92,private final long startTime = System.nanoTime();
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java,292,for (int i = 0; i < length - 1; i++) {
core/src/main/java/org/apache/mahout/cf/taste/impl/common/RefreshHelper.java,22,import java.util.HashSet;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,24,import java.util.HashSet;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPGrowth.java,26,import java.util.HashSet;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FrequentPatternMaxHeap.java,20,import java.util.HashSet;
examples/src/main/java/org/apache/mahout/clustering/minhash/LastfmClusterEvaluator.java,26,import java.util.HashSet;
examples/src/main/java/org/apache/mahout/fpm/pfpgrowth/dataset/KeyBasedStringTupleCombiner.java,21,import java.util.HashSet;
examples/src/main/java/org/apache/mahout/fpm/pfpgrowth/dataset/KeyBasedStringTupleReducer.java,22,import java.util.HashSet;
core/src/main/java/org/apache/mahout/clustering/kmeans/RandomSeedGenerator.java,96,int indexToRemove = random.nextInt(currentSize); // evict one chosen randomly
core/src/main/java/org/apache/mahout/clustering/kmeans/RandomSeedGenerator.java,97,chosenTexts.remove(indexToRemove);
core/src/main/java/org/apache/mahout/clustering/kmeans/RandomSeedGenerator.java,98,chosenClusters.remove(indexToRemove);
core/src/main/java/org/apache/mahout/clustering/kmeans/RandomSeedGenerator.java,99,chosenTexts.add(newText);
core/src/main/java/org/apache/mahout/classifier/sgd/CrossFoldLearner.java,123,if (k == trackingKey % models.size()) {
core/src/main/java/org/apache/mahout/vectorizer/common/PartialVectorMergeReducer.java,70,VectorWritable vectorWritable = new VectorWritable(vector);
core/src/main/java/org/apache/mahout/vectorizer/common/PartialVectorMergeReducer.java,71,context.write(key, vectorWritable);
math/src/main/java/org/apache/mahout/math/MatrixVectorView.java,159,int[] offset = {row, column};
math/src/main/java/org/apache/mahout/math/MatrixVectorView.java,160,int[] size = {rowStride == 0 ? 1 : rowStride, columnStride == 0 ? 1 : columnStride};
math/src/main/java/org/apache/mahout/math/MatrixVectorView.java,161,return matrix.viewPart(offset, size);
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,267,StringBuilder buf = new StringBuilder();
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,269,buf.append(((NamedVector) v).getName()).append(" = ");
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,271,int nzero = 0;
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,272,Iterator<Vector.Element> iterateNonZero = v.iterateNonZero();
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,273,while (iterateNonZero.hasNext()) {
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,274,iterateNonZero.next();
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,275,nzero++;
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,279,buf.append('[');
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,280,for (int i = 0; i < v.size(); i++) {
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,281,double elem = v.get(i);
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,282,if (elem == 0.0) {
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,283,continue;
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,285,String label;
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,287,buf.append(label).append(':');
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,289,buf.append(i).append(':');
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,291,buf.append(String.format(Locale.ENGLISH, "%.3f", elem)).append(", ");
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,294,buf.append('[');
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,295,for (int i = 0; i < v.size(); i++) {
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,296,double elem = v.get(i);
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,297,buf.append(String.format(Locale.ENGLISH, "%.3f", elem)).append(", ");
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,300,if (buf.length() > 1) {
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,301,buf.setLength(buf.length() - 2);
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,303,buf.append(']');
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,304,return buf.toString();
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,46,public class QRDecomposition {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,49,private final Matrix qr;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,52,private final int originalRows;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,53,private final int originalColumns;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,56,private final Vector rDiag;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,69,qr = a.clone();
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,70,originalRows = a.numRows();
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,71,originalColumns = a.numCols();
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,72,rDiag = new DenseVector(originalColumns);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,75,Vector[] QRcolumnsPart = new Vector[originalColumns];
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,76,for (int k = 0; k < originalColumns; k++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,77,QRcolumnsPart[k] = qr.viewColumn(k).viewPart(k, originalRows - k);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,81,for (int k = 0; k < originalColumns; k++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,84,double nrm = 0;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,87,for (int i = k; i < originalRows; i++) { // fixes bug reported by hong.44@osu.edu
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,88,nrm = Algebra.hypot(nrm, qr.getQuick(i, k));
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,92,if (nrm != 0.0) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,94,if (qr.getQuick(k, k) < 0) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,95,nrm = -nrm;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,97,QRcolumnsPart[k].assign(Functions.div(nrm));
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,99,for (int i = k; i < m; i++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,100,QR[i][k] /= nrm;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,104,qr.setQuick(k, k, qr.getQuick(k, k) + 1);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,107,for (int j = k + 1; j < originalColumns; j++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,108,Vector QRcolj = qr.viewColumn(j).viewPart(k, originalRows - k);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,109,double s = QRcolumnsPart[k].dot(QRcolj);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,112,DoubleMatrix1D QRcolj = QR.viewColumn(j).viewPart(k,m-k);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,113,double s = QRcolumnsPart[k].zDotProduct(QRcolumns[j]);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,114,double s = 0.0;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,115,for (int i = k; i < m; i++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,116,s += QR[i][k]*QR[i][j];
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,119,s = -s / qr.getQuick(k, k);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,122,for (int i = k; i < originalRows; i++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,123,qr.setQuick(i, j, qr.getQuick(i, j) + s * qr.getQuick(i, k));
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,128,rDiag.setQuick(k, -nrm);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,157,int columns = Math.min(originalColumns, originalRows);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,158,Matrix q = qr.like(originalRows, columns);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,159,for (int k = columns - 1; k >= 0; k--) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,160,Vector QRcolk = qr.viewColumn(k).viewPart(k, originalRows - k);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,161,q.set(k, k, 1);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,162,for (int j = k; j < columns; j++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,163,if (qr.get(k, k) != 0) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,164,Vector Qcolj = q.viewColumn(j).viewPart(k, originalRows - k);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,165,double s = -QRcolk.dot(Qcolj) / qr.get(k, k);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,166,Qcolj.assign(QRcolk, Functions.plusMult(s));
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,179,int rows = Math.min(originalRows, originalColumns);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,180,Matrix r = qr.like(rows, originalColumns);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,181,for (int i = 0; i < rows; i++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,182,for (int j = 0; j < originalColumns; j++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,183,if (i < j) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,184,r.setQuick(i, j, qr.getQuick(i, j));
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,186,r.setQuick(i, j, rDiag.getQuick(i));
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,188,r.setQuick(i, j, 0);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,201,for (int j = 0; j < originalColumns; j++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,202,if (rDiag.getQuick(j) == 0) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,203,return false;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,206,return true;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,217,if (B.numRows() != originalRows) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,221,int columns = B.numCols();
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,222,Matrix x = B.like(originalColumns, columns);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,231,for (int k = Math.min(originalColumns, originalRows) - 1; k >= 0; k--) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,237,for (int c = 0; c < columns; c++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,248,return String.format(Locale.ENGLISH, "QR(%d,%d,fullRank=%s)", originalColumns, originalRows, hasFullRank());
core/src/main/java/org/apache/mahout/classifier/naivebayes/AbstractNaiveBayesClassifier.java,60,return score;
core/src/main/java/org/apache/mahout/common/IntPairWritable.java,35,implements WritableComparable<BinaryComparable>, Serializable, Cloneable {
core/src/main/java/org/apache/mahout/common/IntPairWritable.java,149,public static final class Comparator extends WritableComparator implements Serializable {
core/src/main/java/org/apache/mahout/math/VarLongWritable.java,26,public class VarLongWritable implements WritableComparable<VarLongWritable>, Cloneable {
core/src/main/java/org/apache/mahout/math/VarLongWritable.java,61,public VarLongWritable clone() {
core/src/main/java/org/apache/mahout/math/VarLongWritable.java,62,return new VarLongWritable(value);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/GramKeyGroupComparator.java,23,import java.io.Serializable;
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/GramKeyGroupComparator.java,28,class GramKeyGroupComparator extends WritableComparator implements Serializable {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/TreeClusteringRecommender2.java,363,if (similarity > queue.get(queue.size() - 1).getSimilarity()) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,279,element.advanceIndex();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,280,return element;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,321,if (index > values.getIndices()[nextOffset]) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,331,if (index == values.getIndices()[nextOffset]) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,334,return OrderedIntDoubleMapping.DEFAULT_VALUE;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,343,if (index == values.getIndices()[nextOffset]) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,120,public double dotSelf() {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,122,Iterator<Element> iter = iterateNonZero();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,123,while (iter.hasNext()) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,124,double value = iter.next().get();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,173,public Vector logNormalize(double power, double normLength) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,242,return lengthSquared + v.getLengthSquared() - 2 * this.dot(v);
math/src/main/java/org/apache/mahout/math/AbstractVector.java,244,Vector randomlyAccessed;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,247,if (lengthSquared >= 0.0) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,249,randomlyAccessed = this;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,253,randomlyAccessed = v;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,256,while (it.hasNext()) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,257,Element e = it.next();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,258,double value = e.get();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,525,return size;
math/src/main/java/org/apache/mahout/math/DenseVector.java,96,public double dotSelf() {
math/src/main/java/org/apache/mahout/math/DenseVector.java,115,lengthSquared = -1.0;
math/src/main/java/org/apache/mahout/math/DenseVector.java,121,this.lengthSquared = -1;
math/src/main/java/org/apache/mahout/math/DenseVector.java,143,lengthSquared = -1;
math/src/main/java/org/apache/mahout/math/DenseVector.java,183,public double getLengthSquared() {
math/src/main/java/org/apache/mahout/math/DenseVector.java,184,if (lengthSquared >= 0.0) {
math/src/main/java/org/apache/mahout/math/DenseVector.java,185,return lengthSquared;
math/src/main/java/org/apache/mahout/math/DenseVector.java,188,double result = 0.0;
math/src/main/java/org/apache/mahout/math/DenseVector.java,189,for (double value : values) {
math/src/main/java/org/apache/mahout/math/DenseVector.java,190,result += value * value;
math/src/main/java/org/apache/mahout/math/DenseVector.java,193,lengthSquared = result;
math/src/main/java/org/apache/mahout/math/DenseVector.java,194,return result;
math/src/main/java/org/apache/mahout/math/DenseVector.java,321,lengthSquared = -1;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,130,lengthSquared = -1.0;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,276,lengthSquared = -1;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,155,lengthSquared = -1;
math/src/main/java/org/apache/mahout/math/MatrixView.java,93,if (offset[ROW] < ROW) {
math/src/main/java/org/apache/mahout/math/MatrixView.java,94,throw new IndexException(offset[ROW], ROW);
math/src/main/java/org/apache/mahout/math/MatrixView.java,99,if (offset[COL] < ROW) {
math/src/main/java/org/apache/mahout/math/MatrixView.java,100,throw new IndexException(offset[COL], ROW);
math/src/main/java/org/apache/mahout/math/MatrixView.java,105,int[] origin = offset.clone();
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,47,new GenericOptionsParser(new Configuration(), ops, new String[0]);
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,48,org.apache.commons.cli.HelpFormatter fmt = new org.apache.commons.cli.HelpFormatter();
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,49,fmt.printHelp("<command> [Generic Options] [Job-Specific Options]",
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,56,formatter.printHelp();
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,58,formatter.printFooter();
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,60,pw.flush();
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,65,new GenericOptionsParser(new Configuration(), ops, new String[0]);
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,66,org.apache.commons.cli.HelpFormatter fmt = new org.apache.commons.cli.HelpFormatter();
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,67,fmt.printHelp("<command> [Generic Options] [Job-Specific Options]",
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,76,pw.flush();
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,56,private Job() {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,166,ClusterDumper clusterDumper =
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,167,new ClusterDumper(new Path(output, "clusters-" + maxIterations), new Path(output, "clusteredPoints"));
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,211,private static void printClusters(Iterable<List<DirichletCluster>> clusters, int significant) {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,212,int row = 0;
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,213,StringBuilder result = new StringBuilder(100);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,214,for (List<DirichletCluster> r : clusters) {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,215,result.append("sample=").append(row++).append("]= ");
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,216,for (int k = 0; k < r.size(); k++) {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,217,Model<VectorWritable> model = r.get(k).getModel();
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,218,if (model.count() > significant) {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,219,int total = (int) r.get(k).getTotalCount();
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,220,result.append('m').append(k).append('(').append(total).append(')').append(model).append(", ");
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,223,result.append('\n');
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,225,result.append('\n');
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,226,log.info(result.toString());
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,20,import java.io.IOException;
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,26,import org.apache.hadoop.fs.FileSystem;
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,29,import org.apache.mahout.clustering.Cluster;
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,50,private Job() {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,116,FileSystem fs = FileSystem.get(conf);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,117,for (int i = maxIterations; i >= 0; i--) {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,118,Path clusters = new Path(output, "clusters-" + i);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,119,if (fs.exists(clusters)) {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,120,return clusters;
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,123,return null;
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,20,import java.io.IOException;
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,24,import org.apache.hadoop.fs.FileSystem;
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,47,private Job() {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,156,FileSystem fs = FileSystem.get(conf);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,157,for (int i = maxIterations; i >= 0; i--) {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,158,Path clusters = new Path(output, "clusters-" + i);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,159,if (fs.exists(clusters)) {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,160,return clusters;
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,163,return null;
core/src/main/java/org/apache/mahout/common/distance/CosineDistanceMeasure.java,90,double lengthSquaredv =  v.getLengthSquared();
core/src/main/java/org/apache/mahout/classifier/naivebayes/ComplementaryNaiveBayesClassifier.java,25,public class ComplementaryNaiveBayesClassifier extends AbstractNaiveBayesClassifier {
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,34,import org.apache.mahout.math.matrix.DoubleMatrix1D;
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,35,import org.apache.mahout.math.matrix.DoubleMatrix2D;
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,37,import org.apache.mahout.math.matrix.linalg.EigenvalueDecomposition;
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,148,EigenvalueDecomposition decomp = new EigenvalueDecomposition(triDiag);
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,150,DoubleMatrix2D eigenVects = decomp.getV();
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,151,DoubleMatrix1D eigenVals = decomp.getRealEigenvalues();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,2,Copyright � 1999 CERN - European Organization for Nuclear Research.
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,3,Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,4,is hereby granted without fee, provided that the above copyright notice appear in all copies and
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,5,that both that copyright notice and this permission notice appear in supporting documentation.
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,6,CERN makes no representations about the suitability of this software for any purpose.
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,7,It is provided "as is" without expressed or implied warranty.
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,9,package org.apache.mahout.math.matrix.linalg;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,13,import org.apache.mahout.math.matrix.DoubleMatrix1D;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,14,import org.apache.mahout.math.matrix.DoubleMatrix2D;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,16,import java.io.Serializable;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,25,private final int n;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,28,private final double[] d;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,29,private final double[] e;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,32,private final double[][] V;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,35,private double[][] H;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,38,private double[] ort;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,57,d = new double[n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,58,e = new double[n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,70,tred2();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,73,tql2();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,76,H = new double[n][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,77,ort = new double[n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,79,for (int j = 0; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,80,for (int i = 0; i < n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,86,orthes();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,89,hqr2();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,93,private void cdiv(double xr, double xi, double yr, double yi) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,94,double r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,95,double d;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,96,if (Math.abs(yr) > Math.abs(yi)) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,97,r = yi / yr;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,98,d = yr + r * yi;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,99,cdivr = (xr + r * xi) / d;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,100,cdivi = (xi - r * xr) / d;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,102,r = yr / yi;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,103,d = yi + r * yr;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,104,cdivr = (r * xr + xi) / d;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,105,cdivi = (r * xi - xr) / d;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,114,public DoubleMatrix2D getD() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,115,double[][] D = new double[n][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,116,for (int i = 0; i < n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,117,for (int j = 0; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,118,D[i][j] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,120,D[i][i] = d[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,121,if (e[i] > 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,122,D[i][i + 1] = e[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,124,D[i][i - 1] = e[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,135,public DoubleMatrix1D getImagEigenvalues() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,144,public DoubleMatrix1D getRealEigenvalues() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,153,public DoubleMatrix2D getV() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,158,private void hqr2() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,166,int nn = this.n;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,167,int n = nn - 1;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,168,int low = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,169,int high = nn - 1;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,170,double eps = Math.pow(2.0, -52.0);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,174,double norm = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,175,for (int i = 0; i < nn; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,176,if (i < low || i > high) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,177,d[i] = H[i][i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,178,e[i] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,180,for (int j = Math.max(i - 1, 0); j < nn; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,181,norm += Math.abs(H[i][j]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,187,int iter = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,188,double y;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,189,double x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,190,double w;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,191,double z = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,192,double s = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,193,double r = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,194,double q = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,195,double p = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,196,double exshift = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,197,while (n >= low) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,201,int l = n;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,202,while (l > low) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,203,s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,204,if (s == 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,205,s = norm;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,207,if (Math.abs(H[l][l - 1]) < eps * s) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,208,break;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,210,l--;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,216,if (l == n) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,217,H[n][n] += exshift;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,218,d[n] = H[n][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,219,e[n] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,220,n--;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,221,iter = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,226,w = H[n][n - 1] * H[n - 1][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,227,p = (H[n - 1][n - 1] - H[n][n]) / 2.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,228,q = p * p + w;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,229,z = Math.sqrt(Math.abs(q));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,230,H[n][n] += exshift;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,231,H[n - 1][n - 1] += exshift;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,232,x = H[n][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,236,if (q >= 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,237,if (p >= 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,238,z = p + z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,240,z = p - z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,242,d[n - 1] = x + z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,243,d[n] = d[n - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,244,if (z != 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,245,d[n] = x - w / z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,247,e[n - 1] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,248,e[n] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,249,x = H[n][n - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,250,s = Math.abs(x) + Math.abs(z);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,251,p = x / s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,252,q = z / s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,253,r = Math.sqrt(p * p + q * q);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,254,p /= r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,255,q /= r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,259,for (int j = n - 1; j < nn; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,260,z = H[n - 1][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,261,H[n - 1][j] = q * z + p * H[n][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,262,H[n][j] = q * H[n][j] - p * z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,267,for (int i = 0; i <= n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,268,z = H[i][n - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,269,H[i][n - 1] = q * z + p * H[i][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,270,H[i][n] = q * H[i][n] - p * z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,275,for (int i = low; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,276,z = V[i][n - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,277,V[i][n - 1] = q * z + p * V[i][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,278,V[i][n] = q * V[i][n] - p * z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,284,d[n - 1] = x + p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,285,d[n] = x + p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,286,e[n - 1] = z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,287,e[n] = -z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,289,n -= 2;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,290,iter = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,298,x = H[n][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,299,y = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,300,w = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,301,if (l < n) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,302,y = H[n - 1][n - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,303,w = H[n][n - 1] * H[n - 1][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,308,if (iter == 10) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,309,exshift += x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,310,for (int i = low; i <= n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,311,H[i][i] -= x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,313,s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,314,x = y = 0.75 * s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,315,w = -0.4375 * s * s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,320,if (iter == 30) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,321,s = (y - x) / 2.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,322,s = s * s + w;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,323,if (s > 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,324,s = Math.sqrt(s);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,325,if (y < x) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,326,s = -s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,328,s = x - w / ((y - x) / 2.0 + s);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,329,for (int i = low; i <= n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,330,H[i][i] -= s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,332,exshift += s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,333,x = y = w = 0.964;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,341,int m = n - 2;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,342,while (m >= l) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,343,z = H[m][m];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,344,r = x - z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,345,s = y - z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,346,p = (r * s - w) / H[m + 1][m] + H[m][m + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,347,q = H[m + 1][m + 1] - z - r - s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,348,r = H[m + 2][m + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,349,s = Math.abs(p) + Math.abs(q) + Math.abs(r);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,350,p /= s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,351,q /= s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,352,r /= s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,353,if (m == l) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,354,break;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,358,break;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,360,m--;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,363,for (int i = m + 2; i <= n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,364,H[i][i - 2] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,365,if (i > m + 2) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,366,H[i][i - 3] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,372,for (int k = m; k <= n - 1; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,373,boolean notlast = k != n - 1;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,374,if (k != m) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,375,p = H[k][k - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,376,q = H[k + 1][k - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,377,r = notlast ? H[k + 2][k - 1] : 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,378,x = Math.abs(p) + Math.abs(q) + Math.abs(r);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,379,if (x != 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,380,p /= x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,381,q /= x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,382,r /= x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,385,if (x == 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,386,break;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,388,s = Math.sqrt(p * p + q * q + r * r);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,389,if (p < 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,390,s = -s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,392,if (s != 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,393,if (k != m) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,394,H[k][k - 1] = -s * x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,396,H[k][k - 1] = -H[k][k - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,398,p += s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,399,x = p / s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,400,y = q / s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,401,z = r / s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,402,q /= p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,403,r /= p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,407,for (int j = k; j < nn; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,408,p = H[k][j] + q * H[k + 1][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,409,if (notlast) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,410,p += r * H[k + 2][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,411,H[k + 2][j] -= p * z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,413,H[k][j] -= p * x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,414,H[k + 1][j] -= p * y;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,419,for (int i = 0; i <= Math.min(n, k + 3); i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,420,p = x * H[i][k] + y * H[i][k + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,421,if (notlast) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,422,p += z * H[i][k + 2];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,423,H[i][k + 2] -= p * r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,425,H[i][k] -= p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,426,H[i][k + 1] -= p * q;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,431,for (int i = low; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,432,p = x * V[i][k] + y * V[i][k + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,433,if (notlast) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,434,p += z * V[i][k + 2];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,435,V[i][k + 2] -= p * r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,437,V[i][k] -= p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,438,V[i][k + 1] -= p * q;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,447,if (norm == 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,448,return;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,451,for (n = nn - 1; n >= 0; n--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,452,p = d[n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,453,q = e[n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,457,double t;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,458,if (q == 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,459,int l = n;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,460,H[n][n] = 1.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,461,for (int i = n - 1; i >= 0; i--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,462,w = H[i][i] - p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,463,r = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,464,for (int j = l; j <= n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,465,r += H[i][j] * H[j][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,467,if (e[i] < 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,468,z = w;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,469,s = r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,471,l = i;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,472,if (e[i] == 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,473,if (w != 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,474,H[i][n] = -r / w;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,476,H[i][n] = -r / (eps * norm);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,482,x = H[i][i + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,483,y = H[i + 1][i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,484,q = (d[i] - p) * (d[i] - p) + e[i] * e[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,485,t = (x * s - z * r) / q;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,486,H[i][n] = t;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,487,if (Math.abs(x) > Math.abs(z)) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,488,H[i + 1][n] = (-r - w * t) / x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,490,H[i + 1][n] = (-s - y * t) / z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,496,t = Math.abs(H[i][n]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,498,for (int j = i; j <= n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,499,H[j][n] /= t;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,508,int l = n - 1;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,512,if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,513,H[n - 1][n - 1] = q / H[n][n - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,514,H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,516,cdiv(0.0, -H[n - 1][n], H[n - 1][n - 1] - p, q);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,517,H[n - 1][n - 1] = cdivr;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,518,H[n - 1][n] = cdivi;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,520,H[n][n - 1] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,521,H[n][n] = 1.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,522,for (int i = n - 2; i >= 0; i--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,523,double ra = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,524,double sa = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,525,for (int j = l; j <= n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,526,ra += H[i][j] * H[j][n - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,527,sa += H[i][j] * H[j][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,529,w = H[i][i] - p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,531,if (e[i] < 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,532,z = w;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,533,r = ra;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,534,s = sa;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,536,l = i;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,537,if (e[i] == 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,538,cdiv(-ra, -sa, w, q);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,539,H[i][n - 1] = cdivr;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,540,H[i][n] = cdivi;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,545,x = H[i][i + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,546,y = H[i + 1][i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,547,double vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,548,double vi = (d[i] - p) * 2.0 * q;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,549,if (vr == 0.0 && vi == 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,550,vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,552,cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,553,H[i][n - 1] = cdivr;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,554,H[i][n] = cdivi;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,556,H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,557,H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,559,cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,560,H[i + 1][n - 1] = cdivr;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,561,H[i + 1][n] = cdivi;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,567,t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,569,for (int j = i; j <= n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,570,H[j][n - 1] /= t;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,571,H[j][n] /= t;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,581,for (int i = 0; i < nn; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,582,if (i < low || i > high) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,583,System.arraycopy(H[i], i, V[i], i, nn - i);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,589,for (int j = nn - 1; j >= low; j--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,590,for (int i = low; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,591,z = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,592,for (int k = low; k <= Math.min(j, high); k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,593,z += V[i][k] * H[k][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,595,V[i][j] = z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,601,private void orthes() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,607,int low = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,608,int high = n - 1;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,610,for (int m = low + 1; m <= high - 1; m++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,614,double scale = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,615,for (int i = m; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,616,scale += Math.abs(H[i][m - 1]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,618,if (scale != 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,622,double h = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,623,for (int i = high; i >= m; i--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,624,ort[i] = H[i][m - 1] / scale;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,625,h += ort[i] * ort[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,627,double g = Math.sqrt(h);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,628,if (ort[m] > 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,629,g = -g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,631,h -= ort[m] * g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,632,ort[m] -= g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,637,for (int j = m; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,638,double f = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,639,for (int i = high; i >= m; i--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,640,f += ort[i] * H[i][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,642,f /= h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,643,for (int i = m; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,644,H[i][j] -= f * ort[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,648,for (int i = 0; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,649,double f = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,650,for (int j = high; j >= m; j--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,651,f += ort[j] * H[i][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,653,f /= h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,654,for (int j = m; j <= high; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,655,H[i][j] -= f * ort[j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,658,ort[m] = scale * ort[m];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,659,H[m][m - 1] = scale * g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,665,for (int i = 0; i < n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,666,for (int j = 0; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,667,V[i][j] = i == j ? 1.0 : 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,671,for (int m = high - 1; m >= low + 1; m--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,672,if (H[m][m - 1] != 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,673,for (int i = m + 1; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,674,ort[i] = H[i][m - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,676,for (int j = m; j <= high; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,677,double g = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,678,for (int i = m; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,679,g += ort[i] * V[i][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,683,for (int i = m; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,684,V[i][j] += g * ort[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,699,public String toString() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,700,StringBuilder buf = new StringBuilder();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,702,buf.append("---------------------------------------------------------------------\n");
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,703,buf.append("EigenvalueDecomposition(A) --> D, V, realEigenvalues, imagEigenvalues\n");
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,704,buf.append("---------------------------------------------------------------------\n");
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,706,buf.append("realEigenvalues = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,707,String unknown = "Illegal operation or error: ";
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,708,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,709,buf.append(String.valueOf(this.getRealEigenvalues()));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,711,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,714,buf.append("\nimagEigenvalues = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,715,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,716,buf.append(String.valueOf(this.getImagEigenvalues()));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,718,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,721,buf.append("\n\nD = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,722,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,723,buf.append(String.valueOf(this.getD()));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,725,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,728,buf.append("\n\nV = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,729,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,730,buf.append(String.valueOf(this.getV()));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,732,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,735,return buf.toString();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,739,private void tql2() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,746,System.arraycopy(e, 1, e, 0, n - 1);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,747,e[n - 1] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,749,double f = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,750,double tst1 = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,751,double eps = Math.pow(2.0, -52.0);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,752,for (int l = 0; l < n; l++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,756,tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,757,int m = l;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,758,while (m < n) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,759,if (Math.abs(e[m]) <= eps * tst1) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,760,break;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,762,m++;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,768,if (m > l) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,769,int iter = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,770,do {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,775,double g = d[l];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,776,double p = (d[l + 1] - g) / (2.0 * e[l]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,778,if (p < 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,779,r = -r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,781,d[l] = e[l] / (p + r);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,782,d[l + 1] = e[l] * (p + r);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,783,double dl1 = d[l + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,784,double h = g - d[l];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,785,for (int i = l + 2; i < n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,786,d[i] -= h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,788,f += h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,792,p = d[m];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,793,double c = 1.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,794,double c2 = c;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,795,double c3 = c;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,796,double el1 = e[l + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,797,double s = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,798,double s2 = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,799,for (int i = m - 1; i >= l; i--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,800,c3 = c2;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,801,c2 = c;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,802,s2 = s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,803,g = c * e[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,804,h = c * p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,806,e[i + 1] = s * r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,807,s = e[i] / r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,808,c = p / r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,809,p = c * d[i] - s * g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,810,d[i + 1] = h + s * (c * g + s * d[i]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,814,for (int k = 0; k < n; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,815,h = V[k][i + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,816,V[k][i + 1] = s * V[k][i] + c * h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,817,V[k][i] = c * V[k][i] - s * h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,820,p = -s * s2 * c3 * el1 * e[l] / dl1;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,821,e[l] = s * p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,822,d[l] = c * p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,828,d[l] += f;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,829,e[l] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,834,for (int i = 0; i < n - 1; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,835,int k = i;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,836,double p = d[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,837,for (int j = i + 1; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,838,if (d[j] < p) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,839,k = j;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,840,p = d[j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,843,if (k != i) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,844,d[k] = d[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,845,d[i] = p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,846,for (int j = 0; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,847,p = V[j][i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,848,V[j][i] = V[j][k];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,849,V[j][k] = p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,856,private void tred2() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,863,System.arraycopy(V[n - 1], 0, d, 0, n);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,868,for (int i = n - 1; i > 0; i--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,872,double scale = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,873,for (int k = 0; k < i; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,874,scale += Math.abs(d[k]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,876,double h = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,877,if (scale == 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,878,e[i] = d[i - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,879,for (int j = 0; j < i; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,880,d[j] = V[i - 1][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,881,V[i][j] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,882,V[j][i] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,888,for (int k = 0; k < i; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,889,d[k] /= scale;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,890,h += d[k] * d[k];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,892,double f = d[i - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,893,double g = Math.sqrt(h);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,894,if (f > 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,895,g = -g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,897,e[i] = scale * g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,898,h -= f * g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,899,d[i - 1] = f - g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,900,for (int j = 0; j < i; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,901,e[j] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,906,for (int j = 0; j < i; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,907,f = d[j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,908,V[j][i] = f;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,909,g = e[j] + V[j][j] * f;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,910,for (int k = j + 1; k <= i - 1; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,911,g += V[k][j] * d[k];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,912,e[k] += V[k][j] * f;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,914,e[j] = g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,916,f = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,917,for (int j = 0; j < i; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,918,e[j] /= h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,919,f += e[j] * d[j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,921,double hh = f / (h + h);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,922,for (int j = 0; j < i; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,923,e[j] -= hh * d[j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,925,for (int j = 0; j < i; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,926,f = d[j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,927,g = e[j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,928,for (int k = j; k <= i - 1; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,929,V[k][j] -= f * e[k] + g * d[k];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,931,d[j] = V[i - 1][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,932,V[i][j] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,935,d[i] = h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,940,for (int i = 0; i < n - 1; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,941,V[n - 1][i] = V[i][i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,942,V[i][i] = 1.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,943,double h = d[i + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,944,if (h != 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,945,for (int k = 0; k <= i; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,946,d[k] = V[k][i + 1] / h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,948,for (int j = 0; j <= i; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,949,double g = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,950,for (int k = 0; k <= i; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,951,g += V[k][i + 1] * V[k][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,953,for (int k = 0; k <= i; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,954,V[k][j] -= g * d[k];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,958,for (int k = 0; k <= i; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,959,V[k][i + 1] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,962,for (int j = 0; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,963,d[j] = V[n - 1][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,964,V[n - 1][j] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,966,V[n - 1][n - 1] = 1.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,967,e[0] = 0.0;
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,22,import java.util.Collection;
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,26,import org.apache.hadoop.fs.FileStatus;
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,28,import org.apache.hadoop.fs.FileUtil;
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java,234,prePartialMultiply1.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java,246,prePartialMultiply2.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java,260,partialMultiply.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java,271,itemFiltering.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java,300,aggregateAndRecommend.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/pseudo/RecommenderJob.java,142,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/pseudo/RecommenderJob.java,143,return 0;
core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/SlopeOneAverageDiffsJob.java,71,prefsToDiffsJob.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/SlopeOneAverageDiffsJob.java,87,diffsToAveragesJob.waitForCompletion(true);
core/src/main/java/org/apache/mahout/clustering/spectral/common/AffinityMatrixInputJob.java,63,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/clustering/spectral/common/MatrixDiagonalizeJob.java,70,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/clustering/spectral/common/UnitVectorizerJob.java,64,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/clustering/spectral/common/VectorMatrixMultiplicationJob.java,81,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/clustering/spectral/eigencuts/EigencutsAffinityCutsJob.java,83,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/clustering/spectral/eigencuts/EigencutsSensitivityJob.java,122,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,244,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,315,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,390,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/ga/watchmaker/MahoutEvaluator.java,67,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/vectorizer/DictionaryVectorizer.java,302,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/vectorizer/DictionaryVectorizer.java,338,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/vectorizer/DocumentProcessor.java,95,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/CollocDriver.java,236,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/CollocDriver.java,276,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/vectorizer/common/PartialVectorMerger.java,126,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/vectorizer/tfidf/TFIDFConverter.java,309,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/vectorizer/tfidf/TFIDFConverter.java,343,job.waitForCompletion(true);
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorDriver.java,195,job.waitForCompletion(true);
examples/src/main/java/org/apache/mahout/fpm/pfpgrowth/dataset/KeyBasedStringTupleGrouper.java,72,job.waitForCompletion(true);
examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/hadoop/CDMahoutEvaluator.java,81,job.waitForCompletion(true);
examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/tool/CDInfosTool.java,89,job.waitForCompletion(true);
examples/src/main/java/org/apache/mahout/text/WikipediaToSequenceFile.java,201,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyDriver.java,390,converged = FileSystem.get(new Configuration()).exists(controlOut);
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyReducer.java,65,FileSystem.get(conf).createNewFile(path);
core/src/main/java/org/apache/mahout/clustering/spectral/common/VectorCache.java,52,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/clustering/spectral/common/VectorMatrixMultiplicationJob.java,64,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/FPGrowthDriver.java,182,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/ga/watchmaker/MahoutEvaluator.java,62,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,89,rowPath = FileSystem.get(conf).makeQualified(inputPath);
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,90,outputTmpBasePath = FileSystem.get(conf).makeQualified(outputTmpPath);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,99,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,82,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/DistributedLanczosSolver.java,192,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/EigenVerificationJob.java,187,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/FPGrowthDriver.java,191,FPGrowth<String> fp = new FPGrowth<String>();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/MultiTransactionTreeIterator.java,37,public MultiTransactionTreeIterator(Iterator<Pair<List<Integer>,Long>> iterator) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,74,public static final String SORTED_OUTPUT = "sortedoutput";
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,126,return map;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,255,List<Pair<String,Long>> fList = readFList(params);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,259,long maxPerGroup = fList.size() / numGroups;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,260,if (fList.size() != maxPerGroup * numGroups) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,261,maxPerGroup++;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,264,long i = 0;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,265,long groupID = 0;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,266,for (Pair<String,Long> featureFreq : fList) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,267,String feature = featureFreq.getFirst();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,268,if (i / maxPerGroup == groupID) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,269,gList.put(feature, groupID);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,271,groupID++;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,272,gList.put(feature, groupID);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,274,i++;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,277,log.info("No of Features: {}", fList.size());
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,329,conf.set(PFP_PARAMETERS, params.toString());
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,330,conf.set("mapred.compress.map.output", "true");
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,331,conf.set("mapred.output.compression.type", "BLOCK");
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,332,String input = params.get(INPUT);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,333,Job job = new Job(conf, "PFP Transaction Sorting running over input" + input);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,334,job.setJarByClass(PFPGrowth.class);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,336,job.setMapOutputKeyClass(LongWritable.class);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,337,job.setMapOutputValueClass(TransactionTree.class);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,339,job.setOutputKeyClass(LongWritable.class);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,340,job.setOutputValueClass(TransactionTree.class);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,342,FileInputFormat.addInputPath(job, new Path(input));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,343,Path outPath = new Path(params.get(OUTPUT), SORTED_OUTPUT);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,344,FileOutputFormat.setOutputPath(job, outPath);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,348,job.setInputFormatClass(TextInputFormat.class);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,349,job.setMapperClass(TransactionSortingMapper.class);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,350,job.setReducerClass(TransactionSortingReducer.class);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,351,job.setOutputFormatClass(SequenceFileOutputFormat.class);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,353,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,368,Path input = new Path(params.get(OUTPUT), SORTED_OUTPUT);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,372,job.setMapOutputKeyClass(LongWritable.class);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,384,job.setInputFormatClass(SequenceFileInputFormat.class);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthCombiner.java,24,import org.apache.hadoop.io.LongWritable;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,21,import java.util.HashSet;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,39,public class ParallelFPGrowthMapper extends Mapper<LongWritable,TransactionTree,LongWritable,TransactionTree> {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,41,private final OpenIntLongHashMap gListInt = new OpenIntLongHashMap();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,50,Integer[] prunedItems = pattern.getFirst().toArray(new Integer[pattern.getFirst().size()]);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,56,Integer item = prunedItems[j];
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,57,Long groupID = gListInt.get(item);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,59,if (!groups.contains(groupID)) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,60,Integer[] tempItems = new Integer[j + 1];
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,61,System.arraycopy(prunedItems, 0, tempItems, 0, j + 1);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,62,context.setStatus("Parallel FPGrowth: Generating Group Dependent transactions for: " + item);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,63,context.write(new LongWritable(groupID), new TransactionTree(tempItems, pattern.getSecond()));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,65,groups.add(groupID);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,76,OpenObjectIntHashMap<String> fMap = new OpenObjectIntHashMap<String>();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,84,gListInt.put(fMap.get(e.getKey()), e.getValue());
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,31,import org.apache.hadoop.io.LongWritable;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,52,public class ParallelFPGrowthReducer extends Reducer<LongWritable,TransactionTree,Text,TopKStringPatterns> {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,56,private final OpenObjectIntHashMap<String> fMap = new OpenObjectIntHashMap<String>();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,58,private final OpenLongObjectHashMap<IntArrayList> groupFeatures = new OpenLongObjectHashMap<IntArrayList>();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,65,protected void reduce(LongWritable key, Iterable<TransactionTree> values, Context context) throws IOException {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,95,FPGrowth<Integer> fpGrowth = new FPGrowth<Integer>();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,96,fpGrowth.generateTopKFrequentPatterns(
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,98,localFList,
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,99,minSupport,
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,100,maxHeapSize,
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,101,new HashSet<Integer>(groupFeatures.get(key.get()).toList()),
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,102,new IntegerStringOutputConverter(
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,103,new ContextWriteOutputCollector<LongWritable,TransactionTree,Text,TopKStringPatterns>(context),
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,104,featureReverseMap),
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,105,new ContextStatusUpdater<LongWritable,TransactionTree,Text,TopKStringPatterns>(context));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,117,fMap.put(e.getFirst(), i++);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,123,for (Entry<String,Long> entry : gList.entrySet()) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,124,IntArrayList groupList = groupFeatures.get(entry.getValue());
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,125,Integer itemInteger = fMap.get(entry.getKey());
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,126,if (groupList != null) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,127,groupList.add(itemInteger);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,129,groupList = new IntArrayList();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,130,groupList.add(itemInteger);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,131,groupFeatures.put(entry.getValue(), groupList);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,18,package org.apache.mahout.fpm.pfpgrowth;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,20,import java.io.IOException;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,22,import java.util.Arrays;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,23,import java.util.Collections;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,24,import java.util.HashSet;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,25,import java.util.List;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,27,import java.util.regex.Pattern;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,29,import org.apache.hadoop.io.LongWritable;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,30,import org.apache.hadoop.io.Text;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,31,import org.apache.hadoop.mapreduce.Mapper;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,32,import org.apache.mahout.common.Pair;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,33,import org.apache.mahout.common.Parameters;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,34,import org.apache.mahout.math.map.OpenObjectIntHashMap;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,41,public class TransactionSortingMapper extends Mapper<LongWritable,Text,LongWritable,TransactionTree> {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,43,private final OpenObjectIntHashMap<String> fMap = new OpenObjectIntHashMap<String>();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,45,private Pattern splitter;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,48,protected void map(LongWritable offset, Text input, Context context) throws IOException,
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,49,InterruptedException {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,51,String[] items = splitter.split(input.toString());
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,55,for (String item : uniqueItems) { // remove items not in the fList
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,57,itemSet.add(fMap.get(item));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,61,Collections.sort(itemSet);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,63,Integer[] prunedItems = itemSet.toArray(new Integer[itemSet.size()]);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,65,if (prunedItems.length > 0) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,66,context.write(new LongWritable(prunedItems[0]), new TransactionTree(prunedItems, 1L));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,72,protected void setup(Context context) throws IOException, InterruptedException {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,73,super.setup(context);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,76,int i = 0;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,78,fMap.put(e.getFirst(), i++);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,81,splitter = Pattern.compile(params.get(PFPGrowth.SPLIT_PATTERN, PFPGrowth.SPLITTER.toString()));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingReducer.java,18,package org.apache.mahout.fpm.pfpgrowth;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingReducer.java,20,import java.io.IOException;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingReducer.java,22,import org.apache.hadoop.io.LongWritable;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingReducer.java,23,import org.apache.hadoop.mapreduce.Reducer;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingReducer.java,31,public class TransactionSortingReducer extends
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingReducer.java,32,Reducer<LongWritable,TransactionTree,LongWritable,TransactionTree> {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingReducer.java,34,private static final LongWritable ONE = new LongWritable(1);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingReducer.java,37,protected void reduce(LongWritable key, Iterable<TransactionTree> values, Context context) throws IOException,
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingReducer.java,38,InterruptedException {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingReducer.java,39,for (TransactionTree tr : values) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingReducer.java,40,context.write(ONE, tr);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,157,public TransactionTree(Integer[] items, Long support) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,159,transactionSet.add(new Pair<List<Integer>,Long>(Arrays.asList(items), support));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,162,public TransactionTree(List<Pair<List<Integer>,Long>> transactionSet) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,189,for (int attributeValue : myList) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,253,Pair<List<Integer>,Long> p = it.next();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,256,for (Integer i : p.getFirst()) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,257,if (!frequencyList.containsKey(i)) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,258,frequencyList.put(i, new MutableLong(0));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,260,frequencyList.get(i).add(p.getSecond());
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,282,Pair<List<Integer>,Long> p = it.next();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,283,Collections.sort(p.getFirst(), comparator);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,336,Integer[] items = new Integer[length];
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,341,Pair<List<Integer>,Long> transaction = new Pair<List<Integer>,Long>(Arrays.asList(items), support);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,386,for (Integer item : transaction.getFirst()) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/Pattern.java,45,private long[] supportValues;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/Pattern.java,56,this.supportValues = new long[size];
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/Pattern.java,65,this.pattern[length] = id;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/Pattern.java,66,this.supportValues[length++] = supportCount;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/Pattern.java,74,public final Object[] getPatternWithSupport() {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/Pattern.java,75,return new Object[] {this.pattern, this.supportValues};
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/Pattern.java,113,long[] oldSupport = supportValues;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/Pattern.java,115,this.supportValues = new long[size];
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/Pattern.java,117,System.arraycopy(oldSupport, 0, this.supportValues, 0, length);
core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java,75,private int threadCount = 20;
core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java,76,private int poolSize = 20;
core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java,92,setPoolSize(poolSize);
core/src/main/java/org/apache/mahout/clustering/spectral/common/VectorMatrixMultiplicationJob.java,84,return new DistributedRowMatrix(outputPath, new Path(outputPath, "tmp"),
core/src/main/java/org/apache/mahout/clustering/spectral/kmeans/SpectralKMeansDriver.java,148,new Path(outputCalc, "laplacian-" + (System.nanoTime() & 0xFF)));
core/src/main/java/org/apache/mahout/clustering/spectral/kmeans/SpectralKMeansDriver.java,196,Path clusteredPointsPath = new Path(output, "clusteredPoints");
core/src/main/java/org/apache/mahout/clustering/spectral/kmeans/SpectralKMeansDriver.java,204,int id = 0;
examples/src/main/java/org/apache/mahout/clustering/display/DisplaySpectralKMeans.java,43,Path samples = new Path("samples");
examples/src/main/java/org/apache/mahout/clustering/display/DisplaySpectralKMeans.java,44,Path output = new Path("output");
examples/src/main/java/org/apache/mahout/clustering/display/DisplaySpectralKMeans.java,53,Path affinities = new Path(output, "affinities");
examples/src/main/java/org/apache/mahout/clustering/display/DisplaySpectralKMeans.java,71,loadClusters(output);
examples/src/main/java/org/apache/mahout/clustering/display/DisplaySpectralKMeans.java,78,plotSampleData((Graphics2D) g);
examples/src/main/java/org/apache/mahout/clustering/display/DisplaySpectralKMeans.java,79,plotClusters((Graphics2D) g);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/GramKeyPartitioner.java,20,import org.apache.hadoop.conf.Configuration;
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/GramKeyPartitioner.java,21,import org.apache.hadoop.io.WritableComparator;
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/GramKeyPartitioner.java,28,public class GramKeyPartitioner extends Partitioner<GramKey, Gram> {
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/GramKeyPartitioner.java,30,private static final String HASH_OFFSET_PROPERTY_NAME = "grampartitioner.hash.offset";
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/GramKeyPartitioner.java,33,conf.setInt(HASH_OFFSET_PROPERTY_NAME, left);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/GramKeyPartitioner.java,36,private int offset;
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/GramKeyPartitioner.java,42,int length = key.getLength() - 1;
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/GramKeyPartitioner.java,43,int right = (offset + length) % length;
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/GramKeyPartitioner.java,44,int hash = WritableComparator.hashBytes(key.getBytes(), right);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/GramKeyPartitioner.java,48,public void configure(Configuration conf) {
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/GramKeyPartitioner.java,49,offset = conf.getInt(HASH_OFFSET_PROPERTY_NAME, -1);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/CollocDriver.java,113,if (argMap.get("--minsupport") != null) {
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/CollocDriver.java,114,minSupport = Integer.parseInt(argMap.get("--minsupport"));
core/src/main/java/org/apache/mahout/cf/taste/impl/common/WeightedRunningAverage.java,43,average = datum * weight;
core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/SlopeOneAverageDiffsJob.java,84,FloatWritable.class,
core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/SlopeOneDiffsToAveragesReducer.java,27,Reducer<EntityEntityWritable,FloatWritable, EntityEntityWritable,FloatWritable> {
core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/SlopeOneDiffsToAveragesReducer.java,33,int count = 0;
core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/SlopeOneDiffsToAveragesReducer.java,34,double total = 0.0;
core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/SlopeOneDiffsToAveragesReducer.java,36,total += value.get();
core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/SlopeOneDiffsToAveragesReducer.java,37,count++;
core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/SlopeOneDiffsToAveragesReducer.java,39,context.write(key, new FloatWritable((float) (total / count)));
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java,37,import org.apache.mahout.cf.taste.impl.common.InvertedRunningAverageAndStdDev;
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java,149,if (average == null) {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java,150,return null;
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java,153,: new InvertedRunningAverage(average);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,36,import org.apache.mahout.cf.taste.impl.model.file.FileDataModel;
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,110,char delimiter = FileDataModel.determineDelimiter(firstLine);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,113,averageCount = processLine(iterator.next(), delimiter, averageCount);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,127,private long processLine(String line, char delimiter, long averageCount) {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,133,int delimiterOne = line.indexOf(delimiter);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,134,Preconditions.checkArgument(delimiterOne >= 0, "Bad line: %s", line);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,135,int delimiterTwo = line.indexOf(delimiter, delimiterOne + 1);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,136,Preconditions.checkArgument(delimiterTwo >= 0, "Bad line: %s", line);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,138,long itemID1 = Long.parseLong(line.substring(0, delimiterOne));
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,139,long itemID2 = Long.parseLong(line.substring(delimiterOne + 1, delimiterTwo));
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,140,double diff = Double.parseDouble(line.substring(delimiterTwo + 1));
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,155,average = new FullRunningAverage();
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,159,if (average != null) {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,160,average.addDatum(diff);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,225,if (average == null) {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,226,return null;
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,228,return new InvertedRunningAverage(average);
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorDriver.java,155,conf.set("xmlinput.start", "<text xml:space=\"preserve\">");
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorDriver.java,156,conf.set("xmlinput.end", "</text>");
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPGrowth.java,593,conditionalTree.setParent(prevConditional, conditional);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPGrowth.java,603,conditionalTree.setParent(prevConditional, FPTree.ROOTNODEID);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPGrowth.java,604,if (conditionalTree.childCount(FPTree.ROOTNODEID) > 1
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPGrowth.java,605,&& conditionalTree.singlePath()) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,256,Integer numGroups = Integer.valueOf(params.get(NUM_GROUPS, "50"));
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/SimilarUser.java,64,return similarity > otherSimilarity ? -1 : similarity < otherSimilarity ? 1 : 0;
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/TopItems.java,111,topUsers.add(new SimilarUser(userID, similarity));
examples/src/main/java/org/apache/mahout/clustering/display/DisplayCanopy.java,20,import java.awt.BasicStroke;
examples/src/main/java/org/apache/mahout/clustering/display/DisplayCanopy.java,21,import java.awt.Color;
examples/src/main/java/org/apache/mahout/clustering/display/DisplayCanopy.java,22,import java.awt.Graphics;
examples/src/main/java/org/apache/mahout/clustering/display/DisplayCanopy.java,23,import java.awt.Graphics2D;
examples/src/main/java/org/apache/mahout/clustering/display/DisplayCanopy.java,24,import java.util.List;
examples/src/main/java/org/apache/mahout/clustering/display/DisplayCanopy.java,79,loadClusters(output);
core/src/main/java/org/apache/mahout/vectorizer/encoders/LuceneTextValueEncoder.java,82,buf.get(cbuf, off, len);
core/src/main/java/org/apache/mahout/vectorizer/encoders/LuceneTextValueEncoder.java,83,return len;
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,506,double sum = 0;
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java,111,addOption("usersFile", "u", "File of users to recommend for", null);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java,112,addOption("itemsFile", "i", "File of items to recommend for", null);
core/src/main/java/org/apache/mahout/classifier/BayesFileFormatter.java,266,Option inputOpt = obuilder.withLongName("input").withRequired(true).withArgument(
core/src/main/java/org/apache/mahout/classifier/BayesFileFormatter.java,268,.withShortName("i").create();
core/src/main/java/org/apache/mahout/classifier/BayesFileFormatter.java,270,Option outputOpt = obuilder.withLongName("output").withRequired(true).withArgument(
core/src/main/java/org/apache/mahout/classifier/BayesFileFormatter.java,272,.withShortName("o").create();
core/src/main/java/org/apache/mahout/classifier/BayesFileFormatter.java,291,Option helpOpt = obuilder.withLongName("help").withDescription("Print out help").withShortName("h").create();
core/src/main/java/org/apache/mahout/classifier/bayes/TrainClassifier.java,69,Option inputDirOpt = obuilder.withLongName("input").withRequired(true).withArgument(
core/src/main/java/org/apache/mahout/classifier/bayes/TrainClassifier.java,70,abuilder.withName("input").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/classifier/bayes/TrainClassifier.java,73,.withShortName("i").create();
core/src/main/java/org/apache/mahout/classifier/bayes/TrainClassifier.java,75,Option outputOpt = obuilder.withLongName("output").withRequired(true).withArgument(
core/src/main/java/org/apache/mahout/classifier/bayes/TrainClassifier.java,76,abuilder.withName("output").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/FPGrowthDriver.java,69,Option inputDirOpt = obuilder.withLongName("input").withRequired(true).withArgument(
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/FPGrowthDriver.java,70,abuilder.withName("input").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,56,Option inputDirOpt = obuilder.withLongName("input").withRequired(true).withArgument(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,57,abuilder.withName("input").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,60,Option outputDirOpt = obuilder.withLongName("output").withRequired(true).withArgument(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,61,abuilder.withName("output").withMinimum(1).withMaximum(1).create()).withDescription(
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorDriver.java,71,Option dirInputPathOpt = obuilder.withLongName("input").withRequired(true).withArgument(
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorDriver.java,72,abuilder.withName("input").withMinimum(1).withMaximum(1).create()).withDescription(
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorDriver.java,75,Option dirOutputPathOpt = obuilder.withLongName("output").withRequired(true).withArgument(
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorDriver.java,76,abuilder.withName("output").withMinimum(1).withMaximum(1).create()).withDescription(
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorDriver.java,91,.create();
examples/src/main/java/org/apache/mahout/df/mapreduce/TestForest.java,81,Option inputOpt = obuilder.withLongName("input").withShortName("i").withRequired(true).withArgument(
examples/src/main/java/org/apache/mahout/df/mapreduce/TestForest.java,82,abuilder.withName("path").withMinimum(1).withMaximum(1).create()).withDescription("Test data path").create();
examples/src/main/java/org/apache/mahout/df/mapreduce/TestForest.java,92,Option outputOpt = obuilder.withLongName("output").withShortName("o").withRequired(false).withArgument(
examples/src/main/java/org/apache/mahout/df/mapreduce/TestForest.java,93,abuilder.withName("output").withMinimum(1).withMaximum(1).create()).withDescription(
examples/src/main/java/org/apache/mahout/df/mapreduce/TestForest.java,101,.create();
examples/src/main/java/org/apache/mahout/df/mapreduce/TestForest.java,232,log.info("Classifying : " + path);
examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/CDGA.java,83,Option inputOpt = obuilder.withLongName("input").withRequired(true).withShortName("i").withArgument(
examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/CDGA.java,85,.withDescription("The Path for input data directory.").create();
examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/tool/CDInfosTool.java,34,import org.apache.commons.cli2.builder.ArgumentBuilder;
examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/tool/CDInfosTool.java,35,import org.apache.commons.cli2.builder.DefaultOptionBuilder;
examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/tool/CDInfosTool.java,214,DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/tool/CDInfosTool.java,215,ArgumentBuilder abuilder = new ArgumentBuilder();
examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/tool/CDInfosTool.java,218,Option inputOpt = obuilder.withLongName("input").withRequired(true).withShortName("i").withArgument(
examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/tool/CDInfosTool.java,220,.withDescription("The Path for input data directory.").create();
examples/src/main/java/org/apache/mahout/text/WikipediaToSequenceFile.java,73,Option dirInputPathOpt = obuilder.withLongName("input").withRequired(true).withArgument(
examples/src/main/java/org/apache/mahout/text/WikipediaToSequenceFile.java,74,abuilder.withName("input").withMinimum(1).withMaximum(1).create()).withDescription(
examples/src/main/java/org/apache/mahout/text/WikipediaToSequenceFile.java,77,Option dirOutputPathOpt = obuilder.withLongName("output").withRequired(true).withArgument(
examples/src/main/java/org/apache/mahout/text/WikipediaToSequenceFile.java,78,abuilder.withName("output").withMinimum(1).withMaximum(1).create()).withDescription(
examples/src/main/java/org/apache/mahout/text/WikipediaToSequenceFile.java,94,.create();
examples/src/main/java/org/apache/mahout/text/WikipediaToSequenceFile.java,165,if (WikipediaToSequenceFile.log.isInfoEnabled()) {
examples/src/main/java/org/apache/mahout/text/WikipediaToSequenceFile.java,166,log.info("Input: " + input + " Out: " + output + " Categories: " + catFile
examples/src/main/java/org/apache/mahout/text/WikipediaToSequenceFile.java,167,+ " All Files: " + all);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,201,out.collect(NullWritable.get(), new VectorWritable(outputVector));
core/src/main/java/org/apache/mahout/vectorizer/DictionaryVectorizer.java,332,job.setCombinerClass(TermCountReducer.class);
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,48,private SparseVectorsFromSequenceFiles() {
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/AggregateAndRecommendReducer.java,205,long itemID = indexItemIDMap.get(index);
core/src/main/java/org/apache/mahout/clustering/minhash/HashFactory.java,20,import org.apache.mahout.vectorizer.encoders.MurmurHash;
core/src/main/java/org/apache/mahout/vectorizer/encoders/MurmurHash.java,18,package org.apache.mahout.vectorizer.encoders;
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/SamplingCandidateItemsStrategy.java,80,Iterator<Preference> sampledPrefs = new FixedSizeSamplingIterator(prefsConsidered, prefs.iterator());
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java,116,addOption("maxPrefsPerUser", "mp",
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,33,import org.apache.hadoop.io.DefaultStringifier;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,37,import org.apache.hadoop.io.Writable;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,44,import org.apache.hadoop.util.GenericsUtil;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,73,public static final String PARALLEL_COUNTING = "parallelcounting";
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,82,private PFPGrowth() { }
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,93,public static List<Pair<String,Long>> deserializeList(Parameters params,
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,94,String key,
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,95,Configuration conf) throws IOException {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,97,conf.set("io.serializations", "org.apache.hadoop.io.serializer.JavaSerialization,"
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,98,+ "org.apache.hadoop.io.serializer.WritableSerialization");
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,100,DefaultStringifier<List<Pair<String,Long>>> listStringifier = new DefaultStringifier<List<Pair<String,Long>>>(
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,101,conf, GenericsUtil.getClass(list));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,102,String serializedString = params.get(key, listStringifier.toString(list));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,103,list = listStringifier.fromString(serializedString);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,117,public static Map<String,Long> deserializeMap(Parameters params, String key, Configuration conf) throws IOException {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,119,conf.set("io.serializations", "org.apache.hadoop.io.serializer.JavaSerialization,"
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,120,+ "org.apache.hadoop.io.serializer.WritableSerialization");
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,122,DefaultStringifier<Map<String,Long>> mapStringifier = new DefaultStringifier<Map<String,Long>>(conf,
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,123,GenericsUtil.getClass(map));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,124,String gListString = params.get(key, mapStringifier.toString(map));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,125,map = mapStringifier.fromString(gListString);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,204,startParallelCounting(params);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,205,startGroupingItems(params);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,206,startTransactionSorting(params);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,207,startParallelFPGrowth(params);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,208,startAggregating(params);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,219,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,220,params.set(F_LIST, "");
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,221,params.set(G_LIST, "");
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,253,public static void startGroupingItems(Parameters params) throws IOException {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,254,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,279,params.set(G_LIST, serializeMap(gList, conf));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,280,params.set(F_LIST, serializeList(fList, conf));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,290,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,326,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,327,String gList = params.get(G_LIST);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,328,params.set(G_LIST, "");
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,354,params.set(G_LIST, gList);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,364,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,398,private static String serializeList(List<Pair<String,Long>> list, Configuration conf) throws IOException {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,399,conf.set("io.serializations", "org.apache.hadoop.io.serializer.JavaSerialization,"
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,400,+ "org.apache.hadoop.io.serializer.WritableSerialization");
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,401,DefaultStringifier<List<Pair<String,Long>>> listStringifier = new DefaultStringifier<List<Pair<String,Long>>>(
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,402,conf, GenericsUtil.getClass(list));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,403,return listStringifier.toString(list);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,411,private static String serializeMap(Map<String,Long> map, Configuration conf) throws IOException {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,412,conf.set("io.serializations", "org.apache.hadoop.io.serializer.JavaSerialization,"
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,413,+ "org.apache.hadoop.io.serializer.WritableSerialization");
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,414,DefaultStringifier<Map<String,Long>> mapStringifier = new DefaultStringifier<Map<String,Long>>(conf,
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,415,GenericsUtil.getClass(map));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,416,return mapStringifier.toString(map);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,30,import org.apache.mahout.common.Parameters;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,53,for (int j = prunedItems.length - 1; j >= 0; j--) { // generate group
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,78,for (Pair<String,Long> e : PFPGrowth.deserializeList(params, PFPGrowth.F_LIST, context.getConfiguration())) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,83,.entrySet()) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,115,for (Pair<String,Long> e : PFPGrowth.deserializeList(params, PFPGrowth.F_LIST, context.getConfiguration())) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,121,Map<String,Long> gList = PFPGrowth.deserializeMap(params, PFPGrowth.G_LIST, context.getConfiguration());
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,77,for (Pair<String,Long> e : PFPGrowth.deserializeList(params, PFPGrowth.F_LIST, context.getConfiguration())) {
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java,59,int prefs1Size = prefs1.size();
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java,60,int prefs2Size = prefs2.size();
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java,61,int intersectionSize = prefs1Size < prefs2Size ? prefs2.intersectionSize(prefs1) : prefs1
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java,62,.intersectionSize(prefs2);
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java,66,int numItems = dataModel.getNumItems();
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java,76,int preferring1 = dataModel.getNumUsersWithPreferenceFor(itemID1);
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java,77,int numUsers = dataModel.getNumUsers();
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java,83,int preferring1 = dataModel.getNumUsersWithPreferenceFor(itemID1);
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java,84,int numUsers = dataModel.getNumUsers();
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java,93,private double doItemSimilarity(long itemID1, long itemID2, int preferring1, int numUsers) throws TasteException {
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java,94,int preferring1and2 = dataModel.getNumUsersWithPreferenceFor(itemID1, itemID2);
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java,98,int preferring2 = dataModel.getNumUsersWithPreferenceFor(itemID2);
core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/AbstractDistributedVectorSimilarity.java,35,double weightOfVectorB, int numberOfColumns) {
core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/AbstractDistributedVectorSimilarity.java,76,int numberOfColumns);
core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedCooccurrenceVectorSimilarity.java,39,int numberOfColumns) {
core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedEuclideanDistanceVectorSimilarity.java,29,double weightOfVectorB, int numberOfColumns) {
core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedLoglikelihoodVectorSimilarity.java,31,double weightOfVectorB, int numberOfColumns) {
core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedLoglikelihoodVectorSimilarity.java,33,int cooccurrenceCount = countElements(cooccurrences);
core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedLoglikelihoodVectorSimilarity.java,38,int occurrencesA = (int) weightOfVectorA;
core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedLoglikelihoodVectorSimilarity.java,39,int occurrencesB = (int) weightOfVectorB;
core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedPearsonCorrelationVectorSimilarity.java,29,double weightOfVectorB, int numberOfColumns) {
core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedTanimotoCoefficientVectorSimilarity.java,30,double weightOfVectorB, int numberOfColumns) {
core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedUncenteredCosineVectorSimilarity.java,29,double weightOfVectorB, int numberOfColumns) {
core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedUncenteredZeroAssumingCosineVectorSimilarity.java,32,double weightOfVectorB, int numberOfColumns) {
core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedVectorSimilarity.java,53,int numberOfColumns);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,109,double llr = ll.logLikelihoodRatio(k11, k12, k21, k22);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,110,if (llr < minLLRValue) {
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,111,context.getCounter(Skipped.LESS_THAN_MIN_LLR).increment(1);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,112,return;
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,114,DoubleWritable dd = new DoubleWritable(llr);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,115,Text t = new Text(ngram.getString());
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,116,context.write(t, dd);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,119,log.error("Problem calculating LLR ratio: " + ex.getMessage());
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,120,log.error("NGram: " + ngram);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,121,log.error("HEAD: " + gram[0] + ':' + gramFreq[0]);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,122,log.error("TAIL: " + gram[1] + ':' + gramFreq[1]);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,123,log.error("k11: " + k11 + " k12: " + k12 + " k21: " + k21 + " k22: " + k22);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,136,if (log.isInfoEnabled()) {
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,137,log.info("NGram Total is {}", ngramTotal);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,138,log.info("Min LLR value is {}", minLLRValue);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,139,log.info("Emit Unitgrams is {}", emitUnigrams);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,165,double logLikelihoodRatio(int k11, int k12, int k21, int k22);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,171,public double logLikelihoodRatio(int k11, int k12, int k21, int k22) {
math/src/main/java/org/apache/mahout/math/stats/LogLikelihood.java,41,public static double entropy(int... elements) {
math/src/main/java/org/apache/mahout/math/stats/LogLikelihood.java,44,for (int element : elements) {
math/src/main/java/org/apache/mahout/math/stats/LogLikelihood.java,75,public static double logLikelihoodRatio(int k11, int k12, int k21, int k22) {
math/src/main/java/org/apache/mahout/math/stats/LogLikelihood.java,101,public static double rootLogLikelihoodRatio(int k11, int k12, int k21, int k22) {
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,113,.get(DefaultOptionCreator.NUM_CLUSTERS_OPTION)), measure);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/CollocDriver.java,61,private CollocDriver() {
math/src/main/java/org/apache/mahout/math/NamedVector.java,39,if (delegate == null) {
utils/src/main/java/org/apache/mahout/utils/clustering/ClusterDumper.java,210,writer.close();
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,112,fs.deleteOnExit(inputVectorPath);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,141,fs.deleteOnExit(outputFile);
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,174,return TimesSquaredJob.retrieveTimesSquaredOutputVector(conf);
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,188,return TimesSquaredJob.retrieveTimesSquaredOutputVector(conf);
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyCreatorMapper.java,41,MeanShiftCanopy canopy = new MeanShiftCanopy(point.get(), nextCanopyId++, measure);
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/DistributedLanczosSolver.java,20,import java.io.IOException;
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/DistributedLanczosSolver.java,21,import java.util.ArrayList;
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/DistributedLanczosSolver.java,22,import java.util.List;
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/DistributedLanczosSolver.java,23,import java.util.Map;
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/DistributedLanczosSolver.java,190,log.info("Persisting {} eigenVectors and eigenValues to: {}", eigenVectors.numRows(), outputPath);
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/DistributedLanczosSolver.java,195,for (int i = 0; i < eigenVectors.numRows() - 1; i++) {
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/DistributedLanczosSolver.java,196,Vector v = eigenVectors.getRow(i);
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/EigenVector.java,34,public EigenVector(DenseVector v, double eigenValue, double cosAngleError, int order) {
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/EigenVector.java,35,super(v, false);
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/EigenVerificationJob.java,20,import java.io.IOException;
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/EigenVerificationJob.java,21,import java.util.ArrayList;
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/EigenVerificationJob.java,22,import java.util.Collections;
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/EigenVerificationJob.java,23,import java.util.Comparator;
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/EigenVerificationJob.java,24,import java.util.HashMap;
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/EigenVerificationJob.java,25,import java.util.List;
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/EigenVerificationJob.java,26,import java.util.Map;
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/EigenVerificationJob.java,37,import org.apache.mahout.math.DenseVector;
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/EigenVerificationJob.java,224,public int compare(Map.Entry<MatrixSlice, EigenStatus> e1, Map.Entry<MatrixSlice, EigenStatus> e2) {
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,21,import java.util.EnumMap;
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,22,import java.util.List;
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,23,import java.util.Map;
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,25,import org.apache.mahout.math.DenseVector;
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,26,import org.apache.mahout.math.Matrix;
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,27,import org.apache.mahout.math.MatrixSlice;
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,28,import org.apache.mahout.math.SparseRowMatrix;
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,29,import org.apache.mahout.math.VectorIterable;
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,33,import org.apache.mahout.math.Vector;
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,155,for (int i = 0; i < basis.numRows() - 1; i++) {
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,165,log.info("Eigenvector {} found with eigenvalue {}", i, eigenVals.get(i));
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,166,eigenValues.add(eigenVals.get(i));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,18,import static org.apache.mahout.math.matrix.linalg.Property.*;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,52,public EigenvalueDecomposition(DoubleMatrix2D A) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,53,checkSquare(A);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,55,n = A.columns();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,56,V = new double[n][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,60,boolean issymmetric = DEFAULT.isSymmetric(A);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,62,if (issymmetric) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,63,for (int i = 0; i < n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,64,for (int j = 0; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,65,V[i][j] = A.getQuick(i, j);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,81,H[i][j] = A.getQuick(i, j);
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,19,package org.apache.mahout.classifier.bayes;
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,21,import java.io.IOException;
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,22,import java.util.TreeMap;
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,24,import org.apache.hadoop.conf.Configuration;
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,26,import org.apache.hadoop.fs.Path;
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,27,import org.apache.hadoop.mapreduce.RecordWriter;
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,28,import org.apache.hadoop.mapreduce.TaskAttemptContext;
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,29,import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,50,public abstract class MultipleOutputFormat<K, V> extends FileOutputFormat<K, V> {
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,73,return new RecordWriter<K, V>() {
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,76,private final TreeMap<String, RecordWriter<K, V>> recordWriters = new TreeMap<String, RecordWriter<K, V>>();
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,88,K actualKey = generateActualKey(key, value);
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,89,V actualValue = generateActualValue(key, value);
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,91,RecordWriter<K, V> rw = this.recordWriters.get(finalPath);
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,92,if (rw == null) {
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,97,this.recordWriters.put(finalPath, rw);
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,99,try {
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,100,rw.write(actualKey, actualValue);
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,107,public void close(TaskAttemptContext context) throws IOException, InterruptedException {
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,108,for (RecordWriter<K, V> rw : recordWriters.values()) {
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,109,rw.close(context);
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,111,this.recordWriters.clear();
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,124,protected String generateLeafFileName(String name) {
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,125,return name;
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,139,protected String generateFileNameForKeyValue(K key, V value, String name) {
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,140,return name;
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,153,protected K generateActualKey(K key, V value) {
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,154,return key;
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,167,protected V generateActualValue(K key, V value) {
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,168,return value;
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,188,if (infilepath == null) {
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,190,return name;
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,193,if (numOfTrailingLegsToUse <= 0) {
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,194,return name;
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,196,Path infile = new Path(infilepath);
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,197,Path parent = infile.getParent();
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,198,String midName = infile.getName();
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,199,Path outPath = new Path(midName);
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,200,for (int i = 1; i < numOfTrailingLegsToUse; i++) {
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,201,if (parent == null) {
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,202,break;
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,204,midName = parent.getName();
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,205,if (midName.length() == 0) {
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,206,break;
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,208,parent = parent.getParent();
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,209,outPath = new Path(midName, outPath);
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,211,return outPath.toString();
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleTextOutputFormat.java,18,package org.apache.mahout.classifier.bayes;
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleTextOutputFormat.java,20,import java.io.IOException;
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleTextOutputFormat.java,22,import org.apache.hadoop.conf.Configuration;
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleTextOutputFormat.java,24,import org.apache.hadoop.mapreduce.RecordWriter;
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleTextOutputFormat.java,25,import org.apache.hadoop.mapreduce.TaskAttemptContext;
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleTextOutputFormat.java,26,import org.apache.hadoop.mapreduce.TaskAttemptID;
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleTextOutputFormat.java,27,import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleTextOutputFormat.java,34,public class MultipleTextOutputFormat<K, V> extends MultipleOutputFormat<K, V> {
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleTextOutputFormat.java,36,private TextOutputFormat<K, V> theTextOutputFormat;
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleTextOutputFormat.java,41,if (theTextOutputFormat == null) {
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleTextOutputFormat.java,42,theTextOutputFormat = new TextOutputFormat<K, V>();
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorDriver.java,188,job.setOutputFormatClass(WikipediaDatasetCreatorOutputFormat.class);
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorOutputFormat.java,18,package org.apache.mahout.classifier.bayes;
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorOutputFormat.java,20,import org.apache.hadoop.io.Text;
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorOutputFormat.java,26,public class WikipediaDatasetCreatorOutputFormat extends MultipleTextOutputFormat<Text,Text> {
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorOutputFormat.java,28,protected String generateFileNameForKeyValue(Text key, Text v, String name) {
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorOutputFormat.java,30,return key.toString() + ".txt";
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/CollocDriver.java,275,conf.setFloat(LLRReducer.MIN_LLR, minLLRValue);
core/src/main/java/org/apache/mahout/vectorizer/tfidf/TFIDFPartialVectorReducer.java,81,if (df / vectorCount > maxDfPercent) {
core/src/main/java/org/apache/mahout/math/hadoop/MatrixMultiplicationJob.java,49,JobConf conf = new JobConf(MatrixMultiplicationJob.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,63,return createTimesSquaredJobConf(v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,74,return createTimesSquaredJobConf(v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,88,return createTimesSquaredJobConf(v, v.size(), matrixInputPath, outputVectorPathBase, mapClass, redClass);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,97,JobConf conf = new JobConf(TimesSquaredJob.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,80,JobConf conf = new JobConf(TransposeJob.class);
core/src/main/java/org/apache/mahout/cf/taste/impl/common/WeightedRunningAverage.java,24,public final class WeightedRunningAverage implements RunningAverage, Serializable {
core/src/main/java/org/apache/mahout/cf/taste/impl/common/WeightedRunningAverage.java,45,average = average * oldTotalWeight / totalWeight + datum / totalWeight;
core/src/main/java/org/apache/mahout/cf/taste/impl/common/WeightedRunningAverage.java,61,average = average * oldTotalWeight / totalWeight - datum / totalWeight;
core/src/main/java/org/apache/mahout/clustering/Cluster.java,26,public interface Cluster extends Model<VectorWritable> {
core/src/main/java/org/apache/mahout/clustering/dirichlet/DirichletDriver.java,411,clustersIn = buildClustersSeq(input, output, modelDistribution, numClusters, maxIterations, alpha0, clustersIn);
core/src/main/java/org/apache/mahout/clustering/dirichlet/DirichletDriver.java,418,private static Path buildClustersSeq(Path input,
core/src/main/java/org/apache/mahout/clustering/dirichlet/DirichletDriver.java,430,DirichletState state = DirichletMapper.loadState(new Configuration(),
core/src/main/java/org/apache/mahout/clustering/dirichlet/DirichletDriver.java,437,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/clustering/dirichlet/DirichletDriver.java,507,clusterDataSeq(input, stateIn, output, emitMostLikely, threshold);
core/src/main/java/org/apache/mahout/clustering/dirichlet/DirichletDriver.java,515,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/clustering/dirichlet/DirichletReducer.java,27,public class DirichletReducer extends Reducer<Text, VectorWritable, Text, DirichletCluster> {
core/src/main/java/org/apache/mahout/clustering/dirichlet/DirichletReducer.java,41,clusterer = new DirichletClusterer(DirichletMapper.getDirichletState(context.getConfiguration()));
core/src/main/java/org/apache/mahout/clustering/dirichlet/DirichletReducer.java,42,this.newModels = (Cluster[]) clusterer.samplePosteriorModels();
core/src/main/java/org/apache/mahout/clustering/dirichlet/DirichletReducer.java,53,protected void reduce(Text key, Iterable<VectorWritable> values, Context context) throws IOException, InterruptedException {
core/src/main/java/org/apache/mahout/clustering/dirichlet/DirichletReducer.java,68,this.newModels = (Cluster[]) clusterer.samplePosteriorModels();
core/src/main/java/org/apache/mahout/common/distance/MahalanobisDistanceMeasure.java,73,MatrixWritable inverseCovarianceMatrix = (MatrixWritable) vectorClass.get().newInstance();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPGrowth.java,61,public static List<Pair<String,TopKStringPatterns>> readFrequentPattern(FileSystem fs,
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPGrowth.java,62,Configuration conf,
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPGrowth.java,63,Path path) throws IOException {
examples/src/main/java/org/apache/mahout/classifier/bayes/XmlInputFormat.java,40,public static final String START_TAG_KEY = "xmlinput.start";
examples/src/main/java/org/apache/mahout/classifier/bayes/XmlInputFormat.java,45,public RecordReader<LongWritable, Text> createRecordReader(InputSplit split,
examples/src/main/java/org/apache/mahout/classifier/bayes/XmlInputFormat.java,46,TaskAttemptContext context) {
examples/src/main/java/org/apache/mahout/classifier/bayes/XmlInputFormat.java,60,private final byte[] startTag;
examples/src/main/java/org/apache/mahout/classifier/bayes/XmlInputFormat.java,77,startTag = conf.get(START_TAG_KEY).getBytes("utf-8");
examples/src/main/java/org/apache/mahout/classifier/bayes/XmlInputFormat.java,78,endTag = conf.get(END_TAG_KEY).getBytes("utf-8");
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,25,import org.apache.hadoop.fs.FileSystem;
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,30,import org.apache.hadoop.util.Progressable;
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,66,public RecordWriter<K, V> getRecordWriter(FileSystem fs, Configuration job, String name, Progressable arg3) {
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,68,final FileSystem myFS = fs;
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,69,final String myName = generateLeafFileName(name);
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,70,final Configuration myJob = job;
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,71,final Progressable myProgressable = arg3;
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,79,public void write(K key, V value) throws IOException {
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,82,String keyBasedPath = generateFileNameForKeyValue(key, value, myName);
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,85,String finalPath = getInputFileBasedOutputFileName(myJob, keyBasedPath);
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,96,rw = getBaseRecordWriter(myFS, myJob, finalPath, myProgressable);
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,186,protected String getInputFileBasedOutputFileName(Configuration job, String name) {
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,187,String infilepath = job.get("map.input.file");
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,192,int numOfTrailingLegsToUse = job.getInt("mapred.outputformat.numOfTrailingLegs", 0);
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,228,protected abstract RecordWriter<K, V> getBaseRecordWriter(FileSystem fs,
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,229,Configuration job,
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,230,String name,
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleOutputFormat.java,231,Progressable arg3) throws IOException;
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleTextOutputFormat.java,23,import org.apache.hadoop.fs.FileSystem;
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleTextOutputFormat.java,28,import org.apache.hadoop.util.Progressable;
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleTextOutputFormat.java,40,throws IOException {
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleTextOutputFormat.java,44,try {
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleTextOutputFormat.java,45,return theTextOutputFormat.getRecordWriter(new TaskAttemptContext(conf, new TaskAttemptID()));
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleTextOutputFormat.java,49,return null;
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleTextOutputFormat.java,53,public RecordWriter<K, V> getRecordWriter(TaskAttemptContext job) throws IOException, InterruptedException {
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleTextOutputFormat.java,54,if (theTextOutputFormat == null) {
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleTextOutputFormat.java,55,theTextOutputFormat = new TextOutputFormat<K, V>();
core/src/main/java/org/apache/mahout/classifier/bayes/MultipleTextOutputFormat.java,57,return theTextOutputFormat.getRecordWriter(job);
core/src/main/java/org/apache/mahout/math/hadoop/similarity/RowSimilarityJob.java,265,rowPair.set(rowA, rowB, weightA, weightB);
core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java,100,|| defaultLabel.equals(classifiedLabel),
core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java,110,|| defaultLabel.equals(classifiedLabel),
core/src/main/java/org/apache/mahout/df/mapreduce/Builder.java,104,String tracker = conf.get("mapred.job.tracker", "local");
core/src/main/java/org/apache/mahout/df/mapreduce/Builder.java,105,if ("local".equals(tracker)) {
core/src/main/java/org/apache/mahout/df/mapreduce/Builder.java,106,log.warn("Hadoop running in 'local' mode, only one map task will be launched");
core/src/main/java/org/apache/mahout/df/mapreduce/Builder.java,107,return 1;
core/src/main/java/org/apache/mahout/classifier/sgd/ModelSerializer.java,43,import java.io.FileWriter;
core/src/main/java/org/apache/mahout/classifier/sgd/ModelSerializer.java,86,OutputStreamWriter out = new FileWriter(path);
examples/src/main/java/org/apache/mahout/classifier/sgd/LogisticModelParameters.java,23,import com.google.gson.GsonBuilder;
examples/src/main/java/org/apache/mahout/classifier/sgd/LogisticModelParameters.java,37,import java.io.FileReader;
examples/src/main/java/org/apache/mahout/classifier/sgd/LogisticModelParameters.java,152,InputStreamReader input = new FileReader(in);
examples/src/main/java/org/apache/mahout/classifier/sgd/TrainLogistic.java,34,import java.io.FileReader;
examples/src/main/java/org/apache/mahout/classifier/sgd/TrainLogistic.java,35,import java.io.FileWriter;
examples/src/main/java/org/apache/mahout/classifier/sgd/TrainLogistic.java,39,import java.net.URL;
examples/src/main/java/org/apache/mahout/classifier/sgd/TrainLogistic.java,102,OutputStreamWriter modelOutput = new FileWriter(outputFile);
examples/src/main/java/org/apache/mahout/classifier/sgd/TrainLogistic.java,300,InputStreamReader s;
examples/src/main/java/org/apache/mahout/classifier/sgd/TrainLogistic.java,302,URL resource = Resources.getResource(inputFile);
examples/src/main/java/org/apache/mahout/classifier/sgd/TrainLogistic.java,303,s = new InputStreamReader(resource.openStream());
examples/src/main/java/org/apache/mahout/classifier/sgd/TrainLogistic.java,305,s = new FileReader(inputFile);
examples/src/main/java/org/apache/mahout/classifier/sgd/TrainLogistic.java,307,return new BufferedReader(s);
examples/src/main/java/org/apache/mahout/classifier/sgd/TrainNewsGroups.java,45,import java.io.FileReader;
examples/src/main/java/org/apache/mahout/classifier/sgd/TrainNewsGroups.java,270,System.out.printf("%s\t%.1f\t%s\t%.1f\t%s\t%.1f\t%s\n", w.getFeature(), w.getWeight(), ngNames.get(w.getMaxImpact() + 1),
examples/src/main/java/org/apache/mahout/classifier/sgd/TrainNewsGroups.java,271,w.getCategory(1), w.getWeight(1), w.getCategory(2), w.getWeight(2));
examples/src/main/java/org/apache/mahout/classifier/sgd/TrainNewsGroups.java,279,BufferedReader reader = new BufferedReader(new FileReader(file));
examples/src/main/java/org/apache/mahout/clustering/display/DisplaySpectralKMeans.java,22,import java.io.FileWriter;
examples/src/main/java/org/apache/mahout/clustering/display/DisplaySpectralKMeans.java,23,import java.io.PrintWriter;
examples/src/main/java/org/apache/mahout/clustering/display/DisplaySpectralKMeans.java,59,FileWriter writer = new FileWriter(affinities.toString());
examples/src/main/java/org/apache/mahout/clustering/display/DisplaySpectralKMeans.java,60,PrintWriter out = new PrintWriter(writer);
examples/src/main/java/org/apache/mahout/clustering/display/DisplaySpectralKMeans.java,68,out.close();
examples/src/main/java/org/apache/mahout/clustering/minhash/LastfmDataConverter.java,30,import java.io.FileReader;
examples/src/main/java/org/apache/mahout/clustering/minhash/LastfmDataConverter.java,100,BufferedReader br = new BufferedReader(new FileReader(inputFile));
examples/src/main/java/org/apache/mahout/clustering/minhash/LastfmDataConverter.java,197,Map<String, List<Integer>> itemFeatures = convertToItemFeatures(args[0],
examples/src/main/java/org/apache/mahout/clustering/minhash/LastfmDataConverter.java,198,dataSet);
utils/src/main/java/org/apache/mahout/clustering/lda/LDAPrintTopics.java,21,import java.io.FileWriter;
utils/src/main/java/org/apache/mahout/clustering/lda/LDAPrintTopics.java,23,import java.io.PrintWriter;
utils/src/main/java/org/apache/mahout/clustering/lda/LDAPrintTopics.java,236,File out = new File(output, "topic-" + i);
utils/src/main/java/org/apache/mahout/clustering/lda/LDAPrintTopics.java,237,PrintWriter writer = new PrintWriter(new FileWriter(out));
utils/src/main/java/org/apache/mahout/clustering/lda/LDAPrintTopics.java,238,writer.println("Topic " + i);
utils/src/main/java/org/apache/mahout/clustering/lda/LDAPrintTopics.java,239,writer.println("===========");
utils/src/main/java/org/apache/mahout/clustering/lda/LDAPrintTopics.java,240,for (String word : topK) {
utils/src/main/java/org/apache/mahout/clustering/lda/LDAPrintTopics.java,241,writer.println(word);
utils/src/main/java/org/apache/mahout/clustering/lda/LDAPrintTopics.java,243,writer.close();
utils/src/main/java/org/apache/mahout/utils/SequenceFileDumper.java,20,import java.io.FileWriter;
utils/src/main/java/org/apache/mahout/utils/SequenceFileDumper.java,89,writer = new FileWriter(cmdLine.getValue(outputOpt).toString());
utils/src/main/java/org/apache/mahout/utils/clustering/ClusterDumper.java,21,import java.io.FileWriter;
utils/src/main/java/org/apache/mahout/utils/clustering/ClusterDumper.java,161,Writer writer = this.outputFile == null ? new OutputStreamWriter(System.out) : new FileWriter(this.outputFile);
utils/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,41,import java.io.FileWriter;
utils/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java,134,: new OutputStreamWriter(System.out);
utils/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,23,import java.io.FileReader;
utils/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,64,this(new FileReader(file), model);
utils/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java,23,import java.io.FileWriter;
utils/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java,176,vectorWriter = new JWriterVectorWriter(new BufferedWriter(new FileWriter(outFile)));
utils/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,21,import java.io.FileWriter;
utils/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,147,Writer writer = this.output == null ? new OutputStreamWriter(System.out) : new FileWriter(this.output);
utils/src/main/java/org/apache/mahout/utils/vectors/lucene/Driver.java,20,import java.io.BufferedWriter;
utils/src/main/java/org/apache/mahout/utils/vectors/lucene/Driver.java,23,import java.io.FileWriter;
utils/src/main/java/org/apache/mahout/utils/vectors/lucene/Driver.java,217,BufferedWriter writer = new BufferedWriter(new FileWriter(outFile));
utils/src/main/java/org/apache/mahout/utils/vectors/lucene/Driver.java,234,BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
utils/src/main/java/org/apache/mahout/utils/vectors/lucene/Driver.java,235,new FileOutputStream(dictOutFile), Charset.forName("UTF8")));
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,2,Copyright � 1999 CERN - European Organization for Nuclear Research.
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,3,Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,4,is hereby granted without fee, provided that the above copyright notice appear in all copies and
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,5,that both that copyright notice and this permission notice appear in supporting documentation.
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,6,CERN makes no representations about the suitability of this software for any purpose.
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,7,It is provided "as is" without expressed or implied warranty.
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,9,package org.apache.mahout.math.matrix.linalg;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,11,import org.apache.mahout.math.GenericPermuting;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,13,import org.apache.mahout.math.Swapper;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,14,import org.apache.mahout.math.matrix.DoubleMatrix1D;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,15,import org.apache.mahout.math.matrix.DoubleMatrix2D;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,29,public static final Algebra DEFAULT;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,39,private static final Algebra ZERO;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,42,private Property property;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,44,static {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,46,DEFAULT = new Algebra();
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,47,DEFAULT.property = Property.DEFAULT; // immutable property object
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,49,ZERO = new Algebra();
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,50,ZERO.property = Property.ZERO; // immutable property object
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,54,public Algebra() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,55,this(Property.DEFAULT.tolerance());
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,63,public Algebra(double tolerance) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,64,setProperty(new Property(tolerance));
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,83,public static double det(DoubleMatrix2D A) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,84,return lu(A).det();
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,88,static double hypot(double a, double b) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,89,double r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,90,if (Math.abs(a) > Math.abs(b)) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,91,r = b / a;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,92,r = Math.abs(a) * Math.sqrt(1 + r * r);
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,94,r = a / b;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,95,r = Math.abs(b) * Math.sqrt(1 + r * r);
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,97,r = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,99,return r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,103,private static LUDecomposition lu(DoubleMatrix2D matrix) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,104,return new LUDecomposition(matrix);
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,132,int size = A.size();
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,133,if (indexes.length != size) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,134,throw new IndexOutOfBoundsException("invalid permutation");
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,138,int i=size;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,139,int a;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,141,throw new IndexOutOfBoundsException("invalid permutation");
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,142,if (i<0) return; // nothing to permute
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,145,if (work == null || size > work.length) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,146,work = A.toArray();
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,148,A.toArray(work);
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,150,for (int i = size; --i >= 0;) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,151,A.setQuick(i, work[indexes[i]]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,210,int size = A.rows();
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,211,if (indexes.length != size) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,212,throw new IndexOutOfBoundsException("invalid permutation");
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,216,int i=size;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,217,int a;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,219,throw new IndexOutOfBoundsException("invalid permutation");
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,220,if (i<0) return; // nothing to permute
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,223,int columns = A.columns();
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,224,if (columns < size / 10) { // quicker
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,225,double[] doubleWork = new double[size];
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,226,for (int j = A.columns(); --j >= 0;) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,227,permute(A.viewColumn(j), indexes, doubleWork);
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,232,Swapper swapper = new Swapper() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,233,public void swap(int a, int b) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,234,A.viewRow(a).swap(A.viewRow(b));
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,238,GenericPermuting.permute(indexes, swapper, work, null);
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,248,public Property property() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,249,return property;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,267,public void setProperty(Property property) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,268,if (this == DEFAULT && property != this.property) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,269,throw new IllegalArgumentException("Attempted to modify immutable object.");
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,271,if (this == ZERO && property != this.property) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,272,throw new IllegalArgumentException("Attempted to modify immutable object.");
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,274,this.property = property;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,291,static DoubleMatrix2D trapezoidalLower(DoubleMatrix2D A) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,292,int rows = A.rows();
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,293,int columns = A.columns();
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,294,for (int r = rows; --r >= 0;) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,295,for (int c = columns; --c >= 0;) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,296,if (r < c) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,297,A.setQuick(r, c, 0);
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,301,return A;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,777,double r = Algebra.hypot(p, 1.0);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,805,r = Algebra.hypot(p, e[i]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecomposition.java,2,Copyright � 1999 CERN - European Organization for Nuclear Research.
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecomposition.java,3,Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecomposition.java,4,is hereby granted without fee, provided that the above copyright notice appear in all copies and
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecomposition.java,5,that both that copyright notice and this permission notice appear in supporting documentation.
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecomposition.java,6,CERN makes no representations about the suitability of this software for any purpose.
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecomposition.java,7,It is provided "as is" without expressed or implied warranty.
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecomposition.java,9,package org.apache.mahout.math.matrix.linalg;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecomposition.java,11,import org.apache.mahout.math.matrix.DoubleMatrix2D;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecomposition.java,28,private final LUDecompositionQuick quick;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecomposition.java,36,public LUDecomposition(DoubleMatrix2D a) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecomposition.java,37,quick = new LUDecompositionQuick(0); // zero tolerance for compatibility with Jama
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecomposition.java,38,quick.decompose(a.copy());
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecomposition.java,46,public double det() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecomposition.java,47,return quick.det();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecomposition.java,107,public DoubleMatrix2D solve(DoubleMatrix2D b) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecomposition.java,108,DoubleMatrix2D x = b.copy();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecomposition.java,109,quick.solve(x);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecomposition.java,110,return x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecomposition.java,121,public String toString() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecomposition.java,122,return quick.toString();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,2,Copyright 1999 CERN - European Organization for Nuclear Research.
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,3,Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,4,is hereby granted without fee, provided that the above copyright notice appear in all copies and
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,5,that both that copyright notice and this permission notice appear in supporting documentation.
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,6,CERN makes no representations about the suitability of this software for any purpose.
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,7,It is provided "as is" without expressed or implied warranty.
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,9,package org.apache.mahout.math.matrix.linalg;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,11,import org.apache.mahout.math.function.Mult;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,12,import org.apache.mahout.math.function.PlusMult;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,13,import org.apache.mahout.math.list.IntArrayList;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,14,import org.apache.mahout.math.matrix.DoubleMatrix1D;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,15,import org.apache.mahout.math.matrix.DoubleMatrix2D;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,17,import java.io.Serializable;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,24,private DoubleMatrix2D lu;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,27,private int pivsign;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,30,private int[] piv;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,32,private boolean isNonSingular;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,34,private final Algebra algebra;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,36,private transient double[] workDouble;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,37,private transient int[] work1;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,48,public LUDecompositionQuick(double tolerance) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,49,this.algebra = new Algebra(tolerance);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,58,public void decompose(DoubleMatrix2D A) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,60,lu = A;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,61,int m = A.rows();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,62,int n = A.columns();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,65,if (this.piv == null || this.piv.length != m) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,66,this.piv = new int[m];
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,68,for (int i = m; --i >= 0;) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,69,piv[i] = i;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,71,pivsign = 1;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,73,if (m * n == 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,74,setLU(lu);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,75,return; // nothing to do
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,79,DoubleMatrix1D[] luRows = new DoubleMatrix1D[m];
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,80,for (int i = 0; i < m; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,81,luRows[i] = lu.viewRow(i);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,84,IntArrayList nonZeroIndexes =
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,85,new IntArrayList(); // sparsity
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,86,DoubleMatrix1D luColj = lu.viewColumn(0).like();  // blocked column j
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,87,Mult multFunction = Mult.mult(0);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,90,int cutOff = 10;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,91,for (int j = 0; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,93,luColj.assign(lu.viewColumn(j));
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,96,int maxCardinality = m / cutOff; // == heuristic depending on speedup
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,97,luColj.getNonZeros(nonZeroIndexes, null, maxCardinality);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,98,int cardinality = nonZeroIndexes.size();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,99,boolean sparse = cardinality < maxCardinality;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,102,for (int i = 0; i < m; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,103,int kmax = Math.min(i, j);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,104,double s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,105,if (sparse) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,106,s = luRows[i].zDotProduct(luColj, 0, kmax, nonZeroIndexes);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,108,s = luRows[i].zDotProduct(luColj, 0, kmax);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,110,double before = luColj.getQuick(i);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,111,double after = before - s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,112,luColj.setQuick(i, after); // LUcolj is a copy
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,113,lu.setQuick(i, j, after);   // this is the original
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,114,if (sparse) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,115,if (before == 0 && after != 0) { // nasty bug fixed!
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,116,int pos = nonZeroIndexes.binarySearch(i);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,117,pos = -pos - 1;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,118,nonZeroIndexes.beforeInsert(pos, i);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,120,if (before != 0 && after == 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,121,nonZeroIndexes.remove(nonZeroIndexes.binarySearch(i));
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,127,int p = j;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,128,if (p < m) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,129,double max = Math.abs(luColj.getQuick(p));
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,130,for (int i = j + 1; i < m; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,131,double v = Math.abs(luColj.getQuick(i));
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,132,if (v > max) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,133,p = i;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,134,max = v;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,138,if (p != j) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,139,luRows[p].swap(luRows[j]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,140,int k = piv[p];
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,141,piv[p] = piv[j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,142,piv[j] = k;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,143,pivsign = -pivsign;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,147,double jj;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,148,if (j < m && (jj = lu.getQuick(j, j)) != 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,149,multFunction.setMultiplicator(1 / jj);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,150,lu.viewColumn(j).viewPart(j + 1, m - (j + 1)).assign(multFunction);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,154,setLU(lu);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,165,public void decompose(DoubleMatrix2D A, int semiBandwidth) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,166,if (!Property.isSquare(A) || semiBandwidth < 0 || semiBandwidth > 2) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,167,decompose(A);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,168,return;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,171,lu = A;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,172,int m = A.rows();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,173,int n = A.columns();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,176,if (this.piv == null || this.piv.length != m) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,177,this.piv = new int[m];
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,179,for (int i = m; --i >= 0;) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,180,piv[i] = i;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,182,pivsign = 1;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,184,if (m * n == 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,185,setLU(A);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,186,return; // nothing to do
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,190,if (semiBandwidth == 2) { // A is tridiagonal
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,192,if (n > 1) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,193,A.setQuick(1, 0, A.getQuick(1, 0) / A.getQuick(0, 0));
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,196,for (int i = 1; i < n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,197,double ei = A.getQuick(i, i) - A.getQuick(i, i - 1) * A.getQuick(i - 1, i);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,198,A.setQuick(i, i, ei);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,199,if (i < n - 1) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,200,A.setQuick(i + 1, i, A.getQuick(i + 1, i) / ei);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,204,setLU(A);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,212,public double det() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,213,int m = m();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,214,int n = n();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,215,if (m != n) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,216,throw new IllegalArgumentException("Matrix must be square.");
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,219,if (!isNonSingular) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,220,return 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,223,double det = (double) pivsign;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,224,for (int j = 0; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,225,det *= lu.getQuick(j, j);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,227,return det;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,235,protected double[] getDoublePivot() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,236,int m = m();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,237,double[] vals = new double[m];
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,238,for (int i = 0; i < m; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,239,vals[i] = (double) piv[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,241,return vals;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,249,public DoubleMatrix2D getL() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,250,return lowerTriangular(lu.copy());
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,258,public DoubleMatrix2D getLU() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,259,return lu.copy();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,267,public int[] getPivot() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,268,return piv;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,276,public DoubleMatrix2D getU() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,277,return upperTriangular(lu.copy());
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,285,public boolean isNonsingular() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,286,return isNonSingular;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,294,protected boolean isNonsingular(DoubleMatrix2D matrix) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,295,int m = matrix.rows();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,296,int n = matrix.columns();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,297,double epsilon = algebra.property().tolerance(); // consider numerical instability
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,298,for (int j = Math.min(n, m); --j >= 0;) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,300,if (Math.abs(matrix.getQuick(j, j)) <= epsilon) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,301,return false;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,304,return true;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,322,protected static DoubleMatrix2D lowerTriangular(DoubleMatrix2D A) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,323,int rows = A.rows();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,324,int columns = A.columns();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,325,int min = Math.min(rows, columns);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,326,for (int r = min; --r >= 0;) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,327,for (int c = min; --c >= 0;) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,328,if (r < c) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,329,A.setQuick(r, c, 0);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,331,A.setQuick(r, c, 1);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,335,if (columns > rows) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,336,A.viewPart(0, min, rows, columns - min).assign(0);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,339,return A;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,342,protected int m() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,343,return lu.rows();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,346,protected int n() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,347,return lu.columns();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,354,public void setLU(DoubleMatrix2D LU) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,355,this.lu = LU;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,356,this.isNonSingular = isNonsingular(LU);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,368,public void solve(DoubleMatrix1D B) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,369,Property.checkRectangular(lu);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,370,int m = m();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,371,int n = n();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,372,if (B.size() != m) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,373,throw new IllegalArgumentException("Matrix dimensions must agree.");
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,375,if (!this.isNonSingular) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,376,throw new IllegalArgumentException("Matrix is singular.");
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,382,if (this.workDouble == null || this.workDouble.length < m) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,383,this.workDouble = new double[m];
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,385,Algebra.permute(B, this.piv, this.workDouble);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,387,if (m * n == 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,388,return;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,392,for (int k = 0; k < n; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,393,double f = B.getQuick(k);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,394,if (f != 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,395,for (int i = k + 1; i < n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,397,double v = lu.getQuick(i, k);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,398,if (v != 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,399,B.setQuick(i, B.getQuick(i) - f * v);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,406,for (int k = n - 1; k >= 0; k--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,408,B.setQuick(k, B.getQuick(k) / lu.getQuick(k, k));
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,409,double f = B.getQuick(k);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,410,if (f != 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,411,for (int i = 0; i < k; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,413,double v = lu.getQuick(i, k);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,414,if (v != 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,415,B.setQuick(i, B.getQuick(i) - f * v);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,431,public void solve(DoubleMatrix2D B) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,432,Property.checkRectangular(lu);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,433,int m = m();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,434,int n = n();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,435,if (B.rows() != m) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,436,throw new IllegalArgumentException("Matrix row dimensions must agree.");
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,438,if (!this.isNonSingular) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,439,throw new IllegalArgumentException("Matrix is singular.");
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,445,if (this.work1 == null || this.work1.length < m) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,446,this.work1 = new int[m];
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,449,Algebra.permuteRows(B, this.piv, this.work1);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,451,if (m * n == 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,452,return;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,454,int nx = B.columns();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,457,DoubleMatrix1D[] brows = new DoubleMatrix1D[n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,458,for (int k = 0; k < n; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,459,brows[k] = B.viewRow(k);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,463,Mult div = Mult.div(0);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,464,PlusMult minusMult = PlusMult.minusMult(0);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,466,IntArrayList nonZeroIndexes =
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,467,new IntArrayList(); // sparsity
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,471,int cutOff = 10;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,472,for (int k = 0; k < n; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,474,bRowk.assign(brows[k]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,477,int maxCardinality = nx / cutOff; // == heuristic depending on speedup
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,478,bRowk.getNonZeros(nonZeroIndexes, null, maxCardinality);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,479,int cardinality = nonZeroIndexes.size();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,480,boolean sparse = cardinality < maxCardinality;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,482,for (int i = k + 1; i < n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,486,minusMult.setMultiplicator(-lu.getQuick(i, k));
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,487,if (minusMult.getMultiplicator() != 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,488,if (sparse) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,489,brows[i].assign(bRowk, minusMult, nonZeroIndexes);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,491,brows[i].assign(bRowk, minusMult);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,498,for (int k = n - 1; k >= 0; k--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,501,div.setMultiplicator(1 / lu.getQuick(k, k));
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,502,brows[k].assign(div);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,508,bRowk.assign(brows[k]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,511,int maxCardinality = nx / cutOff; // == heuristic depending on speedup
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,512,bRowk.getNonZeros(nonZeroIndexes, null, maxCardinality);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,513,int cardinality = nonZeroIndexes.size();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,514,boolean sparse = cardinality < maxCardinality;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,519,for (int i = 0; i < k; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,523,minusMult.setMultiplicator(-lu.getQuick(i, k));
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,524,if (minusMult.getMultiplicator() != 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,525,if (sparse) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,526,brows[i].assign(bRowk, minusMult, nonZeroIndexes);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,528,brows[i].assign(bRowk, minusMult);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,545,private void solveOld(DoubleMatrix2D B) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,546,Property.checkRectangular(LU);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,547,int m = m();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,548,int n = n();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,549,if (B.rows() != m) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,550,throw new IllegalArgumentException("Matrix row dimensions must agree.");
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,552,if (!this.isNonsingular()) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,553,throw new IllegalArgumentException("Matrix is singular.");
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,557,int nx = B.columns();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,559,if (this.work1 == null || this.work1.length < m) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,560,this.work1 = new int[m];
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,563,Algebra.permuteRows(B, this.piv, this.work1);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,566,for (int k = 0; k < n; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,567,for (int i = k + 1; i < n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,568,double mult = LU.getQuick(i, k);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,569,if (mult != 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,570,for (int j = 0; j < nx; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,572,B.setQuick(i, j, B.getQuick(i, j) - B.getQuick(k, j) * mult);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,578,for (int k = n - 1; k >= 0; k--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,579,double mult = 1 / LU.getQuick(k, k);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,580,if (mult != 1) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,581,for (int j = 0; j < nx; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,583,B.setQuick(k, j, B.getQuick(k, j) * mult);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,586,for (int i = 0; i < k; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,587,mult = LU.getQuick(i, k);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,588,if (mult != 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,589,for (int j = 0; j < nx; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,591,B.setQuick(i, j, B.getQuick(i, j) - B.getQuick(k, j) * mult);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,607,public String toString() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,608,StringBuilder buf = new StringBuilder();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,610,buf.append("-----------------------------------------------------------------------------\n");
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,611,buf.append("LUDecompositionQuick(A) --> isNonSingular(A), det(A), pivot, L, U, inverse(A)\n");
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,612,buf.append("-----------------------------------------------------------------------------\n");
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,614,buf.append("isNonSingular = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,615,String unknown = "Illegal operation or error: ";
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,616,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,617,buf.append(String.valueOf(this.isNonSingular));
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,619,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,622,buf.append("\ndet = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,623,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,624,buf.append(String.valueOf(this.det()));
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,626,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,629,buf.append("\npivot = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,630,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,631,buf.append(String.valueOf(new IntArrayList(this.piv)));
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,633,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,636,buf.append("\n\nL = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,637,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,638,buf.append(String.valueOf(this.getL()));
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,640,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,643,buf.append("\n\nU = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,644,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,645,buf.append(String.valueOf(this.getU()));
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,647,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,650,buf.append("\n\ninverse(A) = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,652,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,653,this.solve(identity);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,654,buf.append(String.valueOf(identity));
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,656,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,659,return buf.toString();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,667,protected static DoubleMatrix2D upperTriangular(DoubleMatrix2D A) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,668,int rows = A.rows();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,669,int columns = A.columns();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,670,int min = Math.min(rows, columns);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,671,for (int r = min; --r >= 0;) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,672,for (int c = min; --c >= 0;) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,673,if (r > c) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,674,A.setQuick(r, c, 0);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,678,if (columns < rows) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,679,A.viewPart(min, 0, rows - min, columns).assign(0);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,682,return A;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,416,public boolean isSingular(DoubleMatrix2D a) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,417,return Math.abs(Algebra.det(a)) < tolerance();
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,745,public String toString(DoubleMatrix2D a) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,746,Map<String, String> messages = new TreeMap<String, String>();
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,749,String name = "density";
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,750,String unknown = "Illegal operation or error: ";
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,751,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,752,messages.put(name, String.valueOf(density(a)));
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,754,messages.put(name, unknown + exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,758,name = "isDiagonal";
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,759,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,760,messages.put(name, String.valueOf(isDiagonal(a)));
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,762,messages.put(name, unknown + exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,766,name = "isDiagonallyDominantByRow";
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,767,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,768,messages.put(name, String.valueOf(isDiagonallyDominantByRow(a)));
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,770,messages.put(name, unknown + exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,774,name = "isDiagonallyDominantByColumn";
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,775,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,776,messages.put(name, String.valueOf(isDiagonallyDominantByColumn(a)));
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,778,messages.put(name, unknown + exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,781,name = "isIdentity";
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,782,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,783,messages.put(name, String.valueOf(isIdentity(a)));
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,785,messages.put(name, unknown + exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,788,name = "isLowerBidiagonal";
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,789,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,790,messages.put(name, String.valueOf(isLowerBidiagonal(a)));
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,792,messages.put(name, unknown + exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,795,name = "isLowerTriangular";
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,796,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,797,messages.put(name, String.valueOf(isLowerTriangular(a)));
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,799,messages.put(name, unknown + exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,802,name = "isNonNegative";
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,803,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,804,messages.put(name, String.valueOf(isNonNegative(a)));
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,806,messages.put(name, unknown + exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,809,name = "isOrthogonal";
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,810,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,811,messages.put(name, String.valueOf(isOrthogonal(a)));
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,813,messages.put(name, unknown + exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,816,name = "isPositive";
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,817,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,818,messages.put(name, String.valueOf(isPositive(a)));
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,820,messages.put(name, unknown + exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,823,name = "isSingular";
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,824,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,825,messages.put(name, String.valueOf(isSingular(a)));
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,827,messages.put(name, unknown + exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,830,name = "isSkewSymmetric";
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,831,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,832,messages.put(name, String.valueOf(isSkewSymmetric(a)));
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,834,messages.put(name, unknown + exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,837,name = "isSquare";
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,838,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,839,messages.put(name, String.valueOf(isSquare(a)));
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,841,messages.put(name, unknown + exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,844,name = "isStrictlyLowerTriangular";
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,845,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,846,messages.put(name, String.valueOf(isStrictlyLowerTriangular(a)));
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,848,messages.put(name, unknown + exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,851,name = "isStrictlyTriangular";
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,852,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,853,messages.put(name, String.valueOf(isStrictlyTriangular(a)));
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,855,messages.put(name, unknown + exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,858,name = "isStrictlyUpperTriangular";
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,859,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,860,messages.put(name, String.valueOf(isStrictlyUpperTriangular(a)));
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,862,messages.put(name, unknown + exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,865,name = "isSymmetric";
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,866,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,867,messages.put(name, String.valueOf(isSymmetric(a)));
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,869,messages.put(name, unknown + exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,872,name = "isTriangular";
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,873,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,874,messages.put(name, String.valueOf(isTriangular(a)));
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,876,messages.put(name, unknown + exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,879,name = "isTridiagonal";
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,880,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,881,messages.put(name, String.valueOf(isTridiagonal(a)));
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,883,messages.put(name, unknown + exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,886,name = "isUnitTriangular";
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,887,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,888,messages.put(name, String.valueOf(isUnitTriangular(a)));
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,890,messages.put(name, unknown + exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,893,name = "isUpperBidiagonal";
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,894,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,895,messages.put(name, String.valueOf(isUpperBidiagonal(a)));
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,897,messages.put(name, unknown + exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,900,name = "isUpperTriangular";
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,901,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,902,messages.put(name, String.valueOf(isUpperTriangular(a)));
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,904,messages.put(name, unknown + exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,907,name = "isZero";
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,908,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,909,messages.put(name, String.valueOf(isZero(a)));
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,911,messages.put(name, unknown + exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,914,name = "lowerBandwidth";
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,915,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,916,messages.put(name, String.valueOf(lowerBandwidth(a)));
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,918,messages.put(name, unknown + exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,921,name = "semiBandwidth";
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,922,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,923,messages.put(name, String.valueOf(semiBandwidth(a)));
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,925,messages.put(name, unknown + exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,928,name = "upperBandwidth";
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,929,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,930,messages.put(name, String.valueOf(upperBandwidth(a)));
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,932,messages.put(name, unknown + exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,936,int maxLength = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,937,for (String key : messages.keySet()) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,938,maxLength = Math.max(key.length(), maxLength);
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,940,String format = String.format(Locale.ENGLISH, "\\%%ds: \\%s\n", maxLength);
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,942,Formatter r = new Formatter();
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,943,for (Map.Entry<String, String> entry : messages.entrySet()) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,944,r.format(format, maxLength, entry.getKey(), entry.getValue());
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,946,return r.toString();
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,2,Copyright � 1999 CERN - European Organization for Nuclear Research.
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,3,Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,4,is hereby granted without fee, provided that the above copyright notice appear in all copies and
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,5,that both that copyright notice and this permission notice appear in supporting documentation.
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,6,CERN makes no representations about the suitability of this software for any purpose.
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,7,It is provided "as is" without expressed or implied warranty.
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,9,package org.apache.mahout.math.matrix.linalg;
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,11,import org.apache.mahout.math.function.Functions;
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,13,import org.apache.mahout.math.matrix.DoubleMatrix1D;
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,14,import org.apache.mahout.math.matrix.DoubleMatrix2D;
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,17,For an <tt>m x n</tt> matrix <tt>A</tt> with <tt>m >= n</tt>, the QR decomposition is an <tt>m x n</tt>
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,18,orthogonal matrix <tt>Q</tt> and an <tt>n x n</tt> upper triangular matrix <tt>R</tt> so that
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,19,<tt>A = Q*R</tt>.
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,20,<P>
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,21,The QR decompostion always exists, even if the matrix does not have
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,22,full rank, so the constructor will never fail.  The primary use of the
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,23,QR decomposition is in the least squares solution of nonsquare systems
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,24,of simultaneous linear equations.  This will fail if <tt>isFullRank()</tt>
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,25,returns <tt>false</tt>.
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,33,private final DoubleMatrix2D QR;
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,37,private final int m;
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,38,private final int n;
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,41,private final DoubleMatrix1D Rdiag;
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,51,public QRDecomposition(DoubleMatrix2D A) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,52,Property.checkRectangular(A);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,55,QR = A.copy();
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,56,m = A.rows();
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,57,n = A.columns();
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,58,Rdiag = A.like1D(n);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,63,DoubleMatrix1D[] QRcolumns = new DoubleMatrix1D[n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,64,DoubleMatrix1D[] QRcolumnsPart = new DoubleMatrix1D[n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,65,for (int k = 0; k < n; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,66,QRcolumns[k] = QR.viewColumn(k);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,67,QRcolumnsPart[k] = QR.viewColumn(k).viewPart(k, m - k);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,71,for (int k = 0; k < n; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,74,double nrm = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,77,for (int i = k; i < m; i++) { // fixes bug reported by hong.44@osu.edu
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,78,nrm = Algebra.hypot(nrm, QR.getQuick(i, k));
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,82,if (nrm != 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,84,if (QR.getQuick(k, k) < 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,85,nrm = -nrm;
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,87,QRcolumnsPart[k].assign(Functions.div(nrm));
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,89,for (int i = k; i < m; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,90,QR[i][k] /= nrm;
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,94,QR.setQuick(k, k, QR.getQuick(k, k) + 1);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,97,for (int j = k + 1; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,98,DoubleMatrix1D QRcolj = QR.viewColumn(j).viewPart(k, m - k);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,99,double s = QRcolumnsPart[k].zDotProduct(QRcolj);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,102,DoubleMatrix1D QRcolj = QR.viewColumn(j).viewPart(k,m-k);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,103,double s = QRcolumnsPart[k].zDotProduct(QRcolumns[j]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,104,double s = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,105,for (int i = k; i < m; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,106,s += QR[i][k]*QR[i][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,109,s = -s / QR.getQuick(k, k);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,112,for (int i = k; i < m; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,113,QR.setQuick(i, j, QR.getQuick(i, j) + s * QR.getQuick(i, k));
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,118,Rdiag.setQuick(k, -nrm);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,127,public DoubleMatrix2D getH() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,128,return Algebra.trapezoidalLower(QR.copy());
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,136,public DoubleMatrix2D getQ() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,137,DoubleMatrix2D Q = QR.like();
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,139,for (int k = n - 1; k >= 0; k--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,140,DoubleMatrix1D QRcolk = QR.viewColumn(k).viewPart(k, m - k);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,141,Q.setQuick(k, k, 1);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,142,for (int j = k; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,143,if (QR.getQuick(k, k) != 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,144,DoubleMatrix1D Qcolj = Q.viewColumn(j).viewPart(k, m - k);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,145,double s = QRcolk.zDotProduct(Qcolj);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,146,s = -s / QR.getQuick(k, k);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,147,Qcolj.assign(QRcolk, Functions.plusMult(s));
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,151,return Q;
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,159,public DoubleMatrix2D getR() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,160,DoubleMatrix2D R = QR.like(n, n);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,161,for (int i = 0; i < n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,162,for (int j = 0; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,163,if (i < j) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,164,R.setQuick(i, j, QR.getQuick(i, j));
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,166,R.setQuick(i, j, Rdiag.getQuick(i));
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,168,R.setQuick(i, j, 0);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,172,return R;
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,180,public boolean hasFullRank() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,181,for (int j = 0; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,182,if (Rdiag.getQuick(j) == 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,183,return false;
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,186,return true;
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,197,public DoubleMatrix2D solve(DoubleMatrix2D B) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,198,if (B.rows() != m) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,199,throw new IllegalArgumentException("Matrix row dimensions must agree.");
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,201,if (!this.hasFullRank()) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,202,throw new IllegalArgumentException("Matrix is rank deficient.");
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,206,int nx = B.columns();
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,207,DoubleMatrix2D X = B.copy();
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,210,for (int k = 0; k < n; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,211,for (int j = 0; j < nx; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,212,double s = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,213,for (int i = k; i < m; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,214,s += QR.getQuick(i, k) * X.getQuick(i, j);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,216,s = -s / QR.getQuick(k, k);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,217,for (int i = k; i < m; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,218,X.setQuick(i, j, X.getQuick(i, j) + s * QR.getQuick(i, k));
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,223,for (int k = n - 1; k >= 0; k--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,224,for (int j = 0; j < nx; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,225,X.setQuick(k, j, X.getQuick(k, j) / Rdiag.getQuick(k));
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,227,for (int i = 0; i < k; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,228,for (int j = 0; j < nx; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,229,X.setQuick(i, j, X.getQuick(i, j) - X.getQuick(k, j) * QR.getQuick(i, k));
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,233,return X.viewPart(0, 0, n, nx);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,244,public String toString() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,245,StringBuilder buf = new StringBuilder();
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,247,buf.append("-----------------------------------------------------------------\n");
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,248,buf.append("QRDecomposition(A) --> hasFullRank(A), H, Q, R, pseudo inverse(A)\n");
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,249,buf.append("-----------------------------------------------------------------\n");
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,251,buf.append("hasFullRank = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,252,String unknown = "Illegal operation or error: ";
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,253,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,254,buf.append(String.valueOf(this.hasFullRank()));
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,256,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,259,buf.append("\n\nH = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,260,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,261,buf.append(String.valueOf(this.getH()));
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,263,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,266,buf.append("\n\nQ = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,267,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,268,buf.append(String.valueOf(this.getQ()));
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,270,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,273,buf.append("\n\nR = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,274,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,275,buf.append(String.valueOf(this.getR()));
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,277,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,280,buf.append("\n\npseudo inverse(A) = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,281,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,284,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,287,return buf.toString();
core/src/main/java/org/apache/mahout/vectorizer/DictionaryVectorizer.java,152,startWordCounting(input, dictionaryJobPath, minSupport);
core/src/main/java/org/apache/mahout/vectorizer/DictionaryVectorizer.java,154,chunkSizeInMegabytes, new LongWritable(), maxTermDimension);
core/src/main/java/org/apache/mahout/vectorizer/DictionaryVectorizer.java,168,makePartialVectors(input, maxNGramSize, dictionaryChunk, partialVectorOutputPath,
core/src/main/java/org/apache/mahout/vectorizer/DictionaryVectorizer.java,172,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/vectorizer/DictionaryVectorizer.java,176,PartialVectorMerger.mergePartialVectors(partialVectorPaths, outputDir, normPower, logNormalize,
core/src/main/java/org/apache/mahout/vectorizer/DictionaryVectorizer.java,197,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/vectorizer/DictionaryVectorizer.java,271,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/vectorizer/DictionaryVectorizer.java,312,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/vectorizer/DocumentProcessor.java,72,public static void tokenizeDocuments(Path input, Class<? extends Analyzer> analyzerClass,
core/src/main/java/org/apache/mahout/vectorizer/DocumentProcessor.java,73,Path output) throws IOException, InterruptedException, ClassNotFoundException {
core/src/main/java/org/apache/mahout/vectorizer/DocumentProcessor.java,74,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,44,public final class SparseVectorsFromSequenceFiles {
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,143,return;
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,236,DocumentProcessor.tokenizeDocuments(inputDir, analyzerClass, tokenizedPath);
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,248,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,258,outputDir, chunkSize, minDf, maxDFPercent, norm, logNormalize,
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/CollocDriver.java,146,DocumentProcessor.tokenizeDocuments(input, analyzerClass, tokenizedPath);
core/src/main/java/org/apache/mahout/vectorizer/common/PartialVectorMerger.java,97,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/vectorizer/tfidf/TFIDFConverter.java,149,startDFCounting(input, wordCountPath);
core/src/main/java/org/apache/mahout/vectorizer/tfidf/TFIDFConverter.java,150,Pair<Long[], List<Path>> datasetFeatures = createDictionaryChunks(wordCountPath, output, chunkSizeInMegabytes);
core/src/main/java/org/apache/mahout/vectorizer/tfidf/TFIDFConverter.java,169,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/vectorizer/tfidf/TFIDFConverter.java,197,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/vectorizer/tfidf/TFIDFConverter.java,280,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/vectorizer/tfidf/TFIDFConverter.java,319,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/driver/MahoutDriver.java,144,if (arg.length() > 2 && arg.charAt(1) == 'D') { // '-Dkey=value' or '-Dkey=value1,value2,etc' case
core/src/main/java/org/apache/mahout/driver/MahoutDriver.java,152,if (args[i].length() > 0 && args[i].charAt(0) != '-') {
core/src/main/java/org/apache/mahout/driver/MahoutDriver.java,153,argValues.add(args[i]);
core/src/main/java/org/apache/mahout/driver/MahoutDriver.java,154,i++;
core/src/main/java/org/apache/mahout/driver/MahoutDriver.java,172,for (String arg : argMap.keySet()) {
core/src/main/java/org/apache/mahout/driver/MahoutDriver.java,174,if (argMap.get(arg).length > 0 && !argMap.get(arg)[0].trim().isEmpty()) {
core/src/main/java/org/apache/mahout/driver/MahoutDriver.java,175,arg += '=' + argMap.get(arg)[0].trim();
core/src/main/java/org/apache/mahout/driver/MahoutDriver.java,180,argsList.addAll(Arrays.asList(argMap.get(arg)));
core/src/main/java/org/apache/mahout/driver/MahoutDriver.java,185,long finish = System.currentTimeMillis();
math/src/main/java/org/apache/mahout/math/NamedVector.java,71,return delegate.asFormatString();
utils/src/main/java/org/apache/mahout/utils/vectors/VectorHelper.java,69,else {
core/src/main/java/org/apache/mahout/clustering/spectral/eigencuts/EigencutsDriver.java,61,addOption("input", "i", "Path to input affinity matrix data", true);
core/src/main/java/org/apache/mahout/clustering/spectral/eigencuts/EigencutsDriver.java,62,addOption("output", "o", "Output of clusterings", true);
core/src/main/java/org/apache/mahout/clustering/spectral/eigencuts/EigencutsDriver.java,84,run(getConf(), input, output, dimensions, halflife, epsilon, tau);
core/src/main/java/org/apache/mahout/clustering/spectral/eigencuts/EigencutsDriver.java,129,int overshoot = (int) ((double) dimensions * OVERSHOOT_MULTIPLIER);
core/src/main/java/org/apache/mahout/clustering/spectral/eigencuts/EigencutsDriver.java,131,Matrix eigenVectors = new DenseMatrix(overshoot, dimensions);
core/src/main/java/org/apache/mahout/clustering/spectral/eigencuts/EigencutsDriver.java,132,DistributedRowMatrix U = performEigenDecomposition(conf, L, dimensions, overshoot, eigenValues, eigenVectors, outputCalc);
core/src/main/java/org/apache/mahout/clustering/spectral/eigencuts/EigencutsDriver.java,134,eigenValues = eigenValues.subList(0, dimensions);
core/src/main/java/org/apache/mahout/driver/MahoutDriver.java,187,log.info("Program took " + (finish - start) + " ms");
core/src/main/java/org/apache/mahout/driver/MahoutDriver.java,210,log.warn("Unable to add class: " + classString, e);
core/src/main/java/org/apache/mahout/driver/MahoutDriver.java,212,log.warn("Unable to add class: " + classString, t);
examples/src/main/java/org/apache/mahout/clustering/display/DisplaySpectralKMeans.java,70,SpectralKMeansDriver.run(new Configuration(), affinities, output, 1100, 5, measure, convergenceDelta, maxIter);
core/src/main/java/org/apache/mahout/driver/MahoutDriver.java,96,Properties mainClasses = new Properties();
core/src/main/java/org/apache/mahout/driver/MahoutDriver.java,99,.getResourceAsStream("driver.classes.props");
core/src/main/java/org/apache/mahout/driver/MahoutDriver.java,101,try {
core/src/main/java/org/apache/mahout/driver/MahoutDriver.java,102,mainClasses.load(propsStream);
core/src/main/java/org/apache/mahout/driver/MahoutDriver.java,108,mainClasses.load(propsStream);
core/src/main/java/org/apache/mahout/driver/MahoutDriver.java,130,.getResourceAsStream(progName + ".props");
core/src/main/java/org/apache/mahout/driver/MahoutDriver.java,132,Properties mainProps = new Properties();
core/src/main/java/org/apache/mahout/driver/MahoutDriver.java,133,if (defaultsStream != null) { // can't find props file, use empty props.
core/src/main/java/org/apache/mahout/driver/MahoutDriver.java,134,mainProps.load(defaultsStream);
core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java,36,private final Collection<String> labels;
core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java,38,private final Map<String,Integer> labelMap = new HashMap<String,Integer>();
core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java,45,this.labels = labels;
core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java,59,return labels;
core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java,66,for (int i = 0; i < labels.size(); i++) {
core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java,83,for (int i = 0; i < labels.size(); i++) {
core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java,126,Preconditions.checkArgument(labels.size() == b.getLabels().size(), "The label sizes do not match");
core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java,127,for (String correctLabel : this.labels) {
core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java,128,for (String classifiedLabel : this.labels) {
core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java,142,for (String correctLabel : this.labels) {
core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java,144,.append('\t');
core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java,149,for (String correctLabel : this.labels) {
core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java,151,for (String classifiedLabel : this.labels) {
examples/src/main/java/org/apache/mahout/classifier/sgd/LogisticModelParameters.java,139,GsonBuilder gb = new GsonBuilder();
examples/src/main/java/org/apache/mahout/classifier/sgd/LogisticModelParameters.java,140,gb.registerTypeAdapter(Matrix.class, new MatrixTypeAdapter());
examples/src/main/java/org/apache/mahout/classifier/sgd/LogisticModelParameters.java,141,return gb.create().fromJson(in, LogisticModelParameters.class);
examples/src/main/java/org/apache/mahout/classifier/sgd/LogisticModelParameters.java,124,GsonBuilder gb = new GsonBuilder();
examples/src/main/java/org/apache/mahout/classifier/sgd/LogisticModelParameters.java,125,gb.registerTypeAdapter(Matrix.class, new MatrixTypeAdapter());
examples/src/main/java/org/apache/mahout/classifier/sgd/LogisticModelParameters.java,126,Gson gson = gb.setPrettyPrinting().create();
core/src/main/java/org/apache/mahout/classifier/bayes/TestClassifier.java,147,if (cmdLine.hasOption(classifierType)) {
core/src/main/java/org/apache/mahout/classifier/bayes/TestClassifier.java,151,if (cmdLine.hasOption(dataSource)) {
core/src/main/java/org/apache/mahout/classifier/bayes/TestClassifier.java,152,dataSource = (String) cmdLine.getValue(dataSource);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java,180,public void updateItemPref(long itemID, float prefDelta, boolean remove) {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java,181,if (!remove && stdDevWeighted) {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java,191,if (remove) {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java,192,average.removeDatum(prefDelta);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java,194,average.changeDatum(-prefDelta);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java,197,if (remove) {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java,198,average.removeDatum(-prefDelta);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java,200,average.changeDatum(prefDelta);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/SlopeOneRecommender.java,175,float prefDelta;
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/SlopeOneRecommender.java,177,Float oldPref = dataModel.getPreferenceValue(userID, itemID);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/SlopeOneRecommender.java,178,prefDelta = oldPref == null ? value : value - oldPref;
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/SlopeOneRecommender.java,180,prefDelta = value;
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/SlopeOneRecommender.java,183,diffStorage.updateItemPref(itemID, prefDelta, false);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/SlopeOneRecommender.java,192,diffStorage.updateItemPref(itemID, oldPref, true);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,255,public void updateItemPref(long itemID, float prefDelta, boolean remove) {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,263,if (remove) {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,264,average.removeDatum(prefDelta);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,266,average.changeDatum(-prefDelta);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,269,if (remove) {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,270,average.removeDatum(-prefDelta);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,272,average.changeDatum(prefDelta);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/jdbc/AbstractJDBCDiffStorage.java,71,private final String[] removeDiffSQLs;
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/jdbc/AbstractJDBCDiffStorage.java,84,String[] removeDiffSQLs,
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/jdbc/AbstractJDBCDiffStorage.java,96,AbstractJDBCComponent.checkNotNullAndLog("removeDiffSQLs", removeDiffSQLs);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/jdbc/AbstractJDBCDiffStorage.java,109,this.removeDiffSQLs = removeDiffSQLs;
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/jdbc/AbstractJDBCDiffStorage.java,232,public void updateItemPref(long itemID, float prefDelta, boolean remove) throws TasteException {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/jdbc/AbstractJDBCDiffStorage.java,236,if (remove) {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/jdbc/AbstractJDBCDiffStorage.java,237,doPartialUpdate(removeDiffSQLs[0], itemID, prefDelta, conn);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/jdbc/AbstractJDBCDiffStorage.java,238,doPartialUpdate(removeDiffSQLs[1], itemID, prefDelta, conn);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/jdbc/AbstractJDBCDiffStorage.java,240,doPartialUpdate(updateDiffSQLs[0], itemID, prefDelta, conn);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/jdbc/AbstractJDBCDiffStorage.java,241,doPartialUpdate(updateDiffSQLs[1], itemID, prefDelta, conn);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/jdbc/MySQLJDBCDiffStorage.java,131,+ countColumn + ") WHERE " + itemIDAColumn + "=?",
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/jdbc/MySQLJDBCDiffStorage.java,133,+ countColumn + ") WHERE " + itemIDBColumn + "=?"},
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/jdbc/MySQLJDBCDiffStorage.java,135,new String[] {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/jdbc/MySQLJDBCDiffStorage.java,137,+ avgColumn + " = " + avgColumn + " * ((" + countColumn + " + 1) / CAST("
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/jdbc/MySQLJDBCDiffStorage.java,138,+ countColumn + " AS DECIMAL)) + ? / CAST(" + countColumn + " AS DECIMAL) WHERE "
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/jdbc/MySQLJDBCDiffStorage.java,139,+ itemIDAColumn + "=?",
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/jdbc/MySQLJDBCDiffStorage.java,141,+ avgColumn + " = " + avgColumn + " * ((" + countColumn + " + 1) / CAST("
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/jdbc/MySQLJDBCDiffStorage.java,142,+ countColumn + " AS DECIMAL)) - ? / CAST(" + countColumn + " AS DECIMAL) WHERE "
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/jdbc/MySQLJDBCDiffStorage.java,143,+ itemIDBColumn + "=?"},
core/src/main/java/org/apache/mahout/cf/taste/recommender/slopeone/DiffStorage.java,71,void updateItemPref(long itemID, float prefDelta, boolean remove) throws TasteException;
core/src/main/java/org/apache/mahout/classifier/Classify.java,139,datastore = new HBaseBayesDatastore(modelBasePath, params);
core/src/main/java/org/apache/mahout/classifier/Classify.java,143,datastore = new HBaseBayesDatastore(modelBasePath, params);
core/src/main/java/org/apache/mahout/classifier/bayes/TestClassifier.java,177,params.set("basePath", modelBasePath);
core/src/main/java/org/apache/mahout/classifier/bayes/TestClassifier.java,226,datastore = new HBaseBayesDatastore(params.get("basePath"), params);
core/src/main/java/org/apache/mahout/classifier/bayes/TestClassifier.java,230,datastore = new HBaseBayesDatastore(params.get("basePath"), params);
core/src/main/java/org/apache/mahout/classifier/bayes/common/BayesParameters.java,25,public class BayesParameters extends Parameters {
core/src/main/java/org/apache/mahout/classifier/bayes/datastore/HBaseBayesDatastore.java,70,public HBaseBayesDatastore(String hbaseTable, Parameters params) {
core/src/main/java/org/apache/mahout/classifier/bayes/datastore/HBaseBayesDatastore.java,71,this.hbaseTable = hbaseTable;
core/src/main/java/org/apache/mahout/classifier/bayes/datastore/InMemoryBayesDatastore.java,29,import org.apache.mahout.common.Parameters;
core/src/main/java/org/apache/mahout/classifier/bayes/datastore/InMemoryBayesDatastore.java,56,private final Parameters params;
core/src/main/java/org/apache/mahout/classifier/bayes/datastore/InMemoryBayesDatastore.java,64,public InMemoryBayesDatastore(Parameters params) {
core/src/main/java/org/apache/mahout/classifier/bayes/datastore/InMemoryBayesDatastore.java,65,String basePath = params.get("basePath");
core/src/main/java/org/apache/mahout/classifier/bayes/datastore/InMemoryBayesDatastore.java,78,String basePath = params.get("basePath");
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesClassifierMapper.java,40,import org.apache.mahout.common.Parameters;
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesClassifierMapper.java,99,Parameters params = Parameters.fromString(job.get("bayes.parameters", ""));
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesClassifierMapper.java,122,datastore = new HBaseBayesDatastore(params.get("basePath"), params);
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesClassifierMapper.java,126,datastore = new HBaseBayesDatastore(params.get("basePath"), params);
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesClassifierMapper.java,138,gramSize = Integer.valueOf(params.get("gramSize"));
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesDriver.java,62,if (Boolean.parseBoolean(params.get("skipCleanup"))) {
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesThetaNormalizerMapper.java,100,Parameters params = Parameters.fromString(job.get("bayes.parameters", ""));
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesThetaNormalizerReducer.java,81,Parameters params = Parameters.fromString(job.get("bayes.parameters", ""));
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/cbayes/CBayesDriver.java,62,if (Boolean.parseBoolean(params.get("skipCleanup"))) {
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/cbayes/CBayesThetaNormalizerMapper.java,129,Parameters params = Parameters.fromString(job.get("bayes.parameters", ""));
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/cbayes/CBayesThetaNormalizerReducer.java,81,Parameters params = Parameters.fromString(job.get("bayes.parameters", ""));
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesFeatureMapper.java,35,import org.apache.mahout.common.Parameters;
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesFeatureMapper.java,173,Parameters params = Parameters.fromString(job.get("bayes.parameters", ""));
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesFeatureMapper.java,175,gramSize = Integer.valueOf(params.get("gramSize"));
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesFeatureReducer.java,32,import org.apache.mahout.common.Parameters;
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesFeatureReducer.java,43,private static final String DEFAULT_MIN_SUPPORT = "-1";
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesFeatureReducer.java,44,private static final String DEFAULT_MIN_DF = "-1";
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesFeatureReducer.java,115,Parameters params = Parameters.fromString(job.get("bayes.parameters", ""));
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesFeatureReducer.java,117,minSupport = Integer.valueOf(params.get("minSupport", DEFAULT_MIN_SUPPORT));
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesFeatureReducer.java,118,minDf      = Integer.valueOf(params.get("minDf", DEFAULT_MIN_DF));
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesTfIdfReducer.java,102,Parameters params = Parameters.fromString(job.get("bayes.parameters", ""));
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesWeightSummerReducer.java,95,Parameters params = Parameters.fromString(job.get("bayes.parameters", ""));
core/src/main/java/org/apache/mahout/common/Parameters.java,42,private Parameters(Map<String,String> params) {
core/src/main/java/org/apache/mahout/common/Parameters.java,62,conf
core/src/main/java/org/apache/mahout/common/Parameters.java,63,.set("io.serializations",
core/src/main/java/org/apache/mahout/common/Parameters.java,80,public static Parameters fromString(String serializedString) throws IOException {
core/src/main/java/org/apache/mahout/common/Parameters.java,82,conf
core/src/main/java/org/apache/mahout/common/Parameters.java,83,.set("io.serializations",
core/src/main/java/org/apache/mahout/common/Parameters.java,88,params = mapStringifier.fromString(serializedString);
core/src/main/java/org/apache/mahout/common/Parameters.java,89,return new Parameters(params);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/AggregatorReducer.java,52,Parameters params = Parameters.fromString(context.getConfiguration().get("pfp.parameters", ""));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelCountingMapper.java,57,Parameters params = Parameters.fromString(context.getConfiguration().get(PFPGrowth.PFP_PARAMETERS, ""));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,74,Parameters params = Parameters.fromString(context.getConfiguration().get(PFPGrowth.PFP_PARAMETERS, ""));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,112,Parameters params = Parameters.fromString(context.getConfiguration().get(PFPGrowth.PFP_PARAMETERS, ""));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,74,Parameters params = Parameters.fromString(context.getConfiguration().get(PFPGrowth.PFP_PARAMETERS, ""));
examples/src/main/java/org/apache/mahout/fpm/pfpgrowth/dataset/KeyBasedStringTupleMapper.java,74,Parameters params = Parameters.fromString(context.getConfiguration().get("job.parameters", ""));
examples/src/main/java/org/apache/mahout/fpm/pfpgrowth/dataset/KeyBasedStringTupleReducer.java,34,protected void reduce(Text key, Iterable<StringTuple> values, Context context) throws IOException,
examples/src/main/java/org/apache/mahout/fpm/pfpgrowth/dataset/KeyBasedStringTupleReducer.java,35,InterruptedException {
examples/src/main/java/org/apache/mahout/fpm/pfpgrowth/dataset/KeyBasedStringTupleReducer.java,71,Parameters params = Parameters.fromString(context.getConfiguration().get("job.parameters", ""));
core/src/main/java/org/apache/mahout/cf/taste/impl/model/file/FileDataModel.java,368,String[] tokens = delimiterPattern.split(line);
core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansClusterer.java,23,import org.apache.hadoop.conf.Configuration;
core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansClusterer.java,47,private final double convergenceDelta;
core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansClusterer.java,58,this.convergenceDelta = 0;
core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansClusterer.java,62,throws ClassNotFoundException, InstantiationException, IllegalAccessException {
core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansClusterer.java,63,ClassLoader ccl = Thread.currentThread().getContextClassLoader();
core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansClusterer.java,65,.asSubclass(DistanceMeasure.class).newInstance();
core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansClusterer.java,66,this.measure.configure(conf);
core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansClusterer.java,68,this.convergenceDelta = Double.parseDouble(conf.get(KMeansConfigKeys.CLUSTER_CONVERGENCE_KEY));
core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansClusterer.java,124,if (!computeConvergence(cluster)) {
core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansClusterer.java,235,public boolean computeConvergence(Cluster cluster) {
core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansClusterer.java,236,return cluster.computeConvergence(measure, convergenceDelta);
core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansReducer.java,39,protected void reduce(Text key, Iterable<ClusterObservations> values, Context context) throws IOException, InterruptedException {
core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansReducer.java,45,boolean converged = clusterer.computeConvergence(cluster);
core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansReducer.java,58,this.clusterer = new KMeansClusterer(conf);
core/src/main/java/org/apache/mahout/classifier/sgd/AbstractOnlineLogisticRegression.java,28,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/mahout/classifier/sgd/AbstractOnlineLogisticRegression.java,49,private int step = 0;
core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java,61,public class AdaptiveLogisticRegression implements OnlineLearner {
core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java,73,private EvolutionaryProcess<Wrapper> ep;
core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java,74,private State<Wrapper> best;
core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java,77,private State<Wrapper> seed;
core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java,83,private AdaptiveLogisticRegression() {
core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java,88,seed = new State<Wrapper>(new double[2], 10);
core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java,117,this.best = ep.parallelDo(new EvolutionaryProcess.Function<Wrapper>() {
core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java,119,public double apply(Wrapper x, double[] params) {
core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java,151,for (State<Wrapper> state : ep.getPopulation().subList(0, SURVIVORS)) {
core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java,191,ep.parallelDo(new EvolutionaryProcess.Function<Wrapper>() {
core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java,193,public double apply(Wrapper payload, double[] params) {
core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java,194,payload.getLearner().close();
core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java,195,return payload.getLearner().logLikelihood();
core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java,246,ep = new EvolutionaryProcess<Wrapper>(threadCount, poolSize, seed);
core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java,268,return best.getPayload().getLearner().auc();
core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java,272,public State<Wrapper> getBest() {
core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java,276,public void setBest(State<Wrapper> best) {
core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java,312,public EvolutionaryProcess<Wrapper> getEp() {
core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java,316,public void setEp(EvolutionaryProcess<Wrapper> ep) {
core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java,320,public State<Wrapper> getSeed() {
core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java,324,public void setSeed(State<Wrapper> seed) {
core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java,351,public static class Wrapper implements Payload<Wrapper> {
core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java,354,private Wrapper() {
core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java,380,public void freeze(State<Wrapper> s) {
core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java,392,public void setMappings(State<Wrapper> x) {
core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java,418,public static class TrainingExample {
core/src/main/java/org/apache/mahout/classifier/sgd/CrossFoldLearner.java,27,import org.apache.mahout.math.stats.OnlineAuc;
core/src/main/java/org/apache/mahout/classifier/sgd/CrossFoldLearner.java,40,public class CrossFoldLearner extends AbstractVectorClassifier implements OnlineLearner {
core/src/main/java/org/apache/mahout/classifier/sgd/ElasticBandPrior.java,25,private final double alphaByLambda;
core/src/main/java/org/apache/mahout/classifier/sgd/ElasticBandPrior.java,26,private final L1 l1;
core/src/main/java/org/apache/mahout/classifier/sgd/ElasticBandPrior.java,27,private final L2 l2;
core/src/main/java/org/apache/mahout/classifier/sgd/L2.java,25,private final double s2;
core/src/main/java/org/apache/mahout/classifier/sgd/L2.java,26,private final double s;
core/src/main/java/org/apache/mahout/classifier/sgd/ModelSerializer.java,32,import org.apache.mahout.classifier.AbstractVectorClassifier;
core/src/main/java/org/apache/mahout/classifier/sgd/ModelSerializer.java,101,public static AbstractVectorClassifier loadJsonFrom(Reader in, Class<? extends AbstractVectorClassifier> clazz) {
core/src/main/java/org/apache/mahout/classifier/sgd/ModelSerializer.java,165,Type stateType = new TypeToken<State<AdaptiveLogisticRegression.Wrapper>>() {}.getType();
core/src/main/java/org/apache/mahout/classifier/sgd/ModelSerializer.java,173,Type epType = new TypeToken<EvolutionaryProcess<AdaptiveLogisticRegression.Wrapper>>() {}.getType();
core/src/main/java/org/apache/mahout/classifier/sgd/ModelSerializer.java,174,r.setEp(jdc.<EvolutionaryProcess<AdaptiveLogisticRegression.Wrapper>>deserialize(x.get("ep"), epType));
core/src/main/java/org/apache/mahout/classifier/sgd/ModelSerializer.java,175,r.setSeed(jdc.<State<AdaptiveLogisticRegression.Wrapper>>deserialize(x.get("seed"), stateType));
core/src/main/java/org/apache/mahout/classifier/sgd/ModelSerializer.java,177,r.setBest(jdc.<State<AdaptiveLogisticRegression.Wrapper>>deserialize(x.get("best"), stateType));
core/src/main/java/org/apache/mahout/classifier/sgd/ModelSerializer.java,192,new TypeToken<EvolutionaryProcess<AdaptiveLogisticRegression.Wrapper>>() {}.getType()));
core/src/main/java/org/apache/mahout/classifier/sgd/ModelSerializer.java,195,Type stateType = new TypeToken<State<AdaptiveLogisticRegression.Wrapper>>() {}.getType();
core/src/main/java/org/apache/mahout/classifier/sgd/ModelSerializer.java,289,private static class StateTypeAdapter implements JsonSerializer<State<AdaptiveLogisticRegression.Wrapper>>,
core/src/main/java/org/apache/mahout/classifier/sgd/ModelSerializer.java,290,JsonDeserializer<State<AdaptiveLogisticRegression.Wrapper>> {
core/src/main/java/org/apache/mahout/classifier/sgd/ModelSerializer.java,292,public State<AdaptiveLogisticRegression.Wrapper> deserialize(
core/src/main/java/org/apache/mahout/classifier/sgd/ModelSerializer.java,298,State<AdaptiveLogisticRegression.Wrapper> r = new State<AdaptiveLogisticRegression.Wrapper>(params, omni);
core/src/main/java/org/apache/mahout/classifier/sgd/ModelSerializer.java,316,public JsonElement serialize(State<AdaptiveLogisticRegression.Wrapper> state,
core/src/main/java/org/apache/mahout/classifier/sgd/ModelSerializer.java,342,InstanceCreator<EvolutionaryProcess<AdaptiveLogisticRegression.Wrapper>>,
core/src/main/java/org/apache/mahout/classifier/sgd/ModelSerializer.java,343,JsonDeserializer<EvolutionaryProcess<AdaptiveLogisticRegression.Wrapper>>,
core/src/main/java/org/apache/mahout/classifier/sgd/ModelSerializer.java,344,JsonSerializer<EvolutionaryProcess<AdaptiveLogisticRegression.Wrapper>> {
core/src/main/java/org/apache/mahout/classifier/sgd/ModelSerializer.java,345,private static final Type STATE_TYPE = new TypeToken<State<AdaptiveLogisticRegression.Wrapper>>() {}.getType();
core/src/main/java/org/apache/mahout/classifier/sgd/ModelSerializer.java,348,public EvolutionaryProcess<AdaptiveLogisticRegression.Wrapper> createInstance(Type type) {
core/src/main/java/org/apache/mahout/classifier/sgd/ModelSerializer.java,349,return new EvolutionaryProcess<AdaptiveLogisticRegression.Wrapper>();
core/src/main/java/org/apache/mahout/classifier/sgd/ModelSerializer.java,353,public EvolutionaryProcess<AdaptiveLogisticRegression.Wrapper> deserialize(
core/src/main/java/org/apache/mahout/classifier/sgd/ModelSerializer.java,358,EvolutionaryProcess<AdaptiveLogisticRegression.Wrapper> r =
core/src/main/java/org/apache/mahout/classifier/sgd/ModelSerializer.java,359,new EvolutionaryProcess<AdaptiveLogisticRegression.Wrapper>();
core/src/main/java/org/apache/mahout/classifier/sgd/ModelSerializer.java,363,State<AdaptiveLogisticRegression.Wrapper> state = jsonDeserializationContext.deserialize(element, STATE_TYPE);
core/src/main/java/org/apache/mahout/classifier/sgd/ModelSerializer.java,370,public JsonElement serialize(EvolutionaryProcess<AdaptiveLogisticRegression.Wrapper> x,
core/src/main/java/org/apache/mahout/classifier/sgd/ModelSerializer.java,376,for (State<AdaptiveLogisticRegression.Wrapper> state : x.getPopulation()) {
core/src/main/java/org/apache/mahout/classifier/sgd/OnlineLogisticRegression.java,27,public class OnlineLogisticRegression extends AbstractOnlineLogisticRegression {
core/src/main/java/org/apache/mahout/classifier/sgd/OnlineLogisticRegression.java,41,private OnlineLogisticRegression() {
core/src/main/java/org/apache/mahout/classifier/sgd/PriorFunction.java,27,public interface PriorFunction {
core/src/main/java/org/apache/mahout/classifier/sgd/TPrior.java,26,private final double df;
core/src/main/java/org/apache/mahout/ep/EvolutionaryProcess.java,62,public class EvolutionaryProcess<T extends Payload<T>> {
core/src/main/java/org/apache/mahout/ep/EvolutionaryProcess.java,70,private List<State<T>> population;
core/src/main/java/org/apache/mahout/ep/EvolutionaryProcess.java,88,public EvolutionaryProcess(int threadCount, int populationSize, State<T> seed) {
core/src/main/java/org/apache/mahout/ep/EvolutionaryProcess.java,94,private void initializePopulation(int populationSize, State<T> seed) {
core/src/main/java/org/apache/mahout/ep/EvolutionaryProcess.java,101,public void add(State<T> value) {
core/src/main/java/org/apache/mahout/ep/EvolutionaryProcess.java,115,List<State<T>> parents = Lists.newArrayList(population.subList(0, survivors));
core/src/main/java/org/apache/mahout/ep/EvolutionaryProcess.java,135,public State<T> parallelDo(final Function<T> fn) throws InterruptedException, ExecutionException {
core/src/main/java/org/apache/mahout/ep/EvolutionaryProcess.java,136,Collection<Callable<State<T>>> tasks = Lists.newArrayList();
core/src/main/java/org/apache/mahout/ep/EvolutionaryProcess.java,137,for (final State<T> state : population) {
core/src/main/java/org/apache/mahout/ep/EvolutionaryProcess.java,138,tasks.add(new Callable<State<T>>() {
core/src/main/java/org/apache/mahout/ep/EvolutionaryProcess.java,140,public State<T> call() {
core/src/main/java/org/apache/mahout/ep/EvolutionaryProcess.java,148,List<Future<State<T>>> r = pool.invokeAll(tasks);
core/src/main/java/org/apache/mahout/ep/EvolutionaryProcess.java,152,State<T> best = null;
core/src/main/java/org/apache/mahout/ep/EvolutionaryProcess.java,153,for (Future<State<T>> future : r) {
core/src/main/java/org/apache/mahout/ep/EvolutionaryProcess.java,154,State<T> s = future.get();
core/src/main/java/org/apache/mahout/ep/EvolutionaryProcess.java,181,public List<State<T>> getPopulation() {
core/src/main/java/org/apache/mahout/ep/Mapping.java,22,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/mahout/ep/Mapping.java,28,public abstract class Mapping implements UnaryFunction {
core/src/main/java/org/apache/mahout/ep/Mapping.java,38,private SoftLimit() {
core/src/main/java/org/apache/mahout/ep/Mapping.java,57,private LogLimit() {
core/src/main/java/org/apache/mahout/ep/Mapping.java,73,private Exponential() {
core/src/main/java/org/apache/mahout/ep/Mapping.java,87,private Identity() {
core/src/main/java/org/apache/mahout/ep/Payload.java,31,public interface Payload<T> {
core/src/main/java/org/apache/mahout/ep/Payload.java,32,T copy();
core/src/main/java/org/apache/mahout/ep/State.java,47,public class State<T extends Payload<T>> implements Comparable<State<T>> {
core/src/main/java/org/apache/mahout/ep/State.java,64,private T payload;
core/src/main/java/org/apache/mahout/ep/State.java,82,public State<T> copy() {
core/src/main/java/org/apache/mahout/ep/State.java,83,State<T> r = new State<T>();
core/src/main/java/org/apache/mahout/ep/State.java,101,public State<T> mutate() {
core/src/main/java/org/apache/mahout/ep/State.java,109,State<T> r = this.copy();
core/src/main/java/org/apache/mahout/ep/State.java,175,return payload;
core/src/main/java/org/apache/mahout/ep/State.java,216,State<?> other = (State<?>) o;
core/src/main/java/org/apache/mahout/ep/State.java,232,public int compareTo(State<T> other) {
core/src/main/java/org/apache/mahout/ep/ThreadedEvolutionaryProcess.java,25,import java.util.LinkedList;
core/src/main/java/org/apache/mahout/ep/ThreadedEvolutionaryProcess.java,44,private static final PriorityQueue<State<?>> resultPopulation = new PriorityQueue<State<?>>();
core/src/main/java/org/apache/mahout/ep/ThreadedEvolutionaryProcess.java,51,private final Deque<State<?>> pending = new LinkedList<State<?>>();
core/src/main/java/org/apache/mahout/ep/ThreadedEvolutionaryProcess.java,52,private final Set<Future<State<?>>> working = Sets.newHashSet();
core/src/main/java/org/apache/mahout/ep/ThreadedEvolutionaryProcess.java,55,private final ExecutorCompletionService<State<?>> ecs;
core/src/main/java/org/apache/mahout/ep/ThreadedEvolutionaryProcess.java,62,ecs = new ExecutorCompletionService<State<?>>(pool);
core/src/main/java/org/apache/mahout/ep/ThreadedEvolutionaryProcess.java,74,State<?> s0 = new State(new double[dim], 0.5);
core/src/main/java/org/apache/mahout/ep/ThreadedEvolutionaryProcess.java,88,State<?> next = pending.removeFirst();
core/src/main/java/org/apache/mahout/ep/ThreadedEvolutionaryProcess.java,94,Future<State<?>> result = ecs.take();
core/src/main/java/org/apache/mahout/ep/ThreadedEvolutionaryProcess.java,96,State<?> r = result.get();
core/src/main/java/org/apache/mahout/ep/ThreadedEvolutionaryProcess.java,103,State<?>[] parents = new State[parentDepth];
core/src/main/java/org/apache/mahout/ep/ThreadedEvolutionaryProcess.java,104,Iterator<State<?>> j = resultPopulation.iterator();
core/src/main/java/org/apache/mahout/ep/ThreadedEvolutionaryProcess.java,111,State<?> tmp = parents[(k++) % parentDepth];
core/src/main/java/org/apache/mahout/ep/ThreadedEvolutionaryProcess.java,118,Future<State<?>> result = ecs.take();
core/src/main/java/org/apache/mahout/ep/ThreadedEvolutionaryProcess.java,134,public class EvalTask implements Callable<State<?>> {
core/src/main/java/org/apache/mahout/ep/ThreadedEvolutionaryProcess.java,136,private final State<?> what;
core/src/main/java/org/apache/mahout/ep/ThreadedEvolutionaryProcess.java,138,public EvalTask(Function f, State<?> what) {
core/src/main/java/org/apache/mahout/ep/ThreadedEvolutionaryProcess.java,149,public State<?> call() {
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,98,String matrixClassName = in.readUTF();
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,99,Matrix matrix;
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,100,try {
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,102,.newInstance();
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,104,throw new IllegalStateException(e);
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,106,throw new IllegalStateException(e);
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,108,throw new IllegalStateException(e);
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,111,return matrix;
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,116,out.writeUTF(matrix.getClass().getName());
core/src/main/java/org/apache/mahout/math/VectorWritable.java,76,boolean dense = vector.isDense();
core/src/main/java/org/apache/mahout/math/VectorWritable.java,77,boolean sequential = vector.isSequentialAccess();
core/src/main/java/org/apache/mahout/math/VectorWritable.java,78,boolean named = vector instanceof NamedVector;
core/src/main/java/org/apache/mahout/math/VectorWritable.java,80,boolean writesLaxPrecision = this.writesLaxPrecision;
core/src/main/java/org/apache/mahout/math/VectorWritable.java,84,| (writesLaxPrecision ? FLAG_LAX_PRECISION : 0));
core/src/main/java/org/apache/mahout/math/VectorWritable.java,86,Varint.writeUnsignedVarInt(vector.size(), out);
core/src/main/java/org/apache/mahout/math/VectorWritable.java,87,if (dense) {
core/src/main/java/org/apache/mahout/math/VectorWritable.java,88,for (Vector.Element element : vector) {
core/src/main/java/org/apache/mahout/math/VectorWritable.java,89,if (writesLaxPrecision) {
core/src/main/java/org/apache/mahout/math/VectorWritable.java,90,out.writeFloat((float) element.get());
core/src/main/java/org/apache/mahout/math/VectorWritable.java,92,out.writeDouble(element.get());
core/src/main/java/org/apache/mahout/math/VectorWritable.java,96,Varint.writeUnsignedVarInt(vector.getNumNondefaultElements(), out);
core/src/main/java/org/apache/mahout/math/VectorWritable.java,97,Iterator<Vector.Element> iter = vector.iterateNonZero();
core/src/main/java/org/apache/mahout/math/VectorWritable.java,98,if (sequential) {
core/src/main/java/org/apache/mahout/math/VectorWritable.java,99,int lastIndex = 0;
core/src/main/java/org/apache/mahout/math/VectorWritable.java,100,while (iter.hasNext()) {
core/src/main/java/org/apache/mahout/math/VectorWritable.java,101,Vector.Element element = iter.next();
core/src/main/java/org/apache/mahout/math/VectorWritable.java,102,int thisIndex = element.index();
core/src/main/java/org/apache/mahout/math/VectorWritable.java,104,Varint.writeUnsignedVarInt(thisIndex - lastIndex, out);
core/src/main/java/org/apache/mahout/math/VectorWritable.java,105,lastIndex = thisIndex;
core/src/main/java/org/apache/mahout/math/VectorWritable.java,106,if (writesLaxPrecision) {
core/src/main/java/org/apache/mahout/math/VectorWritable.java,107,out.writeFloat((float) element.get());
core/src/main/java/org/apache/mahout/math/VectorWritable.java,109,out.writeDouble(element.get());
core/src/main/java/org/apache/mahout/math/VectorWritable.java,113,while (iter.hasNext()) {
core/src/main/java/org/apache/mahout/math/VectorWritable.java,114,Vector.Element element = iter.next();
core/src/main/java/org/apache/mahout/math/VectorWritable.java,115,Varint.writeUnsignedVarInt(element.index(), out);
core/src/main/java/org/apache/mahout/math/VectorWritable.java,116,if (writesLaxPrecision) {
core/src/main/java/org/apache/mahout/math/VectorWritable.java,117,out.writeFloat((float) element.get());
core/src/main/java/org/apache/mahout/math/VectorWritable.java,119,out.writeDouble(element.get());
core/src/main/java/org/apache/mahout/math/VectorWritable.java,124,if (named) {
core/src/main/java/org/apache/mahout/math/VectorWritable.java,125,out.writeUTF(((NamedVector) vector).getName());
core/src/main/java/org/apache/mahout/math/VectorWritable.java,177,new VectorWritable(vector).write(out);
core/src/main/java/org/apache/mahout/math/stats/GlobalOnlineAuc.java,53,private final Matrix scores;
core/src/main/java/org/apache/mahout/math/stats/GlobalOnlineAuc.java,54,private final Vector averages;
core/src/main/java/org/apache/mahout/math/stats/GlobalOnlineAuc.java,55,private final Vector samples;
core/src/main/java/org/apache/mahout/math/stats/GlobalOnlineAuc.java,118,+ (m / count - averages.get(category)) / Math.min(windowSize, samples.get(category)));
core/src/main/java/org/apache/mahout/math/stats/OnlineAuc.java,26,public interface OnlineAuc {
examples/src/main/java/org/apache/mahout/classifier/sgd/TrainNewsGroups.java,159,for (File file : files.subList(0, 10000)) {
examples/src/main/java/org/apache/mahout/classifier/sgd/TrainNewsGroups.java,170,State<AdaptiveLogisticRegression.Wrapper> best = learningAlgorithm.getBest();
examples/src/main/java/org/apache/mahout/classifier/sgd/TrainNewsGroups.java,214,ModelSerializer.writeJson("/tmp/news-group-" + k + ".model", learningAlgorithm.getBest().getPayload().getLearner());
examples/src/main/java/org/apache/mahout/classifier/sgd/TrainNewsGroups.java,227,ModelSerializer.writeJson("/tmp/news-group.model", learningAlgorithm);
math/src/main/java/org/apache/mahout/math/SparseMatrix.java,20,import java.util.Map;
core/src/main/java/org/apache/mahout/clustering/minhash/HashFactory.java,35,Random seed = new Random(11);
core/src/main/java/org/apache/mahout/clustering/minhash/MinHashMapper.java,33,public class MinHashMapper extends Mapper<Text, Writable, Text, Writable> {
core/src/main/java/org/apache/mahout/clustering/minhash/MinHashMapper.java,46,protected void setup(Context context) throws IOException,  InterruptedException {
core/src/main/java/org/apache/mahout/clustering/minhash/MinHashMapper.java,98,for (int i = 0; i < numHashFunctions; i += keyGroups) {
core/src/main/java/org/apache/mahout/clustering/minhash/MinHashMapper.java,100,for (int j = 0; j < keyGroups && (i + j) < numHashFunctions; j++) {
core/src/main/java/org/apache/mahout/clustering/minhash/MinHashMapper.java,101,clusterIdBuilder.append(minHashValues[i + j]).append('-');
core/src/main/java/org/apache/mahout/clustering/minhash/MinHashReducer.java,32,public class MinHashReducer extends Reducer<Text, Writable, Text, Writable> {
core/src/main/java/org/apache/mahout/clustering/minhash/MinHashReducer.java,38,Accepted, Discarded
core/src/main/java/org/apache/mahout/clustering/minhash/MinHashReducer.java,54,throws IOException, InterruptedException {
core/src/main/java/org/apache/mahout/classifier/evaluation/Auc.java,160,while (i0 < n0 && v0 == tieScore) {
core/src/main/java/org/apache/mahout/classifier/evaluation/Auc.java,163,v0 = scores[0].get(i0);
core/src/main/java/org/apache/mahout/classifier/evaluation/Auc.java,168,while (i1 < n1 && v1 == tieScore) {
core/src/main/java/org/apache/mahout/classifier/evaluation/Auc.java,171,v1 = scores[1].get(i1);
core/src/main/java/org/apache/mahout/df/builder/DefaultTreeBuilder.java,104,Node loChild = build(rng, loSubset);
core/src/main/java/org/apache/mahout/df/builder/DefaultTreeBuilder.java,123,if (!alreadySelected) {
core/src/main/java/org/apache/mahout/df/builder/DefaultTreeBuilder.java,124,selected[best.getAttr()] = false;
