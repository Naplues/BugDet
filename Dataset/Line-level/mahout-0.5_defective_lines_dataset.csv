File,Line_number,SRC
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,64,private int slice;
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,73,if (slice >= numSlices()) {
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,76,int i = slice++;
math/src/main/java/org/apache/mahout/math/VectorView.java,125,Element decorated = vector.getElement(el.index());
math/src/main/java/org/apache/mahout/math/MatrixVectorView.java,116,return iterator();
math/src/main/java/org/apache/mahout/math/SparseRowMatrix.java,46,true,
math/src/main/java/org/apache/mahout/math/SparseRowMatrix.java,47,randomAccess);
examples/src/main/java/org/apache/mahout/cf/taste/example/bookcrossing/BookCrossingBooleanRecommender.java,57,public List<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer) throws TasteException {
examples/src/main/java/org/apache/mahout/cf/taste/example/bookcrossing/BookCrossingBooleanRecommender.java,58,return recommender.recommend(userID, howMany, rescorer);
examples/src/main/java/org/apache/mahout/cf/taste/example/bookcrossing/BookCrossingRecommender.java,57,return recommender.recommend(userID, howMany, rescorer);
examples/src/main/java/org/apache/mahout/cf/taste/example/kddcup/track1/Track1Recommender.java,50,return recommender.recommend(userID, howMany, rescorer);
examples/src/main/java/org/apache/mahout/cf/taste/example/kddcup/track2/Track2Recommender.java,56,return recommender.recommend(userID, howMany, rescorer);
core/src/main/java/org/apache/mahout/common/IOUtils.java,158,throw (Error) lastThr;
core/src/main/java/org/apache/mahout/common/IOUtils.java,162,.initCause(lastThr);
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,190,Configuration conf = TransposeJob.buildTransposeJobConf(initialConf, rowPath, outputPath, numRows);
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,191,JobClient.runJob(new JobConf(conf));
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,201,Path outputVectorTmpPath = new Path(outputTmpBasePath,
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,202,new Path(Long.toString(System.nanoTime())));
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,203,Configuration conf =
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,205,v,
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,206,numRows,
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,207,rowPath,
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,208,outputVectorTmpPath);
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,209,JobClient.runJob(new JobConf(conf));
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,210,Vector result = TimesSquaredJob.retrieveTimesSquaredOutputVector(conf);
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,225,Path outputVectorTmpPath = new Path(outputTmpBasePath,
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,226,new Path(Long.toString(System.nanoTime())));
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,227,Configuration conf =
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,228,TimesSquaredJob.createTimesSquaredJobConf(initialConf,
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,229,v,
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,230,rowPath,
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,231,outputVectorTmpPath);
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,232,JobClient.runJob(new JobConf(conf));
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,233,Vector result = TimesSquaredJob.retrieveTimesSquaredOutputVector(conf);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,27,import org.apache.hadoop.io.Writable;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,29,import org.apache.hadoop.mapred.FileInputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,30,import org.apache.hadoop.mapred.FileOutputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,31,import org.apache.hadoop.mapred.JobConf;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,32,import org.apache.hadoop.mapred.MapReduceBase;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,33,import org.apache.hadoop.mapred.Mapper;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,34,import org.apache.hadoop.mapred.OutputCollector;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,35,import org.apache.hadoop.mapred.Reducer;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,36,import org.apache.hadoop.mapred.Reporter;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,37,import org.apache.hadoop.mapred.SequenceFileInputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,38,import org.apache.hadoop.mapred.SequenceFileOutputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,51,import java.util.Iterator;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,65,return createTimesSquaredJobConf(new Configuration(), v, matrixInputPath, outputVectorPath);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,68,public static Configuration createTimesSquaredJobConf(Configuration initialConf,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,69,Vector v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,70,Path matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,71,Path outputVectorPath) throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,72,return createTimesSquaredJobConf(initialConf,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,73,v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,74,matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,75,outputVectorPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,76,TimesSquaredMapper.class,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,77,VectorSummingReducer.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,80,public static Configuration createTimesJobConf(Vector v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,81,int outDim,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,82,Path matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,83,Path outputVectorPath) throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,84,return createTimesJobConf(new Configuration(), v, outDim, matrixInputPath, outputVectorPath);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,87,public static Configuration createTimesJobConf(Configuration initialConf,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,88,Vector v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,89,int outDim,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,90,Path matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,91,Path outputVectorPath) throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,92,return createTimesSquaredJobConf(initialConf,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,93,v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,94,outDim,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,95,matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,96,outputVectorPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,97,TimesMapper.class,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,98,VectorSummingReducer.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,101,public static Configuration createTimesSquaredJobConf(Vector v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,102,Path matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,103,Path outputVectorPathBase,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,104,Class<? extends TimesSquaredMapper> mapClass,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,106,throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,107,return createTimesSquaredJobConf(new Configuration(), v, matrixInputPath, outputVectorPathBase, mapClass, redClass);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,110,public static Configuration createTimesSquaredJobConf(Configuration initialConf,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,111,Vector v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,112,Path matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,113,Path outputVectorPathBase,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,114,Class<? extends TimesSquaredMapper> mapClass,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,116,throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,117,return createTimesSquaredJobConf(initialConf,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,118,v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,119,v.size(),
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,120,matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,121,outputVectorPathBase,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,122,mapClass,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,123,redClass);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,126,public static Configuration createTimesSquaredJobConf(Vector v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,127,int outputVectorDim,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,128,Path matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,129,Path outputVectorPathBase,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,130,Class<? extends TimesSquaredMapper> mapClass,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,132,throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,134,return createTimesSquaredJobConf(new Configuration(),
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,135,v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,136,outputVectorDim,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,137,matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,138,outputVectorPathBase,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,139,mapClass,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,140,redClass);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,143,public static Configuration createTimesSquaredJobConf(Configuration initialConf,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,144,Vector v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,145,int outputVectorDim,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,146,Path matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,147,Path outputVectorPathBase,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,148,Class<? extends TimesSquaredMapper> mapClass,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,150,throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,151,JobConf conf = new JobConf(initialConf, TimesSquaredJob.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,152,conf.setJobName("TimesSquaredJob: " + matrixInputPath);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,159,SequenceFile.Writer inputVectorPathWriter = new SequenceFile.Writer(fs,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,160,conf, inputVectorPath, NullWritable.class, VectorWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,161,Writable inputVW = new VectorWritable(v);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,162,inputVectorPathWriter.append(NullWritable.get(), inputVW);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,165,DistributedCache.setCacheFiles(new URI[] {ivpURI}, conf);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,170,FileInputFormat.addInputPath(conf, matrixInputPath);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,171,conf.setInputFormat(SequenceFileInputFormat.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,172,FileOutputFormat.setOutputPath(conf, new Path(outputVectorPathBase, OUTPUT_VECTOR_FILENAME));
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,173,conf.setMapperClass(mapClass);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,174,conf.setMapOutputKeyClass(NullWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,175,conf.setMapOutputValueClass(VectorWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,176,conf.setReducerClass(redClass);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,177,conf.setCombinerClass(redClass);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,178,conf.setOutputFormat(SequenceFileOutputFormat.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,179,conf.setOutputKeyClass(NullWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,180,conf.setOutputValueClass(VectorWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,181,return conf;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,184,public static Vector retrieveTimesSquaredOutputVector(Configuration conf) throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,185,Path outputPath = FileOutputFormat.getOutputPath(new JobConf(conf));
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,186,Path outputFile = new Path(outputPath, "part-00000");
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,194,public static class TimesSquaredMapper<T extends WritableComparable> extends MapReduceBase
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,195,implements Mapper<T,VectorWritable, NullWritable,VectorWritable> {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,202,public void configure(JobConf conf) {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,217,: new DenseVector(outDim);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,224,public void map(T rowNum,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,225,VectorWritable v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,226,OutputCollector<NullWritable,VectorWritable> out,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,227,Reporter rep) throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,242,public void close() throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,250,public void map(IntWritable rowNum,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,251,VectorWritable v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,252,OutputCollector<NullWritable,VectorWritable> out,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,253,Reporter rep) {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,262,public static class VectorSummingReducer extends MapReduceBase
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,263,implements Reducer<NullWritable,VectorWritable,NullWritable,VectorWritable> {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,268,public void configure(JobConf conf) {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,276,public void reduce(NullWritable n,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,277,Iterator<VectorWritable> vectors,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,278,OutputCollector<NullWritable,VectorWritable> out,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,279,Reporter reporter) throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,280,while (vectors.hasNext()) {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,281,VectorWritable v = vectors.next();
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,286,out.collect(NullWritable.get(), new VectorWritable(outputVector));
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,21,import org.apache.hadoop.fs.FileSystem;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,24,import org.apache.hadoop.mapred.FileInputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,25,import org.apache.hadoop.mapred.FileOutputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,26,import org.apache.hadoop.mapred.JobConf;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,27,import org.apache.hadoop.mapred.MapReduceBase;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,28,import org.apache.hadoop.mapred.Mapper;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,29,import org.apache.hadoop.mapred.OutputCollector;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,30,import org.apache.hadoop.mapred.Reducer;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,31,import org.apache.hadoop.mapred.Reporter;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,32,import org.apache.hadoop.mapred.SequenceFileInputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,33,import org.apache.hadoop.mapred.SequenceFileOutputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,36,import org.apache.mahout.math.RandomAccessSparseVector;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,37,import org.apache.mahout.math.SequentialAccessSparseVector;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,38,import org.apache.mahout.math.Vector;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,42,import java.util.Iterator;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,49,public static final String NUM_ROWS_KEY = "SparseRowMatrix.numRows";
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,78,public static Configuration buildTransposeJobConf(Path matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,79,Path matrixOutputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,80,int numInputRows) throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,81,return buildTransposeJobConf(new Configuration(), matrixInputPath, matrixOutputPath, numInputRows);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,84,public static Configuration buildTransposeJobConf(Configuration initialConf,
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,85,Path matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,86,Path matrixOutputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,87,int numInputRows) throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,88,JobConf conf = new JobConf(initialConf, TransposeJob.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,89,conf.setJobName("TransposeJob: " + matrixInputPath + " transpose -> " + matrixOutputPath);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,91,matrixInputPath = fs.makeQualified(matrixInputPath);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,92,matrixOutputPath = fs.makeQualified(matrixOutputPath);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,93,conf.setInt(NUM_ROWS_KEY, numInputRows);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,95,FileInputFormat.addInputPath(conf, matrixInputPath);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,96,conf.setInputFormat(SequenceFileInputFormat.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,97,FileOutputFormat.setOutputPath(conf, matrixOutputPath);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,98,conf.setMapperClass(TransposeMapper.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,100,conf.setMapOutputKeyClass(IntWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,102,conf.setOutputFormat(SequenceFileOutputFormat.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,103,conf.setOutputKeyClass(IntWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,104,conf.setOutputValueClass(VectorWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,105,return conf;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,108,public static class TransposeMapper extends MapReduceBase
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,118,int row = r.get();
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,123,r.set(e.index());
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,35,public MatrixWritable() {
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,110,Matrix r;
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,112,r = new DenseMatrix(rows, columns);
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,117,for (int row = 0; row < rows; row++) {
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,118,r.viewRow(row).assign(VectorWritable.readVector(in));
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,121,return r;
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,125,public static void writeMatrix(DataOutput out, Matrix matrix) throws IOException {
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,128,if (row.isDense()) {
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,139,for (int i = 0; i < matrix.rowSize(); i++) {
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,140,VectorWritable.writeVector(out, matrix.viewRow(i), false);
math/src/main/java/org/apache/mahout/math/SparseMatrix.java,105,result[COL] = Math.max(result[COL], vectorEntry
math/src/main/java/org/apache/mahout/math/SparseMatrix.java,106,.getNumNondefaultElements());
math/src/main/java/org/apache/mahout/math/SparseMatrix.java,68,SparseMatrix clone = (SparseMatrix) super.clone();
core/src/main/java/org/apache/mahout/classifier/sgd/TPrior.java,20,import org.apache.commons.math.special.Gamma;
math/src/main/java/org/apache/mahout/math/SingularValueDecomposition.java,277,if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {
math/src/main/java/org/apache/mahout/math/SingularValueDecomposition.java,291,double t = (ks == p ? 0.0 : Math.abs(e[ks])) + (ks == k + 1 ? 0.0 : Math.abs(e[ks - 1]));
math/src/main/java/org/apache/mahout/math/SingularValueDecomposition.java,292,if (Math.abs(s[ks]) <= eps * t) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,20,import org.apache.mahout.math.list.DoubleArrayList;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,43,private boolean sorted = true;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,46,private DoubleArrayList starter = new DoubleArrayList(100);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,49,private final double[] q = new double[5];
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,59,sorted = false;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,67,if (n < 100) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,68,starter.add(sample);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,71,starter.add(sample);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,72,for (int i = 0; i <= 4; i++) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,73,q[i] = getQuartile(i);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,77,starter = null;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,80,q[0] = Math.min(sample, q[0]);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,81,q[4] = Math.max(sample, q[4]);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,83,double rate = 2 * (q[3] - q[1]) / n;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,84,q[1] += (Math.signum(sample - q[1]) - 0.5) * rate;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,86,q[3] += (Math.signum(sample - q[3]) + 0.5) * rate;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,88,if (q[1] < q[0]) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,89,q[1] = q[0];
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,92,if (q[3] > q[4]) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,93,q[3] = q[4];
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,114,private void sort() {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,115,if (!sorted && starter != null) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,117,sorted = true;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,126,if (n > 100 || starter == null) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,127,return q[i];
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,129,sort();
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,130,switch (i) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,131,case 0:
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,132,if (n == 0) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,133,throw new IllegalArgumentException("Must have at least one sample to estimate minimum value");
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,135,return starter.get(0);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,136,case 1:
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,137,case 2:
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,138,case 3:
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,139,if (n >= 2) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,140,double x = i * (n - 1) / 4.0;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,141,int k = (int) Math.floor(x);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,142,double u = x - k;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,143,return starter.get(k) * (1 - u) + starter.get(k + 1) * u;
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,145,throw new IllegalArgumentException("Must have at least two samples to estimate quartiles");
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,147,case 4:
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,148,if (n == 0) {
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,149,throw new IllegalArgumentException("Must have at least one sample to estimate maximum value");
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,151,return starter.get(starter.size() - 1);
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,152,default:
math/src/main/java/org/apache/mahout/math/stats/OnlineSummarizer.java,153,throw new IllegalArgumentException("Quartile number must be in the range [0..4] not " + i);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/TasteHadoopUtils.java,61,return 0x7FFFFFFF & Longs.hashCode(id);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/AllSimilarItemsCandidateItemsStrategy.java,39,FastIDSet doGetCandidateItems(long[] preferredItemIDs, DataModel dataModel) throws TasteException {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/AbstractCandidateItemsStrategy.java,44,abstract FastIDSet doGetCandidateItems(long[] preferredItemIDs, DataModel dataModel) throws TasteException;
core/src/main/java/org/apache/mahout/vectorizer/encoders/InteractionValueEncoder.java,22,import java.util.Arrays;
core/src/main/java/org/apache/mahout/vectorizer/encoders/InteractionValueEncoder.java,23,import java.util.Locale;
core/src/main/java/org/apache/mahout/vectorizer/encoders/InteractionValueEncoder.java,89,trace(String.format("%s:%s", Arrays.toString(originalForm1), Arrays.toString(originalForm2)), n);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/UJob.java,139,uHatPath, context.getConfiguration()));
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,81,StringBuilder result = new StringBuilder();
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,82,result.append('{');
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,83,Iterator<Element> it = iterateNonZero();
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,84,while (it.hasNext()) {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,85,Element e = it.next();
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,86,result.append(e.index());
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,87,result.append(':');
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,88,result.append(e.get());
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,94,return result.toString();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,150,StringBuilder result = new StringBuilder();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,151,result.append('{');
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,152,Iterator<Element> it = iterateNonZero();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,153,while (it.hasNext()) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,154,Element e = it.next();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,155,result.append(e.index());
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,156,result.append(':');
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,157,result.append(e.get());
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,158,result.append(',');
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,163,return result.toString();
core/src/main/java/org/apache/mahout/classifier/sgd/CsvRecordFactory.java,20,import com.google.common.base.CharMatcher;
core/src/main/java/org/apache/mahout/classifier/sgd/CsvRecordFactory.java,23,import com.google.common.base.Splitter;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,160,if (result.length() > 1) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,161,result.setCharAt(result.length() - 1, '}');
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,70,abuilder.withName("minSupport").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,74,abuilder.withName("analyzerName").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,78,abuilder.withName("chunkSize").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,82,abuilder.withName("weight").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,86,abuilder.withName("minDF").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,95,abuilder.withName("minLLR").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,97,.withShortName("ml").create();
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,100,abuilder.withName("numReducers").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,104,abuilder.withName("norm").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,106,+ "Must be greater or equal to 0.  The default is not to normalize").withShortName("n").create();
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,109,.withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,111,.withShortName("lnorm").create();
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,115,.withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,117,+ " (2 = bigrams, 3 = trigrams, etc) Default Value:1").withShortName("ng").create();
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,120,.withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,122,.withShortName("seq").create();
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,125,.withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,127,.withShortName("nv").create();
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,132,.create();
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,140,.create();
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,145,Path clusters = new Path(output, Cluster.INITIAL_CLUSTERS_DIR);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,148,log.info("Running KMeans");
core/src/main/java/org/apache/mahout/math/VectorWritable.java,20,import org.apache.hadoop.conf.Configured;
core/src/main/java/org/apache/mahout/math/VectorWritable.java,21,import org.apache.hadoop.io.Writable;
core/src/main/java/org/apache/mahout/math/VectorWritable.java,23,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/mahout/math/VectorWritable.java,41,public VectorWritable() {
core/src/main/java/org/apache/mahout/math/VectorWritable.java,149,Varint.writeUnsignedVarInt(vector.getNumNondefaultElements(), out);
examples/src/main/java/org/apache/mahout/classifier/sgd/LogisticModelParameters.java,95,if (lr != null) {
examples/src/main/java/org/apache/mahout/classifier/sgd/LogisticModelParameters.java,96,lr.close();
examples/src/main/java/org/apache/mahout/classifier/sgd/LogisticModelParameters.java,98,targetCategories = csv.getTargetCategories();
examples/src/main/java/org/apache/mahout/classifier/sgd/LogisticModelParameters.java,136,out.writeInt(targetCategories.size());
examples/src/main/java/org/apache/mahout/classifier/sgd/LogisticModelParameters.java,137,for (String category : targetCategories) {
examples/src/main/java/org/apache/mahout/classifier/sgd/LogisticModelParameters.java,138,out.writeUTF(category);
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,172,Path clustersOut = buildClusters(new Configuration(),
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,183,clusterData(input,
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,295,clusterData(input,
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,445,public static void clusterData(Path input,
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyDriver.java,431,clusterDataMR(input, clustersIn, output);
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyDriver.java,476,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelCountingMapper.java,45,for (String item : items) {
examples/src/main/java/org/apache/mahout/clustering/display/DisplayKMeans.java,62,int numClusters = 3;
examples/src/main/java/org/apache/mahout/clustering/display/DisplayKMeans.java,65,int maxIterations = 10;
examples/src/main/java/org/apache/mahout/clustering/display/DisplayKMeans.java,90,int maxIter = 10;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,537,for (int row = 0; row < size; row++) {
core/src/main/java/org/apache/mahout/common/TimingStatistics.java,81,return '\n' + "nCalls = " + nCalls + ";\n" + "sum = " + sumTime / 1000000000.0 + "s;\n"
core/src/main/java/org/apache/mahout/common/TimingStatistics.java,82,+ "min = " + minTime / 1000000.0 + "ms;\n" + "max = " + maxTime / 1000000.0 + "ms;\n"
core/src/main/java/org/apache/mahout/common/TimingStatistics.java,84,/ 1000000.0 + "ms;";
core/src/main/java/org/apache/mahout/common/TimingStatistics.java,91,public final class Call {
core/src/main/java/org/apache/mahout/common/TimingStatistics.java,92,private final long startTime = System.nanoTime();
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java,362,for (int i = 0; i < length - 1; i++) {
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/AggregateAndRecommendReducer.java,36,import org.apache.mahout.math.function.DoubleFunction;
core/src/main/java/org/apache/mahout/cf/taste/impl/common/RefreshHelper.java,22,import java.util.HashSet;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,23,import java.util.HashSet;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPGrowth.java,26,import java.util.HashSet;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FrequentPatternMaxHeap.java,20,import java.util.HashSet;
examples/src/main/java/org/apache/mahout/cf/taste/example/kddcup/track2/Track2Callable.java,23,import java.util.HashSet;
examples/src/main/java/org/apache/mahout/clustering/minhash/LastfmClusterEvaluator.java,26,import java.util.HashSet;
examples/src/main/java/org/apache/mahout/fpm/pfpgrowth/dataset/KeyBasedStringTupleCombiner.java,21,import java.util.HashSet;
examples/src/main/java/org/apache/mahout/fpm/pfpgrowth/dataset/KeyBasedStringTupleReducer.java,22,import java.util.HashSet;
core/src/main/java/org/apache/mahout/clustering/kmeans/RandomSeedGenerator.java,98,int indexToRemove = random.nextInt(currentSize); // evict one chosen randomly
core/src/main/java/org/apache/mahout/clustering/kmeans/RandomSeedGenerator.java,99,chosenTexts.remove(indexToRemove);
core/src/main/java/org/apache/mahout/clustering/kmeans/RandomSeedGenerator.java,100,chosenClusters.remove(indexToRemove);
core/src/main/java/org/apache/mahout/clustering/kmeans/RandomSeedGenerator.java,101,chosenTexts.add(newText);
core/src/main/java/org/apache/mahout/classifier/sgd/CrossFoldLearner.java,126,if (k == trackingKey % models.size()) {
core/src/main/java/org/apache/mahout/vectorizer/common/PartialVectorMergeReducer.java,70,VectorWritable vectorWritable = new VectorWritable(vector);
core/src/main/java/org/apache/mahout/vectorizer/common/PartialVectorMergeReducer.java,71,context.write(key, vectorWritable);
math/src/main/java/org/apache/mahout/math/MatrixVectorView.java,170,int[] offset = {row, column};
math/src/main/java/org/apache/mahout/math/MatrixVectorView.java,171,int[] size = {rowStride == 0 ? 1 : rowStride, columnStride == 0 ? 1 : columnStride};
math/src/main/java/org/apache/mahout/math/MatrixVectorView.java,172,return matrix.viewPart(offset, size);
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,287,StringBuilder buf = new StringBuilder();
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,289,buf.append(((NamedVector) v).getName()).append(" = ");
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,291,int nzero = 0;
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,292,Iterator<Vector.Element> iterateNonZero = v.iterateNonZero();
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,293,while (iterateNonZero.hasNext()) {
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,294,iterateNonZero.next();
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,295,nzero++;
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,298,if (nzero < v.size() || bindings != null) {
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,299,buf.append('[');
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,300,for (int i = 0; i < v.size(); i++) {
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,301,double elem = v.get(i);
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,302,if (elem == 0.0) {
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,303,continue;
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,305,String label;
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,306,if (bindings != null && (label = bindings[i]) != null) {
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,307,buf.append(label).append(':');
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,309,buf.append(i).append(':');
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,311,buf.append(String.format(Locale.ENGLISH, "%.3f", elem)).append(", ");
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,314,buf.append('[');
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,315,for (int i = 0; i < v.size(); i++) {
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,316,double elem = v.get(i);
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,317,buf.append(String.format(Locale.ENGLISH, "%.3f", elem)).append(", ");
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,320,if (buf.length() > 1) {
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,321,buf.setLength(buf.length() - 2);
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,323,buf.append(']');
core/src/main/java/org/apache/mahout/clustering/AbstractCluster.java,324,return buf.toString();
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,46,public class QRDecomposition {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,49,private final Matrix qr;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,52,private final int originalRows;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,53,private final int originalColumns;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,56,private final Vector rDiag;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,69,qr = a.clone();
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,70,originalRows = a.numRows();
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,71,originalColumns = a.numCols();
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,72,rDiag = new DenseVector(originalColumns);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,75,Vector[] QRcolumnsPart = new Vector[originalColumns];
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,76,for (int k = 0; k < originalColumns; k++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,77,QRcolumnsPart[k] = qr.viewColumn(k).viewPart(k, originalRows - k);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,81,for (int k = 0; k < originalColumns; k++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,84,double nrm = 0;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,87,for (int i = k; i < originalRows; i++) { // fixes bug reported by hong.44@osu.edu
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,88,nrm = Algebra.hypot(nrm, qr.getQuick(i, k));
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,92,if (nrm != 0.0) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,94,if (qr.getQuick(k, k) < 0) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,95,nrm = -nrm;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,97,QRcolumnsPart[k].assign(Functions.div(nrm));
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,99,for (int i = k; i < m; i++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,100,QR[i][k] /= nrm;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,104,qr.setQuick(k, k, qr.getQuick(k, k) + 1);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,107,for (int j = k + 1; j < originalColumns; j++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,108,Vector QRcolj = qr.viewColumn(j).viewPart(k, originalRows - k);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,109,double s = QRcolumnsPart[k].dot(QRcolj);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,112,DoubleMatrix1D QRcolj = QR.viewColumn(j).viewPart(k,m-k);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,113,double s = QRcolumnsPart[k].zDotProduct(QRcolumns[j]);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,114,double s = 0.0;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,115,for (int i = k; i < m; i++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,116,s += QR[i][k]*QR[i][j];
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,119,s = -s / qr.getQuick(k, k);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,122,for (int i = k; i < originalRows; i++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,123,qr.setQuick(i, j, qr.getQuick(i, j) + s * qr.getQuick(i, k));
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,128,rDiag.setQuick(k, -nrm);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,138,int columns = Math.min(originalColumns, originalRows);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,139,Matrix q = qr.like(originalRows, columns);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,140,for (int k = columns - 1; k >= 0; k--) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,141,Vector QRcolk = qr.viewColumn(k).viewPart(k, originalRows - k);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,142,q.set(k, k, 1);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,143,for (int j = k; j < columns; j++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,144,if (qr.get(k, k) != 0) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,145,Vector Qcolj = q.viewColumn(j).viewPart(k, originalRows - k);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,146,double s = -QRcolk.dot(Qcolj) / qr.get(k, k);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,147,Qcolj.assign(QRcolk, Functions.plusMult(s));
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,160,int rows = Math.min(originalRows, originalColumns);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,161,Matrix r = qr.like(rows, originalColumns);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,162,for (int i = 0; i < rows; i++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,163,for (int j = 0; j < originalColumns; j++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,164,if (i < j) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,165,r.setQuick(i, j, qr.getQuick(i, j));
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,167,r.setQuick(i, j, rDiag.getQuick(i));
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,169,r.setQuick(i, j, 0);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,182,for (int j = 0; j < originalColumns; j++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,183,if (rDiag.getQuick(j) == 0) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,184,return false;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,187,return true;
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,198,if (B.numRows() != originalRows) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,202,int columns = B.numCols();
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,203,Matrix x = B.like(originalColumns, columns);
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,212,for (int k = Math.min(originalColumns, originalRows) - 1; k >= 0; k--) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,218,for (int c = 0; c < columns; c++) {
math/src/main/java/org/apache/mahout/math/QRDecomposition.java,229,return String.format(Locale.ENGLISH, "QR(%d,%d,fullRank=%s)", originalColumns, originalRows, hasFullRank());
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,135,new SequenceFileDirIterator<IntWritable,VectorWritable>(new Path(rowPath, "*"),
core/src/main/java/org/apache/mahout/classifier/naivebayes/AbstractNaiveBayesClassifier.java,64,return score;
core/src/main/java/org/apache/mahout/common/IntPairWritable.java,35,implements WritableComparable<BinaryComparable>, Serializable, Cloneable {
core/src/main/java/org/apache/mahout/common/IntPairWritable.java,149,public static final class Comparator extends WritableComparator implements Serializable {
core/src/main/java/org/apache/mahout/math/VarLongWritable.java,27,public class VarLongWritable implements WritableComparable<VarLongWritable>, Cloneable {
core/src/main/java/org/apache/mahout/math/VarLongWritable.java,62,public VarLongWritable clone() {
core/src/main/java/org/apache/mahout/math/VarLongWritable.java,63,return new VarLongWritable(value);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/GramKeyGroupComparator.java,23,import java.io.Serializable;
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/GramKeyGroupComparator.java,28,class GramKeyGroupComparator extends WritableComparator implements Serializable {
math/src/main/java/org/apache/mahout/math/ssvd/EigenSolverWrapper.java,19,import org.apache.commons.math.linear.Array2DRowRealMatrix;
math/src/main/java/org/apache/mahout/math/ssvd/EigenSolverWrapper.java,20,import org.apache.commons.math.linear.EigenDecomposition;
math/src/main/java/org/apache/mahout/math/ssvd/EigenSolverWrapper.java,21,import org.apache.commons.math.linear.EigenDecompositionImpl;
math/src/main/java/org/apache/mahout/math/ssvd/EigenSolverWrapper.java,22,import org.apache.commons.math.linear.RealMatrix;
math/src/main/java/org/apache/mahout/math/ssvd/EigenSolverWrapper.java,47,EigenDecomposition evd2 = new EigenDecompositionImpl(
math/src/main/java/org/apache/mahout/math/ssvd/EigenSolverWrapper.java,48,new Array2DRowRealMatrix(bbt), 0);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/TreeClusteringRecommender2.java,363,if (similarity > queue.get(queue.size() - 1).getSimilarity()) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,24,import org.apache.hadoop.fs.FileStatus;
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,110,if (computeU) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,111,FileStatus[] uFiles = fs.globStatus(new Path(solver.getUPath()));
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,112,if (uFiles != null) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,113,for (FileStatus uf : uFiles) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,118,if (computeV) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,119,FileStatus[] vFiles = fs.globStatus(new Path(solver.getVPath()));
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,120,if (vFiles != null) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,121,for (FileStatus vf : vFiles) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,306,return endOfData();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,308,element.advanceIndex();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,309,return element;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,350,if (index > values.getIndices()[nextOffset]) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,361,if (index == values.getIndices()[nextOffset]) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,364,return OrderedIntDoubleMapping.DEFAULT_VALUE;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,375,if (index == values.getIndices()[nextOffset]) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,123,public double dotSelf() {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,125,Iterator<Element> iter = iterateNonZero();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,126,while (iter.hasNext()) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,127,double value = iter.next().get();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,183,public Vector logNormalize(double power, double normLength) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,255,return lengthSquared + v.getLengthSquared() - 2 * this.dot(v);
math/src/main/java/org/apache/mahout/math/AbstractVector.java,257,Vector randomlyAccessed;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,260,if (lengthSquared >= 0.0) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,262,randomlyAccessed = this;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,266,randomlyAccessed = v;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,269,while (it.hasNext()) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,270,Element e = it.next();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,271,double value = e.get();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,545,return size;
math/src/main/java/org/apache/mahout/math/DenseVector.java,98,public double dotSelf() {
math/src/main/java/org/apache/mahout/math/DenseVector.java,120,lengthSquared = -1.0;
math/src/main/java/org/apache/mahout/math/DenseVector.java,126,this.lengthSquared = -1;
math/src/main/java/org/apache/mahout/math/DenseVector.java,148,lengthSquared = -1;
math/src/main/java/org/apache/mahout/math/DenseVector.java,201,public double getLengthSquared() {
math/src/main/java/org/apache/mahout/math/DenseVector.java,202,if (lengthSquared >= 0.0) {
math/src/main/java/org/apache/mahout/math/DenseVector.java,203,return lengthSquared;
math/src/main/java/org/apache/mahout/math/DenseVector.java,206,double result = 0.0;
math/src/main/java/org/apache/mahout/math/DenseVector.java,207,for (double value : values) {
math/src/main/java/org/apache/mahout/math/DenseVector.java,208,result += value * value;
math/src/main/java/org/apache/mahout/math/DenseVector.java,211,lengthSquared = result;
math/src/main/java/org/apache/mahout/math/DenseVector.java,212,return result;
math/src/main/java/org/apache/mahout/math/DenseVector.java,322,lengthSquared = -1;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,134,lengthSquared = -1.0;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,275,lengthSquared = -1;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,189,lengthSquared = -1;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,338,lengthSquared = -1;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,374,lengthSquared = -1;
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDSolver.java,154,public void setcUHalfSigma(boolean cUHat) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDSolver.java,155,this.cUHalfSigma = cUHat;
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDSolver.java,158,public void setcVHalfSigma(boolean cVHat) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDSolver.java,159,this.cVHalfSigma = cVHat;
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/UJob.java,49,private static final String PROP_U_HALFSIGMA = "ssvd.u.halfsigma";
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/UJob.java,83,if (uHalfSigma) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/UJob.java,84,job.getConfiguration().set(PROP_U_HALFSIGMA, "y");
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/UJob.java,146,if (context.getConfiguration().get(PROP_U_HALFSIGMA) != null) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/VJob.java,49,private static final String PROP_V_HALFSIGMA = "ssvd.v.halfsigma";
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/VJob.java,84,if (vHalfSigma) {
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/VJob.java,85,job.getConfiguration().set(PROP_V_HALFSIGMA, "y");
math/src/main/java/org/apache/mahout/math/MatrixView.java,99,if (offset[ROW] < ROW) {
math/src/main/java/org/apache/mahout/math/MatrixView.java,100,throw new IndexException(offset[ROW], ROW);
math/src/main/java/org/apache/mahout/math/MatrixView.java,105,if (offset[COL] < ROW) {
math/src/main/java/org/apache/mahout/math/MatrixView.java,106,throw new IndexException(offset[COL], ROW);
math/src/main/java/org/apache/mahout/math/MatrixView.java,111,int[] origin = offset.clone();
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,22,import org.apache.commons.cli.Options;
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,47,Options ops = new Options();
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,48,new GenericOptionsParser(new Configuration(), ops, new String[0]);
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,49,org.apache.commons.cli.HelpFormatter fmt = new org.apache.commons.cli.HelpFormatter();
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,50,fmt.printHelp("<command> [Generic Options] [Job-Specific Options]",
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,57,formatter.printHelp();
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,59,formatter.printFooter();
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,61,pw.flush();
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,65,Options ops = new Options();
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,66,new GenericOptionsParser(new Configuration(), ops, new String[0]);
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,67,org.apache.commons.cli.HelpFormatter fmt = new org.apache.commons.cli.HelpFormatter();
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,68,fmt.printHelp("<command> [Generic Options] [Job-Specific Options]",
core/src/main/java/org/apache/mahout/common/CommandLineUtil.java,77,pw.flush();
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,46,private Job() {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,57,DistributionDescription description =
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,58,new DistributionDescription(GaussianClusterDistribution.class.getName(),
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,59,RandomAccessSparseVector.class.getName(),
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,60,null,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,61,60);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,109,DistributionDescription description =
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,110,new DistributionDescription(modelFactory, modelPrototype, distanceMeasure, 60);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,153,ClusterDumper clusterDumper =
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,154,new ClusterDumper(new Path(output, "clusters-" + maxIterations), new Path(output, "clusteredPoints"));
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,167,private static void printClusters(Iterable<List<DirichletCluster>> clusters, int significant) {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,168,int row = 0;
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,169,StringBuilder result = new StringBuilder(100);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,170,for (List<DirichletCluster> r : clusters) {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,171,result.append("sample=").append(row++).append("]= ");
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,172,for (int k = 0; k < r.size(); k++) {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,173,Model<VectorWritable> model = r.get(k).getModel();
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,174,if (model.count() > significant) {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,175,int total = (int) r.get(k).getTotalCount();
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,176,result.append('m').append(k).append('(').append(total).append(')').append(model).append(", ");
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,179,result.append('\n');
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,181,result.append('\n');
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,182,log.info(result.toString());
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,20,import java.io.IOException;
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,26,import org.apache.hadoop.fs.FileSystem;
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,29,import org.apache.mahout.clustering.Cluster;
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,51,private Job() {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,64,new EuclideanDistanceMeasure(), 80, 55, 10, (float) 2, 0.5);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,79,addOption(M_OPTION, M_OPTION,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,93,double convergenceDelta = Double
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,94,.parseDouble(getOption(DefaultOptionCreator.CONVERGENCE_DELTA_OPTION));
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,95,int maxIterations = Integer
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,96,.parseInt(getOption(DefaultOptionCreator.MAX_ITERATIONS_OPTION));
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,99,addOption(new DefaultOptionBuilder().withLongName(M_OPTION).withRequired(
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,100,true).withArgument(
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,102,.create()).withDescription(
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,104,.withShortName(M_OPTION).create());
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,113,run(getConf(), input, output, measure, t1, t2, maxIterations, fuzziness,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,114,convergenceDelta);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,121,private static Path finalClusterPath(Configuration conf, Path output,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,122,int maxIterations) throws IOException {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,123,FileSystem fs = FileSystem.get(conf);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,124,for (int i = maxIterations; i >= 0; i--) {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,125,Path clusters = new Path(output, "clusters-" + i);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,126,if (fs.exists(clusters)) {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,127,return clusters;
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,130,return null;
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,168,Path directoryContainingConvertedInput = new Path(output,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,169,DIRECTORY_CONTAINING_CONVERTED_INPUT);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,171,InputDriver.runJob(input, directoryContainingConvertedInput,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,174,CanopyDriver.run(new Configuration(), directoryContainingConvertedInput,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,177,FuzzyKMeansDriver.run(directoryContainingConvertedInput, new Path(output,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,178,Cluster.INITIAL_CLUSTERS_DIR), output, measure, convergenceDelta,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,179,maxIterations, fuzziness, true, true, 0.0, false);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,181,ClusterDumper clusterDumper = new ClusterDumper(finalClusterPath(conf,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/fuzzykmeans/Job.java,182,output, maxIterations), new Path(output, "clusteredPoints"));
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,20,import java.io.IOException;
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,24,import org.apache.hadoop.fs.FileSystem;
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,48,private Job() {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,89,double convergenceDelta = Double
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,90,.parseDouble(getOption(DefaultOptionCreator.CONVERGENCE_DELTA_OPTION));
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,91,int maxIterations = Integer
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,92,.parseInt(getOption(DefaultOptionCreator.MAX_ITERATIONS_OPTION));
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,100,int k = Integer
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,101,.parseInt(getOption(DefaultOptionCreator.NUM_CLUSTERS_OPTION));
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,106,run(getConf(), input, output, measure, t1, t2, convergenceDelta,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,107,maxIterations);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,139,Path directoryContainingConvertedInput = new Path(output,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,140,DIRECTORY_CONTAINING_CONVERTED_INPUT);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,142,InputDriver.runJob(input, directoryContainingConvertedInput,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,146,clusters = RandomSeedGenerator.buildRandom(conf,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,147,directoryContainingConvertedInput, clusters, k, measure);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,149,KMeansDriver.run(conf, directoryContainingConvertedInput, clusters, output,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,152,ClusterDumper clusterDumper = new ClusterDumper(finalClusterPath(conf,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,153,output, maxIterations), new Path(output, "clusteredPoints"));
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,194,Path directoryContainingConvertedInput = new Path(output,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,195,DIRECTORY_CONTAINING_CONVERTED_INPUT);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,197,InputDriver.runJob(input, directoryContainingConvertedInput,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,200,CanopyDriver.run(conf, directoryContainingConvertedInput, output, measure,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,203,KMeansDriver.run(conf, directoryContainingConvertedInput, new Path(output,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,204,Cluster.INITIAL_CLUSTERS_DIR), output, measure, convergenceDelta,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,207,ClusterDumper clusterDumper = new ClusterDumper(finalClusterPath(conf,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,208,output, maxIterations), new Path(output, "clusteredPoints"));
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,215,private static Path finalClusterPath(Configuration conf, Path output,
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,216,int maxIterations) throws IOException {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,217,FileSystem fs = FileSystem.get(conf);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,218,for (int i = maxIterations; i >= 0; i--) {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,219,Path clusters = new Path(output, "clusters-" + i);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,220,if (fs.exists(clusters)) {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,221,return clusters;
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,224,return null;
core/src/main/java/org/apache/mahout/common/distance/CosineDistanceMeasure.java,90,double lengthSquaredv =  v.getLengthSquared();
core/src/main/java/org/apache/mahout/classifier/naivebayes/ComplementaryNaiveBayesClassifier.java,25,public class ComplementaryNaiveBayesClassifier extends AbstractNaiveBayesClassifier {
core/src/main/java/org/apache/mahout/cf/taste/impl/eval/IRStatisticsImpl.java,37,Preconditions.checkArgument(fallOut >= 0.0 && fallOut <= 1.0, "Illegal nDCG: " + ndcg);
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,26,import org.apache.mahout.math.matrix.DoubleMatrix1D;
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,27,import org.apache.mahout.math.matrix.DoubleMatrix2D;
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,28,import org.apache.mahout.math.matrix.linalg.EigenvalueDecomposition;
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,143,EigenvalueDecomposition decomp = new EigenvalueDecomposition(triDiag);
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,145,DoubleMatrix2D eigenVects = decomp.getV();
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,146,DoubleMatrix1D eigenVals = decomp.getRealEigenvalues();
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,152,DoubleMatrix1D ejCol = eigenVects.viewColumn(i - row - 1);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,2,Copyright � 1999 CERN - European Organization for Nuclear Research.
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,3,Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,4,is hereby granted without fee, provided that the above copyright notice appear in all copies and
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,5,that both that copyright notice and this permission notice appear in supporting documentation.
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,6,CERN makes no representations about the suitability of this software for any purpose.
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,7,It is provided "as is" without expressed or implied warranty.
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,9,package org.apache.mahout.math.matrix.linalg;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,11,import org.apache.mahout.math.Matrix;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,12,import org.apache.mahout.math.MatrixSlice;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,13,import org.apache.mahout.math.Vector;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,14,import org.apache.mahout.math.matrix.DoubleMatrix1D;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,15,import org.apache.mahout.math.matrix.DoubleMatrix2D;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,16,import org.apache.mahout.math.matrix.impl.DenseDoubleMatrix1D;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,17,import org.apache.mahout.math.matrix.impl.DenseDoubleMatrix2D;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,19,import java.io.Serializable;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,21,import static org.apache.mahout.math.Algebra.hypot;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,22,import static org.apache.mahout.math.matrix.linalg.Property.checkSquare;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,26,public final class EigenvalueDecomposition implements Serializable {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,29,private final int n;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,32,private final double[] d;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,33,private final double[] e;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,36,private final double[][] V;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,39,private double[][] H;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,42,private double[] ort;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,46,private double cdivr;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,47,private double cdivi;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,49,public EigenvalueDecomposition(double[][] v) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,50,if(v.length != v[0].length) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,51,throw new IllegalArgumentException("Matrix must be square");
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,53,n = v.length;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,54,V = v;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,55,d = new double[n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,56,e = new double[n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,58,if (isSymmetric(v)) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,60,tred2();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,63,tql2();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,66,H = new double[n][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,67,ort = new double[n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,69,for (int j = 0; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,70,for (int i = 0; i < n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,71,H[i][j] = v[i][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,76,orthes();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,79,hqr2();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,83,public EigenvalueDecomposition(Matrix A) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,84,this(toArray(A));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,87,private static double[][] toArray(Matrix A) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,88,checkSquare(A);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,90,int n = A.numCols();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,91,double[][] V = new double[n][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,92,for(MatrixSlice slice : A) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,93,int row = slice.index();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,94,for(Vector.Element element : slice.vector()) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,95,V[row][element.index()] = element.get();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,98,return V;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,101,private static boolean isSymmetric(double[][] matrix) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,102,for(int i=0; i<matrix.length; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,103,for(int j=0; j<i; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,104,if(matrix[i][j] != matrix[j][i]) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,105,return false;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,109,return true;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,112,private static double[][] toArray(DoubleMatrix2D A) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,113,checkSquare(A);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,115,int n = A.columns();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,116,double[][] V = new double[n][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,117,for(int row = 0; row < A.rows(); row++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,118,for(int col = 0; col < A.rows(); col++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,119,V[row][col] = A.getQuick(row, col);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,122,return V;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,131,public EigenvalueDecomposition(DoubleMatrix2D A) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,132,this(toArray(A));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,135,private void cdiv(double xr, double xi, double yr, double yi) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,136,double r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,137,double d;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,138,if (Math.abs(yr) > Math.abs(yi)) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,139,r = yi / yr;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,140,d = yr + r * yi;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,141,cdivr = (xr + r * xi) / d;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,142,cdivi = (xi - r * xr) / d;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,144,r = yr / yi;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,145,d = yi + r * yr;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,146,cdivr = (r * xr + xi) / d;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,147,cdivi = (r * xi - xr) / d;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,156,public DoubleMatrix2D getD() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,157,double[][] D = new double[n][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,158,for (int i = 0; i < n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,159,for (int j = 0; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,160,D[i][j] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,162,D[i][i] = d[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,163,if (e[i] > 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,164,D[i][i + 1] = e[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,166,D[i][i - 1] = e[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,169,return new DenseDoubleMatrix2D(D);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,177,public DoubleMatrix1D getImagEigenvalues() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,178,return new DenseDoubleMatrix1D(e);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,186,public DoubleMatrix1D getRealEigenvalues() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,187,return new DenseDoubleMatrix1D(d);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,195,public DoubleMatrix2D getV() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,196,return new DenseDoubleMatrix2D(V);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,200,private void hqr2() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,208,int nn = this.n;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,209,int n = nn - 1;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,210,int low = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,211,int high = nn - 1;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,212,double eps = Math.pow(2.0, -52.0);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,216,double norm = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,217,for (int i = 0; i < nn; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,218,if (i < low || i > high) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,219,d[i] = H[i][i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,220,e[i] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,222,for (int j = Math.max(i - 1, 0); j < nn; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,223,norm += Math.abs(H[i][j]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,229,int iter = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,230,double y;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,231,double x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,232,double w;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,233,double z = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,234,double s = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,235,double r = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,236,double q = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,237,double p = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,238,double exshift = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,239,while (n >= low) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,243,int l = n;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,244,while (l > low) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,245,s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,246,if (s == 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,247,s = norm;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,249,if (Math.abs(H[l][l - 1]) < eps * s) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,250,break;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,252,l--;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,258,if (l == n) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,259,H[n][n] += exshift;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,260,d[n] = H[n][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,261,e[n] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,262,n--;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,263,iter = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,268,w = H[n][n - 1] * H[n - 1][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,269,p = (H[n - 1][n - 1] - H[n][n]) / 2.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,270,q = p * p + w;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,271,z = Math.sqrt(Math.abs(q));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,272,H[n][n] += exshift;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,273,H[n - 1][n - 1] += exshift;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,274,x = H[n][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,278,if (q >= 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,279,if (p >= 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,280,z = p + z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,282,z = p - z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,284,d[n - 1] = x + z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,285,d[n] = d[n - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,286,if (z != 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,287,d[n] = x - w / z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,289,e[n - 1] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,290,e[n] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,291,x = H[n][n - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,292,s = Math.abs(x) + Math.abs(z);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,293,p = x / s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,294,q = z / s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,295,r = Math.sqrt(p * p + q * q);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,296,p /= r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,297,q /= r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,301,for (int j = n - 1; j < nn; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,302,z = H[n - 1][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,303,H[n - 1][j] = q * z + p * H[n][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,304,H[n][j] = q * H[n][j] - p * z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,309,for (int i = 0; i <= n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,310,z = H[i][n - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,311,H[i][n - 1] = q * z + p * H[i][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,312,H[i][n] = q * H[i][n] - p * z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,317,for (int i = low; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,318,z = V[i][n - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,319,V[i][n - 1] = q * z + p * V[i][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,320,V[i][n] = q * V[i][n] - p * z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,326,d[n - 1] = x + p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,327,d[n] = x + p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,328,e[n - 1] = z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,329,e[n] = -z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,331,n -= 2;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,332,iter = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,340,x = H[n][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,341,y = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,342,w = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,343,if (l < n) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,344,y = H[n - 1][n - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,345,w = H[n][n - 1] * H[n - 1][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,350,if (iter == 10) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,351,exshift += x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,352,for (int i = low; i <= n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,353,H[i][i] -= x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,355,s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,356,x = y = 0.75 * s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,357,w = -0.4375 * s * s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,362,if (iter == 30) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,363,s = (y - x) / 2.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,364,s = s * s + w;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,365,if (s > 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,366,s = Math.sqrt(s);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,367,if (y < x) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,368,s = -s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,370,s = x - w / ((y - x) / 2.0 + s);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,371,for (int i = low; i <= n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,372,H[i][i] -= s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,374,exshift += s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,375,x = y = w = 0.964;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,383,int m = n - 2;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,384,while (m >= l) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,385,z = H[m][m];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,386,r = x - z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,387,s = y - z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,388,p = (r * s - w) / H[m + 1][m] + H[m][m + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,389,q = H[m + 1][m + 1] - z - r - s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,390,r = H[m + 2][m + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,391,s = Math.abs(p) + Math.abs(q) + Math.abs(r);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,392,p /= s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,393,q /= s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,394,r /= s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,395,if (m == l) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,396,break;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,399,< eps * Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1]))) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,400,break;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,402,m--;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,405,for (int i = m + 2; i <= n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,406,H[i][i - 2] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,407,if (i > m + 2) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,408,H[i][i - 3] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,414,for (int k = m; k <= n - 1; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,415,boolean notlast = k != n - 1;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,416,if (k != m) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,417,p = H[k][k - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,418,q = H[k + 1][k - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,419,r = notlast ? H[k + 2][k - 1] : 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,420,x = Math.abs(p) + Math.abs(q) + Math.abs(r);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,421,if (x != 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,422,p /= x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,423,q /= x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,424,r /= x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,427,if (x == 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,428,break;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,430,s = Math.sqrt(p * p + q * q + r * r);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,431,if (p < 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,432,s = -s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,434,if (s != 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,435,if (k != m) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,436,H[k][k - 1] = -s * x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,438,H[k][k - 1] = -H[k][k - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,440,p += s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,441,x = p / s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,442,y = q / s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,443,z = r / s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,444,q /= p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,445,r /= p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,449,for (int j = k; j < nn; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,450,p = H[k][j] + q * H[k + 1][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,451,if (notlast) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,452,p += r * H[k + 2][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,453,H[k + 2][j] -= p * z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,455,H[k][j] -= p * x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,456,H[k + 1][j] -= p * y;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,461,for (int i = 0; i <= Math.min(n, k + 3); i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,462,p = x * H[i][k] + y * H[i][k + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,463,if (notlast) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,464,p += z * H[i][k + 2];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,465,H[i][k + 2] -= p * r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,467,H[i][k] -= p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,468,H[i][k + 1] -= p * q;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,473,for (int i = low; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,474,p = x * V[i][k] + y * V[i][k + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,475,if (notlast) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,476,p += z * V[i][k + 2];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,477,V[i][k + 2] -= p * r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,479,V[i][k] -= p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,480,V[i][k + 1] -= p * q;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,489,if (norm == 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,490,return;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,493,for (n = nn - 1; n >= 0; n--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,494,p = d[n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,495,q = e[n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,499,double t;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,500,if (q == 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,501,int l = n;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,502,H[n][n] = 1.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,503,for (int i = n - 1; i >= 0; i--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,504,w = H[i][i] - p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,505,r = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,506,for (int j = l; j <= n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,507,r += H[i][j] * H[j][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,509,if (e[i] < 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,510,z = w;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,511,s = r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,513,l = i;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,514,if (e[i] == 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,515,if (w != 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,516,H[i][n] = -r / w;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,518,H[i][n] = -r / (eps * norm);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,524,x = H[i][i + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,525,y = H[i + 1][i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,526,q = (d[i] - p) * (d[i] - p) + e[i] * e[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,527,t = (x * s - z * r) / q;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,528,H[i][n] = t;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,529,if (Math.abs(x) > Math.abs(z)) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,530,H[i + 1][n] = (-r - w * t) / x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,532,H[i + 1][n] = (-s - y * t) / z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,538,t = Math.abs(H[i][n]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,539,if (eps * t * t > 1) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,540,for (int j = i; j <= n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,541,H[j][n] /= t;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,550,int l = n - 1;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,554,if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,555,H[n - 1][n - 1] = q / H[n][n - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,556,H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,558,cdiv(0.0, -H[n - 1][n], H[n - 1][n - 1] - p, q);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,559,H[n - 1][n - 1] = cdivr;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,560,H[n - 1][n] = cdivi;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,562,H[n][n - 1] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,563,H[n][n] = 1.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,564,for (int i = n - 2; i >= 0; i--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,565,double ra = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,566,double sa = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,567,for (int j = l; j <= n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,568,ra += H[i][j] * H[j][n - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,569,sa += H[i][j] * H[j][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,571,w = H[i][i] - p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,573,if (e[i] < 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,574,z = w;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,575,r = ra;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,576,s = sa;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,578,l = i;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,579,if (e[i] == 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,580,cdiv(-ra, -sa, w, q);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,581,H[i][n - 1] = cdivr;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,582,H[i][n] = cdivi;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,587,x = H[i][i + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,588,y = H[i + 1][i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,589,double vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,590,double vi = (d[i] - p) * 2.0 * q;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,591,if (vr == 0.0 && vi == 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,592,vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,594,cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,595,H[i][n - 1] = cdivr;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,596,H[i][n] = cdivi;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,597,if (Math.abs(x) > Math.abs(z) + Math.abs(q)) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,598,H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,599,H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,601,cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,602,H[i + 1][n - 1] = cdivr;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,603,H[i + 1][n] = cdivi;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,609,t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,610,if (eps * t * t > 1) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,611,for (int j = i; j <= n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,612,H[j][n - 1] /= t;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,613,H[j][n] /= t;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,623,for (int i = 0; i < nn; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,624,if (i < low || i > high) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,625,System.arraycopy(H[i], i, V[i], i, nn - i);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,631,for (int j = nn - 1; j >= low; j--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,632,for (int i = low; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,633,z = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,634,for (int k = low; k <= Math.min(j, high); k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,635,z += V[i][k] * H[k][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,637,V[i][j] = z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,643,private void orthes() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,649,int low = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,650,int high = n - 1;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,652,for (int m = low + 1; m <= high - 1; m++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,656,double scale = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,657,for (int i = m; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,658,scale += Math.abs(H[i][m - 1]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,660,if (scale != 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,664,double h = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,665,for (int i = high; i >= m; i--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,666,ort[i] = H[i][m - 1] / scale;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,667,h += ort[i] * ort[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,669,double g = Math.sqrt(h);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,670,if (ort[m] > 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,671,g = -g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,673,h -= ort[m] * g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,674,ort[m] -= g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,679,for (int j = m; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,680,double f = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,681,for (int i = high; i >= m; i--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,682,f += ort[i] * H[i][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,684,f /= h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,685,for (int i = m; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,686,H[i][j] -= f * ort[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,690,for (int i = 0; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,691,double f = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,692,for (int j = high; j >= m; j--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,693,f += ort[j] * H[i][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,695,f /= h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,696,for (int j = m; j <= high; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,697,H[i][j] -= f * ort[j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,700,ort[m] = scale * ort[m];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,701,H[m][m - 1] = scale * g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,707,for (int i = 0; i < n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,708,for (int j = 0; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,709,V[i][j] = i == j ? 1.0 : 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,713,for (int m = high - 1; m >= low + 1; m--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,714,if (H[m][m - 1] != 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,715,for (int i = m + 1; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,716,ort[i] = H[i][m - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,718,for (int j = m; j <= high; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,719,double g = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,720,for (int i = m; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,721,g += ort[i] * V[i][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,724,g = g / ort[m] / H[m][m - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,725,for (int i = m; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,726,V[i][j] += g * ort[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,741,public String toString() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,742,StringBuilder buf = new StringBuilder();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,744,buf.append("---------------------------------------------------------------------\n");
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,745,buf.append("EigenvalueDecomposition(A) --> D, V, realEigenvalues, imagEigenvalues\n");
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,746,buf.append("---------------------------------------------------------------------\n");
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,748,buf.append("realEigenvalues = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,749,String unknown = "Illegal operation or error: ";
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,750,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,751,buf.append(String.valueOf(this.getRealEigenvalues()));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,753,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,756,buf.append("\nimagEigenvalues = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,757,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,758,buf.append(String.valueOf(this.getImagEigenvalues()));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,760,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,763,buf.append("\n\nD = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,764,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,765,buf.append(String.valueOf(this.getD()));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,767,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,770,buf.append("\n\nV = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,771,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,772,buf.append(String.valueOf(this.getV()));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,774,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,777,return buf.toString();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,781,private void tql2() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,788,System.arraycopy(e, 1, e, 0, n - 1);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,789,e[n - 1] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,791,double f = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,792,double tst1 = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,793,double eps = Math.pow(2.0, -52.0);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,794,for (int l = 0; l < n; l++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,798,tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,799,int m = l;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,800,while (m < n) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,801,if (Math.abs(e[m]) <= eps * tst1) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,802,break;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,804,m++;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,810,if (m > l) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,811,int iter = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,812,do {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,817,double g = d[l];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,818,double p = (d[l + 1] - g) / (2.0 * e[l]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,819,double r = hypot(p, 1.0);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,820,if (p < 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,821,r = -r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,823,d[l] = e[l] / (p + r);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,824,d[l + 1] = e[l] * (p + r);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,825,double dl1 = d[l + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,826,double h = g - d[l];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,827,for (int i = l + 2; i < n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,828,d[i] -= h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,830,f += h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,834,p = d[m];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,835,double c = 1.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,836,double c2 = c;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,837,double c3 = c;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,838,double el1 = e[l + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,839,double s = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,840,double s2 = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,841,for (int i = m - 1; i >= l; i--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,842,c3 = c2;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,843,c2 = c;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,844,s2 = s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,845,g = c * e[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,846,h = c * p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,847,r = hypot(p, e[i]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,848,e[i + 1] = s * r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,849,s = e[i] / r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,850,c = p / r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,851,p = c * d[i] - s * g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,852,d[i + 1] = h + s * (c * g + s * d[i]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,856,for (int k = 0; k < n; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,857,h = V[k][i + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,858,V[k][i + 1] = s * V[k][i] + c * h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,859,V[k][i] = c * V[k][i] - s * h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,862,p = -s * s2 * c3 * el1 * e[l] / dl1;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,863,e[l] = s * p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,864,d[l] = c * p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,870,d[l] += f;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,871,e[l] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,876,for (int i = 0; i < n - 1; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,877,int k = i;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,878,double p = d[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,879,for (int j = i + 1; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,880,if (d[j] < p) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,881,k = j;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,882,p = d[j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,885,if (k != i) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,886,d[k] = d[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,887,d[i] = p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,888,for (int j = 0; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,889,p = V[j][i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,890,V[j][i] = V[j][k];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,891,V[j][k] = p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,898,private void tred2() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,905,System.arraycopy(V[n - 1], 0, d, 0, n);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,910,for (int i = n - 1; i > 0; i--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,914,double scale = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,915,for (int k = 0; k < i; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,916,scale += Math.abs(d[k]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,918,double h = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,919,if (scale == 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,920,e[i] = d[i - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,921,for (int j = 0; j < i; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,922,d[j] = V[i - 1][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,923,V[i][j] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,924,V[j][i] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,930,for (int k = 0; k < i; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,931,d[k] /= scale;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,932,h += d[k] * d[k];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,934,double f = d[i - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,935,double g = Math.sqrt(h);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,936,if (f > 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,937,g = -g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,939,e[i] = scale * g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,940,h -= f * g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,941,d[i - 1] = f - g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,942,for (int j = 0; j < i; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,943,e[j] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,948,for (int j = 0; j < i; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,949,f = d[j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,950,V[j][i] = f;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,951,g = e[j] + V[j][j] * f;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,952,for (int k = j + 1; k <= i - 1; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,953,g += V[k][j] * d[k];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,954,e[k] += V[k][j] * f;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,956,e[j] = g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,958,f = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,959,for (int j = 0; j < i; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,960,e[j] /= h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,961,f += e[j] * d[j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,963,double hh = f / (h + h);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,964,for (int j = 0; j < i; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,965,e[j] -= hh * d[j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,967,for (int j = 0; j < i; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,968,f = d[j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,969,g = e[j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,970,for (int k = j; k <= i - 1; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,971,V[k][j] -= f * e[k] + g * d[k];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,973,d[j] = V[i - 1][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,974,V[i][j] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,977,d[i] = h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,982,for (int i = 0; i < n - 1; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,983,V[n - 1][i] = V[i][i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,984,V[i][i] = 1.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,985,double h = d[i + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,986,if (h != 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,987,for (int k = 0; k <= i; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,988,d[k] = V[k][i + 1] / h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,990,for (int j = 0; j <= i; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,991,double g = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,992,for (int k = 0; k <= i; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,993,g += V[k][i + 1] * V[k][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,995,for (int k = 0; k <= i; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,996,V[k][j] -= g * d[k];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,1000,for (int k = 0; k <= i; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,1001,V[k][i + 1] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,1004,for (int j = 0; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,1005,d[j] = V[n - 1][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,1006,V[n - 1][j] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,1008,V[n - 1][n - 1] = 1.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,1009,e[0] = 0.0;
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,22,import java.util.Collection;
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,26,import org.apache.hadoop.fs.FileStatus;
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,28,import org.apache.hadoop.fs.FileUtil;
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,49,import org.apache.mahout.common.iterator.sequencefile.PathFilters;
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,53,import org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterator;
core/src/main/java/org/apache/mahout/cf/taste/hadoop/als/ParallelALSFactorizationJob.java,112,itemRatings.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/als/ParallelALSFactorizationJob.java,119,userRatings.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java,239,prePartialMultiply1.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java,251,prePartialMultiply2.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java,265,partialMultiply.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java,276,itemFiltering.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java,305,aggregateAndRecommend.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/pseudo/RecommenderJob.java,142,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/pseudo/RecommenderJob.java,143,return 0;
core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/SlopeOneAverageDiffsJob.java,71,prefsToDiffsJob.waitForCompletion(true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/SlopeOneAverageDiffsJob.java,87,diffsToAveragesJob.waitForCompletion(true);
core/src/main/java/org/apache/mahout/clustering/spectral/common/AffinityMatrixInputJob.java,62,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/clustering/spectral/common/MatrixDiagonalizeJob.java,70,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/clustering/spectral/common/UnitVectorizerJob.java,64,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/clustering/spectral/common/VectorMatrixMultiplicationJob.java,81,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/clustering/spectral/eigencuts/EigencutsAffinityCutsJob.java,83,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/clustering/spectral/eigencuts/EigencutsSensitivityJob.java,122,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,215,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,285,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,358,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/ga/watchmaker/MahoutEvaluator.java,77,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/vectorizer/DictionaryVectorizer.java,301,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/vectorizer/DictionaryVectorizer.java,337,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/vectorizer/DocumentProcessor.java,93,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/CollocDriver.java,238,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/CollocDriver.java,278,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/vectorizer/common/PartialVectorMerger.java,129,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/vectorizer/tfidf/TFIDFConverter.java,316,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/vectorizer/tfidf/TFIDFConverter.java,350,job.waitForCompletion(true);
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorDriver.java,196,job.waitForCompletion(true);
examples/src/main/java/org/apache/mahout/fpm/pfpgrowth/dataset/KeyBasedStringTupleGrouper.java,72,job.waitForCompletion(true);
examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/hadoop/CDMahoutEvaluator.java,80,job.waitForCompletion(true);
examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/tool/CDInfosTool.java,88,job.waitForCompletion(true);
examples/src/main/java/org/apache/mahout/text/WikipediaToSequenceFile.java,201,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/clustering/lda/LDADriver.java,181,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/clustering/lda/LDADriver.java,335,for (FileStatus fileStatus : FileSystem.get(conf).globStatus(new Path(input, "part-*"))) {
core/src/main/java/org/apache/mahout/clustering/lda/LDADriver.java,337,SequenceFile.Reader reader = new SequenceFile.Reader(FileSystem.get(conf), inputPart, conf);
core/src/main/java/org/apache/mahout/clustering/lda/LDADriver.java,479,SequenceFile.Reader reader = new SequenceFile.Reader(FileSystem.get(conf), input, conf);
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyDriver.java,354,converged = FileSystem.get(new Configuration()).exists(controlOut);
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyReducer.java,65,FileSystem.get(conf).createNewFile(path);
core/src/main/java/org/apache/mahout/clustering/spectral/common/VectorCache.java,57,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/clustering/spectral/common/VectorMatrixMultiplicationJob.java,64,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/FPGrowthDriver.java,183,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/ga/watchmaker/MahoutEvaluator.java,70,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,106,rowPath = FileSystem.get(conf).makeQualified(inputPath);
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,107,outputTmpBasePath = FileSystem.get(conf).makeQualified(outputTmpPath);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,153,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,90,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/DistributedLanczosSolver.java,225,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/EigenVerificationJob.java,190,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDCli.java,94,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDSolver.java,245,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/SSVDSolver.java,367,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/UJob.java,134,FileSystem fs = FileSystem.get(context.getConfiguration());
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/VJob.java,128,FileSystem fs = FileSystem.get(context.getConfiguration());
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/FPGrowthDriver.java,192,FPGrowth<String> fp = new FPGrowth<String>();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/FPGrowthDriver.java,193,Collection<String> features = new HashSet<String>();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/MultiTransactionTreeIterator.java,29,public final class MultiTransactionTreeIterator extends AbstractIterator<List<Integer>> {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/MultiTransactionTreeIterator.java,31,private final Iterator<Pair<List<Integer>,Long>> pIterator;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/MultiTransactionTreeIterator.java,32,private List<Integer> current;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/MultiTransactionTreeIterator.java,36,public MultiTransactionTreeIterator(Iterator<Pair<List<Integer>,Long>> iterator) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/MultiTransactionTreeIterator.java,41,protected List<Integer> computeNext() {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/MultiTransactionTreeIterator.java,44,Pair<List<Integer>,Long> nextValue = pIterator.next();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,74,public static final String SORTED_OUTPUT = "sortedoutput";
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,117,return map;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,226,List<Pair<String,Long>> fList = readFList(params);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,230,long maxPerGroup = fList.size() / numGroups;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,231,if (fList.size() != maxPerGroup * numGroups) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,232,maxPerGroup++;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,235,long i = 0;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,236,long groupID = 0;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,237,for (Pair<String,Long> featureFreq : fList) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,238,String feature = featureFreq.getFirst();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,239,if (i / maxPerGroup == groupID) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,240,gList.put(feature, groupID);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,242,groupID++;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,243,gList.put(feature, groupID);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,245,i++;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,248,log.info("No of Features: {}", fList.size());
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,293,throws IOException, InterruptedException, ClassNotFoundException {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,298,conf.set(PFP_PARAMETERS, params.toString());
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,299,conf.set("mapred.compress.map.output", "true");
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,300,conf.set("mapred.output.compression.type", "BLOCK");
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,301,String input = params.get(INPUT);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,302,Job job = new Job(conf, "PFP Transaction Sorting running over input" + input);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,303,job.setJarByClass(PFPGrowth.class);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,305,job.setMapOutputKeyClass(LongWritable.class);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,306,job.setMapOutputValueClass(TransactionTree.class);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,308,job.setOutputKeyClass(LongWritable.class);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,309,job.setOutputValueClass(TransactionTree.class);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,311,FileInputFormat.addInputPath(job, new Path(input));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,312,Path outPath = new Path(params.get(OUTPUT), SORTED_OUTPUT);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,313,FileOutputFormat.setOutputPath(job, outPath);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,315,HadoopUtil.delete(conf, outPath);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,317,job.setInputFormatClass(TextInputFormat.class);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,318,job.setMapperClass(TransactionSortingMapper.class);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,319,job.setReducerClass(TransactionSortingReducer.class);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,320,job.setOutputFormatClass(SequenceFileOutputFormat.class);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,322,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,336,Path input = new Path(params.get(OUTPUT), SORTED_OUTPUT);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,340,job.setMapOutputKeyClass(LongWritable.class);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,352,job.setInputFormatClass(SequenceFileInputFormat.class);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthCombiner.java,23,import org.apache.hadoop.io.LongWritable;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthCombiner.java,31,public class ParallelFPGrowthCombiner extends Reducer<LongWritable,TransactionTree,LongWritable,TransactionTree> {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthCombiner.java,38,for (Pair<List<Integer>,Long> p : tr) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,22,import java.util.HashSet;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,38,public class ParallelFPGrowthMapper extends Mapper<LongWritable,TransactionTree,LongWritable,TransactionTree> {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,40,private final OpenIntLongHashMap gListInt = new OpenIntLongHashMap();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,46,for (Pair<List<Integer>,Long> pattern : input) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,47,Integer[] prunedItems = pattern.getFirst().toArray(new Integer[pattern.getFirst().size()]);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,49,Collection<Long> groups = new HashSet<Long>();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,53,Integer item = prunedItems[j];
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,54,Long groupID = gListInt.get(item);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,56,if (!groups.contains(groupID)) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,57,Integer[] tempItems = new Integer[j + 1];
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,58,System.arraycopy(prunedItems, 0, tempItems, 0, j + 1);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,59,context.setStatus("Parallel FPGrowth: Generating Group Dependent transactions for: " + item);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,60,context.write(new LongWritable(groupID), new TransactionTree(tempItems, pattern.getSecond()));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,62,groups.add(groupID);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,73,OpenObjectIntHashMap<String> fMap = new OpenObjectIntHashMap<String>();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,81,gListInt.put(fMap.get(e.getKey()), e.getValue());
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,29,import org.apache.hadoop.io.LongWritable;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,48,public class ParallelFPGrowthReducer extends Reducer<LongWritable,TransactionTree,Text,TopKStringPatterns> {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,52,private final OpenObjectIntHashMap<String> fMap = new OpenObjectIntHashMap<String>();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,54,private final OpenLongObjectHashMap<IntArrayList> groupFeatures = new OpenLongObjectHashMap<IntArrayList>();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,61,protected void reduce(LongWritable key, Iterable<TransactionTree> values, Context context) throws IOException {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,64,for (Pair<List<Integer>,Long> p : tr) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,77,FPGrowth<Integer> fpGrowth = new FPGrowth<Integer>();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,78,fpGrowth.generateTopKFrequentPatterns(
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,79,cTree.iterator(),
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,80,localFList,
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,81,minSupport,
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,82,maxHeapSize,
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,83,new HashSet<Integer>(groupFeatures.get(key.get()).toList()),
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,84,new IntegerStringOutputConverter(
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,85,new ContextWriteOutputCollector<LongWritable,TransactionTree,Text,TopKStringPatterns>(context),
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,86,featureReverseMap),
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,87,new ContextStatusUpdater<LongWritable,TransactionTree,Text,TopKStringPatterns>(context));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,99,fMap.put(e.getFirst(), i++);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,105,for (Entry<String,Long> entry : gList.entrySet()) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,106,IntArrayList groupList = groupFeatures.get(entry.getValue());
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,107,Integer itemInteger = fMap.get(entry.getKey());
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,108,if (groupList != null) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,109,groupList.add(itemInteger);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,111,groupList = new IntArrayList();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,112,groupList.add(itemInteger);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,113,groupFeatures.put(entry.getValue(), groupList);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,18,package org.apache.mahout.fpm.pfpgrowth;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,20,import java.io.IOException;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,22,import java.util.Arrays;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,23,import java.util.Collections;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,24,import java.util.HashSet;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,25,import java.util.List;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,26,import java.util.regex.Pattern;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,28,import org.apache.hadoop.io.LongWritable;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,29,import org.apache.hadoop.io.Text;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,30,import org.apache.hadoop.mapreduce.Mapper;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,31,import org.apache.mahout.common.Pair;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,32,import org.apache.mahout.common.Parameters;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,33,import org.apache.mahout.math.map.OpenObjectIntHashMap;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,40,public class TransactionSortingMapper extends Mapper<LongWritable,Text,LongWritable,TransactionTree> {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,42,private final OpenObjectIntHashMap<String> fMap = new OpenObjectIntHashMap<String>();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,44,private Pattern splitter;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,47,protected void map(LongWritable offset, Text input, Context context) throws IOException,
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,48,InterruptedException {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,50,String[] items = splitter.split(input.toString());
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,51,Iterable<String> uniqueItems = new HashSet<String>(Arrays.asList(items));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,54,for (String item : uniqueItems) { // remove items not in the fList
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,56,itemSet.add(fMap.get(item));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,60,Collections.sort(itemSet);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,62,Integer[] prunedItems = itemSet.toArray(new Integer[itemSet.size()]);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,64,if (prunedItems.length > 0) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,65,context.write(new LongWritable(prunedItems[0]), new TransactionTree(prunedItems, 1L));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,71,protected void setup(Context context) throws IOException, InterruptedException {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,72,super.setup(context);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,73,Parameters params = new Parameters(context.getConfiguration().get(PFPGrowth.PFP_PARAMETERS, ""));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,75,int i = 0;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,77,fMap.put(e.getFirst(), i++);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,80,splitter = Pattern.compile(params.get(PFPGrowth.SPLIT_PATTERN, PFPGrowth.SPLITTER.toString()));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingReducer.java,18,package org.apache.mahout.fpm.pfpgrowth;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingReducer.java,20,import java.io.IOException;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingReducer.java,22,import org.apache.hadoop.io.LongWritable;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingReducer.java,23,import org.apache.hadoop.mapreduce.Reducer;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingReducer.java,31,public class TransactionSortingReducer extends
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingReducer.java,32,Reducer<LongWritable,TransactionTree,LongWritable,TransactionTree> {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingReducer.java,34,private static final LongWritable ONE = new LongWritable(1);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingReducer.java,37,protected void reduce(LongWritable key, Iterable<TransactionTree> values, Context context) throws IOException,
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingReducer.java,38,InterruptedException {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingReducer.java,39,for (TransactionTree tr : values) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingReducer.java,40,context.write(ONE, tr);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,46,public final class TransactionTree implements Writable, Iterable<Pair<List<Integer>,Long>> {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,61,private List<Pair<List<Integer>,Long>> transactionSet;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,79,public TransactionTree(Integer[] items, Long support) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,82,transactionSet.add(new Pair<List<Integer>,Long>(Arrays.asList(items), support));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,85,public TransactionTree(List<Pair<List<Integer>,Long>> transactionSet) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,108,public int addPattern(Iterable<Integer> myList, long addCount) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,112,for (int attributeValue : myList) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,172,Iterator<Pair<List<Integer>,Long>> it = iterator();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,176,Pair<List<Integer>,Long> p = it.next();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,179,for (Integer i : p.getFirst()) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,180,if (!frequencyList.containsKey(i)) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,181,frequencyList.put(i, new MutableLong(0));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,183,frequencyList.get(i).add(p.getSecond());
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,191,Iterator<Pair<List<Integer>,Long>> it = iterator();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,203,Pair<List<Integer>,Long> p = it.next();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,204,Collections.sort(p.getFirst(), comparator);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,225,public Iterator<Pair<List<Integer>,Long>> iterator() {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,257,Integer[] items = new Integer[length];
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,262,Pair<List<Integer>,Long> transaction = new Pair<List<Integer>,Long>(Arrays.asList(items), support);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,298,for (Pair<List<Integer>, Long> transaction : transactionSet) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,305,for (Integer item : transaction.getFirst()) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTreeIterator.java,32,final class TransactionTreeIterator extends AbstractIterator<Pair<List<Integer>,Long>> {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTreeIterator.java,43,protected Pair<List<Integer>, Long> computeNext() {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTreeIterator.java,77,Pair<List<Integer>,Long> returnable = new Pair<List<Integer>,Long>(data, transactionTree.count(childId) - sum);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/Pattern.java,45,private long[] supportValues;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/Pattern.java,56,this.supportValues = new long[size];
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/Pattern.java,65,this.pattern[length] = id;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/Pattern.java,66,this.supportValues[length++] = supportCount;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/Pattern.java,74,public final Object[] getPatternWithSupport() {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/Pattern.java,75,return new Object[] {this.pattern, this.supportValues};
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/Pattern.java,113,long[] oldSupport = supportValues;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/Pattern.java,115,this.supportValues = new long[size];
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/Pattern.java,117,System.arraycopy(oldSupport, 0, this.supportValues, 0, length);
core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java,80,private int threadCount = 20;
core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java,81,private int poolSize = 20;
core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java,98,setPoolSize(poolSize);
core/src/main/java/org/apache/mahout/clustering/spectral/common/VectorMatrixMultiplicationJob.java,84,return new DistributedRowMatrix(outputPath, new Path(outputPath, "tmp"),
core/src/main/java/org/apache/mahout/clustering/spectral/kmeans/SpectralKMeansDriver.java,144,new Path(outputCalc, "laplacian-" + (System.nanoTime() & 0xFF)));
core/src/main/java/org/apache/mahout/clustering/spectral/kmeans/SpectralKMeansDriver.java,195,Path clusteredPointsPath = new Path(output, "clusteredPoints");
core/src/main/java/org/apache/mahout/clustering/spectral/kmeans/SpectralKMeansDriver.java,196,Path inputPath = new Path(clusteredPointsPath, "part-m-00000");
core/src/main/java/org/apache/mahout/clustering/spectral/kmeans/SpectralKMeansDriver.java,197,int id = 0;
core/src/main/java/org/apache/mahout/clustering/spectral/kmeans/SpectralKMeansDriver.java,198,for (Pair<IntWritable,WeightedVectorWritable> record
core/src/main/java/org/apache/mahout/clustering/spectral/kmeans/SpectralKMeansDriver.java,199,: new SequenceFileIterable<IntWritable, WeightedVectorWritable>(inputPath, conf)) {
core/src/main/java/org/apache/mahout/clustering/spectral/kmeans/SpectralKMeansDriver.java,200,log.info("{}: {}", id++, record.getFirst().get());
examples/src/main/java/org/apache/mahout/clustering/display/DisplaySpectralKMeans.java,45,Path samples = new Path("samples");
examples/src/main/java/org/apache/mahout/clustering/display/DisplaySpectralKMeans.java,46,Path output = new Path("output");
examples/src/main/java/org/apache/mahout/clustering/display/DisplaySpectralKMeans.java,54,Path affinities = new Path(output, "affinities");
examples/src/main/java/org/apache/mahout/clustering/display/DisplaySpectralKMeans.java,71,SpectralKMeansDriver.run(new Configuration(), affinities, output, 1100, 2, measure, convergenceDelta, maxIter);
examples/src/main/java/org/apache/mahout/clustering/display/DisplaySpectralKMeans.java,72,loadClusters(output);
examples/src/main/java/org/apache/mahout/clustering/display/DisplaySpectralKMeans.java,79,plotSampleData((Graphics2D) g);
examples/src/main/java/org/apache/mahout/clustering/display/DisplaySpectralKMeans.java,80,plotClusters((Graphics2D) g);
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,153,int size = ejCol.size();
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/GramKeyPartitioner.java,20,import org.apache.hadoop.conf.Configuration;
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/GramKeyPartitioner.java,21,import org.apache.hadoop.io.WritableComparator;
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/GramKeyPartitioner.java,28,public class GramKeyPartitioner extends Partitioner<GramKey, Gram> {
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/GramKeyPartitioner.java,30,private static final String HASH_OFFSET_PROPERTY_NAME = "grampartitioner.hash.offset";
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/GramKeyPartitioner.java,33,conf.setInt(HASH_OFFSET_PROPERTY_NAME, left);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/GramKeyPartitioner.java,36,private int offset;
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/GramKeyPartitioner.java,42,int length = key.getLength() - 1;
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/GramKeyPartitioner.java,43,int right = (offset + length) % length;
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/GramKeyPartitioner.java,44,int hash = WritableComparator.hashBytes(key.getBytes(), right);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/GramKeyPartitioner.java,48,public void configure(Configuration conf) {
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/GramKeyPartitioner.java,49,offset = conf.getInt(HASH_OFFSET_PROPERTY_NAME, -1);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/CollocDriver.java,113,if (argMap.get("--minsupport") != null) {
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/CollocDriver.java,114,minSupport = Integer.parseInt(argMap.get("--minsupport"));
core/src/main/java/org/apache/mahout/cf/taste/impl/common/WeightedRunningAverage.java,43,average = datum * weight;
core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/SlopeOneAverageDiffsJob.java,84,FloatWritable.class,
core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/SlopeOneDiffsToAveragesReducer.java,27,Reducer<EntityEntityWritable,FloatWritable, EntityEntityWritable,FloatWritable> {
core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/SlopeOneDiffsToAveragesReducer.java,33,int count = 0;
core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/SlopeOneDiffsToAveragesReducer.java,34,double total = 0.0;
core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/SlopeOneDiffsToAveragesReducer.java,36,total += value.get();
core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/SlopeOneDiffsToAveragesReducer.java,37,count++;
core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/SlopeOneDiffsToAveragesReducer.java,39,context.write(key, new FloatWritable((float) (total / count)));
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java,35,import org.apache.mahout.cf.taste.impl.common.InvertedRunningAverageAndStdDev;
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java,135,if (average == null) {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java,136,return null;
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java,139,: new InvertedRunningAverage(average);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,36,import org.apache.mahout.cf.taste.impl.model.file.FileDataModel;
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,110,char delimiter = FileDataModel.determineDelimiter(firstLine);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,113,averageCount = processLine(iterator.next(), delimiter, averageCount);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,127,private long processLine(String line, char delimiter, long averageCount) {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,133,int delimiterOne = line.indexOf(delimiter);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,134,Preconditions.checkArgument(delimiterOne >= 0, "Bad line: %s", line);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,135,int delimiterTwo = line.indexOf(delimiter, delimiterOne + 1);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,136,Preconditions.checkArgument(delimiterTwo >= 0, "Bad line: %s", line);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,138,long itemID1 = Long.parseLong(line.substring(0, delimiterOne));
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,139,long itemID2 = Long.parseLong(line.substring(delimiterOne + 1, delimiterTwo));
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,140,double diff = Double.parseDouble(line.substring(delimiterTwo + 1));
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,154,if (average == null && averageCount < maxEntries) {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,155,average = new FullRunningAverage();
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,159,if (average != null) {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,160,average.addDatum(diff);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,225,if (average == null) {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,226,return null;
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,228,return new InvertedRunningAverage(average);
core/src/main/java/org/apache/mahout/classifier/bayes/TestClassifier.java,169,String classificationMethod = "sequential";
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorDriver.java,156,conf.set("xmlinput.start", "<text xml:space=\"preserve\">");
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorDriver.java,157,conf.set("xmlinput.end", "</text>");
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPGrowth.java,566,conditionalTree.setParent(prevConditional, conditional);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPGrowth.java,576,conditionalTree.setParent(prevConditional, FPTree.ROOTNODEID);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPGrowth.java,577,if (conditionalTree.childCount(FPTree.ROOTNODEID) > 1
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPGrowth.java,578,&& conditionalTree.singlePath()) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,227,Integer numGroups = Integer.valueOf(params.get(NUM_GROUPS, "50"));
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/SimilarUser.java,64,return similarity > otherSimilarity ? -1 : similarity < otherSimilarity ? 1 : 0;
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/TopItems.java,112,topUsers.add(new SimilarUser(userID, similarity));
examples/src/main/java/org/apache/mahout/clustering/display/DisplayCanopy.java,20,import java.awt.BasicStroke;
examples/src/main/java/org/apache/mahout/clustering/display/DisplayCanopy.java,21,import java.awt.Color;
examples/src/main/java/org/apache/mahout/clustering/display/DisplayCanopy.java,22,import java.awt.Graphics;
examples/src/main/java/org/apache/mahout/clustering/display/DisplayCanopy.java,23,import java.awt.Graphics2D;
examples/src/main/java/org/apache/mahout/clustering/display/DisplayCanopy.java,24,import java.util.List;
examples/src/main/java/org/apache/mahout/clustering/display/DisplayCanopy.java,84,loadClusters(output);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/svd/ExpectationMaximizationSVDFactorizer.java,144,rightVectorJ[f] += learningRate * (err * leftVectorI[f] - preventOverfitting * rightVectorJ[f]);
core/src/main/java/org/apache/mahout/vectorizer/encoders/LuceneTextValueEncoder.java,83,buf.get(cbuf, off, len);
core/src/main/java/org/apache/mahout/vectorizer/encoders/LuceneTextValueEncoder.java,84,return len;
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,533,double sum = 0;
core/src/main/java/org/apache/mahout/cf/taste/hadoop/als/PredictionJob.java,64,addOption("userFeatures", "u", "path to the user feature matrix", true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/als/PredictionJob.java,65,addOption("itemFeatures", "i", "path to the item feature matrix", true);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java,112,addOption("usersFile", "u", "File of users to recommend for", null);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java,113,addOption("itemsFile", "i", "File of items to recommend for", null);
core/src/main/java/org/apache/mahout/classifier/BayesFileFormatter.java,264,Option inputOpt = obuilder.withLongName("input").withRequired(true).withArgument(
core/src/main/java/org/apache/mahout/classifier/BayesFileFormatter.java,266,.withShortName("i").create();
core/src/main/java/org/apache/mahout/classifier/BayesFileFormatter.java,268,Option outputOpt = obuilder.withLongName("output").withRequired(true).withArgument(
core/src/main/java/org/apache/mahout/classifier/BayesFileFormatter.java,270,.withShortName("o").create();
core/src/main/java/org/apache/mahout/classifier/BayesFileFormatter.java,289,Option helpOpt = obuilder.withLongName("help").withDescription("Print out help").withShortName("h").create();
core/src/main/java/org/apache/mahout/classifier/bayes/TrainClassifier.java,69,Option inputDirOpt = obuilder.withLongName("input").withRequired(true).withArgument(
core/src/main/java/org/apache/mahout/classifier/bayes/TrainClassifier.java,70,abuilder.withName("input").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/classifier/bayes/TrainClassifier.java,73,.withShortName("i").create();
core/src/main/java/org/apache/mahout/classifier/bayes/TrainClassifier.java,75,Option outputOpt = obuilder.withLongName("output").withRequired(true).withArgument(
core/src/main/java/org/apache/mahout/classifier/bayes/TrainClassifier.java,76,abuilder.withName("output").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/FPGrowthDriver.java,69,Option inputDirOpt = obuilder.withLongName("input").withRequired(true).withArgument(
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/FPGrowthDriver.java,70,abuilder.withName("input").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,61,Option inputDirOpt = obuilder.withLongName("input").withRequired(true).withArgument(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,62,abuilder.withName("input").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,65,Option outputDirOpt = obuilder.withLongName("output").withRequired(true).withArgument(
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,66,abuilder.withName("output").withMinimum(1).withMaximum(1).create()).withDescription(
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorDriver.java,72,Option dirInputPathOpt = obuilder.withLongName("input").withRequired(true).withArgument(
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorDriver.java,73,abuilder.withName("input").withMinimum(1).withMaximum(1).create()).withDescription(
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorDriver.java,76,Option dirOutputPathOpt = obuilder.withLongName("output").withRequired(true).withArgument(
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorDriver.java,77,abuilder.withName("output").withMinimum(1).withMaximum(1).create()).withDescription(
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorDriver.java,92,.create();
examples/src/main/java/org/apache/mahout/df/mapreduce/TestForest.java,81,Option inputOpt = obuilder.withLongName("input").withShortName("i").withRequired(true).withArgument(
examples/src/main/java/org/apache/mahout/df/mapreduce/TestForest.java,82,abuilder.withName("path").withMinimum(1).withMaximum(1).create()).withDescription("Test data path").create();
examples/src/main/java/org/apache/mahout/df/mapreduce/TestForest.java,92,Option outputOpt = obuilder.withLongName("output").withShortName("o").withRequired(false).withArgument(
examples/src/main/java/org/apache/mahout/df/mapreduce/TestForest.java,93,abuilder.withName("output").withMinimum(1).withMaximum(1).create()).withDescription(
examples/src/main/java/org/apache/mahout/df/mapreduce/TestForest.java,101,.create();
examples/src/main/java/org/apache/mahout/df/mapreduce/TestForest.java,232,log.info("Classifying : " + path);
examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/CDGA.java,83,Option inputOpt = obuilder.withLongName("input").withRequired(true).withShortName("i").withArgument(
examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/CDGA.java,85,.withDescription("The Path for input data directory.").create();
examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/tool/CDInfosTool.java,34,import org.apache.commons.cli2.builder.ArgumentBuilder;
examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/tool/CDInfosTool.java,35,import org.apache.commons.cli2.builder.DefaultOptionBuilder;
examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/tool/CDInfosTool.java,209,DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/tool/CDInfosTool.java,210,ArgumentBuilder abuilder = new ArgumentBuilder();
examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/tool/CDInfosTool.java,213,Option inputOpt = obuilder.withLongName("input").withRequired(true).withShortName("i").withArgument(
examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/tool/CDInfosTool.java,215,.withDescription("The Path for input data directory.").create();
examples/src/main/java/org/apache/mahout/text/WikipediaToSequenceFile.java,73,Option dirInputPathOpt = obuilder.withLongName("input").withRequired(true).withArgument(
examples/src/main/java/org/apache/mahout/text/WikipediaToSequenceFile.java,74,abuilder.withName("input").withMinimum(1).withMaximum(1).create()).withDescription(
examples/src/main/java/org/apache/mahout/text/WikipediaToSequenceFile.java,77,Option dirOutputPathOpt = obuilder.withLongName("output").withRequired(true).withArgument(
examples/src/main/java/org/apache/mahout/text/WikipediaToSequenceFile.java,78,abuilder.withName("output").withMinimum(1).withMaximum(1).create()).withDescription(
examples/src/main/java/org/apache/mahout/text/WikipediaToSequenceFile.java,94,.create();
examples/src/main/java/org/apache/mahout/text/WikipediaToSequenceFile.java,165,if (WikipediaToSequenceFile.log.isInfoEnabled()) {
examples/src/main/java/org/apache/mahout/text/WikipediaToSequenceFile.java,166,log.info("Input: " + input + " Out: " + output + " Categories: " + catFile
examples/src/main/java/org/apache/mahout/text/WikipediaToSequenceFile.java,167,+ " All Files: " + all);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,243,out.collect(NullWritable.get(), new VectorWritable(outputVector));
core/src/main/java/org/apache/mahout/clustering/spectral/common/AffinityMatrixInputMapper.java,60,+ "the structure of (i,j,value) for representing a graph in text.");
core/src/main/java/org/apache/mahout/vectorizer/DictionaryVectorizer.java,331,job.setCombinerClass(TermCountReducer.class);
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,48,private SparseVectorsFromSequenceFiles() {
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/AggregateAndRecommendReducer.java,195,long itemID = indexItemIDMap.get(index);
core/src/main/java/org/apache/mahout/clustering/minhash/HashFactory.java,20,import org.apache.mahout.vectorizer.encoders.MurmurHash;
core/src/main/java/org/apache/mahout/vectorizer/encoders/MurmurHash.java,18,package org.apache.mahout.vectorizer.encoders;
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/BBtJob.java,66,job.setReducerClass(BBtReducer.class);
core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/BBtJob.java,94,private UpperTriangular bbtPartial; // are all partial BBt products
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/SamplingCandidateItemsStrategy.java,75,Iterator<Preference> sampledPrefs = new FixedSizeSamplingIterator(prefsConsidered, prefs.iterator());
core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java,241,HadoopUtil.delete(conf, outputDir);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java,117,addOption("maxPrefsPerUser", "mp",
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,32,import org.apache.hadoop.io.DefaultStringifier;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,35,import org.apache.hadoop.io.Writable;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,42,import org.apache.hadoop.util.GenericsUtil;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,73,public static final String PARALLEL_COUNTING = "parallelcounting";
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,81,private PFPGrowth() { }
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,88,public static List<Pair<String,Long>> deserializeList(Parameters params,
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,89,String key,
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,90,Configuration conf) throws IOException {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,92,conf.set("io.serializations", "org.apache.hadoop.io.serializer.JavaSerialization,"
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,93,+ "org.apache.hadoop.io.serializer.WritableSerialization");
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,95,DefaultStringifier<List<Pair<String,Long>>> listStringifier = new DefaultStringifier<List<Pair<String,Long>>>(
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,96,conf, GenericsUtil.getClass(list));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,97,String serializedString = params.get(key, listStringifier.toString(list));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,98,list = listStringifier.fromString(serializedString);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,108,public static Map<String,Long> deserializeMap(Parameters params, String key, Configuration conf) throws IOException {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,110,conf.set("io.serializations", "org.apache.hadoop.io.serializer.JavaSerialization,"
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,111,+ "org.apache.hadoop.io.serializer.WritableSerialization");
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,113,DefaultStringifier<Map<String,Long>> mapStringifier = new DefaultStringifier<Map<String,Long>>(conf,
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,114,GenericsUtil.getClass(map));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,115,String gListString = params.get(key, mapStringifier.toString(map));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,116,map = mapStringifier.fromString(gListString);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,129,PriorityQueue<Pair<String,Long>> queue =
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,130,new PriorityQueue<Pair<String,Long>>(11, new CountDescendingPairComparator<String,Long>());
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,132,Path parallelCountingPath = new Path(params.get(OUTPUT), PARALLEL_COUNTING);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,133,Path filesPattern = new Path(parallelCountingPath, FILE_PATTERN);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,134,for (Pair<Writable,LongWritable> record
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,135,: new SequenceFileDirIterable<Writable,LongWritable>(filesPattern, PathType.GLOB, null, null, true, conf)) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,175,throws IOException, InterruptedException, ClassNotFoundException {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,176,startParallelCounting(params);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,177,startGroupingItems(params);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,178,startTransactionSorting(params);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,179,startParallelFPGrowth(params);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,180,startAggregating(params);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,190,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,191,params.set(F_LIST, "");
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,192,params.set(G_LIST, "");
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,224,public static void startGroupingItems(Parameters params) throws IOException {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,225,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,250,params.set(G_LIST, serializeMap(gList, conf));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,251,params.set(F_LIST, serializeList(fList, conf));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,260,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,295,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,296,String gList = params.get(G_LIST);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,297,params.set(G_LIST, "");
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,323,params.set(G_LIST, gList);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,332,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,366,private static String serializeList(List<Pair<String,Long>> list, Configuration conf) throws IOException {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,367,conf.set("io.serializations", "org.apache.hadoop.io.serializer.JavaSerialization,"
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,368,+ "org.apache.hadoop.io.serializer.WritableSerialization");
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,369,DefaultStringifier<List<Pair<String,Long>>> listStringifier = new DefaultStringifier<List<Pair<String,Long>>>(
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,370,conf, GenericsUtil.getClass(list));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,371,return listStringifier.toString(list);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,379,private static String serializeMap(Map<String,Long> map, Configuration conf) throws IOException {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,380,conf.set("io.serializations", "org.apache.hadoop.io.serializer.JavaSerialization,"
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,381,+ "org.apache.hadoop.io.serializer.WritableSerialization");
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,382,DefaultStringifier<Map<String,Long>> mapStringifier = new DefaultStringifier<Map<String,Long>>(conf,
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,383,GenericsUtil.getClass(map));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,384,return mapStringifier.toString(map);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,29,import org.apache.mahout.common.Parameters;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,50,for (int j = prunedItems.length - 1; j >= 0; j--) { // generate group
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,71,Parameters params = new Parameters(context.getConfiguration().get(PFPGrowth.PFP_PARAMETERS, ""));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,75,for (Pair<String,Long> e : PFPGrowth.deserializeList(params, PFPGrowth.F_LIST, context.getConfiguration())) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,80,.entrySet()) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,97,for (Pair<String,Long> e : PFPGrowth.deserializeList(params, PFPGrowth.F_LIST, context.getConfiguration())) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,103,Map<String,Long> gList = PFPGrowth.deserializeMap(params, PFPGrowth.G_LIST, context.getConfiguration());
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,76,for (Pair<String,Long> e : PFPGrowth.deserializeList(params, PFPGrowth.F_LIST, context.getConfiguration())) {
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java,58,int prefs1Size = prefs1.size();
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java,59,int prefs2Size = prefs2.size();
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java,60,int intersectionSize = prefs1Size < prefs2Size ? prefs2.intersectionSize(prefs1) : prefs1
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java,61,.intersectionSize(prefs2);
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java,65,int numItems = dataModel.getNumItems();
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java,77,int preferring1 = dataModel.getNumUsersWithPreferenceFor(itemID1);
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java,78,int numUsers = dataModel.getNumUsers();
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java,85,int preferring1 = dataModel.getNumUsersWithPreferenceFor(itemID1);
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java,86,int numUsers = dataModel.getNumUsers();
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java,95,private double doItemSimilarity(long itemID1, long itemID2, int preferring1, int numUsers) throws TasteException {
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java,97,int preferring1and2 = dataModel.getNumUsersWithPreferenceFor(itemID1, itemID2);
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java,101,int preferring2 = dataModel.getNumUsersWithPreferenceFor(itemID2);
core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/AbstractDistributedVectorSimilarity.java,35,double weightOfVectorB, int numberOfColumns) {
core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/AbstractDistributedVectorSimilarity.java,76,int numberOfColumns);
core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedCityBlockVectorSimilarity.java,34,int numberOfColumns) {
core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedCooccurrenceVectorSimilarity.java,39,int numberOfColumns) {
core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedEuclideanDistanceVectorSimilarity.java,29,double weightOfVectorB, int numberOfColumns) {
core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedLoglikelihoodVectorSimilarity.java,32,double weightOfVectorB, int numberOfColumns) {
core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedLoglikelihoodVectorSimilarity.java,34,int cooccurrenceCount = countElements(cooccurrences);
core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedLoglikelihoodVectorSimilarity.java,39,int occurrencesA = (int) weightOfVectorA;
core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedLoglikelihoodVectorSimilarity.java,40,int occurrencesB = (int) weightOfVectorB;
core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedPearsonCorrelationVectorSimilarity.java,29,double weightOfVectorB, int numberOfColumns) {
core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedTanimotoCoefficientVectorSimilarity.java,30,double weightOfVectorB, int numberOfColumns) {
core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedUncenteredCosineVectorSimilarity.java,29,double weightOfVectorB, int numberOfColumns) {
core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedUncenteredZeroAssumingCosineVectorSimilarity.java,32,double weightOfVectorB, int numberOfColumns) {
core/src/main/java/org/apache/mahout/math/hadoop/similarity/vector/DistributedVectorSimilarity.java,53,int numberOfColumns);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,109,double llr = ll.logLikelihoodRatio(k11, k12, k21, k22);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,110,if (llr < minLLRValue) {
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,111,context.getCounter(Skipped.LESS_THAN_MIN_LLR).increment(1);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,112,return;
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,114,DoubleWritable dd = new DoubleWritable(llr);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,115,Text t = new Text(ngram.getString());
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,116,context.write(t, dd);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,119,log.error("Problem calculating LLR ratio: " + ex.getMessage());
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,120,log.error("NGram: " + ngram);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,121,log.error("HEAD: " + gram[0] + ':' + gramFreq[0]);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,122,log.error("TAIL: " + gram[1] + ':' + gramFreq[1]);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,123,log.error("k11: " + k11 + " k12: " + k12 + " k21: " + k21 + " k22: " + k22);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,136,if (log.isInfoEnabled()) {
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,137,log.info("NGram Total is {}", ngramTotal);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,138,log.info("Min LLR value is {}", minLLRValue);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,139,log.info("Emit Unitgrams is {}", emitUnigrams);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,165,double logLikelihoodRatio(int k11, int k12, int k21, int k22);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/LLRReducer.java,171,public double logLikelihoodRatio(int k11, int k12, int k21, int k22) {
math/src/main/java/org/apache/mahout/math/stats/LogLikelihood.java,50,public static double entropy(int... elements) {
math/src/main/java/org/apache/mahout/math/stats/LogLikelihood.java,53,for (int element : elements) {
math/src/main/java/org/apache/mahout/math/stats/LogLikelihood.java,84,public static double logLikelihoodRatio(int k11, int k12, int k21, int k22) {
math/src/main/java/org/apache/mahout/math/stats/LogLikelihood.java,110,public static double rootLogLikelihoodRatio(int k11, int k12, int k21, int k22) {
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,116,.get(DefaultOptionCreator.NUM_CLUSTERS_OPTION)), measure);
core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/CollocDriver.java,61,private CollocDriver() {
core/src/main/java/org/apache/mahout/math/VectorWritable.java,178,out.writeUTF(((NamedVector) vector).getName());
math/src/main/java/org/apache/mahout/math/NamedVector.java,39,if (delegate == null) {
