File,Line_number,SRC
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,603,model.setPomFile( pomFile );
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,891,File pomFile = null;
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,894,pomFile = ( (FileModelSource) candidateSource ).getPomFile();
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,897,candidateModel = readModel( candidateSource, pomFile, request, problems );
maven-builder-support/src/main/java/org/apache/maven/building/StringSource.java,35,private String content;
maven-builder-support/src/main/java/org/apache/maven/building/StringSource.java,37,private String location;
maven-builder-support/src/main/java/org/apache/maven/building/UrlSource.java,37,private URL url;
maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java,40,return models.get( new CacheKey( groupId, artifactId, version, tag ) );
maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java,45,models.put( new CacheKey( groupId, artifactId, version, tag ), data );
maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java,48,private static final class CacheKey
maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java,89,CacheKey that = (CacheKey) obj;
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,508,Model model;
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,514,modelSource = new FileModelSource( pomFile );
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,516,else
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,518,throw new NullPointerException( "neither pomFile nor modelSource can be null" );
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,526,InputSource source = request.isLocationTracking() ? new InputSource() : null;
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,528,Map<String, Object> options = new HashMap<>();
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,530,options.put( ModelProcessor.INPUT_SOURCE, source );
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,811,ModelData parentData;
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,817,String groupId = parent.getGroupId();
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,818,String artifactId = parent.getArtifactId();
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,819,String version = parent.getVersion();
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,821,parentData = getCache( request.getModelCache(), groupId, artifactId, version, ModelCacheTag.RAW );
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,825,parentData = readParentLocally( childModel, childSource, request, problems );
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,829,parentData = readParentExternally( childModel, request, problems );
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,832,putCache( request.getModelCache(), groupId, artifactId, version, ModelCacheTag.RAW, parentData );
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,834,else
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,843,File pomFile = parentData.getModel().getPomFile();
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,846,ModelSource expectedParentSource = getParentPomFile( childModel, childSource );
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,851,parentData = readParentExternally( childModel, request, problems );
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,1210,DependencyManagement importMgmt = getCache( request.getModelCache(), groupId, artifactId, version,
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,1299,putCache( request.getModelCache(), groupId, artifactId, version, ModelCacheTag.IMPORT, importMgmt );
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,1315,private <T> void putCache( ModelCache modelCache, String groupId, String artifactId, String version,
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,1324,private <T> T getCache( ModelCache modelCache, String groupId, String artifactId, String version,
maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java,36,import org.apache.maven.model.building.FileModelSource;
maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java,318,modelRequest.setModelSource( new FileModelSource( pomArtifact.getFile() ) );
maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java,22,import java.io.File;
maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java,34,import org.apache.maven.model.building.FileModelSource;
maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java,181,File pomFile = pomArtifact.getFile();
maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java,183,return new FileModelSource( pomFile );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,1438,List<String> src = source.getReports();
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,1441,List<String> tgt = target.getReports();
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,1442,List<String> merged = new ArrayList<>( tgt.size() + src.size() );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,1443,merged.addAll( tgt );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,1444,merged.addAll( src );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,1445,target.setReports( merged );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,1729,List<String> src = source.getOtherArchives();
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,1732,List<String> tgt = target.getOtherArchives();
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,1733,List<String> merged = new ArrayList<>( tgt.size() + src.size() );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,1734,merged.addAll( tgt );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,1735,merged.addAll( src );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,1736,target.setOtherArchives( merged );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,1861,List<String> src = source.getRoles();
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,1864,List<String> tgt = target.getRoles();
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,1865,List<String> merged = new ArrayList<>( tgt.size() + src.size() );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,1866,merged.addAll( tgt );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,1867,merged.addAll( src );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,1868,target.setRoles( merged );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2378,List<String> src = source.getFilters();
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2381,List<String> tgt = target.getFilters();
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2382,List<String> merged = new ArrayList<>( tgt.size() + src.size() );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2383,merged.addAll( tgt );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2384,merged.addAll( src );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2385,target.setFilters( merged );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2714,List<String> src = source.getGoals();
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2717,List<String> tgt = target.getGoals();
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2718,List<String> merged = new ArrayList<>( tgt.size() + src.size() );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2719,merged.addAll( tgt );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2720,merged.addAll( src );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2721,target.setGoals( merged );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2805,List<String> src = source.getIncludes();
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2808,List<String> tgt = target.getIncludes();
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2809,List<String> merged = new ArrayList<>( tgt.size() + src.size() );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2810,merged.addAll( tgt );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2811,merged.addAll( src );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2812,target.setIncludes( merged );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2819,List<String> src = source.getExcludes();
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2822,List<String> tgt = target.getExcludes();
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2823,List<String> merged = new ArrayList<>( tgt.size() + src.size() );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2824,merged.addAll( tgt );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2825,merged.addAll( src );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2826,target.setExcludes( merged );
maven-core/src/main/java/org/apache/maven/model/plugin/DefaultLifecycleBindingsInjector.java,114,Object key = getPluginKey( element );
maven-core/src/main/java/org/apache/maven/model/plugin/DefaultLifecycleBindingsInjector.java,122,Object key = getPluginKey( element );
maven-core/src/main/java/org/apache/maven/model/plugin/DefaultLifecycleBindingsInjector.java,142,Object key = getPluginKey( managedPlugin );
maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java,252,Object key = getPluginKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java,262,Object key = getPluginKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java,326,Object key = getReportPluginKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java,341,Object key = getReportPluginKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultDependencyManagementInjector.java,68,Object key = getDependencyKey( dependency );
maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultDependencyManagementInjector.java,74,Object key = getDependencyKey( managedDependency );
maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java,87,Object key = getPluginKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java,93,Object key = getPluginKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java,117,Object key = getPluginExecutionKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java,123,Object key = getPluginExecutionKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java,296,Object key = getRepositoryKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java,302,Object key = getRepositoryKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java,337,Object key = getRepositoryKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java,343,Object key = getRepositoryKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java,549,Object key = getPluginExecutionKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java,556,Object key = getPluginExecutionKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java,605,Object key = getReportSetKey( rset );
maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java,612,Object key = getReportSetKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java,628,return dependency.getManagementKey();
maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java,634,return plugin.getKey();
maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java,640,return pluginExecution.getId();
maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java,646,return reportPlugin.getKey();
maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java,652,return reportSet.getId();
maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java,658,return repositoryBase.getId();
maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java,664,return extension.getGroupId() + ':' + extension.getArtifactId();
maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java,670,return exclusion.getGroupId() + ':' + exclusion.getArtifactId();
maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java,101,Object key = getPluginKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java,109,Object key = getPluginKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java,156,Object key = getPluginExecutionKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java,162,Object key = getPluginExecutionKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java,191,Object key = getReportPluginKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java,197,Object key = getReportPluginKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java,225,Object key = getReportSetKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java,231,Object key = getReportSetKey( element );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,543,List<String> src = source.getModules();
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,546,List<String> tgt = target.getModules();
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,547,List<String> merged = new ArrayList<>( tgt.size() + src.size() );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,548,merged.addAll( tgt );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,549,merged.addAll( src );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,550,target.setModules( merged );
maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/MultiThreadedBuilder.java,30,import java.util.concurrent.Future;
maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/MultiThreadedBuilder.java,176,Future<ProjectSegment> unprocessed;
maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/MultiThreadedBuilder.java,179,try
maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/MultiThreadedBuilder.java,181,unprocessed.get();
maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/MultiThreadedBuilder.java,185,throw new RuntimeException( e );
maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/MavenRepositorySystemUtils.java,109,new ChainedDependencyGraphTransformer( transformer, new JavaDependencyContextRefiner() );
maven-model-builder/src/main/java/org/apache/maven/model/path/DefaultUrlNormalizer.java,56,break;
maven-model-builder/src/main/java/org/apache/maven/model/path/DefaultUrlNormalizer.java,58,result = result.substring( 0, parent ) + result.substring( idx + 3 );
maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java,45,import org.apache.maven.artifact.resolver.filter.ExcludesArtifactFilter;
maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java,50,import org.apache.maven.model.Exclusion;
maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java,117,List<String> exclusions = new ArrayList<>();
maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java,121,exclusions.add( exclusion.getGroupId() + ':' + exclusion.getArtifactId() );
maven-core/src/main/java/org/apache/maven/bridge/MavenRepositorySystem.java,124,artifact.setDependencyFilter( new ExcludesArtifactFilter( exclusions ) );
maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java,50,import org.apache.maven.artifact.resolver.filter.ExcludesArtifactFilter;
maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java,58,import org.apache.maven.model.Exclusion;
maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java,397,List<String> exclusions = new ArrayList<>();
maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java,401,exclusions.add( e.getGroupId() + ':' + e.getArtifactId() );
maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java,404,effectiveFilter = new ExcludesArtifactFilter( exclusions );
maven-core/src/main/java/org/apache/maven/exception/DefaultExceptionHandler.java,209,if ( cause2 instanceof NoClassDefFoundError
maven-core/src/main/java/org/apache/maven/exception/DefaultExceptionHandler.java,212,reference = "AetherClassNotFound";
maven-core/src/main/java/org/apache/maven/artifact/handler/manager/DefaultArtifactHandlerManager.java,42,private Map<String, ArtifactHandler> unmanagedHandlers = new ConcurrentHashMap<>();
maven-core/src/main/java/org/apache/maven/artifact/handler/manager/DefaultArtifactHandlerManager.java,46,ArtifactHandler handler = unmanagedHandlers.get( type );
maven-core/src/main/java/org/apache/maven/artifact/handler/manager/DefaultArtifactHandlerManager.java,64,unmanagedHandlers.putAll( handlers );
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java,23,import java.util.regex.Pattern;
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java,24,import java.util.NoSuchElementException;
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java,131,try
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java,135,buildNumber = Integer.valueOf( part2 );
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java,137,else
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java,150,try
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java,152,majorVersion = Integer.valueOf( part1 );
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java,166,try
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java,171,minorVersion = getNextIntegerToken( tok );
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java,175,incrementalVersion = getNextIntegerToken( tok );
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java,179,qualifier = tok.nextToken();
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java,180,fallback = Pattern.compile( "\\d+" ).matcher( qualifier ).matches();
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java,210,String s = tok.nextToken();
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java,213,throw new NumberFormatException( "Number part has a leading 0: '" + s + "'" );
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java,215,return Integer.valueOf( s );
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java,219,throw new NumberFormatException( "Number is invalid" );
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java,440,canonical = items.toString();
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java,465,return ( o instanceof ComparableVersion ) && canonical.equals( ( (ComparableVersion) o ).canonical );
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java,470,return canonical.hashCode();
maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java,68,private static final Pattern ID_REGEX = Pattern.compile( "[A-Za-z0-9_\\-.]+" );
maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java,70,private static final Pattern ID_WITH_WILDCARDS_REGEX = Pattern.compile( "[A-Za-z0-9_\\-.?*]+" );
maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java,750,boolean match = ID_REGEX.matcher( id ).matches();
maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java,756,return match;
maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java,770,boolean match = ID_WITH_WILDCARDS_REGEX.matcher( id ).matches();
maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java,776,return match;
maven-core/src/main/java/org/apache/maven/project/MavenProject.java,1210,setFile( project.getFile() );
maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java,1276,eventSpyDispatcher.onEvent( toolchainsRequest );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,47,import org.apache.maven.repository.RepositorySystem;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,81,private RepositorySystem repositorySystem;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,95,internalRepositories.add( repositorySystem.buildArtifactRepository( repository ) );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java,172,initProject( project, Collections.<String, MavenProject>emptyMap(), result,
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java,173,new HashMap<File, Boolean>(), projectBuildingRequest );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java,582,MavenProject project = interimResult.listener.getProject();
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java,583,initProject( project, projectIndex, result, profilesXmls, request );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java,599,results.add( new DefaultProjectBuildingResult( e.getModelId(), interimResult.pomFile,
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java,600,e.getProblems() ) );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java,609,private void initProject( MavenProject project, Map<String, MavenProject> projects, ModelBuildingResult result,
maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/ConcurrencyDependencyGraph.java,69,List<MavenProject> result = new ArrayList<>();
maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/ConcurrencyDependencyGraph.java,77,return result;
maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/MultiThreadedBuilder.java,90,ConcurrencyDependencyGraph analyzer =
maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/MultiThreadedBuilder.java,91,new ConcurrencyDependencyGraph( projectBuilds, session.getProjectDependencyGraph() );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java,373,new HashMap<File, Boolean>() ) && noErrors;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java,587,build( results, modules, projectIndex, interimResult.modules, request, profilesXmls ) && noErrors;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java,595,results.add( new DefaultProjectBuildingResult( project, result.getProblems(), null ) );
maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java,448,tgt = new Site();
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java,115,return build( pomFile, new FileModelSource( pomFile ), new InternalConfig( request, null, null ) );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java,122,return build( null, modelSource, new InternalConfig( request, null, null ) );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java,293,InternalConfig config = new InternalConfig( request, null, null );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java,355,ReactorModelCache modelCache = new ReactorModelCache();
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java,357,InternalConfig config = new InternalConfig( request, modelPool, modelCache );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java,944,this.modelCache = modelCache;
maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java,22,import java.util.HashMap;
maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java,23,import java.util.Map;
maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java,36,private final Map<CacheKey, Object> models = new HashMap<>( 256 );
maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java,1048,slf4jLogger.error( buffer().a( "  " ).strong( "mvn <goals> -rf :"
maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java,1049,+ project.getArtifactId() ).toString() );
maven-artifact/src/main/java/org/apache/maven/artifact/Artifact.java,49,Pattern VERSION_FILE_PATTERN = Pattern.compile( "^(.*)-([0-9]{8}.[0-9]{6})-([0-9]+)$" );
maven-compat/src/main/java/org/apache/maven/project/interpolation/AbstractStringBasedModelInterpolator.java,244,return projectDir.getAbsoluteFile().toURI().toString();
maven-model-builder/src/main/java/org/apache/maven/model/interpolation/AbstractStringBasedModelInterpolator.java,161,return projectDir.getAbsoluteFile().toURI().toString();
maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/ConcurrencyDependencyGraph.java,48,private final HashSet<MavenProject> finishedProjects = new HashSet<>();
maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/ConcurrencyDependencyGraph.java,114,unfinished.remove( finishedProjects );
maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java,810,string = string.trim();
maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java,815,return true;
maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java,818,addViolation( problems, severity, version, fieldName, null, "contains an expression but should be a constant.",
maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java,819,tracker );
maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java,821,return false;
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,848,if ( expectedParentSource instanceof ModelSource2
maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleDependencyResolver.java,130,project.setResolvedArtifacts( artifacts );
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,28,import org.eclipse.aether.RepositorySystemSession;
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,29,import org.eclipse.aether.repository.RemoteRepository;
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,30,import org.eclipse.aether.repository.RepositoryPolicy;
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,31,import org.eclipse.aether.repository.WorkspaceReader;
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,32,import org.eclipse.aether.repository.WorkspaceRepository;
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,52,int result = 17;
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,55,result = 31 * result + repositoryHashCode( repository );
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,57,return result;
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,62,int result = 17;
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,63,result = 31 * result + hash( repository.getUrl() );
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,64,return result;
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,71,return true;
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,76,&& policyEquals( r1.getPolicy( true ), r2.getPolicy( true ) );
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,83,return true;
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,86,return p1.isEnabled() == p2.isEnabled() && eq( p1.getChecksumPolicy(), p2.getChecksumPolicy() );
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,93,return false;
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,100,return false;
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,104,return true;
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,207,WorkspaceReader reader = session.getWorkspaceReader();
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,208,return ( reader != null ) ? reader.getRepository() : null;
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java,68,workspace = CacheUtils.getWorkspace( session );
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java,86,hash = hash * 31 + hash( workspace );
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java,87,hash = hash * 31 + hash( localRepo );
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java,88,hash = hash * 31 + CacheUtils.repositoriesHashCode( repositories );
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java,89,hash = hash * 31 + hash( extensionFilter );
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java,107,return obj != null ? obj.hashCode() : 0;
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java,127,&& eq( filter, that.filter );
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java,132,return s1 != null ? s1.equals( s2 ) : s2 == null;
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java,149,workspace = CacheUtils.getWorkspace( session );
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java,170,hash = hash * 31 + CacheUtils.repositoriesHashCode( repositories );
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java,198,&& CacheUtils.repositoriesEquals( this.repositories, that.repositories );
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java,75,this.workspace = CacheUtils.getWorkspace( session );
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java,96,hash = hash * 31 + hash( workspace );
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java,97,hash = hash * 31 + hash( localRepo );
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java,98,hash = hash * 31 + CacheUtils.repositoriesHashCode( repositories );
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java,99,hash = hash * 31 + hash( parentRealm );
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java,101,hash = hash * 31 + hash( dependencyFilter );
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java,119,return obj != null ? obj.hashCode() : 0;
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java,140,&& eq( foreignImports, that.foreignImports );
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java,145,return s1 != null ? s1.equals( s2 ) : s2 == null;
maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecyclePluginAnalyzer.java,193,execution.setConfiguration( mojo.getConfiguration() );
maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java,42,import org.codehaus.plexus.component.annotations.Component;
maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java,43,import org.codehaus.plexus.component.annotations.Requirement;
maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionRangeResolver.java,25,import org.codehaus.plexus.component.annotations.Component;
maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionRangeResolver.java,26,import org.codehaus.plexus.component.annotations.Requirement;
maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionResolver.java,27,import org.codehaus.plexus.component.annotations.Component;
maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionResolver.java,28,import org.codehaus.plexus.component.annotations.Requirement;
maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/SnapshotMetadataGeneratorFactory.java,22,import org.codehaus.plexus.component.annotations.Component;
maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/VersionsMetadataGeneratorFactory.java,22,import org.codehaus.plexus.component.annotations.Component;
maven-core/src/main/java/org/apache/maven/RepositoryUtils.java,319,Dependency result = new Dependency( artifact, dependency.getScope(), dependency.isOptional(), exclusions );
maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/ArtifactDescriptorReaderDelegate.java,127,Dependency result = new Dependency( artifact, dependency.getScope(), dependency.isOptional(), exclusions );
maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java,692,container.discoverComponents( extension.getClassRealm() );
maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java,699,Thread.currentThread().setContextClassLoader( container.getContainerRealm() );
maven-core/src/main/java/org/apache/maven/project/DependencyResolutionException.java,29,private DependencyResolutionResult result;
maven-core/src/main/java/org/apache/maven/project/MavenProject.java,124,private List<Artifact> attachedArtifacts;
maven-core/src/main/java/org/apache/maven/project/MavenProject.java,924,getAttachedArtifacts().add( artifact );
maven-core/src/main/java/org/apache/maven/project/MavenProject.java,933,return attachedArtifacts;
maven-core/src/main/java/org/apache/maven/ReactorReader.java,69,projectsByGAV = session.getProjectMap();
maven-core/src/main/java/org/apache/maven/ReactorReader.java,183,return new File( project.getBuild().getOutputDirectory() );
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java,41,import org.eclipse.aether.collection.DependencyGraphTransformer;
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java,58,import org.eclipse.aether.util.graph.transformer.ChainedDependencyGraphTransformer;
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java,141,return resolveInternal( plugin, null /* pluginArtifact */, dependencyFilter, null /* transformer */,
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java,149,return resolveInternal( plugin, pluginArtifact, dependencyFilter, new PlexusUtilsInjector(), repositories,
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java,154,DependencyGraphTransformer transformer,
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java,175,transformer =
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java,176,ChainedDependencyGraphTransformer.newInstance( session.getDependencyGraphTransformer(), transformer );
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java,180,pluginSession.setDependencyGraphTransformer( transformer );
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,1,package org.apache.maven.plugin.internal;
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,22,import org.eclipse.aether.RepositoryException;
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,23,import org.eclipse.aether.artifact.Artifact;
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,24,import org.eclipse.aether.artifact.DefaultArtifact;
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,25,import org.eclipse.aether.collection.DependencyGraphTransformationContext;
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,26,import org.eclipse.aether.collection.DependencyGraphTransformer;
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,27,import org.eclipse.aether.graph.DefaultDependencyNode;
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,28,import org.eclipse.aether.graph.Dependency;
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,29,import org.eclipse.aether.graph.DependencyNode;
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,30,import org.eclipse.aether.util.artifact.JavaScopes;
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,38,class PlexusUtilsInjector
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,39,implements DependencyGraphTransformer
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,42,private static final String GID = "org.codehaus.plexus";
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,44,private static final String AID = "plexus-utils";
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,46,private static final String VER = "1.1";
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,48,private static final String EXT = "jar";
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,51,throws RepositoryException
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,55,Artifact pu = new DefaultArtifact( GID, AID, null, EXT, VER );
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,56,DefaultDependencyNode child = new DefaultDependencyNode( new Dependency( pu, JavaScopes.RUNTIME ) );
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,57,child.setRepositories( node.getRepositories() );
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,58,child.setRequestContext( node.getRequestContext() );
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,59,node.getChildren().add( child );
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,62,return node;
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,67,Artifact artifact = node.getDependency().getArtifact();
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,72,return node;
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,77,DependencyNode result = findPlexusUtils( child );
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,80,return result;
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,84,return null;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,210,if ( !plugin.isExtensions() && artifacts.size() == 2 && artifacts.get( 0 ).getFile() != null
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,218,publicArtifacts.add( artifacts.get( 0 ) );
maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java,115,this.repositoryIds = new HashSet<>( original.repositoryIds );
maven-resolver-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java,110,this.repositoryIds = new HashSet<>( original.repositoryIds );
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java,297,Item first = get( 0 );
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java,298,return first.compareTo( null );
