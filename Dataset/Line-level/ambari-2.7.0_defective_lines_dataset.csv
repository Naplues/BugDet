File,Line_number,SRC
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,69,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,380,saveEntities(toMerge, toCreateHistoryAndMerge);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,446,void saveEntities(List<AlertCurrentEntity> toMerge,
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,447,List<AlertCurrentEntity> toCreateHistoryAndMerge) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,448,for (AlertCurrentEntity entity : toMerge) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,449,m_alertsDao.merge(entity, m_configuration.isAlertCacheEnabled());
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,452,for (AlertCurrentEntity entity : toCreateHistoryAndMerge) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,453,m_alertsDao.create(entity.getAlertHistory());
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,454,m_alertsDao.merge(entity);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,456,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,457,LOG.debug(
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,459,entity.getAlertId(), entity.getLatestTimestamp(),
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,460,entity.getAlertHistory().getAlertId(),
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,461,entity.getAlertHistory().getAlertState());
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,1179,if (!m_configuration.isAlertCacheEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,1181,return;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,2047,if (LOG.isInfoEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,2048,LOG.info("For configs update on host {} will be used cluster entity {}", hostId, cl.getClusterEntity().toString());
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,2051,LOG.info("For configs update on host {} will be used following cluster desired configs {}", hostId,
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,2052,clusterDesiredConfigs.toString());
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,2056,LOG.info("For configs update on host {} will be used following effective desired tags {}", hostId, configTags.toString());
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,231,.header("Content-Disposition", "inline; filename=\"" + name +"\"").build();
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/HostVersionOutOfSyncListener.java,140,ComponentInfo component = ami.get().getComponent(hostStackId.getStackName(),
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/HostVersionOutOfSyncListener.java,141,hostStackId.getStackVersion(), serviceName, componentName);
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,276,if (targetCollectorHostSupplier != null) {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,277,collectorHost = targetCollectorHostSupplier.get();
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,279,if (failedCollectorConnectionsCounter.get() > RETRY_COUNT_BEFORE_COLLECTOR_FAILOVER) {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,280,LOG.debug("Removing collector " + collectorHost + " from allKnownLiveCollectors.");
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,281,allKnownLiveCollectors.remove(collectorHost);
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,282,targetCollectorHostSupplier = null;
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,286,collectorHost = findPreferredCollectHost();
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,363,public synchronized AppCookieManager getAppCookieManager() {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,364,if (appCookieManager == null) {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,365,appCookieManager = new AppCookieManager();
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,367,return appCookieManager;
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,516,protected synchronized String findPreferredCollectHost() {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,517,if (!isInitializedForHA) {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,518,init();
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,521,shardExpired = false;
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,523,if (targetCollectorHostSupplier != null) {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,524,String targetCollector = targetCollectorHostSupplier.get();
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,525,if (targetCollector != null) {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,526,return targetCollector;
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,531,Collection<String> collectorHosts = getConfiguredCollectorHosts();
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,532,refreshCollectorsFromConfigured(collectorHosts);
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,535,long currentTime = System.currentTimeMillis();
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,536,if (allKnownLiveCollectors.size() == 0 && getZookeeperQuorum() != null
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,537,&& (currentTime - lastFailedZkRequestTime) > zookeeperBackoffTimeMillis) {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,539,LOG.debug("No live collectors from configuration. Requesting zookeeper...");
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,540,allKnownLiveCollectors.addAll(collectorHAHelper.findLiveCollectorHostsFromZNode());
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,541,boolean noNewCollectorFromZk = true;
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,542,for (String collectorHostFromZk : allKnownLiveCollectors) {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,543,if (!collectorHosts.contains(collectorHostFromZk)) {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,544,noNewCollectorFromZk = false;
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,545,break;
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,548,if (noNewCollectorFromZk) {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,549,LOG.debug("No new collector was found from Zookeeper. Will not request zookeeper for " + zookeeperBackoffTimeMillis + " millis");
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,550,lastFailedZkRequestTime = System.currentTimeMillis();
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,554,if (allKnownLiveCollectors.size() != 0) {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,555,targetCollectorHostSupplier = Suppliers.memoizeWithExpiration(
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,556,new Supplier<String>() {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,558,public String get() {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,563,if (shardExpired) {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,564,refreshCollectorsFromConfigured(getConfiguredCollectorHosts());
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,566,return metricSinkWriteShardStrategy.findCollectorShard(new ArrayList<>(allKnownLiveCollectors));
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,569,rand.nextInt(COLLECTOR_HOST_CACHE_MAX_EXPIRATION_MINUTES
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,571,+ COLLECTOR_HOST_CACHE_MIN_EXPIRATION_MINUTES,
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,572,TimeUnit.MINUTES
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,573,);
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,575,String collectorHost = targetCollectorHostSupplier.get();
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,577,return collectorHost;
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,579,LOG.debug("Couldn't find any live collectors. Returning null");
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,580,shardExpired = true;
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,581,return null;
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,594,for (String host : liveHosts) {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,595,allKnownLiveCollectors.add(host);
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,601,allKnownLiveCollectors.remove(hostStr);
ambari-server/src/main/java/org/apache/ambari/server/controller/spi/Resource.java,165,RemoteCluster;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostStateEntity.java,140,if (hostId != null ? hostId != that.hostId : that.hostId != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostStateEntity.java,141,if (availableMem != null ? !availableMem.equals(that.availableMem) : that.availableMem != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostStateEntity.java,142,if (timeInState != null ? !timeInState.equals(that.timeInState) : that.timeInState!= null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostStateEntity.java,143,if (agentVersion != null ? !agentVersion.equals(that.agentVersion) : that.agentVersion != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostStateEntity.java,144,if (currentState != null ? !currentState.equals(that.currentState) : that.currentState != null) return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostStateEntity.java,146,return true;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostStateEntity.java,151,int result = hostId != null ? hostId.intValue() : 0;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostStateEntity.java,152,result = 31 * result + (availableMem != null ? availableMem.intValue() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostStateEntity.java,153,result = 31 * result + (timeInState != null ? timeInState.intValue() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostStateEntity.java,154,result = 31 * result + (agentVersion != null ? agentVersion.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostStateEntity.java,155,result = 31 * result + (currentState != null ? currentState.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostStateEntity.java,156,return result;
ambari-agent/src/main/java/org/apache/ambari/tools/zk/ZkConnection.java,43,ZooKeeper zooKeeper = new ZooKeeper(serverAddress, sessionTimeoutMillis, new Watcher() {
ambari-agent/src/main/java/org/apache/ambari/tools/zk/ZkConnection.java,44,public void process(WatchedEvent event) {
ambari-agent/src/main/java/org/apache/ambari/tools/zk/ZkConnection.java,45,if (event.getState() == SyncConnected) {
ambari-agent/src/main/java/org/apache/ambari/tools/zk/ZkConnection.java,46,connSignal.countDown();
ambari-metrics/ambari-metrics-hadoop-sink/src/main/java/org/apache/hadoop/metrics2/sink/timeline/HadoopTimelineMetricsSink.java,71,private final ExecutorService executorService = Executors.newSingleThreadExecutor(new ThreadFactory() {
ambari-metrics/ambari-metrics-hadoop-sink/src/main/java/org/apache/hadoop/metrics2/sink/timeline/HadoopTimelineMetricsSink.java,72,public Thread newThread(Runnable r) {
ambari-metrics/ambari-metrics-hadoop-sink/src/main/java/org/apache/hadoop/metrics2/sink/timeline/HadoopTimelineMetricsSink.java,73,Thread t = Executors.defaultThreadFactory().newThread(r);
ambari-metrics/ambari-metrics-hadoop-sink/src/main/java/org/apache/hadoop/metrics2/sink/timeline/HadoopTimelineMetricsSink.java,74,t.setDaemon(true);
ambari-metrics/ambari-metrics-hadoop-sink/src/main/java/org/apache/hadoop/metrics2/sink/timeline/HadoopTimelineMetricsSink.java,75,return t;
ambari-metrics/ambari-metrics-host-aggregator/src/main/java/org/apache/hadoop/metrics2/host/aggregator/AggregatorApplication.java,243,Runtime.getRuntime().addShutdownHook(new Thread() {
ambari-metrics/ambari-metrics-host-aggregator/src/main/java/org/apache/hadoop/metrics2/host/aggregator/AggregatorApplication.java,244,public void run() {
ambari-metrics/ambari-metrics-host-aggregator/src/main/java/org/apache/hadoop/metrics2/host/aggregator/AggregatorApplication.java,245,app.stop();
ambari-metrics/ambari-metrics-kafka-sink/src/main/java/org/apache/hadoop/metrics2/sink/kafka/KafkaTimelineMetricsReporter.java,314,Context context = new Context() {
ambari-metrics/ambari-metrics-kafka-sink/src/main/java/org/apache/hadoop/metrics2/sink/kafka/KafkaTimelineMetricsReporter.java,315,public List<TimelineMetric> getTimelineMetricList() {
ambari-metrics/ambari-metrics-kafka-sink/src/main/java/org/apache/hadoop/metrics2/sink/kafka/KafkaTimelineMetricsReporter.java,316,return metricsList;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/TimelineMetricStoreWatcher.java,101,Callable<TimelineMetric> task = new Callable<TimelineMetric>() {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/TimelineMetricStoreWatcher.java,102,public TimelineMetric call() throws Exception {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/TimelineMetricStoreWatcher.java,103,timelineMetricStore.putMetricsSkipCache(metrics);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/TimelineMetricStoreWatcher.java,104,TimelineMetrics timelineMetrics = timelineMetricStore.getTimelineMetrics(
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/TimelineMetricStoreWatcher.java,105,Collections.singletonList(FAKE_METRIC_NAME), Collections.singletonList(FAKE_HOSTNAME),
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/TimelineMetricStoreWatcher.java,106,FAKE_APP_ID, null, startTime - delay * 2 * 1000,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/TimelineMetricStoreWatcher.java,107,startTime + delay * 2 * 1000, Precision.SECONDS, 1, true, null, null);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/TimelineMetricStoreWatcher.java,108,return timelineMetrics.getMetrics().get(0);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/upgrade/core/MetricsDataMigrationLauncher.java,312,Runtime.getRuntime().addShutdownHook(new Thread() {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/upgrade/core/MetricsDataMigrationLauncher.java,313,public void run() {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/upgrade/core/MetricsDataMigrationLauncher.java,314,try {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/upgrade/core/MetricsDataMigrationLauncher.java,315,finalDataMigrationLauncher.saveMetadata();
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/upgrade/core/MetricsDataMigrationLauncher.java,317,LOG.error("Exception during metadata saving, exiting...", e);
ambari-server/src/main/java/org/apache/ambari/server/checks/AtlasMigrationPropertyCheck.java,48,public AtlasMigrationPropertyCheck(){  super(CheckDescription.ATLAS_MIGRATION_PROPERTY_CHECK); }
ambari-server/src/main/java/org/apache/ambari/server/checks/AtlasMigrationPropertyCheck.java,53,public Set<String> getApplicableServices() { return Sets.newHashSet(serviceName); }
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticator.java,292,AttributesMapper attributesMapper = new AttributesMapper() {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticator.java,294,throws NamingException {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticator.java,295,return attrs.get(groupNamingAttribute).get();
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,1346,new Validator() {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,1347,public void validate(UserEntity userEntity, String key) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,1348,List<UserAuthenticationEntity> authenticationEntities = userEntity.getAuthenticationEntities();
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,1351,for (UserAuthenticationEntity entity : authenticationEntities) {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,1352,if ((entity.getAuthenticationType() == UserAuthenticationType.JWT) &&
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,1353,((key == null) ? (entity.getAuthenticationKey() == null) : key.equals(entity.getAuthenticationKey()))) {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,1354,throw new AmbariException("The authentication type already exists for this user");
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,1388,new Validator() {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,1389,public void validate(UserEntity userEntity, String key) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,1391,if (!CollectionUtils.isEmpty(userAuthenticationDAO.findByTypeAndKey(UserAuthenticationType.KERBEROS, key))) {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,1392,throw new AmbariException("The authentication type already exists for this principal");
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,1436,new Validator() {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,1437,public void validate(UserEntity userEntity, String key) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,1438,List<UserAuthenticationEntity> authenticationEntities = userEntity.getAuthenticationEntities();
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,1441,for (UserAuthenticationEntity entity : authenticationEntities) {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,1442,if (entity.getAuthenticationType() == UserAuthenticationType.LOCAL) {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,1443,throw new AmbariException("The authentication type already exists for this user");
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,1477,new Validator() {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,1478,public void validate(UserEntity userEntity, String key) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,1479,List<UserAuthenticationEntity> authenticationEntities = userEntity.getAuthenticationEntities();
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,1482,for (UserAuthenticationEntity entity : authenticationEntities) {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,1483,if (entity.getAuthenticationType() == UserAuthenticationType.PAM) {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,1484,throw new AmbariException("The authentication type already exists for this user");
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,1518,new Validator() {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,1519,public void validate(UserEntity userEntity, String key) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,1520,List<UserAuthenticationEntity> authenticationEntities = userEntity.getAuthenticationEntities();
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,1523,for (UserAuthenticationEntity entity : authenticationEntities) {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,1524,if ((entity.getAuthenticationType() == UserAuthenticationType.LDAP) &&
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,1525,((key == null) ? (entity.getAuthenticationKey() == null) : key.equalsIgnoreCase(entity.getAuthenticationKey()))) {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,1526,throw new AmbariException("The authentication type already exists for this user");
ambari-server/src/main/java/org/apache/ambari/server/utils/ScheduledExecutorCompletionService.java,38,protected void done() { queue.add(task); }
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,799,factory.setExcludeProtocols();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,800,factory.setIncludeProtocols(new String[] {"SSLv2Hello","SSLv3","TLSv1","TLSv1.1","TLSv1.2"});
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AmbariPrivilegeResourceProvider.java,26,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AmbariPrivilegeResourceProvider.java,124,Map<Long, Object> resourceEntities = new HashMap<>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,128,import org.apache.ambari.server.controller.internal.URLStreamProvider;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,239,import org.apache.commons.io.IOUtils;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4443,URLStreamProvider usp = new URLStreamProvider(REPO_URL_CONNECT_TIMEOUT, REPO_URL_READ_TIMEOUT, null, null, null);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4444,usp.setSetupTruststoreForHttps(false);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4483,IOUtils.readLines(usp.readFrom(spec));
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4497,if (e != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,4499,throw new IllegalArgumentException(errorMessage, e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,40,import org.apache.ambari.server.configuration.ComponentSSLConfiguration;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,573,InputStream stream = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,576,stream = uri.toURL().openStream();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,578,URLStreamProvider provider = new URLStreamProvider(connectTimeout, readTimeout,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,579,ComponentSSLConfiguration.instance());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,581,stream = provider.readFrom(definitionUrl);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/VersionDefinitionResourceProvider.java,584,holder.xmlString = IOUtils.toString(stream, "UTF-8");
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,111,public HeartBeatHandler(Clusters fsm, ActionManager am,
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,115,heartbeatMonitor = new HeartbeatMonitor(fsm, am, 60000, injector);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/URLStreamProvider.java,287,protected HttpsURLConnection getSSLConnection(String spec) throws IOException, IllegalStateException {
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2992,this.properties = readConfigFile();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelper.java,830,throws KerberosInvalidConfigurationException, AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1812,KerberosDescriptor kerberosDescriptor = getKerberosDescriptor(cluster, false);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1820,Map<String, Map<String, String>> configurations = calculateConfigurations(cluster,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1978,if (kerberosKeytabDAO.find(resolvedKerberosKeytab.getFile()) == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1979,KerberosKeytabEntity kke = new KerberosKeytabEntity(resolvedKerberosKeytab.getFile());
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1989,if (!kerberosPrincipalDAO.exists(principal.getPrincipal())) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1990,kerberosPrincipalDAO.create(principal.getPrincipal(), principal.isService());
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1995,KerberosKeytabEntity kke = kerberosKeytabDAO.find(resolvedKerberosKeytab.getFile());
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2001,kerberosKeytabDAO.merge(kke);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostKerberosIdentityResourceProvider.java,163,kerberosHelper.getActiveIdentities(clusterName, hostName, null, null, true);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabDAO.java,83,return findByPrincipalAndNullHost(principalName);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabPrincipalDAO.java,89,return kkp;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosPrincipalDAO.java,66,public void create(String principalName, boolean service) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosPrincipalDAO.java,67,create(new KerberosPrincipalEntity(principalName, service, null));
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabEntity.java,40,query = "SELECT kk FROM KerberosKeytabEntity kk JOIN kk.kerberosKeytabPrincipalEntities kkp WHERE kkp.hostId=:hostId AND kkp.principalName=:principalName"
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabEntity.java,41,),
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabPrincipalEntity.java,150,this.kerberosKeytabEntity = kke;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java,135,if (srcKeytabFile.exists()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java,136,String ownerAccess = keytab.getOwnerAccess();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java,137,String groupAccess = keytab.getGroupAccess();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java,139,installAmbariServerIdentity(resolvedPrincipal, srcKeytabFile.getAbsolutePath(), destKeytabFilePath,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java,140,keytab.getOwnerName(), ownerAccess,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java,141,keytab.getGroupName(), groupAccess, actionLog);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java,143,if (serviceMappingEntry.getValue().contains("AMBARI_SERVER_SELF")) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java,145,configureJAAS(resolvedPrincipal.getPrincipal(), destKeytabFilePath, actionLog);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,23,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,35,import org.apache.ambari.server.orm.dao.HostDAO;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,78,private HostDAO hostDAO;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,87,Map<String, Set<String>> visitedIdentities = new HashMap<>();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,180,Set<String> visitedPrincipalKeys = visitedIdentities.get(resolvedPrincipal.getPrincipal());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,181,String visitationKey = String.format("%s|%s", hostName, keytabFilePath);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,183,if ((visitedPrincipalKeys == null) || !visitedPrincipalKeys.contains(visitationKey)) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,186,String password = principalPasswordMap.get(resolvedPrincipal.getPrincipal());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,187,Integer keyNumber = principalKeyNumberMap.get(resolvedPrincipal.getPrincipal());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,189,message = String.format("Creating keytab file for %s on host %s", resolvedPrincipal.getPrincipal(), hostName);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,190,LOG.info(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,191,actionLog.writeStdOut(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,192,auditEventBuilder.withPrincipal(resolvedPrincipal.getPrincipal()).withHostName(hostName).withKeyTabFilePath(keytabFilePath);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,196,File hostDirectory = new File(dataDirectory, hostName);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,199,if (!hostDirectory.exists() && hostDirectory.mkdirs()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,201,ensureAmbariOnlyAccess(hostDirectory);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,204,if (hostDirectory.exists()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,205,File destinationKeytabFile = new File(hostDirectory, DigestUtils.sha256Hex(keytabFilePath));
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,207,boolean regenerateKeytabs = getOperationType(getCommandParameters()) == OperationType.RECREATE_ALL;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,209,KerberosPrincipalEntity principalEntity = kerberosPrincipalDAO.find(resolvedPrincipal.getPrincipal());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,210,String cachedKeytabPath = (principalEntity == null) ? null : principalEntity.getCachedKeytabPath();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,212,if (password == null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,213,if (!regenerateKeytabs && hostName.equalsIgnoreCase(KerberosHelper.AMBARI_SERVER_HOST_NAME)) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,216,message = String.format("Skipping keytab file for %s, missing password indicates nothing to do", resolvedPrincipal.getPrincipal());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,217,LOG.info(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,219,if (cachedKeytabPath == null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,220,message = String.format("Failed to create keytab for %s, missing cached file", resolvedPrincipal.getPrincipal());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,221,actionLog.writeStdErr(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,222,LOG.error(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,223,commandReport = createCommandReport(1, HostRoleStatus.FAILED, "{}", actionLog.getStdOut(), actionLog.getStdErr());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,225,try {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,226,operationHandler.createKeytabFile(new File(cachedKeytabPath), destinationKeytabFile);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,228,message = String.format("Failed to create keytab file for %s - %s", resolvedPrincipal.getPrincipal(), e.getMessage());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,230,LOG.error(message, e);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,236,Keytab keytab = createKeytab(resolvedPrincipal.getPrincipal(), password, keyNumber, operationHandler, visitedPrincipalKeys != null, true, actionLog);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,238,if (keytab != null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,239,try {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,240,if (operationHandler.createKeytabFile(keytab, destinationKeytabFile)) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,241,ensureAmbariOnlyAccess(destinationKeytabFile);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,243,message = String.format("Successfully created keytab file for %s at %s", resolvedPrincipal.getPrincipal(), destinationKeytabFile.getAbsolutePath());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,244,LOG.info(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,245,auditEventBuilder.withPrincipal(resolvedPrincipal.getPrincipal()).withHostName(hostName).withKeyTabFilePath(destinationKeytabFile.getAbsolutePath());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,247,message = String.format("Failed to create keytab file for %s at %s", resolvedPrincipal.getPrincipal(), destinationKeytabFile.getAbsolutePath());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,249,LOG.error(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,253,message = String.format("Failed to create keytab file for %s - %s", resolvedPrincipal.getPrincipal(), e.getMessage());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,254,actionLog.writeStdErr(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,255,LOG.error(message, e);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,259,commandReport = createCommandReport(1, HostRoleStatus.FAILED, "{}", actionLog.getStdOut(), actionLog.getStdErr());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,262,if (visitedPrincipalKeys == null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,263,visitedPrincipalKeys = new HashSet<>();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,264,visitedIdentities.put(resolvedPrincipal.getPrincipal(), visitedPrincipalKeys);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,267,visitedPrincipalKeys.add(visitationKey);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,270,message = String.format("Failed to create keytab file for %s, the container directory does not exist: %s",
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,271,resolvedPrincipal.getPrincipal(), hostDirectory.getAbsolutePath());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,272,actionLog.writeStdErr(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,273,LOG.error(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,274,commandReport = createCommandReport(1, HostRoleStatus.FAILED, "{}", actionLog.getStdOut(), actionLog.getStdErr());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreateKeytabFilesServerAction.java,277,LOG.debug("Skipping previously processed keytab for {} on host {}", resolvedPrincipal.getPrincipal(), hostName);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java,154,String password = principalPasswordMap.get(resolvedPrincipal.getPrincipal());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java,156,if (password == null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java,157,CreatePrincipalResult result = createPrincipal(resolvedPrincipal.getPrincipal(), servicePrincipal, kerberosConfiguration, operationHandler, regenerateKeytabs, actionLog);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java,158,if (result == null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java,159,commandReport = createCommandReport(1, HostRoleStatus.FAILED, "{}", actionLog.getStdOut(), actionLog.getStdErr());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java,161,Map<String, Integer> principalKeyNumberMap = getPrincipalKeyNumberMap(requestSharedDataContext);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java,163,principalPasswordMap.put(resolvedPrincipal.getPrincipal(), result.getPassword());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java,164,principalKeyNumberMap.put(resolvedPrincipal.getPrincipal(), result.getKeyNumber());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java,166,for (KerberosKeytabPrincipalEntity kkpe: kerberosKeytabPrincipalDAO.findByPrincipal(resolvedPrincipal.getPrincipal())) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java,167,kkpe.setDistributed(false);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java,168,kerberosKeytabPrincipalDAO.merge(kkpe);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java,171,KerberosPrincipalEntity principalEntity = kerberosPrincipalDAO.find(resolvedPrincipal.getPrincipal());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java,172,try {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java,173,new File(principalEntity.getCachedKeytabPath()).delete();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java,175,LOG.debug("Failed to delete cache file '{}'", principalEntity.getCachedKeytabPath());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java,177,principalEntity.setCachedKeytabPath(null);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java,178,kerberosPrincipalDAO.merge(principalEntity);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/FinalizeKerberosServerAction.java,91,if (!StringUtils.isEmpty(keytabFilePath)) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java,89,return fromKeytabEntities(kerberosKeytabDAO.findByPrincipalAndHost(rkp.getPrincipal(), rkp.getHostId()));
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,629,if (responseCode == 200) {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,630,try (InputStream in = connection.getInputStream()) {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,631,StringWriter writer = new StringWriter();
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,632,IOUtils.copy(in, writer);
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,633,try {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,634,collectors = gson.fromJson(writer.toString(), new TypeToken<List<String>>(){}.getType());
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,637,LOG.debug("Exception deserializing the json data on live " +
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentDesiredStateEntity.java,262,return Objects.toStringHelper(this).add("serviceName", serviceName).add("componentName",
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntity.java,39,import com.google.common.base.Objects;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntity.java,281,return Objects.toStringHelper(this).add("serviceName", serviceName).add("componentName",
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigurationCondition.java,34,import com.google.common.base.Objects;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigurationCondition.java,122,return Objects.toStringHelper(this).add("type", type).add("property", property).add("value",
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,42,import com.google.common.base.Objects;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,424,return Objects.toStringHelper(this).add("name", name).toString();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/HostOrderItem.java,24,import com.google.common.base.Objects;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/HostOrderItem.java,98,return Objects.toStringHelper(this).add("type", m_type).add("items",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java,1654,populateConfigurationToBeMoved(propertiesToBeMoved, oldPropertyName, keyToBesaved, hostAndPort.getHostText());
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,643,Class<?> clazz = ClassUtils.resolveClassName(className,
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,644,ClassUtils.getDefaultClassLoader());
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,646,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,647,NotificationDispatcher dispatcher;
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,648,if (clazz.equals(AmbariSNMPDispatcher.class)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,649,dispatcher = (NotificationDispatcher) clazz.getConstructor(Integer.class).newInstance(configuration.getAmbariSNMPUdpBindPort());
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,651,dispatcher = (NotificationDispatcher) clazz.getConstructor(Integer.class).newInstance(configuration.getSNMPUdpBindPort());
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,653,dispatcher = (NotificationDispatcher) clazz.newInstance();
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,655,dispatchFactory.register(dispatcher.getType(), dispatcher);
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,656,bind((Class<NotificationDispatcher>) clazz).toInstance(dispatcher);
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,658,LOG.info("Binding and registering notification dispatcher {}", clazz);
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,660,LOG.error("Unable to bind and register notification dispatcher {}",
ambari-server/src/main/java/org/apache/ambari/server/controller/ControllerModule.java,661,clazz, exception);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterResourceProvider.java,471,if (absCategory.startsWith(parentCategory + "/desired_service_config_version")) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterResourceProvider.java,476,serviceConfigVersionRequest.setServiceName(entry.getValue().toString());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterResourceProvider.java,478,serviceConfigVersionRequest.setVersion(Long.valueOf(entry.getValue().toString()));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterResourceProvider.java,479,else if (propName.equals("service_config_version_note")) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterResourceProvider.java,480,serviceConfigVersionRequest.setNote(entry.getValue().toString());
ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/TopologyHolder.java,147,boolean changed = false;
ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/TopologyHolder.java,157,changed = true;
ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/TopologyHolder.java,159,if (getData().getClusters().get(clusterId).update(
ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/TopologyHolder.java,162,eventType)) {
ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/TopologyHolder.java,163,changed = true;
ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/TopologyHolder.java,169,changed = true;
ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/TopologyHolder.java,175,return changed;
ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/TopologyCluster.java,47,public boolean update(Set<TopologyComponent> componentsToUpdate, Set<TopologyHost> hostsToUpdate,
ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/TopologyCluster.java,48,UpdateEventType eventType) {
ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/TopologyCluster.java,49,boolean changed = false;
ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/TopologyCluster.java,58,changed = true;
ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/TopologyCluster.java,60,changed |= existsComponent.removeComponent(componentToUpdate);
ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/TopologyCluster.java,63,changed |= existsComponent.updateComponent(componentToUpdate);
ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/TopologyCluster.java,70,changed = true;
ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/TopologyCluster.java,80,changed = true;
ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/TopologyCluster.java,82,changed |= existsHost.updateHost(hostToUpdate);
ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/TopologyCluster.java,89,changed = true;
ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/TopologyCluster.java,92,return changed;
ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/TopologyComponent.java,78,public Builder setHostIds(Set<Long> hostIds) {
ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/TopologyComponent.java,80,return this;
ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/TopologyComponent.java,83,public Builder setHostNames(Set<String> hostNames) {
ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/TopologyHost.java,31,public TopologyHost() {
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,96,hgHostsMap);
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorHelper.java,63,public StackAdvisorHelper(Configuration conf, StackAdvisorRunner saRunner,
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorHelper.java,64,AmbariMetaInfo metaInfo, AmbariServerConfigurationHandler ambariServerConfigurationHandler) throws IOException {
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorHelper.java,125,throws StackAdvisorException {
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorHelper.java,135,return command.invoke(request, serviceAdvisorType);
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorHelper.java,148,requestId, saRunner, metaInfo, ambariServerConfigurationHandler);
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorHelper.java,151,requestId, saRunner, metaInfo, ambariServerConfigurationHandler);
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorHelper.java,154,requestId, saRunner, metaInfo, ambariServerConfigurationHandler);
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorRequest.java,200,Set<RecommendationResponse.ConfigGroup> configGroups) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/ComponentLayoutRecommendationCommand.java,45,super(recommendationsDir, recommendationsArtifactsLifetime, serviceAdvisorType, requestId, saRunner, metaInfo, ambariServerConfigurationHandler);
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/ConfigurationRecommendationCommand.java,60,AmbariServerConfigurationHandler ambariServerConfigurationHandler) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/ConfigurationRecommendationCommand.java,61,super(recommendationsDir, recommendationsArtifactsLifetime, serviceAdvisorType, requestId, saRunner, metaInfo, ambariServerConfigurationHandler);
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,122,StackAdvisorRunner saRunner, AmbariMetaInfo metaInfo, AmbariServerConfigurationHandler ambariServerConfigurationHandler) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,381,String hostsURI = String.format(GET_HOSTS_INFO_URI, request.getHostsCommaSeparated());
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,383,Response response = handleRequest(null, null, new LocalUriInfo(hostsURI), Request.Type.GET,
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,384,createHostResource());
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,386,if (response.getStatus() != Status.OK.getStatusCode()) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,387,String message = String.format(
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,389,response.getStatus(), (String) response.getEntity());
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,390,LOG.warn(message);
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,391,throw new StackAdvisorException(message);
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,394,String hostsJSON = (String) response.getEntity();
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,395,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,396,LOG.debug("Hosts information: {}", hostsJSON);
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,413,ObjectMapper mapper = new ObjectMapper();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,799,UpdateEventType.UPDATE);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,913,injector.getInstance(Configuration.class));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,848,TopologyHost topologyHost = new TopologyHost();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,856,topologyHost.setHostId(host.getHostId());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RecommendationResourceProvider.java,159,setResourceProperty(resource, RECOMMENDATION_ID_PROPERTY_ID, response.getId(), getPropertyIds());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RecommendationResourceProvider.java,160,setResourceProperty(resource, STACK_NAME_PROPERTY_ID, response.getVersion().getStackName(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RecommendationResourceProvider.java,161,getPropertyIds());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RecommendationResourceProvider.java,163,.getStackVersion(), getPropertyIds());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RecommendationResourceProvider.java,164,setResourceProperty(resource, HOSTS_PROPERTY_ID, response.getHosts(), getPropertyIds());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RecommendationResourceProvider.java,165,setResourceProperty(resource, SERVICES_PROPERTY_ID, response.getServices(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RecommendationResourceProvider.java,166,getPropertyIds());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RecommendationResourceProvider.java,172,Set<HostGroup> hostGroups = response.getRecommendations().getBlueprint().getHostGroups();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RecommendationResourceProvider.java,173,List<Map<String, Object>> listGroupProps = new ArrayList<>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RecommendationResourceProvider.java,174,for (HostGroup hostGroup : hostGroups) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RecommendationResourceProvider.java,175,Map<String, Object> mapGroupProps = new HashMap<>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RecommendationResourceProvider.java,176,mapGroupProps.put(BLUEPRINT_HOST_GROUPS_NAME_PROPERTY_ID, hostGroup.getName());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RecommendationResourceProvider.java,177,mapGroupProps
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RecommendationResourceProvider.java,178,.put(BLUEPRINT_HOST_GROUPS_COMPONENTS_PROPERTY_ID, hostGroup.getComponents());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RecommendationResourceProvider.java,179,listGroupProps.add(mapGroupProps);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RecommendationResourceProvider.java,181,setResourceProperty(resource, BLUEPRINT_HOST_GROUPS_PROPERTY_ID, listGroupProps,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RecommendationResourceProvider.java,182,getPropertyIds());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RecommendationResourceProvider.java,185,.getBlueprintClusterBinding().getHostGroups();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RecommendationResourceProvider.java,186,List<Map<String, Object>> listBindingGroupProps = new ArrayList<>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RecommendationResourceProvider.java,187,for (BindingHostGroup hostGroup : bindingHostGroups) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RecommendationResourceProvider.java,188,Map<String, Object> mapGroupProps = new HashMap<>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RecommendationResourceProvider.java,189,mapGroupProps.put(BINDING_HOST_GROUPS_NAME_PROPERTY_ID, hostGroup.getName());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RecommendationResourceProvider.java,190,mapGroupProps.put(BINDING_HOST_GROUPS_HOSTS_PROPERTY_ID, hostGroup.getHosts());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RecommendationResourceProvider.java,191,listBindingGroupProps.add(mapGroupProps);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RecommendationResourceProvider.java,193,setResourceProperty(resource, BINDING_HOST_GROUPS_PROPERTY_ID, listBindingGroupProps,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RecommendationResourceProvider.java,194,getPropertyIds());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,87,protected static Configuration configuration;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,92,public static void init(StackAdvisorHelper instance, Configuration serverConfig) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,118,Object hostsObject = getRequestProperty(request, HOST_PROPERTY);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,119,if (hostsObject instanceof LinkedHashSet) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,120,if (((LinkedHashSet)hostsObject).isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,121,throw new Exception("Empty host list passed to recommendation service");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,124,List<String> hosts = (List<String>) hostsObject;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,126,Object servicesObject = getRequestProperty(request, SERVICES_PROPERTY);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,127,if (servicesObject instanceof LinkedHashSet) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,128,if (((LinkedHashSet)servicesObject).isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,129,throw new Exception("Empty service list passed to recommendation service");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,132,List<String> services = (List<String>) servicesObject;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,134,Map<String, Set<String>> hgComponentsMap = calculateHostGroupComponentsMap(request);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,135,Map<String, Set<String>> hgHostsMap = calculateHostGroupHostsMap(request);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,136,Map<String, Set<String>> componentHostsMap = calculateComponentHostsMap(hgComponentsMap,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,137,hgHostsMap);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,138,Map<String, Map<String, Map<String, String>>> configurations = calculateConfigurations(request);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,146,Set<RecommendationResponse.ConfigGroup> configGroups = calculateConfigGroups(request);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,156,withGPLLicenseAccepted(gplLicenseAccepted).build();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,281,HashMap<String, String> userContext = new HashMap<>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackAdvisorResourceProvider.java,336,Map<String, Set<String>> bindingHostGroups) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/hosts/HostUpdateListener.java,37,import org.apache.ambari.server.orm.dao.ServiceDesiredStateDAO;
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/hosts/HostUpdateListener.java,59,private ServiceDesiredStateDAO serviceDesiredStateDAO;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,798,Map<String, Set<String>> componentHostMap = new HashMap<>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,818,componentHosts = new HashSet<>();
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,971,r.setAgentVersion(getAgentVersion());
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,972,r.setPhCpuCount(getPhCpuCount());
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,973,r.setCpuCount(getCpuCount());
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,975,r.setHealthStatus(getHealthStatus());
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,976,r.setHostAttributes(getHostAttributes());
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,977,r.setIpv4(getIPv4());
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,980,r.setLastRegistrationTime(getLastRegistrationTime());
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,981,r.setOsArch(getOsArch());
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,982,r.setOsType(getOsType());
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,983,r.setOsFamily(getOsFamily());
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,984,r.setRackInfo(getRackInfo());
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,985,r.setTotalMemBytes(getTotalMemBytes());
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,986,r.setPublicHostName(getPublicHostName());
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,987,r.setHostState(getState());
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,988,r.setStatus(getStatus());
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewInstanceEntity.java,814,return securityHelper.getCurrentUserName();
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapBindAuthenticator.java,104,AuthorizationHelper.addLoginNameAlias(processedLdapUserName, loginName);
contrib/views/capacity-scheduler/src/main/java/org/apache/ambari/view/capacityscheduler/ConfigurationService.java,319,String url = String.format(AMBARI_OR_CLUSTER_ADMIN_PRIVILEGE_URL, context.getUsername(), context.getCluster().getName());
ambari-server/src/main/java/org/apache/ambari/server/configuration/spring/AgentStompConfig.java,23,import org.apache.ambari.server.api.stomp.TestController;
ambari-server/src/main/java/org/apache/ambari/server/events/DefaultMessageEmitter.java,104,return DEFAULT_DESTINATIONS.get(stompEvent.getType());
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/tasks/TaskStatusListener.java,101,STOMPUpdatePublisher STOMPUpdatePublisher) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementController.java,257,RequestStatusResponse updateClusters(Set<ClusterRequest> requests,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,915,ConfigurationRequest request) throws AmbariException, AuthorizationException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1052,request.getVersionTag(), propertiesAttributes);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1064,String versionTag, Map<String, Map<String, String>> propertiesAttributes) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1066,Config config = configFactory.createNew(stackId, cluster, type, versionTag, properties,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1067,propertiesAttributes);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1559,return updateClusters(requests, requestProperties, true);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1574,response = updateCluster(request, requestProperties, fireAgentUpdates);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1675,boolean fireAgentUpdates
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1834,configurationResponses.add(createConfiguration(cr));
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java,108,this(cluster.getDesiredStackVersion(), cluster, type, tag, properties, propertiesAttributes,
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java,109,clusterDAO, stackDAO, gson, eventPublisher, lockFactory);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java,114,ConfigImpl(@Assisted @Nullable StackId stackId, @Assisted Cluster cluster, @Assisted("type") String type,
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java,119,Gson gson, AmbariEventPublisher eventPublisher, LockFactory lockFactory) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java,161,persist(entity);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java,346,private void persist(ClusterConfigEntity entity) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java,353,cluster.refresh();
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigImpl.java,397,clusterDAO.merge(clusterEntity, true);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1984,clusterEntity = clusterDAO.merge(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2500,clusterEntity = clusterDAO.merge(clusterEntity, true);
ambari-server/src/main/java/org/apache/ambari/server/state/configgroup/ConfigGroupImpl.java,422,config = configFactory.createNew(service.getDesiredStackId(), cluster, config.getType(),
ambari-server/src/main/java/org/apache/ambari/server/state/configgroup/ConfigGroupImpl.java,423,config.getTag(), config.getProperties(), config.getPropertiesAttributes());
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,531,getController().updateClusters(Collections.singleton(clusterRequest), null, false);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java,145,processPrincipal = false;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java,306,Object map = requestSharedDataContext.get(PRINCIPAL_PASSWORD_MAP);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java,308,if (map == null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java,309,map = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java,310,requestSharedDataContext.put(PRINCIPAL_PASSWORD_MAP, map);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java,313,return (Map<String, String>) map;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java,332,Object map = requestSharedDataContext.get(PRINCIPAL_KEY_NUMBER_MAP);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java,334,if (map == null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java,335,map = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java,336,requestSharedDataContext.put(PRINCIPAL_KEY_NUMBER_MAP, map);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java,339,return (Map<String, Integer>) map;
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,193,void retryHoldingCommandsInRequest(Long requestId) {
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,297,hrc.setStatus(HostRoleStatus.PENDING);
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,298,hrc.setStartTime(-1L);
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,300,hrc.setEndTime(-1L);
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,301,hrc.setLastAttemptTime(-1L);
ambari-server/src/main/java/org/apache/ambari/server/state/services/RetryUpgradeActionService.java,304,m_hostRoleCommandDAO.merge(hrc);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,365,return metricsConf.get("timeline.metrics.service.operation.mode").equals("distributed");
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,625,if (metricName.contains("%")) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,626,String metricRegEx = getJavaRegexFromSqlRegex(metricName);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,627,for (TimelineMetricMetadataKey key : METADATA_CACHE.keySet()) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,628,String metricNameFromMetadata = key.getMetricName();
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,629,if (metricNameFromMetadata.matches(metricRegEx)) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,630,sanitizedMetricNames.add(metricNameFromMetadata);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,634,sanitizedMetricNames.add(metricName);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,638,if(sanitizedMetricNames.isEmpty()) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,639,return uuids;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,642,Set<String> sanitizedHostNames = getSanitizedHostnames(hostnames);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,647,if (CollectionUtils.isNotEmpty(sanitizedHostNames)) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,648,if (CollectionUtils.isNotEmpty(sanitizedMetricNames)) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,652,for (String metricName : sanitizedMetricNames) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,653,if (isTransientMetric(metricName, appId)) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,654,transientMetricNames.add(metricName);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,655,continue;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,657,TimelineMetric metric = new TimelineMetric();
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,658,metric.setMetricName(metricName);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,659,metric.setAppId(appId);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,660,metric.setInstanceId(instanceId);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,661,for (String hostname : sanitizedHostNames) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,662,metric.setHostName(hostname);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,663,byte[] uuid = getUuid(metric, false);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,670,for (String hostname : sanitizedHostNames) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,671,byte[] uuid = getUuidForHostname(hostname, false);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,678,for (String metricName : sanitizedMetricNames) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,680,if (isTransientMetric(metricName, appId)) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,681,transientMetricNames.add(metricName);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,682,continue;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,684,TimelineClusterMetric metric = new TimelineClusterMetric(metricName, appId, instanceId, -1l);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,685,byte[] uuid = getUuid(metric, false);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,686,if (uuid != null) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,687,uuids.add(uuid);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/query/TransientMetricCondition.java,52,appendConjunction = append(sb, appendConjunction, getAppId(), " APP_ID = ?");
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/query/TransientMetricCondition.java,53,appendConjunction = append(sb, appendConjunction, getInstanceId(), " INSTANCE_ID = ?");
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/query/TransientMetricCondition.java,60,private boolean appendMetricNameClause(StringBuilder sb) {
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchConfigApiConfig.java,25,import static org.apache.ambari.logsearch.common.LogSearchConstants.LOGSEARCH_PROPERTIES_FILE;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java,139,public LogsearchAuthenticationProvider logsearchAuthenticationProvider() {
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java,140,return new LogsearchAuthenticationProvider();
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java,21,import org.apache.ambari.logsearch.conf.global.SolrAuditLogsState;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java,22,import org.apache.ambari.logsearch.conf.global.SolrCollectionState;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java,62,public SolrCollectionState solrServiceLogsState() {
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java,63,return new SolrServiceLogsState();
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java,67,public SolrCollectionState solrAuditLogsState() {
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java,68,return new SolrAuditLogsState();
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java,72,public SolrCollectionState solrEventHistoryState() {
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java,73,return new SolrEventHistoryState();
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorRunner.java,166,message = FileUtils.readFileToString(new File(file)).trim();
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,311,FileUtils.writeStringToFile(new File(requestDirectory, "hosts.json"), adjusted.hostsJSON);
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,312,FileUtils.writeStringToFile(new File(requestDirectory, "services.json"), adjusted.servicesJSON);
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommand.java,315,String result = FileUtils.readFileToString(new File(requestDirectory, getResultFileName()));
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSHostStatusCollector.java,78,String statusCode = FileUtils.readFileToString(done).trim();
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,144,FileUtils.writeStringToFile(sshKeyFile, data);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,148,FileUtils.writeStringToFile(passwordFile, data);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,303,outMesg = FileUtils.readFileToString(new File(bootStrapOutputFilePath));
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,304,errMesg = FileUtils.readFileToString(new File(bootStrapErrorFilePath));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2806,FileUtils.writeStringToFile(passFile, password);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2817,password = FileUtils.readFileToString(passFile);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,2833,password = FileUtils.readFileToString(httpsPassFile);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,3515,return FileUtils.readFileToString(new File(getServerVersionFilePath())).trim();
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,5628,FileUtils.writeStringToFile(file, markdown);
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,290,FileUtils.writeStringToFile(agentCrtReqFile, agentCrtReqContent);
ambari-server/src/main/java/org/apache/ambari/server/security/CertificateManager.java,310,agentCrtContent = FileUtils.readFileToString(agentCrtFile);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CertificateUtils.java,21,import java.io.File;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CertificateUtils.java,22,import java.io.IOException;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CertificateUtils.java,29,import org.apache.commons.io.FileUtils;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CertificateUtils.java,30,import org.slf4j.Logger;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CertificateUtils.java,31,import org.slf4j.LoggerFactory;
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CertificateUtils.java,37,private static final Logger LOG = LoggerFactory.getLogger(CertificateUtils.class);
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CertificateUtils.java,46,public static RSAPublicKey getPublicKeyFromFile(String filePath) throws IOException, CertificateException {
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CertificateUtils.java,47,String pemString = FileUtils.readFileToString(new File(filePath));
ambari-server/src/main/java/org/apache/ambari/server/security/encryption/CertificateUtils.java,48,return getPublicKeyFromString(pemString);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java,240,String jaasConfig = FileUtils.readFileToString(jaasConfigFile);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java,242,FileUtils.writeStringToFile(oldJaasConfigFile, jaasConfig);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java,245,FileUtils.writeStringToFile(jaasConfigFile, jaasConfig);
ambari-server/src/main/java/org/apache/ambari/server/stack/ConfigurationDirectory.java,150,String propertyValue = FileUtils.readFileToString(propertyFile);
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsDataTransferMethodFactory.java,43,metricsWithAggregateFunctionIds.add(metric + aggregateFunctionId);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,184,Multibinder<UpgradeCatalog> catalogBinder =
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,185,Multibinder.newSetBinder(binder(), UpgradeCatalog.class);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,110,StringBuilder ret = new StringBuilder();
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,111,if (list == null) {
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,112,return "";
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,115,int i = 0;
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,116,for (String host: list) {
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,117,ret.append(host);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,119,ret.append(",");
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,121,return ret.toString();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,682,StringBuilder names = new StringBuilder();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,683,boolean first = true;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,684,for (String hName : duplicates) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,685,if (!first) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,686,names.append(",");
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,688,first = false;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,689,names.append(hName);
ambari-server/src/main/java/org/apache/ambari/server/controller/ClusterRequest.java,147,.append(", hosts=[");
ambari-server/src/main/java/org/apache/ambari/server/controller/ClusterRequest.java,148,if (hostNames != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ClusterRequest.java,149,int i = 0;
ambari-server/src/main/java/org/apache/ambari/server/controller/ClusterRequest.java,150,for (String hostName : hostNames) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ClusterRequest.java,151,if (i != 0) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ClusterRequest.java,152,sb.append(",");
ambari-server/src/main/java/org/apache/ambari/server/controller/ClusterRequest.java,154,++i;
ambari-server/src/main/java/org/apache/ambari/server/controller/ClusterRequest.java,155,sb.append(hostName);
ambari-server/src/main/java/org/apache/ambari/server/controller/ClusterRequest.java,158,sb.append("] }");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,513,StringBuilder names = new StringBuilder();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,514,boolean first = true;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,515,for (String hName : duplicates) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,516,if (!first) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,517,names.append(",");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,519,first = false;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,520,names.append(hName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,522,throw new IllegalArgumentException("Invalid request contains"
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,523,+ " duplicate hostnames"
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,524,+ ", hostnames=" + names);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,528,StringBuilder names = new StringBuilder();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,529,boolean first = true;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,530,for (String hName : unknowns) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,531,if (!first) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,532,names.append(",");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,534,first = false;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostResourceProvider.java,535,names.append(hName);
ambari-metrics/ambari-metrics-hadoop-sink/src/main/java/org/apache/hadoop/metrics2/sink/timeline/HadoopTimelineMetricsSink.java,111,collectorHosts = parseHostsStringArrayIntoCollection(conf.getStringArray(COLLECTOR_HOSTS_PROPERTY));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,338,AlertTargetEntity entity = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,339,if( overwriteExisting ) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertTargetResourceProvider.java,340,entity = s_dao.findTargetByName(name);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/IPAKerberosOperationHandler.java,258,return new String[]{
ambari-server/src/main/java/org/apache/ambari/server/api/services/views/ViewUrlsService.java,41,import org.apache.ambari.server.security.authorization.AuthorizationException;
ambari-server/src/main/java/org/apache/ambari/server/api/services/views/ViewUrlsService.java,45,import com.google.common.base.Optional;
ambari-server/src/main/java/org/apache/ambari/server/api/services/views/ViewUrlsService.java,61,public static final String VIEW_URL_INFO_TYPE = "org.apache.ambari.server.controller.ViewUrlResponseSwagger";
ambari-server/src/main/java/org/apache/ambari/server/api/services/views/ViewUrlsService.java,89,return handleRequest(headers, null, ui, Request.Type.GET, createViewUrlResource(Optional.absent()));
ambari-server/src/main/java/org/apache/ambari/server/api/services/views/ViewUrlsService.java,116,return handleRequest(headers, body, ui, Request.Type.POST, createViewUrlResource(Optional.of(urlName)));
ambari-server/src/main/java/org/apache/ambari/server/api/services/views/ViewUrlsService.java,146,return handleRequest(headers, body, ui, Request.Type.PUT, createViewUrlResource(Optional.of(urlName)));
ambari-server/src/main/java/org/apache/ambari/server/api/services/views/ViewUrlsService.java,174,return handleRequest(headers, null, ui, Request.Type.GET, createViewUrlResource(Optional.of(urlName)));
ambari-server/src/main/java/org/apache/ambari/server/api/services/views/ViewUrlsService.java,199,return handleRequest(headers, body, ui, Request.Type.DELETE, createViewUrlResource(Optional.of(urlName)));
ambari-server/src/main/java/org/apache/ambari/server/api/services/views/ViewUrlsService.java,211,private ResourceInstance createViewUrlResource(Optional<String> urlName) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/views/ViewUrlsService.java,212,return createResource(Resource.Type.ViewURL,Collections.singletonMap(Resource.Type.ViewURL, urlName.isPresent()?urlName.get().toString():null));
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/file/FileCheckInHelper.java,25,import org.apache.log4j.Level;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/file/FileCheckInHelper.java,28,import java.io.File;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/file/FileCheckInHelper.java,29,import java.io.RandomAccessFile;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/file/FileCheckInHelper.java,30,import java.util.Date;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/file/FileCheckInHelper.java,31,import java.util.Map;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/file/FileCheckInHelper.java,83,String logMessageKey = inputFile.getClass().getSimpleName() + "_FINAL_CHECKIN";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/file/FileCheckInHelper.java,84,LogFeederUtil.logErrorMessageByInterval(logMessageKey, "Wrote final checkPoint, input=" + inputFile.getShortDescription() +
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/file/FileCheckInHelper.java,88,String logMessageKey = inputFile.getClass().getSimpleName() + "_CHECKIN_EXCEPTION";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/file/FileCheckInHelper.java,89,LogFeederUtil.logErrorMessageByInterval(logMessageKey, "Caught exception checkIn. , input=" + inputFile.getShortDescription(), t,
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/file/FileCheckInHelper.java,90,LOG, Level.ERROR);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/file/ResumeLineNumberHelper.java,21,import org.apache.ambari.logfeeder.input.InputFile;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/file/ResumeLineNumberHelper.java,22,import org.apache.ambari.logfeeder.util.LogFeederUtil;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/file/ResumeLineNumberHelper.java,23,import org.slf4j.Logger;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/file/ResumeLineNumberHelper.java,24,import org.slf4j.LoggerFactory;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/file/ResumeLineNumberHelper.java,29,import java.util.HashMap;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/file/ResumeLineNumberHelper.java,46,String checkPointFileName = inputFile.getBase64FileKey() + inputFile.getCheckPointExtension();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/file/ResumeLineNumberHelper.java,47,File checkPointFolder = inputFile.getInputManager().getCheckPointFolderFile();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/file/ResumeLineNumberHelper.java,48,checkPointFile = new File(checkPointFolder, checkPointFileName);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/file/ResumeLineNumberHelper.java,49,inputFile.getCheckPointFiles().put(inputFile.getBase64FileKey(), checkPointFile);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/file/ResumeLineNumberHelper.java,77,jsonCheckPoint = new HashMap<String, Object>();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/file/ResumeLineNumberHelper.java,78,jsonCheckPoint.put("file_path", inputFile.getFilePath());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/file/ResumeLineNumberHelper.java,79,jsonCheckPoint.put("file_key", inputFile.getBase64FileKey());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/file/ResumeLineNumberHelper.java,82,inputFile.getJsonCheckPoints().put(inputFile.getBase64FileKey(), jsonCheckPoint);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsApi.java,462,return FileUtil.copy(fs, new Path(src), fs, new Path(dest), false, conf);
ambari-server/src/main/java/org/apache/ambari/server/controller/ActionExecutionContext.java,42,private Short timeout;
ambari-server/src/main/java/org/apache/ambari/server/controller/ActionExecutionContext.java,71,Short timeout, String expectedServiceName,
ambari-server/src/main/java/org/apache/ambari/server/controller/ActionExecutionContext.java,116,public Short getTimeout() {
ambari-server/src/main/java/org/apache/ambari/server/controller/ActionExecutionContext.java,120,public void setTimeout(Short timeout) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,438,int commandTimeout = Short.valueOf(configs.getDefaultAgentTaskTimeout(isInstallCommand)).intValue();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,726,actionContext.setTimeout(Short.valueOf(configuration.getDefaultAgentTaskTimeout(true)));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,448,actionContext.setTimeout(Short.valueOf(configuration.getDefaultAgentTaskTimeout(true)));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,533,actionContext.setTimeout(Short.valueOf(configuration.getDefaultAgentTaskTimeout(true)));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1426,commandParams, group.allowRetry, Short.valueOf((short) -1));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1652,boolean allowRetry, short timeout) {
ambari-server/src/main/java/org/apache/ambari/server/customactions/ActionDefinition.java,39,private Short defaultTimeout;
ambari-server/src/main/java/org/apache/ambari/server/customactions/ActionDefinition.java,57,TargetHostType targetType, Short defaultTimeout, Set<RoleAuthorization> permissions) {
ambari-server/src/main/java/org/apache/ambari/server/customactions/ActionDefinition.java,125,public Short getDefaultTimeout() {
ambari-server/src/main/java/org/apache/ambari/server/customactions/ActionDefinition.java,129,public void setDefaultTimeout(Short defaultTimeout) {
ambari-server/src/main/java/org/apache/ambari/server/customactions/ActionDefinitionManager.java,47,public static final Short MIN_TIMEOUT = 60;
ambari-server/src/main/java/org/apache/ambari/server/customactions/ActionDefinitionManager.java,52,private static final Short MAX_TIMEOUT = Short.MAX_VALUE-1;
ambari-server/src/main/java/org/apache/ambari/server/customactions/ActionDefinitionManager.java,115,Short defaultTimeout = MIN_TIMEOUT;
ambari-server/src/main/java/org/apache/ambari/server/customactions/ActionDefinitionManager.java,117,defaultTimeout = Short.parseShort(ad.getDefaultTimeout());
ambari-server/src/main/java/org/apache/ambari/server/customactions/ActionDefinitionManager.java,141,Short defaultTimeout, StringBuilder reason) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/StageWrapper.java,194,public Short getMaxTimeout(Configuration configuration) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/StageWrapper.java,203,Short defaultTimeout = Short.valueOf(configuration.getDefaultAgentTaskTimeout(false));
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/StageWrapper.java,209,Short timeout = null;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/StageWrapper.java,216,Short configTimeout = Short.valueOf(configValue);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,227,List<Set<String>> hostSets = null;
ambari-server/src/main/java/org/apache/ambari/server/api/services/ResultStatus.java,134,m_msg = e.toString();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java,34,import javax.annotation.PostConstruct;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java,35,import javax.inject.Inject;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java,36,import java.text.DateFormat;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java,37,import java.text.SimpleDateFormat;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java,38,import java.util.Date;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java,40,import java.util.List;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java,41,import java.util.Map;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java,42,import java.util.TimeZone;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java,47,private static final String TIMEZONE = "GMT";
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java,52,private static ThreadLocal<DateFormat> formatter = new ThreadLocal<DateFormat>() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java,53,protected DateFormat initialValue() {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java,54,SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java,55,dateFormat.setTimeZone(TimeZone.getTimeZone(TIMEZONE));
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java,56,return dateFormat;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java,72,TimeZone.setDefault(TimeZone.getTimeZone(TIMEZONE));
ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/AddRepositoryVersionRequestAuditEvent.java,99,builder.append("    Repository ID(").append(properties.get("repo_id"));
ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ChangeRepositoryVersionRequestAuditEvent.java,100,builder.append("    Repository ID(").append(properties.get("repo_id"));
ambari-server/src/main/java/org/apache/ambari/server/audit/event/LoginAuditEvent.java,70,lines.add("    " + entry.getKey() + ": " + StringUtils.join(entry.getValue(), ", "));
ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ClusterPrivilegeChangeRequestAuditEvent.java,90,lines.add(role + ": ");
ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ClusterPrivilegeChangeRequestAuditEvent.java,92,lines.add("  Users: " + StringUtils.join(users.get(role), ", "));
ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ClusterPrivilegeChangeRequestAuditEvent.java,95,lines.add("  Groups: " + StringUtils.join(groups.get(role), ", "));
ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ClusterPrivilegeChangeRequestAuditEvent.java,98,lines.add("  Roles: " + StringUtils.join(roles.get(role), ", "));
ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ViewPrivilegeChangeRequestAuditEvent.java,111,lines.add(role + ": ");
ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ViewPrivilegeChangeRequestAuditEvent.java,113,lines.add("  Users: " + StringUtils.join(users.get(role), ", "));
ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ViewPrivilegeChangeRequestAuditEvent.java,116,lines.add("  Groups: " + StringUtils.join(groups.get(role), ", "));
ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ViewPrivilegeChangeRequestAuditEvent.java,119,lines.add("  Roles: " + StringUtils.join(roles.get(role), ", "));
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,1225,if (isSelf &&
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,1226,(StringUtils.isEmpty(currentKey) || !passwordEncoder.matches(currentKey, userAuthenticationEntity.getAuthenticationKey()))) {
ambari-server/src/main/java/org/apache/ambari/server/security/authentication/AmbariAuthenticationEventHandlerImpl.java,154,HttpServletRequest httpServletRequest = (HttpServletRequest) servletRequest;
ambari-server/src/main/java/org/apache/ambari/server/security/authentication/AmbariAuthenticationEventHandlerImpl.java,157,if (auditLogger.isEnabled() && filter.shouldApply(httpServletRequest) && (AuthorizationHelper.getAuthenticatedName() == null)) {
ambari-server/src/main/java/org/apache/ambari/server/security/authentication/AmbariAuthenticationEventHandlerImpl.java,163,.build();
ambari-server/src/main/java/org/apache/ambari/server/security/authentication/AmbariAuthenticationEventHandlerImpl.java,164,auditLogger.log(loginFailedAuditEvent);
contrib/fast-hdfs-resource/src/main/java/org/apache/ambari/fast_hdfs_resource/Runner.java,38,throws IOException, URISyntaxException {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesMapReduceDistributedCacheCheck.java,50,static final String DFS_PROTOCOLS_REGEX_DEFAULT = "^([^:]*dfs|wasb|ecs):.*";
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesTezDistributedCacheCheck.java,52,static final String DFS_PROTOCOLS_REGEX_DEFAULT = "^([^:]*dfs|wasb|ecs):.*";
ambari-server/src/main/java/org/apache/ambari/server/api/services/views/ViewInstanceService.java,319,throw new IllegalArgumentException("A view instance " +
ambari-server/src/main/java/org/apache/ambari/server/api/services/views/ViewInstanceService.java,320,viewName + "/" + instanceName + " can not be found.");
ambari-server/src/main/java/org/apache/ambari/server/api/services/views/ViewInstanceService.java,326,throw new IllegalArgumentException("A resource type " + resources + " for view instance " +
ambari-server/src/main/java/org/apache/ambari/server/api/services/views/ViewInstanceService.java,327,viewName + "/" + instanceName + " can not be found.");
ambari-server/src/main/java/org/apache/ambari/server/audit/event/LoginAuditEvent.java,65,builder.append(", Operation(User login), Roles(").append(System.lineSeparator());
ambari-server/src/main/java/org/apache/ambari/server/audit/event/LoginAuditEvent.java,72,builder.append(StringUtils.join(lines, System.lineSeparator()));
ambari-server/src/main/java/org/apache/ambari/server/audit/event/LoginAuditEvent.java,73,builder.append(System.lineSeparator());
ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/AddRepositoryVersionRequestAuditEvent.java,91,if (!repos.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/AddRepositoryVersionRequestAuditEvent.java,92,builder.append(System.lineSeparator());
ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/AddRepositoryVersionRequestAuditEvent.java,97,builder.append(System.lineSeparator());
ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/AddRepositoryVersionRequestAuditEvent.java,102,builder.append(System.lineSeparator());
ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ChangeRepositoryVersionRequestAuditEvent.java,92,if (!repos.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ChangeRepositoryVersionRequestAuditEvent.java,93,builder.append(System.lineSeparator());
ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ChangeRepositoryVersionRequestAuditEvent.java,98,builder.append(System.lineSeparator());
ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ChangeRepositoryVersionRequestAuditEvent.java,103,builder.append(System.lineSeparator());
ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ClusterPrivilegeChangeRequestAuditEvent.java,83,if (!users.isEmpty() || !groups.isEmpty()|| !roles.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ClusterPrivilegeChangeRequestAuditEvent.java,84,builder.append(System.lineSeparator());
ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ClusterPrivilegeChangeRequestAuditEvent.java,102,builder.append(StringUtils.join(lines, System.lineSeparator()));
ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ViewPrivilegeChangeRequestAuditEvent.java,104,if (!users.isEmpty() || !groups.isEmpty() || !roles.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ViewPrivilegeChangeRequestAuditEvent.java,105,builder.append(System.lineSeparator());
ambari-server/src/main/java/org/apache/ambari/server/audit/event/request/ViewPrivilegeChangeRequestAuditEvent.java,123,builder.append(StringUtils.join(lines, System.lineSeparator()));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,644,if ( StringUtils.isNotEmpty(appId) && !(appId.equals("HOST") || appId.equals("FLUME_HANDLER"))) { //HACK.. Why??
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,645,appId = appId.toLowerCase();
ambari-server/src/main/java/org/apache/ambari/server/stack/UpdateActiveRepoVersionOnStartup.java,92,if (updateRepoVersion(stack, repositoryVersion)) {
ambari-server/src/main/java/org/apache/ambari/server/stack/UpdateActiveRepoVersionOnStartup.java,93,repositoryVersionDao.merge(repositoryVersion);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,207,if (clusterTopology.isClusterKerberosEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,208,addKerberosClient(clusterTopology);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,294,addKerberosClient(topology);
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,95,connection = DriverManager.getConnection(configuration.getDatabaseUrl(),
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,96,configuration.getDatabaseUser(),
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,97,configuration.getDatabasePassword());
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,156,return DriverManager.getConnection(configuration.getDatabaseUrl(),
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,157,configuration.getDatabaseUser(),
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,158,configuration.getDatabasePassword());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserPrivilegeResourceProvider.java,282,userEntity = usersCache.get().getUnchecked(userName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UserPrivilegeResourceProvider.java,290,throw new SystemException("User was not found");
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1817,for (String hostname : hosts) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1821,hostname,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1822,kerberosDescriptor,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1823,false,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1824,false);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1833,List<KerberosIdentityDescriptor> identities = getActiveIdentities(cluster, hostname,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1836,if (hostname.equals(ambariServerHostname)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1865,principal = principal.replace("_HOST", hostname);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1911,activeIdentities.put(hostname, hostActiveIdentities.values());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/LogFeeder.java,25,import org.springframework.boot.system.ApplicationPidFileWriter;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/LogSearch.java,25,import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/LogSearch.java,27,import org.springframework.boot.system.ApplicationPidFileWriter;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/LogSearch.java,34,SolrAutoConfiguration.class
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchHttpConfig.java,25,import static org.apache.ambari.logsearch.common.LogSearchConstants.LOGSEARCH_PROPERTIES_FILE;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java,23,import org.eclipse.jetty.server.Connector;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java,24,import org.eclipse.jetty.server.Server;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java,25,import org.eclipse.jetty.server.ServerConnector;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java,26,import org.eclipse.jetty.util.ssl.SslContextFactory;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java,30,import org.springframework.boot.context.embedded.EmbeddedServletContainerFactory;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java,31,import org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainer;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java,32,import org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainerFactory;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java,33,import org.springframework.boot.context.embedded.jetty.JettyServerCustomizer;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java,38,import javax.inject.Inject;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java,39,import javax.servlet.http.HttpSessionListener;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java,41,import static org.apache.ambari.logsearch.common.LogSearchConstants.LOGSEARCH_APPLICATION_NAME;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java,42,import static org.apache.ambari.logsearch.common.LogSearchConstants.LOGSEARCH_SESSION_ID;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java,71,public EmbeddedServletContainerFactory containerFactory() {
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java,72,final JettyEmbeddedServletContainerFactory jettyEmbeddedServletContainerFactory = new JettyEmbeddedServletContainerFactory() {
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java,74,protected JettyEmbeddedServletContainer getJettyEmbeddedServletContainer(Server server) {
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java,75,return new JettyEmbeddedServletContainer(server);
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java,78,jettyEmbeddedServletContainerFactory.setSessionTimeout(SESSION_TIMEOUT);
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java,79,serverProperties.getSession().getCookie().setName(LOGSEARCH_SESSION_ID);
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java,80,serverProperties.setDisplayName(LOGSEARCH_APPLICATION_NAME);
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java,81,if ("https".equals(logSearchHttpConfig.getProtocol())) {
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java,82,sslConfigurer.ensureStorePasswords();
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java,83,sslConfigurer.loadKeystore();
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java,84,jettyEmbeddedServletContainerFactory.addServerCustomizers((JettyServerCustomizer) server -> {
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java,85,SslContextFactory sslContextFactory = sslConfigurer.getSslContextFactory();
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java,86,ServerConnector sslConnector = new ServerConnector(server, sslContextFactory);
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java,87,sslConnector.setPort(logSearchHttpConfig.getHttpsPort());
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java,88,server.setConnectors(new Connector[]{sslConnector});
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java,91,jettyEmbeddedServletContainerFactory.setPort(logSearchHttpConfig.getHttpPort());
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/LogSearchServletConfig.java,93,return jettyEmbeddedServletContainerFactory;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java,21,import com.google.common.collect.Lists;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java,32,import org.apache.ambari.logsearch.web.filters.LogSearchConfigStateFilter;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java,33,import org.apache.ambari.logsearch.web.filters.LogsearchKRBAuthenticationFilter;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java,37,import org.apache.ambari.logsearch.web.filters.LogsearchEventHistoryStateFilter;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java,52,import javax.inject.Inject;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java,53,import javax.inject.Named;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java,54,import java.util.ArrayList;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java,55,import java.util.List;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java,57,import static org.apache.ambari.logsearch.common.LogSearchConstants.LOGSEARCH_SESSION_ID;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java,23,import org.apache.ambari.logsearch.conf.global.SolrServiceLogsState;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java,30,import org.springframework.data.solr.repository.config.EnableSolrRepositories;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,30,import org.springframework.security.core.GrantedAuthority;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,31,import org.springframework.stereotype.Repository;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,32,import org.apache.ambari.logsearch.util.CommonUtil;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/dao/UserDao.java,139,encPassword = CommonUtil.encryptPassword(username, password);
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,19,package org.apache.ambari.logsearch.util;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,21,import java.security.SecureRandom;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,23,import org.springframework.security.authentication.encoding.Md5PasswordEncoder;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,25,public class CommonUtil {
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,26,private CommonUtil() {
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,27,throw new UnsupportedOperationException();
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,30,private static SecureRandom secureRandom = new SecureRandom();
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,31,private static int counter = 0;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,33,public static String genGUI() {
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,34,return System.currentTimeMillis() + "_" + secureRandom.nextInt(1000) + "_" + counter++;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,37,private static final Md5PasswordEncoder md5Encoder = new Md5PasswordEncoder();
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,38,public static String encryptPassword(String username, String password) {
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/util/CommonUtil.java,39,return md5Encoder.encodePassword(password, username);
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java,35,import org.apache.ambari.logsearch.util.CommonUtil;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/LogsearchSecurityContextFormationFilter.java,83,msaCookie = CommonUtil.genGUI();
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/NoServletContext.java,38,import javax.servlet.FilterRegistration.Dynamic;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/NoServletContext.java,256,public javax.servlet.ServletRegistration.Dynamic addServlet(
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/NoServletContext.java,262,public javax.servlet.ServletRegistration.Dynamic addServlet(
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/filters/NoServletContext.java,268,public javax.servlet.ServletRegistration.Dynamic addServlet(
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java,24,import org.apache.ambari.logsearch.util.CommonUtil;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java,36,import javax.inject.Inject;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java,37,import javax.inject.Named;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java,78,String encPassword = CommonUtil.encryptPassword(username, password);
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java,79,if (!encPassword.equals(user.getPassword())) {
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/web/security/LogsearchFileAuthenticationProvider.java,85,authentication = new UsernamePasswordAuthenticationToken(username, encPassword, authorities);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/BufferedUpdateEventPublisher.java,31,import com.google.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/HostComponentUpdateEventPublisher.java,28,import com.google.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,35,import com.google.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/STOMPUpdatePublisher.java,22,import org.apache.ambari.server.events.HostComponentsUpdateEvent;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/STOMPUpdatePublisher.java,23,import org.apache.ambari.server.events.RequestUpdateEvent;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/STOMPUpdatePublisher.java,25,import org.apache.ambari.server.events.ServiceUpdateEvent;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/STOMPUpdatePublisher.java,29,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/STOMPUpdatePublisher.java,38,private RequestUpdateEventPublisher requestUpdateEventPublisher;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/STOMPUpdatePublisher.java,41,private HostComponentUpdateEventPublisher hostComponentUpdateEventPublisher;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/STOMPUpdatePublisher.java,44,private ServiceUpdateEventPublisher serviceUpdateEventPublisher;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/STOMPUpdatePublisher.java,52,if (event.getType().equals(STOMPEvent.Type.REQUEST)) {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java,27,import com.google.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,136,import org.eclipse.jetty.server.SecureRequestCustomizer;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,633,https_config.addCustomizer(new SecureRequestCustomizer());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,682,https_config.addCustomizer(new SecureRequestCustomizer());
ambari-server/src/main/java/org/apache/ambari/server/utils/PasswordUtils.java,85,return readPasswordFromFile(passwordProperty, defaultPassword);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,189,Set<ResolvedKerberosKeytab> keytabsToInject = kerberosKeytabController.getFilteredKeytabs(serviceComponentFilter, kerberosCommandParameters.getHostFilter(), kerberosCommandParameters.getIdentityFilter());
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabPrincipalDAO.java,270,public KerberosKeytabPrincipalFilter(Collection<String> hostNames, Collection<String> serviceNames, Collection<String> componentNames, Collection<String> principals) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java,556,protected Map<String, ? extends Collection<String>> getServiceComponentFilter() {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java,154,result.add(new KerberosKeytabPrincipalDAO.KerberosKeytabPrincipalFilter(
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java,163,result.add(new KerberosKeytabPrincipalDAO.KerberosKeytabPrincipalFilter(
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java,175,return Lists.newArrayList(new KerberosKeytabPrincipalDAO.KerberosKeytabPrincipalFilter(null,null,null,null));
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractDateRangeFacetQueryConverter.java,27,import java.util.Locale;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractDateRangeFacetQueryConverter.java,43,solrQuery.add(String.format(Locale.ROOT, "f.%s.%s", new Object[]{getDateFieldName(), "facet.range.start"}), request.getFrom());
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractDateRangeFacetQueryConverter.java,44,solrQuery.add(String.format(Locale.ROOT, "f.%s.%s", new Object[]{getDateFieldName(), "facet.range.end"}), request.getTo());
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractDateRangeFacetQueryConverter.java,45,solrQuery.add(String.format(Locale.ROOT, "f.%s.%s", new Object[]{getDateFieldName(), "facet.range.gap"}), unit);
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java,21,import com.google.common.base.Splitter;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java,22,import com.google.gson.Gson;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java,23,import com.google.gson.reflect.TypeToken;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java,29,import org.apache.commons.lang.text.StrTokenizer;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java,36,import javax.inject.Inject;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java,37,import java.util.Arrays;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java,38,import java.util.HashMap;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java,39,import java.util.List;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java,40,import java.util.Map;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java,42,import static org.apache.ambari.logsearch.solr.SolrConstants.ServiceLogConstants.LOG_MESSAGE;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java,82,List<String> values = value.length() == 0 ? Arrays.asList("-1") : splitValueAsList(value, ",");
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java,90,List<String> valuesList = value.length() == 0 ? Arrays.asList("\\-1") : splitValueAsList(value, ",");
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java,201,StrTokenizer tokenizer = new StrTokenizer(value, ' ', '"');
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java,202,for (String token : tokenizer.getTokenArray()) {
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java,203,token = token.trim();
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java,204,if (token.contains(" ") || !token.startsWith("*") && !token.endsWith("*")) {
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java,205,addFilterQuery(query, new Criteria(LOG_MESSAGE).is(SolrUtil.escapeQueryChars(token)), negate);
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java,207,String plainToken = StringUtils.substring(token, 1, -1);
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java,208,addFilterQuery(query, new Criteria(LOG_MESSAGE).contains(SolrUtil.escapeQueryChars(plainToken)), negate);
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java,210,String plainToken = StringUtils.substring(token, 1);
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java,211,addFilterQuery(query, new Criteria(LOG_MESSAGE).endsWith(SolrUtil.escapeQueryChars(plainToken)), negate);
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java,213,String plainToken = StringUtils.substring(token, 0, -1);
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java,214,addFilterQuery(query, new Criteria(LOG_MESSAGE).startsWith(SolrUtil.escapeQueryChars(plainToken)), negate);
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java,220,StrTokenizer tokenizer = new StrTokenizer(value, ' ', '"');
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java,222,for (String token : tokenizer.getTokenArray()) {
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java,223,token = token.trim();
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java,224,if (token.contains(" ") || !token.startsWith("*") && !token.endsWith("*")) {
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java,225,query.addFilterQuery(String.format("%s%s:%s", negateToken, LOG_MESSAGE, SolrUtil.escapeQueryChars(token)));
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java,227,String plainToken = StringUtils.substring(token, 1, -1);
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java,228,query.addFilterQuery(String.format("%s%s:%s", negateToken, LOG_MESSAGE, SolrUtil.escapeQueryChars(plainToken)));
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java,230,String plainToken = StringUtils.substring(token, 1);
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java,231,query.addFilterQuery(String.format("%s%s:%s", negateToken, LOG_MESSAGE, SolrUtil.escapeQueryChars(plainToken)));
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java,233,String plainToken = StringUtils.substring(token, 0, -1);
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/converter/AbstractOperationHolderConverter.java,234,query.addFilterQuery(String.format("%s%s:%s", negateToken, LOG_MESSAGE, SolrUtil.escapeQueryChars(plainToken)));
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/AmbariLdapAuthenticationProvider.java,55,static Logger LOG = LoggerFactory.getLogger(AmbariLdapAuthenticationProvider.class); // exposed and mutable for "test"
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,348,sch.setLastValidState(oldState);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntity.java,105,private State lastLiveState = State.INIT;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntity.java,166,public State getLastLiveState() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntity.java,167,return lastLiveState;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntity.java,170,public void setLastLiveState(State lastLiveState) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntity.java,171,this.lastLiveState = lastLiveState;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntity.java,221,: that.lastLiveState != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntity.java,222,return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/HostComponentStateEntity.java,252,result = 31 * result + (lastLiveState != null ? lastLiveState.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentHost.java,99,State getLastValidState();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentHost.java,101,void setLastValidState(State state);
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,74,import org.apache.ambari.server.state.Service;
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,75,import org.apache.ambari.server.state.ServiceComponent;
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,78,import org.apache.ambari.server.state.State;
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,365,try {
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,366,host.restoreComponentsStatuses();
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,368,LOG.error("Unable to restore last valid host components status for host", e1);
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,1215,public void restoreComponentsStatuses() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,1216,Long clusterId = null;
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,1217,for (Cluster cluster : clusters.getClustersForHost(getHostName())) {
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,1218,clusterId = cluster.getClusterId();
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,1219,for (ServiceComponentHost sch : cluster.getServiceComponentHosts(getHostName())) {
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,1220,Service s = cluster.getService(sch.getServiceName());
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,1221,ServiceComponent sc = s.getServiceComponent(sch.getServiceComponentName());
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,1222,if (!sc.isClientComponent() &&
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,1223,sch.getState().equals(State.UNKNOWN)) {
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,1224,State lastValidState = sch.getLastValidState();
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,1225,LOG.warn("Restore component state to last valid state for component " + sc.getName() + " on " +
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,1226,getHostName() + " to " + lastValidState);
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,1227,sch.setState(lastValidState);
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,1232,if (clusterId != null) {
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,1233,calculateHostStatus(clusterId);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,911,if (state != State.UNKNOWN) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,912,stateEntity.setLastLiveState(state);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,927,public State getLastValidState() {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,928,HostComponentStateEntity stateEntity = getStateEntity();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,929,if (stateEntity != null) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,930,return stateEntity.getLastLiveState();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,932,return State.UNKNOWN;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,936,public void setLastValidState(State state) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,937,if (state == State.UNKNOWN) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,938,return;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,940,HostComponentStateEntity stateEntity = getStateEntity();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,941,if (stateEntity != null) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,942,stateEntity.setLastLiveState(state);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,943,hostComponentStateDAO.merge(stateEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,945,LOG.warn("Setting a member on an entity object that may have been "
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,946,+ "previously deleted, serviceName = " + getServiceName() + ", " + "componentName = "
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,947,+ getServiceComponentName() + ", " + "hostName = " + getHostName());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java,1058,updateHostComponentLastStateTable();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java,1759,protected void updateHostComponentLastStateTable() throws SQLException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java,1760,executeInTransaction(new Runnable() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java,1762,public void run() {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java,1763,try {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java,1764,HostComponentStateDAO hostComponentStateDAO = injector.getInstance(HostComponentStateDAO.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java,1765,List<HostComponentStateEntity> hostComponentStateEntities = hostComponentStateDAO.findAll();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java,1766,for (HostComponentStateEntity hostComponentStateEntity : hostComponentStateEntities) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java,1767,hostComponentStateEntity.setLastLiveState(hostComponentStateEntity.getCurrentState());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java,1768,hostComponentStateDAO.merge(hostComponentStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java,1771,LOG.warn("Setting status for stages and Requests threw exception. ", e);
ambari-server/src/main/java/org/apache/ambari/server/events/ServiceUpdateEvent.java,45,public ServiceUpdateEvent(String clusterName, MaintenanceState maintenanceState, String serviceName, State state) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/services/ServiceUpdateListener.java,27,import org.apache.ambari.server.controller.utilities.ServiceCalculatedStateFactory;
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/services/ServiceUpdateListener.java,28,import org.apache.ambari.server.controller.utilities.state.ServiceCalculatedState;
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/services/ServiceUpdateListener.java,35,import org.apache.ambari.server.orm.dao.ServiceDesiredStateDAO;
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/services/ServiceUpdateListener.java,38,import org.apache.ambari.server.state.State;
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/services/ServiceUpdateListener.java,48,private Map<Long, Map<String, State>> states = new HashMap<>();
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/services/ServiceUpdateListener.java,53,private ServiceDesiredStateDAO serviceDesiredStateDAO;
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/services/ServiceUpdateListener.java,78,ServiceCalculatedState serviceCalculatedState = ServiceCalculatedStateFactory.getServiceStateProvider(serviceName);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/services/ServiceUpdateListener.java,79,State serviceState = serviceCalculatedState.getState(clusterName, serviceName);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/services/ServiceUpdateListener.java,82,if (states.containsKey(clusterId) && states.get(clusterId).containsKey(serviceName) && states.get(clusterId).get(serviceName).equals(serviceState)) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/services/ServiceUpdateListener.java,83,continue;
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/services/ServiceUpdateListener.java,85,states.computeIfAbsent(clusterId, c -> new HashMap<>()).put(serviceName, serviceState);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/services/ServiceUpdateListener.java,86,STOMPUpdatePublisher.publish(new ServiceUpdateEvent(clusterName, null, serviceName, serviceState));
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/services/ServiceUpdateListener.java,102,STOMPUpdatePublisher.publish(new ServiceUpdateEvent(clusterName, maintenanceState, serviceName, null));
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/BufferedUpdateEventPublisher.java,27,import java.util.concurrent.atomic.AtomicBoolean;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/BufferedUpdateEventPublisher.java,28,import java.util.concurrent.atomic.AtomicLong;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/BufferedUpdateEventPublisher.java,37,private final AtomicLong previousTime = new AtomicLong(0);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/BufferedUpdateEventPublisher.java,38,private final AtomicBoolean collecting = new AtomicBoolean(false);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/BufferedUpdateEventPublisher.java,40,private final ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(1);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/BufferedUpdateEventPublisher.java,43,long eventTime = System.currentTimeMillis();
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/BufferedUpdateEventPublisher.java,44,if ((eventTime - previousTime.get() <= TIMEOUT) && !collecting.get()) {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/BufferedUpdateEventPublisher.java,45,buffer.add(event);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/BufferedUpdateEventPublisher.java,46,collecting.set(true);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/BufferedUpdateEventPublisher.java,47,scheduledExecutorService.schedule(getScheduledPublisher(m_eventBus),
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/BufferedUpdateEventPublisher.java,48,TIMEOUT, TimeUnit.MILLISECONDS);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/BufferedUpdateEventPublisher.java,50,buffer.add(event);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/BufferedUpdateEventPublisher.java,53,previousTime.set(eventTime);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/BufferedUpdateEventPublisher.java,54,m_eventBus.post(event);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/BufferedUpdateEventPublisher.java,58,protected abstract Runnable getScheduledPublisher(EventBus m_eventBus);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/BufferedUpdateEventPublisher.java,61,resetCollecting();
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/BufferedUpdateEventPublisher.java,69,protected void resetCollecting() {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/BufferedUpdateEventPublisher.java,70,previousTime.set(System.currentTimeMillis());
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/BufferedUpdateEventPublisher.java,71,collecting.set(false);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/HostComponentUpdateEventPublisher.java,34,protected Runnable getScheduledPublisher(EventBus m_eventBus) {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/HostComponentUpdateEventPublisher.java,35,return new HostComponentsEventRunnable(m_eventBus);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/HostComponentUpdateEventPublisher.java,38,private class HostComponentsEventRunnable implements Runnable {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/HostComponentUpdateEventPublisher.java,40,private final EventBus eventBus;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/HostComponentUpdateEventPublisher.java,42,public HostComponentsEventRunnable(EventBus eventBus) {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/HostComponentUpdateEventPublisher.java,43,this.eventBus = eventBus;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/HostComponentUpdateEventPublisher.java,47,public void run() {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/HostComponentUpdateEventPublisher.java,48,List<HostComponentsUpdateEvent> hostComponentUpdateEvents = retrieveBuffer();
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/HostComponentUpdateEventPublisher.java,49,if (hostComponentUpdateEvents.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/HostComponentUpdateEventPublisher.java,50,return;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/HostComponentUpdateEventPublisher.java,52,List<HostComponentUpdate> hostComponentUpdates = hostComponentUpdateEvents.stream().flatMap(
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/HostComponentUpdateEventPublisher.java,53,u -> u.getHostComponentUpdates().stream()).collect(Collectors.toList());
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/HostComponentUpdateEventPublisher.java,55,HostComponentsUpdateEvent resultEvents = new HostComponentsUpdateEvent(hostComponentUpdates);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/HostComponentUpdateEventPublisher.java,57,eventBus.post(resultEvents);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,21,import java.util.concurrent.ConcurrentHashMap;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,22,import java.util.concurrent.Executors;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,23,import java.util.concurrent.TimeUnit;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,38,public class RequestUpdateEventPublisher {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,40,private final Long TIMEOUT = 1000L;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,41,private ConcurrentHashMap<Long, Long> previousTime = new ConcurrentHashMap<>();
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,42,private ConcurrentHashMap<Long, RequestUpdateEvent> buffer = new ConcurrentHashMap<>();
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,56,public void publish(RequestUpdateEvent event, EventBus m_eventBus) {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,57,Long eventTime = System.currentTimeMillis();
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,58,Long requestId = event.getRequestId();
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,59,if (!previousTime.containsKey(requestId)) {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,60,previousTime.put(requestId, 0L);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,62,if (eventTime - previousTime.get(requestId) <= TIMEOUT && !buffer.containsKey(requestId)) {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,63,buffer.put(event.getRequestId(), event);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,64,Executors.newScheduledThreadPool(1).schedule(new RequestEventRunnable(requestId, m_eventBus),
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,65,TIMEOUT, TimeUnit.MILLISECONDS);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,68,buffer.get(requestId).setEndTime(event.getEndTime());
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,69,buffer.get(requestId).setRequestStatus(event.getRequestStatus());
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,70,buffer.get(requestId).setRequestContext(event.getRequestContext());
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,71,buffer.get(requestId).getHostRoleCommands().removeAll(event.getHostRoleCommands());
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,72,buffer.get(requestId).getHostRoleCommands().addAll(event.getHostRoleCommands());
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,74,previousTime.put(requestId, eventTime);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,76,m_eventBus.post(fillRequest(event));
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,98,private class RequestEventRunnable implements Runnable {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,100,private final long requestId;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,101,private final EventBus eventBus;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,103,public RequestEventRunnable(long requestId, EventBus eventBus) {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,104,this.requestId = requestId;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,105,this.eventBus = eventBus;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,109,public void run() {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,110,RequestUpdateEvent resultEvent = buffer.get(requestId);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,112,eventBus.post(fillRequest(resultEvent));
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,113,buffer.remove(requestId);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/RequestUpdateEventPublisher.java,114,previousTime.remove(requestId);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java,33,protected Runnable getScheduledPublisher(EventBus m_eventBus) {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java,34,return new ServiceEventRunnable(m_eventBus);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java,37,private class ServiceEventRunnable implements Runnable {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java,39,private final EventBus eventBus;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java,41,public ServiceEventRunnable(EventBus eventBus) {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java,42,this.eventBus = eventBus;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java,46,public void run() {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java,47,List<ServiceUpdateEvent> serviceUpdates = retrieveBuffer();
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java,48,if (serviceUpdates.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java,49,return;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java,51,List<ServiceUpdateEvent> filtered = new ArrayList<>();
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java,52,for (ServiceUpdateEvent event : serviceUpdates) {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java,53,int pos = filtered.indexOf(event);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java,54,if (pos != -1) {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java,55,if (event.getState() != null) {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java,56,filtered.get(pos).setState(event.getState());
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java,58,if (event.getMaintenanceState() != null) {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java,59,filtered.get(pos).setMaintenanceState(event.getMaintenanceState());
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java,62,filtered.add(event);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java,65,for (ServiceUpdateEvent serviceUpdateEvent : serviceUpdates) {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/ServiceUpdateEventPublisher.java,66,eventBus.post(serviceUpdateEvent);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,227,commandsToSend.put(hostname, new ArrayList<>());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/Stage.java,230,commandsToSend.get(hostname).add(roleCommandEntry.getValue().getExecutionCommandWrapper());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2539,hostParams.putAll(getRcaParameters());
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/hostcomponents/HostComponentsUpdateListener.java,52,STOMPUpdatePublisher.register(this);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/requests/STOMPUpdateListener.java,44,STOMPUpdatePublisher.register(this);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/services/ServiceUpdateListener.java,60,STOMPUpdatePublisher.register(this);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/upgrade/UpgradeUpdateListener.java,51,STOMPUpdatePublisher.register(this);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/STOMPUpdatePublisher.java,35,private final EventBus m_eventBus;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/STOMPUpdatePublisher.java,46,public STOMPUpdatePublisher() {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/STOMPUpdatePublisher.java,47,m_eventBus = new AsyncEventBus("ambari-update-bus",
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/STOMPUpdatePublisher.java,48,Executors.newSingleThreadExecutor());
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/STOMPUpdatePublisher.java,53,requestUpdateEventPublisher.publish((RequestUpdateEvent) event, m_eventBus);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/STOMPUpdatePublisher.java,55,hostComponentUpdateEventPublisher.publish((HostComponentsUpdateEvent) event, m_eventBus);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/STOMPUpdatePublisher.java,57,serviceUpdateEventPublisher.publish((ServiceUpdateEvent) event, m_eventBus);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/STOMPUpdatePublisher.java,59,m_eventBus.post(event);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/STOMPUpdatePublisher.java,63,public void register(Object object) {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/STOMPUpdatePublisher.java,64,m_eventBus.register(object);
ambari-server/src/main/java/org/apache/ambari/server/metrics/system/impl/MetricsServiceImpl.java,119,STOMPUpdatePublisher.register(src);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1290,try {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1291,Cluster cluster = clusters.getCluster(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1292,ServiceComponent serviceComponent = cluster.getService(serviceName).getServiceComponent(serviceComponentName);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1293,ServiceComponentHost sch = serviceComponent.getServiceComponentHost(hostName);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1294,String refreshConfigsCommand = helper.getRefreshConfigsCommand(cluster,sch);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1295,r.setReloadConfig(refreshConfigsCommand != null);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1297,LOG.error("Could not determine reload config flag", e);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,302,newHostMetadata.setUuid(getUuidForHostname(hostname, true));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,456,if (uuidHostMap.containsKey(new TimelineMetricUuid(uuid))) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,457,LOG.error("Duplicate key computed for " + hostname +", Collides with  " + uuidHostMap.get(uuid));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,461,if (timelineMetricHostMetadata == null) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,462,timelineMetricHostMetadata = new TimelineMetricHostMetadata();
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,463,HOSTED_APPS_MAP.put(hostname, timelineMetricHostMetadata);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,465,timelineMetricHostMetadata.setUuid(uuid);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,466,uuidHostMap.put(new TimelineMetricUuid(uuid), hostname);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,512,timelineMetricMetadata.setUuid(uuid.uuid);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,514,uuidKeyMap.put(uuid, key);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,51,public static final String NAMENODE_RPC_NN1_INSTANCE_PROPERTY = "webhdfs.ha.namenode.rpc-address.nn1";
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,52,public static final String NAMENODE_RPC_NN2_INSTANCE_PROPERTY = "webhdfs.ha.namenode.rpc-address.nn2";
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,55,public static final String NAMENODE_HTTP_NN1_INSTANCE_PROPERTY = "webhdfs.ha.namenode.http-address.nn1";
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,56,public static final String NAMENODE_HTTP_NN2_INSTANCE_PROPERTY = "webhdfs.ha.namenode.http-address.nn2";
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,59,public static final String NAMENODE_HTTPS_NN1_INSTANCE_PROPERTY = "webhdfs.ha.namenode.https-address.nn1";
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,60,public static final String NAMENODE_HTTPS_NN2_INSTANCE_PROPERTY = "webhdfs.ha.namenode.https-address.nn2";
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,77,private Configuration conf = new Configuration();
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,140,String encryptionKeyProviderUri = context.getCluster().getConfigurationValue("hdfs-site", "dfs.encryption.key.provider.uri");
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,185,value = context.getCluster().getConfigurationValue(type, key);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,187,value = context.getProperties().get(instanceProperty);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,237,private void copyHAProperties(String defaultFS) throws URISyntaxException, HdfsApiException {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,246,if (namenodes.length != 2) {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,247,throw new HdfsApiException("HDFS080 " + HA_NAMENODES_INSTANCE_PROPERTY + " namenodes count is not exactly 2");
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,250,copyClusterProperty(String.format(NAMENODE_RPC_NN_CLUSTER_PROPERTY, nameservice, namenodes[0]),
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,251,NAMENODE_RPC_NN1_INSTANCE_PROPERTY);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,252,copyClusterProperty(String.format(NAMENODE_HTTP_NN_CLUSTER_PROPERTY, nameservice, namenodes[0]),
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,253,NAMENODE_HTTP_NN1_INSTANCE_PROPERTY);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,254,copyClusterProperty(String.format(NAMENODE_HTTPS_NN_CLUSTER_PROPERTY, nameservice, namenodes[0]),
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,255,NAMENODE_HTTPS_NN1_INSTANCE_PROPERTY);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,258,copyClusterProperty(String.format(NAMENODE_RPC_NN_CLUSTER_PROPERTY, nameservice, namenodes[1]),
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,259,NAMENODE_RPC_NN2_INSTANCE_PROPERTY);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,260,copyClusterProperty(String.format(NAMENODE_HTTP_NN_CLUSTER_PROPERTY, nameservice, namenodes[1]),
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,261,NAMENODE_HTTP_NN2_INSTANCE_PROPERTY);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,262,copyClusterProperty(String.format(NAMENODE_HTTPS_NN_CLUSTER_PROPERTY, nameservice, namenodes[1]),
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,263,NAMENODE_HTTPS_NN2_INSTANCE_PROPERTY);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/ConfigurationBuilder.java,330,String umask = context.getProperties().get(UMASK_INSTANCE_PROPERTY);
ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java,86,addDestroyPrincipals(cluster, hostParamsJson, event, commandParameters, stageContainer);
ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java,137,throws AmbariException
ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java,139,Stage stage = createNewStage(stageContainer.getLastStageId(),
ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java,140,cluster,
ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java,141,stageContainer.getId(),
ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java,143,commandParameters.asJson(),
ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java,144,hostParamsJson);
ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java,146,Map<String, String> requestParams = new HashMap<>();
ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java,147,List<RequestResourceFilter> requestResourceFilters = new ArrayList<>();
ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java,148,RequestResourceFilter reqResFilter = new RequestResourceFilter("KERBEROS", "KERBEROS_CLIENT", new ArrayList<>(hostFilter));
ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java,149,requestResourceFilters.add(reqResFilter);
ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java,151,ActionExecutionContext actionExecContext = new ActionExecutionContext(
ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java,152,cluster.getClusterName(),
ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java,154,requestResourceFilters,
ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java,155,requestParams);
ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java,156,customCommandExecutionHelper.addExecutionCommandsToStage(actionExecContext, stage, requestParams, null);
ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java,157,stageContainer.addStage(stage);
ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java,203,commandParameters.put(KerberosServerAction.COMPONENT_FILTER, StageUtils.getGson().toJson(components));
ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java,217,private static class PrepareDeleteIdentityServerAction extends AbstractPrepareKerberosServerAction {
ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java,235,return componentFilter().stream().map(component -> component.getServiceName()).collect(toSet());
ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java,240,return StageUtils.getGson().fromJson(getCommandParameterValue(KerberosServerAction.COMPONENT_FILTER), jsonType);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,411,if (identities.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,412,return;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1997,KerberosKeytabPrincipalEntity kkp = kerberosKeytabPrincipalDAO.findOrCreate(kke, hostEntity, kerberosPrincipalDAO.find(principal.getPrincipal()));
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1998,if(kkp.putServiceMapping(serviceName, mappingEntry.getValue())) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2403,if (!kerberosPrincipalDAO.exists(principal)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2404,kerberosPrincipalDAO.create(principal, false);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2406,KerberosKeytabPrincipalEntity kkp = kerberosKeytabPrincipalDAO.findOrCreate(kke, hostDAO.findById(sch.getHost().getHostId()), kerberosPrincipalDAO.find(principal));
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2407,if(kkp.putServiceMapping(sch.getServiceName(), sch.getServiceComponentName())) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,4058,addDeleteKeytabFilesStage(cluster, serviceComponentHosts, clusterHostInfoJson,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,4059,hostParamsJson, commandParameters, roleCommandOrder, requestStageContainer, hostsWithValidKerberosClient);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,4397,addDeleteKeytabFilesStage(cluster, serviceComponentHosts, clusterHostInfoJson,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,4398,hostParamsJson, commandParameters, roleCommandOrder, requestStageContainer, hostsWithValidKerberosClient);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosIdentityCleaner.java,65,if (null != cluster.getUpgradeInProgress()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosIdentityCleaner.java,66,LOG.info("Skipping removal of identities for {} since there is an upgrade in progress",
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosIdentityCleaner.java,67,event.getComponentName());
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosIdentityCleaner.java,69,return;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosIdentityCleaner.java,72,LOG.info("Removing identities after {}", event);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosIdentityCleaner.java,73,RemovableIdentities
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosIdentityCleaner.java,75,.remove(kerberosHelper);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosIdentityCleaner.java,89,if (null != cluster.getUpgradeInProgress()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosIdentityCleaner.java,90,LOG.info("Skipping removal of identities for {} since there is an upgrade in progress",
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosIdentityCleaner.java,91,event.getServiceName());
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosIdentityCleaner.java,93,return;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosIdentityCleaner.java,96,LOG.info("Removing identities after {}", event);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosIdentityCleaner.java,97,RemovableIdentities
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/KerberosIdentityCleaner.java,99,.remove(kerberosHelper);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/RemovableIdentities.java,23,import static java.util.stream.Collectors.toSet;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/RemovableIdentities.java,28,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/RemovableIdentities.java,139,Set<String> identitiesToRemove = skipUsed().stream().map(KerberosIdentityDescriptor::getPath).collect(toSet());
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/RemovableIdentities.java,140,if (!identitiesToRemove.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/RemovableIdentities.java,141,kerberosHelper.deleteIdentities(cluster, components, identitiesToRemove);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,31,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,51,import org.apache.ambari.server.state.Cluster;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,53,import org.apache.ambari.server.state.Service;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,57,import org.apache.commons.collections.MapUtils;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,182,String dataDir = ec.getCommandParams().get(KerberosServerAction.DATA_DIRECTORY);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,183,KerberosServerAction.KerberosCommandParameters kerberosCommandParameters = new KerberosServerAction.KerberosCommandParameters(ec);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,184,if(dataDir != null) {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,185,List<Map<String, String>> kcp = ec.getKerberosCommandParams();
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,188,Map<String, Collection<String>> serviceComponentFilter = adjustServiceComponentFilter(ec.getClusterName(), kerberosCommandParameters.getServiceComponentFilter());
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,191,for(ResolvedKerberosPrincipal resolvedPrincipal: resolvedKeytab.getPrincipals()) {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,196,if (SET_KEYTAB.equalsIgnoreCase(command)) {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,197,String principal = resolvedPrincipal.getPrincipal();
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,198,String keytabFilePath = resolvedKeytab.getFile();
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,199,LOG.info("Processing principal {} for host {} and keytab file path {}", principal, hostName, keytabFilePath);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,201,if (keytabFilePath != null) {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,203,String sha1Keytab = DigestUtils.sha256Hex(keytabFilePath);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,204,File keytabFile = new File(dataDir + File.separator + hostName + File.separator + sha1Keytab);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,206,if (keytabFile.canRead()) {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,207,Map<String, String> keytabMap = new HashMap<>();
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,209,keytabMap.put(KerberosIdentityDataFileReader.HOSTNAME, hostName);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,210,keytabMap.put(KerberosIdentityDataFileReader.PRINCIPAL, principal);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,211,keytabMap.put(KerberosIdentityDataFileReader.KEYTAB_FILE_PATH, keytabFilePath);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,212,keytabMap.put(KerberosIdentityDataFileReader.KEYTAB_FILE_OWNER_NAME, resolvedKeytab.getOwnerName());
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,213,keytabMap.put(KerberosIdentityDataFileReader.KEYTAB_FILE_OWNER_ACCESS, resolvedKeytab.getOwnerAccess());
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,214,keytabMap.put(KerberosIdentityDataFileReader.KEYTAB_FILE_GROUP_NAME, resolvedKeytab.getGroupName());
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,215,keytabMap.put(KerberosIdentityDataFileReader.KEYTAB_FILE_GROUP_ACCESS, resolvedKeytab.getGroupAccess());
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,217,BufferedInputStream bufferedIn = new BufferedInputStream(new FileInputStream(keytabFile));
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,218,byte[] keytabContent;
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,219,try {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,220,keytabContent = IOUtils.toByteArray(bufferedIn);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,222,bufferedIn.close();
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,224,String keytabContentBase64 = Base64.encodeBase64String(keytabContent);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,225,keytabMap.put(KerberosServerAction.KEYTAB_CONTENT_BASE64, keytabContentBase64);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,227,kcp.add(keytabMap);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,229,LOG.warn("Keytab file for principal {} and host {} can not to be read at path {}",
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,230,principal, hostName, keytabFile.getAbsolutePath());
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,234,Map<String, String> keytabMap = new HashMap<>();
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,235,String keytabFilePath = resolvedKeytab.getFile();
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,237,String principal = resolvedPrincipal.getPrincipal();
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,238,for (Map.Entry<String, String> mappingEntry: resolvedPrincipal.getServiceMapping().entries()) {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,239,String serviceName = mappingEntry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,240,String componentName = mappingEntry.getValue();
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,241,keytabMap.put(KerberosIdentityDataFileReader.HOSTNAME, hostName);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,242,keytabMap.put(KerberosIdentityDataFileReader.SERVICE, serviceName);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,243,keytabMap.put(KerberosIdentityDataFileReader.COMPONENT, componentName);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,244,keytabMap.put(KerberosIdentityDataFileReader.PRINCIPAL, principal);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,245,keytabMap.put(KerberosIdentityDataFileReader.KEYTAB_FILE_PATH, keytabFilePath);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,249,kcp.add(keytabMap);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,257,ec.setKerberosCommandParams(kcp);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,261,private Map<String, Collection<String>> adjustServiceComponentFilter(String clusterName, Map<String, ? extends Collection<String>> serviceComponentFilter) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,262,Map<String, Collection<String>> adjustedFilter = new HashMap<>();
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,263,Cluster cluster = clusters.getCluster(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,265,Map<String, Service> installedServices = (cluster == null) ? null : cluster.getServices();
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,267,if(!MapUtils.isEmpty(installedServices)) {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,268,if (serviceComponentFilter != null) {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,270,for(Map.Entry<String, ? extends Collection<String>> entry: serviceComponentFilter.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,271,String serviceName = entry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,273,if(installedServices.containsKey(serviceName)) {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,274,adjustedFilter.put(serviceName, entry.getValue());
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,279,for(String serviceName: installedServices.keySet()) {
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,281,adjustedFilter.put(serviceName, Collections.singletonList("*"));
ambari-server/src/main/java/org/apache/ambari/server/events/publishers/AgentCommandsPublisher.java,286,return adjustedFilter;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabDAO.java,59,entityManagerProvider.get().remove(merge(kerberosKeytabEntity));
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabPrincipalDAO.java,79,KerberosKeytabPrincipalEntity kkp = findByNaturalKey(hostId, kerberosKeytabEntity.getKeytabPath(), principalEntity.getPrincipalName());
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabPrincipalDAO.java,82,kerberosKeytabEntity,
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabPrincipalDAO.java,83,hostEntity,
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabPrincipalDAO.java,84,principalEntity
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabPrincipalDAO.java,202,if (filter.getComponentNames() != null && filter.getComponentNames().size() > 0) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabPrincipalDAO.java,206,if (filter.getHostNames() != null && filter.getHostNames().size() > 0) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabPrincipalDAO.java,209,hostIds.add(hostDAO.findByName(hostname).getHostId());
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabPrincipalDAO.java,211,predicates.add(root.get("hostId").in(hostIds));
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabPrincipalDAO.java,213,if (filter.getPrincipals() != null && filter.getPrincipals().size() > 0) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosKeytabPrincipalDAO.java,216,cq.where(cb.and(predicates.toArray(new Predicate[predicates.size()])));
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosPrincipalDAO.java,88,if(kerberosPrincipalEntity != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosPrincipalDAO.java,90,String principalName = kerberosPrincipalEntity.getPrincipalName();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosPrincipalDAO.java,92,kerberosPrincipalEntity = find(principalName);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosPrincipalDAO.java,93,if (kerberosPrincipalEntity != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/KerberosPrincipalDAO.java,94,entityManager.remove(kerberosPrincipalEntity);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabPrincipalEntity.java,110,private KerberosPrincipalEntity principalEntity;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabPrincipalEntity.java,119,public KerberosKeytabPrincipalEntity(
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabPrincipalEntity.java,120,KerberosKeytabEntity kerberosKeytabEntity,
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabPrincipalEntity.java,121,HostEntity hostEntity,
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabPrincipalEntity.java,122,KerberosPrincipalEntity principalEntity
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabPrincipalEntity.java,123,) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabPrincipalEntity.java,126,setPrincipalEntity(principalEntity);
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabPrincipalEntity.java,167,public KerberosPrincipalEntity getPrincipalEntity() {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabPrincipalEntity.java,168,return principalEntity;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabPrincipalEntity.java,171,public void setPrincipalEntity(KerberosPrincipalEntity principalEntity) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabPrincipalEntity.java,172,this.principalEntity = principalEntity;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabPrincipalEntity.java,173,if (principalEntity != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabPrincipalEntity.java,174,principalName = principalEntity.getPrincipalName();
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/KerberosKeytabPrincipalEntity.java,184,return principalEntity != null ? principalEntity.getPrincipalName() : null;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CleanupServerAction.java,35,import org.apache.ambari.server.orm.dao.KerberosKeytabDAO;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CleanupServerAction.java,36,import org.apache.ambari.server.orm.dao.KerberosPrincipalDAO;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CleanupServerAction.java,43,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CleanupServerAction.java,50,KerberosKeytabDAO kerberosKeytabDAO;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CleanupServerAction.java,53,KerberosPrincipalDAO kerberosPrincipalDAO;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CleanupServerAction.java,118,kerberosPrincipalDAO.remove(kerberosPrincipalDAO.findAll());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CleanupServerAction.java,119,kerberosKeytabDAO.remove(kerberosKeytabDAO.findAll());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java,196,if (!kerberosKeytabDAO.exists(destKeytabFilePath)) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java,208,KerberosPrincipalEntity principalEntity = kerberosPrincipalDAO.find(principal.getPrincipal());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java,209,KerberosKeytabPrincipalEntity entity = kerberosKeytabPrincipalDAO.findOrCreate(kke, hostEntity, principalEntity);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,22,import java.io.IOException;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,37,import org.apache.ambari.server.serveraction.kerberos.stageutils.ResolvedKerberosKeytab;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,39,import org.apache.ambari.server.utils.ShellCommandUtil;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,88,return processIdentities(requestSharedDataContext);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,113,if (!seenPrincipals.contains(resolvedPrincipal.getPrincipal())) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,114,seenPrincipals.add(resolvedPrincipal.getPrincipal());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,116,String message = String.format("Destroying identity, %s", resolvedPrincipal.getPrincipal());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,117,LOG.info(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,118,actionLog.writeStdOut(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,123,.withPrincipal(resolvedPrincipal.getPrincipal());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,126,try {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,127,boolean servicePrincipal = resolvedPrincipal.isService();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,128,operationHandler.removePrincipal(resolvedPrincipal.getPrincipal(), servicePrincipal);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,130,message = String.format("Failed to remove identity for %s from the KDC - %s", resolvedPrincipal.getPrincipal(), e.getMessage());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,131,LOG.warn(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,132,actionLog.writeStdErr(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,133,auditEventBuilder.withReasonOfFailure(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,136,try {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,137,KerberosPrincipalEntity principalEntity = kerberosPrincipalDAO.find(resolvedPrincipal.getPrincipal());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,139,if (principalEntity != null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,140,String cachedKeytabPath = principalEntity.getCachedKeytabPath();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,141,KerberosKeytabEntity kke = kerberosKeytabDAO.find(resolvedPrincipal.getResolvedKerberosKeytab().getFile());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,142,kerberosKeytabPrincipalDAO.remove(kerberosKeytabPrincipalDAO.findByPrincipal(principalEntity.getPrincipalName()));
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,143,kerberosKeytabDAO.remove(kke);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,144,kerberosPrincipalDAO.remove(principalEntity);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,147,if (cachedKeytabPath != null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,148,if (!new File(cachedKeytabPath).delete()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,149,LOG.debug("Failed to remove cached keytab for {}", resolvedPrincipal.getPrincipal());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,155,String hostName = resolvedPrincipal.getHostName();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,156,if (hostName != null && hostName.equalsIgnoreCase(KerberosHelper.AMBARI_SERVER_HOST_NAME)) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,157,ResolvedKerberosKeytab resolvedKeytab = resolvedPrincipal.getResolvedKerberosKeytab();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,158,if (resolvedKeytab != null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,159,String keytabFilePath = resolvedKeytab.getFile();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,160,if (keytabFilePath != null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,161,try {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,162,ShellCommandUtil.Result result = ShellCommandUtil.delete(keytabFilePath, true, true);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,163,if (!result.isSuccessful()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,164,LOG.warn("Failed to remove ambari keytab for {} due to {}", resolvedPrincipal.getPrincipal(), result.getStderr());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,167,LOG.warn("Failed to remove ambari keytab for " + resolvedPrincipal.getPrincipal(), e);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,173,message = String.format("Failed to remove identity for %s from the Ambari database - %s", resolvedPrincipal.getPrincipal(), t.getMessage());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,174,LOG.warn(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,175,actionLog.writeStdErr(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,176,auditEventBuilder.withReasonOfFailure(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,179,auditLog(auditEventBuilder.build());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,185,return null;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java,95,public static final String COMPONENT_FILTER = "component_filter";
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java,193,HostDAO hostDAO;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java,196,KerberosKeytabController kerberosKeytabController;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java,100,public Set<ResolvedKerberosKeytab> getFilteredKeytabs(Map<String, Collection<String>> serviceComponentFilter,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java,131,private List<KerberosKeytabPrincipalDAO.KerberosKeytabPrincipalFilter> splitServiceFilter(Map<String, Collection<String>> serviceComponentFilter) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java,138,for(Map.Entry<String, Collection<String>> entry: serviceComponentFilter.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java,207,KerberosPrincipalEntity kpe = kkpe.getPrincipalEntity();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java,208,ResolvedKerberosPrincipal rkp = new ResolvedKerberosPrincipal(
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java,209,kkpe.getHostId(),
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java,210,kkpe.getHostName(),
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java,211,kkpe.getPrincipalName(),
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java,212,kpe.isService(),
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java,213,kpe.getCachedKeytabPath(),
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java,214,kkpe.getKeytabPath(),
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java,215,kkpe.getServiceMappingAsMultimap());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/stageutils/KerberosKeytabController.java,216,builder.add(rkp);
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/LabelFallbackHandler.java,49,boolean replaceUppercaseInWord, boolean capitalizeAll, List<String> prefixesToRemove) {
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/LabelFallbackHandler.java,51,return fallback(field,replaceUnderscore, replaceUppercaseInWord, capitalizeAll, prefixesToRemove);
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/LabelFallbackHandler.java,69,public String fallback(String field, boolean replaceUnderscore, boolean replaceUppercaseInWord, boolean capitalizeAll, List<String> prefixesToRemove) {
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/LabelFallbackHandler.java,70,String fieldWithoutPrefix =  null;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/LabelFallbackHandler.java,74,fieldWithoutPrefix = field.substring(prefix.length());
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/LabelFallbackHandler.java,78,return fallback(fieldWithoutPrefix != null ? fieldWithoutPrefix : field, replaceUnderscore, replaceUppercaseInWord, capitalizeAll);
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/LogSearchConstants.java,75,public static final String SERVICE_FIELD_FALLBACK_PREFIX_DEFAULTS = "ws_,sdi_";
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/UIMappingConfig.java,21,import org.apache.ambari.logsearch.common.LogSearchConstants;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/manager/AuditLogsManager.java,183,uiMappingConfig.getAuditFieldFallbackPrefixes());
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/manager/AuditLogsManager.java,201,uiMappingConfig.getAuditFieldFallbackPrefixes());
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/manager/ServiceLogsManager.java,458,uiMappingConfig.getServiceFieldFallbackPrefixes()),
ambari-server/src/main/java/org/apache/ambari/server/api/services/AmbariMetaInfo.java,1243,eventPublisher.publish(new AlertDefinitionDisabledEvent(clusterId, definition.getDefinitionId()));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertDefinitionResourceProvider.java,331,entity.getClusterId(), entity.getDefinitionId());
ambari-server/src/main/java/org/apache/ambari/server/events/AlertDefinitionDisabledEvent.java,41,public AlertDefinitionDisabledEvent(long clusterId, long definitionId) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/WidgetResourceProvider.java,43,import org.apache.ambari.server.orm.entities.PermissionEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/WidgetResourceProvider.java,46,import org.apache.ambari.server.security.authorization.AmbariGrantedAuthority;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/WidgetResourceProvider.java,51,import org.springframework.security.core.GrantedAuthority;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/WidgetResourceProvider.java,52,import org.springframework.security.core.context.SecurityContext;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/WidgetResourceProvider.java,53,import org.springframework.security.core.context.SecurityContextHolder;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/WidgetResourceProvider.java,160,if (!isScopeAllowedForUser(scope)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/WidgetResourceProvider.java,313,if (!isScopeAllowedForUser(scope)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/WidgetResourceProvider.java,386,private boolean isScopeAllowedForUser(String scope) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/WidgetResourceProvider.java,387,if (scope.equals(WidgetEntity.USER_SCOPE)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/WidgetResourceProvider.java,388,return true;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/WidgetResourceProvider.java,392,SecurityContext securityContext = SecurityContextHolder.getContext();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/WidgetResourceProvider.java,393,securityContext.getAuthentication().getAuthorities();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/WidgetResourceProvider.java,394,boolean hasPermissionForClusterScope = false;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/WidgetResourceProvider.java,395,for (GrantedAuthority grantedAuthority : securityContext.getAuthentication().getAuthorities()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/WidgetResourceProvider.java,397,== PermissionEntity.AMBARI_ADMINISTRATOR_PERMISSION ||
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/WidgetResourceProvider.java,399,== PermissionEntity.CLUSTER_ADMINISTRATOR_PERMISSION) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/WidgetResourceProvider.java,400,hasPermissionForClusterScope = true;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/WidgetResourceProvider.java,403,if (hasPermissionForClusterScope) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/WidgetResourceProvider.java,406,return false;
ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolder.java,79,recoveryConfigHelper.getRecoveryConfig(cl.getClusterName(), host.getHostName()));
ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolder.java,134,mergedRecoveryConfig);
ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolder.java,179,recoveryConfigHelper.getRecoveryConfig(cluster.getClusterName(), host.getHostName())));
ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/dto/HostLevelParamsCluster.java,35,public HostLevelParamsCluster(HostRepositories hostRepositories, RecoveryConfig recoveryConfig) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,703,persistServiceComponentHosts(requests);
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,418,getController().createHostComponents(requests);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,3384,Set<String> properties = Sets.newHashSet(ConfigHelper.CLUSTER_ENV_STACK_NAME_PROPERTY,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,3385,ConfigHelper.CLUSTER_ENV_STACK_ROOT_PROPERTY, ConfigHelper.CLUSTER_ENV_STACK_TOOLS_PROPERTY,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,3395,configuration.setProperty(CLUSTER_ENV_CONFIG_TYPE_NAME, property,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,3396,clusterEnvDefaultProperties.get(property));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,3399,configTypesUpdated.add(CLUSTER_ENV_CONFIG_TYPE_NAME);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,299,resources.addAll(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,300,getRequestResources(null, null, null, maxResults, ascOrder, requestedIds));
ambari-server/src/main/java/org/apache/ambari/server/configuration/AmbariServerConfigurationKey.java,75,COLLISION_BEHAVIOR(AmbariServerConfigurationCategory.LDAP_CONFIGURATION, "ambari.ldap.advance.collision_behavior", PLAINTEXT, "convert", "Determines how to handle username collision while updating from LDAP."),
ambari-server/src/main/java/org/apache/ambari/server/view/ViewExtractor.java,162,return getArchiveClassLoader(viewConfig, archiveDir);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewExtractor.java,206,File   libDir  = archiveUtility.getFile(libPath);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewExtractor.java,219,urlList.add(archiveDir.toURI().toURL());
ambari-server/src/main/java/org/apache/ambari/server/view/ViewExtractor.java,221,return new ViewClassLoader(viewConfig, urlList.toArray(new URL[urlList.size()]));
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1817,ClassLoader cl = extractor.extractViewArchive(viewDefinition, archiveFile, extractedArchiveDirFile);
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,2113,classLoader = extractor.extractViewArchive(viewDefinition, archiveFile, extractedArchiveDirFile);
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,763,LdapServerProperties ldapServerProperties = getLdapProperties();
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,765,if (ldapTemplate == null || !properties.equals(ldapServerProperties)) {
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,790,ldapContextSource.setReferral(ldapServerProperties.getReferralMethod());
ambari-server/src/main/java/org/apache/ambari/server/api/AmbariErrorHandler.java,76,if (code == HttpServletResponse.SC_FORBIDDEN) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/IPAKerberosOperationHandler.java,282,? new String[]{executableIpaGetKeytab, "-s", getAdminServerHost(), "-p", principal, "-k", keytabFileDestinationPath}
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/IPAKerberosOperationHandler.java,283,: new String[]{executableIpaGetKeytab, "-s", getAdminServerHost(), "-e", encryptionTypeSpec, "-p", principal, "-k", keytabFileDestinationPath};
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KDCKerberosOperationHandler.java,86,adminServerHost = kerberosConfiguration.get(KERBEROS_ENV_ADMIN_SERVER_HOST);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KDCKerberosOperationHandler.java,228,String getAdminServerHost() {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KDCKerberosOperationHandler.java,229,return adminServerHost;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,244,String adminSeverHost = getAdminServerHost();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,343,String.format("kadmin/%s", getAdminServerHost()),
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/state/HDFSServiceCalculatedState.java,63,int     nameNodeActiveCount = 0;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/state/HDFSServiceCalculatedState.java,97,++nameNodeActiveCount;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/state/HDFSServiceCalculatedState.java,109,if ( nonStartedState == null ||  // all started
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/state/HDFSServiceCalculatedState.java,110,((nameNodeCount > 0 && !hasSecondary || hasJournal) &&
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/state/HDFSServiceCalculatedState.java,111,nameNodeActiveCount > 0)) {  // at least one active namenode
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/hdfs/HdfsApi.java,557,json.put("replication", status.getReplication());
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,439,STOMPUpdatePublisher.publish(new RequestUpdateEvent(requestEntity,
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,440,hostRoleCommandDAO, topologyManager, clusterName, hostRoleCommandEntities));
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/tasks/TaskStatusListener.java,31,import org.apache.ambari.server.ClusterNotFoundException;
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/tasks/TaskStatusListener.java,126,public void onTaskUpdateEvent(TaskUpdateEvent event) throws ClusterNotFoundException {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/tasks/TaskStatusListener.java,148,Set<RequestUpdateEvent.HostRoleCommand> hostRoleCommands = new HashSet<>();
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/tasks/TaskStatusListener.java,149,hostRoleCommands.add(new RequestUpdateEvent.HostRoleCommand(hostRoleCommand.getTaskId(),
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/tasks/TaskStatusListener.java,150,hostRoleCommand.getRequestId(),
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/tasks/TaskStatusListener.java,151,hostRoleCommand.getStatus(),
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/tasks/TaskStatusListener.java,152,hostRoleCommand.getHostName()));
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/tasks/TaskStatusListener.java,153,requestsToPublish.add(new RequestUpdateEvent(hostRoleCommand.getRequestId(),
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/tasks/TaskStatusListener.java,154,activeRequestMap.get(hostRoleCommand.getRequestId()).getStatus(), hostRoleCommands));
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/tasks/TaskStatusListener.java,267,ActiveRequest request = new ActiveRequest(requestEntity.getStatus(),requestEntity.getDisplayStatus(), stageEntityPKs);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/tasks/TaskStatusListener.java,528,public ActiveRequest(HostRoleStatus status, HostRoleStatus displayStatus, Set<StageEntityPK> stageEntityPks) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java,622,currentUserCreateTimes.put(rs.getInt(1), rs.getTimestamp(2));
ambari-server/src/main/java/org/apache/ambari/server/ldap/service/ads/DefaultLdapConfigurationService.java,184,return entry.get(ambariLdapConfiguration.groupNameAttribute()).get().getString();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java,1279,for (KerberosComponentDescriptor componentDescriptor : serviceDescriptor.getComponents().values()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java,1280,updateKerberosIdentities(componentDescriptor);
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,124,protected AmbariLdapConfiguration ldapConfiguration;
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,900,if (Strings.isNullOrEmpty(adminGroupMappings) || membershipsToCreate.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/security/authorization/Users.java,901,LOG.info("Nothing to do. LDAP admin group mappings: {}, Memberships to handle: {}", adminGroupMappings, membershipsToCreate.size());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,473,GzipHandler gzipHandler = new GzipHandler();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,474,gzipHandler.setHandler(root);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,477,gzipHandler.setIncludedMimeTypes("text/html", "text/plain", "text/xml", "text/css", "application/javascript",
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,479,handlerList.addHandler(gzipHandler);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1635,if (!resolvedKeytab.getOwnerName().equals(sameKeytab.getOwnerName())) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1642,if (!resolvedKeytab.getOwnerAccess().equals(sameKeytab.getOwnerAccess())) {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,28,import org.apache.ambari.logsearch.config.api.model.loglevelfilter.LogLevelFilter;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,54,private static final long WAIT_FOR_ROOT_SLEEP_SECONDS = 10;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,61,while (client.checkExists().forPath("/") == null) {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,62,LOG.info("Root node is not present yet, going to sleep for " + WAIT_FOR_ROOT_SLEEP_SECONDS + " seconds");
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,63,Thread.sleep(WAIT_FOR_ROOT_SLEEP_SECONDS * 1000);
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,66,logFeederClusterCache = new TreeCache(client, String.format("/%s", clusterName));
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,104,handleLogLevelFilterChange(eventType, nodeName, nodeData);
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,149,private void handleLogLevelFilterChange(Type eventType, String nodeName, String nodeData) {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,150,switch (eventType) {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,151,case NODE_ADDED:
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,152,case NODE_UPDATED:
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,153,LOG.info("Node added/updated under loglevelfilter ZK node: " + nodeName);
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,154,LogLevelFilter logLevelFilter = gson.fromJson(nodeData, LogLevelFilter.class);
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,155,logLevelFilterMonitor.setLogLevelFilter(nodeName, logLevelFilter);
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,156,break;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,157,case NODE_REMOVED:
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,158,LOG.info("Node removed loglevelfilter input ZK node: " + nodeName);
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,159,logLevelFilterMonitor.removeLogLevelFilter(nodeName);
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,160,break;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,161,default:
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,162,break;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,191,client.create().creatingParentContainersIfNeeded().withACL(getAcls()).forPath(globalConfigNodePath, data.getBytes());
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java,55,if (client.checkExists().forPath("/output") == null) {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java,56,client.create().creatingParentContainersIfNeeded().forPath("/output");
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,22,import java.util.ArrayList;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,23,import java.util.List;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,27,import org.apache.ambari.logsearch.config.api.LogSearchPropertyDescription;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,28,import org.apache.ambari.logsearch.config.api.model.loglevelfilter.LogLevelFilter;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,29,import org.apache.commons.collections.MapUtils;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,30,import org.apache.commons.lang3.StringUtils;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,31,import org.apache.curator.RetryPolicy;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,33,import org.apache.curator.framework.CuratorFrameworkFactory;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,34,import org.apache.curator.framework.recipes.cache.TreeCache;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,35,import org.apache.curator.retry.RetryForever;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,36,import org.apache.curator.retry.RetryUntilElapsed;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,38,import org.apache.zookeeper.ZooDefs;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,39,import org.apache.zookeeper.data.ACL;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,40,import org.apache.zookeeper.data.Id;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,44,import com.google.common.base.Splitter;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,46,import com.google.gson.GsonBuilder;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,51,private static final int DEFAULT_SESSION_TIMEOUT = 60000;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,52,private static final int DEFAULT_CONNECTION_TIMEOUT = 30000;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,53,private static final int RETRY_INTERVAL_MS = 10000;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,54,private static final String DEFAULT_ZK_ROOT = "/logsearch";
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,55,private static final String DATE_FORMAT = "yyyy-MM-dd'T'HH:mm:ss.SSS";
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,58,name = "logsearch.config.zk_connect_string",
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,59,description = "ZooKeeper connection string.",
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,60,examples = {"localhost1:2181,localhost2:2181/znode"},
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,61,sources = {"logsearch.properties", "logfeeder.properties"}
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,63,private static final String ZK_CONNECT_STRING_PROPERTY = "logsearch.config.zk_connect_string";
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,66,name = "logsearch.config.zk_acls",
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,67,description = "ZooKeeper ACLs for handling configs. (read & write)",
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,68,examples = {"world:anyone:r,sasl:solr:cdrwa,sasl:logsearch:cdrwa"},
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,69,sources = {"logsearch.properties", "logfeeder.properties"},
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,70,defaultValue = "world:anyone:cdrwa"
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,72,private static final String ZK_ACLS_PROPERTY = "logsearch.config.zk_acls";
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,75,name = "logsearch.config.zk_root",
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,76,description = "ZooKeeper root node where the shippers are stored. (added to the connection string)",
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,77,examples = {"/logsearch"},
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,78,sources = {"logsearch.properties", "logfeeder.properties"}
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,80,private static final String ZK_ROOT_NODE_PROPERTY = "logsearch.config.zk_root";
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,83,name = "logsearch.config.zk_session_time_out_ms",
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,84,description = "ZooKeeper session timeout in milliseconds",
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,85,examples = {"60000"},
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,86,sources = {"logsearch.properties", "logfeeder.properties"}
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,88,private static final String ZK_SESSION_TIMEOUT_PROPERTY = "logsearch.config.zk_session_time_out_ms";
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,91,name = "logsearch.config.zk_connection_time_out_ms",
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,92,description = "ZooKeeper connection timeout in milliseconds",
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,93,examples = {"30000"},
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,94,sources = {"logsearch.properties", "logfeeder.properties"}
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,96,private static final String ZK_CONNECTION_TIMEOUT_PROPERTY = "logsearch.config.zk_connection_time_out_ms";
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,99,name = "logsearch.config.zk_connection_retry_time_out_ms",
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,100,description = "The maximum elapsed time for connecting to ZooKeeper in milliseconds. 0 means retrying forever.",
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,101,examples = {"1200000"},
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,102,sources = {"logsearch.properties", "logfeeder.properties"}
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,104,private static final String ZK_CONNECTION_RETRY_TIMEOUT_PROPERTY = "logsearch.config.zk_connection_retry_time_out_ms";
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,108,protected TreeCache outputCache;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,114,String root = MapUtils.getString(properties, ZK_ROOT_NODE_PROPERTY, DEFAULT_ZK_ROOT);
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,115,LOG.info("Connecting to ZooKeeper at " + properties.get(ZK_CONNECT_STRING_PROPERTY) + root);
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,121,.build();
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,124,outputCache = new TreeCache(client, "/output");
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,125,outputCache.start();
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,127,gson = new GsonBuilder().setDateFormat(DATE_FORMAT).create();
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,130,private int getIntProperty(String propertyKey, int defaultValue) {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,132,return defaultValue;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,133,return Integer.parseInt(properties.get(propertyKey));
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,136,private RetryPolicy getRetryPolicy(String zkConnectionRetryTimeoutValue) {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,138,return new RetryForever(RETRY_INTERVAL_MS);
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,139,int maxElapsedTimeMs = Integer.parseInt(zkConnectionRetryTimeoutValue);
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,141,return new RetryForever(RETRY_INTERVAL_MS);
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,142,return new RetryUntilElapsed(maxElapsedTimeMs, RETRY_INTERVAL_MS);
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,149,client.create().creatingParentContainersIfNeeded().withACL(getAcls()).forPath(nodePath, inputConfig.getBytes());
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,168,protected List<ACL> getAcls() {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,169,String aclStr = properties.get(ZK_ACLS_PROPERTY);
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,170,if (StringUtils.isBlank(aclStr)) {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,171,return ZooDefs.Ids.OPEN_ACL_UNSAFE;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,174,List<ACL> acls = new ArrayList<>();
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,175,List<String> aclStrList = Splitter.on(",").omitEmptyStrings().trimResults().splitToList(aclStr);
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,176,for (String unparcedAcl : aclStrList) {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,177,String[] parts = unparcedAcl.split(":");
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,178,if (parts.length == 3) {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,179,acls.add(new ACL(parsePermission(parts[2]), new Id(parts[0], parts[1])));
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,182,return acls;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,185,private Integer parsePermission(String permission) {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,186,int permissionCode = 0;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,187,for (char each : permission.toLowerCase().toCharArray()) {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,188,switch (each) {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,189,case 'r':
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,190,permissionCode |= ZooDefs.Perms.READ;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,191,break;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,192,case 'w':
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,193,permissionCode |= ZooDefs.Perms.WRITE;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,194,break;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,195,case 'c':
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,196,permissionCode |= ZooDefs.Perms.CREATE;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,197,break;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,198,case 'd':
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,199,permissionCode |= ZooDefs.Perms.DELETE;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,200,break;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,201,case 'a':
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,202,permissionCode |= ZooDefs.Perms.ADMIN;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,203,break;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,204,default:
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,205,throw new IllegalArgumentException("Unsupported permission: " + permission);
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,208,return permissionCode;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java,71,public void init() {
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/ACLPropertiesSplitter.java,39,acls.add(new ACL(parsePermission(parts[2]), new Id(parts[0], parts[1])));
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/ACLPropertiesSplitter.java,45,private Integer parsePermission(String permission) {
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/ACLPropertiesSplitter.java,46,int permissionCode = 0;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/ACLPropertiesSplitter.java,47,for (char each : permission.toLowerCase().toCharArray()) {
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/ACLPropertiesSplitter.java,48,switch (each) {
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/ACLPropertiesSplitter.java,49,case 'r':
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/ACLPropertiesSplitter.java,50,permissionCode |= ZooDefs.Perms.READ;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/ACLPropertiesSplitter.java,51,break;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/ACLPropertiesSplitter.java,52,case 'w':
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/ACLPropertiesSplitter.java,53,permissionCode |= ZooDefs.Perms.WRITE;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/ACLPropertiesSplitter.java,54,break;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/ACLPropertiesSplitter.java,55,case 'c':
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/ACLPropertiesSplitter.java,56,permissionCode |= ZooDefs.Perms.CREATE;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/ACLPropertiesSplitter.java,57,break;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/ACLPropertiesSplitter.java,58,case 'd':
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/ACLPropertiesSplitter.java,59,permissionCode |= ZooDefs.Perms.DELETE;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/ACLPropertiesSplitter.java,60,break;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/ACLPropertiesSplitter.java,61,case 'a':
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/ACLPropertiesSplitter.java,62,permissionCode |= ZooDefs.Perms.ADMIN;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/ACLPropertiesSplitter.java,63,break;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/ACLPropertiesSplitter.java,64,default:
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/ACLPropertiesSplitter.java,65,throw new IllegalArgumentException("Unsupported permission: " + permission);
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/ACLPropertiesSplitter.java,68,return permissionCode;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java,25,import org.apache.ambari.logsearch.config.api.LogSearchPropertyDescription;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java,45,import org.springframework.security.config.http.SessionCreationPolicy;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2908,hbaseSiteMap.put("hbase.rootdir", new SingleHostTopologyUpdater("NAMENODE"));
ambari-server/src/main/java/org/apache/ambari/server/security/InternalSSLSocketFactory.java,99,public static class LenientTrustManager implements X509TrustManager {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/aggregators/TimelineMetricClusterAggregator.java,139,hostAggregate.setSum(hostAggregate.getSum() / perMetricCount);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,188,metricMetadataSync = new TimelineMetricMetadataSync(this);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,192,metricsConf.getInt(METRICS_METADATA_SYNC_INIT_DELAY, 120), // 2 minutes
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,193,metricsConf.getInt(METRICS_METADATA_SYNC_SCHEDULE_DELAY, 300), // 5 minutes
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,194,TimeUnit.SECONDS);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,595,timelineMetric.setHostName(uuidHostMap.get(new TimelineMetricUuid(hostUuid)));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,739,boolean includeBlacklistedMetrics) throws SQLException, IOException {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/discovery/TimelineMetricMetadataManager.java,842,cacheValue.getSeriesStartTime() != 0L &&
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,756,for (Map.Entry<String, Map<String, Map<String, String>>> config : requestConfigurations.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,757,for (Map<String, String> properties : config.getValue().values()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,758,for (Map.Entry<String, String> property : properties.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,759,String oldValue = property.getValue();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,760,String updatedValue = variableReplacementHelper.replaceVariables(property.getValue(), existingConfigurations);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,761,if (!StringUtils.equals(oldValue, updatedValue) && !config.getKey().isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,762,property.setValue(updatedValue);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,763,if (kerberosConfigurations.containsKey(config.getKey())) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,764,kerberosConfigurations.get(config.getKey()).put(property.getKey(), updatedValue);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,766,Map kerberosConfigProperties = new HashMap<>();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,767,kerberosConfigProperties.put(property.getKey(), updatedValue);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,768,kerberosConfigurations.put(config.getKey(), kerberosConfigProperties);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2854,singleHostTopologyUpdaters.put("application-properties", atlasPropsMap);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,3156,atlasPropsMap.put("atlas.server.bind.address", new SingleHostTopologyUpdater("ATLAS_SERVER"));
ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReport.java,20,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReport.java,22,import org.apache.ambari.server.agent.stomp.dto.HostStatusReport;
ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReport.java,24,public class AgentReport {
ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReport.java,26,private String hostName;
ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReport.java,27,private List<ComponentStatus> componentStatuses;
ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReport.java,28,private List<CommandReport> reports;
ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReport.java,29,private HostStatusReport hostStatusReport;
ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReport.java,31,public AgentReport(String hostName, List<ComponentStatus> componentStatuses, List<CommandReport> reports, HostStatusReport hostStatusReport) {
ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReport.java,33,this.componentStatuses = componentStatuses;
ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReport.java,34,this.reports = reports;
ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReport.java,35,this.hostStatusReport = hostStatusReport;
ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReport.java,42,public List<ComponentStatus> getComponentStatuses() {
ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReport.java,43,return componentStatuses;
ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReport.java,46,public List<CommandReport> getCommandReports() {
ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReport.java,47,return reports;
ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReport.java,50,public HostStatusReport getHostStatusReport() {
ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReport.java,51,return hostStatusReport;
ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReportsProcessor.java,52,private HeartBeatHandler hh;
ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReportsProcessor.java,80,String hostName = agentReport.getHostName();
ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReportsProcessor.java,84,if (agentReport.getCommandReports() != null) {
ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReportsProcessor.java,85,hh.handleCommandReportStatus(agentReport.getCommandReports(), hostName);
ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReportsProcessor.java,87,hh.handleComponentReportStatus(agentReport.getComponentStatuses(), hostName);
ambari-server/src/main/java/org/apache/ambari/server/agent/AgentReportsProcessor.java,89,hh.handleHostReportStatus(agentReport.getHostStatusReport(), hostName);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java,599,if (extra.containsKey("version")) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java,600,String version = extra.get("version").toString();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java,602,HostComponentVersionAdvertisedEvent event = new HostComponentVersionAdvertisedEvent(cl, scHost, version);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatProcessor.java,603,versionEventPublisher.publish(event);
ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AgentReportsController.java,30,import org.apache.ambari.server.agent.AgentReport;
ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AgentReportsController.java,88,agentReportsProcessor.addAgentReport(new AgentReport(agentSessionManager.getHost(simpSessionId).getHostName(),
ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AgentReportsController.java,89,statuses, null, null));
ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AgentReportsController.java,101,agentReportsProcessor.addAgentReport(new AgentReport(agentSessionManager.getHost(simpSessionId).getHostName(),
ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AgentReportsController.java,102,null, statuses, null));
ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AgentReportsController.java,108,agentReportsProcessor.addAgentReport(new AgentReport(agentSessionManager.getHost(simpSessionId).getHostName(),
ambari-server/src/main/java/org/apache/ambari/server/agent/stomp/AgentReportsController.java,109,null, null, message));
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java,1256,if (StringUtils.isEmpty(singleSignOnInfo.getEnabledConfiguration())) {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java,1258,addError("Single Sign-on support is indicated for service " + getName() + " but no test configuration has been set (enabledConfiguration).");
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/AbstractUpgradeServerAction.java,43,private Clusters m_clusters;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1602,if (keytabFileOwnerName == null || keytabFileGroupName == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1603,LOG.warn("Missing owner ({}) or group name ({}) of kerberos descriptor {}", keytabFileOwnerName, keytabFileGroupName, keytabDescriptor.getName());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/LogEntryParseTester.java,86,logLevelFilterHandler.setLogFeederProps(new LogFeederProps());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/LogEntryParseTester.java,91,input.getFirstFilter().init(new LogFeederProps());
ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceResponse.java,231,int result = clusterId != null? clusterId.intValue() : 0;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,117,ClusterServiceDAO clusterServiceDAO, ServiceDesiredStateDAO serviceDesiredStateDAO,
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,118,ServiceComponentFactory serviceComponentFactory, AmbariMetaInfo ambariMetaInfo,
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,119,AmbariEventPublisher eventPublisher) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,154,persist(serviceEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,159,ClusterDAO clusterDAO, ClusterServiceDAO clusterServiceDAO,
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,160,ServiceDesiredStateDAO serviceDesiredStateDAO,
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,161,ServiceComponentFactory serviceComponentFactory, AmbariMetaInfo ambariMetaInfo,
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,162,AmbariEventPublisher eventPublisher) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,180,components.put(serviceComponentDesiredStateEntity.getComponentName(),
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,181,serviceComponentFactory.createExisting(this,
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,182,serviceComponentDesiredStateEntity));
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,184,StackId stackId = new StackId(serviceComponentDesiredStateEntity.getDesiredStack());
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,185,LOG.error(String.format("Can not get component info: stackName=%s, stackVersion=%s, serviceName=%s, componentName=%s",
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,186,stackId.getStackName(), stackId.getStackVersion(),
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,187,serviceEntity.getServiceName(),serviceComponentDesiredStateEntity.getComponentName()));
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,188,ex.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,220,+ " not recognized in stack info"
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,223,+ ", stackInfo=" + getDesiredStackId().getStackName());
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,250,for (ServiceComponent serviceComponent  : getServiceComponents().values()) {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,307,cluster.getClusterName(), cluster.getClusterId(), getName(), getDesiredState(), state);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,365,for( ServiceComponent component : components.values() ){
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,446,cluster.getClusterName(), cluster.getClusterId(), getName(), isCredentialStoreEnabled(), credentialStoreEnabled);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,458,stackId.getStackVersion(), getName());
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,469,+ "previously deleted, serviceName = " + getName());
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,480,.append(", components=[ ");
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,557,serviceConfigDAO.findByService(cluster.getClusterId(), getName());
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,708,public boolean isSsoIntegrationDesired() {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,709,return ambariServerConfigurationHandler.getSSOEnabledServices().contains(serviceName);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,712,public boolean isSsoIntegrationEnabled() {
ambari-server/src/main/java/org/apache/ambari/server/controller/DeleteIdentityHandler.java,324,protected CommandReport processIdentity(ResolvedKerberosPrincipal resolvedPrincipal, KerberosOperationHandler operationHandler, Map<String, String> kerberosConfiguration, Map<String, Object> requestSharedDataContext) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,75,protected CommandReport processIdentity(ResolvedKerberosPrincipal resolvedPrincipal, KerberosOperationHandler operationHandler, Map<String, String> kerberosConfiguration, Map<String, Object> requestSharedDataContext) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/ConfigureAmbariIdentitiesServerAction.java,124,if (resolvedPrincipal != null && StageUtils.getHostName().equals(resolvedPrincipal.getHostName())) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,137,protected CommandReport processIdentity(ResolvedKerberosPrincipal resolvedPrincipal, KerberosOperationHandler operationHandler, Map<String, String> kerberosConfiguration, Map<String, Object> requestSharedDataContext) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,470,Map<String, Map<String, String>> existingConfigurations = calculateExistingConfigurations(cluster, null);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1745,calculateExistingConfigurations(cluster, hostname),
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2938,private Map<String, Map<String, String>> calculateExistingConfigurations(Cluster cluster, String hostname) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2943,Map<String, Map<String, String>> configurations = new HashMap<>();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2944,Map<String, Map<String, String>> configurationTags = ambariManagementController.findConfigurationTagsWithOverrides(cluster, hostname);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2946,Map<String, Map<String, String>> configProperties = configHelper.getEffectiveConfigProperties(cluster, configurationTags);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2950,for (Map.Entry<String, Map<String, String>> entry : configProperties.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2951,String type = entry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2952,Map<String, String> allLevelMergedConfig = entry.getValue();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2953,Map<String, String> configuration = configurations.get(type);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2955,if (configuration == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2956,configuration = new HashMap<>(allLevelMergedConfig);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2958,Map<String, String> mergedConfig = configHelper.getMergedConfig(allLevelMergedConfig, configuration);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2959,configuration.clear();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2960,configuration.putAll(mergedConfig);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2963,configurations.put(type, configuration);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2966,return configurations;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,85,private final String ssoEnabledConfiguration;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,152,ssoEnabledConfiguration = sInfo.getSingleSignOnEnabledConfiguration();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,201,ssoEnabledConfiguration = sInfo.getSingleSignOnEnabledConfiguration();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,713,return ssoIntegrationSupported && ssoEnabledConfigValid() && "true".equalsIgnoreCase(ssoEnabledConfigValue());
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,716,private boolean ssoEnabledConfigValid() {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,717,return ssoEnabledConfiguration != null && ssoEnabledConfiguration.split("/").length == 2;
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,720,private String ssoEnabledConfigValue() {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,721,String configType = ssoEnabledConfiguration.split("/")[0];
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,722,String propertyName = ssoEnabledConfiguration.split("/")[1];
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,723,return configHelper.getValueFromDesiredConfigurations(cluster, configType, propertyName);
ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceResponse.java,46,boolean credentialStoreSupported, boolean credentialStoreEnabled, boolean ssoIntegrationSupported, boolean ssoIntegrationDesired, boolean ssoIntegrationEnabled) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackServiceResourceProvider.java,139,SSO_INTEGRATION_SUPPORTED_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,380,ssoIntegrationSupported, isSsoIntegrationDesired(), isSsoIntegrationEnabled());
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java,459,public void setProperties(List properties) {
ambari-server/src/main/java/org/apache/ambari/server/state/SingleSignOnInfo.java,69,public SingleSignOnInfo(Boolean supported, String enabledConfiguration) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputManagerImpl.java,26,import org.apache.ambari.logfeeder.input.InputFile;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputManagerImpl.java,44,import java.util.UUID;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputManagerImpl.java,129,if (jsonObj.get("id") == null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputManagerImpl.java,130,jsonObj.put("id", UUID.randomUUID().toString());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,47,import java.util.Collection;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,48,import java.util.Collections;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,52,import java.util.Set;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,53,import java.util.UUID;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,471,outputData.jsonObj.put("id", UUID.randomUUID().toString());
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,141,import com.google.common.collect.Lists;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1870,if (!hostActiveIdentities.containsKey(uniqueKey)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2471,Collections.singletonMap("KERBEROS", Lists.newArrayList("KERBEROS_CLIENT")),
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2472,null, Sets.newHashSet(principal), hostsWithValidKerberosClient);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java,184,private KerberosIdentityDataFileReaderFactory kerberosIdentityDataFileReaderFactory;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java,458,for (ResolvedKerberosKeytab rkk : kerberosKeytabController.getFilteredKeytabs((Map<String, Collection<String>>) getServiceComponentFilter(), getHostFilter(), getIdentityFilter())) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java,460,commandReport = processIdentity(principal, handler, kerberosConfiguration, requestSharedDataContext);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java,463,if (commandReport != null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/KerberosServerAction.java,464,break;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewURLResourceProvider.java,271,ViewURLEntity viewUrl = viewInstanceEntity.getViewUrl();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewURLResourceProvider.java,272,Optional<ViewURLEntity> savedUrl = viewURLDAO.findByName(urlEntity.getUrlName());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewURLResourceProvider.java,274,if(savedUrl.isPresent()){
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewURLResourceProvider.java,278,if(viewUrl != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ViewURLResourceProvider.java,279,throw new AmbariException("The view instance selected already has a linked URL");
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ViewURLDAO.java,46,private DaoUtils daoUtils;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ViewURLEntity.java,45,query = "SELECT viewUrl FROM ViewURLEntity viewUrl"),
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/upgrade/core/MetricsDataMigrationLauncher.java,112,LOG.error("No whitelisted metrics specified. Exiting...");
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/upgrade/core/MetricsDataMigrationLauncher.java,113,throw new Exception("List of whitelisted metrics must be provided");
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/HBaseTimelineMetricsService.java,285,if (hostnames == null || hostnames.isEmpty()) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/ambari/metrics/core/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java,102,this.timelineMetricReadHelper = new TimelineMetricReadHelper(metadataManager, true);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,102,private static boolean vipHostConfigPresent = false;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,378,throws SystemException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,385,vipHostConfigPresent = false;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,390,new String[]{"metrics_collector_vip_host"}));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,394,if (clusterMetricserverVipHost != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,395,LOG.info("Setting Metrics Collector Vip Host : " + clusterMetricserverVipHost);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,396,vipHostConfigPresent = true;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,404,new String[]{"metrics_collector_vip_port"}));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,407,clusterMetricServerVipPort = configProperties.get("METRICS_COLLECTOR");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,417,String currentCollectorHost = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,418,if (!vipHostConfigPresent) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,419,currentCollectorHost = metricsCollectorHAManager.getCollectorHost(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,421,LOG.debug("Cluster Metrics Vip Host : {}", clusterMetricserverVipHost);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,423,return (clusterMetricserverVipHost != null) ? clusterMetricserverVipHost : currentCollectorHost;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsCollectorHAClusterState.java,24,import java.util.concurrent.atomic.AtomicInteger;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsCollectorHAClusterState.java,43,private AtomicInteger collectorDownRefreshCounter;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsCollectorHAClusterState.java,44,private static int collectorDownRefreshCounterLimit = 5;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsCollectorHAClusterState.java,62,collectorDownRefreshCounter = new AtomicInteger(0);
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsCollectorHAClusterState.java,120,if (testRefreshCounter()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsCollectorHAClusterState.java,156,private boolean testRefreshCounter() {
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsCollectorHAClusterState.java,157,collectorDownRefreshCounter.incrementAndGet();
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsCollectorHAClusterState.java,158,if (collectorDownRefreshCounter.get() == collectorDownRefreshCounterLimit) {
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsCollectorHAClusterState.java,159,collectorDownRefreshCounter = new AtomicInteger(0);
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsCollectorHAClusterState.java,160,return true;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsCollectorHAClusterState.java,162,return false;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsCollectorHAManager.java,90,MetricsCollectorHAClusterState collectorHAClusterState = clusterCollectorHAState.get(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsCollectorHAManager.java,91,collectorHAClusterState.onCollectorHostDown(event.getCollectorHost());
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/MetricsCollectorHAManager.java,95,return this.clusterCollectorHAState.isEmpty();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java,89,public boolean isAllowed(String hostName, String logId, String level) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java,94,LogLevelFilter logFilter = findLogFilter(logId);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java,99,public boolean isAllowed(String jsonBlock, InputMarker inputMarker) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java,104,return isAllowed(jsonObj, inputMarker);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java,107,public boolean isAllowed(Map<String, Object> jsonObj, InputMarker inputMarker) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java,111,boolean isAllowed = applyFilter(jsonObj);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java,119,public boolean applyFilter(Map<String, Object> jsonObj) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java,129,return isAllowed(hostName, logId, level);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java,135,private synchronized LogLevelFilter findLogFilter(String logId) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java,144,defaultFilter.setDefaultLevels(logFeederProps.getIncludeDefaultLogLevels());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputManagerImpl.java,184,if (logLevelFilterHandler.isAllowed(jsonBlock, inputMarker)) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,139,if (StringUtils.isEmpty(zkConnectString)) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,140,throw new Exception("For solr output the zk_connect_string property need to be set");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,234,CloudSolrClient solrClient = getSolrClient(count);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,239,CloudSolrClient getSolrClient(int count) throws Exception, MalformedURLException {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,240,CloudSolrClient solrClient = createSolrClient();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,243,return solrClient;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,246,private CloudSolrClient createSolrClient() throws Exception {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,247,LOG.info("Using zookeepr. zkConnectString=" + zkConnectString);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,248,LOG.info("Using collection=" + collection);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,250,CloudSolrClient solrClient = new CloudSolrClient.Builder().withZkHost(zkConnectString).build();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,251,solrClient.setDefaultCollection(collection);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,255,private void pingSolr(int count, CloudSolrClient solrClient) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,257,LOG.info("Pinging Solr server. zkConnectString=" + zkConnectString);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,263,String.format("Ping to Solr server failed. It would check again. worker=%d, zkConnectString=%s, collection=%s, " +
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,269,zkConnectString, collection), t);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,3869,ActionExecutionContext actionExecContext = new ActionExecutionContext(clusterName, SET_KEYTAB,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java,1429,protected void updateLogSearchConfigs() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog270.java,1442,.forEach(configType -> configHelper.removeConfigsByType(cluster, configType));
ambari-logsearch/ambari-logsearch-config-api/src/main/java/org/apache/ambari/logsearch/config/api/LogLevelFilterMonitor.java,27,public interface LogLevelFilterMonitor {
ambari-logsearch/ambari-logsearch-config-api/src/main/java/org/apache/ambari/logsearch/config/api/LogSearchConfig.java,48,void createLogLevelFilter(String clusterName, String logId, LogLevelFilter filter) throws Exception;
ambari-logsearch/ambari-logsearch-config-api/src/main/java/org/apache/ambari/logsearch/config/api/LogSearchConfigLogFeeder.java,22,import java.util.List;
ambari-logsearch/ambari-logsearch-config-api/src/main/java/org/apache/ambari/logsearch/config/api/LogSearchConfigLogFeeder.java,25,import org.apache.ambari.logsearch.config.api.model.outputconfig.OutputSolrProperties;
ambari-logsearch/ambari-logsearch-config-api/src/main/java/org/apache/ambari/logsearch/config/api/LogSearchConfigLogFeeder.java,67,OutputSolrProperties getOutputSolrProperties(String type) throws Exception;
ambari-logsearch/ambari-logsearch-config-api/src/main/java/org/apache/ambari/logsearch/config/api/LogSearchConfigLogFeeder.java,75,void monitorOutputProperties(List<? extends OutputConfigMonitor> outputConfigMonitors) throws Exception;
ambari-logsearch/ambari-logsearch-config-api/src/main/java/org/apache/ambari/logsearch/config/api/LogSearchConfigServer.java,26,import org.apache.ambari.logsearch.config.api.model.outputconfig.OutputSolrProperties;
ambari-logsearch/ambari-logsearch-config-api/src/main/java/org/apache/ambari/logsearch/config/api/LogSearchConfigServer.java,93,void setLogLevelFilters(String clusterName, LogLevelFilterMap filters) throws Exception;
ambari-logsearch/ambari-logsearch-config-api/src/main/java/org/apache/ambari/logsearch/config/api/LogSearchConfigServer.java,101,LogLevelFilterMap getLogLevelFilters(String clusterName);
ambari-logsearch/ambari-logsearch-config-api/src/main/java/org/apache/ambari/logsearch/config/api/LogSearchConfigServer.java,110,void saveOutputSolrProperties(String type, OutputSolrProperties outputSolrProperties) throws Exception;
ambari-logsearch/ambari-logsearch-config-api/src/main/java/org/apache/ambari/logsearch/config/api/OutputConfigMonitor.java,22,import org.apache.ambari.logsearch.config.api.model.outputconfig.OutputProperties;
ambari-logsearch/ambari-logsearch-config-api/src/main/java/org/apache/ambari/logsearch/config/api/OutputConfigMonitor.java,43,void outputConfigChanged(OutputProperties outputProperties);
ambari-logsearch/ambari-logsearch-config-api/src/main/java/org/apache/ambari/logsearch/config/api/model/outputconfig/OutputProperties.java,20,package org.apache.ambari.logsearch.config.api.model.outputconfig;
ambari-logsearch/ambari-logsearch-config-api/src/main/java/org/apache/ambari/logsearch/config/api/model/outputconfig/OutputProperties.java,22,public interface OutputProperties {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/inputconfig/impl/ConditionsImpl.java,20,package org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/inputconfig/impl/FieldsImpl.java,20,package org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/inputconfig/impl/FilterAdapter.java,20,package org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/inputconfig/impl/FilterDescriptorImpl.java,20,package org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/inputconfig/impl/FilterGrokDescriptorImpl.java,20,package org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/inputconfig/impl/FilterJsonDescriptorImpl.java,20,package org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/inputconfig/impl/FilterKeyValueDescriptorImpl.java,20,package org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/inputconfig/impl/InputAdapter.java,20,package org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/inputconfig/impl/InputConfigGson.java,20,package org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/inputconfig/impl/InputConfigGson.java,25,import com.google.common.reflect.TypeToken;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/inputconfig/impl/InputConfigImpl.java,20,package org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/inputconfig/impl/InputCustomDescriptorImpl.java,19,package org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/inputconfig/impl/InputDescriptorImpl.java,20,package org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/inputconfig/impl/InputFileBaseDescriptorImpl.java,20,package org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/inputconfig/impl/InputFileDescriptorImpl.java,20,package org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/inputconfig/impl/InputS3FileDescriptorImpl.java,20,package org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/inputconfig/impl/MapAnonymizeDescriptorImpl.java,20,package org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/inputconfig/impl/MapCustomDescriptorImpl.java,19,package org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/inputconfig/impl/MapDateDescriptorImpl.java,20,package org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/inputconfig/impl/MapFieldCopyDescriptorImpl.java,20,package org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/inputconfig/impl/MapFieldDescriptorImpl.java,20,package org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/inputconfig/impl/MapFieldNameDescriptorImpl.java,20,package org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/inputconfig/impl/MapFieldValueDescriptorImpl.java,20,package org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/inputconfig/impl/PostMapValuesAdapter.java,20,package org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/inputconfig/impl/PostMapValuesImpl.java,20,package org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,22,import java.util.List;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,27,import org.apache.ambari.logsearch.config.api.OutputConfigMonitor;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,29,import org.apache.ambari.logsearch.config.api.model.outputconfig.OutputSolrProperties;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,30,import org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl.InputConfigGson;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,31,import org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl.InputConfigImpl;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,32,import org.apache.ambari.logsearch.config.zookeeper.model.outputconfig.impl.OutputSolrPropertiesImpl;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,36,import org.apache.curator.framework.recipes.cache.ChildData;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,48,import com.google.gson.JsonObject;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,138,merge(globalConfig.getAsJsonObject(), e.getAsJsonObject());
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,166,private void merge(JsonObject source, JsonObject target) {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,167,for (Map.Entry<String, JsonElement> e : source.entrySet()) {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,168,if (!target.has(e.getKey())) {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,169,target.add(e.getKey(), e.getValue());
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,171,if (e.getValue().isJsonObject()) {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,172,JsonObject valueJson = (JsonObject)e.getValue();
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,173,merge(valueJson, target.get(e.getKey()).getAsJsonObject());
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,199,public OutputSolrProperties getOutputSolrProperties(String type) throws Exception {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,200,String nodePath = String.format("/output/solr/%s", type);
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,201,ChildData currentData = outputCache.getCurrentData(nodePath);
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,202,return currentData == null ?
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,203,null :
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,204,gson.fromJson(new String(currentData.getData()), OutputSolrPropertiesImpl.class);
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,208,public void monitorOutputProperties(final List<? extends OutputConfigMonitor> outputConfigMonitors) throws Exception {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,209,TreeCacheListener listener = new TreeCacheListener() {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,210,public void childEvent(CuratorFramework client, TreeCacheEvent event) throws Exception {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,211,if (event.getType() != Type.NODE_UPDATED) {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,212,return;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,215,LOG.info("Output config updated: " + event.getData().getPath());
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,216,for (OutputConfigMonitor monitor : outputConfigMonitors) {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,217,String monitorPath = String.format("/output/%s/%s", monitor.getDestination(), monitor.getOutputType());
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,218,if (monitorPath.equals(event.getData().getPath())) {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,219,String nodeData = new String(event.getData().getData());
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,220,OutputSolrProperties outputSolrProperties = gson.fromJson(nodeData, OutputSolrPropertiesImpl.class);
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,221,monitor.outputConfigChanged(outputSolrProperties);
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigLogFeederZK.java,226,outputCache.getListenable().addListener(listener);
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java,30,import org.apache.ambari.logsearch.config.api.model.outputconfig.OutputSolrProperties;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java,32,import org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl.InputAdapter;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java,33,import org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl.InputConfigGson;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java,34,import org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl.InputConfigImpl;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java,101,public void setLogLevelFilters(String clusterName, LogLevelFilterMap filters) throws Exception {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java,102,for (Map.Entry<String, LogLevelFilter> e : filters.getFilter().entrySet()) {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java,103,String nodePath = String.format("/%s/loglevelfilter/%s", clusterName, e.getKey());
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java,104,String logLevelFilterJson = gson.toJson(e.getValue());
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java,105,String currentLogLevelFilterJson = new String(serverCache.getCurrentData(nodePath).getData());
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java,106,if (!logLevelFilterJson.equals(currentLogLevelFilterJson)) {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java,107,client.setData().forPath(nodePath, logLevelFilterJson.getBytes());
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java,108,LOG.info("Set log level filter for the log " + e.getKey() + " for cluster " + clusterName);
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java,114,public LogLevelFilterMap getLogLevelFilters(String clusterName) {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java,115,String parentPath = String.format("/%s/loglevelfilter", clusterName);
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java,116,Map<String, ChildData> logLevelFilterNodes = serverCache.getCurrentChildren(parentPath);
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java,117,TreeMap<String, LogLevelFilter> filters = new TreeMap<>();
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java,118,for (Map.Entry<String, ChildData> e : logLevelFilterNodes.entrySet()) {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java,119,LogLevelFilter logLevelFilter = gson.fromJson(new String(e.getValue().getData()), LogLevelFilter.class);
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java,120,filters.put(e.getKey(), logLevelFilter);
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java,123,LogLevelFilterMap logLevelFilters = new LogLevelFilterMap();
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java,124,logLevelFilters.setFilter(filters);
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java,125,return logLevelFilters;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java,129,public void saveOutputSolrProperties(String type, OutputSolrProperties outputSolrProperties) throws Exception {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java,130,String nodePath = String.format("/output/solr/%s", type);
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java,131,String data = gson.toJson(outputSolrProperties);
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java,132,if (outputCache.getCurrentData(nodePath) == null) {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java,133,client.create().creatingParentContainersIfNeeded().withACL(getAcls()).forPath(nodePath, data.getBytes());
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigServerZK.java,135,client.setData().forPath(nodePath, data.getBytes());
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,157,public void createLogLevelFilter(String clusterName, String logId, LogLevelFilter filter) throws Exception {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,158,String nodePath = String.format("/%s/loglevelfilter/%s", clusterName, logId);
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,159,String logLevelFilterJson = gson.toJson(filter);
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,160,try {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,161,client.create().creatingParentContainersIfNeeded().withACL(getAcls()).forPath(nodePath, logLevelFilterJson.getBytes());
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,162,LOG.info("Uploaded log level filter for the log " + logId + " for cluster " + clusterName);
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/LogSearchConfigZK.java,164,LOG.debug("Did not upload log level filters for log " + logId + " as it was already uploaded by another Log Feeder");
ambari-logsearch/ambari-logsearch-logfeeder-plugin-api/src/main/java/org/apache/ambari/logfeeder/plugin/output/Output.java,29,import org.apache.ambari.logsearch.config.api.model.outputconfig.OutputProperties;
ambari-logsearch/ambari-logsearch-logfeeder-plugin-api/src/main/java/org/apache/ambari/logfeeder/plugin/output/Output.java,51,public abstract void outputConfigChanged(OutputProperties outputProperties);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/ConfigHandler.java,36,import org.apache.ambari.logsearch.config.api.model.inputconfig.FilterGrokDescriptor;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/ConfigHandler.java,39,import org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl.FilterDescriptorImpl;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/ConfigHandler.java,40,import org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl.InputConfigImpl;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/ConfigHandler.java,41,import org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl.InputDescriptorImpl;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/ConfigHandler.java,101,logSearchConfig.monitorOutputProperties(outputManager.getOutputsToMonitor());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/LogEntryParseTester.java,37,import org.apache.ambari.logsearch.config.api.model.outputconfig.OutputProperties;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/LogEntryParseTester.java,38,import org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl.InputConfigGson;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/LogEntryParseTester.java,39,import org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl.InputConfigImpl;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/LogEntryParseTester.java,127,public void outputConfigChanged(OutputProperties outputProperties) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/LogEntryParseTester.java,153,merge(globalConfig, e.getAsJsonObject());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/LogEntryParseTester.java,160,private void merge(JsonObject source, JsonObject target) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/LogEntryParseTester.java,161,for (Map.Entry<String, JsonElement> e : source.entrySet()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/LogEntryParseTester.java,162,if (!target.has(e.getKey())) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/LogEntryParseTester.java,163,target.add(e.getKey(), e.getValue());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/LogEntryParseTester.java,165,if (e.getValue().isJsonObject()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/LogEntryParseTester.java,166,JsonObject valueJson = (JsonObject)e.getValue();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/common/LogEntryParseTester.java,167,merge(valueJson, target.get(e.getKey()).getAsJsonObject());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/conf/ApplicationConfig.java,71,return LogSearchConfigFactory.createLogSearchConfigLogFeeder(
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/conf/ApplicationConfig.java,72,Maps.fromProperties(logFeederProps.getProperties()),
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/conf/ApplicationConfig.java,73,logFeederProps.getClusterName(),
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/conf/ApplicationConfig.java,74,LogSearchConfigLogFeederZK.class,false);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputSimulate.java,29,import org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl.FilterJsonDescriptorImpl;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputSimulate.java,30,import org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl.InputDescriptorImpl;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java,39,import java.util.HashMap;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java,64,private Map<String, LogLevelFilter> filters = new HashMap<>();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/loglevelfilter/LogLevelFilterHandler.java,147,config.createLogLevelFilter(logFeederProps.getClusterName(), logId, defaultFilter);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputDevNull.java,24,import org.apache.ambari.logsearch.config.api.model.outputconfig.OutputProperties;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputDevNull.java,57,public void outputConfigChanged(OutputProperties outputProperties) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputFile.java,27,import org.apache.ambari.logsearch.config.api.model.outputconfig.OutputProperties;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputFile.java,159,public void outputConfigChanged(OutputProperties outputProperties) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,33,import org.apache.ambari.logsearch.config.api.model.outputconfig.OutputProperties;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputHDFSFile.java,249,public void outputConfigChanged(OutputProperties outputProperties) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputKafka.java,27,import org.apache.ambari.logsearch.config.api.model.outputconfig.OutputProperties;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputKafka.java,296,public void outputConfigChanged(OutputProperties outputProperties) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputKafka.java,297,throw new IllegalStateException("This method should be overriden if the Output wants to monitor the configuration");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputS3File.java,36,import org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl.InputConfigGson;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputS3File.java,37,import org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl.InputConfigImpl;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputS3File.java,38,import org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl.InputDescriptorImpl;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputS3File.java,39,import org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl.InputS3FileDescriptorImpl;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,27,import org.apache.ambari.logsearch.config.api.model.outputconfig.OutputProperties;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,28,import org.apache.ambari.logsearch.config.api.model.outputconfig.OutputSolrProperties;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,39,import org.apache.solr.common.cloud.CollectionStateWatcher;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,58,public class OutputSolr extends Output<LogFeederProps, InputMarker> implements CollectionStateWatcher {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,62,private static final int OUTPUT_PROPERTIES_WAIT_MS = 10000;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,79,private List<String> shards;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,88,private final Object propertiesLock = new Object();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,121,createSolrStateWatcher();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,127,while (true) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,128,OutputSolrProperties outputSolrProperties = getLogSearchConfig().getOutputSolrProperties(type);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,129,if (outputSolrProperties == null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,130,LOG.info("Output solr properties for type " + type + " is not available yet.");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,131,try { Thread.sleep(OUTPUT_PROPERTIES_WAIT_MS); } catch (Exception e) { LOG.warn(e); }
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,133,initPropertiesFromLogSearchConfig(outputSolrProperties, true);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,134,break;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,166,public void outputConfigChanged(OutputProperties outputProperties) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,167,initPropertiesFromLogSearchConfig((OutputSolrProperties)outputProperties, false);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,170,private void initPropertiesFromLogSearchConfig(OutputSolrProperties outputSolrProperties, boolean init) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,171,synchronized (propertiesLock) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,172,splitMode = outputSolrProperties.getSplitIntervalMins();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,173,if (!splitMode.equalsIgnoreCase("none")) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,174,splitInterval = Integer.parseInt(splitMode);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,178,if (init) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,179,collection = outputSolrProperties.getCollection();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,180,if (StringUtils.isEmpty(collection)) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,181,throw new IllegalStateException("Collection property is mandatory");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,203,private void createSolrStateWatcher() throws Exception {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,204,if ("none".equals(splitMode)) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,205,return;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,208,CloudSolrClient stateWatcherClient = createSolrClient();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,209,stateWatcherClient.registerCollectionStateWatcher(collection, this);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,210,while (true) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,211,if (shards == null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,212,LOG.info("Shards are not available yet, waiting ...");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,213,try { Thread.sleep(SHARDS_WAIT_MS); } catch (Exception e) { LOG.warn(e); }
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,215,break;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,221,public boolean onStateChanged(Set<String> liveNodes, DocCollection collectionState) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,222,synchronized (propertiesLock) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,223,if (collectionState != null) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,224,List<String> shards = new ArrayList<>(collectionState.getSlicesMap().keySet());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,225,Collections.sort(shards);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,226,this.shards = shards;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,229,return false;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,432,synchronized (propertiesLock) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,433,if (implicitRouting) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/output/OutputSolr.java,435,addRouterField();
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/common/ShipperConfigDescriptionStorage.java,36,private static final String SHIPPER_CONFIG_PACKAGE = "org.apache.ambari.logsearch.config.zookeeper.model.inputconfig.impl";
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SecurityConfig.java,186,return new LogSearchConfigStateFilter(logsearchConfigRequestMatcher(), logSearchConfigState, logSearchConfigApiConfig.isConfigApiEnabled());
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/outputconfig/impl/OutputSolrPropertiesImpl.java,20,package org.apache.ambari.logsearch.config.zookeeper.model.outputconfig.impl;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/outputconfig/impl/OutputSolrPropertiesImpl.java,22,import org.apache.ambari.logsearch.config.api.model.outputconfig.OutputSolrProperties;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/outputconfig/impl/OutputSolrPropertiesImpl.java,24,import com.google.gson.annotations.SerializedName;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/outputconfig/impl/OutputSolrPropertiesImpl.java,26,public class OutputSolrPropertiesImpl implements OutputSolrProperties {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/outputconfig/impl/OutputSolrPropertiesImpl.java,27,private final String collection;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/outputconfig/impl/OutputSolrPropertiesImpl.java,30,private final String splitIntervalMins;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/outputconfig/impl/OutputSolrPropertiesImpl.java,32,public OutputSolrPropertiesImpl(String collection, String splitIntervalMins) {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/outputconfig/impl/OutputSolrPropertiesImpl.java,33,this.collection = collection;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/outputconfig/impl/OutputSolrPropertiesImpl.java,34,this.splitIntervalMins = splitIntervalMins;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/outputconfig/impl/OutputSolrPropertiesImpl.java,38,public String getCollection() {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/outputconfig/impl/OutputSolrPropertiesImpl.java,39,return collection;
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/outputconfig/impl/OutputSolrPropertiesImpl.java,43,public String getSplitIntervalMins() {
ambari-logsearch/ambari-logsearch-config-zookeeper/src/main/java/org/apache/ambari/logsearch/config/zookeeper/model/outputconfig/impl/OutputSolrPropertiesImpl.java,44,return splitIntervalMins;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java,28,import org.springframework.context.annotation.DependsOn;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java,29,import org.springframework.data.solr.core.SolrTemplate;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java,39,public SolrTemplate serviceSolrTemplate() {
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java,40,return null;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java,45,public SolrTemplate auditSolrTemplate() {
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java,46,return null;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java,51,public SolrTemplate eventHistorySolrTemplate() {
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/conf/SolrConfig.java,52,return null;
ambari-logsearch/ambari-logsearch-config-api/src/main/java/org/apache/ambari/logsearch/config/api/model/outputconfig/OutputSolrProperties.java,20,package org.apache.ambari.logsearch.config.api.model.outputconfig;
ambari-logsearch/ambari-logsearch-config-api/src/main/java/org/apache/ambari/logsearch/config/api/model/outputconfig/OutputSolrProperties.java,22,public interface OutputSolrProperties extends OutputProperties {
ambari-logsearch/ambari-logsearch-config-api/src/main/java/org/apache/ambari/logsearch/config/api/model/outputconfig/OutputSolrProperties.java,23,String getCollection();
ambari-logsearch/ambari-logsearch-config-api/src/main/java/org/apache/ambari/logsearch/config/api/model/outputconfig/OutputSolrProperties.java,25,String getSplitIntervalMins();
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/configurer/SolrCollectionConfigurer.java,31,import org.apache.solr.client.solrj.impl.Krb5HttpClientBuilder;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/configurer/SolrCollectionConfigurer.java,59,public SolrCollectionConfigurer(SolrDaoBase solrDaoBase, boolean hasEnumConfig) {
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/configurer/SolrCollectionConfigurer.java,89,CloudSolrClient cloudSolrClient = (CloudSolrClient) solrDaoBase.getSolrTemplate().getSolrClient();
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/configurer/SolrCollectionConfigurer.java,117,return new SolrTemplate(createClient(
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/configurer/SolrCollectionConfigurer.java,120,solrPropsConfig.getCollection()));
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/configurer/SolrCollectionConfigurer.java,222,CreateCollectionHandler handler = new CreateCollectionHandler(solrDaoBase.getLogSearchConfig(), allCollectionList);
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/dao/AuditSolrDao.java,72,new SolrCollectionConfigurer(this, true).start();
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/dao/EventHistorySolrDao.java,81,new SolrCollectionConfigurer(this, false).start();
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/dao/ServiceLogsSolrDao.java,68,new SolrCollectionConfigurer(this, true).start();
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/handler/CreateCollectionHandler.java,22,import org.apache.ambari.logsearch.config.api.LogSearchConfigServer;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/handler/CreateCollectionHandler.java,23,import org.apache.ambari.logsearch.config.api.model.outputconfig.OutputSolrProperties;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/handler/CreateCollectionHandler.java,24,import org.apache.ambari.logsearch.config.zookeeper.model.outputconfig.impl.OutputSolrPropertiesImpl;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/handler/CreateCollectionHandler.java,57,private final LogSearchConfigServer logSearchConfig;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/handler/CreateCollectionHandler.java,60,public CreateCollectionHandler(LogSearchConfigServer logSearchConfig, List<String> allCollectionList) {
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/handler/CreateCollectionHandler.java,61,this.logSearchConfig = logSearchConfig;
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/handler/CreateCollectionHandler.java,67,if (solrPropsConfig.getLogType() != null) {
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/handler/CreateCollectionHandler.java,68,OutputSolrProperties outputSolrProperties = new OutputSolrPropertiesImpl(solrPropsConfig.getCollection(),
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/handler/CreateCollectionHandler.java,69,solrPropsConfig.getSplitInterval());
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/handler/CreateCollectionHandler.java,70,logSearchConfig.saveOutputSolrProperties(solrPropsConfig.getLogType(), outputSolrProperties);
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/manager/ShipperConfigManager.java,114,return new LSServerLogLevelFilterMap(logSearchConfigConfigurer.getConfig().getLogLevelFilters(clusterName));
ambari-logsearch/ambari-logsearch-server/src/main/java/org/apache/ambari/logsearch/manager/ShipperConfigManager.java,119,logSearchConfigConfigurer.getConfig().setLogLevelFilters(clusterName, request.convertToApi());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,32,import org.apache.ambari.logfeeder.util.LogFeederUtil;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,94,logFiles = getActualInputLogFiles();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,95,Map<String, List<File>> foldersMap = FileUtil.getFoldersForFiles(logFiles);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,96,setFolderMap(foldersMap);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,97,if (!ArrayUtils.isEmpty(logFiles) && logFiles[0].isFile()) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,98,if (tail && logFiles.length > 1) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,99,LOG.warn("Found multiple files (" + logFiles.length + ") for the file filter " + filePath +
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,102,LOG.info("File filter " + filePath + " expanded to " + logFiles[0].getAbsolutePath());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,103,isReady = true;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,105,LOG.debug(logPath + " file doesn't exist. Ignoring for now");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,153,if (multiFolder) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,195,setClosed(true);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,196,logPath = getInputDescriptor().getPath();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,204,if (StringUtils.isEmpty(logPath)) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,205,LOG.error("path is empty for file input. " + getShortDescription());
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,206,return;
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,209,setFilePath(logPath);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,211,if (getFilePath() != null && getFilePath().contains("/")) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,212,int lastIndexOfSlash = getFilePath().lastIndexOf("/");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,213,String folderBeforeLogName = getFilePath().substring(0, lastIndexOfSlash);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,214,if (folderBeforeLogName.contains("*")) {
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,215,LOG.info("Found regex in folder path ('" + getFilePath() + "'), will check against multiple folders.");
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,216,setMultiFolder(true);
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,219,boolean isFileReady = isReady();
ambari-logsearch/ambari-logsearch-logfeeder/src/main/java/org/apache/ambari/logfeeder/input/InputFile.java,220,LOG.info("File to monitor " + logPath + ", tail=" + tail + ", isReady=" + isFileReady);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,5775,Map<String, ServiceInfo> serviceInfos = ambariMetaInfo.getServices(stackId.getStackName(), stackId.getStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,5776,for (ServiceInfo serviceInfoInstance : serviceInfos.values()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,5777,if (serviceInfoInstance.getServiceType() != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,5779,serviceInfoInstance.getName());
