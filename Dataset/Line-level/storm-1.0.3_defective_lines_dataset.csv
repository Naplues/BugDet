File,Line_number,SRC
storm-core/src/jvm/org/apache/storm/localizer/Localizer.java,540,Utils.unpack(new File(downloadFile), new File(localFileWithVersion));
storm-core/src/jvm/org/apache/storm/utils/Utils.java,861,throws IOException {
storm-core/src/jvm/org/apache/storm/utils/Utils.java,862,JarFile jar = new JarFile(jarFile);
storm-core/src/jvm/org/apache/storm/utils/Utils.java,863,try {
storm-core/src/jvm/org/apache/storm/utils/Utils.java,864,Enumeration<JarEntry> entries = jar.entries();
storm-core/src/jvm/org/apache/storm/utils/Utils.java,865,while (entries.hasMoreElements()) {
storm-core/src/jvm/org/apache/storm/utils/Utils.java,866,final JarEntry entry = entries.nextElement();
storm-core/src/jvm/org/apache/storm/utils/Utils.java,867,if (!entry.isDirectory()) {
storm-core/src/jvm/org/apache/storm/utils/Utils.java,868,InputStream in = jar.getInputStream(entry);
storm-core/src/jvm/org/apache/storm/utils/Utils.java,869,try {
storm-core/src/jvm/org/apache/storm/utils/Utils.java,870,File file = new File(toDir, entry.getName());
storm-core/src/jvm/org/apache/storm/utils/Utils.java,871,ensureDirectory(file.getParentFile());
storm-core/src/jvm/org/apache/storm/utils/Utils.java,872,OutputStream out = new FileOutputStream(file);
storm-core/src/jvm/org/apache/storm/utils/Utils.java,873,try {
storm-core/src/jvm/org/apache/storm/utils/Utils.java,874,copyBytes(in, out, 8192);
storm-core/src/jvm/org/apache/storm/utils/Utils.java,876,out.close();
storm-core/src/jvm/org/apache/storm/utils/Utils.java,879,in.close();
storm-core/src/jvm/org/apache/storm/utils/Utils.java,884,jar.close();
storm-core/src/jvm/org/apache/storm/utils/Utils.java,896,throws IOException {
storm-core/src/jvm/org/apache/storm/utils/Utils.java,897,PrintStream ps = out instanceof PrintStream ? (PrintStream)out : null;
storm-core/src/jvm/org/apache/storm/utils/Utils.java,898,byte buf[] = new byte[buffSize];
storm-core/src/jvm/org/apache/storm/utils/Utils.java,899,int bytesRead = in.read(buf);
storm-core/src/jvm/org/apache/storm/utils/Utils.java,900,while (bytesRead >= 0) {
storm-core/src/jvm/org/apache/storm/utils/Utils.java,901,out.write(buf, 0, bytesRead);
storm-core/src/jvm/org/apache/storm/utils/Utils.java,902,if ((ps != null) && ps.checkError()) {
storm-core/src/jvm/org/apache/storm/utils/Utils.java,903,throw new IOException("Unable to write to output stream.");
storm-core/src/jvm/org/apache/storm/utils/Utils.java,905,bytesRead = in.read(buf);
storm-core/src/jvm/org/apache/storm/utils/Utils.java,931,public static void unTar(File inFile, File untarDir) throws IOException {
storm-core/src/jvm/org/apache/storm/utils/Utils.java,932,if (!untarDir.mkdirs()) {
storm-core/src/jvm/org/apache/storm/utils/Utils.java,933,if (!untarDir.isDirectory()) {
storm-core/src/jvm/org/apache/storm/utils/Utils.java,934,throw new IOException("Mkdirs failed to create " + untarDir);
storm-core/src/jvm/org/apache/storm/utils/Utils.java,939,if (isOnWindows()) {
storm-core/src/jvm/org/apache/storm/utils/Utils.java,942,unTarUsingJava(inFile, untarDir, gzipped);
storm-core/src/jvm/org/apache/storm/utils/Utils.java,979,boolean gzipped) throws IOException {
storm-core/src/jvm/org/apache/storm/utils/Utils.java,990,unpackEntries(tis, entry, untarDir);
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1002,TarArchiveEntry entry, File outputDir) throws IOException {
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1004,File subDir = new File(outputDir, entry.getName());
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1005,if (!subDir.mkdirs() && !subDir.isDirectory()) {
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1006,throw new IOException("Mkdirs failed to create tar internal dir "
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1007,+ outputDir);
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1010,unpackEntries(tis, e, subDir);
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1012,return;
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1014,File outputFile = new File(outputDir, entry.getName());
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1015,if (!outputFile.getParentFile().exists()) {
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1016,if (!outputFile.getParentFile().mkdirs()) {
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1017,throw new IOException("Mkdirs failed to create tar internal dir "
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1018,+ outputDir);
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1021,int count;
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1022,byte data[] = new byte[2048];
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1023,BufferedOutputStream outputStream = new BufferedOutputStream(
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1024,new FileOutputStream(outputFile));
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1026,while ((count = tis.read(data)) != -1) {
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1027,outputStream.write(data, 0, count);
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1029,outputStream.flush();
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1030,outputStream.close();
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1044,public static void unpack(File localrsrc, File dst) throws IOException {
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1046,if (lowerDst.endsWith(".jar")) {
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1051,lowerDst.endsWith(".tgz") ||
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1052,lowerDst.endsWith(".tar")) {
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1053,unTar(localrsrc, dst);
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1348,public static void unZip(File inFile, File unzipDir) throws IOException {
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1349,Enumeration<? extends ZipEntry> entries;
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1350,ZipFile zipFile = new ZipFile(inFile);
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1352,try {
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1353,entries = zipFile.entries();
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1354,while (entries.hasMoreElements()) {
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1355,ZipEntry entry = entries.nextElement();
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1356,if (!entry.isDirectory()) {
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1357,InputStream in = zipFile.getInputStream(entry);
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1358,try {
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1359,File file = new File(unzipDir, entry.getName());
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1360,if (!file.getParentFile().mkdirs()) {
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1361,if (!file.getParentFile().isDirectory()) {
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1362,throw new IOException("Mkdirs failed to create " +
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1363,file.getParentFile().toString());
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1366,OutputStream out = new FileOutputStream(file);
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1367,try {
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1368,byte[] buffer = new byte[8192];
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1369,int i;
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1370,while ((i = in.read(buffer)) != -1) {
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1371,out.write(buffer, 0, i);
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1374,out.close();
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1377,in.close();
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1382,zipFile.close();
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1856,Enumeration<JarEntry> jarEnums = jarFile.entries();
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1857,while (jarEnums.hasMoreElements()) {
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1858,JarEntry entry = jarEnums.nextElement();
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1859,if (!entry.isDirectory() && entry.getName().startsWith(dir)) {
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1860,File aFile = new File(destdir, entry.getName());
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1861,aFile.getParentFile().mkdirs();
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1862,try (FileOutputStream out = new FileOutputStream(aFile);
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1863,InputStream in = jarFile.getInputStream(entry)) {
storm-core/src/jvm/org/apache/storm/utils/Utils.java,1864,IOUtils.copy(in, out);
storm-core/src/jvm/org/apache/storm/daemon/supervisor/Slot.java,641,container = containerLauncher.recoverContainer(port, currentAssignment, localState);
storm-core/src/jvm/org/apache/storm/metric/FileBasedEventLogger.java,62,ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
storm-core/src/jvm/org/apache/storm/metric/FileBasedEventLogger.java,63,Runnable task = new Runnable() {
storm-core/src/jvm/org/apache/storm/metric/FileBasedEventLogger.java,78,scheduler.scheduleAtFixedRate(task, FLUSH_INTERVAL_MILLIS, FLUSH_INTERVAL_MILLIS, TimeUnit.MILLISECONDS);
storm-core/src/jvm/org/apache/storm/daemon/supervisor/Supervisor.java,236,private void launchDaemon() {
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,27,import org.apache.storm.generated.KeyNotFoundException;
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,33,import org.apache.hadoop.conf.Configuration;
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,34,import org.apache.hadoop.fs.Path;
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,35,import org.apache.hadoop.security.UserGroupInformation;
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,39,import javax.security.auth.Subject;
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,40,import java.io.ByteArrayOutputStream;
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,41,import java.io.FileNotFoundException;
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,42,import java.io.IOException;
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,43,import java.io.InputStream;
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,44,import java.security.AccessController;
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,45,import java.security.PrivilegedAction;
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,46,import java.util.Iterator;
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,47,import java.util.Map;
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,76,private BlobStoreAclHandler _aclHandler;
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,77,private HdfsBlobStoreImpl _hbs;
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,78,private Subject _localSubject;
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,79,private Map conf;
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,109,return _localSubject;
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,140,UserGroupInformation.loginUserFromKeytab(principal, keyTab);
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,157,_hbs = new HdfsBlobStoreImpl(baseDir, conf, hadoopConf);
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,159,_hbs = new HdfsBlobStoreImpl(baseDir, conf);
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,164,_localSubject = getHadoopUser();
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,165,_aclHandler = new BlobStoreAclHandler(conf);
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,176,_aclHandler.normalizeSettableBlobMeta(key, meta, who, READ | WRITE | ADMIN);
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,178,_aclHandler.hasPermissions(meta.get_acl(), READ | WRITE | ADMIN, who, key);
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,179,if (_hbs.exists(DATA_PREFIX+key)) {
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,184,BlobStoreFile metaFile = _hbs.write(META_PREFIX + key, true);
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,190,BlobStoreFile dataFile = _hbs.write(DATA_PREFIX + key, true);
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,212,_aclHandler.hasPermissions(meta.get_acl(), WRITE, who, key);
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,214,BlobStoreFile dataFile = _hbs.write(DATA_PREFIX + key, false);
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,225,BlobStoreFile pf = _hbs.read(META_PREFIX + key);
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,259,_aclHandler.validateUserCanReadMeta(meta.get_acl(), who, key);
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,263,BlobStoreFile pf = _hbs.read(DATA_PREFIX + key);
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,279,_aclHandler.normalizeSettableBlobMeta(key,  meta, who, ADMIN);
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,282,_aclHandler.hasPermissions(orig.get_acl(), ADMIN, who, key);
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,293,_aclHandler.hasPermissions(meta.get_acl(), WRITE, who, key);
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,295,_hbs.deleteKey(DATA_PREFIX + key);
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,296,_hbs.deleteKey(META_PREFIX + key);
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,308,_aclHandler.hasPermissions(meta.get_acl(), READ, who, key);
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,310,return new BlobStoreFileInputStream(_hbs.read(DATA_PREFIX + key));
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,319,return new KeyTranslationIterator(_hbs.listKeys(), DATA_PREFIX);
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,335,_aclHandler.hasAnyPermissions(meta.get_acl(), READ | WRITE | ADMIN, who, key);
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,337,return _hbs.getBlobReplication(DATA_PREFIX + key);
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,349,_aclHandler.hasAnyPermissions(meta.get_acl(), WRITE | ADMIN, who, key);
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,352,return _hbs.updateBlobReplication(DATA_PREFIX + key, replication);
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,362,BlobStoreFile hdfsFile = _hbs.write(META_PREFIX + key, false);
external/storm-hdfs/src/main/java/org/apache/storm/hdfs/blobstore/HdfsBlobStore.java,382,_hbs.fullCleanup(age);
storm-core/src/jvm/org/apache/storm/blobstore/LocalFsBlobStore.java,85,overrideBase = (String)conf.get(Config.BLOBSTORE_DIR);
storm-core/src/jvm/org/apache/storm/blobstore/LocalFsBlobStore.java,86,if (overrideBase == null) {
storm-core/src/jvm/org/apache/storm/blobstore/LocalFsBlobStore.java,87,overrideBase = (String) conf.get(Config.STORM_LOCAL_DIR);
storm-core/src/jvm/org/apache/storm/utils/ConfigUtils.java,210,String ret = String.valueOf(conf.get(Config.STORM_LOCAL_DIR)) + FILE_SEPARATOR + "nimbus";
storm-core/src/jvm/org/apache/storm/drpc/DRPCSpout.java,173,boolean gotRequest = false;
storm-core/src/jvm/org/apache/storm/drpc/DRPCSpout.java,196,gotRequest = true;
storm-core/src/jvm/org/apache/storm/drpc/DRPCSpout.java,221,gotRequest = true;
storm-core/src/jvm/org/apache/storm/drpc/DRPCSpout.java,231,if(!gotRequest) {
storm-core/src/jvm/org/apache/storm/drpc/DRPCSpout.java,232,Utils.sleep(1);
storm-core/src/jvm/org/apache/storm/cluster/StormClusterStateImpl.java,658,stateStorage.delete_node(path + ClusterUtils.ZK_SEPERATOR + childrens.remove(0));
storm-core/src/jvm/org/apache/storm/daemon/supervisor/timer/UpdateBlobs.java,68,String stormRoot = ConfigUtils.supervisorStormDistRoot(conf, stormId);
storm-core/src/jvm/org/apache/storm/daemon/supervisor/timer/UpdateBlobs.java,69,LOG.debug("Checking Blob updates for storm topology id {} With target_dir: {}", stormId, stormRoot);
storm-core/src/jvm/org/apache/storm/blobstore/BlobStore.java,64,private static final Pattern KEY_PATTERN = Pattern.compile("^[\\w \\t\\.:_-]+$");
storm-core/src/jvm/org/apache/storm/transactional/state/TransactionalState.java,86,protected static String forPath(PathAndBytesable<String> builder,
storm-core/src/jvm/org/apache/storm/transactional/state/TransactionalState.java,90,: builder.forPath(path, data);
storm-core/src/jvm/org/apache/storm/localizer/AsyncLocalizer.java,191,String targetDir = tmproot + Utils.FILE_PATH_SEPARATOR + ConfigUtils.RESOURCES_SUBDIR;
storm-core/src/jvm/org/apache/storm/localizer/AsyncLocalizer.java,197,LOG.info("Copying resources at {} to {} ", url.toString(), targetDir);
storm-core/src/jvm/org/apache/storm/localizer/AsyncLocalizer.java,202,_fsOps.copyDirectory(new File(url.getFile()), new File(targetDir));
storm-core/src/jvm/org/apache/storm/blobstore/LocalFsBlobStore.java,132,checkForBlobOrDownload(key);
storm-core/src/jvm/org/apache/storm/blobstore/LocalFsBlobStore.java,133,SettableBlobMeta meta = getStoredBlobMeta(key);
storm-core/src/jvm/org/apache/storm/blobstore/LocalFsBlobStore.java,134,_aclHandler.hasPermissions(meta.get_acl(), WRITE, who, key);
storm-core/src/jvm/org/apache/storm/blobstore/LocalFsBlobStore.java,224,_aclHandler.hasPermissions(meta.get_acl(), WRITE, who, key);
storm-core/src/jvm/org/apache/storm/blobstore/LocalFsBlobStore.java,226,fbs.deleteKey(DATA_PREFIX+key);
storm-core/src/jvm/org/apache/storm/blobstore/LocalFsBlobStore.java,227,fbs.deleteKey(META_PREFIX+key);
storm-core/src/jvm/org/apache/storm/blobstore/LocalFsBlobStore.java,229,throw new RuntimeException(e);
external/storm-cassandra/src/main/java/org/apache/storm/cassandra/bolt/BaseCassandraBolt.java,53,public abstract class BaseCassandraBolt<T> extends BaseRichBolt {
external/storm-cassandra/src/main/java/org/apache/storm/cassandra/bolt/BaseCassandraBolt.java,142,if (TupleUtils.isTick(input)) {
external/storm-cassandra/src/main/java/org/apache/storm/cassandra/bolt/BaseCassandraBolt.java,143,onTickTuple();
external/storm-cassandra/src/main/java/org/apache/storm/cassandra/bolt/BaseCassandraBolt.java,144,outputCollector.ack(input);
external/storm-cassandra/src/main/java/org/apache/storm/cassandra/bolt/BaseCassandraBolt.java,146,process(input);
external/storm-cassandra/src/main/java/org/apache/storm/cassandra/bolt/BaseCassandraBolt.java,155,abstract protected void process(Tuple input);
external/storm-cassandra/src/main/java/org/apache/storm/cassandra/bolt/BaseCassandraBolt.java,160,abstract protected void onTickTuple();
external/storm-cassandra/src/main/java/org/apache/storm/cassandra/bolt/BatchCassandraWriterBolt.java,109,protected void onTickTuple() {
external/storm-cassandra/src/main/java/org/apache/storm/cassandra/bolt/CassandraWriterBolt.java,66,protected void onTickTuple() {
external/storm-elasticsearch/src/main/java/org/apache/storm/elasticsearch/bolt/AbstractEsBolt.java,37,public abstract class AbstractEsBolt extends BaseRichBolt {
external/storm-elasticsearch/src/main/java/org/apache/storm/elasticsearch/bolt/AbstractEsBolt.java,66,public abstract void execute(Tuple tuple);
external/storm-elasticsearch/src/main/java/org/apache/storm/elasticsearch/bolt/EsIndexBolt.java,57,public void execute(Tuple tuple) {
external/storm-elasticsearch/src/main/java/org/apache/storm/elasticsearch/bolt/EsLookupBolt.java,54,public void execute(Tuple tuple) {
external/storm-elasticsearch/src/main/java/org/apache/storm/elasticsearch/bolt/EsPercolateBolt.java,64,public void execute(Tuple tuple) {
external/storm-eventhubs/src/main/java/org/apache/storm/eventhubs/bolt/EventHubBolt.java,32,import org.apache.storm.topology.base.BaseRichBolt;
external/storm-eventhubs/src/main/java/org/apache/storm/eventhubs/bolt/EventHubBolt.java,38,public class EventHubBolt extends BaseRichBolt {
external/storm-eventhubs/src/main/java/org/apache/storm/eventhubs/bolt/EventHubBolt.java,85,public void execute(Tuple tuple) {
external/storm-jdbc/src/main/java/org/apache/storm/jdbc/bolt/AbstractJdbcBolt.java,32,public abstract class AbstractJdbcBolt extends BaseRichBolt {
external/storm-jdbc/src/main/java/org/apache/storm/jdbc/bolt/JdbcInsertBolt.java,84,public void execute(Tuple tuple) {
external/storm-jdbc/src/main/java/org/apache/storm/jdbc/bolt/JdbcLookupBolt.java,58,public void execute(Tuple tuple) {
external/storm-jms/core/src/main/java/org/apache/storm/jms/bolt/JmsBolt.java,63,public class JmsBolt extends BaseRichBolt {
external/storm-jms/core/src/main/java/org/apache/storm/jms/bolt/JmsBolt.java,150,public void execute(Tuple input) {
external/storm-kafka/src/jvm/org/apache/storm/kafka/bolt/KafkaBolt.java,55,public class KafkaBolt<K, V> extends BaseRichBolt {
external/storm-kafka/src/jvm/org/apache/storm/kafka/bolt/KafkaBolt.java,113,public void execute(final Tuple input) {
external/storm-kafka/src/jvm/org/apache/storm/kafka/bolt/KafkaBolt.java,114,if (TupleUtils.isTick(input)) {
external/storm-kafka/src/jvm/org/apache/storm/kafka/bolt/KafkaBolt.java,115,collector.ack(input);
external/storm-kafka/src/jvm/org/apache/storm/kafka/bolt/KafkaBolt.java,116,return; // Do not try to send ticks to Kafka
external/storm-mqtt/core/src/main/java/org/apache/storm/mqtt/bolt/MqttBolt.java,39,public class MqttBolt extends BaseRichBolt {
external/storm-mqtt/core/src/main/java/org/apache/storm/mqtt/bolt/MqttBolt.java,87,public void execute(Tuple input) {
external/storm-mqtt/core/src/main/java/org/apache/storm/mqtt/bolt/MqttBolt.java,89,if(!TupleUtils.isTick(input)){
external/storm-mqtt/core/src/main/java/org/apache/storm/mqtt/bolt/MqttBolt.java,90,MqttMessage message = this.mapper.toMessage(input);
external/storm-mqtt/core/src/main/java/org/apache/storm/mqtt/bolt/MqttBolt.java,91,try {
external/storm-mqtt/core/src/main/java/org/apache/storm/mqtt/bolt/MqttBolt.java,92,this.publisher.publish(message);
external/storm-mqtt/core/src/main/java/org/apache/storm/mqtt/bolt/MqttBolt.java,93,this.collector.ack(input);
external/storm-mqtt/core/src/main/java/org/apache/storm/mqtt/bolt/MqttBolt.java,95,LOG.warn("Error publishing MQTT message. Failing tuple.", e);
external/storm-mqtt/core/src/main/java/org/apache/storm/mqtt/bolt/MqttBolt.java,97,collector.reportError(e);
external/storm-mqtt/core/src/main/java/org/apache/storm/mqtt/bolt/MqttBolt.java,98,collector.fail(input);
external/storm-redis/src/main/java/org/apache/storm/redis/bolt/AbstractRedisBolt.java,51,public abstract class AbstractRedisBolt extends BaseRichBolt {
external/storm-redis/src/main/java/org/apache/storm/redis/bolt/RedisLookupBolt.java,75,public void execute(Tuple input) {
external/storm-redis/src/main/java/org/apache/storm/redis/bolt/RedisStoreBolt.java,70,public void execute(Tuple input) {
external/storm-solr/src/main/java/org/apache/storm/solr/bolt/SolrUpdateBolt.java,43,public class SolrUpdateBolt extends BaseRichBolt {
external/storm-solr/src/main/java/org/apache/storm/solr/bolt/SolrUpdateBolt.java,88,public void execute(Tuple tuple) {
external/storm-solr/src/main/java/org/apache/storm/solr/bolt/SolrUpdateBolt.java,90,if (!TupleUtils.isTick(tuple)) {    // Don't add tick tuples to the SolrRequest
external/storm-solr/src/main/java/org/apache/storm/solr/bolt/SolrUpdateBolt.java,91,SolrRequest request = solrMapper.toSolrRequest(tuple);
external/storm-solr/src/main/java/org/apache/storm/solr/bolt/SolrUpdateBolt.java,92,solrClient.request(request, solrMapper.getCollection());
external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpout.java,285,final List<Object> tuple = tuplesBuilder.buildTuple(record);
external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpout.java,286,kafkaSpoutStreams.emit(collector, tuple, msgId);
external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpout.java,287,emitted.add(msgId);
external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpout.java,288,numUncommittedOffsets++;
external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpout.java,289,if (retryService.isReady(msgId)) { // has failed. Is it ready for retry ?
external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpout.java,290,retryService.remove(msgId);  // re-emitted hence remove from failed
external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpout.java,292,LOG.trace("Emitted tuple [{}] for record [{}]", tuple, record);
external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpout.java,337,emitted.remove(msgId);
external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpout.java,355,kafkaConsumer = new KafkaConsumer<>(kafkaSpoutConfig.getKafkaProps(),
external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpout.java,356,kafkaSpoutConfig.getKeyDeserializer(), kafkaSpoutConfig.getValueDeserializer());
external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpoutConfig.java,108,private Deserializer<K> keyDeserializer;
external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpoutConfig.java,109,private Deserializer<V> valueDeserializer;
external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpoutConfig.java,167,public Builder<K,V> setKeyDeserializer(Deserializer<K> keyDeserializer) {
external/storm-kafka-client/src/main/java/org/apache/storm/kafka/spout/KafkaSpoutConfig.java,175,public Builder<K,V> setValueDeserializer(Deserializer<V> valueDeserializer) {
storm-core/src/jvm/org/apache/storm/blobstore/BlobSynchronizer.java,88,LOG.debug("Detected deletion for the key {} - deleting the blob instead", key);
storm-core/src/jvm/org/apache/storm/blobstore/BlobSynchronizer.java,90,blobStore.deleteBlob(key, BlobStoreUtils.getNimbusSubject());
