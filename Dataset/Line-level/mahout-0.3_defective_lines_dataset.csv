File,Line_number,SRC
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,52,int i = slice++;
math/src/main/java/org/apache/mahout/math/SparseRowMatrix.java,50,true,
math/src/main/java/org/apache/mahout/math/SparseRowMatrix.java,51,randomAccess);
examples/src/main/java/org/apache/mahout/cf/taste/example/bookcrossing/BookCrossingBooleanRecommender.java,58,return recommender.recommend(userID, howMany, rescorer);
examples/src/main/java/org/apache/mahout/cf/taste/example/bookcrossing/BookCrossingRecommender.java,59,return recommender.recommend(userID, howMany, rescorer);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,27,import org.apache.hadoop.mapred.FileInputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,28,import org.apache.hadoop.mapred.FileOutputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,29,import org.apache.hadoop.mapred.JobConf;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,30,import org.apache.hadoop.mapred.MapReduceBase;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,31,import org.apache.hadoop.mapred.Mapper;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,32,import org.apache.hadoop.mapred.OutputCollector;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,33,import org.apache.hadoop.mapred.Reducer;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,34,import org.apache.hadoop.mapred.Reporter;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,35,import org.apache.hadoop.mapred.SequenceFileInputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,36,import org.apache.hadoop.mapred.SequenceFileOutputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,48,import java.util.Iterator;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,66,matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,67,outputVectorPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,68,TimesSquaredMapper.class,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,69,VectorSummingReducer.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,77,outDim,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,78,matrixInputPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,79,outputVectorPath,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,80,TimesMapper.class,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,81,VectorSummingReducer.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,107,SequenceFile.Writer inputVectorPathWriter = new SequenceFile.Writer(fs,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,108,conf, inputVectorPath, NullWritable.class, VectorWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,110,inputVectorPathWriter.append(NullWritable.get(), inputVW);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,113,DistributedCache.setCacheFiles(new URI[] {ivpURI}, conf);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,119,FileInputFormat.addInputPath(conf, matrixInputPath);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,120,conf.setInputFormat(SequenceFileInputFormat.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,121,FileOutputFormat.setOutputPath(conf, new Path(outputVectorPathBase, OUTPUT_VECTOR_FILENAME));
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,122,conf.setMapperClass(mapClass);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,123,conf.setMapOutputKeyClass(NullWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,124,conf.setMapOutputValueClass(VectorWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,125,conf.setReducerClass(redClass);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,126,conf.setCombinerClass(redClass);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,127,conf.setOutputFormat(SequenceFileOutputFormat.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,128,conf.setOutputKeyClass(NullWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,129,conf.setOutputValueClass(VectorWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,130,return conf;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,136,Path outputFile = new Path(outputPath, "part-00000");
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,147,public static class TimesSquaredMapper<T extends WritableComparable> extends MapReduceBase
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,148,implements Mapper<T,VectorWritable, NullWritable,VectorWritable> {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,155,public void configure(JobConf conf) {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,179,: new DenseVector(outDim);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,186,public void map(T rowNum,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,187,VectorWritable v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,188,OutputCollector<NullWritable,VectorWritable> out,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,189,Reporter rep) throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,204,public void close() throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,212,public void map(IntWritable rowNum,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,213,VectorWritable v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,214,OutputCollector<NullWritable,VectorWritable> out,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,215,Reporter rep) {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,224,public static class VectorSummingReducer extends MapReduceBase
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,225,implements Reducer<NullWritable,VectorWritable,NullWritable,VectorWritable> {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,230,public void configure(JobConf conf) {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,238,public void reduce(NullWritable n,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,239,Iterator<VectorWritable> vectors,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,240,OutputCollector<NullWritable,VectorWritable> out,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,241,Reporter reporter) throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,243,VectorWritable v = vectors.next();
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,248,out.collect(NullWritable.get(), new VectorWritable(outputVector));
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,4,import org.apache.hadoop.fs.FileSystem;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,7,import org.apache.hadoop.mapred.FileInputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,8,import org.apache.hadoop.mapred.FileOutputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,9,import org.apache.hadoop.mapred.JobConf;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,10,import org.apache.hadoop.mapred.MapReduceBase;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,11,import org.apache.hadoop.mapred.Mapper;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,12,import org.apache.hadoop.mapred.OutputCollector;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,13,import org.apache.hadoop.mapred.Reducer;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,14,import org.apache.hadoop.mapred.Reporter;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,15,import org.apache.hadoop.mapred.SequenceFileInputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,16,import org.apache.hadoop.mapred.SequenceFileOutputFormat;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,19,import org.apache.mahout.math.RandomAccessSparseVector;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,20,import org.apache.mahout.math.SequentialAccessSparseVector;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,21,import org.apache.mahout.math.Vector;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,25,import java.util.Iterator;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,32,public static final String NUM_ROWS_KEY = "SparseRowMatrix.numRows";
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,64,conf.setJobName("TransposeJob: " + matrixInputPath + " transpose -> " + matrixOutputPath);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,66,matrixInputPath = fs.makeQualified(matrixInputPath);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,67,matrixOutputPath = fs.makeQualified(matrixOutputPath);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,68,conf.setInt(NUM_ROWS_KEY, numInputRows);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,70,FileInputFormat.addInputPath(conf, matrixInputPath);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,71,conf.setInputFormat(SequenceFileInputFormat.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,72,FileOutputFormat.setOutputPath(conf, matrixOutputPath);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,73,conf.setMapperClass(TransposeMapper.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,75,conf.setMapOutputKeyClass(IntWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,77,conf.setOutputFormat(SequenceFileOutputFormat.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,78,conf.setOutputKeyClass(IntWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,79,conf.setOutputValueClass(VectorWritable.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,80,return conf;
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,83,public static class TransposeMapper extends MapReduceBase
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,93,int row = r.get();
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,98,r.set(e.index());
math/src/main/java/org/apache/mahout/math/SparseMatrix.java,105,result[COL] = Math.max(result[COL], vectorEntry
math/src/main/java/org/apache/mahout/math/SparseMatrix.java,106,.getNumNondefaultElements());
math/src/main/java/org/apache/mahout/math/SparseMatrix.java,69,SparseMatrix clone = (SparseMatrix) super.clone();
core/src/main/java/org/apache/mahout/math/VectorWritable.java,20,import org.apache.hadoop.conf.Configured;
core/src/main/java/org/apache/mahout/math/VectorWritable.java,21,import org.apache.hadoop.io.Writable;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelCountingMapper.java,45,for (String item : items) {
core/src/main/java/org/apache/mahout/common/TimingStatistics.java,92,private final long startTime = System.nanoTime();
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java,296,for (int i = 0; i < length - 1; i++) {
core/src/main/java/org/apache/mahout/cf/taste/impl/common/RefreshHelper.java,22,import java.util.HashSet;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,24,import java.util.HashSet;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPGrowth.java,26,import java.util.HashSet;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FrequentPatternMaxHeap.java,20,import java.util.HashSet;
examples/src/main/java/org/apache/mahout/fpm/pfpgrowth/dataset/KeyBasedStringTupleCombiner.java,21,import java.util.HashSet;
examples/src/main/java/org/apache/mahout/fpm/pfpgrowth/dataset/KeyBasedStringTupleReducer.java,21,import java.util.HashSet;
core/src/main/java/org/apache/mahout/clustering/kmeans/RandomSeedGenerator.java,102,int indexToRemove = random.nextInt(currentSize); // evict one chosen randomly
core/src/main/java/org/apache/mahout/clustering/kmeans/RandomSeedGenerator.java,103,chosenTexts.remove(indexToRemove);
core/src/main/java/org/apache/mahout/clustering/kmeans/RandomSeedGenerator.java,104,chosenClusters.remove(indexToRemove);
core/src/main/java/org/apache/mahout/clustering/kmeans/RandomSeedGenerator.java,105,chosenTexts.add(newText);
math/src/main/java/org/apache/mahout/math/AbstractVector.java,138,public double dotSelf() {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,249,return lengthSquared + v.getLengthSquared() - 2 * this.dot(v);
math/src/main/java/org/apache/mahout/math/AbstractVector.java,251,Vector randomlyAccessed;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,254,if (lengthSquared >= 0.0) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,256,randomlyAccessed = this;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,260,randomlyAccessed = v;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,265,double value = e.get();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,493,return size;
math/src/main/java/org/apache/mahout/math/DenseVector.java,116,lengthSquared = -1.0;
math/src/main/java/org/apache/mahout/math/DenseVector.java,122,this.lengthSquared = -1;
math/src/main/java/org/apache/mahout/math/DenseVector.java,144,lengthSquared = -1;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,103,lengthSquared = -1.0;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,112,lengthSquared = -1;
math/src/main/java/org/apache/mahout/math/MatrixView.java,90,int[] origin = offset.clone();
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,224,int row = 0;
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,227,result.append("sample=").append(row++).append("]= ");
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,228,for (int k = 0; k < r.size(); k++) {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,229,Model<VectorWritable> model = r.get(k).getModel();
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,230,if (model.count() > significant) {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,231,int total = (int) r.get(k).getTotalCount();
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,232,result.append('m').append(k).append('(').append(total).append(')').append(model).append(", ");
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,235,result.append('\n');
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,237,result.append('\n');
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/dirichlet/Job.java,238,log.info(result.toString());
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java,20,import java.io.IOException;
core/src/main/java/org/apache/mahout/common/distance/CosineDistanceMeasure.java,90,double lengthSquaredv =  v.getLengthSquared();
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,35,import org.apache.mahout.math.matrix.DoubleMatrix1D;
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,36,import org.apache.mahout.math.matrix.DoubleMatrix2D;
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,38,import org.apache.mahout.math.matrix.linalg.EigenvalueDecomposition;
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,151,EigenvalueDecomposition decomp = new EigenvalueDecomposition(triDiag);
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,153,DoubleMatrix2D eigenVects = decomp.getV();
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,154,DoubleMatrix1D eigenVals = decomp.getRealEigenvalues();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,2,Copyright � 1999 CERN - European Organization for Nuclear Research.
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,3,Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,4,is hereby granted without fee, provided that the above copyright notice appear in all copies and
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,5,that both that copyright notice and this permission notice appear in supporting documentation.
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,6,CERN makes no representations about the suitability of this software for any purpose.
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,7,It is provided "as is" without expressed or implied warranty.
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,9,package org.apache.mahout.math.matrix.linalg;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,13,import org.apache.mahout.math.matrix.DoubleMatrix1D;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,14,import org.apache.mahout.math.matrix.DoubleMatrix2D;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,23,private final int n;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,29,private final double[][] V;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,32,private double[][] H;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,35,private double[] ort;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,54,d = new double[n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,55,e = new double[n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,67,tred2();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,70,tql2();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,73,H = new double[n][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,74,ort = new double[n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,76,for (int j = 0; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,77,for (int i = 0; i < n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,83,orthes();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,86,hqr2();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,90,private void cdiv(double xr, double xi, double yr, double yi) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,92,if (Math.abs(yr) > Math.abs(yi)) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,93,r = yi / yr;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,94,d = yr + r * yi;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,95,cdivr = (xr + r * xi) / d;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,96,cdivi = (xi - r * xr) / d;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,98,r = yr / yi;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,99,d = yi + r * yr;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,100,cdivr = (r * xr + xi) / d;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,101,cdivi = (r * xi - xr) / d;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,110,public DoubleMatrix2D getD() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,111,double[][] D = new double[n][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,112,for (int i = 0; i < n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,113,for (int j = 0; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,114,D[i][j] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,116,D[i][i] = d[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,117,if (e[i] > 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,118,D[i][i + 1] = e[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,120,D[i][i - 1] = e[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,131,public DoubleMatrix1D getImagEigenvalues() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,140,public DoubleMatrix1D getRealEigenvalues() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,149,public DoubleMatrix2D getV() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,154,private void hqr2() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,162,int nn = this.n;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,163,int n = nn - 1;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,164,int low = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,165,int high = nn - 1;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,166,double eps = Math.pow(2.0, -52.0);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,170,double norm = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,171,for (int i = 0; i < nn; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,172,if (i < low || i > high) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,173,d[i] = H[i][i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,174,e[i] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,176,for (int j = Math.max(i - 1, 0); j < nn; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,177,norm += Math.abs(H[i][j]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,183,int iter = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,184,double y;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,185,double x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,186,double w;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,187,double z = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,188,double s = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,189,double r = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,190,double q = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,191,double p = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,192,double exshift = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,193,while (n >= low) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,197,int l = n;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,198,while (l > low) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,199,s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,200,if (s == 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,201,s = norm;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,203,if (Math.abs(H[l][l - 1]) < eps * s) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,204,break;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,206,l--;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,212,if (l == n) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,213,H[n][n] += exshift;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,214,d[n] = H[n][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,215,e[n] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,216,n--;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,217,iter = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,222,w = H[n][n - 1] * H[n - 1][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,223,p = (H[n - 1][n - 1] - H[n][n]) / 2.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,224,q = p * p + w;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,225,z = Math.sqrt(Math.abs(q));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,226,H[n][n] += exshift;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,227,H[n - 1][n - 1] += exshift;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,228,x = H[n][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,232,if (q >= 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,233,if (p >= 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,234,z = p + z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,236,z = p - z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,238,d[n - 1] = x + z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,239,d[n] = d[n - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,240,if (z != 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,241,d[n] = x - w / z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,243,e[n - 1] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,244,e[n] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,245,x = H[n][n - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,246,s = Math.abs(x) + Math.abs(z);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,247,p = x / s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,248,q = z / s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,249,r = Math.sqrt(p * p + q * q);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,250,p /= r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,251,q /= r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,255,for (int j = n - 1; j < nn; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,256,z = H[n - 1][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,257,H[n - 1][j] = q * z + p * H[n][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,258,H[n][j] = q * H[n][j] - p * z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,263,for (int i = 0; i <= n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,264,z = H[i][n - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,265,H[i][n - 1] = q * z + p * H[i][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,266,H[i][n] = q * H[i][n] - p * z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,271,for (int i = low; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,272,z = V[i][n - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,273,V[i][n - 1] = q * z + p * V[i][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,274,V[i][n] = q * V[i][n] - p * z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,280,d[n - 1] = x + p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,281,d[n] = x + p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,282,e[n - 1] = z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,283,e[n] = -z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,285,n -= 2;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,286,iter = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,294,x = H[n][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,295,y = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,296,w = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,297,if (l < n) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,298,y = H[n - 1][n - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,299,w = H[n][n - 1] * H[n - 1][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,304,if (iter == 10) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,305,exshift += x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,306,for (int i = low; i <= n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,307,H[i][i] -= x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,309,s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,310,x = y = 0.75 * s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,311,w = -0.4375 * s * s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,316,if (iter == 30) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,317,s = (y - x) / 2.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,318,s = s * s + w;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,319,if (s > 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,320,s = Math.sqrt(s);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,321,if (y < x) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,322,s = -s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,324,s = x - w / ((y - x) / 2.0 + s);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,325,for (int i = low; i <= n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,326,H[i][i] -= s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,328,exshift += s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,329,x = y = w = 0.964;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,337,int m = n - 2;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,338,while (m >= l) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,339,z = H[m][m];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,340,r = x - z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,341,s = y - z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,342,p = (r * s - w) / H[m + 1][m] + H[m][m + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,343,q = H[m + 1][m + 1] - z - r - s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,344,r = H[m + 2][m + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,345,s = Math.abs(p) + Math.abs(q) + Math.abs(r);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,346,p /= s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,347,q /= s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,348,r /= s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,349,if (m == l) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,350,break;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,355,break;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,357,m--;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,360,for (int i = m + 2; i <= n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,361,H[i][i - 2] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,362,if (i > m + 2) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,363,H[i][i - 3] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,369,for (int k = m; k <= n - 1; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,371,if (k != m) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,372,p = H[k][k - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,373,q = H[k + 1][k - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,375,x = Math.abs(p) + Math.abs(q) + Math.abs(r);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,376,if (x != 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,377,p /= x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,378,q /= x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,379,r /= x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,382,if (x == 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,383,break;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,385,s = Math.sqrt(p * p + q * q + r * r);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,386,if (p < 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,387,s = -s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,389,if (s != 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,390,if (k != m) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,391,H[k][k - 1] = -s * x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,393,H[k][k - 1] = -H[k][k - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,395,p += s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,396,x = p / s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,397,y = q / s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,398,z = r / s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,399,q /= p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,400,r /= p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,404,for (int j = k; j < nn; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,405,p = H[k][j] + q * H[k + 1][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,406,if (notlast) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,407,p += r * H[k + 2][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,408,H[k + 2][j] -= p * z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,410,H[k][j] -= p * x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,411,H[k + 1][j] -= p * y;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,416,for (int i = 0; i <= Math.min(n, k + 3); i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,417,p = x * H[i][k] + y * H[i][k + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,418,if (notlast) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,419,p += z * H[i][k + 2];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,420,H[i][k + 2] -= p * r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,422,H[i][k] -= p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,423,H[i][k + 1] -= p * q;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,428,for (int i = low; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,429,p = x * V[i][k] + y * V[i][k + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,430,if (notlast) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,431,p += z * V[i][k + 2];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,432,V[i][k + 2] -= p * r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,434,V[i][k] -= p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,435,V[i][k + 1] -= p * q;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,444,if (norm == 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,445,return;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,448,for (n = nn - 1; n >= 0; n--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,449,p = d[n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,450,q = e[n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,454,double t;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,455,if (q == 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,456,int l = n;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,457,H[n][n] = 1.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,458,for (int i = n - 1; i >= 0; i--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,459,w = H[i][i] - p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,460,r = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,461,for (int j = l; j <= n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,462,r += H[i][j] * H[j][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,464,if (e[i] < 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,465,z = w;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,466,s = r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,468,l = i;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,469,if (e[i] == 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,470,if (w != 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,471,H[i][n] = -r / w;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,473,H[i][n] = -r / (eps * norm);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,479,x = H[i][i + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,480,y = H[i + 1][i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,481,q = (d[i] - p) * (d[i] - p) + e[i] * e[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,482,t = (x * s - z * r) / q;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,483,H[i][n] = t;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,484,if (Math.abs(x) > Math.abs(z)) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,485,H[i + 1][n] = (-r - w * t) / x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,487,H[i + 1][n] = (-s - y * t) / z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,493,t = Math.abs(H[i][n]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,495,for (int j = i; j <= n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,496,H[j][n] /= t;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,505,int l = n - 1;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,509,if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,510,H[n - 1][n - 1] = q / H[n][n - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,511,H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,513,cdiv(0.0, -H[n - 1][n], H[n - 1][n - 1] - p, q);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,514,H[n - 1][n - 1] = cdivr;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,515,H[n - 1][n] = cdivi;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,517,H[n][n - 1] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,518,H[n][n] = 1.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,519,for (int i = n - 2; i >= 0; i--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,520,double ra = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,521,double sa = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,522,for (int j = l; j <= n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,523,ra += H[i][j] * H[j][n - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,524,sa += H[i][j] * H[j][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,526,w = H[i][i] - p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,528,if (e[i] < 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,529,z = w;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,530,r = ra;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,531,s = sa;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,533,l = i;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,534,if (e[i] == 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,535,cdiv(-ra, -sa, w, q);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,536,H[i][n - 1] = cdivr;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,537,H[i][n] = cdivi;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,542,x = H[i][i + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,543,y = H[i + 1][i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,544,double vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,545,double vi = (d[i] - p) * 2.0 * q;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,546,if (vr == 0.0 && vi == 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,550,cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,551,H[i][n - 1] = cdivr;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,552,H[i][n] = cdivi;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,554,H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,555,H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,557,cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,558,H[i + 1][n - 1] = cdivr;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,559,H[i + 1][n] = cdivi;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,565,t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,567,for (int j = i; j <= n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,568,H[j][n - 1] /= t;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,569,H[j][n] /= t;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,579,for (int i = 0; i < nn; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,580,if (i < low || i > high) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,581,System.arraycopy(H[i], i, V[i], i, nn - i);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,587,for (int j = nn - 1; j >= low; j--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,588,for (int i = low; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,589,z = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,590,for (int k = low; k <= Math.min(j, high); k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,591,z += V[i][k] * H[k][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,593,V[i][j] = z;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,599,private void orthes() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,605,int low = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,606,int high = n - 1;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,608,for (int m = low + 1; m <= high - 1; m++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,612,double scale = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,613,for (int i = m; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,614,scale += Math.abs(H[i][m - 1]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,616,if (scale != 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,620,double h = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,621,for (int i = high; i >= m; i--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,622,ort[i] = H[i][m - 1] / scale;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,623,h += ort[i] * ort[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,625,double g = Math.sqrt(h);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,626,if (ort[m] > 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,627,g = -g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,629,h -= ort[m] * g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,630,ort[m] -= g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,635,for (int j = m; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,636,double f = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,637,for (int i = high; i >= m; i--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,638,f += ort[i] * H[i][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,640,f /= h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,641,for (int i = m; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,642,H[i][j] -= f * ort[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,646,for (int i = 0; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,647,double f = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,648,for (int j = high; j >= m; j--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,649,f += ort[j] * H[i][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,651,f /= h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,652,for (int j = m; j <= high; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,653,H[i][j] -= f * ort[j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,656,ort[m] = scale * ort[m];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,657,H[m][m - 1] = scale * g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,663,for (int i = 0; i < n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,664,for (int j = 0; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,669,for (int m = high - 1; m >= low + 1; m--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,670,if (H[m][m - 1] != 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,671,for (int i = m + 1; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,672,ort[i] = H[i][m - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,674,for (int j = m; j <= high; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,675,double g = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,676,for (int i = m; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,677,g += ort[i] * V[i][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,681,for (int i = m; i <= high; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,682,V[i][j] += g * ort[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,697,public String toString() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,698,StringBuilder buf = new StringBuilder();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,700,buf.append("---------------------------------------------------------------------\n");
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,701,buf.append("EigenvalueDecomposition(A) --> D, V, realEigenvalues, imagEigenvalues\n");
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,702,buf.append("---------------------------------------------------------------------\n");
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,704,buf.append("realEigenvalues = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,705,String unknown = "Illegal operation or error: ";
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,706,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,707,buf.append(String.valueOf(this.getRealEigenvalues()));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,710,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,713,buf.append("\nimagEigenvalues = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,714,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,715,buf.append(String.valueOf(this.getImagEigenvalues()));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,718,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,721,buf.append("\n\nD = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,722,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,723,buf.append(String.valueOf(this.getD()));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,726,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,729,buf.append("\n\nV = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,730,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,731,buf.append(String.valueOf(this.getV()));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,734,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,737,return buf.toString();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,741,private void tql2() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,748,System.arraycopy(e, 1, e, 0, n - 1);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,749,e[n - 1] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,751,double f = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,752,double tst1 = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,753,double eps = Math.pow(2.0, -52.0);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,754,for (int l = 0; l < n; l++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,758,tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,759,int m = l;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,760,while (m < n) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,761,if (Math.abs(e[m]) <= eps * tst1) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,762,break;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,764,m++;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,770,if (m > l) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,771,int iter = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,772,do {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,777,double g = d[l];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,778,double p = (d[l + 1] - g) / (2.0 * e[l]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,780,if (p < 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,781,r = -r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,783,d[l] = e[l] / (p + r);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,784,d[l + 1] = e[l] * (p + r);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,785,double dl1 = d[l + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,786,double h = g - d[l];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,787,for (int i = l + 2; i < n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,788,d[i] -= h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,790,f += h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,794,p = d[m];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,795,double c = 1.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,796,double c2 = c;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,797,double c3 = c;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,798,double el1 = e[l + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,799,double s = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,800,double s2 = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,801,for (int i = m - 1; i >= l; i--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,802,c3 = c2;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,803,c2 = c;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,804,s2 = s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,805,g = c * e[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,806,h = c * p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,808,e[i + 1] = s * r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,809,s = e[i] / r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,810,c = p / r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,811,p = c * d[i] - s * g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,812,d[i + 1] = h + s * (c * g + s * d[i]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,816,for (int k = 0; k < n; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,817,h = V[k][i + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,818,V[k][i + 1] = s * V[k][i] + c * h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,819,V[k][i] = c * V[k][i] - s * h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,822,p = -s * s2 * c3 * el1 * e[l] / dl1;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,823,e[l] = s * p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,824,d[l] = c * p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,830,d[l] += f;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,831,e[l] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,836,for (int i = 0; i < n - 1; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,837,int k = i;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,838,double p = d[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,839,for (int j = i + 1; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,840,if (d[j] < p) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,841,k = j;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,842,p = d[j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,845,if (k != i) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,846,d[k] = d[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,847,d[i] = p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,848,for (int j = 0; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,849,p = V[j][i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,850,V[j][i] = V[j][k];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,851,V[j][k] = p;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,858,private void tred2() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,865,System.arraycopy(V[n - 1], 0, d, 0, n);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,870,for (int i = n - 1; i > 0; i--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,874,double scale = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,875,for (int k = 0; k < i; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,876,scale += Math.abs(d[k]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,878,double h = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,879,if (scale == 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,880,e[i] = d[i - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,881,for (int j = 0; j < i; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,882,d[j] = V[i - 1][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,883,V[i][j] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,884,V[j][i] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,890,for (int k = 0; k < i; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,891,d[k] /= scale;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,892,h += d[k] * d[k];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,894,double f = d[i - 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,895,double g = Math.sqrt(h);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,896,if (f > 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,897,g = -g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,899,e[i] = scale * g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,900,h -= f * g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,901,d[i - 1] = f - g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,902,for (int j = 0; j < i; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,903,e[j] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,908,for (int j = 0; j < i; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,909,f = d[j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,910,V[j][i] = f;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,911,g = e[j] + V[j][j] * f;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,912,for (int k = j + 1; k <= i - 1; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,913,g += V[k][j] * d[k];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,914,e[k] += V[k][j] * f;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,916,e[j] = g;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,918,f = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,919,for (int j = 0; j < i; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,920,e[j] /= h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,921,f += e[j] * d[j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,923,double hh = f / (h + h);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,924,for (int j = 0; j < i; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,925,e[j] -= hh * d[j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,927,for (int j = 0; j < i; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,928,f = d[j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,929,g = e[j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,930,for (int k = j; k <= i - 1; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,933,d[j] = V[i - 1][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,934,V[i][j] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,937,d[i] = h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,942,for (int i = 0; i < n - 1; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,943,V[n - 1][i] = V[i][i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,944,V[i][i] = 1.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,945,double h = d[i + 1];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,946,if (h != 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,947,for (int k = 0; k <= i; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,948,d[k] = V[k][i + 1] / h;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,950,for (int j = 0; j <= i; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,951,double g = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,952,for (int k = 0; k <= i; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,953,g += V[k][i + 1] * V[k][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,955,for (int k = 0; k <= i; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,956,V[k][j] -= g * d[k];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,960,for (int k = 0; k <= i; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,961,V[k][i + 1] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,964,for (int j = 0; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,965,d[j] = V[n - 1][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,966,V[n - 1][j] = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,968,V[n - 1][n - 1] = 1.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,969,e[0] = 0.0;
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,34,import org.apache.hadoop.fs.FileStatus;
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,36,import org.apache.hadoop.fs.FileUtil;
core/src/main/java/org/apache/mahout/cf/taste/hadoop/pseudo/RecommenderJob.java,137,return 0;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,239,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,318,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,409,job.waitForCompletion(true);
examples/src/main/java/org/apache/mahout/fpm/pfpgrowth/dataset/KeyBasedStringTupleGrouper.java,92,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyReducer.java,76,FileSystem.get(conf).createNewFile(path);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/FPGrowthDriver.java,182,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/ga/watchmaker/MahoutEvaluator.java,60,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,101,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,65,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/DistributedLanczosSolver.java,102,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/EigenVerificationJob.java,183,FileSystem fs = FileSystem.get(conf);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/FPGrowthDriver.java,191,FPGrowth<String> fp = new FPGrowth<String>();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/MultiTransactionTreeIterator.java,37,public MultiTransactionTreeIterator(Iterator<Pair<List<Integer>,Long>> iterator) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,107,return map;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,250,List<Pair<String,Long>> fList = readFList(params);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,254,long maxPerGroup = fList.size() / numGroups;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,255,if (fList.size() != maxPerGroup * numGroups) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,256,maxPerGroup++;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,259,long i = 0;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,260,long groupID = 0;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,261,for (Pair<String,Long> featureFreq : fList) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,262,String feature = featureFreq.getFirst();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,263,if (i / maxPerGroup == groupID) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,264,gList.put(feature, groupID);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,266,groupID++;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,267,gList.put(feature, groupID);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,269,i++;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,272,log.info("No of Features: {}", fList.size());
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,338,conf.set("mapred.compress.map.output", "true");
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,339,conf.set("mapred.output.compression.type", "BLOCK");
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,341,Job job = new Job(conf, "PFP Transaction Sorting running over input" + input);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,342,job.setJarByClass(PFPGrowth.class);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,344,job.setMapOutputKeyClass(LongWritable.class);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,345,job.setMapOutputValueClass(TransactionTree.class);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,347,job.setOutputKeyClass(LongWritable.class);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,348,job.setOutputValueClass(TransactionTree.class);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,350,FileInputFormat.addInputPath(job, new Path(input));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,352,FileOutputFormat.setOutputPath(job, outPath);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,359,job.setInputFormatClass(TextInputFormat.class);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,360,job.setMapperClass(TransactionSortingMapper.class);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,361,job.setReducerClass(TransactionSortingReducer.class);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,362,job.setOutputFormatClass(SequenceFileOutputFormat.class);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,364,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,388,job.setMapOutputKeyClass(LongWritable.class);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,403,job.setInputFormatClass(SequenceFileInputFormat.class);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthCombiner.java,24,import org.apache.hadoop.io.LongWritable;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,21,import java.util.HashSet;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,39,public class ParallelFPGrowthMapper extends Mapper<LongWritable,TransactionTree,LongWritable,TransactionTree> {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,41,private final OpenIntLongHashMap gListInt = new OpenIntLongHashMap();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,50,Integer[] prunedItems = pattern.getFirst().toArray(new Integer[pattern.getFirst().size()]);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,56,Integer item = prunedItems[j];
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,57,Long groupID = gListInt.get(item);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,60,Integer[] tempItems = new Integer[j + 1];
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,61,System.arraycopy(prunedItems, 0, tempItems, 0, j + 1);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,62,context.setStatus("Parallel FPGrowth: Generating Group Dependent transactions for: " + item);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,63,context.write(new LongWritable(groupID), new TransactionTree(tempItems, pattern.getSecond()));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,65,groups.add(groupID);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,76,OpenObjectIntHashMap<String> fMap = new OpenObjectIntHashMap<String>();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,84,gListInt.put(fMap.get(e.getKey()), e.getValue());
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,31,import org.apache.hadoop.io.LongWritable;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,52,public class ParallelFPGrowthReducer extends Reducer<LongWritable,TransactionTree,Text,TopKStringPatterns> {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,56,private final OpenObjectIntHashMap<String> fMap = new OpenObjectIntHashMap<String>();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,58,private final OpenLongObjectHashMap<IntArrayList> groupFeatures = new OpenLongObjectHashMap<IntArrayList>();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,65,protected void reduce(LongWritable key, Iterable<TransactionTree> values, Context context) throws IOException {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,95,FPGrowth<Integer> fpGrowth = new FPGrowth<Integer>();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,112,fMap.put(e.getFirst(), i++);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,118,for (Entry<String,Long> entry : gList.entrySet()) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,119,IntArrayList groupList = groupFeatures.get(entry.getValue());
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,120,Integer itemInteger = fMap.get(entry.getKey());
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,121,if (groupList != null) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,122,groupList.add(itemInteger);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,124,groupList = new IntArrayList();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,125,groupList.add(itemInteger);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthReducer.java,126,groupFeatures.put(entry.getValue(), groupList);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,18,package org.apache.mahout.fpm.pfpgrowth;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,20,import java.io.IOException;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,22,import java.util.Arrays;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,23,import java.util.Collections;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,24,import java.util.HashSet;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,25,import java.util.List;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,27,import java.util.regex.Pattern;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,29,import org.apache.hadoop.io.LongWritable;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,30,import org.apache.hadoop.io.Text;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,31,import org.apache.hadoop.mapreduce.Mapper;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,32,import org.apache.mahout.common.Pair;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,33,import org.apache.mahout.common.Parameters;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,34,import org.apache.mahout.math.map.OpenObjectIntHashMap;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,41,public class TransactionSortingMapper extends Mapper<LongWritable,Text,LongWritable,TransactionTree> {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,43,private final OpenObjectIntHashMap<String> fMap = new OpenObjectIntHashMap<String>();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,45,private Pattern splitter;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,48,protected void map(LongWritable offset, Text input, Context context) throws IOException,
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,49,InterruptedException {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,51,String[] items = splitter.split(input.toString());
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,55,for (String item : uniqueItems) { // remove items not in the fList
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,57,itemSet.add(fMap.get(item));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,61,Collections.sort(itemSet);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,63,Integer[] prunedItems = itemSet.toArray(new Integer[itemSet.size()]);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,65,if (prunedItems.length > 0) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,66,context.write(new LongWritable(prunedItems[0]), new TransactionTree(prunedItems, 1L));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,72,protected void setup(Context context) throws IOException, InterruptedException {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,73,super.setup(context);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,76,int i = 0;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingMapper.java,78,fMap.put(e.getFirst(), i++);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingReducer.java,18,package org.apache.mahout.fpm.pfpgrowth;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingReducer.java,20,import java.io.IOException;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingReducer.java,22,import org.apache.hadoop.io.LongWritable;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingReducer.java,23,import org.apache.hadoop.mapreduce.Reducer;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingReducer.java,31,public class TransactionSortingReducer extends
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingReducer.java,32,Reducer<LongWritable,TransactionTree,LongWritable,TransactionTree> {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingReducer.java,34,private static final LongWritable ONE = new LongWritable(1);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingReducer.java,37,protected void reduce(LongWritable key, Iterable<TransactionTree> values, Context context) throws IOException,
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingReducer.java,38,InterruptedException {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingReducer.java,39,for (TransactionTree tr : values) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionSortingReducer.java,40,context.write(ONE, tr);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,157,public TransactionTree(Integer[] items, Long support) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,159,transactionSet.add(new Pair<List<Integer>,Long>(Arrays.asList(items), support));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,162,public TransactionTree(List<Pair<List<Integer>,Long>> transactionSet) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,189,for (int attributeValue : myList) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,253,Pair<List<Integer>,Long> p = it.next();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,256,for (Integer i : p.getFirst()) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,258,frequencyList.put(i, new MutableLong(0));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,260,frequencyList.get(i).add(p.getSecond());
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,282,Pair<List<Integer>,Long> p = it.next();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,283,Collections.sort(p.getFirst(), comparator);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,336,Integer[] items = new Integer[length];
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,341,Pair<List<Integer>,Long> transaction = new Pair<List<Integer>,Long>(Arrays.asList(items), support);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/TransactionTree.java,384,for (Integer item : transaction.getFirst()) {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/Pattern.java,45,private long[] supportValues;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/Pattern.java,56,this.supportValues = new long[size];
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/Pattern.java,65,this.pattern[length] = id;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/Pattern.java,66,this.supportValues[length++] = supportCount;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/Pattern.java,74,public final Object[] getPatternWithSupport() {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/Pattern.java,75,return new Object[] {this.pattern, this.supportValues};
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/Pattern.java,113,long[] oldSupport = supportValues;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/Pattern.java,115,this.supportValues = new long[size];
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/Pattern.java,117,System.arraycopy(oldSupport, 0, this.supportValues, 0, length);
core/src/main/java/org/apache/mahout/cf/taste/impl/common/WeightedRunningAverage.java,41,average = datum * weight;
core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/SlopeOneDiffsToAveragesReducer.java,38,int count = 0;
core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/SlopeOneDiffsToAveragesReducer.java,39,double total = 0.0;
core/src/main/java/org/apache/mahout/cf/taste/hadoop/slopeone/SlopeOneDiffsToAveragesReducer.java,42,count++;
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java,37,import org.apache.mahout.cf.taste.impl.common.InvertedRunningAverageAndStdDev;
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java,153,if (average == null) {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java,154,return null;
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java,157,: new InvertedRunningAverage(average);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,36,import org.apache.mahout.cf.taste.impl.model.file.FileDataModel;
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,116,averageCount = processLine(iterator.next(), delimiter, averageCount);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,130,private long processLine(String line, char delimiter, long averageCount) {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,136,int delimiterOne = line.indexOf(delimiter);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,140,int delimiterTwo = line.indexOf(delimiter, delimiterOne + 1);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,145,long itemID1 = Long.parseLong(line.substring(0, delimiterOne));
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,146,long itemID2 = Long.parseLong(line.substring(delimiterOne + 1, delimiterTwo));
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,147,double diff = Double.parseDouble(line.substring(delimiterTwo + 1));
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,162,average = new FullRunningAverage();
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,166,if (average != null) {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,167,average.addDatum(diff);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,240,if (average == null) {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,241,return null;
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,243,return new InvertedRunningAverage(average);
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorDriver.java,158,conf.set("xmlinput.start", "<text xml:space=\"preserve\">");
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorDriver.java,159,conf.set("xmlinput.end", "</text>");
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPGrowth.java,602,conditionalTree.setParent(prevConditional, conditional);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPGrowth.java,612,conditionalTree.setParent(prevConditional, FPTree.ROOTNODEID);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPGrowth.java,613,if (conditionalTree.childCount(FPTree.ROOTNODEID) > 1
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPGrowth.java,614,&& conditionalTree.singlePath()) {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/SimilarUser.java,64,return similarity > otherSimilarity ? -1 : similarity < otherSimilarity ? 1 : 0;
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/TopItems.java,109,topUsers.add(new SimilarUser(userID, similarity));
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,416,double sum = 0;
core/src/main/java/org/apache/mahout/classifier/BayesFileFormatter.java,269,Option inputOpt = obuilder.withLongName("input").withRequired(true).withArgument(
core/src/main/java/org/apache/mahout/classifier/BayesFileFormatter.java,271,.withShortName("i").create();
core/src/main/java/org/apache/mahout/classifier/BayesFileFormatter.java,273,Option outputOpt = obuilder.withLongName("output").withRequired(true).withArgument(
core/src/main/java/org/apache/mahout/classifier/BayesFileFormatter.java,275,.withShortName("o").create();
core/src/main/java/org/apache/mahout/classifier/bayes/TrainClassifier.java,66,Option inputDirOpt = obuilder.withLongName("input").withRequired(true).withArgument(
core/src/main/java/org/apache/mahout/classifier/bayes/TrainClassifier.java,67,abuilder.withName("input").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/classifier/bayes/TrainClassifier.java,70,Option outputOpt = obuilder.withLongName("output").withRequired(true).withArgument(
core/src/main/java/org/apache/mahout/classifier/bayes/TrainClassifier.java,71,abuilder.withName("output").withMinimum(1).withMaximum(1).create()).withDescription(
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/FPGrowthDriver.java,69,Option inputDirOpt = obuilder.withLongName("input").withRequired(true).withArgument(
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/FPGrowthDriver.java,70,abuilder.withName("input").withMinimum(1).withMaximum(1).create()).withDescription(
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorDriver.java,73,Option dirInputPathOpt = obuilder.withLongName("input").withRequired(true).withArgument(
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorDriver.java,74,abuilder.withName("input").withMinimum(1).withMaximum(1).create()).withDescription(
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorDriver.java,77,Option dirOutputPathOpt = obuilder.withLongName("output").withRequired(true).withArgument(
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorDriver.java,78,abuilder.withName("output").withMinimum(1).withMaximum(1).create()).withDescription(
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorDriver.java,93,.create();
examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/CDGA.java,82,Option inputOpt = obuilder.withLongName("input").withRequired(true).withShortName("i").withArgument(
examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/tool/CDInfosTool.java,31,import org.apache.commons.cli2.builder.ArgumentBuilder;
examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/tool/CDInfosTool.java,32,import org.apache.commons.cli2.builder.DefaultOptionBuilder;
examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/tool/CDInfosTool.java,219,DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
examples/src/main/java/org/apache/mahout/ga/watchmaker/cd/tool/CDInfosTool.java,220,ArgumentBuilder abuilder = new ArgumentBuilder();
examples/src/main/java/org/apache/mahout/text/WikipediaToSequenceFile.java,74,Option dirInputPathOpt = obuilder.withLongName("input").withRequired(true).withArgument(
examples/src/main/java/org/apache/mahout/text/WikipediaToSequenceFile.java,75,abuilder.withName("input").withMinimum(1).withMaximum(1).create()).withDescription(
examples/src/main/java/org/apache/mahout/text/WikipediaToSequenceFile.java,78,Option dirOutputPathOpt = obuilder.withLongName("output").withRequired(true).withArgument(
examples/src/main/java/org/apache/mahout/text/WikipediaToSequenceFile.java,79,abuilder.withName("output").withMinimum(1).withMaximum(1).create()).withDescription(
examples/src/main/java/org/apache/mahout/text/WikipediaToSequenceFile.java,95,.create();
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,205,out.collect(NullWritable.get(), new VectorWritable(outputVector));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,33,import org.apache.hadoop.io.DefaultStringifier;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,37,import org.apache.hadoop.io.Writable;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,44,import org.apache.hadoop.util.GenericsUtil;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,76,conf.set("io.serializations", "org.apache.hadoop.io.serializer.JavaSerialization,"
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,77,+ "org.apache.hadoop.io.serializer.WritableSerialization");
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,79,DefaultStringifier<List<Pair<String,Long>>> listStringifier = new DefaultStringifier<List<Pair<String,Long>>>(
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,80,conf, GenericsUtil.getClass(list));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,83,list = listStringifier.fromString(serializedString);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,97,public static Map<String,Long> deserializeMap(Parameters params, String key, Configuration conf) throws IOException {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,99,conf.set("io.serializations", "org.apache.hadoop.io.serializer.JavaSerialization,"
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,100,+ "org.apache.hadoop.io.serializer.WritableSerialization");
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,102,DefaultStringifier<Map<String,Long>> mapStringifier = new DefaultStringifier<Map<String,Long>>(conf,
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,103,GenericsUtil.getClass(map));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,106,map = mapStringifier.fromString(gListString);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,191,startParallelCounting(params);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,192,startGroupingItems(params);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,193,startTransactionSorting(params);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,194,startParallelFPGrowth(params);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,195,startAggregating(params);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,211,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,248,public static void startGroupingItems(Parameters params) throws IOException {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,249,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,290,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,334,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,380,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,420,private static String serializeList(List<Pair<String,Long>> list, Configuration conf) throws IOException {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,421,conf.set("io.serializations", "org.apache.hadoop.io.serializer.JavaSerialization,"
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,422,+ "org.apache.hadoop.io.serializer.WritableSerialization");
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,423,DefaultStringifier<List<Pair<String,Long>>> listStringifier = new DefaultStringifier<List<Pair<String,Long>>>(
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,424,conf, GenericsUtil.getClass(list));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,425,return listStringifier.toString(list);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,436,private static String serializeMap(Map<String,Long> map, Configuration conf) throws IOException {
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,437,conf.set("io.serializations", "org.apache.hadoop.io.serializer.JavaSerialization,"
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,438,+ "org.apache.hadoop.io.serializer.WritableSerialization");
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,439,DefaultStringifier<Map<String,Long>> mapStringifier = new DefaultStringifier<Map<String,Long>>(conf,
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,440,GenericsUtil.getClass(map));
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java,441,return mapStringifier.toString(map);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,30,import org.apache.mahout.common.Parameters;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,53,for (int j = prunedItems.length - 1; j >= 0; j--) { // generate group
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/ParallelFPGrowthMapper.java,83,.entrySet()) {
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java,54,int prefs1Size = prefs1.size();
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java,55,int prefs2Size = prefs2.size();
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java,56,int intersectionSize = prefs1Size < prefs2Size ? prefs2.intersectionSize(prefs1) : prefs1
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java,57,.intersectionSize(prefs2);
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java,61,int numItems = dataModel.getNumItems();
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java,70,int preferring1and2 = dataModel.getNumUsersWithPreferenceFor(itemID1, itemID2);
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/LogLikelihoodSimilarity.java,75,int preferring2 = dataModel.getNumUsersWithPreferenceFor(itemID2);
math/src/main/java/org/apache/mahout/math/stats/LogLikelihood.java,33,public static double entropy(int... elements) {
math/src/main/java/org/apache/mahout/math/stats/LogLikelihood.java,67,public static double logLikelihoodRatio(int k11, int k12, int k21, int k22) {
math/src/main/java/org/apache/mahout/math/stats/LogLikelihood.java,89,public static double rootLogLikelihoodRatio(int k11, int k12, int k21, int k22) {
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,114,fs.deleteOnExit(inputVectorPath);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,143,fs.deleteOnExit(outputFile);
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,176,return TimesSquaredJob.retrieveTimesSquaredOutputVector(conf);
core/src/main/java/org/apache/mahout/math/hadoop/DistributedRowMatrix.java,190,return TimesSquaredJob.retrieveTimesSquaredOutputVector(conf);
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/DistributedLanczosSolver.java,107,Vector v = eigenVectors.getRow(i);
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/EigenVector.java,32,public EigenVector(DenseVector v, double eigenValue, double cosAngleError, int order) {
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/EigenVector.java,33,super(v, false);
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/EigenVerificationJob.java,36,import org.apache.mahout.math.DenseVector;
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/EigenVerificationJob.java,213,public int compare(Map.Entry<MatrixSlice, EigenStatus> e1, Map.Entry<MatrixSlice, EigenStatus> e2) {
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,21,import java.util.EnumMap;
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,23,import java.util.List;
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,24,import java.util.Map;
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,26,import org.apache.mahout.math.DenseVector;
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,27,import org.apache.mahout.math.Matrix;
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,28,import org.apache.mahout.math.MatrixSlice;
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,29,import org.apache.mahout.math.SparseRowMatrix;
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,30,import org.apache.mahout.math.VectorIterable;
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,34,import org.apache.mahout.math.Vector;
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,158,for (int i = 0; i < basis.numRows() - 1; i++) {
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,169,eigenValues.add(eigenVals.get(i));
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,16,import static org.apache.mahout.math.matrix.linalg.Property.*;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,49,public EigenvalueDecomposition(DoubleMatrix2D A) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,50,checkSquare(A);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,52,n = A.columns();
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,53,V = new double[n][n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,57,boolean issymmetric = DEFAULT.isSymmetric(A);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,59,if (issymmetric) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,60,for (int i = 0; i < n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,61,for (int j = 0; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,62,V[i][j] = A.getQuick(i, j);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,78,H[i][j] = A.getQuick(i, j);
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorOutputFormat.java,18,package org.apache.mahout.classifier.bayes;
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorOutputFormat.java,20,import org.apache.hadoop.io.Text;
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorOutputFormat.java,27,public class WikipediaDatasetCreatorOutputFormat extends MultipleTextOutputFormat<Text,Text> {
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorOutputFormat.java,29,protected String generateFileNameForKeyValue(Text key, Text v, String name) {
examples/src/main/java/org/apache/mahout/classifier/bayes/WikipediaDatasetCreatorOutputFormat.java,31,return key.toString() + ".txt";
core/src/main/java/org/apache/mahout/math/hadoop/MatrixMultiplicationJob.java,50,JobConf conf = new JobConf(MatrixMultiplicationJob.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,65,return createTimesSquaredJobConf(v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,76,return createTimesSquaredJobConf(v,
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,90,return createTimesSquaredJobConf(v, v.size(), matrixInputPath, outputVectorPathBase, mapClass, redClass);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,99,JobConf conf = new JobConf(TimesSquaredJob.class);
core/src/main/java/org/apache/mahout/math/hadoop/TransposeJob.java,63,JobConf conf = new JobConf(TransposeJob.class);
core/src/main/java/org/apache/mahout/cf/taste/impl/common/WeightedRunningAverage.java,22,public final class WeightedRunningAverage implements RunningAverage, Serializable {
core/src/main/java/org/apache/mahout/cf/taste/impl/common/WeightedRunningAverage.java,43,average = average * oldTotalWeight / totalWeight + datum / totalWeight;
core/src/main/java/org/apache/mahout/cf/taste/impl/common/WeightedRunningAverage.java,59,average = average * oldTotalWeight / totalWeight - datum / totalWeight;
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPGrowth.java,61,public static List<Pair<String,TopKStringPatterns>> readFrequentPattern(FileSystem fs,
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPGrowth.java,62,Configuration conf,
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPGrowth.java,63,Path path) throws IOException {
examples/src/main/java/org/apache/mahout/classifier/bayes/XmlInputFormat.java,40,public static final String START_TAG_KEY = "xmlinput.start";
examples/src/main/java/org/apache/mahout/classifier/bayes/XmlInputFormat.java,56,private final byte[] startTag;
core/src/main/java/org/apache/mahout/df/mapreduce/Builder.java,93,String tracker = conf.get("mapred.job.tracker", "local");
core/src/main/java/org/apache/mahout/df/mapreduce/Builder.java,94,if ("local".equals(tracker)) {
core/src/main/java/org/apache/mahout/df/mapreduce/Builder.java,95,log.warn("Hadoop running in 'local' mode, only one map task will be launched");
core/src/main/java/org/apache/mahout/df/mapreduce/Builder.java,96,return 1;
utils/src/main/java/org/apache/mahout/clustering/lda/LDAPrintTopics.java,21,import java.io.FileWriter;
utils/src/main/java/org/apache/mahout/clustering/lda/LDAPrintTopics.java,23,import java.io.PrintWriter;
utils/src/main/java/org/apache/mahout/clustering/lda/LDAPrintTopics.java,235,File out = new File(output, "topic-" + i);
utils/src/main/java/org/apache/mahout/clustering/lda/LDAPrintTopics.java,236,PrintWriter writer = new PrintWriter(new FileWriter(out));
utils/src/main/java/org/apache/mahout/clustering/lda/LDAPrintTopics.java,237,writer.println("Topic " + i);
utils/src/main/java/org/apache/mahout/clustering/lda/LDAPrintTopics.java,238,writer.println("===========");
utils/src/main/java/org/apache/mahout/clustering/lda/LDAPrintTopics.java,239,for (String word : topK) {
utils/src/main/java/org/apache/mahout/clustering/lda/LDAPrintTopics.java,240,writer.println(word);
utils/src/main/java/org/apache/mahout/clustering/lda/LDAPrintTopics.java,242,writer.close();
utils/src/main/java/org/apache/mahout/utils/SequenceFileDumper.java,20,import java.io.FileWriter;
utils/src/main/java/org/apache/mahout/utils/SequenceFileDumper.java,94,writer = new FileWriter(cmdLine.getValue(outputOpt).toString());
utils/src/main/java/org/apache/mahout/utils/clustering/ClusterDumper.java,21,import java.io.FileWriter;
utils/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,23,import java.io.FileReader;
utils/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java,63,this(new FileReader(file), model);
utils/src/main/java/org/apache/mahout/utils/vectors/arff/Driver.java,23,import java.io.FileWriter;
utils/src/main/java/org/apache/mahout/utils/vectors/lucene/ClusterLabels.java,21,import java.io.FileWriter;
utils/src/main/java/org/apache/mahout/utils/vectors/lucene/Driver.java,20,import java.io.BufferedWriter;
utils/src/main/java/org/apache/mahout/utils/vectors/lucene/Driver.java,23,import java.io.FileWriter;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,2,Copyright � 1999 CERN - European Organization for Nuclear Research.
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,3,Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,4,is hereby granted without fee, provided that the above copyright notice appear in all copies and
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,5,that both that copyright notice and this permission notice appear in supporting documentation.
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,6,CERN makes no representations about the suitability of this software for any purpose.
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,7,It is provided "as is" without expressed or implied warranty.
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,9,package org.apache.mahout.math.matrix.linalg;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,11,import org.apache.mahout.math.GenericPermuting;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,14,import org.apache.mahout.math.Swapper;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,21,import org.apache.mahout.math.matrix.DoubleMatrix1D;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,22,import org.apache.mahout.math.matrix.DoubleMatrix2D;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,36,public static final Algebra DEFAULT;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,46,private static final Algebra ZERO;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,49,private Property property;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,51,static {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,53,DEFAULT = new Algebra();
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,54,DEFAULT.property = Property.DEFAULT; // immutable property object
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,56,ZERO = new Algebra();
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,57,ZERO.property = Property.ZERO; // immutable property object
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,61,public Algebra() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,62,this(Property.DEFAULT.tolerance());
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,70,public Algebra(double tolerance) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,71,setProperty(new Property(tolerance));
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,100,public static double det(DoubleMatrix2D A) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,101,return lu(A).det();
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,111,double r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,112,if (Math.abs(a) > Math.abs(b)) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,113,r = b / a;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,114,r = Math.abs(a) * Math.sqrt(1 + r * r);
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,116,r = a / b;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,117,r = Math.abs(b) * Math.sqrt(1 + r * r);
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,119,r = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,121,return r;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,151,private static LUDecomposition lu(DoubleMatrix2D matrix) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,152,return new LUDecomposition(matrix);
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,310,int size = A.size();
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,311,if (indexes.length != size) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,312,throw new IndexOutOfBoundsException("invalid permutation");
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,316,int i=size;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,317,int a;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,319,if (i<0) return; // nothing to permute
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,322,if (work == null || size > work.length) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,323,work = A.toArray();
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,325,A.toArray(work);
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,327,for (int i = size; --i >= 0;) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,328,A.setQuick(i, work[indexes[i]]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,387,int size = A.rows();
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,388,if (indexes.length != size) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,389,throw new IndexOutOfBoundsException("invalid permutation");
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,393,int i=size;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,394,int a;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,396,if (i<0) return; // nothing to permute
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,399,int columns = A.columns();
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,400,if (columns < size / 10) { // quicker
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,401,double[] doubleWork = new double[size];
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,402,for (int j = A.columns(); --j >= 0;) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,403,permute(A.viewColumn(j), indexes, doubleWork);
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,408,Swapper swapper = new Swapper() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,409,public void swap(int a, int b) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,410,A.viewRow(a).swap(A.viewRow(b));
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,414,GenericPermuting.permute(indexes, swapper, work, null);
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,504,public Property property() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,505,return property;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,528,public void setProperty(Property property) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,529,if (this == DEFAULT && property != this.property) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,530,throw new IllegalArgumentException("Attempted to modify immutable object.");
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,532,if (this == ZERO && property != this.property) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,533,throw new IllegalArgumentException("Attempted to modify immutable object.");
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,535,this.property = property;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,1019,int rows = A.rows();
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,1020,int columns = A.columns();
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,1021,for (int r = rows; --r >= 0;) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,1022,for (int c = columns; --c >= 0;) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,1023,if (r < c) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,1024,A.setQuick(r, c, 0);
math/src/main/java/org/apache/mahout/math/matrix/linalg/Algebra.java,1028,return A;
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,779,double r = Algebra.hypot(p, 1.0);
math/src/main/java/org/apache/mahout/math/matrix/linalg/EigenvalueDecomposition.java,807,r = Algebra.hypot(p, e[i]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecomposition.java,2,Copyright � 1999 CERN - European Organization for Nuclear Research.
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecomposition.java,3,Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecomposition.java,4,is hereby granted without fee, provided that the above copyright notice appear in all copies and
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecomposition.java,5,that both that copyright notice and this permission notice appear in supporting documentation.
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecomposition.java,6,CERN makes no representations about the suitability of this software for any purpose.
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecomposition.java,7,It is provided "as is" without expressed or implied warranty.
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecomposition.java,9,package org.apache.mahout.math.matrix.linalg;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecomposition.java,11,import org.apache.mahout.math.matrix.DoubleMatrix2D;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecomposition.java,28,private final LUDecompositionQuick quick;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecomposition.java,38,quick = new LUDecompositionQuick(0); // zero tolerance for compatibility with Jama
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecomposition.java,47,public double det() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecomposition.java,48,return quick.det();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecomposition.java,120,public String toString() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecomposition.java,121,return quick.toString();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,2,Copyright 1999 CERN - European Organization for Nuclear Research.
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,3,Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,4,is hereby granted without fee, provided that the above copyright notice appear in all copies and
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,5,that both that copyright notice and this permission notice appear in supporting documentation.
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,6,CERN makes no representations about the suitability of this software for any purpose.
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,7,It is provided "as is" without expressed or implied warranty.
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,9,package org.apache.mahout.math.matrix.linalg;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,11,import org.apache.mahout.math.function.Mult;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,12,import org.apache.mahout.math.function.PlusMult;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,13,import org.apache.mahout.math.list.IntArrayList;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,14,import org.apache.mahout.math.matrix.DoubleMatrix1D;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,15,import org.apache.mahout.math.matrix.DoubleMatrix2D;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,25,private int pivsign;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,28,private int[] piv;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,30,private boolean isNonSingular;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,32,private final Algebra algebra;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,34,private transient double[] workDouble;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,35,private transient int[] work1;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,47,public LUDecompositionQuick(double tolerance) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,48,this.algebra = new Algebra(tolerance);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,57,public void decompose(DoubleMatrix2D A) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,60,int m = A.rows();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,61,int n = A.columns();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,64,if (this.piv == null || this.piv.length != m) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,65,this.piv = new int[m];
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,67,for (int i = m; --i >= 0;) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,68,piv[i] = i;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,70,pivsign = 1;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,72,if (m * n == 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,74,return; // nothing to do
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,79,for (int i = 0; i < m; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,83,IntArrayList nonZeroIndexes =
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,84,new IntArrayList(); // sparsity
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,86,Mult multFunction = Mult.mult(0);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,90,for (int j = 0; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,97,int cardinality = nonZeroIndexes.size();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,101,for (int i = 0; i < m; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,102,int kmax = Math.min(i, j);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,103,double s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,104,if (sparse) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,110,double after = before - s;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,113,if (sparse) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,114,if (before == 0 && after != 0) { // nasty bug fixed!
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,115,int pos = nonZeroIndexes.binarySearch(i);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,116,pos = -pos - 1;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,117,nonZeroIndexes.beforeInsert(pos, i);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,119,if (before != 0 && after == 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,120,nonZeroIndexes.remove(nonZeroIndexes.binarySearch(i));
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,126,int p = j;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,127,if (p < m) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,129,for (int i = j + 1; i < m; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,131,if (v > max) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,132,p = i;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,133,max = v;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,137,if (p != j) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,139,int k = piv[p];
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,140,piv[p] = piv[j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,141,piv[j] = k;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,142,pivsign = -pivsign;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,146,double jj;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,148,multFunction.setMultiplicator(1 / jj);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,164,public void decompose(DoubleMatrix2D A, int semiBandwidth) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,166,decompose(A);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,167,return;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,171,int m = A.rows();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,172,int n = A.columns();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,175,if (this.piv == null || this.piv.length != m) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,176,this.piv = new int[m];
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,178,for (int i = m; --i >= 0;) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,179,piv[i] = i;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,181,pivsign = 1;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,183,if (m * n == 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,184,setLU(A);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,185,return; // nothing to do
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,189,if (semiBandwidth == 2) { // A is tridiagonal
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,191,if (n > 1) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,192,A.setQuick(1, 0, A.getQuick(1, 0) / A.getQuick(0, 0));
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,195,for (int i = 1; i < n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,196,double ei = A.getQuick(i, i) - A.getQuick(i, i - 1) * A.getQuick(i - 1, i);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,197,A.setQuick(i, i, ei);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,198,if (i < n - 1) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,199,A.setQuick(i + 1, i, A.getQuick(i + 1, i) / ei);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,203,setLU(A);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,211,public double det() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,212,int m = m();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,213,int n = n();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,214,if (m != n) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,215,throw new IllegalArgumentException("Matrix must be square.");
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,219,return 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,222,double det = (double) pivsign;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,223,for (int j = 0; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,226,return det;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,234,protected double[] getDoublePivot() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,235,int m = m();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,236,double[] vals = new double[m];
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,237,for (int i = 0; i < m; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,238,vals[i] = (double) piv[i];
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,240,return vals;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,248,public DoubleMatrix2D getL() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,257,public DoubleMatrix2D getLU() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,266,public int[] getPivot() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,267,return piv;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,275,public DoubleMatrix2D getU() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,284,public boolean isNonsingular() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,285,return isNonSingular;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,293,protected boolean isNonsingular(DoubleMatrix2D matrix) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,294,int m = matrix.rows();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,295,int n = matrix.columns();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,296,double epsilon = algebra.property().tolerance(); // consider numerical instability
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,297,for (int j = Math.min(n, m); --j >= 0;) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,299,if (Math.abs(matrix.getQuick(j, j)) <= epsilon) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,300,return false;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,303,return true;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,321,protected static DoubleMatrix2D lowerTriangular(DoubleMatrix2D A) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,322,int rows = A.rows();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,323,int columns = A.columns();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,324,int min = Math.min(rows, columns);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,325,for (int r = min; --r >= 0;) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,326,for (int c = min; --c >= 0;) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,327,if (r < c) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,328,A.setQuick(r, c, 0);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,330,A.setQuick(r, c, 1);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,334,if (columns > rows) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,335,A.viewPart(0, min, rows, columns - min).assign(0);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,338,return A;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,341,protected int m() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,345,protected int n() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,353,public void setLU(DoubleMatrix2D LU) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,355,this.isNonSingular = isNonsingular(LU);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,367,public void solve(DoubleMatrix1D B) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,369,int m = m();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,370,int n = n();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,371,if (B.size() != m) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,372,throw new IllegalArgumentException("Matrix dimensions must agree.");
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,375,throw new IllegalArgumentException("Matrix is singular.");
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,381,if (this.workDouble == null || this.workDouble.length < m) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,382,this.workDouble = new double[m];
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,384,Algebra.permute(B, this.piv, this.workDouble);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,386,if (m * n == 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,387,return;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,391,for (int k = 0; k < n; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,392,double f = B.getQuick(k);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,393,if (f != 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,394,for (int i = k + 1; i < n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,397,if (v != 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,398,B.setQuick(i, B.getQuick(i) - f * v);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,405,for (int k = n - 1; k >= 0; k--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,408,double f = B.getQuick(k);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,409,if (f != 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,410,for (int i = 0; i < k; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,413,if (v != 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,414,B.setQuick(i, B.getQuick(i) - f * v);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,430,public void solve(DoubleMatrix2D B) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,432,int m = m();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,433,int n = n();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,434,if (B.rows() != m) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,435,throw new IllegalArgumentException("Matrix row dimensions must agree.");
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,438,throw new IllegalArgumentException("Matrix is singular.");
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,444,if (this.work1 == null || this.work1.length < m) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,445,this.work1 = new int[m];
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,448,Algebra.permuteRows(B, this.piv, this.work1);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,450,if (m * n == 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,451,return;
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,453,int nx = B.columns();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,457,for (int k = 0; k < n; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,462,Mult div = Mult.div(0);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,463,PlusMult minusMult = PlusMult.minusMult(0);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,465,IntArrayList nonZeroIndexes =
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,466,new IntArrayList(); // sparsity
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,471,for (int k = 0; k < n; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,478,int cardinality = nonZeroIndexes.size();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,481,for (int i = k + 1; i < n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,486,if (minusMult.getMultiplicator() != 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,487,if (sparse) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,497,for (int k = n - 1; k >= 0; k--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,512,int cardinality = nonZeroIndexes.size();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,518,for (int i = 0; i < k; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,523,if (minusMult.getMultiplicator() != 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,524,if (sparse) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,543,private void solveOld(DoubleMatrix2D B) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,545,int m = m();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,546,int n = n();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,547,if (B.rows() != m) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,548,throw new IllegalArgumentException("Matrix row dimensions must agree.");
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,550,if (!this.isNonsingular()) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,551,throw new IllegalArgumentException("Matrix is singular.");
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,555,int nx = B.columns();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,557,if (this.work1 == null || this.work1.length < m) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,558,this.work1 = new int[m];
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,561,Algebra.permuteRows(B, this.piv, this.work1);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,564,for (int k = 0; k < n; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,565,for (int i = k + 1; i < n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,566,double mult = LU.getQuick(i, k);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,567,if (mult != 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,568,for (int j = 0; j < nx; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,570,B.setQuick(i, j, B.getQuick(i, j) - B.getQuick(k, j) * mult);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,576,for (int k = n - 1; k >= 0; k--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,577,double mult = 1 / LU.getQuick(k, k);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,578,if (mult != 1) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,579,for (int j = 0; j < nx; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,581,B.setQuick(k, j, B.getQuick(k, j) * mult);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,584,for (int i = 0; i < k; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,585,mult = LU.getQuick(i, k);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,586,if (mult != 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,587,for (int j = 0; j < nx; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,589,B.setQuick(i, j, B.getQuick(i, j) - B.getQuick(k, j) * mult);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,604,public String toString() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,605,StringBuilder buf = new StringBuilder();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,607,buf.append("-----------------------------------------------------------------------------\n");
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,608,buf.append("LUDecompositionQuick(A) --> isNonSingular(A), det(A), pivot, L, U, inverse(A)\n");
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,609,buf.append("-----------------------------------------------------------------------------\n");
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,611,buf.append("isNonSingular = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,612,String unknown = "Illegal operation or error: ";
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,613,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,617,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,620,buf.append("\ndet = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,621,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,622,buf.append(String.valueOf(this.det()));
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,625,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,628,buf.append("\npivot = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,629,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,633,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,636,buf.append("\n\nL = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,637,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,638,buf.append(String.valueOf(this.getL()));
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,641,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,644,buf.append("\n\nU = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,645,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,646,buf.append(String.valueOf(this.getU()));
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,649,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,652,buf.append("\n\ninverse(A) = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,654,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,655,this.solve(identity);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,656,buf.append(String.valueOf(identity));
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,659,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,662,return buf.toString();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,670,protected static DoubleMatrix2D upperTriangular(DoubleMatrix2D A) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,671,int rows = A.rows();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,672,int columns = A.columns();
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,673,int min = Math.min(rows, columns);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,674,for (int r = min; --r >= 0;) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,675,for (int c = min; --c >= 0;) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,676,if (r > c) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,677,A.setQuick(r, c, 0);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,681,if (columns < rows) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,682,A.viewPart(min, 0, rows - min, columns).assign(0);
math/src/main/java/org/apache/mahout/math/matrix/linalg/LUDecompositionQuick.java,685,return A;
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,839,String unknown = "Illegal operation or error: ";
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,840,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,849,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,858,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,867,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,875,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,883,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,891,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,899,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,907,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,915,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,923,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,931,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,939,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,947,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,955,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,963,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,971,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,979,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,987,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,995,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,1003,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,1011,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,1019,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,1027,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,1035,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,1043,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/Property.java,1070,int maxLength = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,2,Copyright � 1999 CERN - European Organization for Nuclear Research.
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,3,Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,4,is hereby granted without fee, provided that the above copyright notice appear in all copies and
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,5,that both that copyright notice and this permission notice appear in supporting documentation.
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,6,CERN makes no representations about the suitability of this software for any purpose.
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,7,It is provided "as is" without expressed or implied warranty.
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,9,package org.apache.mahout.math.matrix.linalg;
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,11,import org.apache.mahout.math.function.Functions;
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,13,import org.apache.mahout.math.matrix.DoubleMatrix1D;
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,14,import org.apache.mahout.math.matrix.DoubleMatrix2D;
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,17,For an <tt>m x n</tt> matrix <tt>A</tt> with <tt>m >= n</tt>, the QR decomposition is an <tt>m x n</tt>
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,18,orthogonal matrix <tt>Q</tt> and an <tt>n x n</tt> upper triangular matrix <tt>R</tt> so that
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,19,<tt>A = Q*R</tt>.
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,20,<P>
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,21,The QR decompostion always exists, even if the matrix does not have
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,22,full rank, so the constructor will never fail.  The primary use of the
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,23,QR decomposition is in the least squares solution of nonsquare systems
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,24,of simultaneous linear equations.  This will fail if <tt>isFullRank()</tt>
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,25,returns <tt>false</tt>.
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,33,private final DoubleMatrix2D QR;
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,40,private final DoubleMatrix1D Rdiag;
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,52,public QRDecomposition(DoubleMatrix2D A) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,53,Property.checkRectangular(A);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,56,QR = A.copy();
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,57,m = A.rows();
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,58,n = A.columns();
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,59,Rdiag = A.like1D(n);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,64,DoubleMatrix1D[] QRcolumns = new DoubleMatrix1D[n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,65,DoubleMatrix1D[] QRcolumnsPart = new DoubleMatrix1D[n];
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,66,for (int k = 0; k < n; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,67,QRcolumns[k] = QR.viewColumn(k);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,68,QRcolumnsPart[k] = QR.viewColumn(k).viewPart(k, m - k);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,72,for (int k = 0; k < n; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,75,double nrm = 0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,78,for (int i = k; i < m; i++) { // fixes bug reported by hong.44@osu.edu
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,79,nrm = Algebra.hypot(nrm, QR.getQuick(i, k));
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,83,if (nrm != 0.0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,85,if (QR.getQuick(k, k) < 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,86,nrm = -nrm;
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,88,QRcolumnsPart[k].assign(Functions.div(nrm));
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,90,for (int i = k; i < m; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,91,QR[i][k] /= nrm;
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,95,QR.setQuick(k, k, QR.getQuick(k, k) + 1);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,98,for (int j = k + 1; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,99,DoubleMatrix1D QRcolj = QR.viewColumn(j).viewPart(k, m - k);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,100,double s = QRcolumnsPart[k].zDotProduct(QRcolj);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,103,DoubleMatrix1D QRcolj = QR.viewColumn(j).viewPart(k,m-k);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,104,double s = QRcolumnsPart[k].zDotProduct(QRcolumns[j]);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,105,double s = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,106,for (int i = k; i < m; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,107,s += QR[i][k]*QR[i][j];
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,110,s = -s / QR.getQuick(k, k);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,113,for (int i = k; i < m; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,114,QR.setQuick(i, j, QR.getQuick(i, j) + s * QR.getQuick(i, k));
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,119,Rdiag.setQuick(k, -nrm);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,128,public DoubleMatrix2D getH() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,129,return Algebra.trapezoidalLower(QR.copy());
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,137,public DoubleMatrix2D getQ() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,138,DoubleMatrix2D Q = QR.like();
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,140,for (int k = n - 1; k >= 0; k--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,141,DoubleMatrix1D QRcolk = QR.viewColumn(k).viewPart(k, m - k);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,142,Q.setQuick(k, k, 1);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,143,for (int j = k; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,144,if (QR.getQuick(k, k) != 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,145,DoubleMatrix1D Qcolj = Q.viewColumn(j).viewPart(k, m - k);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,146,double s = QRcolk.zDotProduct(Qcolj);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,147,s = -s / QR.getQuick(k, k);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,148,Qcolj.assign(QRcolk, Functions.plusMult(s));
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,152,return Q;
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,160,public DoubleMatrix2D getR() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,161,DoubleMatrix2D R = QR.like(n, n);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,162,for (int i = 0; i < n; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,163,for (int j = 0; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,164,if (i < j) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,165,R.setQuick(i, j, QR.getQuick(i, j));
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,167,R.setQuick(i, j, Rdiag.getQuick(i));
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,169,R.setQuick(i, j, 0);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,173,return R;
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,181,public boolean hasFullRank() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,182,for (int j = 0; j < n; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,183,if (Rdiag.getQuick(j) == 0) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,184,return false;
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,187,return true;
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,198,public DoubleMatrix2D solve(DoubleMatrix2D B) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,199,if (B.rows() != m) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,200,throw new IllegalArgumentException("Matrix row dimensions must agree.");
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,202,if (!this.hasFullRank()) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,203,throw new IllegalArgumentException("Matrix is rank deficient.");
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,207,int nx = B.columns();
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,208,DoubleMatrix2D X = B.copy();
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,211,for (int k = 0; k < n; k++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,212,for (int j = 0; j < nx; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,213,double s = 0.0;
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,214,for (int i = k; i < m; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,215,s += QR.getQuick(i, k) * X.getQuick(i, j);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,217,s = -s / QR.getQuick(k, k);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,218,for (int i = k; i < m; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,219,X.setQuick(i, j, X.getQuick(i, j) + s * QR.getQuick(i, k));
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,224,for (int k = n - 1; k >= 0; k--) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,225,for (int j = 0; j < nx; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,226,X.setQuick(k, j, X.getQuick(k, j) / Rdiag.getQuick(k));
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,228,for (int i = 0; i < k; i++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,229,for (int j = 0; j < nx; j++) {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,230,X.setQuick(i, j, X.getQuick(i, j) - X.getQuick(k, j) * QR.getQuick(i, k));
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,234,return X.viewPart(0, 0, n, nx);
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,245,public String toString() {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,246,StringBuilder buf = new StringBuilder();
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,248,buf.append("-----------------------------------------------------------------\n");
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,249,buf.append("QRDecomposition(A) --> hasFullRank(A), H, Q, R, pseudo inverse(A)\n");
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,250,buf.append("-----------------------------------------------------------------\n");
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,252,buf.append("hasFullRank = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,253,String unknown = "Illegal operation or error: ";
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,254,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,255,buf.append(String.valueOf(this.hasFullRank()));
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,258,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,261,buf.append("\n\nH = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,262,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,263,buf.append(String.valueOf(this.getH()));
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,266,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,269,buf.append("\n\nQ = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,270,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,271,buf.append(String.valueOf(this.getQ()));
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,274,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,277,buf.append("\n\nR = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,278,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,279,buf.append(String.valueOf(this.getR()));
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,282,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,285,buf.append("\n\npseudo inverse(A) = ");
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,286,try {
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,290,buf.append(unknown).append(exc.getMessage());
math/src/main/java/org/apache/mahout/math/matrix/linalg/QRDecomposition.java,293,return buf.toString();
core/src/main/java/org/apache/mahout/driver/MahoutDriver.java,206,log.warn("Unable to add class: " + classString, e);
core/src/main/java/org/apache/mahout/driver/MahoutDriver.java,208,log.warn("Unable to add class: " + classString, t);
core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java,34,private final Collection<String> labels;
core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java,36,private final Map<String,Integer> labelMap = new HashMap<String,Integer>();
core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java,43,this.labels = labels;
core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java,57,return labels;
core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java,64,for (int i = 0; i < labels.size(); i++) {
core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java,81,for (int i = 0; i < labels.size(); i++) {
core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java,130,for (String correctLabel : this.labels) {
core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java,131,for (String classifiedLabel : this.labels) {
core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java,145,for (String correctLabel : this.labels) {
core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java,147,.append('\t');
core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java,152,for (String correctLabel : this.labels) {
core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java,154,for (String classifiedLabel : this.labels) {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java,184,public void updateItemPref(long itemID, float prefDelta, boolean remove) {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java,185,if (!remove && stdDevWeighted) {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java,195,if (remove) {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java,196,average.removeDatum(prefDelta);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java,198,average.changeDatum(-prefDelta);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java,201,if (remove) {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java,202,average.removeDatum(-prefDelta);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java,204,average.changeDatum(prefDelta);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/SlopeOneRecommender.java,179,float prefDelta;
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/SlopeOneRecommender.java,181,Float oldPref = dataModel.getPreferenceValue(userID, itemID);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/SlopeOneRecommender.java,182,prefDelta = oldPref == null ? value : value - oldPref;
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/SlopeOneRecommender.java,184,prefDelta = value;
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/SlopeOneRecommender.java,187,diffStorage.updateItemPref(itemID, prefDelta, false);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/SlopeOneRecommender.java,196,diffStorage.updateItemPref(itemID, oldPref, true);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,272,public void updateItemPref(long itemID, float prefDelta, boolean remove) {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,281,if (remove) {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,282,average.removeDatum(prefDelta);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,284,average.changeDatum(-prefDelta);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,287,if (remove) {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,288,average.removeDatum(-prefDelta);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/file/FileDiffStorage.java,290,average.changeDatum(prefDelta);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/jdbc/AbstractJDBCDiffStorage.java,66,private final String[] removeDiffSQLs;
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/jdbc/AbstractJDBCDiffStorage.java,79,String[] removeDiffSQLs,
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/jdbc/AbstractJDBCDiffStorage.java,91,AbstractJDBCComponent.checkNotNullAndLog("removeDiffSQLs", removeDiffSQLs);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/jdbc/AbstractJDBCDiffStorage.java,105,this.removeDiffSQLs = removeDiffSQLs;
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/jdbc/AbstractJDBCDiffStorage.java,220,public void updateItemPref(long itemID, float prefDelta, boolean remove) throws TasteException {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/jdbc/AbstractJDBCDiffStorage.java,224,if (remove) {
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/jdbc/AbstractJDBCDiffStorage.java,225,doPartialUpdate(removeDiffSQLs[0], itemID, prefDelta, conn);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/jdbc/AbstractJDBCDiffStorage.java,226,doPartialUpdate(removeDiffSQLs[1], itemID, prefDelta, conn);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/jdbc/AbstractJDBCDiffStorage.java,228,doPartialUpdate(updateDiffSQLs[0], itemID, prefDelta, conn);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/jdbc/AbstractJDBCDiffStorage.java,229,doPartialUpdate(updateDiffSQLs[1], itemID, prefDelta, conn);
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/jdbc/MySQLJDBCDiffStorage.java,121,new String[] {
core/src/main/java/org/apache/mahout/cf/taste/recommender/slopeone/DiffStorage.java,71,void updateItemPref(long itemID, float prefDelta, boolean remove) throws TasteException;
core/src/main/java/org/apache/mahout/classifier/Classify.java,139,datastore = new HBaseBayesDatastore(modelBasePath, params);
core/src/main/java/org/apache/mahout/classifier/Classify.java,143,datastore = new HBaseBayesDatastore(modelBasePath, params);
core/src/main/java/org/apache/mahout/classifier/bayes/TestClassifier.java,167,params.set("basePath", modelBasePath);
core/src/main/java/org/apache/mahout/classifier/bayes/TestClassifier.java,216,datastore = new HBaseBayesDatastore(params.get("basePath"), params);
core/src/main/java/org/apache/mahout/classifier/bayes/TestClassifier.java,220,datastore = new HBaseBayesDatastore(params.get("basePath"), params);
core/src/main/java/org/apache/mahout/classifier/bayes/common/BayesParameters.java,25,public class BayesParameters extends Parameters {
core/src/main/java/org/apache/mahout/classifier/bayes/datastore/HBaseBayesDatastore.java,70,public HBaseBayesDatastore(String hbaseTable, Parameters params) {
core/src/main/java/org/apache/mahout/classifier/bayes/datastore/HBaseBayesDatastore.java,71,this.hbaseTable = hbaseTable;
core/src/main/java/org/apache/mahout/classifier/bayes/datastore/InMemoryBayesDatastore.java,29,import org.apache.mahout.common.Parameters;
core/src/main/java/org/apache/mahout/classifier/bayes/datastore/InMemoryBayesDatastore.java,56,private final Parameters params;
core/src/main/java/org/apache/mahout/classifier/bayes/datastore/InMemoryBayesDatastore.java,64,public InMemoryBayesDatastore(Parameters params) {
core/src/main/java/org/apache/mahout/classifier/bayes/datastore/InMemoryBayesDatastore.java,65,String basePath = params.get("basePath");
core/src/main/java/org/apache/mahout/classifier/bayes/datastore/InMemoryBayesDatastore.java,78,String basePath = params.get("basePath");
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesClassifierMapper.java,40,import org.apache.mahout.common.Parameters;
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesClassifierMapper.java,100,Parameters params = Parameters.fromString(job.get("bayes.parameters", ""));
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesClassifierMapper.java,122,datastore = new HBaseBayesDatastore(params.get("basePath"), params);
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesClassifierMapper.java,126,datastore = new HBaseBayesDatastore(params.get("basePath"), params);
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesClassifierMapper.java,138,gramSize = Integer.valueOf(params.get("gramSize"));
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesThetaNormalizerMapper.java,102,Parameters params = Parameters.fromString(job.get("bayes.parameters", ""));
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesThetaNormalizerReducer.java,84,Parameters params = Parameters.fromString(job.get("bayes.parameters", ""));
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/cbayes/CBayesThetaNormalizerMapper.java,132,Parameters params = Parameters.fromString(job.get("bayes.parameters", ""));
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/cbayes/CBayesThetaNormalizerReducer.java,85,Parameters params = Parameters.fromString(job.get("bayes.parameters", ""));
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesFeatureMapper.java,36,import org.apache.mahout.common.Parameters;
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesFeatureMapper.java,169,Parameters params = Parameters.fromString(job.get("bayes.parameters", ""));
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesFeatureMapper.java,170,gramSize = Integer.valueOf(params.get("gramSize"));
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesTfIdfReducer.java,102,Parameters params = Parameters.fromString(job.get("bayes.parameters", ""));
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesWeightSummerReducer.java,95,Parameters params = Parameters.fromString(job.get("bayes.parameters", ""));
core/src/main/java/org/apache/mahout/common/Parameters.java,42,private Parameters(Map<String,String> params) {
core/src/main/java/org/apache/mahout/common/Parameters.java,62,conf
core/src/main/java/org/apache/mahout/common/Parameters.java,63,.set("io.serializations",
core/src/main/java/org/apache/mahout/common/Parameters.java,80,public static Parameters fromString(String serializedString) throws IOException {
core/src/main/java/org/apache/mahout/common/Parameters.java,82,conf
core/src/main/java/org/apache/mahout/common/Parameters.java,83,.set("io.serializations",
core/src/main/java/org/apache/mahout/common/Parameters.java,88,params = mapStringifier.fromString(serializedString);
core/src/main/java/org/apache/mahout/common/Parameters.java,89,return new Parameters(params);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/AggregatorReducer.java,52,Parameters params = Parameters.fromString(context.getConfiguration().get("pfp.parameters", ""));
examples/src/main/java/org/apache/mahout/fpm/pfpgrowth/dataset/KeyBasedStringTupleMapper.java,73,Parameters params = Parameters.fromString(context.getConfiguration().get("job.parameters", ""));
examples/src/main/java/org/apache/mahout/fpm/pfpgrowth/dataset/KeyBasedStringTupleReducer.java,34,protected void reduce(Text key, Iterable<StringTuple> values, Context context) throws IOException,
examples/src/main/java/org/apache/mahout/fpm/pfpgrowth/dataset/KeyBasedStringTupleReducer.java,35,InterruptedException {
examples/src/main/java/org/apache/mahout/fpm/pfpgrowth/dataset/KeyBasedStringTupleReducer.java,71,Parameters params = Parameters.fromString(context.getConfiguration().get("job.parameters", ""));
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,99,String matrixClassName = in.readUTF();
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,100,Matrix matrix;
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,101,try {
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,103,.newInstance();
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,105,throw new IllegalStateException(e);
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,107,throw new IllegalStateException(e);
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,109,throw new IllegalStateException(e);
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,112,return matrix;
core/src/main/java/org/apache/mahout/math/MatrixWritable.java,118,out.writeUTF(matrix.getClass().getName());
core/src/main/java/org/apache/mahout/math/VectorWritable.java,81,new VectorWritable(vector).write(out);
math/src/main/java/org/apache/mahout/math/SparseMatrix.java,20,import java.util.Map;
core/src/main/java/org/apache/mahout/df/builder/DefaultTreeBuilder.java,104,Node loChild = build(rng, loSubset);
core/src/main/java/org/apache/mahout/df/builder/DefaultTreeBuilder.java,123,if (!alreadySelected) {
math/src/main/java/org/apache/mahout/math/JsonMatrixAdapter.java,20,import com.google.gson.GsonBuilder;
math/src/main/java/org/apache/mahout/math/JsonMatrixAdapter.java,48,GsonBuilder builder = new GsonBuilder();
math/src/main/java/org/apache/mahout/math/JsonMatrixAdapter.java,51,Gson gson = builder.create();
math/src/main/java/org/apache/mahout/math/JsonMatrixAdapter.java,54,obj.add(MATRIX, new JsonPrimitive(gson.toJson(src)));
math/src/main/java/org/apache/mahout/math/JsonMatrixAdapter.java,64,GsonBuilder builder = new GsonBuilder();
math/src/main/java/org/apache/mahout/math/JsonMatrixAdapter.java,67,Gson gson = builder.create();
math/src/main/java/org/apache/mahout/math/JsonMatrixAdapter.java,70,String matrix = obj.get(MATRIX).getAsString();
math/src/main/java/org/apache/mahout/math/JsonMatrixAdapter.java,74,cl = ccl.loadClass(klass);
math/src/main/java/org/apache/mahout/math/JsonMatrixAdapter.java,78,return (Matrix) gson.fromJson(matrix, cl);
math/src/main/java/org/apache/mahout/math/MatrixView.java,42,public MatrixView(Matrix matrix, int[] offset, int[] cardinality) {
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,174,GsonBuilder builder = new GsonBuilder();
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,177,Gson gson = builder.create();
core/src/main/java/org/apache/mahout/classifier/bayes/TestClassifier.java,92,Option gramSizeOpt = obuilder.withLongName("gramSize").withRequired(true).withArgument(
core/src/main/java/org/apache/mahout/classifier/bayes/TestClassifier.java,103,Option typeOpt = obuilder.withLongName("classifierType").withRequired(true).withArgument(
core/src/main/java/org/apache/mahout/classifier/bayes/TestClassifier.java,107,Option dataSourceOpt = obuilder.withLongName("dataSource").withRequired(true).withArgument(
core/src/main/java/org/apache/mahout/clustering/canopy/ClusterMapper.java,68,if ((canopyPath != null) && (canopyPath.length() > 0)) {
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,311,try {
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,314,return isConverged(clustersOut, conf, fs);
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,316,log.warn(e.toString(), e);
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java,317,return true;
core/src/main/java/org/apache/mahout/clustering/lda/LDADriver.java,313,job.waitForCompletion(true);
core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansClusterMapper.java,73,throw new IllegalStateException("Cluster is empty!");
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/canopy/InputMapper.java,58,try {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/canopy/InputMapper.java,59,Vector result = (Vector) constructor.newInstance(doubles.size());
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/canopy/InputMapper.java,60,int index = 0;
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/canopy/InputMapper.java,61,for (Double d : doubles) {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/canopy/InputMapper.java,62,result.set(index++, d);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/canopy/InputMapper.java,68,throw new IllegalStateException(e);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/canopy/InputMapper.java,70,throw new IllegalStateException(e);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/canopy/InputMapper.java,72,throw new IllegalStateException(e);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/InputMapper.java,53,Vector point = new DenseVector(doubles.size());
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/InputMapper.java,54,int index = 0;
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/InputMapper.java,55,for (Double d : doubles) {
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/InputMapper.java,56,point.set(index++, d);
core/src/main/java/org/apache/mahout/clustering/lda/LDADriver.java,197,log.info("Iteration {}", iteration);
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyDriver.java,141,conf.set(MeanShiftCanopyConfigKeys.DISTANCE_MEASURE_KEY, measureClassName);
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyDriver.java,142,conf.set(MeanShiftCanopyConfigKeys.CLUSTER_CONVERGENCE_KEY, String.valueOf(convergenceDelta));
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyDriver.java,143,conf.set(MeanShiftCanopyConfigKeys.T1_KEY, String.valueOf(t1));
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyDriver.java,144,conf.set(MeanShiftCanopyConfigKeys.T2_KEY, String.valueOf(t2));
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansMapper.java,76,throw new IllegalStateException("Cluster is empty!!!");
core/src/main/java/org/apache/mahout/classifier/bayes/TestClassifier.java,135,BayesParameters params = new BayesParameters(gramSize);
core/src/main/java/org/apache/mahout/classifier/bayes/TestClassifier.java,137,String modelBasePath = (String) cmdLine.getValue(pathOpt);
core/src/main/java/org/apache/mahout/classifier/bayes/TestClassifier.java,139,String classifierType = (String) cmdLine.getValue(typeOpt);
core/src/main/java/org/apache/mahout/classifier/bayes/TestClassifier.java,140,String dataSource = (String) cmdLine.getValue(dataSourceOpt);
core/src/main/java/org/apache/mahout/classifier/bayes/TestClassifier.java,142,String defaultCat = "unknown";
core/src/main/java/org/apache/mahout/classifier/bayes/TestClassifier.java,147,String encoding = "UTF-8";
core/src/main/java/org/apache/mahout/classifier/bayes/TestClassifier.java,152,String alphaI = "1.0";
core/src/main/java/org/apache/mahout/classifier/bayes/TestClassifier.java,161,String classificationMethod = "sequential";
core/src/main/java/org/apache/mahout/classifier/bayes/TrainClassifier.java,74,Option gramSizeOpt = obuilder.withLongName("gramSize").withRequired(true).withArgument(
core/src/main/java/org/apache/mahout/classifier/bayes/TrainClassifier.java,82,Option typeOpt = obuilder.withLongName("classifierType").withRequired(true).withArgument(
core/src/main/java/org/apache/mahout/classifier/bayes/TrainClassifier.java,85,Option dataSourceOpt = obuilder.withLongName("dataSource").withRequired(true).withArgument(
core/src/main/java/org/apache/mahout/classifier/bayes/TrainClassifier.java,107,String alphaI = "1.0";
core/src/main/java/org/apache/mahout/classifier/bayes/TrainClassifier.java,109,alphaI = (String) cmdLine.getValue(alphaOpt);
core/src/main/java/org/apache/mahout/classifier/bayes/TrainClassifier.java,112,params.set("alpha_i", alphaI);
core/src/main/java/org/apache/mahout/classifier/bayes/TrainClassifier.java,115,params.set("dataSource", "hbase");
core/src/main/java/org/apache/mahout/classifier/bayes/TrainClassifier.java,117,params.set("dataSource", "hdfs");
core/src/main/java/org/apache/mahout/classifier/bayes/TrainClassifier.java,121,log.info("Training Bayes Classifier");
utils/src/main/java/org/apache/mahout/text/SparseVectorsFromSequenceFiles.java,119,helpOpt).withOption(sequentialAccessVectorOpt).create();
utils/src/main/java/org/apache/mahout/text/SparseVectorsFromSequenceFiles.java,222,minLLRValue, reduceTasks, chunkSize, sequentialAccessOutput);
core/src/main/java/org/apache/mahout/clustering/lda/LDADriver.java,200,double ll = runIteration(input, stateIn, stateOut, numTopics, numWords, topicSmoothing, numReducers);
core/src/main/java/org/apache/mahout/clustering/lda/LDADriver.java,291,Configuration conf = new Configuration();
core/src/main/java/org/apache/mahout/clustering/lda/LDADriver.java,308,job.setNumReduceTasks(numReducers);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPGrowth.java,107,fList.add(new Pair<A,Long>(e.getKey(), e.getValue().longValue()));
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,304,clone.rowLabelBindings = (Map<String, Integer>) ((HashMap<String, Integer>) rowLabelBindings).clone();
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,307,clone.columnLabelBindings = (Map<String, Integer>) ((HashMap<String, Integer>) columnLabelBindings).clone();
math/src/main/java/org/apache/mahout/math/DenseMatrix.java,31,protected int columnSize() {
math/src/main/java/org/apache/mahout/math/DenseMatrix.java,32,return values[0].length;
math/src/main/java/org/apache/mahout/math/DenseMatrix.java,35,protected int rowSize() {
math/src/main/java/org/apache/mahout/math/DenseMatrix.java,36,return values.length;
math/src/main/java/org/apache/mahout/math/DenseMatrix.java,59,public int[] size() {
math/src/main/java/org/apache/mahout/math/DenseMatrix.java,60,int[] result = new int[2];
math/src/main/java/org/apache/mahout/math/DenseMatrix.java,61,result[ROW] = rowSize();
math/src/main/java/org/apache/mahout/math/DenseMatrix.java,62,result[COL] = columnSize();
math/src/main/java/org/apache/mahout/math/DenseMatrix.java,63,return result;
math/src/main/java/org/apache/mahout/math/MatrixView.java,29,private int[] cardinality;
math/src/main/java/org/apache/mahout/math/MatrixView.java,31,public MatrixView() {
math/src/main/java/org/apache/mahout/math/MatrixView.java,45,this.cardinality = cardinality;
math/src/main/java/org/apache/mahout/math/MatrixView.java,48,public int[] size() {
math/src/main/java/org/apache/mahout/math/MatrixView.java,49,return cardinality;
math/src/main/java/org/apache/mahout/math/MatrixView.java,66,return matrix.like(cardinality[ROW], cardinality[COL]);
math/src/main/java/org/apache/mahout/math/MatrixView.java,97,if (cardinality[ROW] != other.size()) {
math/src/main/java/org/apache/mahout/math/MatrixView.java,100,for (int row = 0; row < cardinality[ROW]; row++) {
math/src/main/java/org/apache/mahout/math/MatrixView.java,108,if (cardinality[COL] != other.size()) {
math/src/main/java/org/apache/mahout/math/MatrixView.java,111,for (int col = 0; col < cardinality[COL]; col++) {
math/src/main/java/org/apache/mahout/math/MatrixView.java,119,if (column < 0 || column >= cardinality[COL]) {
math/src/main/java/org/apache/mahout/math/MatrixView.java,122,return new VectorView(matrix.getColumn(column + offset[COL]), offset[ROW],
math/src/main/java/org/apache/mahout/math/MatrixView.java,123,cardinality[ROW]);
math/src/main/java/org/apache/mahout/math/MatrixView.java,127,if (row < 0 || row >= cardinality[ROW]) {
math/src/main/java/org/apache/mahout/math/MatrixView.java,131,cardinality[COL]);
math/src/main/java/org/apache/mahout/math/SparseColumnMatrix.java,26,private int[] cardinality;
math/src/main/java/org/apache/mahout/math/SparseColumnMatrix.java,61,public int[] size() {
math/src/main/java/org/apache/mahout/math/SparseColumnMatrix.java,62,return cardinality;
math/src/main/java/org/apache/mahout/math/SparseMatrix.java,27,private int[] cardinality;
math/src/main/java/org/apache/mahout/math/SparseMatrix.java,63,public int[] size() {
math/src/main/java/org/apache/mahout/math/SparseMatrix.java,64,return cardinality;
math/src/main/java/org/apache/mahout/math/SparseRowMatrix.java,26,private int[] cardinality;
math/src/main/java/org/apache/mahout/math/SparseRowMatrix.java,77,public int[] size() {
math/src/main/java/org/apache/mahout/math/SparseRowMatrix.java,78,return cardinality;
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,12,import org.apache.mahout.math.jet.random.engine.RandomEngine;
math/src/main/java/org/apache/mahout/math/jet/random/PoissonSlow.java,74,if (xm == -1.0) {
math/src/main/java/org/apache/mahout/math/jet/random/PoissonSlow.java,77,if (xm < SWITCH_MEAN) {
math/src/main/java/org/apache/mahout/math/jet/random/PoissonSlow.java,97,em = sq * y + xm;
math/src/main/java/org/apache/mahout/math/jet/random/PoissonSlow.java,104,return (int) xm;
math/src/main/java/org/apache/mahout/math/GenericPermuting.java,159,Uniform gen = new Uniform(new MersenneTwister((int) p));
math/src/main/java/org/apache/mahout/math/jet/random/AbstractDistribution.java,32,import org.apache.mahout.math.jet.random.engine.RandomEngine;
math/src/main/java/org/apache/mahout/math/jet/random/AbstractDistribution.java,37,protected RandomEngine randomGenerator;
math/src/main/java/org/apache/mahout/math/jet/random/AbstractDistribution.java,66,public Object clone() {
math/src/main/java/org/apache/mahout/math/jet/random/AbstractDistribution.java,67,AbstractDistribution copy = (AbstractDistribution) super.clone();
math/src/main/java/org/apache/mahout/math/jet/random/AbstractDistribution.java,68,if (this.randomGenerator != null) {
math/src/main/java/org/apache/mahout/math/jet/random/AbstractDistribution.java,69,copy.randomGenerator = (RandomEngine) this.randomGenerator.clone();
math/src/main/java/org/apache/mahout/math/jet/random/AbstractDistribution.java,71,return copy;
math/src/main/java/org/apache/mahout/math/jet/random/AbstractDistribution.java,75,protected RandomEngine getRandomGenerator() {
math/src/main/java/org/apache/mahout/math/jet/random/AbstractDistribution.java,76,return randomGenerator;
math/src/main/java/org/apache/mahout/math/jet/random/AbstractDistribution.java,83,public static RandomEngine makeDefaultGenerator() {
math/src/main/java/org/apache/mahout/math/jet/random/AbstractDistribution.java,84,return org.apache.mahout.math.jet.random.engine.RandomEngine.makeDefault();
math/src/main/java/org/apache/mahout/math/jet/random/AbstractDistribution.java,88,public abstract double nextDouble();
math/src/main/java/org/apache/mahout/math/jet/random/AbstractDistribution.java,94,public int nextInt() {
math/src/main/java/org/apache/mahout/math/jet/random/AbstractDistribution.java,95,return (int) Math.round(nextDouble());
math/src/main/java/org/apache/mahout/math/jet/random/AbstractDistribution.java,115,protected void setRandomGenerator(RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,51,private static final Beta shared = new Beta(10.0, 10.0, makeDefaultGenerator());
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,54,public Beta(double alpha, double beta, RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,62,protected double b00(double a, double b, RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,84,if ((U = randomGenerator.raw() * p2) <= p1) {       //  X < t
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,120,protected double b01(double a, double b, RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,150,if ((U = randomGenerator.raw() * p2) <= p1) {       //  X < t
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,154,if ((V = randomGenerator.raw()) <= 1.0 - ml * X) {
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,186,protected double b1prs(double p, double q, RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,250,if ((U = randomGenerator.raw() * p4) <= p1) {
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,310,W = randomGenerator.raw() * U;
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,322,W = randomGenerator.raw() * U;
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,403,return (Math.exp(Math.log(randomGenerator.raw()) / alpha));
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,413,return (Math.exp(Math.log(randomGenerator.raw()) / alpha));
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,439,public static double staticNextDouble(double alpha, double beta) {
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,440,synchronized (shared) {
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,441,return shared.nextDouble(alpha, beta);
math/src/main/java/org/apache/mahout/math/jet/random/Binomial.java,12,import org.apache.mahout.math.jet.random.engine.RandomEngine;
math/src/main/java/org/apache/mahout/math/jet/random/Binomial.java,32,private static final Binomial shared = new Binomial(1, 0.5, makeDefaultGenerator());
math/src/main/java/org/apache/mahout/math/jet/random/Binomial.java,42,public Binomial(int n, double p, RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/Binomial.java,137,U = randomGenerator.raw();
math/src/main/java/org/apache/mahout/math/jet/random/Binomial.java,141,U = randomGenerator.raw();
math/src/main/java/org/apache/mahout/math/jet/random/Binomial.java,157,double V = randomGenerator.raw();
math/src/main/java/org/apache/mahout/math/jet/random/Binomial.java,158,if ((U = randomGenerator.raw() * p4) <= p1) {    // triangular region
math/src/main/java/org/apache/mahout/math/jet/random/Binomial.java,239,public int nextInt() {
math/src/main/java/org/apache/mahout/math/jet/random/Binomial.java,240,return generateBinomial(n, p);
math/src/main/java/org/apache/mahout/math/jet/random/BreitWigner.java,22,private static final BreitWigner shared = new BreitWigner(1.0, 0.2, 1.0, makeDefaultGenerator());
math/src/main/java/org/apache/mahout/math/jet/random/BreitWigner.java,29,public BreitWigner(double mean, double gamma, double cut, RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/BreitWigner.java,53,rval = 2.0 * randomGenerator.raw() - 1.0;
math/src/main/java/org/apache/mahout/math/jet/random/BreitWigner.java,58,rval = 2.0 * randomGenerator.raw() - 1.0;
math/src/main/java/org/apache/mahout/math/jet/random/BreitWignerMeanSquare.java,20,private static final BreitWigner shared = new BreitWignerMeanSquare(1.0, 0.2, 1.0, makeDefaultGenerator());
math/src/main/java/org/apache/mahout/math/jet/random/BreitWignerMeanSquare.java,27,public BreitWignerMeanSquare(double mean, double gamma, double cut, RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/ChiSquare.java,27,private static final ChiSquare shared = new ChiSquare(1.0, makeDefaultGenerator());
math/src/main/java/org/apache/mahout/math/jet/random/ChiSquare.java,35,public ChiSquare(double freedom, RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/ChiSquare.java,80,u = randomGenerator.raw();
math/src/main/java/org/apache/mahout/math/jet/random/ChiSquare.java,81,v = randomGenerator.raw() * 0.857763884960707;
math/src/main/java/org/apache/mahout/math/jet/random/ChiSquare.java,111,u = randomGenerator.raw();
math/src/main/java/org/apache/mahout/math/jet/random/ChiSquare.java,112,v = randomGenerator.raw() * vd + vm;
math/src/main/java/org/apache/mahout/math/jet/random/Empirical.java,34,public Empirical(double[] pdf, int interpolationType, RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/Empirical.java,68,double rand = randomGenerator.raw();
math/src/main/java/org/apache/mahout/math/jet/random/EmpiricalWalker.java,139,public EmpiricalWalker(double[] pdf, int interpolationType, RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/EmpiricalWalker.java,180,double u = this.randomGenerator.raw();
math/src/main/java/org/apache/mahout/math/jet/random/Exponential.java,23,public Exponential(double lambda, RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/ExponentialPower.java,23,private static final ExponentialPower shared = new ExponentialPower(1.0, makeDefaultGenerator());
math/src/main/java/org/apache/mahout/math/jet/random/ExponentialPower.java,30,public ExponentialPower(double tau, RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,84,double p = b * randomGenerator.raw();
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,87,if (Math.log(randomGenerator.raw()) <= -gds) {
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,92,if (Math.log(randomGenerator.raw()) <= ((alpha - 1.0) * Math.log(gds))) {
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,112,v1 = 2.0 * randomGenerator.raw() - 1.0;
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,113,double v2 = 2.0 * randomGenerator.raw() - 1.0;
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,123,double u = randomGenerator.raw();
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,197,e = -Math.log(randomGenerator.raw());
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,198,u = randomGenerator.raw();
math/src/main/java/org/apache/mahout/math/jet/random/HyperGeometric.java,37,private static final HyperGeometric shared = new HyperGeometric(1, 1, 1, makeDefaultGenerator());
math/src/main/java/org/apache/mahout/math/jet/random/HyperGeometric.java,40,public HyperGeometric(int N, int s, int n, RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/HyperGeometric.java,51,protected int hmdu(int N, int M, int n, RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/HyperGeometric.java,85,if ((U = randomGenerator.raw() - fm) <= 0.0) {
math/src/main/java/org/apache/mahout/math/jet/random/HyperGeometric.java,118,protected int hprs(int N, int M, int n, RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/HyperGeometric.java,191,if ((U = randomGenerator.raw() * p6) < p2) {    // centre left
math/src/main/java/org/apache/mahout/math/jet/random/HyperGeometric.java,204,Dk = (int) (dl * randomGenerator.raw()) + 1;
math/src/main/java/org/apache/mahout/math/jet/random/HyperGeometric.java,231,Dk = (int) (dr * randomGenerator.raw()) + 1;
math/src/main/java/org/apache/mahout/math/jet/random/HyperGeometric.java,246,Y = randomGenerator.raw();
math/src/main/java/org/apache/mahout/math/jet/random/HyperGeometric.java,291,protected int nextInt(int N, int M, int n, RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/Hyperbolic.java,35,private static final Hyperbolic shared = new Hyperbolic(10.0, 10.0, makeDefaultGenerator());
math/src/main/java/org/apache/mahout/math/jet/random/Hyperbolic.java,38,public Hyperbolic(double alpha, double beta, RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/Hyperbolic.java,99,double u = randomGenerator.raw();
math/src/main/java/org/apache/mahout/math/jet/random/Hyperbolic.java,100,double v = randomGenerator.raw();
math/src/main/java/org/apache/mahout/math/jet/random/Logarithmic.java,23,private static final Logarithmic shared = new Logarithmic(0.5, makeDefaultGenerator());
math/src/main/java/org/apache/mahout/math/jet/random/Logarithmic.java,26,public Logarithmic(double p, RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/Logarithmic.java,82,double u = randomGenerator.raw();
math/src/main/java/org/apache/mahout/math/jet/random/Logarithmic.java,98,u = randomGenerator.raw();
math/src/main/java/org/apache/mahout/math/jet/random/NegativeBinomial.java,68,public int nextInt() {
math/src/main/java/org/apache/mahout/math/jet/random/Normal.java,31,public Normal(double mean, double standardDeviation, RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/Normal.java,57,x = 2.0 * randomGenerator.raw() - 1.0;
math/src/main/java/org/apache/mahout/math/jet/random/Normal.java,58,y = 2.0 * randomGenerator.raw() - 1.0;
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,69,public Poisson(double mean, RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,122,RandomEngine gen = this.randomGenerator;
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,145,double u = gen.raw();
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,236,if ((U = gen.raw() * p6) < p2) {         // centre left
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,249,Dk = (int) (dl * gen.raw()) + 1;
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,275,Dk = (int) (dr * gen.raw()) + 1;
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,290,W = gen.raw();
math/src/main/java/org/apache/mahout/math/jet/random/PoissonSlow.java,11,import org.apache.mahout.math.jet.random.engine.RandomEngine;
math/src/main/java/org/apache/mahout/math/jet/random/PoissonSlow.java,34,private static final PoissonSlow shared = new PoissonSlow(0.0, makeDefaultGenerator());
math/src/main/java/org/apache/mahout/math/jet/random/PoissonSlow.java,37,public PoissonSlow(double mean, RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/PoissonSlow.java,62,public int nextInt() {
math/src/main/java/org/apache/mahout/math/jet/random/PoissonSlow.java,63,return nextInt(this.mean);
math/src/main/java/org/apache/mahout/math/jet/random/PoissonSlow.java,82,product *= randomGenerator.raw();
math/src/main/java/org/apache/mahout/math/jet/random/PoissonSlow.java,92,RandomEngine rand = this.randomGenerator;
math/src/main/java/org/apache/mahout/math/jet/random/PoissonSlow.java,96,y = Math.tan(Math.PI * rand.raw());
math/src/main/java/org/apache/mahout/math/jet/random/PoissonSlow.java,114,product *= randomGenerator.raw();
math/src/main/java/org/apache/mahout/math/jet/random/PoissonSlow.java,140,public static int staticNextInt(double mean) {
math/src/main/java/org/apache/mahout/math/jet/random/PoissonSlow.java,141,synchronized (shared) {
math/src/main/java/org/apache/mahout/math/jet/random/PoissonSlow.java,142,shared.setMean(mean);
math/src/main/java/org/apache/mahout/math/jet/random/PoissonSlow.java,143,return shared.nextInt();
math/src/main/java/org/apache/mahout/math/jet/random/StudentT.java,22,private static final StudentT shared = new StudentT(1.0, makeDefaultGenerator());
math/src/main/java/org/apache/mahout/math/jet/random/StudentT.java,30,public StudentT(double freedom, RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/StudentT.java,69,u = 2.0 * randomGenerator.raw() - 1.0;
math/src/main/java/org/apache/mahout/math/jet/random/StudentT.java,70,v = 2.0 * randomGenerator.raw() - 1.0;
math/src/main/java/org/apache/mahout/math/jet/random/Uniform.java,11,import org.apache.mahout.math.jet.random.engine.MersenneTwister;
math/src/main/java/org/apache/mahout/math/jet/random/Uniform.java,12,import org.apache.mahout.math.jet.random.engine.RandomEngine;
math/src/main/java/org/apache/mahout/math/jet/random/Uniform.java,20,protected static final Uniform shared = new Uniform(makeDefaultGenerator());
math/src/main/java/org/apache/mahout/math/jet/random/Uniform.java,27,this(min, max, new MersenneTwister(seed));
math/src/main/java/org/apache/mahout/math/jet/random/Uniform.java,31,public Uniform(double min, double max, RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/Uniform.java,37,public Uniform(RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/Uniform.java,54,return randomGenerator.raw() > 0.5;
math/src/main/java/org/apache/mahout/math/jet/random/Uniform.java,63,return min + (max - min) * randomGenerator.raw();
math/src/main/java/org/apache/mahout/math/jet/random/Uniform.java,71,return from + (to - from) * randomGenerator.raw();
math/src/main/java/org/apache/mahout/math/jet/random/Uniform.java,87,public int nextInt() {
math/src/main/java/org/apache/mahout/math/jet/random/Uniform.java,88,return nextIntFromTo((int) Math.round(min), (int) Math.round(max));
math/src/main/java/org/apache/mahout/math/jet/random/Uniform.java,97,return (int) ((long) from + (long) ((1L + (long) to - (long) from) * randomGenerator.raw()));
math/src/main/java/org/apache/mahout/math/jet/random/Uniform.java,229,public static void staticSetRandomEngine(RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/Uniform.java,230,synchronized (shared) {
math/src/main/java/org/apache/mahout/math/jet/random/Uniform.java,231,shared.setRandomGenerator(randomGenerator);
math/src/main/java/org/apache/mahout/math/jet/random/VonMises.java,24,private static final VonMises shared = new VonMises(1.0, makeDefaultGenerator());
math/src/main/java/org/apache/mahout/math/jet/random/VonMises.java,31,public VonMises(double freedom, RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/VonMises.java,83,double u = randomGenerator.raw();
math/src/main/java/org/apache/mahout/math/jet/random/VonMises.java,90,return (randomGenerator.raw() > 0.5) ? Math.acos(w) : -Math.acos(w);        // Random sign //
math/src/main/java/org/apache/mahout/math/jet/random/Zeta.java,28,private static final Zeta shared = new Zeta(1.0, 1.0, makeDefaultGenerator());
math/src/main/java/org/apache/mahout/math/jet/random/Zeta.java,31,public Zeta(double ro, double pk, RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/Zeta.java,37,protected long generateZeta(double ro, double pk, RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/Zeta.java,94,double u = randomGenerator.raw();
math/src/main/java/org/apache/mahout/math/jet/random/Zeta.java,95,v = randomGenerator.raw();
math/src/main/java/org/apache/mahout/math/jet/random/Zeta.java,109,return (int) generateZeta(ro, pk, randomGenerator);
math/src/main/java/org/apache/mahout/math/jet/random/Zeta.java,119,public static int staticNextInt(double ro, double pk) {
math/src/main/java/org/apache/mahout/math/jet/random/Zeta.java,120,synchronized (shared) {
math/src/main/java/org/apache/mahout/math/jet/random/Zeta.java,121,shared.setState(ro, pk);
math/src/main/java/org/apache/mahout/math/jet/random/Zeta.java,122,return shared.nextInt();
math/src/main/java/org/apache/mahout/math/jet/random/sampling/RandomSampler.java,121,private RandomEngine randomGenerator;
math/src/main/java/org/apache/mahout/math/jet/random/sampling/RandomSampler.java,135,public RandomSampler(long n, long N, long low, RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/sampling/RandomSampler.java,147,randomGenerator = org.apache.mahout.math.jet.random.AbstractDistribution.makeDefaultGenerator();
math/src/main/java/org/apache/mahout/math/jet/random/sampling/RandomSampler.java,152,RandomEngine getRandomGenerator() {
math/src/main/java/org/apache/mahout/math/jet/random/sampling/RandomSampler.java,158,public Object clone() {
math/src/main/java/org/apache/mahout/math/jet/random/sampling/RandomSampler.java,159,RandomSampler copy = (RandomSampler) super.clone();
math/src/main/java/org/apache/mahout/math/jet/random/sampling/RandomSampler.java,160,copy.randomGenerator = (RandomEngine) this.randomGenerator.clone();
math/src/main/java/org/apache/mahout/math/jet/random/sampling/RandomSampler.java,161,return copy;
math/src/main/java/org/apache/mahout/math/jet/random/sampling/RandomSampler.java,217,RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/sampling/RandomSampler.java,238,double Vprime = Math.exp(Math.log(randomGenerator.raw()) * ninv);
math/src/main/java/org/apache/mahout/math/jet/random/sampling/RandomSampler.java,255,Vprime = Math.exp(Math.log(randomGenerator.raw()) * ninv);
math/src/main/java/org/apache/mahout/math/jet/random/sampling/RandomSampler.java,257,double U = randomGenerator.raw();
math/src/main/java/org/apache/mahout/math/jet/random/sampling/RandomSampler.java,286,Vprime = Math.exp(Math.log(randomGenerator.raw()) * nmin1inv);
math/src/main/java/org/apache/mahout/math/jet/random/sampling/RandomSampler.java,289,Vprime = Math.exp(Math.log(randomGenerator.raw()) * ninv);
math/src/main/java/org/apache/mahout/math/jet/random/sampling/RandomSampler.java,365,RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/sampling/RandomSampler.java,373,randomGenerator = org.apache.mahout.math.jet.random.AbstractDistribution.makeDefaultGenerator();
math/src/main/java/org/apache/mahout/math/jet/random/sampling/RandomSampler.java,415,RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/sampling/RandomSampler.java,422,double V = randomGenerator.raw();
math/src/main/java/org/apache/mahout/math/jet/random/sampling/RandomSampler.java,440,S = (long) (Math.round(Nreal) * randomGenerator.raw());
math/src/main/java/org/apache/mahout/math/jet/random/sampling/RandomSampler.java,467,RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/sampling/RandomSampler.java,473,double Vprime = Math.exp(Math.log(randomGenerator.raw()) * ninv);
math/src/main/java/org/apache/mahout/math/jet/random/sampling/RandomSampler.java,492,Vprime = Math.exp(Math.log(randomGenerator.raw()) * ninv);
math/src/main/java/org/apache/mahout/math/jet/random/sampling/RandomSampler.java,494,double U = randomGenerator.raw();
math/src/main/java/org/apache/mahout/math/jet/random/sampling/RandomSampler.java,523,Vprime = Math.exp(Math.log(randomGenerator.raw()) * nmin1inv);
math/src/main/java/org/apache/mahout/math/jet/random/sampling/RandomSampler.java,526,Vprime = Math.exp(Math.log(randomGenerator.raw()) * ninv);
math/src/main/java/org/apache/mahout/math/jet/random/sampling/RandomSamplingAssistant.java,35,public RandomSamplingAssistant(long n, long N, RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/sampling/RandomSamplingAssistant.java,65,public RandomEngine getRandomGenerator() {
math/src/main/java/org/apache/mahout/math/jet/random/sampling/WeightedRandomSampler.java,54,public WeightedRandomSampler(int weight, RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/sampling/WeightedRandomSampler.java,56,randomGenerator = org.apache.mahout.math.jet.random.AbstractDistribution.makeDefaultGenerator();
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileFinderFactory.java,362,int quantiles, RandomEngine generator) {
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/UnknownDoubleQuantileEstimator.java,78,UnknownDoubleQuantileEstimator(int b, int k, int h, double precomputeEpsilon, RandomEngine generator) {
math/src/main/java/org/apache/mahout/math/matrix/DoubleFactory1D.java,176,new RandomSamplingAssistant(n, size,
math/src/main/java/org/apache/mahout/math/matrix/DoubleFactory1D.java,177,new MersenneTwister());
math/src/main/java/org/apache/mahout/math/matrix/DoubleFactory2D.java,726,new RandomSamplingAssistant(n, size,
math/src/main/java/org/apache/mahout/math/matrix/DoubleFactory2D.java,727,new MersenneTwister());
math/src/main/java/org/apache/mahout/math/matrix/doublealgo/Statistic.java,404,public static DoubleMatrix1D viewSample(DoubleMatrix1D matrix, double fraction, RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/matrix/doublealgo/Statistic.java,419,randomGenerator = new MersenneTwister((int) System.currentTimeMillis());
math/src/main/java/org/apache/mahout/math/matrix/doublealgo/Statistic.java,471,RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/matrix/doublealgo/Statistic.java,496,randomGenerator = new MersenneTwister((int) System.currentTimeMillis());
math/src/main/java/org/apache/mahout/math/matrix/doublealgo/Statistic.java,542,double columnFraction, RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/matrix/doublealgo/Statistic.java,577,randomGenerator = new MersenneTwister((int) System.currentTimeMillis());
math/src/main/java/org/apache/mahout/math/jet/random/AbstractDistribution.java,98,public byte nextByte() {
math/src/main/java/org/apache/mahout/math/jet/random/AbstractDistribution.java,99,return (byte)nextInt();
math/src/main/java/org/apache/mahout/math/jet/random/AbstractDistribution.java,102,public char nextChar() {
math/src/main/java/org/apache/mahout/math/jet/random/AbstractDistribution.java,103,return (char)nextInt();
math/src/main/java/org/apache/mahout/math/jet/random/AbstractDistribution.java,106,public long nextLong() {
math/src/main/java/org/apache/mahout/math/jet/random/AbstractDistribution.java,107,return Math.round(nextDouble());
math/src/main/java/org/apache/mahout/math/jet/random/AbstractDistribution.java,110,public float nextFloat() {
math/src/main/java/org/apache/mahout/math/jet/random/AbstractDistribution.java,111,return (float)nextDouble();
math/src/main/java/org/apache/mahout/math/jet/random/Normal.java,28,private static final Normal shared = new Normal(0.0, 1.0, makeDefaultGenerator());
math/src/main/java/org/apache/mahout/math/jet/random/Normal.java,43,public double nextDouble() {
math/src/main/java/org/apache/mahout/math/jet/random/Normal.java,44,return nextDouble(this.mean, this.standardDeviation);
math/src/main/java/org/apache/mahout/math/jet/random/Normal.java,48,public double nextDouble(double mean, double standardDeviation) {
math/src/main/java/org/apache/mahout/math/jet/random/Normal.java,50,if (cacheFilled && this.mean == mean && this.standardDeviation == standardDeviation) {
math/src/main/java/org/apache/mahout/math/jet/random/Normal.java,63,cache = mean + standardDeviation * x * z;
math/src/main/java/org/apache/mahout/math/jet/random/Normal.java,65,return mean + standardDeviation * y * z;
math/src/main/java/org/apache/mahout/math/jet/random/Normal.java,69,public double pdf(double x) {
math/src/main/java/org/apache/mahout/math/jet/random/Normal.java,70,double diff = x - mean;
math/src/main/java/org/apache/mahout/math/jet/random/Normal.java,76,protected void setRandomGenerator(RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/Normal.java,82,public void setState(double mean, double standardDeviation) {
math/src/main/java/org/apache/mahout/math/jet/random/Normal.java,94,public static double staticNextDouble(double mean, double standardDeviation) {
math/src/main/java/org/apache/mahout/math/jet/random/Normal.java,95,synchronized (shared) {
math/src/main/java/org/apache/mahout/math/jet/random/Normal.java,96,return shared.nextDouble(mean, standardDeviation);
math/src/main/java/org/apache/mahout/math/jet/random/Normal.java,102,return this.getClass().getName() + '(' + mean + ',' + standardDeviation + ')';
math/src/main/java/org/apache/mahout/math/jet/random/Exponential.java,15,public class Exponential extends AbstractContinousDistribution {
math/src/main/java/org/apache/mahout/math/jet/random/Exponential.java,20,private static final Exponential shared = new Exponential(1.0, makeDefaultGenerator());
math/src/main/java/org/apache/mahout/math/jet/random/Exponential.java,39,return nextDouble(lambda);
math/src/main/java/org/apache/mahout/math/jet/random/Exponential.java,43,public double nextDouble(double lambda) {
math/src/main/java/org/apache/mahout/math/jet/random/Exponential.java,44,return -Math.log(randomGenerator.raw()) / lambda;
math/src/main/java/org/apache/mahout/math/jet/random/Exponential.java,61,public static double staticNextDouble(double lambda) {
math/src/main/java/org/apache/mahout/math/jet/random/Exponential.java,62,synchronized (shared) {
math/src/main/java/org/apache/mahout/math/jet/random/Exponential.java,63,return shared.nextDouble(lambda);
math/src/main/java/org/apache/mahout/math/jet/random/Exponential.java,69,return this.getClass().getName() + '(' + lambda + ')';
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/DistributedLanczosSolver.java,98,public void serializeOutput(Matrix eigenVectors, List<Double> eigenValues, String outputPath) throws IOException {
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/DistributedLanczosSolver.java,100,Path path = new Path(outputPath);
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/DistributedLanczosSolver.java,103,SequenceFile.Writer seqWriter = new SequenceFile.Writer(fs, conf, path, IntWritable.class, VectorWritable.class);
core/src/main/java/org/apache/mahout/classifier/BayesFileFormatter.java,294,Option helpOpt = obuilder.withLongName("help").withRequired(true).withDescription("Print out help").withShortName(
core/src/main/java/org/apache/mahout/classifier/bayes/datastore/InMemoryBayesDatastore.java,48,private final OpenIntDoubleHashMap sigma_j = new OpenIntDoubleHashMap();
core/src/main/java/org/apache/mahout/classifier/bayes/datastore/InMemoryBayesDatastore.java,50,private final OpenIntDoubleHashMap sigma_k = new OpenIntDoubleHashMap();
core/src/main/java/org/apache/mahout/classifier/bayes/datastore/InMemoryBayesDatastore.java,62,private double sigma_jSigma_k = 1.0;
core/src/main/java/org/apache/mahout/classifier/bayes/datastore/InMemoryBayesDatastore.java,104,return sigma_j.get(getFeatureID(row));
core/src/main/java/org/apache/mahout/classifier/bayes/datastore/InMemoryBayesDatastore.java,117,return sigma_jSigma_k;
core/src/main/java/org/apache/mahout/classifier/bayes/datastore/InMemoryBayesDatastore.java,132,return sigma_k.get(getLabelID(index));
core/src/main/java/org/apache/mahout/classifier/bayes/datastore/InMemoryBayesDatastore.java,166,sigma_j.put(fid, weight);
core/src/main/java/org/apache/mahout/classifier/bayes/datastore/InMemoryBayesDatastore.java,171,sigma_k.put(lid, weight);
core/src/main/java/org/apache/mahout/classifier/bayes/datastore/InMemoryBayesDatastore.java,181,this.sigma_jSigma_k = weight;
math/src/main/java/org/apache/mahout/math/jet/math/Constants.java,45,protected static final double big = 4.503599627370496e15;
math/src/main/java/org/apache/mahout/math/jet/math/Constants.java,46,protected static final double biginv = 2.22044604925031308085e-16;
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,24,private double a_last = 0.0, b_last = 0.0;
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,25,private double a_, b_, t, fa, fb, p1, p2;
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,33,private double p_last = 0.0, q_last = 0.0;
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,37,private double D;
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,38,private double Dl;
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,64,if (a != a_last || b != b_last) {
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,65,a_last = a;
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,66,b_last = b;
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,68,a_ = a - 1.0;
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,69,b_ = b - 1.0;
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,70,double c = (b * b_) / (a * a_);
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,72,fa = Math.exp(a_ * Math.log(t));
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,73,fb = Math.exp(b_ * Math.log(1.0 - t));              // f(t) = fa * fb
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,88,if ((V = randomGenerator.raw() * fb) <= 1.0 - b_ * X) {
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,94,if (Math.log(V) <= b_ * Math.log(1.0 - X)) {
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,102,if ((V = randomGenerator.raw() * fa) <= 1.0 - a_ * (1.0 - X)) {
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,108,if (Math.log(V) <= a_ * Math.log(X)) {
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,122,if (a != a_last || b != b_last) {
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,123,a_last = a;
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,124,b_last = b;
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,126,a_ = a - 1.0;
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,127,b_ = b - 1.0;
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,128,t = a_ / (a - b);                   // one step Newton * start value t
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,129,fb = Math.exp((b_ - 1.0) * Math.log(1.0 - t));
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,130,fa = a - (a + b_) * t;
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,132,fa = Math.exp(a_ * Math.log(t));
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,133,fb = Math.exp(b_ * Math.log(1.0 - t));             // f(t) = fa * fb
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,134,if (b_ <= 1.0) {
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,136,mu = b_ * t;                                   //   mu = -m2 * t
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,138,ml = b_;
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,160,if (Math.log(V) <= b_ * Math.log(1.0 - X)) {
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,168,if ((V = randomGenerator.raw() * fa) <= 1.0 - a_ * (1.0 - X)) {
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,174,if (Math.log(V) <= a_ * Math.log(X)) {
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,188,if (p != p_last || q != q_last) {
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,189,p_last = p;
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,190,q_last = q;
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,197,D = Math.sqrt(m * (1.0 - m) / (s - 1.0));
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,201,x2 = (Dl = m * 0.5);
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,205,x2 = m - D;
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,206,x1 = x2 - D;
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,207,z2 = x2 * (1.0 - (1.0 - x2) / (s * D));
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,211,Dl = m - x2;
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,213,Dl = D;
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,221,x4 = 1.0 - (D = (1.0 - m) * 0.5);
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,225,x4 = m + D;
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,226,x5 = x4 + D;
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,227,z4 = x4 * (1.0 + (1.0 - x4) / (s * D));
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,231,D = x4 - m;
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,238,p1 = f2 * (Dl + Dl);                                //  x1 < X < m
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,239,p2 = f4 * (D + D) + p1;                            //  m  < X < x5
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,252,if ((W = U / Dl - f2) <= 0.0) {
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,257,return (x2 - W / f1 * Dl);
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,260,V = Dl * (U = randomGenerator.raw());
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,280,if ((W = U / D - f4) <= 0.0) {
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,285,return (x4 + W / f5 * D);
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,288,V = D * (U = randomGenerator.raw());
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,432,public void setState(double alpha, double beta) {
math/src/main/java/org/apache/mahout/math/jet/random/Binomial.java,23,private int n_last = -1, n_prev = -1;
math/src/main/java/org/apache/mahout/math/jet/random/Binomial.java,24,private double par, np, p0, q, p_last = -1.0, p_prev = -1.0;
math/src/main/java/org/apache/mahout/math/jet/random/Binomial.java,29,private double log_p, log_q, log_n;
math/src/main/java/org/apache/mahout/math/jet/random/Binomial.java,92,if (n != n_last || p != p_last) {                 // set-up
math/src/main/java/org/apache/mahout/math/jet/random/Binomial.java,93,n_last = n;
math/src/main/java/org/apache/mahout/math/jet/random/Binomial.java,94,p_last = p;
math/src/main/java/org/apache/mahout/math/jet/random/Binomial.java,152,int DMAX_KM = 20;
math/src/main/java/org/apache/mahout/math/jet/random/Binomial.java,153,double C1_6 = 0.16666666666666667;
math/src/main/java/org/apache/mahout/math/jet/random/Binomial.java,154,double C5_8 = 0.62500000000000000;
math/src/main/java/org/apache/mahout/math/jet/random/Binomial.java,155,double C1_3 = 0.33333333333333333;
math/src/main/java/org/apache/mahout/math/jet/random/Binomial.java,209,double E = (Km / ss) * ((Km * (Km * C1_3 + C5_8) + C1_6) / ss + 0.5);
math/src/main/java/org/apache/mahout/math/jet/random/Binomial.java,214,if (n != n_prev || par != p_prev) {
math/src/main/java/org/apache/mahout/math/jet/random/Binomial.java,215,n_prev = n;
math/src/main/java/org/apache/mahout/math/jet/random/Binomial.java,216,p_prev = par;
math/src/main/java/org/apache/mahout/math/jet/random/Binomial.java,264,.exp(this.log_n - Arithmetic.logFactorial(k) - Arithmetic.logFactorial(r) + this.log_p * k + this.log_q * r);
math/src/main/java/org/apache/mahout/math/jet/random/Binomial.java,274,public void setNandP(int n, double p) {
math/src/main/java/org/apache/mahout/math/jet/random/Binomial.java,281,this.log_p = Math.log(p);
math/src/main/java/org/apache/mahout/math/jet/random/Binomial.java,282,this.log_q = Math.log(1.0 - p);
math/src/main/java/org/apache/mahout/math/jet/random/Binomial.java,283,this.log_n = Arithmetic.logFactorial(n);
math/src/main/java/org/apache/mahout/math/jet/random/Fun.java,24,private static double _fkt_value(double lambda, double z1, double z2, double x_value) {
math/src/main/java/org/apache/mahout/math/jet/random/Fun.java,26,return Math.cos(z1 * x_value) / (Math.pow((x_value * x_value + z2 * z2), (lambda + 0.5)));
math/src/main/java/org/apache/mahout/math/jet/random/Fun.java,29,public static double bessel2_fkt(double lambda, double beta) {
math/src/main/java/org/apache/mahout/math/jet/random/Fun.java,265,double new_value;
math/src/main/java/org/apache/mahout/math/jet/random/Fun.java,269,double fx = (fkt2_value(lambda, beta, x)) * 0.01;
math/src/main/java/org/apache/mahout/math/jet/random/Fun.java,273,if ((fkt2_value(lambda, beta, y)) < fx) {
math/src/main/java/org/apache/mahout/math/jet/random/Fun.java,279,sum = (0.5 * (10.0 * step + fkt2_value(lambda, beta, x1))) * step;
math/src/main/java/org/apache/mahout/math/jet/random/Fun.java,280,double first_value = sum;
math/src/main/java/org/apache/mahout/math/jet/random/Fun.java,285,new_value = (0.5 * (fkt2_value(lambda, beta, x) + fkt2_value(lambda, beta, x1))) * step;
math/src/main/java/org/apache/mahout/math/jet/random/Fun.java,286,sum += new_value;
math/src/main/java/org/apache/mahout/math/jet/random/Fun.java,287,if ((new_value / first_value) < epsilon) {
math/src/main/java/org/apache/mahout/math/jet/random/Fun.java,299,int nr_per = (int) Math.ceil((border / period)) + 20;
math/src/main/java/org/apache/mahout/math/jet/random/Fun.java,303,for (i = 1; i <= nr_per; i++) {
math/src/main/java/org/apache/mahout/math/jet/random/Fun.java,305,new_value = (0.5 * (_fkt_value(lambda, z1, z2, x) + _fkt_value(lambda, z1, z2, x1))) * step;
math/src/main/java/org/apache/mahout/math/jet/random/Fun.java,306,sum += new_value;
math/src/main/java/org/apache/mahout/math/jet/random/Fun.java,312,new_value = (0.5 * (_fkt_value(lambda, z1, z2, x) + _fkt_value(lambda, z1, z2, x1))) * step;
math/src/main/java/org/apache/mahout/math/jet/random/Fun.java,313,sum += new_value;
math/src/main/java/org/apache/mahout/math/jet/random/Fun.java,317,double first_sum = sum;
math/src/main/java/org/apache/mahout/math/jet/random/Fun.java,319,new_value = (0.5 * (_fkt_value(lambda, z1, z2, x) + _fkt_value(lambda, z1, z2, x1))) * step;
math/src/main/java/org/apache/mahout/math/jet/random/Fun.java,320,sum += new_value;
math/src/main/java/org/apache/mahout/math/jet/random/Fun.java,324,double second_sum = sum;
math/src/main/java/org/apache/mahout/math/jet/random/Fun.java,325,sum = 0.5 * (first_sum + second_sum);
math/src/main/java/org/apache/mahout/math/jet/random/Fun.java,378,private static double fkt2_value(double lambda, double beta, double x_value) {
math/src/main/java/org/apache/mahout/math/jet/random/Fun.java,380,return cosh(lambda * x_value) * Math.exp(-beta * cosh(x_value));
math/src/main/java/org/apache/mahout/math/jet/random/Normal.java,25,private double SQRT_INV; // performance cache
math/src/main/java/org/apache/mahout/math/jet/random/Normal.java,71,return SQRT_INV * Math.exp(-(diff * diff) / (2.0 * variance));
math/src/main/java/org/apache/mahout/math/jet/random/Normal.java,89,this.SQRT_INV = 1.0 / Math.sqrt(2.0 * Math.PI * variance);
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,23,private double my_old = -1.0;
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,31,private double my_last = -1.0;
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,44,private double l_my;
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,45,private double c_pm;
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,209,c_pm = m * l_my - Arithmetic.logFactorial(m);
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,212,f2 = f(k2, l_my, c_pm);
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,213,f4 = f(k4, l_my, c_pm);
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,214,f1 = f(k1, l_my, c_pm);
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,215,f5 = f(k5, l_my, c_pm);
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,258,if (V <= f(Y, l_my, c_pm)) {
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,284,if (V <= f(Y, l_my, c_pm)) {
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,313,if (Math.log(W) <= X * l_my - Arithmetic.logFactorial(X) - c_pm) {
math/src/main/java/org/apache/mahout/math/jet/stat/Gamma.java,502,if (Math.abs(pk) > big) {
math/src/main/java/org/apache/mahout/math/jet/stat/Gamma.java,503,pkm2 *= biginv;
math/src/main/java/org/apache/mahout/math/jet/stat/Gamma.java,504,pkm1 *= biginv;
math/src/main/java/org/apache/mahout/math/jet/stat/Gamma.java,505,qkm2 *= biginv;
math/src/main/java/org/apache/mahout/math/jet/stat/Gamma.java,506,qkm1 *= biginv;
core/src/main/java/org/apache/mahout/cf/taste/impl/neighborhood/NearestNUserNeighborhood.java,48,public NearestNUserNeighborhood(int n, UserSimilarity userSimilarity, DataModel dataModel) {
core/src/main/java/org/apache/mahout/cf/taste/impl/neighborhood/NearestNUserNeighborhood.java,67,DataModel dataModel) {
core/src/main/java/org/apache/mahout/cf/taste/impl/neighborhood/NearestNUserNeighborhood.java,91,double samplingRate) {
core/src/main/java/org/apache/mahout/cf/taste/impl/neighborhood/NearestNUserNeighborhood.java,96,this.n = n;
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java,20,import java.io.IOException;
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java,21,import java.util.Map;
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,23,import org.apache.mahout.math.function.BinaryFunction;
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,24,import org.apache.mahout.math.function.PlusMult;
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,25,import org.apache.mahout.math.function.UnaryFunction;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,113,Vector result = clone();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,130,Iterator<Element> iter = iterateNonZero();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,132,Element element = iter.next();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,203,Iterator<Element> iter = this.iterateNonZero();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,212,Iterator<Element> iter = this.iterateNonZero();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,220,Iterator<Element> iter = this.iterateNonZero();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,227,Iterator<Element> iter = this.iterateNonZero();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,229,Element element = iter.next();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,252,Iterator<Element> it;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,264,Element e = it.next();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,275,Iterator<Element> iter = this.iterateNonZero();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,278,Element element = iter.next();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,291,Iterator<Element> iter = this.iterateNonZero();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,294,Element element = iter.next();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,317,Vector result = clone();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,333,Element e = iter.next();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,341,Iterator<Element> it = iterateNonZero();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,343,Element e = it.next();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,358,Vector result = clone();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,384,Iterator<Element> iter = iterateNonZero();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,423,Iterator<Element> it;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,430,Element e = it.next();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,437,Iterator<Element> it;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,444,Element e = it.next();
math/src/main/java/org/apache/mahout/math/jet/random/NegativeBinomial.java,3,Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
math/src/main/java/org/apache/mahout/math/jet/random/NegativeBinomial.java,4,is hereby granted without fee, provided that the above copyright notice appear in all copies and
math/src/main/java/org/apache/mahout/math/jet/random/NegativeBinomial.java,5,that both that copyright notice and this permission notice appear in supporting documentation.
math/src/main/java/org/apache/mahout/math/jet/random/NegativeBinomial.java,6,CERN makes no representations about the suitability of this software for any purpose.
math/src/main/java/org/apache/mahout/math/jet/random/NegativeBinomial.java,18,private int n;
math/src/main/java/org/apache/mahout/math/jet/random/NegativeBinomial.java,25,private static final NegativeBinomial shared = new NegativeBinomial(1, 0.5, makeDefaultGenerator());
math/src/main/java/org/apache/mahout/math/jet/random/NegativeBinomial.java,34,public NegativeBinomial(int n, double p, RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/NegativeBinomial.java,43,return Probability.negativeBinomial(k, n, p);
math/src/main/java/org/apache/mahout/math/jet/random/NegativeBinomial.java,69,return nextInt(n, p);
math/src/main/java/org/apache/mahout/math/jet/random/NegativeBinomial.java,73,public int nextInt(int n, double p) {
math/src/main/java/org/apache/mahout/math/jet/random/NegativeBinomial.java,98,double x = p / (1.0 - p);
math/src/main/java/org/apache/mahout/math/jet/random/NegativeBinomial.java,101,return this.poisson.nextInt(y);
math/src/main/java/org/apache/mahout/math/jet/random/NegativeBinomial.java,105,public double pdf(int k) {
math/src/main/java/org/apache/mahout/math/jet/random/NegativeBinomial.java,106,if (k > n) {
math/src/main/java/org/apache/mahout/math/jet/random/NegativeBinomial.java,107,throw new IllegalArgumentException();
math/src/main/java/org/apache/mahout/math/jet/random/NegativeBinomial.java,109,return org.apache.mahout.math.jet.math.Arithmetic.binomial(n, k) * Math.pow(p, k) * Math.pow(1.0 - p, n - k);
math/src/main/java/org/apache/mahout/math/jet/random/NegativeBinomial.java,118,public void setNandP(int n, double p) {
math/src/main/java/org/apache/mahout/math/jet/random/NegativeBinomial.java,119,this.n = n;
math/src/main/java/org/apache/mahout/math/jet/random/NegativeBinomial.java,129,public static int staticNextInt(int n, double p) {
math/src/main/java/org/apache/mahout/math/jet/random/NegativeBinomial.java,130,synchronized (shared) {
math/src/main/java/org/apache/mahout/math/jet/random/NegativeBinomial.java,131,return shared.nextInt(n, p);
math/src/main/java/org/apache/mahout/math/jet/random/NegativeBinomial.java,137,return this.getClass().getName() + '(' + n + ',' + p + ')';
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,3,Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,4,is hereby granted without fee, provided that the above copyright notice appear in all copies and
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,5,that both that copyright notice and this permission notice appear in supporting documentation.
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,6,CERN makes no representations about the suitability of this software for any purpose.
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,66,private static final Poisson shared = new Poisson(0.0, makeDefaultGenerator());
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,71,setMean(mean);
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,123,double my = theMean;
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,134,if (my < SWITCH_MEAN) { // CASE B: Inversion- start new table and calculate p0
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,135,if (my != my_old) {
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,136,my_old = my;
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,138,p = Math.exp(-my);
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,143,m = (my > 1.0) ? (int) my : 1;
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,162,p *= my / (double) k;
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,173,else if (my < MEAN_MAX) { // CASE A: acceptance complement
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,179,m = (int) my;
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,180,if (my != my_last) { //  set-up
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,181,my_last = my;
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,184,double Ds = Math.sqrt(my + 0.25);
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,188,k2 = (int) Math.ceil(my - 0.5 - Ds);
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,189,k4 = (int) (my - 0.5 + Ds);
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,198,r1 = my / (double) k1;
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,199,r2 = my / (double) k2;
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,200,r4 = my / (double) (k4 + 1);
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,201,r5 = my / (double) (k5 + 1);
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,208,l_my = Math.log(my);
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,318,return (int) my;
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,336,public static int staticNextInt(double mean) {
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,337,synchronized (shared) {
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,338,shared.setMean(mean);
math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java,339,return shared.nextInt();
math/src/main/java/org/apache/mahout/math/jet/random/AbstractDistribution.java,34,public abstract class AbstractDistribution extends PersistentObject
math/src/main/java/org/apache/mahout/math/jet/random/AbstractDistribution.java,35,implements UnaryFunction, IntFunction {
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,19,private double lambda;
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,22,private static final Gamma shared = new Gamma(1.0, 1.0, makeDefaultGenerator());
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,29,public Gamma(double alpha, double lambda, RandomEngine randomGenerator) {
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,31,setState(alpha, lambda);
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,36,return Probability.gamma(alpha, lambda, x);
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,42,return nextDouble(alpha, lambda);
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,46,public double nextDouble(double alpha, double lambda) {
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,75,if (lambda <= 0.0) {
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,88,return (gds / lambda);
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,93,return (gds / lambda);
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,120,return (gds / lambda);
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,125,return (gds / lambda);
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,182,return (gds / lambda);
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,222,return (x * x / lambda);
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,235,return 1.0 / lambda;
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,237,return 0.0;
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,241,return Math.exp(-x / lambda) / lambda;
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,244,return Math.exp((alpha - 1.0) * Math.log(x / lambda) - x / lambda - Fun.logGamma(alpha)) / lambda;
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,252,public void setState(double alpha, double lambda) {
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,253,if (alpha <= 0.0) {
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,254,throw new IllegalArgumentException();
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,256,if (lambda <= 0.0) {
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,257,throw new IllegalArgumentException();
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,259,this.alpha = alpha;
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,260,this.lambda = lambda;
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,268,public static double staticNextDouble(double alpha, double lambda) {
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,269,synchronized (shared) {
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,270,return shared.nextDouble(alpha, lambda);
math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java,276,return this.getClass().getName() + '(' + alpha + ',' + lambda + ')';
math/src/main/java/org/apache/mahout/math/jet/random/NegativeBinomial.java,37,this.gamma = new Gamma(n, 1.0, randomGenerator);
math/src/main/java/org/apache/mahout/math/jet/random/NegativeBinomial.java,100,double y = x * this.gamma.nextDouble(n, 1.0);
math/src/main/java/org/apache/mahout/math/jet/stat/Gamma.java,31,public static double beta(double a, double b) throws ArithmeticException {
math/src/main/java/org/apache/mahout/math/jet/stat/Gamma.java,33,double y = a + b;
math/src/main/java/org/apache/mahout/math/jet/stat/Gamma.java,39,if (a > b) {
math/src/main/java/org/apache/mahout/math/jet/stat/Gamma.java,40,y = gamma(a) / y;
math/src/main/java/org/apache/mahout/math/jet/stat/Gamma.java,41,y *= gamma(b);
math/src/main/java/org/apache/mahout/math/jet/stat/Gamma.java,43,y = gamma(b) / y;
math/src/main/java/org/apache/mahout/math/jet/stat/Gamma.java,44,y *= gamma(a);
math/src/main/java/org/apache/mahout/math/jet/stat/Gamma.java,414,throws ArithmeticException {
math/src/main/java/org/apache/mahout/math/jet/stat/Gamma.java,417,if (x <= 0 || a <= 0) {
math/src/main/java/org/apache/mahout/math/jet/stat/Gamma.java,421,if (x > 1.0 && x > a) {
math/src/main/java/org/apache/mahout/math/jet/stat/Gamma.java,422,return 1.0 - incompleteGammaComplement(a, x);
math/src/main/java/org/apache/mahout/math/jet/stat/Gamma.java,426,double ax = a * Math.log(x) - x - logGamma(a);
math/src/main/java/org/apache/mahout/math/jet/stat/Gamma.java,434,double r = a;
math/src/main/java/org/apache/mahout/math/jet/stat/Gamma.java,445,return (ans * ax / a);
math/src/main/java/org/apache/mahout/math/jet/stat/Gamma.java,455,public static double incompleteGammaComplement(double a, double x) throws ArithmeticException {
math/src/main/java/org/apache/mahout/math/jet/stat/Gamma.java,457,if (x <= 0 || a <= 0) {
math/src/main/java/org/apache/mahout/math/jet/stat/Gamma.java,461,if (x < 1.0 || x < a) {
math/src/main/java/org/apache/mahout/math/jet/stat/Gamma.java,462,return 1.0 - incompleteGamma(a, x);
math/src/main/java/org/apache/mahout/math/jet/stat/Gamma.java,465,double ax = a * Math.log(x) - x - logGamma(a);
math/src/main/java/org/apache/mahout/math/jet/stat/Gamma.java,473,double y = 1.0 - a;
math/src/main/java/org/apache/mahout/math/jet/stat/Gamma.java,514,public static double logGamma(double x) throws ArithmeticException {
math/src/main/java/org/apache/mahout/math/jet/stat/Probability.java,428,public static double gamma(double a, double b, double x) {
math/src/main/java/org/apache/mahout/math/jet/stat/Probability.java,432,return Gamma.incompleteGamma(b, a * x);
math/src/main/java/org/apache/mahout/math/jet/stat/Probability.java,453,public static double gammaComplemented(double a, double b, double x) {
math/src/main/java/org/apache/mahout/math/jet/stat/Probability.java,457,return Gamma.incompleteGammaComplement(b, a * x);
examples/src/main/java/org/apache/mahout/classifier/bayes/PrepareTwentyNewsgroups.java,87,Analyzer analyzer = (Analyzer) Class.forName(analyzerName).newInstance();
utils/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterable.java,127,result = result.normalize(normPower);
core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/cbayes/CBayesThetaNormalizerReducer.java,49,private ThreadLocal<HBaseConfiguration> hBconf;
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/AbstractSimilarity.java,179,if (hasInferrer || (compare == 0)) {
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/AbstractSimilarity.java,196,x = hasPrefTransform ? prefTransform.getTransformedValue(xPrefs.get(xPrefIndex)) : xPrefs
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/AbstractSimilarity.java,197,.getValue(xPrefIndex);
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/AbstractSimilarity.java,203,y = hasPrefTransform ? prefTransform.getTransformedValue(yPrefs.get(yPrefIndex)) : yPrefs
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/AbstractSimilarity.java,204,.getValue(yPrefIndex);
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/AbstractSimilarity.java,218,break;
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/AbstractSimilarity.java,220,xIndex = xPrefs.getItemID(xPrefIndex);
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/AbstractSimilarity.java,224,break;
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/AbstractSimilarity.java,226,yIndex = yPrefs.getItemID(yPrefIndex);
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/AbstractSimilarity.java,231,double n = count;
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/AbstractSimilarity.java,232,double meanX = sumX / n;
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/AbstractSimilarity.java,233,double meanY = sumY / n;
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/AbstractSimilarity.java,235,double centeredSumXY = sumXY - meanY * sumX;
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/AbstractSimilarity.java,237,double centeredSumX2 = sumX2 - meanX * sumX;
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/AbstractSimilarity.java,239,double centeredSumY2 = sumY2 - meanY * sumY;
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/AbstractSimilarity.java,241,double result = computeResult(count, centeredSumXY, centeredSumX2, centeredSumY2, sumXYdiff2);
core/src/main/java/org/apache/mahout/common/IntPairWritable.java,26,import org.apache.hadoop.io.BinaryComparable;
core/src/main/java/org/apache/mahout/common/IntPairWritable.java,27,import org.apache.hadoop.io.WritableComparable;
core/src/main/java/org/apache/mahout/common/IntPairWritable.java,28,import org.apache.hadoop.io.WritableComparator;
core/src/main/java/org/apache/mahout/common/IntPairWritable.java,149,public static final class Comparator extends WritableComparator implements Serializable {
core/src/main/java/org/apache/mahout/common/IntPairWritable.java,188,public static class FirstGroupingComparator extends WritableComparator implements Serializable {
math/src/main/java/org/apache/mahout/math/decomposer/EigenStatus.java,23,private Boolean inProgress;
math/src/main/java/org/apache/mahout/math/decomposer/EigenStatus.java,44,synchronized (inProgress) {
math/src/main/java/org/apache/mahout/math/decomposer/EigenStatus.java,45,return inProgress;
math/src/main/java/org/apache/mahout/math/decomposer/EigenStatus.java,50,synchronized (inProgress) {
math/src/main/java/org/apache/mahout/math/decomposer/EigenStatus.java,51,inProgress = status;
math/src/main/java/org/apache/mahout/math/jet/random/Beta.java,71,t = (c == 1.0) ? 0.5 : (1.0 - Math.sqrt(c)) / (1.0 - c);  // t = t_opt
math/src/main/java/org/apache/mahout/math/function/Functions.java,276,public static final BinaryFunction logBeta = new BinaryFunction() {
math/src/main/java/org/apache/mahout/math/function/Functions.java,277,public final double apply(double a, double b) { return Sfun.logBeta(a,b); }
math/src/main/java/org/apache/mahout/math/jet/random/engine/MersenneTwister.java,198,int y;
math/src/main/java/org/apache/mahout/math/jet/random/engine/MersenneTwister.java,200,int kk;
math/src/main/java/org/apache/mahout/math/jet/random/engine/MersenneTwister.java,201,int[] cache = mt; // cached for speed
math/src/main/java/org/apache/mahout/math/jet/random/engine/MersenneTwister.java,202,int kkM;
math/src/main/java/org/apache/mahout/math/jet/random/engine/MersenneTwister.java,203,int limit = N-M;
math/src/main/java/org/apache/mahout/math/jet/random/engine/MersenneTwister.java,204,for (kk=0,kkM=kk+M; kk<limit; kk++,kkM++) {
math/src/main/java/org/apache/mahout/math/jet/random/engine/MersenneTwister.java,205,y = (cache[kk]&UPPER_MASK)|(cache[kk+1]&LOWER_MASK);
math/src/main/java/org/apache/mahout/math/jet/random/engine/MersenneTwister.java,206,cache[kk] = cache[kkM] ^ (y >>> 1) ^ ((y & 0x1) == 0 ? mag0 : mag1);
math/src/main/java/org/apache/mahout/math/jet/random/engine/MersenneTwister.java,208,limit = N-1;
math/src/main/java/org/apache/mahout/math/jet/random/engine/MersenneTwister.java,209,for (kkM=kk+(M-N); kk<limit; kk++,kkM++) {
math/src/main/java/org/apache/mahout/math/jet/random/engine/MersenneTwister.java,210,y = (cache[kk]&UPPER_MASK)|(cache[kk+1]&LOWER_MASK);
math/src/main/java/org/apache/mahout/math/jet/random/engine/MersenneTwister.java,211,cache[kk] = cache[kkM] ^ (y >>> 1) ^ ((y & 0x1) == 0 ? mag0 : mag1);
math/src/main/java/org/apache/mahout/math/jet/random/engine/MersenneTwister.java,213,y = (cache[N-1]&UPPER_MASK)|(cache[0]&LOWER_MASK);
math/src/main/java/org/apache/mahout/math/jet/random/engine/MersenneTwister.java,214,cache[N-1] = cache[M-1] ^ (y >>> 1) ^ ((y & 0x1) == 0 ? mag0 : mag1);
math/src/main/java/org/apache/mahout/math/jet/random/engine/MersenneTwister.java,216,this.mt = cache;
math/src/main/java/org/apache/mahout/math/jet/random/engine/MersenneTwister.java,217,this.mti = 0;
math/src/main/java/org/apache/mahout/math/jet/random/engine/MersenneTwister.java,278,old version was:
math/src/main/java/org/apache/mahout/math/jet/random/engine/MersenneTwister64.java,19,Copyright 1999 CERN - European Organization for Nuclear Research.
math/src/main/java/org/apache/mahout/math/jet/random/engine/MersenneTwister64.java,20,Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
math/src/main/java/org/apache/mahout/math/jet/random/engine/MersenneTwister64.java,21,is hereby granted without fee, provided that the above copyright notice appear in all copies and
math/src/main/java/org/apache/mahout/math/jet/random/engine/MersenneTwister64.java,22,that both that copyright notice and this permission notice appear in supporting documentation.
math/src/main/java/org/apache/mahout/math/jet/random/engine/MersenneTwister64.java,23,CERN makes no representations about the suitability of this software for any purpose.
math/src/main/java/org/apache/mahout/math/jet/random/engine/MersenneTwister64.java,24,It is provided "as is" without expressed or implied warranty.
math/src/main/java/org/apache/mahout/math/jet/random/engine/MersenneTwister64.java,27,package org.apache.mahout.math.jet.random.engine;
math/src/main/java/org/apache/mahout/math/jet/random/engine/MersenneTwister64.java,29,import java.util.Date;
math/src/main/java/org/apache/mahout/math/jet/random/engine/MersenneTwister64.java,38,public class MersenneTwister64 extends MersenneTwister {
math/src/main/java/org/apache/mahout/math/jet/random/engine/MersenneTwister64.java,41,public MersenneTwister64() {
math/src/main/java/org/apache/mahout/math/jet/random/engine/MersenneTwister64.java,42,super();
math/src/main/java/org/apache/mahout/math/jet/random/engine/MersenneTwister64.java,50,public MersenneTwister64(int seed) {
math/src/main/java/org/apache/mahout/math/jet/random/engine/MersenneTwister64.java,51,super(seed);
math/src/main/java/org/apache/mahout/math/jet/random/engine/MersenneTwister64.java,59,public MersenneTwister64(Date d) {
math/src/main/java/org/apache/mahout/math/jet/random/engine/MersenneTwister64.java,60,super(d);
math/src/main/java/org/apache/mahout/math/jet/random/engine/MersenneTwister64.java,68,public double raw() {
math/src/main/java/org/apache/mahout/math/jet/random/engine/MersenneTwister64.java,69,return nextDouble();
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedGenerator.java,19,Copyright 1999 CERN - European Organization for Nuclear Research.
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedGenerator.java,20,Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedGenerator.java,21,is hereby granted without fee, provided that the above copyright notice appear in all copies and
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedGenerator.java,22,that both that copyright notice and this permission notice appear in supporting documentation.
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedGenerator.java,23,CERN makes no representations about the suitability of this software for any purpose.
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedGenerator.java,24,It is provided "as is" without expressed or implied warranty.
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedGenerator.java,27,package org.apache.mahout.math.jet.random.engine;
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedGenerator.java,29,import org.apache.mahout.math.PersistentObject;
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedGenerator.java,47,public class RandomSeedGenerator extends PersistentObject {
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedGenerator.java,49,private int row;
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedGenerator.java,50,private final int column;
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedGenerator.java,53,public RandomSeedGenerator() {
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedGenerator.java,54,this(0, 0);
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedGenerator.java,68,public RandomSeedGenerator(int row, int column) {
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedGenerator.java,69,this.row = row;
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedGenerator.java,70,this.column = column;
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedGenerator.java,75,public int nextSeed() {
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedGenerator.java,76,return RandomSeedTable.getSeedAtRowColumn(row++, column);
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,19,Copyright 1999 CERN - European Organization for Nuclear Research.
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,20,Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,21,is hereby granted without fee, provided that the above copyright notice appear in all copies and
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,22,that both that copyright notice and this permission notice appear in supporting documentation.
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,23,CERN makes no representations about the suitability of this software for any purpose.
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,24,It is provided "as is" without expressed or implied warranty.
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,27,package org.apache.mahout.math.jet.random.engine;
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,42,public class RandomSeedTable {
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,45,private static final int COLUMNS = 2;
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,49,private static final int[] seeds = {
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,50,9876, 54321,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,51,1299961164, 253987020,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,52,669708517, 2079157264,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,53,190904760, 417696270,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,54,1289741558, 1376336092,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,55,1803730167, 324952955,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,56,489854550, 582847132,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,57,1348037628, 1661577989,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,58,350557787, 1155446919,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,59,591502945, 634133404,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,60,1901084678, 862916278,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,61,1988640932, 1785523494,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,62,1873836227, 508007031,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,63,1146416592, 967585720,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,64,1837193353, 1522927634,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,65,38219936, 921609208,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,66,349152748, 112892610,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,67,744459040, 1735807920,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,68,1983990104, 728277902,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,69,309164507, 2126677523,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,70,362993787, 1897782044,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,71,556776976, 462072869,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,72,1584900822, 2019394912,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,73,1249892722, 791083656,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,74,1686600998, 1983731097,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,75,1127381380, 198976625,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,76,1999420861, 1810452455,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,77,1972906041, 664182577,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,78,84636481, 1291886301,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,79,1186362995, 954388413,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,80,2141621785, 61738584,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,81,1969581251, 1557880415,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,82,1150606439, 136325185,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,83,95187861, 1592224108,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,84,940517655, 1629971798,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,85,215350428, 922659102,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,86,786161212, 1121345074,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,87,1450830056, 1922787776,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,88,1696578057, 2025150487,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,89,1803414346, 1851324780,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,90,1017898585, 1452594263,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,91,1184497978, 82122239,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,92,633338765, 1829684974,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,93,430889421, 230039326,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,94,492544653, 76320266,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,95,389386975, 1314148944,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,96,1720322786, 709120323,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,97,1868768216, 1992898523,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,98,443210610, 811117710,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,99,1191938868, 1548484733,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,100,616890172, 159787986,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,101,935835339, 1231440405,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,102,1058009367, 1527613300,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,103,1463148129, 1970575097,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,104,1795336935, 434768675,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,105,274019517, 605098487,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,106,483689317, 217146977,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,107,2070804364, 340596558,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,108,930226308, 1602100969,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,109,989324440, 801809442,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,110,410606853, 1893139948,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,111,1583588576, 1219225407,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,112,2102034391, 1394921405,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,113,2005037790, 2031006861,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,114,1244218766, 923231061,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,115,49312790, 775496649,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,116,721012176, 321339902,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,117,1719909107, 1865748178,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,118,1156177430, 1257110891,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,119,307561322, 1918244397,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,120,906041433, 360476981,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,121,1591375755, 268492659,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,122,461522398, 227343256,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,123,2145930725, 2020665454,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,124,1938419274, 1331283701,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,125,174405412, 524140103,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,126,494343653, 18063908,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,127,1025534808, 181709577,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,128,2048959776, 1913665637,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,129,950636517, 794796256,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,130,1828843197, 1335757744,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,131,211109723, 983900607,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,132,825474095, 1046009991,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,133,374915657, 381856628,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,134,1241296328, 698149463,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,135,1260624655, 1024538273,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,136,900676210, 1628865823,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,137,697951025, 500570753,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,138,1007920268, 1708398558,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,139,264596520, 624727803,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,140,1977924811, 674673241,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,141,1440257718, 271184151,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,142,1928778847, 993535203,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,143,1307807366, 1801502463,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,144,1498732610, 300876954,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,145,1617712402, 1574250679,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,146,1261800762, 1556667280,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,147,949929273, 560721070,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,148,1766170474, 1953522912,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,149,1849939248, 19435166,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,150,887262858, 1219627824,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,151,483086133, 603728993,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,152,1330541052, 1582596025,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,153,1850591475, 723593133,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,154,1431775678, 1558439000,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,155,922493739, 1356554404,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,156,1058517206, 948567762,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,157,709067283, 1350890215,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,158,1044787723, 2144304941,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,159,999707003, 513837520,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,160,2140038663, 1850568788,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,161,1803100150, 127574047,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,162,867445693, 1149173981,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,163,408583729, 914837991,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,164,1166715497, 602315845,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,165,430738528, 1743308384,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,166,1388022681, 1760110496,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,167,1664028066, 654300326,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,168,1767741172, 1338181197,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,169,1625723550, 1742482745,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,170,464486085, 1507852127,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,171,754082421, 1187454014,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,172,1315342834, 425995190,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,173,960416608, 2004255418,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,174,1262630671, 671761697,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,175,59809238, 103525918,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,176,1205644919, 2107823293,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,177,1615183160, 1152411412,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,178,1024474681, 2118672937,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,179,1703877649, 1235091369,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,180,1821417852, 1098463802,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,181,1738806466, 1529062843,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,182,620780646, 1654833544,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,183,1070174101, 795158254,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,184,658537995, 1693620426,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,185,2055317555, 508053916,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,186,1647371686, 1282395762,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,187,29067379, 409683067,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,188,1763495989, 1917939635,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,189,1602690753, 810926582,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,190,885787576, 513818500,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,191,1853512561, 1195205756,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,192,1798585498, 1970460256,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,193,1819261032, 1306536501,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,194,1133245275, 37901,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,195,689459799, 1334389069,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,196,1730609912, 1854586207,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,197,1556832175, 1228729041,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,198,251375753, 683687209,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,199,2083946182, 1763106152,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,200,2142981854, 1365385561,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,201,763711891, 1735754548,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,202,1581256466, 173689858,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,203,2121337132, 1247108250,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,204,1004003636, 891894307,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,205,569816524, 358675254,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,206,626626425, 116062841,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,207,632086003, 861268491,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,208,1008211580, 779404957,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,209,1134217766, 1766838261,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,210,1423829292, 1706666192,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,211,942037869, 1549358884,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,212,1959429535, 480779114,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,213,778311037, 1940360875,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,214,1531372185, 2009078158,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,215,241935492, 1050047003,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,216,272453504, 1870883868,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,217,390441332, 1057903098,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,218,1230238834, 1548117688,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,219,1242956379, 1217296445,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,220,515648357, 1675011378,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,221,364477932, 355212934,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,222,2096008713, 1570161804,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,223,1409752526, 214033983,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,224,1288158292, 1760636178,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,225,407562666, 1265144848,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,226,1071056491, 1582316946,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,227,1014143949, 911406955,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,228,203080461, 809380052,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,229,125647866, 1705464126,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,230,2015685843, 599230667,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,231,1425476020, 668203729,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,232,1673735652, 567931803,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,233,1714199325, 181737617,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,234,1389137652, 678147926,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,235,288547803, 435433694,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,236,200159281, 654399753,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,237,1580828223, 1298308945,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,238,1832286107, 169991953,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,239,182557704, 1046541065,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,240,1688025575, 1248944426,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,241,1508287706, 1220577001,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,242,36721212, 1377275347,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,243,1968679856, 1675229747,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,244,279109231, 1835333261,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,245,1358617667, 1416978076,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,246,740626186, 2103913602,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,247,1882655908, 251341858,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,248,648016670, 1459615287,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,249,780255321, 154906988,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,250,857296483, 203375965,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,251,1631676846, 681204578,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,252,1906971307, 1623728832,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,253,1541899600, 1168449797,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,254,1267051693, 1020078717,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,255,1998673940, 1298394942,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,256,1914117058, 1381290704,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,257,426068513, 1381618498,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,258,139365577, 1598767734,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,259,2129910384, 952266588,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,260,661788054, 19661356,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,261,1104640222, 240506063,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,262,356133630, 1676634527,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,263,242242374, 1863206182,
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,264,957935844, 1490681416};
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,266,private RandomSeedTable() {
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,276,public static int getSeedAtRowColumn(int row, int column) {
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,278,int rows = rows();
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,280,int theRow = Math.abs(row % rows);
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,281,int theColumn = Math.abs(column % COLUMNS);
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,283,int seed = seeds[theRow * COLUMNS + theColumn];
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,286,int cycle = Math.abs(row / rows);
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,287,int mask = ((cycle & 0x000007ff) << 20); // cycle==0 --> mask = 0
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,288,seed ^= mask;  // cycle==0 --> seed stays unaffected
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,291,return seed;
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,299,private static int rows() {
math/src/main/java/org/apache/mahout/math/jet/random/engine/RandomSeedTable.java,300,return seeds.length / COLUMNS;
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/jdbc/AbstractJDBCItemSimilarity.java,28,import org.apache.mahout.cf.taste.common.NoSuchItemException;
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/jdbc/AbstractJDBCItemSimilarity.java,76,log
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/jdbc/AbstractJDBCItemSimilarity.java,77,.warn("You are not using ConnectionPoolDataSource. Make sure your DataSource pools connections "
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/jdbc/AbstractJDBCItemSimilarity.java,78,+ "to the database itself, or database performance will be severely reduced.");
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/jdbc/AbstractJDBCItemSimilarity.java,134,if (rs.next()) {
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/jdbc/AbstractJDBCItemSimilarity.java,135,return rs.getDouble(1);
core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/jdbc/AbstractJDBCItemSimilarity.java,137,throw new NoSuchItemException();
math/src/main/java/org/apache/mahout/math/jet/stat/Probability.java,538,public static double normal(double a) throws ArithmeticException {
math/src/main/java/org/apache/mahout/math/jet/stat/Probability.java,540,double x = a * SQRTH;
math/src/main/java/org/apache/mahout/math/jet/stat/Probability.java,541,double z = Math.abs(x);
math/src/main/java/org/apache/mahout/math/jet/stat/Probability.java,543,double y;
math/src/main/java/org/apache/mahout/math/jet/stat/Probability.java,544,if (z < SQRTH) {
math/src/main/java/org/apache/mahout/math/jet/stat/Probability.java,545,y = 0.5 + 0.5 * errorFunction(x);
math/src/main/java/org/apache/mahout/math/jet/stat/Probability.java,547,y = 0.5 * errorFunctionComplemented(z);
math/src/main/java/org/apache/mahout/math/jet/stat/Probability.java,548,if (x > 0) {
math/src/main/java/org/apache/mahout/math/jet/stat/Probability.java,549,y = 1.0 - y;
math/src/main/java/org/apache/mahout/math/jet/stat/Probability.java,553,return y;
math/src/main/java/org/apache/mahout/math/jet/stat/Probability.java,576,if (x > 0) {
math/src/main/java/org/apache/mahout/math/jet/stat/Probability.java,577,return 0.5 + 0.5 * errorFunction((x - mean) / Math.sqrt(2.0 * variance));
math/src/main/java/org/apache/mahout/math/jet/stat/Probability.java,579,return 0.5 - 0.5 * errorFunction((-(x - mean)) / Math.sqrt(2.0 * variance));
core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansDriver.java,350,Writable key;
core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansDriver.java,352,key = (Writable) reader.getKeyClass().newInstance();
core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansDriver.java,360,Cluster value = new Cluster();
core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansDriver.java,361,while (reader.next(key, value)) {
core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansDriver.java,362,if (value.isConverged() == false) {
core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansDriver.java,363,return false;
core/src/main/java/org/apache/mahout/cf/taste/hadoop/pseudo/RecommenderJob.java,133,jobConf.set(RecommenderReducer.USERS_FILE, usersFile);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/pseudo/RecommenderReducer.java,27,import org.apache.hadoop.fs.FSDataInputStream;
core/src/main/java/org/apache/mahout/cf/taste/hadoop/pseudo/RecommenderReducer.java,39,import org.apache.mahout.cf.taste.impl.common.FastIDSet;
core/src/main/java/org/apache/mahout/cf/taste/hadoop/pseudo/RecommenderReducer.java,44,import org.apache.mahout.common.FileLineIterable;
core/src/main/java/org/apache/mahout/cf/taste/hadoop/pseudo/RecommenderReducer.java,61,static final String USERS_FILE = "usersFile";
core/src/main/java/org/apache/mahout/cf/taste/hadoop/pseudo/RecommenderReducer.java,65,private FastIDSet usersToRecommendFor;
core/src/main/java/org/apache/mahout/cf/taste/hadoop/pseudo/RecommenderReducer.java,79,String usersFilePathString = jobConf.get(USERS_FILE);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/pseudo/RecommenderReducer.java,80,if (usersFilePathString == null) {
core/src/main/java/org/apache/mahout/cf/taste/hadoop/pseudo/RecommenderReducer.java,81,usersToRecommendFor = null;
core/src/main/java/org/apache/mahout/cf/taste/hadoop/pseudo/RecommenderReducer.java,83,usersToRecommendFor = new FastIDSet();
core/src/main/java/org/apache/mahout/cf/taste/hadoop/pseudo/RecommenderReducer.java,84,Path usersFilePath = new Path(usersFilePathString).makeQualified(fs);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/pseudo/RecommenderReducer.java,85,FSDataInputStream in = fs.open(usersFilePath);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/pseudo/RecommenderReducer.java,86,for (String line : new FileLineIterable(in)) {
core/src/main/java/org/apache/mahout/cf/taste/hadoop/pseudo/RecommenderReducer.java,87,usersToRecommendFor.add(Long.parseLong(line));
core/src/main/java/org/apache/mahout/cf/taste/hadoop/pseudo/RecommenderReducer.java,118,if ((usersToRecommendFor != null) && !usersToRecommendFor.contains(userID)) {
core/src/main/java/org/apache/mahout/cf/taste/hadoop/pseudo/RecommenderReducer.java,119,return;
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/ToUserVectorReducer.java,63,private final VectorWritable vectorWritable = new VectorWritable();
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/ToUserVectorReducer.java,93,vectorWritable.set(userVector);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/ToUserVectorReducer.java,94,output.collect(userID, vectorWritable);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/UserVectorToCooccurrenceReducer.java,35,private final VectorWritable vectorWritable = new VectorWritable();
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/UserVectorToCooccurrenceReducer.java,55,vectorWritable.set(cooccurrenceRow);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/UserVectorToCooccurrenceReducer.java,56,output.collect(index1, vectorWritable);
core/src/main/java/org/apache/mahout/clustering/canopy/CanopyClusterer.java,172,VectorWritable vw = new VectorWritable();
core/src/main/java/org/apache/mahout/clustering/canopy/CanopyClusterer.java,177,vw.set(point);
core/src/main/java/org/apache/mahout/clustering/canopy/CanopyClusterer.java,187,vw.set(point);
core/src/main/java/org/apache/mahout/clustering/canopy/CanopyMapper.java,62,VectorWritable vw = new VectorWritable();
core/src/main/java/org/apache/mahout/clustering/canopy/CanopyMapper.java,63,vw.set(centroid);
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansClusterMapper.java,44,clusterer.outputPointWithClusterProbabilities(key.toString(), point.get(), clusters, output);
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansClusterer.java,126,Vector point,
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansClusterer.java,140,String name = point.getName();
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansClusterer.java,141,output.collect(new Text((name != null) && (name.length() != 0) ? name : point.asFormatString()), fOutput);
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansClusterer.java,191,public static List<List<SoftCluster>> clusterPoints(List<Vector> points,
core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansClusterer.java,224,public static boolean runFuzzyKMeansIteration(List<Vector> points,
core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansClusterMapper.java,45,this.clusterer.outputPointWithClusterInfo(point.get(), clusters, output);
core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansClusterMapper.java,54,void config(List<Cluster> clusters) {
core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansClusterMapper.java,55,this.clusters.clear();
core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansClusterMapper.java,56,this.clusters.addAll(clusters);
core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansClusterer.java,81,public void outputPointWithClusterInfo(Vector point,
core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansClusterer.java,95,String name = point.getName();
core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansClusterer.java,96,String key = (name != null) && (name.length() != 0) ? name : point.asFormatString();
core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansClusterer.java,97,output.collect(new Text(key), new Text(String.valueOf(nearestCluster.getId())));
core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansClusterer.java,113,public static List<List<Cluster>> clusterPoints(List<Vector> points,
core/src/main/java/org/apache/mahout/clustering/kmeans/KMeansClusterer.java,148,public static boolean runKMeansIteration(List<Vector> points,
core/src/main/java/org/apache/mahout/math/DenseVectorWritable.java,20,import org.apache.hadoop.io.Writable;
core/src/main/java/org/apache/mahout/math/DenseVectorWritable.java,25,import java.util.Iterator;
core/src/main/java/org/apache/mahout/math/DenseVectorWritable.java,27,public class DenseVectorWritable extends DenseVector implements Writable {
core/src/main/java/org/apache/mahout/math/DenseVectorWritable.java,29,public DenseVectorWritable() {
core/src/main/java/org/apache/mahout/math/DenseVectorWritable.java,33,public DenseVectorWritable(DenseVector v) {
core/src/main/java/org/apache/mahout/math/DenseVectorWritable.java,34,setName(v.getName());
core/src/main/java/org/apache/mahout/math/DenseVectorWritable.java,35,values = v.values;
core/src/main/java/org/apache/mahout/math/DenseVectorWritable.java,36,lengthSquared = v.lengthSquared;
core/src/main/java/org/apache/mahout/math/DenseVectorWritable.java,41,dataOutput.writeUTF(getClass().getName());
core/src/main/java/org/apache/mahout/math/DenseVectorWritable.java,42,dataOutput.writeUTF(this.getName() == null ? "" : this.getName());
core/src/main/java/org/apache/mahout/math/DenseVectorWritable.java,43,dataOutput.writeInt(size());
core/src/main/java/org/apache/mahout/math/DenseVectorWritable.java,44,dataOutput.writeDouble(lengthSquared);
core/src/main/java/org/apache/mahout/math/DenseVectorWritable.java,45,Iterator<Vector.Element> iter = iterateAll();
core/src/main/java/org/apache/mahout/math/DenseVectorWritable.java,46,while (iter.hasNext()) {
core/src/main/java/org/apache/mahout/math/DenseVectorWritable.java,47,Vector.Element element = iter.next();
core/src/main/java/org/apache/mahout/math/DenseVectorWritable.java,53,public void readFields(DataInput dataInput) throws IOException {
core/src/main/java/org/apache/mahout/math/DenseVectorWritable.java,54,String className = dataInput.readUTF();
core/src/main/java/org/apache/mahout/math/DenseVectorWritable.java,55,if(className.equals(getClass().getName())) {
core/src/main/java/org/apache/mahout/math/DenseVectorWritable.java,56,this.setName(dataInput.readUTF());
core/src/main/java/org/apache/mahout/math/DenseVectorWritable.java,58,setName(className); // we have already read the class name in VectorWritable
core/src/main/java/org/apache/mahout/math/DenseVectorWritable.java,60,double[] values = new double[dataInput.readInt()];
core/src/main/java/org/apache/mahout/math/DenseVectorWritable.java,61,lengthSquared = dataInput.readDouble();
core/src/main/java/org/apache/mahout/math/DenseVectorWritable.java,63,values[i] = dataInput.readDouble();
core/src/main/java/org/apache/mahout/math/DenseVectorWritable.java,65,this.values = values;
core/src/main/java/org/apache/mahout/math/RandomAccessSparseVectorWritable.java,20,import org.apache.hadoop.io.Writable;
core/src/main/java/org/apache/mahout/math/RandomAccessSparseVectorWritable.java,29,public class RandomAccessSparseVectorWritable extends RandomAccessSparseVector implements Writable {
core/src/main/java/org/apache/mahout/math/RandomAccessSparseVectorWritable.java,31,public RandomAccessSparseVectorWritable(Vector v) {
core/src/main/java/org/apache/mahout/math/RandomAccessSparseVectorWritable.java,32,super(v);
core/src/main/java/org/apache/mahout/math/RandomAccessSparseVectorWritable.java,41,dataOutput.writeUTF(getClass().getName());
core/src/main/java/org/apache/mahout/math/RandomAccessSparseVectorWritable.java,42,dataOutput.writeUTF(this.getName() == null ? "" : this.getName());
core/src/main/java/org/apache/mahout/math/RandomAccessSparseVectorWritable.java,43,int nde = getNumNondefaultElements();
core/src/main/java/org/apache/mahout/math/RandomAccessSparseVectorWritable.java,44,dataOutput.writeInt(size());
core/src/main/java/org/apache/mahout/math/RandomAccessSparseVectorWritable.java,45,dataOutput.writeInt(nde);
core/src/main/java/org/apache/mahout/math/RandomAccessSparseVectorWritable.java,46,Iterator<Vector.Element> iter = iterateNonZero();
core/src/main/java/org/apache/mahout/math/RandomAccessSparseVectorWritable.java,47,int count = 0;
core/src/main/java/org/apache/mahout/math/RandomAccessSparseVectorWritable.java,52,count++;
core/src/main/java/org/apache/mahout/math/RandomAccessSparseVectorWritable.java,54,assert (nde == count);
core/src/main/java/org/apache/mahout/math/RandomAccessSparseVectorWritable.java,59,String className = dataInput.readUTF();
core/src/main/java/org/apache/mahout/math/RandomAccessSparseVectorWritable.java,60,if(className.equals(getClass().getName())) {
core/src/main/java/org/apache/mahout/math/RandomAccessSparseVectorWritable.java,61,this.setName(dataInput.readUTF());
core/src/main/java/org/apache/mahout/math/RandomAccessSparseVectorWritable.java,63,setName(className); // we have already read the class name in VectorWritable
core/src/main/java/org/apache/mahout/math/RandomAccessSparseVectorWritable.java,65,size = dataInput.readInt();
core/src/main/java/org/apache/mahout/math/RandomAccessSparseVectorWritable.java,66,int cardinality = dataInput.readInt();
core/src/main/java/org/apache/mahout/math/RandomAccessSparseVectorWritable.java,67,OpenIntDoubleHashMap values = new OpenIntDoubleHashMap(cardinality);
core/src/main/java/org/apache/mahout/math/RandomAccessSparseVectorWritable.java,68,int i = 0;
core/src/main/java/org/apache/mahout/math/RandomAccessSparseVectorWritable.java,69,while (i < cardinality) {
core/src/main/java/org/apache/mahout/math/RandomAccessSparseVectorWritable.java,73,i++;
core/src/main/java/org/apache/mahout/math/RandomAccessSparseVectorWritable.java,75,assert (i == cardinality);
core/src/main/java/org/apache/mahout/math/RandomAccessSparseVectorWritable.java,76,this.values = values;
core/src/main/java/org/apache/mahout/math/SequentialAccessSparseVectorWritable.java,25,import org.apache.hadoop.io.Writable;
core/src/main/java/org/apache/mahout/math/SequentialAccessSparseVectorWritable.java,27,public class SequentialAccessSparseVectorWritable extends SequentialAccessSparseVector implements Writable {
core/src/main/java/org/apache/mahout/math/SequentialAccessSparseVectorWritable.java,38,public void write(DataOutput dataOutput) throws IOException {
core/src/main/java/org/apache/mahout/math/SequentialAccessSparseVectorWritable.java,39,dataOutput.writeUTF(getClass().getName());
core/src/main/java/org/apache/mahout/math/SequentialAccessSparseVectorWritable.java,40,dataOutput.writeUTF(getName() == null ? "" : getName());
core/src/main/java/org/apache/mahout/math/SequentialAccessSparseVectorWritable.java,41,dataOutput.writeInt(size());
core/src/main/java/org/apache/mahout/math/SequentialAccessSparseVectorWritable.java,42,int nde = getNumNondefaultElements();
core/src/main/java/org/apache/mahout/math/SequentialAccessSparseVectorWritable.java,43,dataOutput.writeInt(nde);
core/src/main/java/org/apache/mahout/math/SequentialAccessSparseVectorWritable.java,44,Iterator<Element> iter = iterateNonZero();
core/src/main/java/org/apache/mahout/math/SequentialAccessSparseVectorWritable.java,45,int count = 0;
core/src/main/java/org/apache/mahout/math/SequentialAccessSparseVectorWritable.java,47,Element element = iter.next();
core/src/main/java/org/apache/mahout/math/SequentialAccessSparseVectorWritable.java,48,dataOutput.writeInt(element.index());
core/src/main/java/org/apache/mahout/math/SequentialAccessSparseVectorWritable.java,49,dataOutput.writeDouble(element.get());
core/src/main/java/org/apache/mahout/math/SequentialAccessSparseVectorWritable.java,50,count++;
core/src/main/java/org/apache/mahout/math/SequentialAccessSparseVectorWritable.java,52,assert (nde == count);
core/src/main/java/org/apache/mahout/math/SequentialAccessSparseVectorWritable.java,56,public void readFields(DataInput dataInput) throws IOException {
core/src/main/java/org/apache/mahout/math/SequentialAccessSparseVectorWritable.java,57,String className = dataInput.readUTF();
core/src/main/java/org/apache/mahout/math/SequentialAccessSparseVectorWritable.java,58,if(className.equals(getClass().getName())) {
core/src/main/java/org/apache/mahout/math/SequentialAccessSparseVectorWritable.java,59,setName(dataInput.readUTF());
core/src/main/java/org/apache/mahout/math/SequentialAccessSparseVectorWritable.java,61,setName(className); // we have already read the class name in VectorWritable
core/src/main/java/org/apache/mahout/math/SequentialAccessSparseVectorWritable.java,63,size = dataInput.readInt();
core/src/main/java/org/apache/mahout/math/SequentialAccessSparseVectorWritable.java,64,int nde = dataInput.readInt();
core/src/main/java/org/apache/mahout/math/SequentialAccessSparseVectorWritable.java,65,OrderedIntDoubleMapping values = new OrderedIntDoubleMapping(nde);
core/src/main/java/org/apache/mahout/math/SequentialAccessSparseVectorWritable.java,66,for (int i = 0; i < nde; i++) {
core/src/main/java/org/apache/mahout/math/SequentialAccessSparseVectorWritable.java,67,values.set(dataInput.readInt(), dataInput.readDouble());
core/src/main/java/org/apache/mahout/math/SequentialAccessSparseVectorWritable.java,69,this.values = values;
core/src/main/java/org/apache/mahout/math/VectorWritable.java,31,public Vector get() {
core/src/main/java/org/apache/mahout/math/VectorWritable.java,32,return vector;
core/src/main/java/org/apache/mahout/math/VectorWritable.java,35,public void set(Vector vector) {
core/src/main/java/org/apache/mahout/math/VectorWritable.java,39,public VectorWritable() {
core/src/main/java/org/apache/mahout/math/VectorWritable.java,42,public VectorWritable(Vector v) {
core/src/main/java/org/apache/mahout/math/VectorWritable.java,43,vector = v;
core/src/main/java/org/apache/mahout/math/VectorWritable.java,48,Writable w;
core/src/main/java/org/apache/mahout/math/VectorWritable.java,49,if (vector instanceof Writable) {
core/src/main/java/org/apache/mahout/math/VectorWritable.java,50,w = (Writable) vector;
core/src/main/java/org/apache/mahout/math/VectorWritable.java,52,w = new RandomAccessSparseVectorWritable(vector);
core/src/main/java/org/apache/mahout/math/VectorWritable.java,54,w = new SequentialAccessSparseVectorWritable((SequentialAccessSparseVector)vector);
core/src/main/java/org/apache/mahout/math/VectorWritable.java,56,w = new DenseVectorWritable(new DenseVector(vector));
core/src/main/java/org/apache/mahout/math/VectorWritable.java,58,w.write(out);
core/src/main/java/org/apache/mahout/math/VectorWritable.java,64,String vectorClassName = in.readUTF();
core/src/main/java/org/apache/mahout/math/VectorWritable.java,65,Class<? extends Vector> vectorClass = Class.forName(vectorClassName).asSubclass(Vector.class);
core/src/main/java/org/apache/mahout/math/VectorWritable.java,66,vector = vectorClass.newInstance();
core/src/main/java/org/apache/mahout/math/VectorWritable.java,67,((Writable)vector).readFields(in);
core/src/main/java/org/apache/mahout/math/hadoop/MatrixMultiplicationJob.java,123,private final VectorWritable outVector = new VectorWritable();
core/src/main/java/org/apache/mahout/math/hadoop/MatrixMultiplicationJob.java,143,outVector.set(outFrag.times(e.get()));
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,43,import org.slf4j.Logger;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,44,import org.slf4j.LoggerFactory;
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,52,private static final Logger log = LoggerFactory.getLogger(TimesSquaredJob.class);
core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java,100,conf.setJobName("TimesSquaredJob: " + matrixInputPath + " timesSquared(" + v.getName() + ')');
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/DistributedLanczosSolver.java,104,VectorWritable vw = new VectorWritable();
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/DistributedLanczosSolver.java,108,v.setName("eigenVector" + i + ", eigenvalue = " + eigenValues.get(i));
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/DistributedLanczosSolver.java,109,vw.set(v);
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/EigenVector.java,34,setName("e|" + order +"| = |"+eigenValue+"|, err = "+cosAngleError);
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/EigenVector.java,51,String[] s = EQUAL_PATTERN.split(getName());
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/EigenVerificationJob.java,185,VectorWritable vw = new VectorWritable();
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/EigenVerificationJob.java,194,log.info("appending " + ev.getName() + " to " + path.toString());
core/src/main/java/org/apache/mahout/math/hadoop/decomposer/EigenVerificationJob.java,195,vw.set(ev);
examples/src/main/java/org/apache/mahout/clustering/dirichlet/DisplayDirichlet.java,217,sampleData.add(new VectorWritable(new DenseVector(new double[] {UncommonDistributions.rNorm(mx, sd),
examples/src/main/java/org/apache/mahout/clustering/dirichlet/DisplayDirichlet.java,218,UncommonDistributions.rNorm(my, sd)})));
examples/src/main/java/org/apache/mahout/clustering/fuzzykmeans/DisplayFuzzyKMeans.java,35,private static final double t1 = 3.0;
examples/src/main/java/org/apache/mahout/clustering/fuzzykmeans/DisplayFuzzyKMeans.java,37,private static final double t2 = 1.5;
examples/src/main/java/org/apache/mahout/clustering/fuzzykmeans/DisplayFuzzyKMeans.java,67,List<Vector> points = new ArrayList<Vector>();
examples/src/main/java/org/apache/mahout/clustering/fuzzykmeans/DisplayFuzzyKMeans.java,69,points.add(sample.get());
examples/src/main/java/org/apache/mahout/clustering/kmeans/DisplayKMeans.java,65,List<Vector> points = new ArrayList<Vector>();
examples/src/main/java/org/apache/mahout/clustering/kmeans/DisplayKMeans.java,67,points.add(sample.get());
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/canopy/InputMapper.java,43,private VectorWritable vectorWritable;
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/canopy/InputMapper.java,64,vectorWritable.set(result);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/canopy/InputMapper.java,78,vectorWritable = new VectorWritable();
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,45,int slice = 0;
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,206,throw new CardinalityException();
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,210,throw new CardinalityException();
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,223,if (c[ROW] != o[ROW] || c[COL] != o[COL]) {
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,224,throw new CardinalityException();
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,238,if (c[ROW] != o[ROW] || c[COL] != o[COL]) {
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,239,throw new CardinalityException();
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,264,throw new CardinalityException();
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,325,if (row < 0 || column < 0 || row >= c[ROW] || column >= c[COL]) {
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,326,throw new IndexException();
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,334,if (c[ROW] != o[ROW] || c[COL] != o[COL]) {
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,335,throw new CardinalityException();
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,361,if (c[ROW] != o[ROW] || c[COL] != o[COL]) {
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,362,throw new CardinalityException();
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,376,if (row < 0 || column < 0 || row >= c[ROW] || column >= c[COL]) {
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,377,throw new IndexException();
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,385,throw new CardinalityException();
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,387,if ((c[ROW] < row) || (row < 0)) {
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,388,throw new IndexException();
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,429,throw new CardinalityException();
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,441,throw new CardinalityException();
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,492,size = rowToColumn ? m.numRows() : m.numCols();
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,497,Vector v = new DenseVector(size);
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,507,public Iterator<Element> iterateAll() {
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,509,int i = 0;
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,511,return i < size;
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,530,return iterateAll();
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,569,return new DenseVector(size);
math/src/main/java/org/apache/mahout/math/AbstractMatrix.java,582,return size;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,41,private String name;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,43,protected int size;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,47,protected AbstractVector() {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,48,this(null, 0);
math/src/main/java/org/apache/mahout/math/AbstractVector.java,51,protected AbstractVector(String name) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,52,this(name, 0);
math/src/main/java/org/apache/mahout/math/AbstractVector.java,55,protected AbstractVector(String name, int size) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,56,this.name = name;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,62,int size = size();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,63,for(int i=0; i<size; i++) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,71,int size = size();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,72,for(int i=0; i<size; i++) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,88,if (length > size) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,89,throw new CardinalityException();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,91,if (offset < 0 || offset + length > size) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,92,throw new IndexException();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,123,if (size() != x.size()) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,124,throw new CardinalityException(size(), x.size());
math/src/main/java/org/apache/mahout/math/AbstractVector.java,140,if (this instanceof DenseVector) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,141,for (int i = 0; i < size(); i++) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,142,double value = this.getQuick(i);
math/src/main/java/org/apache/mahout/math/AbstractVector.java,143,result += value * value;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,145,return result;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,147,Iterator<Element> iter = iterateNonZero();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,148,while (iter.hasNext()) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,149,double value = iter.next().get();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,150,result += value * value;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,152,return result;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,157,if (index >= 0 && index < size()) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,158,return getQuick(index);
math/src/main/java/org/apache/mahout/math/AbstractVector.java,160,throw new IndexException();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,164,public Vector minus(Vector x) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,165,if (size() != x.size()) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,166,throw new CardinalityException();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,168,if (x instanceof RandomAccessSparseVector || x instanceof DenseVector) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,170,Vector result = x.clone();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,171,Iterator<Element> iter = iterateNonZero();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,172,while (iter.hasNext()) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,173,Element e = iter.next();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,174,result.setQuick(e.index(), e.get() - result.getQuick(e.index()));
math/src/main/java/org/apache/mahout/math/AbstractVector.java,176,return result;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,178,Vector result = clone();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,179,Iterator<Element> iter = x.iterateNonZero();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,180,while (iter.hasNext()) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,181,Element e = iter.next();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,182,result.setQuick(e.index(), getQuick(e.index()) - e.get());
math/src/main/java/org/apache/mahout/math/AbstractVector.java,184,return result;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,244,if(v.size() != size()) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,245,throw new CardinalityException();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,281,if (nonZeroElements < size()) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,303,if (nonZeroElements < size() && max < 0.0) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,304,iter = this.iterateAll();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,305,while (iter.hasNext()) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,306,Element element = iter.next();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,307,double tmp = element.get();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,308,if (tmp == 0.0) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,326,if (size() != x.size()) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,327,throw new CardinalityException();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,350,if (index >= 0 && index < size()) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,351,setQuick(index, value);
math/src/main/java/org/apache/mahout/math/AbstractVector.java,353,throw new IndexException(index, size());
math/src/main/java/org/apache/mahout/math/AbstractVector.java,369,if (size() != x.size()) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,370,throw new CardinalityException();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,393,int size = size();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,401,if (values.length != size()) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,402,throw new CardinalityException();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,404,int size = size();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,412,if (other.size() != size()) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,413,throw new CardinalityException();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,415,int size = size();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,427,it = iterateAll();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,441,it = iterateAll();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,451,if (other.size() != size()) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,452,throw new CardinalityException();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,454,for (int i = 0; i < size(); i++) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,461,Matrix result = matrixLike(size(), other.size());
math/src/main/java/org/apache/mahout/math/AbstractVector.java,462,for (int row = 0; row < size(); row++) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,484,public String getName() {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,485,return name;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,488,public void setName(String name) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,489,this.name = name;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,492,public int size() {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,516,public static boolean equivalent(Vector left, Vector right) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,517,if (left == right) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,518,return true;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,520,int leftCardinality = left.size();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,521,if (leftCardinality == right.size()) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,522,for (int i = 0; i < leftCardinality; i++) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,523,if (left.getQuick(i) != right.getQuick(i)) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,524,return false;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,529,return false;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,531,return true;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,542,public static boolean strictEquivalence(Vector left, Vector right) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,543,if (left == right) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,546,if (!(left.getClass().equals(right.getClass()))) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,549,String leftName = left.getName();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,550,String rightName = right.getName();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,551,if (leftName != null && rightName != null && !leftName.equals(rightName)) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,552,return false;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,554,|| (rightName != null && leftName == null)) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,558,int leftCardinality = left.size();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,559,if (leftCardinality == right.size()) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,560,for (int i = 0; i < leftCardinality; i++) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,561,if (left.getQuick(i) != right.getQuick(i)) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,562,return false;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,567,return false;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,573,public int hashCode() {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,574,int prime = 31;
math/src/main/java/org/apache/mahout/math/AbstractVector.java,575,int result = prime + ((name == null) ? 0 : name.hashCode());
math/src/main/java/org/apache/mahout/math/AbstractVector.java,576,result = prime * result + size();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,577,Iterator<Element> iter = iterateNonZero();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,578,while (iter.hasNext()) {
math/src/main/java/org/apache/mahout/math/AbstractVector.java,579,Element ele = iter.next();
math/src/main/java/org/apache/mahout/math/AbstractVector.java,580,long v = Double.doubleToLongBits(ele.get());
math/src/main/java/org/apache/mahout/math/AbstractVector.java,581,result += (ele.index() * (int)(v^(v>>32)));
math/src/main/java/org/apache/mahout/math/AbstractVector.java,583,return result;
math/src/main/java/org/apache/mahout/math/DenseVector.java,30,protected double[] values;
math/src/main/java/org/apache/mahout/math/DenseVector.java,36,public DenseVector(String name) {
math/src/main/java/org/apache/mahout/math/DenseVector.java,37,super(name);
math/src/main/java/org/apache/mahout/math/DenseVector.java,53,public DenseVector(String name, double[] values) {
math/src/main/java/org/apache/mahout/math/DenseVector.java,54,super(name);
math/src/main/java/org/apache/mahout/math/DenseVector.java,55,this.values = values.clone();
math/src/main/java/org/apache/mahout/math/DenseVector.java,60,this(null, cardinality);
math/src/main/java/org/apache/mahout/math/DenseVector.java,63,public DenseVector(String name, int cardinality) {
math/src/main/java/org/apache/mahout/math/DenseVector.java,64,super(name);
math/src/main/java/org/apache/mahout/math/DenseVector.java,73,super(vector.getName());
math/src/main/java/org/apache/mahout/math/DenseVector.java,75,Iterator<Vector.Element> it = vector.iterateNonZero();
math/src/main/java/org/apache/mahout/math/DenseVector.java,76,while(it.hasNext()) {
math/src/main/java/org/apache/mahout/math/DenseVector.java,77,Vector.Element e = it.next();
math/src/main/java/org/apache/mahout/math/DenseVector.java,88,public int size() {
math/src/main/java/org/apache/mahout/math/DenseVector.java,89,return values.length;
math/src/main/java/org/apache/mahout/math/DenseVector.java,129,if (other.size() != size()) {
math/src/main/java/org/apache/mahout/math/DenseVector.java,130,throw new CardinalityException();
math/src/main/java/org/apache/mahout/math/DenseVector.java,134,Iterator<Vector.Element> it = other.iterateNonZero();
math/src/main/java/org/apache/mahout/math/DenseVector.java,135,Vector.Element e;
math/src/main/java/org/apache/mahout/math/DenseVector.java,154,if (length > values.length) {
math/src/main/java/org/apache/mahout/math/DenseVector.java,155,throw new CardinalityException();
math/src/main/java/org/apache/mahout/math/DenseVector.java,157,if (offset < 0 || offset + length > values.length) {
math/src/main/java/org/apache/mahout/math/DenseVector.java,158,throw new IndexException();
math/src/main/java/org/apache/mahout/math/DenseVector.java,168,public Iterator<Vector.Element> iterateNonZero() {
math/src/main/java/org/apache/mahout/math/DenseVector.java,169,return new NonZeroIterator();
math/src/main/java/org/apache/mahout/math/DenseVector.java,172,public Iterator<Vector.Element> iterateAll() {
math/src/main/java/org/apache/mahout/math/DenseVector.java,176,private class NonZeroIterator implements Iterator<Vector.Element> {
math/src/main/java/org/apache/mahout/math/DenseVector.java,178,private final Element element = new Element(0);
math/src/main/java/org/apache/mahout/math/DenseVector.java,179,private int offset;
math/src/main/java/org/apache/mahout/math/DenseVector.java,181,private NonZeroIterator() {
math/src/main/java/org/apache/mahout/math/DenseVector.java,182,goToNext();
math/src/main/java/org/apache/mahout/math/DenseVector.java,185,private void goToNext() {
math/src/main/java/org/apache/mahout/math/DenseVector.java,186,while (offset < values.length && values[offset] == 0) {
math/src/main/java/org/apache/mahout/math/DenseVector.java,187,offset++;
math/src/main/java/org/apache/mahout/math/DenseVector.java,191,public boolean hasNext() {
math/src/main/java/org/apache/mahout/math/DenseVector.java,192,return offset < values.length;
math/src/main/java/org/apache/mahout/math/DenseVector.java,195,public Vector.Element next() {
math/src/main/java/org/apache/mahout/math/DenseVector.java,196,if (offset >= values.length) {
math/src/main/java/org/apache/mahout/math/DenseVector.java,197,throw new NoSuchElementException();
math/src/main/java/org/apache/mahout/math/DenseVector.java,199,element.ind = offset;
math/src/main/java/org/apache/mahout/math/DenseVector.java,200,offset++;
math/src/main/java/org/apache/mahout/math/DenseVector.java,201,goToNext();
math/src/main/java/org/apache/mahout/math/DenseVector.java,202,return element;
math/src/main/java/org/apache/mahout/math/DenseVector.java,205,public void remove() {
math/src/main/java/org/apache/mahout/math/DenseVector.java,206,throw new UnsupportedOperationException();
math/src/main/java/org/apache/mahout/math/DenseVector.java,210,private class AllIterator implements Iterator<Vector.Element> {
math/src/main/java/org/apache/mahout/math/DenseVector.java,212,private final Element element = new Element(-1);
math/src/main/java/org/apache/mahout/math/DenseVector.java,214,public boolean hasNext() {
math/src/main/java/org/apache/mahout/math/DenseVector.java,215,return element.ind + 1 < values.length;
math/src/main/java/org/apache/mahout/math/DenseVector.java,218,public Vector.Element next() {
math/src/main/java/org/apache/mahout/math/DenseVector.java,219,if (!hasNext()) {
math/src/main/java/org/apache/mahout/math/DenseVector.java,220,throw new NoSuchElementException();
math/src/main/java/org/apache/mahout/math/DenseVector.java,222,element.ind++;
math/src/main/java/org/apache/mahout/math/DenseVector.java,223,return element;
math/src/main/java/org/apache/mahout/math/DenseVector.java,226,public void remove() {
math/src/main/java/org/apache/mahout/math/DenseVector.java,227,throw new UnsupportedOperationException();
math/src/main/java/org/apache/mahout/math/DenseVector.java,231,public class Element implements Vector.Element {
math/src/main/java/org/apache/mahout/math/DenseVector.java,233,private int ind;
math/src/main/java/org/apache/mahout/math/DenseVector.java,235,public Element(int ind) {
math/src/main/java/org/apache/mahout/math/DenseVector.java,236,this.ind = ind;
math/src/main/java/org/apache/mahout/math/DenseVector.java,239,public double get() {
math/src/main/java/org/apache/mahout/math/DenseVector.java,240,return values[ind];
math/src/main/java/org/apache/mahout/math/DenseVector.java,243,public int index() {
math/src/main/java/org/apache/mahout/math/DenseVector.java,244,return ind;
math/src/main/java/org/apache/mahout/math/DenseVector.java,247,public void set(double value) {
math/src/main/java/org/apache/mahout/math/DenseVector.java,248,lengthSquared = -1.0;
math/src/main/java/org/apache/mahout/math/DenseVector.java,249,values[ind] = value;
math/src/main/java/org/apache/mahout/math/DenseVector.java,253,public Vector.Element getElement(int index) {
math/src/main/java/org/apache/mahout/math/DenseVector.java,254,return new Element(index);
math/src/main/java/org/apache/mahout/math/DenseVector.java,268,if (this == o) {
math/src/main/java/org/apache/mahout/math/DenseVector.java,269,return true;
math/src/main/java/org/apache/mahout/math/DenseVector.java,271,if (!(o instanceof Vector)) {
math/src/main/java/org/apache/mahout/math/DenseVector.java,272,return false;
math/src/main/java/org/apache/mahout/math/DenseVector.java,275,Vector that = (Vector) o;
math/src/main/java/org/apache/mahout/math/DenseVector.java,276,String thisName = getName();
math/src/main/java/org/apache/mahout/math/DenseVector.java,277,String thatName = that.getName();
math/src/main/java/org/apache/mahout/math/DenseVector.java,278,if (this.size() != that.size()) {
math/src/main/java/org/apache/mahout/math/DenseVector.java,279,return false;
math/src/main/java/org/apache/mahout/math/DenseVector.java,281,if (thisName != null && thatName != null && !thisName.equals(thatName)) {
math/src/main/java/org/apache/mahout/math/DenseVector.java,282,return false;
math/src/main/java/org/apache/mahout/math/DenseVector.java,284,|| (thatName != null && thisName == null)) {
math/src/main/java/org/apache/mahout/math/DenseVector.java,285,return false;
math/src/main/java/org/apache/mahout/math/DenseVector.java,288,if (that instanceof DenseVector) {
math/src/main/java/org/apache/mahout/math/DenseVector.java,289,if (!Arrays.equals(values, ((DenseVector) that).values)) {
math/src/main/java/org/apache/mahout/math/DenseVector.java,290,return false;
math/src/main/java/org/apache/mahout/math/DenseVector.java,293,return equivalent(this, that);
math/src/main/java/org/apache/mahout/math/DenseVector.java,296,return true;
math/src/main/java/org/apache/mahout/math/DenseVector.java,317,if (v.size() != size()) {
math/src/main/java/org/apache/mahout/math/DenseVector.java,318,throw new CardinalityException();
math/src/main/java/org/apache/mahout/math/DenseVector.java,326,if (v.size() != size()) {
math/src/main/java/org/apache/mahout/math/DenseVector.java,327,throw new CardinalityException();
math/src/main/java/org/apache/mahout/math/DenseVector.java,330,Iterator<org.apache.mahout.math.Vector.Element> iter = v.iterateNonZero();
math/src/main/java/org/apache/mahout/math/DenseVector.java,332,org.apache.mahout.math.Vector.Element element = iter.next();
math/src/main/java/org/apache/mahout/math/DenseVector.java,343,if(this == x) return dotSelf();
math/src/main/java/org/apache/mahout/math/DenseVector.java,353,Iterator<org.apache.mahout.math.Vector.Element> iter = x.iterateNonZero();
math/src/main/java/org/apache/mahout/math/DenseVector.java,355,org.apache.mahout.math.Vector.Element element = iter.next();
math/src/main/java/org/apache/mahout/math/OrderedIntDoubleMapping.java,24,private static final double DEFAULT_VALUE = 0.0;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,32,protected OpenIntDoubleHashMap values;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,39,this(null, cardinality, Math.min(cardinality, INITIAL_SIZE)); // arbitrary estimate of
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,44,this(null, cardinality, size);
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,47,public RandomAccessSparseVector(String name, int cardinality) {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,48,this(name, cardinality, Math.min(cardinality, INITIAL_SIZE)); // arbitrary estimate of
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,52,public RandomAccessSparseVector(String name, int cardinality, int size) {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,53,super(name, cardinality);
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,58,this(other.getName(), other.size(), other.getNumNondefaultElements());
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,59,Iterator<Vector.Element> it = other.iterateNonZero();
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,60,Vector.Element e;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,67,super(other.getName(), other.size());
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,86,if (other.size() != size()) {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,87,throw new CardinalityException();
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,90,Iterator<Vector.Element> it = other.iterateNonZero();
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,91,Vector.Element e;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,134,public java.util.Iterator<Vector.Element> iterateNonZero() {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,135,return new NonZeroIterator(false);
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,138,public Iterator<Vector.Element> iterateAll() {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,152,public boolean equals(Object o) {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,153,if (this == o) {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,154,return true;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,156,if (!(o instanceof Vector)) {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,157,return false;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,160,Vector that = (Vector) o;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,161,String thisName = getName();
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,162,String thatName = that.getName();
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,163,if (this.size() != that.size()) {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,164,return false;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,166,if (thisName != null && thatName != null && !thisName.equals(thatName)) {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,167,return false;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,169,|| (thatName != null && thisName == null)) {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,170,return false;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,173,return equivalent(this, that);
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,176,private class AllIterator implements java.util.Iterator<Vector.Element> {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,177,private int offset = 0;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,178,private final Element element = new Element(0);
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,181,return offset < size();
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,184,public Vector.Element next() {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,185,if (offset >= size()) {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,188,element.ind = offset++;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,189,return element;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,198,private class NonZeroIterator implements java.util.Iterator<Vector.Element> {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,199,private int offset = 0;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,200,private final Element element = new Element(0);
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,202,private final IntArrayList intArrList =  values.keys();
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,204,private NonZeroIterator(boolean sorted) {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,205,if (sorted) {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,206,intArrList.sort();
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,211,return offset < intArrList.size();
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,215,if (offset < intArrList.size()) {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,216,element.ind = intArrList.get(offset++);
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,219,throw new NoSuchElementException();
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,227,public Vector.Element getElement(int index) {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,228,return new Element(index);
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,231,public class Element implements Vector.Element {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,232,private int ind;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,234,public Element(int ind) {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,235,this.ind = ind;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,239,return values.get(ind);
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,243,return ind;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,247,lengthSquared = -1.0;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,248,values.put(ind, value);
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,252,private static class AddToVector implements IntDoubleProcedure {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,253,private final Vector v;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,255,private AddToVector(Vector v) {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,256,this.v = v;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,259,public boolean apply(int key, double value) {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,260,v.set(key, value + v.get(key));
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,261,return true;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,266,public void addTo(Vector v) {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,267,if (v.size() != size()) {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,268,throw new CardinalityException(size(), v.size());
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,270,values.forEachPair(new AddToVector(v));
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,273,public double dot(Vector x) {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,274,if (size() != x.size()) {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,275,throw new CardinalityException(size(), x.size());
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,277,if(this == x) return dotSelf();
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,279,double result = 0;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,280,if (x instanceof SequentialAccessSparseVector) {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,281,Iterator<org.apache.mahout.math.Vector.Element> iter = x.iterateNonZero();
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,282,while (iter.hasNext()) {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,283,org.apache.mahout.math.Vector.Element element = iter.next();
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,284,result += element.get() * getQuick(element.index());
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,286,return result;
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,288,Iterator<org.apache.mahout.math.Vector.Element> iter = iterateNonZero();
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,289,while (iter.hasNext()) {
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,290,org.apache.mahout.math.Vector.Element element = iter.next();
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,291,result += element.get() * x.getQuick(element.index());
math/src/main/java/org/apache/mahout/math/RandomAccessSparseVector.java,293,return result;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,23,import org.apache.mahout.math.Vector.Element;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,48,protected OrderedIntDoubleMapping values;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,53,super(null, 0);
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,56,public SequentialAccessSparseVector(int cardinality, int size) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,57,this(null, cardinality, size);
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,60,public SequentialAccessSparseVector(String name, int cardinality, int size) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,61,super(name, cardinality);
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,65,public SequentialAccessSparseVector(String name, int cardinality) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,66,this(name, cardinality, cardinality / 8); // arbitrary estimate of
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,70,public SequentialAccessSparseVector(int cardinality) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,71,this(null, cardinality, cardinality / 8); // arbitrary estimate of
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,76,this(other.getName(), other.size(), other.getNumNondefaultElements());
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,85,super(other.getName(), other.size());
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,90,this(other.getName(), other.size(), other.getNumNondefaultElements());
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,137,return new IntDoublePairIterator(this);
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,140,public Iterator<Element> iterateAll() {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,141,return new IntDoublePairIterator(this, size());
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,154,public boolean equals(Object o) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,155,if (this == o) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,156,return true;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,158,if (!(o instanceof Vector)) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,159,return false;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,162,Vector that = (Vector) o;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,163,String thisName = getName();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,164,String thatName = that.getName();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,165,if (this.size() != that.size()) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,166,return false;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,168,if (thisName != null && thatName != null && !thisName.equals(thatName)) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,169,return false;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,171,|| (thatName != null && thisName == null)) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,172,return false;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,175,if (that instanceof SequentialAccessSparseVector) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,176,return (values == null ? ((SequentialAccessSparseVector) that).values == null : values
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,177,.equals(((SequentialAccessSparseVector) that).values));
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,179,return equivalent(this, that);
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,184,private static final class IntDoublePairIterator implements java.util.Iterator<Element> {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,185,private int offset = 0;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,186,private final AbstractElement element;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,187,private final int maxOffset;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,189,IntDoublePairIterator(SequentialAccessSparseVector v) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,190,element = new SparseElement(offset, v);
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,191,maxOffset = v.values.getNumMappings();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,193,IntDoublePairIterator(SequentialAccessSparseVector v, int cardinality) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,194,element = new DenseElement(offset, v);
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,195,maxOffset = cardinality;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,199,return offset < maxOffset;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,203,if (offset >= maxOffset) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,206,element.offset = offset++;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,207,return element;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,215,public Element getElement(int index) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,216,return new DenseElement(index, this);
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,220,private abstract static class AbstractElement implements Element {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,221,int offset;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,222,final OrderedIntDoubleMapping mapping;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,223,int[] indices;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,224,double[] values;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,226,AbstractElement(int ind, SequentialAccessSparseVector v) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,227,offset = ind;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,228,mapping = v.values;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,229,values = mapping.getValues();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,230,indices = mapping.getIndices();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,234,private static final class DenseElement extends AbstractElement {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,236,private int index;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,237,private final SequentialAccessSparseVector v;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,239,DenseElement(int ind, SequentialAccessSparseVector v) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,240,super(ind, v);
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,241,this.v = v;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,242,index = ind;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,246,if(index >= indices.length) return 0.0;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,247,int cur = indices[index];
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,248,while(cur < offset && index < indices.length - 1) cur = indices[++index];
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,249,if(cur == offset) return values[index];
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,250,return 0.0;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,254,return offset;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,258,v.set(offset, value);
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,260,indices = mapping.getIndices();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,261,values = mapping.getValues();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,265,private static final class SparseElement extends AbstractElement {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,267,private final SequentialAccessSparseVector v;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,269,SparseElement(int ind, SequentialAccessSparseVector v) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,270,super(ind, v);
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,271,this.v = v;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,275,return values[offset];
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,279,return indices[offset];
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,283,v.lengthSquared = -1;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,284,values[offset] = value;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,289,public double dot(Vector x) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,290,if (size() != x.size()) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,291,throw new CardinalityException(size(), x.size());
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,293,if(this == x) return dotSelf();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,295,double result = 0;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,296,if (x instanceof SequentialAccessSparseVector) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,298,Iterator<Element> myIter = iterateNonZero();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,299,Iterator<Element> otherIter = x.iterateNonZero();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,300,Element myCurrent = null;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,301,Element otherCurrent = null;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,302,while (myIter.hasNext() && otherIter.hasNext()) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,303,if (myCurrent == null) myCurrent = myIter.next();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,304,if (otherCurrent == null) otherCurrent = otherIter.next();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,306,int myIndex = myCurrent.index();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,307,int otherIndex = otherCurrent.index();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,309,if (myIndex < otherIndex) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,311,myCurrent = null;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,313,otherCurrent = null;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,315,result += myCurrent.get() * otherCurrent.get();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,316,myCurrent = null;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,317,otherCurrent = null;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,320,return result;
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,322,Iterator<Element> iter = iterateNonZero();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,323,while (iter.hasNext()) {
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,324,Element element = iter.next();
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,325,result += element.get() * x.getQuick(element.index());
math/src/main/java/org/apache/mahout/math/SequentialAccessSparseVector.java,327,return result;
math/src/main/java/org/apache/mahout/math/Vector.java,32,public interface Vector extends Cloneable {
math/src/main/java/org/apache/mahout/math/Vector.java,39,String getName();
math/src/main/java/org/apache/mahout/math/Vector.java,47,void setName(String name);
math/src/main/java/org/apache/mahout/math/Vector.java,125,Iterator<Element> iterateAll();
math/src/main/java/org/apache/mahout/math/VectorView.java,32,private int cardinality;
math/src/main/java/org/apache/mahout/math/VectorView.java,41,this.cardinality = cardinality;
math/src/main/java/org/apache/mahout/math/VectorView.java,50,public int size() {
math/src/main/java/org/apache/mahout/math/VectorView.java,51,return cardinality;
math/src/main/java/org/apache/mahout/math/VectorView.java,78,return cardinality;
math/src/main/java/org/apache/mahout/math/VectorView.java,83,if (length > cardinality) {
math/src/main/java/org/apache/mahout/math/VectorView.java,84,throw new CardinalityException();
math/src/main/java/org/apache/mahout/math/VectorView.java,86,if (offset < 0 || offset + length > cardinality) {
math/src/main/java/org/apache/mahout/math/VectorView.java,87,throw new IndexException();
math/src/main/java/org/apache/mahout/math/VectorView.java,94,return index >= offset && index < offset + cardinality;
math/src/main/java/org/apache/mahout/math/VectorView.java,97,public Iterator<Vector.Element> iterateNonZero() {
math/src/main/java/org/apache/mahout/math/VectorView.java,101,public Iterator<Vector.Element> iterateAll() {
math/src/main/java/org/apache/mahout/math/VectorView.java,105,public class NonZeroIterator implements Iterator<Vector.Element> {
math/src/main/java/org/apache/mahout/math/VectorView.java,107,private final Iterator<Vector.Element> it;
math/src/main/java/org/apache/mahout/math/VectorView.java,109,private Vector.Element el;
math/src/main/java/org/apache/mahout/math/VectorView.java,112,it = vector.iterateAll();
math/src/main/java/org/apache/mahout/math/VectorView.java,120,final Vector.Element decorated = vector.getElement(el.index());
math/src/main/java/org/apache/mahout/math/VectorView.java,121,el = new Vector.Element() {
math/src/main/java/org/apache/mahout/math/VectorView.java,140,public Vector.Element next() {
math/src/main/java/org/apache/mahout/math/VectorView.java,144,Vector.Element buffer = el;
math/src/main/java/org/apache/mahout/math/VectorView.java,159,public class AllIterator implements Iterator<Vector.Element> {
math/src/main/java/org/apache/mahout/math/VectorView.java,161,private final Iterator<Vector.Element> it;
math/src/main/java/org/apache/mahout/math/VectorView.java,163,private Vector.Element el;
math/src/main/java/org/apache/mahout/math/VectorView.java,166,it = vector.iterateAll();
math/src/main/java/org/apache/mahout/math/VectorView.java,174,final Vector.Element decorated = vector.getElement(el.index());
math/src/main/java/org/apache/mahout/math/VectorView.java,175,el = new Vector.Element() {
math/src/main/java/org/apache/mahout/math/VectorView.java,194,public Vector.Element next() {
math/src/main/java/org/apache/mahout/math/VectorView.java,198,Vector.Element buffer = el;
math/src/main/java/org/apache/mahout/math/VectorView.java,217,throw new CardinalityException();
math/src/main/java/org/apache/mahout/math/VectorView.java,226,public Vector.Element getElement(int index) {
math/src/main/java/org/apache/mahout/math/VectorView.java,227,return new Element(index);
math/src/main/java/org/apache/mahout/math/VectorView.java,230,public class Element implements Vector.Element {
math/src/main/java/org/apache/mahout/math/VectorView.java,232,private final int ind;
math/src/main/java/org/apache/mahout/math/VectorView.java,234,private Element(int ind) {
math/src/main/java/org/apache/mahout/math/VectorView.java,235,this.ind = ind;
math/src/main/java/org/apache/mahout/math/VectorView.java,238,public double get() {
math/src/main/java/org/apache/mahout/math/VectorView.java,239,return getQuick(ind);
math/src/main/java/org/apache/mahout/math/VectorView.java,242,public int index() {
math/src/main/java/org/apache/mahout/math/VectorView.java,243,return ind;
math/src/main/java/org/apache/mahout/math/VectorView.java,246,public void set(double value) {
math/src/main/java/org/apache/mahout/math/VectorView.java,247,setQuick(ind, value);
math/src/main/java/org/apache/mahout/math/VectorView.java,252,public boolean equals(Object o) {
math/src/main/java/org/apache/mahout/math/VectorView.java,253,return this == o || (o instanceof Vector && equivalent(this, (Vector) o));
math/src/main/java/org/apache/mahout/math/VectorView.java,258,public int hashCode() {
math/src/main/java/org/apache/mahout/math/VectorView.java,259,int result = vector.hashCode();
math/src/main/java/org/apache/mahout/math/VectorView.java,260,result = 31 * result + offset;
math/src/main/java/org/apache/mahout/math/VectorView.java,261,result = 31 * result + cardinality;
math/src/main/java/org/apache/mahout/math/VectorView.java,262,return result;
math/src/main/java/org/apache/mahout/math/VectorView.java,268,for (int i = 0; i < cardinality; i++) {
math/src/main/java/org/apache/mahout/math/VectorView.java,278,for (int i = 0; i < cardinality; i++) {
math/src/main/java/org/apache/mahout/math/VectorView.java,287,Iterator<Vector.Element> iter = iterateNonZero();
math/src/main/java/org/apache/mahout/math/VectorView.java,289,Vector.Element elt = iter.next();
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/TrainingState.java,30,TrainingState(Matrix eigens, Matrix projections) {
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/TrainingState.java,31,setCurrentEigens(eigens);
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/TrainingState.java,32,setTrainingProjections(projections);
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/TrainingState.java,33,setTrainingIndex(0);
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/TrainingState.java,34,setHelperVector(new DenseVector("helper", eigens.numRows()));
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/TrainingState.java,35,setFirstPass(true);
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/TrainingState.java,36,setStatusProgress(new ArrayList<EigenStatus>());
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/TrainingState.java,37,setActivationNumerator(0);
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/TrainingState.java,38,setActivationDenominatorSquared(0);
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/TrainingState.java,39,setNumEigensProcessed(0);
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/TrainingState.java,54,return getCurrentEigens().getRow(getNumEigensProcessed() - 1);
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/TrainingState.java,59,getTrainingProjections().assignRow(getTrainingIndex(), new DenseVector(getCurrentEigens().numCols()));
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/TrainingState.java,60,return getTrainingProjections().getRow(getTrainingIndex());
utils/src/main/java/org/apache/mahout/utils/vectors/VectorHelper.java,55,String name = vector.getName();
utils/src/main/java/org/apache/mahout/utils/vectors/VectorHelper.java,56,if (name != null && name.length() > 0) {
utils/src/main/java/org/apache/mahout/utils/vectors/VectorHelper.java,57,bldr.append("Name: ").append(name).append(' ');
utils/src/main/java/org/apache/mahout/utils/vectors/common/PartialVectorMergeReducer.java,40,private final VectorWritable vectorWritable = new VectorWritable();
utils/src/main/java/org/apache/mahout/utils/vectors/common/PartialVectorMergeReducer.java,52,Vector vector = new RandomAccessSparseVector(key.toString(), dimension, 10);
utils/src/main/java/org/apache/mahout/utils/vectors/common/PartialVectorMergeReducer.java,63,vectorWritable.set(vector);
utils/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterable.java,120,if (idField != null) {
utils/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterable.java,121,String id = indexReader.document(doc, idFieldSelector).get(idField);
utils/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterable.java,122,result.setName(id);
utils/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterable.java,124,result.setName(String.valueOf(doc));
utils/src/main/java/org/apache/mahout/utils/vectors/text/term/TFPartialVectorReducer.java,54,private final VectorWritable vectorWritable = new VectorWritable();
utils/src/main/java/org/apache/mahout/utils/vectors/text/term/TFPartialVectorReducer.java,71,Vector vector = new RandomAccessSparseVector(key.toString(), dimension, value.length()); // guess at
utils/src/main/java/org/apache/mahout/utils/vectors/text/term/TFPartialVectorReducer.java,107,vectorWritable.set(vector);
utils/src/main/java/org/apache/mahout/utils/vectors/tfidf/TFIDFPartialVectorReducer.java,52,private final VectorWritable vectorWritable = new VectorWritable();
utils/src/main/java/org/apache/mahout/utils/vectors/tfidf/TFIDFPartialVectorReducer.java,70,Vector vector = new RandomAccessSparseVector(key.toString(), (int) featureCount, value
utils/src/main/java/org/apache/mahout/utils/vectors/tfidf/TFIDFPartialVectorReducer.java,71,.getNumNondefaultElements());
utils/src/main/java/org/apache/mahout/utils/vectors/tfidf/TFIDFPartialVectorReducer.java,90,vectorWritable.set(vector);
core/src/main/java/org/apache/mahout/cf/taste/impl/model/jdbc/AbstractBooleanPrefJDBCDataModel.java,56,String getNumPreferenceForItemsSQL) {
core/src/main/java/org/apache/mahout/cf/taste/impl/model/jdbc/MySQLBooleanPrefJDBCDataModel.java,146,+ userIDColumn + ") WHERE tp1." + itemIDColumn + "=? and tp2." + itemIDColumn + "=?");
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/TopItems.java,53,Queue<RecommendedItem> topItems = new PriorityQueue<RecommendedItem>(howMany + 1, Collections
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/TopItems.java,54,.reverseOrder());
core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/TopItems.java,85,Collections.sort(result);
core/src/main/java/org/apache/mahout/cf/taste/impl/model/BooleanItemPreferenceArray.java,44,if (size < 1) {
core/src/main/java/org/apache/mahout/cf/taste/impl/model/BooleanItemPreferenceArray.java,45,throw new IllegalArgumentException("size is less than 1");
core/src/main/java/org/apache/mahout/cf/taste/impl/model/BooleanItemPreferenceArray.java,52,for (int i = 0; i < prefs.size(); i++) {
core/src/main/java/org/apache/mahout/cf/taste/impl/model/BooleanItemPreferenceArray.java,56,id = forOneUser ? prefs.get(0).getUserID() : prefs.get(0).getItemID();
core/src/main/java/org/apache/mahout/cf/taste/impl/model/BooleanUserPreferenceArray.java,44,if (size < 1) {
core/src/main/java/org/apache/mahout/cf/taste/impl/model/BooleanUserPreferenceArray.java,45,throw new IllegalArgumentException("size is less than 1");
core/src/main/java/org/apache/mahout/cf/taste/impl/model/BooleanUserPreferenceArray.java,52,for (int i = 0; i < prefs.size(); i++) {
core/src/main/java/org/apache/mahout/cf/taste/impl/model/BooleanUserPreferenceArray.java,56,id = prefs.get(0).getUserID();
core/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericItemPreferenceArray.java,48,if (size < 1) {
core/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericItemPreferenceArray.java,49,throw new IllegalArgumentException("size is less than 1");
core/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericItemPreferenceArray.java,57,for (int i = 0; i < prefs.size(); i++) {
core/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericItemPreferenceArray.java,62,id = prefs.get(0).getItemID();
core/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericUserPreferenceArray.java,49,if (size < 1) {
core/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericUserPreferenceArray.java,50,throw new IllegalArgumentException("size is less than 1");
core/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericUserPreferenceArray.java,58,for (int i = 0; i < prefs.size(); i++) {
core/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericUserPreferenceArray.java,63,id = prefs.get(0).getUserID();
math/src/main/java/org/apache/mahout/math/JsonMatrixAdapter.java,30,import org.slf4j.Logger;
math/src/main/java/org/apache/mahout/math/JsonMatrixAdapter.java,31,import org.slf4j.LoggerFactory;
math/src/main/java/org/apache/mahout/math/JsonMatrixAdapter.java,38,private static final Logger log = LoggerFactory.getLogger(JsonMatrixAdapter.class);
math/src/main/java/org/apache/mahout/math/JsonMatrixAdapter.java,76,log.warn("Error while loading class", e);
math/src/main/java/org/apache/mahout/math/JsonVectorAdapter.java,29,import org.slf4j.Logger;
math/src/main/java/org/apache/mahout/math/JsonVectorAdapter.java,30,import org.slf4j.LoggerFactory;
math/src/main/java/org/apache/mahout/math/JsonVectorAdapter.java,37,private static final Logger log = LoggerFactory.getLogger(JsonVectorAdapter.class);
math/src/main/java/org/apache/mahout/math/JsonVectorAdapter.java,64,log.warn("Error while loading class", e);
math/src/main/java/org/apache/mahout/math/Timer.java,11,import org.slf4j.Logger;
math/src/main/java/org/apache/mahout/math/Timer.java,12,import org.slf4j.LoggerFactory;
math/src/main/java/org/apache/mahout/math/Timer.java,24,private static final Logger log = LoggerFactory.getLogger(Timer.class);
math/src/main/java/org/apache/mahout/math/Timer.java,41,public Timer display() {
math/src/main/java/org/apache/mahout/math/Timer.java,42,log.info(this.toString());
math/src/main/java/org/apache/mahout/math/Timer.java,43,return this;
math/src/main/java/org/apache/mahout/math/Timer.java,131,public static void test(int size) {
math/src/main/java/org/apache/mahout/math/Timer.java,133,Timer t = new Timer().start();
math/src/main/java/org/apache/mahout/math/Timer.java,134,int j = 0;
math/src/main/java/org/apache/mahout/math/Timer.java,135,for (int i = 0; i < size; i++) {
math/src/main/java/org/apache/mahout/math/Timer.java,136,j++;
math/src/main/java/org/apache/mahout/math/Timer.java,138,t.stop();
math/src/main/java/org/apache/mahout/math/Timer.java,139,t.display();
math/src/main/java/org/apache/mahout/math/Timer.java,143,j = 0;
math/src/main/java/org/apache/mahout/math/Timer.java,144,for (int i = 0; i < size; i++) {
math/src/main/java/org/apache/mahout/math/Timer.java,145,j++;
math/src/main/java/org/apache/mahout/math/Timer.java,150,t.start();
math/src/main/java/org/apache/mahout/math/Timer.java,151,j = 0;
math/src/main/java/org/apache/mahout/math/Timer.java,152,for (int i = 0; i < size; i++) {
math/src/main/java/org/apache/mahout/math/Timer.java,153,j++;
math/src/main/java/org/apache/mahout/math/Timer.java,155,t.stop().display();
math/src/main/java/org/apache/mahout/math/Timer.java,159,t.reset(); //set timer to zero
math/src/main/java/org/apache/mahout/math/Timer.java,160,t.start();
math/src/main/java/org/apache/mahout/math/Timer.java,161,j = 0;
math/src/main/java/org/apache/mahout/math/Timer.java,162,for (int i = 0; i < size; i++) {
math/src/main/java/org/apache/mahout/math/Timer.java,163,j++;
math/src/main/java/org/apache/mahout/math/Timer.java,165,t.stop().display();
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/HebbianSolver.java,26,import org.apache.mahout.math.AbstractMatrix;
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/HebbianSolver.java,36,import org.slf4j.Logger;
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/HebbianSolver.java,37,import org.slf4j.LoggerFactory;
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/HebbianSolver.java,47,private static final Logger log = LoggerFactory.getLogger(HebbianSolver.class);
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/HebbianSolver.java,55,private int numPasses = 0;
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/HebbianSolver.java,56,private static final boolean debug = false;
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/HebbianSolver.java,166,log.info("Finding " + desiredRank + " singular vectors of matrix with " + corpus.numRows() + " rows, via Hebbian");
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/HebbianSolver.java,189,if (debug) {
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/HebbianSolver.java,190,if (previousEigen == null) {
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/HebbianSolver.java,191,previousEigen = currentEigen.clone();
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/HebbianSolver.java,193,double dot = currentEigen.dot(previousEigen);
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/HebbianSolver.java,194,if (dot > 0) {
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/HebbianSolver.java,195,dot /= (currentEigen.norm(2) * previousEigen.norm(2));
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/HebbianSolver.java,209,log.info("Found eigenvector {}, eigenvalue: {}", i, eigenValue);
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/HebbianSolver.java,219,numPasses = 0;
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/HebbianSolver.java,256,numPasses++;
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/HebbianSolver.java,258,log.info("First pass through the corpus, no need to check convergence...");
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/HebbianSolver.java,262,log.info("Have made {} passes through the corpus, checking convergence...", numPasses);
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/HebbianSolver.java,272,if (debug && currentPseudoEigen.norm(2) > 0) {
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/HebbianSolver.java,273,for (int i = 0; i < state.getNumEigensProcessed(); i++) {
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/HebbianSolver.java,274,Vector previousEigen = previousEigens.getRow(i);
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/HebbianSolver.java,275,log.info("dot with previous: {}", (previousEigen.dot(currentPseudoEigen)) / currentPseudoEigen.norm(2));
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/HebbianSolver.java,282,if (status.inProgress()) {
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/HebbianSolver.java,283,log.info("Verifier not finished, making another pass...");
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/HebbianSolver.java,285,log.info("Has 1 - cosAngle: {}, convergence target is: {}", (1 - status.getCosAngle()), convergenceTarget);
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/HebbianSolver.java,303,log.error("{} must contain values for solver.input.dir and solver.output.dir", propertiesFile);
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/HebbianSolver.java,324,long now = System.currentTimeMillis();
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/HebbianSolver.java,326,long time = (System.currentTimeMillis() - now) / 1000;
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/HebbianSolver.java,327,log.info("Solved {} eigenVectors in {} seconds.  Persisted to {}",
math/src/main/java/org/apache/mahout/math/decomposer/hebbian/HebbianSolver.java,328,new Object[] {finalState.getCurrentEigens().size()[AbstractMatrix.ROW], time, outputDir});
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,39,import org.slf4j.Logger;
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,40,import org.slf4j.LoggerFactory;
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,69,private static final Logger log = LoggerFactory.getLogger(LanczosSolver.class);
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,81,protected double scaleFactor = 0;
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,107,log.info("Finding {} singular vectors of matrix with {} rows, via Lanczos", desiredRank, corpus.numRows());
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,118,log.info("{} passes through the corpus so far...", i);
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,132,log.warn("Lanczos parameters out of range: alpha = {}, beta = {}.  Bailing out early!", alpha, beta);
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,149,log.info("Lanczos iteration complete - now to diagonalize the tri-diagonal auxiliary matrix.");
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,168,log.info("Eigenvector {} found with eigenvalue {}", i, eigenVals.get(i));
math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java,171,log.info("LanczosSolver finished.");
math/src/main/java/org/apache/mahout/math/jet/random/sampling/RandomSampler.java,13,import org.slf4j.Logger;
math/src/main/java/org/apache/mahout/math/jet/random/sampling/RandomSampler.java,14,import org.slf4j.LoggerFactory;
math/src/main/java/org/apache/mahout/math/jet/random/sampling/RandomSampler.java,115,private static final Logger log = LoggerFactory.getLogger(RandomSampler.class);
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,11,import org.slf4j.Logger;
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,12,import org.slf4j.LoggerFactory;
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,17,private static final Logger log = LoggerFactory.getLogger(QuantileCalc.class);
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,292,public static void main(String[] args) {
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,293,test_B_and_K_Calculation(args);
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,297,public static void test_B_and_K_Calculation(String[] args) {
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,298,boolean known_N;
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,299,if (args == null) {
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,300,known_N = false;
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,302,known_N = Boolean.valueOf(args[0]);
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,305,int[] quantiles = {1, 1000};
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,307,long[] sizes = {100000, 1000000, 10000000, 1000000000};
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,309,double[] deltas = {0.0, 0.001, 0.0001, 0.00001};
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,311,double[] epsilons = {0.0, 0.1, 0.05, 0.01, 0.005, 0.001, 0.0000001};
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,314,if (!known_N) {
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,315,sizes = new long[]{0};
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,317,log.info("\n\n");
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,318,if (known_N) {
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,319,log.info("Computing b's and k's for KNOWN N");
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,321,log.info("Computing b's and k's for UNKNOWN N");
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,323,log.info("mem [elements/1024]");
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,324,log.info("***********************************");
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,326,for (int p : quantiles) {
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,327,log.info("------------------------------");
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,328,log.info("computing for p = {}", p);
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,329,for (long N : sizes) {
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,330,log.info("   ------------------------------");
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,331,log.info("   computing for N = {}", N);
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,332,for (double delta : deltas) {
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,333,log.info("      ------------------------------");
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,334,log.info("      computing for delta = {}", delta);
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,335,for (double epsilon : epsilons) {
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,336,double[] returnSamplingRate = new double[1];
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,337,long[] result;
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,338,if (known_N) {
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,339,result = known_N_compute_B_and_K(N, epsilon, delta, p, returnSamplingRate);
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,341,result = unknown_N_compute_B_and_K(epsilon, delta, p);
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,344,long b = result[0];
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,345,long k = result[1];
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,346,log.info("         (e,d,N,p)=({},{},{},{}) --> ", new Object[] {epsilon, delta, N, p});
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,347,log.info("(b,k,mem");
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,348,if (known_N) {
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,349,log.info(",sampling");
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,351,log.info(")=({},{},{}", new Object[] {b, k, (b * k / 1024)});
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,352,if (known_N) {
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,353,log.info(",{}", returnSamplingRate[0]);
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,355,log.info(")");
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileCalc.java,471,log.info("Warning: Computing b and k looks like a lot of work!");
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileFinderFactory.java,16,import org.slf4j.Logger;
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileFinderFactory.java,17,import org.slf4j.LoggerFactory;
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileFinderFactory.java,98,private static final Logger log = LoggerFactory.getLogger(QuantileFinderFactory.class);
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileFinderFactory.java,590,boolean alpha_one_OK = false;
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileFinderFactory.java,591,if (0.0 < alpha_one && alpha_one < 1.0) {
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileFinderFactory.java,592,alpha_one_OK = true;
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileFinderFactory.java,594,boolean alpha_two_OK = false;
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileFinderFactory.java,595,if (0.0 < alpha_two && alpha_two < 1.0) {
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileFinderFactory.java,596,alpha_two_OK = true;
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileFinderFactory.java,599,double alpha = alpha_one;
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileFinderFactory.java,600,if (alpha_one_OK && alpha_two_OK) {
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileFinderFactory.java,602,alpha = Math.max(alpha_one, alpha_two);
math/src/main/java/org/apache/mahout/math/jet/stat/quantile/QuantileFinderFactory.java,624,log.warn("Computing b and k looks like a lot of work!");
math/src/main/java/org/apache/mahout/math/matrix/DoubleFactory2D.java,18,import org.slf4j.Logger;
math/src/main/java/org/apache/mahout/math/matrix/DoubleFactory2D.java,19,import org.slf4j.LoggerFactory;
math/src/main/java/org/apache/mahout/math/matrix/DoubleFactory2D.java,88,private static final Logger log = LoggerFactory.getLogger(DoubleFactory2D.class);
math/src/main/java/org/apache/mahout/math/matrix/doublealgo/Formatter.java,18,import org.slf4j.Logger;
math/src/main/java/org/apache/mahout/math/matrix/doublealgo/Formatter.java,19,import org.slf4j.LoggerFactory;
math/src/main/java/org/apache/mahout/math/matrix/doublealgo/Formatter.java,275,private static final Logger log = LoggerFactory.getLogger(Formatter.class);
collections/src/main/java/org/apache/mahout/math/map/PrimeFinder.java,22,import org.slf4j.Logger;
collections/src/main/java/org/apache/mahout/math/map/PrimeFinder.java,23,import org.slf4j.LoggerFactory;
collections/src/main/java/org/apache/mahout/math/map/PrimeFinder.java,43,private static final Logger log = LoggerFactory.getLogger(PrimeFinder.class);
collections/src/main/java/org/apache/mahout/math/map/PrimeFinder.java,170,log.info("new maxdev @{}@dev={}", i, maxDeviation);
collections/src/main/java/org/apache/mahout/math/map/PrimeFinder.java,178,log.info("Statistics for [{},{}] are as follows", from, to);
collections/src/main/java/org/apache/mahout/math/map/PrimeFinder.java,179,log.info("meanDeviation = {} %", (float) meanDeviation * 100);
collections/src/main/java/org/apache/mahout/math/map/PrimeFinder.java,180,log.info("maxDeviation = {} %", (float) maxDeviation * 100);
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyJob.java,45,private MeanShiftCanopyJob() { }
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyJob.java,60,.withDescription("The distance measure class name.").create();
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyJob.java,64,.withDescription("The T1 distance threshold.").create();
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyJob.java,68,.withDescription("The T1 distance threshold.").create();
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyJob.java,72,.withOption(maxIterOpt).withOption(threshold2Opt).create();
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyJob.java,115,public static void runJob(String input,
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyJob.java,116,String output,
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyJob.java,117,String measureClassName,
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyJob.java,118,double t1,
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyJob.java,119,double t2,
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyJob.java,120,double convergenceDelta,
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyJob.java,121,int maxIterations) throws IOException {
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyJob.java,131,MeanShiftCanopyDriver.createCanopyFromVectors(input, output+"/initial-canopies");
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyJob.java,136,String clustersIn = output+"/initial-canopies";
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyJob.java,142,MeanShiftCanopyDriver.runJob(clustersIn, clustersOut, controlOut, measureClassName, t1, t2,
core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyJob.java,143,convergenceDelta);
examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/Job.java,143,t2, convergenceDelta, maxIterations);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/ItemPrefWritable.java,27,public final class ItemPrefWritable implements Writable {
core/src/main/java/org/apache/mahout/cf/taste/hadoop/ItemPrefWritable.java,29,private long itemID;
core/src/main/java/org/apache/mahout/cf/taste/hadoop/ItemPrefWritable.java,37,this.itemID = itemID;
core/src/main/java/org/apache/mahout/cf/taste/hadoop/ItemPrefWritable.java,45,public long getItemID() {
core/src/main/java/org/apache/mahout/cf/taste/hadoop/ItemPrefWritable.java,46,return itemID;
core/src/main/java/org/apache/mahout/cf/taste/hadoop/ItemPrefWritable.java,55,out.writeLong(itemID);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/ItemPrefWritable.java,61,itemID = in.readLong();
core/src/main/java/org/apache/mahout/cf/taste/hadoop/ToItemPrefsMapper.java,50,Mapper<LongWritable,Text,LongWritable,ItemPrefWritable> {
core/src/main/java/org/apache/mahout/cf/taste/hadoop/ToItemPrefsMapper.java,57,OutputCollector<LongWritable,ItemPrefWritable> output,
core/src/main/java/org/apache/mahout/cf/taste/hadoop/ToItemPrefsMapper.java,63,output.collect(new LongWritable(userID), new ItemPrefWritable(itemID, prefValue));
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java,69,Option usersFileOpt = AbstractJob.buildOption("usersFile", "u", "File of users to recommend for", null);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java,71,Map<String,String> parsedArgs = AbstractJob.parseArguments(args, numReccomendationsOpt, usersFileOpt);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java,93,TextInputFormat.class, ToItemPrefsMapper.class, LongWritable.class, ItemPrefWritable.class,
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderMapper.java,108,double value = element.get();
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/ToUserVectorReducer.java,59,Reducer<LongWritable,ItemPrefWritable,LongWritable,VectorWritable> {
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/ToUserVectorReducer.java,67,Iterator<ItemPrefWritable> itemPrefs,
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/ToUserVectorReducer.java,73,ItemPrefWritable itemPref = itemPrefs.next();
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/ToUserVectorReducer.java,75,userVector.set(index, itemPref.getPrefValue());
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/ToUserVectorReducer.java,78,if (userVector.getNumNondefaultElements() > MAX_PREFS_CONSIDERED) {
core/src/main/java/org/apache/mahout/cf/taste/hadoop/ToItemPrefsMapper.java,62,float prefValue = Float.parseFloat(tokens[2]);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/RecommendedItemsWritable.java,99,String valueString = String.valueOf(item.getValue());
core/src/main/java/org/apache/mahout/cf/taste/hadoop/RecommendedItemsWritable.java,101,if (valueString.indexOf('E') >= 0) {
core/src/main/java/org/apache/mahout/cf/taste/hadoop/RecommendedItemsWritable.java,102,valueString = "0.0";
core/src/main/java/org/apache/mahout/cf/taste/hadoop/RecommendedItemsWritable.java,104,valueString = valueString.substring(0, 6);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/RecommendedItemsWritable.java,106,result.append(valueString);
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderMapper.java,119,columnVector.times(value).addTo(recommendationVector);
core/src/main/java/org/apache/mahout/cf/taste/impl/common/Cache.java,96,return value;
core/src/main/java/org/apache/mahout/cf/taste/impl/common/Cache.java,127,cache.put(key, value);
core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPGrowth.java,182,if (returnableFeatures.isEmpty() == false) {
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderMapper.java,167,Vector value;
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderMapper.java,169,value = map.get(key, columnVector).get();
core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/ItemIDIndexMapper.java,48,return (int) itemID ^ (int) (itemID >>> 32);
