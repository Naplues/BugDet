File,Line_number,SRC
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,287,throw new ConfigurationException("thrift_max_message_length_in_mb must be greater than thrift_framed_transport_size_in_mb when using TFramedTransport");
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,534,return conf.thrift_max_message_length_in_mb * 1024 * 1024;
src/java/org/apache/cassandra/thrift/TBinaryProtocol.java,37,this(trans, false, true);
src/java/org/apache/cassandra/thrift/TBinaryProtocol.java,61,super(strictRead, strictWrite, readLength);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,107,static
src/java/org/apache/cassandra/db/MeteredFlusher.java,36,class MeteredFlusher implements Runnable
src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java,46,import org.apache.cassandra.db.ColumnFamilyStore;
src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java,48,import org.apache.cassandra.db.SystemTable;
src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java,49,import org.apache.cassandra.db.Table;
src/java/org/apache/cassandra/io/sstable/Descriptor.java,75,hashCode = Objects.hashCode(directory, generation, ksname, cfname);
src/java/org/apache/cassandra/io/sstable/Descriptor.java,245,return that.directory.equals(this.directory) && that.generation == this.generation && that.ksname.equals(this.ksname) && that.cfname.equals(this.cfname);
src/java/org/apache/cassandra/db/HintedHandOffManager.java,369,try
src/java/org/apache/cassandra/db/HintedHandOffManager.java,375,throw new RuntimeException(e);
src/java/org/apache/cassandra/net/OutboundTcpConnectionPool.java,53,con.closeSocket();
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,289,boolean cacheLoading = keyCache != null && !keysToLoadInCache.isEmpty();
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,349,File directory = new File(ksname);
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,356,Pair<Descriptor, String> p = Descriptor.fromFilename(directory, filename.trim());
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,359,throw new IllegalArgumentException(filename + " does not appear to be a data file");
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,363,cfname = p.left.cfname;
src/java/org/apache/cassandra/thrift/ThriftValidation.java,482,IPartitioner p = StorageService.getPartitioner();
src/java/org/apache/cassandra/db/compaction/AbstractCompactedRow.java,35,public abstract class AbstractCompactedRow
src/java/org/apache/cassandra/net/MessagingService.java,63,public static final int VERSION_07 = 1;
src/java/org/apache/cassandra/db/CounterMutationVerbHandler.java,50,CounterMutation cm = CounterMutation.serializer().deserialize(is, message.getVersion());
src/java/org/apache/cassandra/db/CounterMutationVerbHandler.java,55,StorageProxy.applyCounterMutationOnLeader(cm, localDataCenter).get();
src/java/org/apache/cassandra/db/CounterMutationVerbHandler.java,56,WriteResponse response = new WriteResponse(cm.getTable(), cm.key(), true);
src/java/org/apache/cassandra/db/CounterMutationVerbHandler.java,57,Message responseMessage = WriteResponse.makeWriteResponseMessage(message, response);
src/java/org/apache/cassandra/db/CounterMutationVerbHandler.java,58,MessagingService.instance().sendReply(responseMessage, id, message.getFrom());
src/java/org/apache/cassandra/service/AbstractWriteResponseHandler.java,40,protected final SimpleCondition condition = new SimpleCondition();
src/java/org/apache/cassandra/service/DatacenterSyncWriteResponseHandler.java,95,condition.signal();
src/java/org/apache/cassandra/service/DatacenterWriteResponseHandler.java,79,condition.signal();
src/java/org/apache/cassandra/service/StorageProxy.java,163,responseHandlers.add(performWrite(mutation, consistency_level, localDataCenter, standardWritePerformer));
src/java/org/apache/cassandra/service/StorageProxy.java,452,public static IWriteResponseHandler applyCounterMutationOnLeader(CounterMutation cm, String localDataCenter) throws UnavailableException, TimeoutException, IOException
src/java/org/apache/cassandra/service/StorageProxy.java,454,return performWrite(cm, cm.consistency(), localDataCenter, counterWritePerformer);
src/java/org/apache/cassandra/service/StorageProxy.java,461,return performWrite(cm, cm.consistency(), localDataCenter, counterWriteOnCoordinatorPerformer);
src/java/org/apache/cassandra/service/WriteResponseHandler.java,72,condition.signal();
src/java/org/apache/cassandra/db/RowIteratorFactory.java,20,import java.io.Closeable;
src/java/org/apache/cassandra/io/sstable/SSTableScanner.java,184,return row = filter.getSSTableColumnIterator(sstable, file, key);
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,190,List<String> tokens = getSubSplits(keyspace, cfName, range, conf);
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,210,private List<String> getSubSplits(String keyspace, String cfName, TokenRange range, Configuration conf) throws IOException
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,219,return client.describe_splits(cfName, range.start_token, range.end_token, splitsize);
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,98,totalRowCount = ConfigHelper.getInputSplitSize(conf);
src/java/org/apache/cassandra/hadoop/ColumnFamilySplit.java,62,return Long.MAX_VALUE;
src/java/org/apache/cassandra/service/StorageService.java,1778,List<Token> tokens = new ArrayList<Token>();
src/java/org/apache/cassandra/service/StorageService.java,1780,tokens.add(range.left);
src/java/org/apache/cassandra/service/StorageService.java,1791,int splits = keys.size() * DatabaseDescriptor.getIndexInterval() / keysPerSplit;
src/java/org/apache/cassandra/service/StorageService.java,1797,int index = i * (keys.size() / splits);
src/java/org/apache/cassandra/service/StorageService.java,1798,tokens.add(keys.get(index).token);
src/java/org/apache/cassandra/thrift/CassandraServer.java,770,List<String> splits = new ArrayList<String>(tokens.size());
src/java/org/apache/cassandra/thrift/CassandraServer.java,773,splits.add(tf.toString(token));
src/java/org/apache/cassandra/thrift/CassandraServer.java,775,return splits;
src/java/org/apache/cassandra/thrift/CassandraServer.java,619,IPartitioner p = StorageService.getPartitioner();
src/java/org/apache/cassandra/thrift/CassandraServer.java,623,Token.TokenFactory tokenFactory = p.getTokenFactory();
src/java/org/apache/cassandra/config/Config.java,37,public Integer max_hint_window_in_ms = Integer.MAX_VALUE;
src/java/org/apache/cassandra/config/Config.java,85,public Integer in_memory_compaction_limit_in_mb = 256;
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,142,return datacenters.get(dc);
src/java/org/apache/cassandra/cql/UpdateStatement.java,147,validateCommutativeForWrite(metadata, cLevel);
src/java/org/apache/cassandra/utils/ExpiringMap.java,21,import java.util.*;
src/java/org/apache/cassandra/utils/ExpiringMap.java,25,import org.cliffc.high_scale_lib.NonBlockingHashMap;
src/java/org/apache/cassandra/utils/ExpiringMap.java,74,private final NonBlockingHashMap<K, CacheableObject<V>> cache = new NonBlockingHashMap<K, CacheableObject<V>>();
src/java/org/apache/cassandra/cli/CliClient.java,1759,sessionState.out.println("Not authenticated to a working keyspace.");
src/java/org/apache/cassandra/cli/CliClient.java,1760,return false;
src/java/org/apache/cassandra/cli/CliClient.java,1763,return true;
src/java/org/apache/cassandra/db/HintedHandOffManager.java,429,if (r.cf != null) //ignore removed rows
src/java/org/apache/cassandra/db/HintedHandOffManager.java,430,result.put(new String(r.key.key.array()), r.cf.getColumnCount());
src/java/org/apache/cassandra/service/AntiEntropyService.java,458,throw new IOError(e);
src/java/org/apache/cassandra/service/AntiEntropyService.java,477,return new Message(local,
src/java/org/apache/cassandra/service/AntiEntropyService.java,478,StorageService.Verb.TREE_RESPONSE,
src/java/org/apache/cassandra/service/AntiEntropyService.java,479,bos.toByteArray(),
src/java/org/apache/cassandra/cache/AutoSavingCache.java,52,public static final AtomicBoolean flushInProgress = new AtomicBoolean(false);
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,1149,AutoSavingCache.flushInProgress.set(false);
src/java/org/apache/cassandra/dht/BootStrapper.java,32,import org.apache.cassandra.gms.Gossiper;
src/java/org/apache/cassandra/dht/BootStrapper.java,41,import org.apache.cassandra.gms.FailureDetector;
src/java/org/apache/cassandra/service/MigrationManager.java,136,Gossiper.instance.addLocalApplicationState(ApplicationState.SCHEMA, StorageService.instance.valueFactory.migration(version));
src/java/org/apache/cassandra/service/StorageService.java,466,logger_.info("This node will not auto bootstrap because it is configured to be a seed node.");
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,2115,throw new RuntimeException("The min_compaction_threshold cannot be larger than the max.");
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,2129,throw new RuntimeException("The max_compaction_threshold cannot be smaller than the min.");
src/java/org/apache/cassandra/tools/NodeProbe.java,418,cfsProxy.setMinimumCompactionThreshold(minimumCompactionThreshold);
src/java/org/apache/cassandra/tools/NodeProbe.java,419,cfsProxy.setMaximumCompactionThreshold(maximumCompactionThreshold);
src/java/org/apache/cassandra/db/SystemTable.java,309,return false;
src/java/org/apache/cassandra/db/SystemTable.java,311,return c.value().get(c.value().position()) == 1;
src/java/org/apache/cassandra/service/StorageService.java,1890,SystemTable.setBootstrapped(false);
src/java/org/apache/cassandra/service/MigrationManager.java,64,UUID theirVersion = UUID.fromString(value.value);
src/java/org/apache/cassandra/service/MigrationManager.java,65,rectify(theirVersion, endpoint);
src/java/org/apache/cassandra/service/MigrationManager.java,74,UUID theirVersion = UUID.fromString(value.value);
src/java/org/apache/cassandra/service/MigrationManager.java,75,rectify(theirVersion, endpoint);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1044,long expectedFileSize = 0;
src/java/org/apache/cassandra/db/Memtable.java,73,private final AtomicLong currentThroughput = new AtomicLong(0);
src/java/org/apache/cassandra/db/Memtable.java,112,return (long) (currentThroughput.get() * cfs.liveRatio * 1.25);
src/java/org/apache/cassandra/db/Memtable.java,117,return currentThroughput.get();
src/java/org/apache/cassandra/db/Memtable.java,209,currentThroughput.addAndGet(cf.size());
src/java/org/apache/cassandra/db/Memtable.java,211,? cf.isMarkedForDelete() ? 1 : 0
src/java/org/apache/cassandra/db/Memtable.java,212,: cf.getColumnCount());
src/java/org/apache/cassandra/db/Memtable.java,244,+ currentThroughput.get()) // data
src/java/org/apache/cassandra/db/Memtable.java,286,cfs.getColumnFamilyName(), hashCode(), currentThroughput, getLiveSize(), currentOperations);
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,830,boolean isCommutative = cfs.metadata.getDefaultValidator().isCommutative();
src/java/org/apache/cassandra/cache/AutoSavingCache.java,136,key = StorageService.getPartitioner().decorateKey(buffer);
src/java/org/apache/cassandra/tools/SSTableExport.java,209,Descriptor desc = Descriptor.fromFilename(ssTableFile);
src/java/org/apache/cassandra/tools/SSTableExport.java,236,public static void export(String ssTableFile, PrintStream outs, Collection<String> toExport, String[] excludes) throws IOException
src/java/org/apache/cassandra/tools/SSTableExport.java,238,SSTableReader reader = SSTableReader.open(Descriptor.fromFilename(ssTableFile));
src/java/org/apache/cassandra/tools/SSTableExport.java,334,public static void export(String ssTableFile, PrintStream outs, String[] excludes) throws IOException
src/java/org/apache/cassandra/tools/SSTableExport.java,363,public static void export(String ssTableFile, String[] excludes) throws IOException
src/java/org/apache/cassandra/tools/SSTableExport.java,365,export(ssTableFile, System.out, excludes);
src/java/org/apache/cassandra/tools/SSTableExport.java,416,enumeratekeys(ssTableFileName, System.out);
src/java/org/apache/cassandra/tools/SSTableExport.java,421,export(ssTableFileName, System.out, Arrays.asList(keys), excludes);
src/java/org/apache/cassandra/tools/SSTableExport.java,423,export(ssTableFileName, excludes);
src/java/org/apache/cassandra/thrift/CustomTHsHaServer.java,183,LOGGER.error("Uncaught Exception: ", t);
src/java/org/apache/cassandra/thrift/CustomTHsHaServer.java,200,continue;
src/java/org/apache/cassandra/thrift/CustomTHsHaServer.java,204,handleAccept();
src/java/org/apache/cassandra/thrift/CustomTHsHaServer.java,206,handleRead(key);
src/java/org/apache/cassandra/thrift/CustomTHsHaServer.java,208,handleWrite(key);
src/java/org/apache/cassandra/thrift/CustomTHsHaServer.java,209,else
src/java/org/apache/cassandra/thrift/CustomTHsHaServer.java,210,LOGGER.debug("Unexpected state " + key.interestOps());
src/java/org/apache/cassandra/service/StorageService.java,2603,addRangeForEndpoint(range, endpoint);
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,90,return ((float)iter.rowsRead()) / totalRowCount;
src/java/org/apache/cassandra/db/compaction/CompactionController.java,43,private final ColumnFamilyStore cfs;
src/java/org/apache/cassandra/cql/QueryProcessor.java,956,CharStream stream = new ANTLRStringStream(queryStr);
src/java/org/apache/cassandra/cql/QueryProcessor.java,957,CqlLexer lexer = new CqlLexer(stream);
src/java/org/apache/cassandra/cql/QueryProcessor.java,958,TokenStream tokenStream = new CommonTokenStream(lexer);
src/java/org/apache/cassandra/cql/QueryProcessor.java,959,CqlParser parser = new CqlParser(tokenStream);
src/java/org/apache/cassandra/cql/QueryProcessor.java,962,CQLStatement statement = parser.query();
src/java/org/apache/cassandra/cql/QueryProcessor.java,966,lexer.throwLastRecognitionError();
src/java/org/apache/cassandra/cql/QueryProcessor.java,967,parser.throwLastRecognitionError();
src/java/org/apache/cassandra/cql/QueryProcessor.java,969,return statement;
src/java/org/apache/cassandra/cache/AutoSavingCache.java,218,type,
src/java/org/apache/cassandra/cache/AutoSavingCache.java,219,0,
src/java/org/apache/cassandra/cache/AutoSavingCache.java,220,estimatedTotalBytes);
src/java/org/apache/cassandra/db/compaction/CompactionInfo.java,28,private final String ksname;
src/java/org/apache/cassandra/db/compaction/CompactionInfo.java,29,private final String cfname;
src/java/org/apache/cassandra/db/compaction/CompactionInfo.java,36,this.ksname = ksname;
src/java/org/apache/cassandra/db/compaction/CompactionInfo.java,37,this.cfname = cfname;
src/java/org/apache/cassandra/db/compaction/CompactionInfo.java,51,return ksname;
src/java/org/apache/cassandra/db/compaction/CompactionInfo.java,56,return cfname;
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,1342,sstable.descriptor.cfname,
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,1369,sstable.descriptor.cfname,
src/java/org/apache/cassandra/service/StorageService.java,1895,logger_.info("Announcing that I have left the ring for " + RING_DELAY + "ms");
src/java/org/apache/cassandra/service/StorageService.java,1898,Thread.sleep(RING_DELAY);
src/java/org/apache/cassandra/cache/ICache.java,33,public int capacity();
src/java/org/apache/cassandra/cache/ICache.java,35,public void setCapacity(int capacity);
src/java/org/apache/cassandra/service/StorageService.java,1974,logger_.info(String.format("Moving %s from %s to %s.", localAddress, getLocalToken(), newToken));
src/java/org/apache/cassandra/service/StorageService.java,2043,logger_.info("Sleeping {} ms before start streaming/fetching ranges.", RING_DELAY);
src/java/org/apache/cassandra/tools/NodeCmd.java,103,addCmdHelp(header, "decommission", "Decommission the node");
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,821,logger.debug("expected data files size is {}; largest free partition has {} bytes free",
src/java/org/apache/cassandra/db/ColumnFamily.java,340,int size = 0;
tools/stress/src/org/apache/cassandra/stress/Stress.java,91,new StressAction(session, outStream).run();
tools/stress/src/org/apache/cassandra/stress/StressAction.java,164,System.err.println("Producer error - " + e.getMessage());
src/java/org/apache/cassandra/io/sstable/AbstractSSTableSimpleWriter.java,84,return new Descriptor(directory, keyspace, columnFamily, maxGen + 1, false).filenameFor(Component.DATA);
src/java/org/apache/cassandra/io/sstable/SSTableSimpleUnsortedWriter.java,107,SSTableWriter writer = getWriter();
src/java/org/apache/cassandra/io/sstable/SSTableSimpleUnsortedWriter.java,110,writer.append(entry.getKey(), entry.getValue());
src/java/org/apache/cassandra/io/sstable/SSTableSimpleUnsortedWriter.java,112,writer.closeAndOpenReader();
src/java/org/apache/cassandra/io/sstable/SSTableSimpleWriter.java,71,writeRow(currentKey, columnFamily);
src/java/org/apache/cassandra/io/sstable/SSTableSimpleWriter.java,72,writer.closeAndOpenReader();
src/java/org/apache/cassandra/locator/PropertyFileSnitch.java,170,StorageService.instance.getTokenMetadata().invalidateCaches();
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,109,IPartitioner partitioner = null;
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,202,ColumnFamilySplit split = new ColumnFamilySplit(tokens.get(i - 1), tokens.get(i), endpoints);
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,203,logger.debug("adding " + split);
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,204,splits.add(split);
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,30,import com.google.common.collect.AbstractIterator;
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,227,rows = null;
src/java/org/apache/cassandra/thrift/ThriftValidation.java,469,throw new InvalidRequestException("start key and end key must either both be non-null, or both be null");
src/java/org/apache/cassandra/thrift/ThriftValidation.java,473,throw new InvalidRequestException("start token and end token must either both be non-null, or both be null");
src/java/org/apache/cassandra/db/Memtable.java,165,activelyMeasuring = Memtable.this;
src/java/org/apache/cassandra/db/Memtable.java,167,long start = System.currentTimeMillis();
src/java/org/apache/cassandra/db/Memtable.java,170,long deepSize = meter.measure(columnFamilies);
src/java/org/apache/cassandra/db/Memtable.java,171,int objects = 0;
src/java/org/apache/cassandra/db/Memtable.java,174,deepSize += meter.measureDeep(entry.getKey()) + meter.measureDeep(entry.getValue());
src/java/org/apache/cassandra/db/Memtable.java,175,objects += entry.getValue().getColumnCount();
src/java/org/apache/cassandra/db/Memtable.java,177,double newRatio = (double) deepSize / currentThroughput.get();
src/java/org/apache/cassandra/db/Memtable.java,181,logger.warn("setting live ratio to minimum of 1.0 instead of {}", newRatio);
src/java/org/apache/cassandra/db/Memtable.java,182,newRatio = MIN_SANE_LIVE_RATIO;
src/java/org/apache/cassandra/db/Memtable.java,186,logger.warn("setting live ratio to maximum of 64 instead of {}", newRatio);
src/java/org/apache/cassandra/db/Memtable.java,187,newRatio = MAX_SANE_LIVE_RATIO;
src/java/org/apache/cassandra/db/Memtable.java,189,cfs.liveRatio = Math.max(cfs.liveRatio, newRatio);
src/java/org/apache/cassandra/db/Memtable.java,191,logger.info("{} liveRatio is {} (just-counted was {}).  calculation took {}ms for {} columns",
src/java/org/apache/cassandra/db/Memtable.java,192,new Object[]{ cfs, cfs.liveRatio, newRatio, System.currentTimeMillis() - start, objects });
src/java/org/apache/cassandra/db/Memtable.java,193,activelyMeasuring = null;
src/java/org/apache/cassandra/db/Memtable.java,197,try
src/java/org/apache/cassandra/db/Memtable.java,199,meterExecutor.submit(runnable);
src/java/org/apache/cassandra/db/Memtable.java,203,logger.debug("Meter thread is busy; skipping liveRatio update for {}", cfs);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,25,import java.util.concurrent.Future;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,26,import java.util.concurrent.atomic.AtomicInteger;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,28,import java.util.zip.Checksum;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,31,import com.google.common.collect.Ordering;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,40,import org.apache.cassandra.concurrent.Stage;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,41,import org.apache.cassandra.concurrent.StageManager;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,48,import org.apache.cassandra.utils.ByteBufferUtil;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,49,import org.apache.cassandra.utils.FBUtilities;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,50,import org.apache.cassandra.utils.WrappedRunnable;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,82,private static final int MAX_OUTSTANDING_REPLAY_COUNT = 1024;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,84,static final Logger logger = LoggerFactory.getLogger(CommitLog.class);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,172,List<Future<?>> futures = new ArrayList<Future<?>>();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,173,byte[] bytes = new byte[4096];
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,174,Map<Integer, AtomicInteger> invalidMutations = new HashMap<Integer, AtomicInteger>();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,177,final AtomicInteger replayedCount = new AtomicInteger();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,180,final Map<Integer, ReplayPosition> cfPositions = new HashMap<Integer, ReplayPosition>();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,186,ReplayPosition rp = ReplayPosition.getReplayPosition(cfs.getSSTables());
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,187,cfPositions.put(cfs.metadata.cfId, rp);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,189,final ReplayPosition globalPosition = Ordering.from(ReplayPosition.comparator).min(cfPositions.values());
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,194,final long segment = CommitLogSegment.idFromFilename(file.getName());
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,198,assert reader.length() <= Integer.MAX_VALUE;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,200,try
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,202,int replayPosition;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,204,replayPosition = 0;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,206,replayPosition = globalPosition.position;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,207,else
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,208,replayPosition = (int) reader.length();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,214,logger.debug("skipping replay of fully-flushed {}", file);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,215,continue;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,218,reader.seek(replayPosition);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,221,logger.debug("Replaying " + file + " starting at " + reader.getFilePointer());
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,227,logger.debug("Reading mutation at " + reader.getFilePointer());
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,229,long claimedCRC32;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,230,int serializedSize;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,231,try
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,234,serializedSize = reader.readInt();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,240,break;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,241,long claimedSizeChecksum = reader.readLong();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,242,checksum.reset();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,243,checksum.update(serializedSize);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,245,break; // entry wasn't synced correctly/fully.  that's ok.
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,248,bytes = new byte[(int) (1.2 * serializedSize)];
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,249,reader.readFully(bytes, 0, serializedSize);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,250,claimedCRC32 = reader.readLong();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,254,break; // last CL entry didn't get completely written.  that's ok.
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,257,checksum.update(bytes, 0, serializedSize);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,262,continue;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,267,RowMutation rm = null;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,268,try
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,276,AtomicInteger i = invalidMutations.get(ex.cfId);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,279,i = new AtomicInteger(1);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,280,invalidMutations.put(ex.cfId, i);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,282,else
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,283,i.incrementAndGet();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,284,continue;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,288,logger.debug(String.format("replaying mutation for %s.%s: %s",
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,289,rm.getTable(),
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,290,ByteBufferUtil.bytesToHex(rm.key()),
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,293,final long entryLocation = reader.getFilePointer();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,294,final RowMutation frm = rm;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,297,public void runMayThrow() throws IOException
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,300,return;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,301,final Table table = Table.open(frm.getTable());
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,302,RowMutation newRm = new RowMutation(frm.getTable(), frm.key());
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,311,continue;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,313,ReplayPosition rp = cfPositions.get(columnFamily.id());
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,319,newRm.add(columnFamily);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,320,replayedCount.incrementAndGet();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,325,Table.open(newRm.getTable()).apply(newRm, false);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,326,tablesRecovered.add(table);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,330,futures.add(StageManager.getStage(Stage.MUTATION).submit(runnable));
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,333,FBUtilities.waitOnFutures(futures);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,334,futures.clear();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,338,finally
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,340,FileUtils.closeQuietly(reader);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,341,logger.info("Finished reading " + file);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,346,logger.info(String.format("Skipped %d mutations from unknown (probably removed) CF with id %d", entry.getValue().intValue(), entry.getKey()));
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,349,FBUtilities.waitOnFutures(futures);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,350,logger.debug("Finished waiting on mutations from recovery");
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,353,futures.clear();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,355,futures.addAll(table.flush());
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,356,FBUtilities.waitOnFutures(futures);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,358,return replayedCount.get();
src/java/org/apache/cassandra/utils/CLibrary.java,181,Process p = pb.start();
src/java/org/apache/cassandra/utils/CLibrary.java,182,try
src/java/org/apache/cassandra/utils/CLibrary.java,188,throw new RuntimeException(e);
src/java/org/apache/cassandra/utils/FBUtilities.java,531,ClassLoader loader = PropertyFileSnitch.class.getClassLoader();
src/java/org/apache/cassandra/cli/CliClient.java,994,String keyspaceName = statement.getChild(0).getText();
src/java/org/apache/cassandra/cli/CliCompiler.java,128,return getKeySpace(statement.getChild(0).getText(), keyspaces);
interface/thrift/gen-java/org/apache/cassandra/thrift/CfDef.java,407,this.read_repair_chance = 1;
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,106,throw new IOException("Keys must not be null.");
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,110,logger.info("Last written key : " + lastWrittenKey);
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,111,logger.info("Current key : " + decoratedKey);
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,112,logger.info("Writing into file " + getFilename());
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,113,throw new IOException("Keys must be written in ascending order.");
src/java/org/apache/cassandra/utils/CLibrary.java,104,int result = mlockall(MCL_CURRENT);
src/java/org/apache/cassandra/utils/CLibrary.java,105,assert result == 0; // mlockall should always be zero on success
src/java/org/apache/cassandra/utils/CLibrary.java,142,int result = link(sourceFile.getAbsolutePath(), destinationFile.getAbsolutePath());
src/java/org/apache/cassandra/utils/CLibrary.java,143,assert result == 0; // success is always zero
src/java/org/apache/cassandra/utils/CLibrary.java,222,assert result >= 0; // on error a value of -1 is returned and errno is set to indicate the error.
src/java/org/apache/cassandra/cql/QueryProcessor.java,607,StorageProxy.mutate(batch.getMutations(keyspace, clientState), batch.getConsistencyLevel());
src/java/org/apache/cassandra/cql/QueryProcessor.java,652,StorageProxy.mutate(delete.prepareRowMutations(keyspace, clientState), delete.getConsistencyLevel());
src/java/org/apache/cassandra/io/sstable/SSTableLoader.java,192,private class CountDownCallback implements Runnable
src/java/org/apache/cassandra/streaming/StreamInSession.java,35,import org.apache.cassandra.gms.Gossiper;
src/java/org/apache/cassandra/streaming/StreamInSession.java,39,import org.cliffc.high_scale_lib.NonBlockingHashMap;
src/java/org/apache/cassandra/streaming/StreamInSession.java,40,import org.cliffc.high_scale_lib.NonBlockingHashSet;
src/java/org/apache/cassandra/streaming/StreamInSession.java,43,public class StreamInSession
src/java/org/apache/cassandra/streaming/StreamInSession.java,50,private final Pair<InetAddress, Long> context;
src/java/org/apache/cassandra/streaming/StreamInSession.java,51,private final Runnable callback;
src/java/org/apache/cassandra/streaming/StreamInSession.java,52,private String table;
src/java/org/apache/cassandra/streaming/StreamInSession.java,58,this.context = context;
src/java/org/apache/cassandra/streaming/StreamInSession.java,59,this.callback = callback;
src/java/org/apache/cassandra/streaming/StreamInSession.java,124,logger.info("Streaming of file {} from {} failed: requesting a retry.", remoteFile, this);
src/java/org/apache/cassandra/streaming/StreamInSession.java,171,callback.run();
src/java/org/apache/cassandra/streaming/StreamInSession.java,172,sessions.remove(context);
src/java/org/apache/cassandra/streaming/StreamInSession.java,178,return context.right;
src/java/org/apache/cassandra/streaming/StreamInSession.java,183,return context.left;
src/java/org/apache/cassandra/streaming/StreamOutSession.java,32,import org.cliffc.high_scale_lib.NonBlockingHashMap;
src/java/org/apache/cassandra/streaming/StreamOutSession.java,39,private static final Logger logger = LoggerFactory.getLogger( StreamOutSession.class );
src/java/org/apache/cassandra/streaming/StreamOutSession.java,69,public final String table;
src/java/org/apache/cassandra/streaming/StreamOutSession.java,70,private final Pair<InetAddress, Long> context;
src/java/org/apache/cassandra/streaming/StreamOutSession.java,71,private final Runnable callback;
src/java/org/apache/cassandra/streaming/StreamOutSession.java,76,this.table = table;
src/java/org/apache/cassandra/streaming/StreamOutSession.java,77,this.context = context;
src/java/org/apache/cassandra/streaming/StreamOutSession.java,78,this.callback = callback;
src/java/org/apache/cassandra/streaming/StreamOutSession.java,83,return context.left;
src/java/org/apache/cassandra/streaming/StreamOutSession.java,88,return context.right;
src/java/org/apache/cassandra/streaming/StreamOutSession.java,127,callback.run();
src/java/org/apache/cassandra/streaming/StreamReplyVerbHandler.java,67,session.close();
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,68,private static int currentIndex = 0;
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,771,String dataFileDirectory = conf.data_file_directories[currentIndex];
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,772,currentIndex = (currentIndex + 1) % conf.data_file_directories.length;
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,773,return dataFileDirectory;
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,807,long maxFreeDisk = 0;
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,808,int maxDiskIndex = 0;
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,809,String dataFileDirectory = null;
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,810,String[] dataDirectoryForTable = getAllDataFileLocationsForTable(table);
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,814,File f = new File(dataDirectoryForTable[i]);
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,817,maxFreeDisk = f.getUsableSpace();
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,818,maxDiskIndex = i;
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,822,expectedCompactedFileSize, maxFreeDisk);
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,824,maxFreeDisk = (long)(0.9 * maxFreeDisk);
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,827,dataFileDirectory = dataDirectoryForTable[maxDiskIndex];
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,828,currentIndex = (maxDiskIndex + 1 )%dataDirectoryForTable.length ;
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,830,else
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,832,currentIndex = maxDiskIndex;
src/java/org/apache/cassandra/db/Table.java,710,String path = DatabaseDescriptor.getDataFileLocationForTable(name, expectedSize);
src/java/org/apache/cassandra/db/Table.java,723,path = DatabaseDescriptor.getDataFileLocationForTable(name, expectedSize);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,489,DataTracker.View view = data.getView();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,493,Set<SSTableReader> sstables = new HashSet<SSTableReader>();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,496,int generation = 0;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,500,sstables.add(reader); // first of all, add old SSTables
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,501,currentDescriptors.add(reader.descriptor);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,504,generation = reader.descriptor.generation;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,508,SSTableReader reader;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,510,boolean atLeastOneNew = false;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,514,Descriptor descriptor = rawSSTable.getKey();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,527,logger.info("Initializing new SSTable {}", rawSSTable);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,533,sstables.add(reader);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,536,generation = descriptor.generation;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,538,if (!atLeastOneNew) // set flag only once
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,539,atLeastOneNew = true;
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,227,return newdesc;
src/java/org/apache/cassandra/locator/Ec2Snitch.java,53,String[] splits = awsApiCall(ZONE_NAME_QUERY_URL).split("-");
src/java/org/apache/cassandra/locator/Ec2Snitch.java,55,ec2region = splits.length < 3 ? splits[0] : splits[0] + "-" + splits[1];
src/java/org/apache/cassandra/utils/BoundedStatsDeque.java,21,import java.util.ArrayDeque;
src/java/org/apache/cassandra/utils/BoundedStatsDeque.java,29,private final int size;
src/java/org/apache/cassandra/utils/BoundedStatsDeque.java,30,protected final ArrayDeque<Double> deque;
src/java/org/apache/cassandra/utils/BoundedStatsDeque.java,34,this.size = size;
src/java/org/apache/cassandra/utils/BoundedStatsDeque.java,35,deque = new ArrayDeque<Double>(size);
src/java/org/apache/cassandra/utils/BoundedStatsDeque.java,57,deque.remove();
src/java/org/apache/cassandra/utils/BoundedStatsDeque.java,59,deque.add(o);
src/java/org/apache/cassandra/db/ColumnFamilySerializer.java,32,import org.apache.cassandra.config.CFMetaData;
src/java/org/apache/cassandra/db/ColumnFamilySerializer.java,123,throw new UnserializableColumnFamilyException("Couldn't find cfId=" + cfId, cfId);
src/java/org/apache/cassandra/db/UnserializableColumnFamilyException.java,24,public class UnserializableColumnFamilyException extends IOException
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,181,try
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,188,throw new IOException(e);
src/java/org/apache/cassandra/db/HintedHandOffManager.java,28,import java.util.concurrent.ExecutorService;
src/java/org/apache/cassandra/db/HintedHandOffManager.java,29,import java.util.concurrent.TimeoutException;
src/java/org/apache/cassandra/db/HintedHandOffManager.java,215,final ColumnFamilyStore hintStore = Table.open(Table.SYSTEM_TABLE).getColumnFamilyStore(HINTS_CF);
src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java,139,logger.error("Fatal exception in thread " + t, e);
src/java/org/apache/cassandra/utils/ExpiringMap.java,75,private final Timer timer;
src/java/org/apache/cassandra/utils/ExpiringMap.java,76,private static int counter = 0;
src/java/org/apache/cassandra/utils/ExpiringMap.java,98,timer = new Timer("EXPIRING-MAP-TIMER-" + (++counter), true);
src/java/org/apache/cassandra/utils/ExpiringMap.java,104,timer.cancel();
src/java/org/apache/cassandra/cql/QueryProcessor.java,363,m.announce();
src/java/org/apache/cassandra/thrift/CassandraServer.java,808,m.announce();
src/java/org/apache/cassandra/cli/CliOptions.java,177,else
src/java/org/apache/cassandra/cli/CliOptions.java,179,css.schema_mwt = 10 * 1000;
src/java/org/apache/cassandra/io/sstable/SSTableSimpleUnsortedWriter.java,65,int bufferSizeInMB) throws IOException
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,117,static
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,413,try
src/java/org/apache/cassandra/io/sstable/AbstractSSTableSimpleWriter.java,33,import org.apache.cassandra.service.StorageService;
src/java/org/apache/cassandra/io/sstable/AbstractSSTableSimpleWriter.java,58,StorageService.getPartitioner(),
src/java/org/apache/cassandra/io/sstable/AbstractSSTableSimpleWriter.java,96,currentKey = StorageService.getPartitioner().decorateKey(key);
src/java/org/apache/cassandra/io/sstable/SSTableSimpleUnsortedWriter.java,67,super(directory, new CFMetaData(keyspace, columnFamily, subComparator == null ? ColumnFamilyType.Standard : ColumnFamilyType.Super, comparator, subComparator));
src/java/org/apache/cassandra/io/sstable/SSTableSimpleWriter.java,59,new CFMetaData(keyspace, columnFamily, subComparator == null ? ColumnFamilyType.Standard : ColumnFamilyType.Super, comparator, subComparator));
src/java/org/apache/cassandra/io/sstable/SSTableSimpleWriter.java,62,public SSTableSimpleWriter(File directory, CFMetaData metadata) throws IOException
src/java/org/apache/cassandra/io/sstable/SSTableSimpleWriter.java,64,super(directory, metadata);
src/java/org/apache/cassandra/service/StorageService.java,163,private IPartitioner partitioner = DatabaseDescriptor.getPartitioner();
src/java/org/apache/cassandra/service/StorageService.java,164,public VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);
src/java/org/apache/cassandra/service/StorageService.java,170,return instance.partitioner;
src/java/org/apache/cassandra/service/StorageService.java,1720,return getNaturalEndpoints(table, partitioner.getToken(cfMetaData.getKeyValidator().fromString(key)));
src/java/org/apache/cassandra/service/StorageService.java,1725,return getNaturalEndpoints(table, partitioner.getToken(key));
src/java/org/apache/cassandra/service/StorageService.java,1826,token = partitioner.midpoint(range.left, range.right);
src/java/org/apache/cassandra/service/StorageService.java,1941,partitioner.getTokenFactory().validate(newToken);
src/java/org/apache/cassandra/service/StorageService.java,1942,move(partitioner.getTokenFactory().fromString(newToken));
src/java/org/apache/cassandra/service/StorageService.java,2132,Token token = partitioner.getTokenFactory().fromString(tokenString);
src/java/org/apache/cassandra/service/StorageService.java,2310,IPartitioner oldPartitioner = partitioner;
src/java/org/apache/cassandra/service/StorageService.java,2311,partitioner = newPartitioner;
src/java/org/apache/cassandra/service/StorageService.java,2312,valueFactory = new VersionedValue.VersionedValueFactory(partitioner);
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,33,import org.apache.cassandra.db.SuperColumn;
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,49,import org.apache.pig.impl.logicalLayer.FrontendException;
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,54,import org.apache.thrift.transport.TFramedTransport;
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,55,import org.apache.thrift.transport.TSocket;
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,56,import org.apache.thrift.transport.TTransport;
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,57,import org.apache.thrift.transport.TTransportException;
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,84,private RecordReader reader;
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,85,private RecordWriter writer;
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,117,ByteBuffer key = (ByteBuffer)reader.getCurrentKey();
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,118,SortedMap<ByteBuffer,IColumn> cf = (SortedMap<ByteBuffer,IColumn>)reader.getCurrentValue();
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,123,ArrayList<Tuple> columns = new ArrayList<Tuple>();
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,124,tuple.set(0, new DataByteArray(key.array(), key.position()+key.arrayOffset(), key.limit()+key.arrayOffset()));
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,130,tuple.set(1, new DefaultDataBag(columns));
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,352,public void putNext(Tuple t) throws ExecException, IOException
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,355,DefaultDataBag pairs = (DefaultDataBag) t.get(1);
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,357,CfDef cfDef = getCfDef(storeSignature);
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,360,try
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,364,Mutation mutation = new Mutation();
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,365,if (DataType.findType(pair.get(1)) == DataType.BAG) // supercolumn
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,367,org.apache.cassandra.thrift.SuperColumn sc = new org.apache.cassandra.thrift.SuperColumn();
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,368,sc.name = objToBB(pair.get(0));
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,369,ArrayList<org.apache.cassandra.thrift.Column> columns = new ArrayList<org.apache.cassandra.thrift.Column>();
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,372,org.apache.cassandra.thrift.Column column = new org.apache.cassandra.thrift.Column();
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,373,column.name = objToBB(subcol.get(0));
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,374,column.value = objToBB(subcol.get(1));
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,375,column.setTimestamp(System.currentTimeMillis() * 1000);
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,376,columns.add(column);
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,378,if (columns.isEmpty()) // a deletion
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,380,mutation.deletion = new Deletion();
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,381,mutation.deletion.super_column = objToBB(pair.get(0));
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,382,mutation.deletion.setTimestamp(System.currentTimeMillis() * 1000);
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,384,else
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,386,sc.columns = columns;
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,387,mutation.column_or_supercolumn = new ColumnOrSuperColumn();
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,388,mutation.column_or_supercolumn.super_column = sc;
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,391,else // assume column since it couldn't be anything else
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,395,mutation.deletion = new Deletion();
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,396,mutation.deletion.predicate = new org.apache.cassandra.thrift.SlicePredicate();
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,397,mutation.deletion.predicate.column_names = Arrays.asList(objToBB(pair.get(0)));
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,398,mutation.deletion.setTimestamp(System.currentTimeMillis() * 1000);
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,400,else
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,402,org.apache.cassandra.thrift.Column column = new org.apache.cassandra.thrift.Column();
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,412,column.setTimestamp(System.currentTimeMillis() * 1000);
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,413,mutation.column_or_supercolumn = new ColumnOrSuperColumn();
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,414,mutation.column_or_supercolumn.column = column;
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,417,mutationList.add(mutation);
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,422,throw new IOException(e + " Output must be (key, {(column,value)...}) for ColumnFamily or (key, {supercolumn:{(column,value)...}...}) for SuperColumnFamily", e);
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,426,writer.write(key, mutationList);
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,430,throw new IOException(e);
src/java/org/apache/cassandra/db/Table.java,68,static final ReentrantReadWriteLock switchLock = new ReentrantReadWriteLock();
src/java/org/apache/cassandra/locator/TokenMetadata.java,398,return tokenToEndpointMap.entrySet();
src/java/org/apache/cassandra/service/StorageService.java,665,Map<Token, InetAddress> mapInetAddress = tokenMetadata_.getTokenToEndpointMap();
src/java/org/apache/cassandra/cli/CliClient.java,123,ROWS_CACHED,
src/java/org/apache/cassandra/cli/CliClient.java,124,ROW_CACHE_SAVE_PERIOD,
src/java/org/apache/cassandra/cli/CliClient.java,125,KEYS_CACHED,
src/java/org/apache/cassandra/cli/CliClient.java,126,KEY_CACHE_SAVE_PERIOD,
src/java/org/apache/cassandra/cli/CliClient.java,137,ROW_CACHE_PROVIDER,
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,348,o = new DataByteArray((String)o);
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,349,return ByteBuffer.wrap(((DataByteArray) o).get());
src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java,47,private final List<InetAddress> sources;
src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java,52,this.sources = sources;
src/java/org/apache/cassandra/service/StorageProxy.java,730,RangeSliceResponseResolver resolver = new RangeSliceResponseResolver(command.keyspace, liveEndpoints);
src/java/org/apache/cassandra/service/StorageProxy.java,986,RangeSliceResponseResolver resolver = new RangeSliceResponseResolver(keyspace, liveEndpoints);
src/java/org/apache/cassandra/service/StorageService.java,2108,Gossiper.instance.advertiseTokenRemoved(endpoint, tokenMetadata_.getToken(endpoint));
src/java/org/apache/cassandra/service/StorageService.java,2109,tokenMetadata_.removeEndpoint(endpoint);
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,90,TokenMetadata dcTokens = new TokenMetadata();
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,94,dcTokens.updateNormalToken(tokenEntry.getKey(), tokenEntry.getValue());
src/java/org/apache/cassandra/locator/TokenMetadata.java,108,assert token != null;
src/java/org/apache/cassandra/locator/TokenMetadata.java,109,assert endpoint != null;
src/java/org/apache/cassandra/locator/TokenMetadata.java,114,bootstrapTokens.inverse().remove(endpoint);
src/java/org/apache/cassandra/locator/TokenMetadata.java,115,tokenToEndpointMap.inverse().remove(endpoint);
src/java/org/apache/cassandra/locator/TokenMetadata.java,116,InetAddress prev = tokenToEndpointMap.put(token, endpoint);
src/java/org/apache/cassandra/locator/TokenMetadata.java,120,logger.warn("Token " + token + " changing ownership from " + prev + " to " + endpoint);
src/java/org/apache/cassandra/locator/TokenMetadata.java,121,sortedTokens = sortTokens();
src/java/org/apache/cassandra/locator/TokenMetadata.java,123,leavingEndpoints.remove(endpoint);
src/java/org/apache/cassandra/locator/TokenMetadata.java,124,removeFromMoving(endpoint); // also removing this endpoint from moving
src/java/org/apache/cassandra/locator/TokenMetadata.java,125,invalidateCaches();
src/java/org/apache/cassandra/tools/NodeCmd.java,161,Collections.sort(sortedTokens);
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,464,property.setProperty(signature, cfdefToString(cfDef));
src/java/org/apache/cassandra/cli/CliClient.java,1160,try
src/java/org/apache/cassandra/cli/CliClient.java,1162,options.put(snitch.getDatacenter(InetAddress.getLocalHost()), "1");
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,171,final Set<Table> tablesRecovered = new HashSet<Table>();
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,127,columns.add(columnToTuple(entry.getKey(), entry.getValue(), cfDef));
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,139,private Tuple columnToTuple(ByteBuffer name, IColumn col, CfDef cfDef) throws IOException
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,161,ArrayList<Tuple> subcols = new ArrayList<Tuple>();
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,163,subcols.add(columnToTuple(subcol.name(), subcol, cfDef));
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,165,pair.set(1, new DefaultDataBag(subcols));
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,179,AbstractType comparator = null;
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,180,AbstractType default_validator = null;
src/java/org/apache/cassandra/locator/TokenMetadata.java,102,n++;
src/java/org/apache/cassandra/locator/TokenMetadata.java,599,sb.append("Bootstrapping Tokens:" );
src/java/org/apache/cassandra/locator/TokenMetadata.java,600,sb.append(System.getProperty("line.separator"));
src/java/org/apache/cassandra/locator/TokenMetadata.java,603,sb.append(entry.getValue() + ":" + entry.getKey());
src/java/org/apache/cassandra/locator/TokenMetadata.java,702,Map<Token, InetAddress> map = new HashMap<Token, InetAddress>(tokenToEndpointMap.size() + bootstrapTokens.size());
src/java/org/apache/cassandra/locator/TokenMetadata.java,703,map.putAll(tokenToEndpointMap);
src/java/org/apache/cassandra/locator/TokenMetadata.java,704,map.putAll(bootstrapTokens);
src/java/org/apache/cassandra/locator/TokenMetadata.java,705,return map;
src/java/org/apache/cassandra/service/StorageService.java,1063,InetAddress endpoint = entry.getValue();
src/java/org/apache/cassandra/service/StorageService.java,1065,allLeftMetadata.updateNormalToken(entry.getKey(), endpoint);
src/java/org/apache/cassandra/service/StorageService.java,1067,pendingRanges.put(range, endpoint);
src/java/org/apache/cassandra/service/StorageService.java,1068,allLeftMetadata.removeEndpoint(endpoint);
src/java/org/apache/cassandra/service/ClientState.java,21,import java.util.ArrayList;
src/java/org/apache/cassandra/service/ClientState.java,22,import java.util.List;
src/java/org/apache/cassandra/service/ClientState.java,23,import java.util.Map;
src/java/org/apache/cassandra/service/ClientState.java,24,import java.util.Set;
src/java/org/apache/cassandra/io/sstable/SSTableLoader.java,49,this.keyspace = directory.getName();
src/java/org/apache/cassandra/tools/BulkLoader.java,369,header.append("Bulk load the sstables find in the directory <dir_path> to the configured cluster." );
src/java/org/apache/cassandra/tools/BulkLoader.java,370,header.append("The last directory of <dir_path> is used as the keyspace name. ");
src/java/org/apache/cassandra/tools/BulkLoader.java,371,header.append("So for instance, to load a sstable named Standard1-g-1-Data.db into keyspace Keyspace1, ");
src/java/org/apache/cassandra/tools/BulkLoader.java,373,header.append("directory Keyspace1/ in the current directory and call: sstableloader Keyspace1");
src/java/org/apache/cassandra/db/HintedHandOffManager.java,228,hintStore.forceFlush();
src/java/org/apache/cassandra/db/HintedHandOffManager.java,368,hintStore.forceFlush();
src/java/org/apache/cassandra/db/SystemTable.java,184,ColumnFamily cf = table.getColumnFamilyStore(STATUS_CF).getColumnFamily(filter);
src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java,386,super(minWorkerThread, maxWorkerThreads, 60, TimeUnit.SECONDS, new SynchronousQueue<Runnable>());
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,126,long timeoutMS = args.stopTimeoutUnit.toMillis(args.stopTimeoutVal);
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,127,long now = System.currentTimeMillis();
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,130,try
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,132,executorService_.awaitTermination(timeoutMS, TimeUnit.MILLISECONDS);
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,133,break;
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,137,long newnow = System.currentTimeMillis();
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,138,timeoutMS -= (newnow - now);
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,139,now = newnow;
src/java/org/apache/cassandra/cql/QueryProcessor.java,415,throw new InvalidRequestException(String.format("Expected key '%s' to be present in WHERE clause for '%s'", key, cfm.cfName));
src/java/org/apache/cassandra/cql/Relation.java,30,private EntityType entityType = EntityType.COLUMN;
src/java/org/apache/cassandra/cql/Relation.java,45,this.entityType = EntityType.KEY;
src/java/org/apache/cassandra/cql/Relation.java,79,return String.format("Relation(%s, %s,nnn %s)", entity, relationType, value);
src/java/org/apache/cassandra/cql/Relation.java,83,enum EntityType
src/java/org/apache/cassandra/cql/Relation.java,85,KEY, COLUMN;
src/java/org/apache/cassandra/cql/WhereClause.java,24,import org.apache.cassandra.config.CFMetaData;
src/java/org/apache/cassandra/cql/WhereClause.java,25,import org.apache.cassandra.utils.ByteBufferUtil;
src/java/org/apache/cassandra/cql/WhereClause.java,29,import java.util.Iterator;
src/java/org/apache/cassandra/cql/WhereClause.java,43,private List<Relation> columns = new ArrayList<Relation>();
src/java/org/apache/cassandra/cql/WhereClause.java,73,keys.add(relation.getValue());
src/java/org/apache/cassandra/cql/WhereClause.java,76,startKey = relation.getValue();
src/java/org/apache/cassandra/cql/WhereClause.java,81,finishKey = relation.getValue();
src/java/org/apache/cassandra/cql/WhereClause.java,86,else
src/java/org/apache/cassandra/cql/WhereClause.java,87,columns.add(relation);
src/java/org/apache/cassandra/cql/WhereClause.java,165,return; // we already have key(s) set
src/java/org/apache/cassandra/cql/WhereClause.java,167,Iterator<Relation> iter = columns.iterator();
src/java/org/apache/cassandra/cql/WhereClause.java,171,Relation relation = iter.next();
src/java/org/apache/cassandra/cql/WhereClause.java,173,ByteBuffer name = ByteBufferUtil.bytes(relation.getEntity().getText());
src/java/org/apache/cassandra/cql/WhereClause.java,178,keyAlias = relation.getEntity().getText().toUpperCase();
src/java/org/apache/cassandra/cql/WhereClause.java,179,keys.add(relation.getValue()); // add a key value to the keys list
src/java/org/apache/cassandra/cql/WhereClause.java,180,iter.remove(); // removing it from the columns
src/java/org/apache/cassandra/cql/WhereClause.java,181,break;
src/java/org/apache/cassandra/db/HintedHandOffManager.java,271,private int waitForSchemaAgreement(InetAddress endpoint) throws InterruptedException
src/java/org/apache/cassandra/db/HintedHandOffManager.java,276,while (gossiper.getEndpointStateForEndpoint(endpoint).getApplicationState(ApplicationState.SCHEMA) == null) {
src/java/org/apache/cassandra/db/HintedHandOffManager.java,277,Thread.sleep(1000);
src/java/org/apache/cassandra/db/HintedHandOffManager.java,280,throw new RuntimeException("Didin't receive gossiped schema from " + endpoint + " in " + 2 * StorageService.RING_DELAY + "ms");
src/java/org/apache/cassandra/db/HintedHandOffManager.java,290,Thread.sleep(1000);
src/java/org/apache/cassandra/db/HintedHandOffManager.java,293,throw new RuntimeException("Could not reach schema agreement with " + endpoint + " in " + 2 * StorageService.RING_DELAY + "ms");
src/java/org/apache/cassandra/db/HintedHandOffManager.java,299,private void deliverHintsToEndpoint(InetAddress endpoint) throws IOException, DigestMismatchException, InvalidRequestException, TimeoutException, InterruptedException
src/java/org/apache/cassandra/db/HintedHandOffManager.java,304,int waited = waitForSchemaAgreement(endpoint);
src/java/org/apache/cassandra/db/HintedHandOffManager.java,307,if (waited == 0) {
src/java/org/apache/cassandra/db/HintedHandOffManager.java,309,logger_.debug("Sleeping {}ms to stagger hint delivery", sleep);
src/java/org/apache/cassandra/db/HintedHandOffManager.java,310,Thread.sleep(sleep);
src/java/org/apache/cassandra/db/HintedHandOffManager.java,314,logger_.info("Endpoint {} died before hint delivery, aborting", endpoint);
src/java/org/apache/cassandra/db/HintedHandOffManager.java,315,return;
src/java/org/apache/cassandra/db/HintedHandOffManager.java,379,logger_.info(String.format("Finished hinted handoff of %s rows to endpoint %s",
src/java/org/apache/cassandra/db/HintedHandOffManager.java,380,rowsReplayed, endpoint));
src/java/org/apache/cassandra/service/DatacenterReadCallback.java,54,ArrayList<InetAddress> preferred = new ArrayList<InetAddress>(blockfor);
src/java/org/apache/cassandra/service/DatacenterReadCallback.java,58,preferred.add(endpoint);
src/java/org/apache/cassandra/service/DatacenterReadCallback.java,60,break;
src/java/org/apache/cassandra/service/DatacenterReadCallback.java,62,return preferred;
src/java/org/apache/cassandra/service/ReadCallback.java,24,import java.util.Random;
src/java/org/apache/cassandra/service/ReadCallback.java,73,: preferredEndpoints(endpoints);
src/java/org/apache/cassandra/service/ReadCallback.java,82,return endpoints.subList(0, Math.min(endpoints.size(), blockfor)); // min so as to not throw exception until assureSufficient is called
src/java/org/apache/cassandra/db/HintedHandOffManager.java,95,private static final int PAGE_SIZE = 1024;
src/java/org/apache/cassandra/db/HintedHandOffManager.java,339,QueryFilter filter = QueryFilter.getSliceFilter(epkey, new QueryPath(HINTS_CF), startColumn, ByteBufferUtil.EMPTY_BYTE_BUFFER, false, PAGE_SIZE);
src/java/org/apache/cassandra/cli/CliClient.java,39,import org.apache.cassandra.db.compaction.CompactionInfo;
src/java/org/apache/cassandra/cli/CliClient.java,1970,info.getColumnFamily(),
src/java/org/apache/cassandra/cli/CliClient.java,1971,info.getBytesComplete(),
src/java/org/apache/cassandra/cli/CliClient.java,1972,info.getTotalBytes());
src/java/org/apache/cassandra/db/ColumnFamilyStoreMBean.java,63,public Object forceFlush() throws IOException;
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,1263,List<CompactionInfo> out = new ArrayList<CompactionInfo>();
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,1265,out.add(ci.getCompactionInfo());
src/java/org/apache/cassandra/db/compaction/CompactionManagerMBean.java,26,public List<CompactionInfo> getCompactions();
src/java/org/apache/cassandra/service/StorageService.java,595,map.put(entry.getKey(), stringify(entry.getValue()));
src/java/org/apache/cassandra/service/StorageService.java,631,map.put(entry.getKey(), rpcaddrs);
src/java/org/apache/cassandra/service/StorageService.java,647,map.put(entry.getKey(), stringify(l));
src/java/org/apache/cassandra/service/StorageService.java,666,Map<Token, String> mapString = new HashMap<Token, String>(mapInetAddress.size());
src/java/org/apache/cassandra/service/StorageService.java,669,mapString.put(entry.getKey(), entry.getValue().getHostAddress());
src/java/org/apache/cassandra/service/StorageService.java,2343,List<Token> sortedTokens = new ArrayList<Token>(getTokenToEndpointMap().keySet());
src/java/org/apache/cassandra/service/StorageService.java,2345,return partitioner.describeOwnership(sortedTokens);
src/java/org/apache/cassandra/service/StorageServiceMBean.java,134,public Map<Token, String> getTokenToEndpointMap();
src/java/org/apache/cassandra/service/StorageServiceMBean.java,279,public Map<Token, Float> getOwnership();
src/java/org/apache/cassandra/tools/NodeCmd.java,159,Map<Token, String> tokenToEndpoint = probe.getTokenToEndpointMap();
src/java/org/apache/cassandra/tools/NodeCmd.java,160,List<Token> sortedTokens = new ArrayList<Token>(tokenToEndpoint.keySet());
src/java/org/apache/cassandra/tools/NodeCmd.java,178,Map<Token, Float> ownerships = probe.getOwnership();
src/java/org/apache/cassandra/tools/NodeCmd.java,374,String percentComplete = c.getTotalBytes() == 0
src/java/org/apache/cassandra/tools/NodeCmd.java,376,: new DecimalFormat("0.00").format((double) c.getBytesComplete() / c.getTotalBytes() * 100) + "%";
src/java/org/apache/cassandra/tools/NodeCmd.java,377,outs.printf("%25s%16s%16s%16s%16s%10s%n", c.getTaskType(), c.getKeyspace(), c.getColumnFamily(), c.getBytesComplete(), c.getTotalBytes(), percentComplete);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1144,long total = 0;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1146,total += cfs.getMemtableThreadSafe().getLiveSize();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1147,return total;
src/java/org/apache/cassandra/db/RowIteratorFactory.java,80,return startWith.compareTo(row.getKey()) <= 0
src/java/org/apache/cassandra/cli/CliClient.java,918,CfDef cfDef = getCfDef(columnFamily);
src/java/org/apache/cassandra/cli/CliClient.java,919,boolean isSuper = cfDef.column_type.equals("Super");
src/java/org/apache/cassandra/config/ReplicationStrategy.java,1,package org.apache.cassandra.config;
src/java/org/apache/cassandra/config/ReplicationStrategy.java,24,import java.util.Map;
src/java/org/apache/cassandra/config/ReplicationStrategy.java,26,public class ReplicationStrategy
src/java/org/apache/cassandra/config/ReplicationStrategy.java,28,public String strategy_class;
src/java/org/apache/cassandra/config/ReplicationStrategy.java,29,public Map<String, String> strategy_options;
src/java/org/apache/cassandra/db/filter/QueryFilter.java,101,return o1.name().equals(o2.name());
src/java/org/apache/cassandra/db/marshal/AbstractType.java,92,return -AbstractType.this.compare(o1, o2);
src/java/org/apache/cassandra/db/marshal/DynamicCompositeType.java,251,header = 0x8000 | ((byte)comparatorName.charAt(0));
src/java/org/apache/cassandra/db/marshal/ReversedType.java,72,return -baseType.compare(o1, o2);
src/java/org/apache/cassandra/dht/LocalToken.java,27,static final long serialVersionUID = 8437543776403014875L;
src/java/org/apache/cassandra/io/sstable/SSTableLoader.java,161,public Void get(long timeout, TimeUnit unit) throws InterruptedException
src/java/org/apache/cassandra/io/sstable/SSTableLoader.java,163,latch.await(timeout, unit);
src/java/org/apache/cassandra/io/sstable/SSTableLoader.java,164,return null;
src/java/org/apache/cassandra/locator/PropertyFileSnitch.java,145,defaultDCRack = value.split(":");
src/java/org/apache/cassandra/locator/PropertyFileSnitch.java,147,defaultDCRack = new String[] { "default", "default" };
src/java/org/apache/cassandra/net/ProtocolHeader.java,19,package org.apache.cassandra.net;
src/java/org/apache/cassandra/net/ProtocolHeader.java,21,public class ProtocolHeader
src/java/org/apache/cassandra/net/ProtocolHeader.java,23,public static final String SERIALIZER = "SERIALIZER";
src/java/org/apache/cassandra/net/ProtocolHeader.java,24,public static final String COMPRESSION = "COMPRESSION";
src/java/org/apache/cassandra/net/ProtocolHeader.java,25,public static final String VERSION = "VERSION";
src/java/org/apache/cassandra/net/ProtocolHeader.java,27,public int serializerType_;
src/java/org/apache/cassandra/net/ProtocolHeader.java,28,public boolean isCompressed_;
src/java/org/apache/cassandra/net/ProtocolHeader.java,29,public boolean isStreamingMode_;
src/java/org/apache/cassandra/net/ProtocolHeader.java,30,public int version_;
src/java/org/apache/cassandra/service/AntiEntropyService.java,595,class RepairSession extends WrappedRunnable implements IEndpointStateChangeSubscriber, IFailureDetectionEventListener
src/java/org/apache/cassandra/utils/FBUtilities.java,500,return -o1.compareTo(o2);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1459,throws ExecutionException, InterruptedException
src/java/org/apache/cassandra/db/HintedHandOffManager.java,129,return false;
src/java/org/apache/cassandra/db/HintedHandOffManager.java,187,return true;
src/java/org/apache/cassandra/db/HintedHandOffManager.java,340,ColumnFamily hintColumnFamily = ColumnFamilyStore.removeDeleted(hintStore.getColumnFamily(filter), Integer.MAX_VALUE);
src/java/org/apache/cassandra/db/HintedHandOffManager.java,403,public void deliverHints(String to) throws UnknownHostException
src/java/org/apache/cassandra/db/HintedHandOffManager.java,405,deliverHints(InetAddress.getByName(to));
src/java/org/apache/cassandra/db/HintedHandOffManagerMBean.java,30,public void deleteHintsForEndpoint(final String epaddr);
src/java/org/apache/cassandra/service/StorageProxy.java,709,try
src/java/org/apache/cassandra/service/StorageProxy.java,711,rows.addAll(cfs.getRangeSlice(command.super_column,
src/java/org/apache/cassandra/service/StorageProxy.java,712,range,
src/java/org/apache/cassandra/service/StorageProxy.java,713,command.max_keys,
src/java/org/apache/cassandra/service/StorageProxy.java,714,QueryFilter.getFilter(command.predicate, cfs.getComparator())));
src/java/org/apache/cassandra/service/StorageProxy.java,718,throw new RuntimeException(e.getCause());
src/java/org/apache/cassandra/service/StorageProxy.java,722,throw new AssertionError(e);
src/java/org/apache/cassandra/service/StorageService.java,461,HintedHandOffManager.instance.registerMBean();
src/java/org/apache/cassandra/service/StorageService.java,1274,deliverHints(endpoint);
src/java/org/apache/cassandra/service/StorageService.java,1331,HintedHandOffManager.instance.deliverHints(endpoint);
src/java/org/apache/cassandra/service/StorageService.java,1336,HintedHandOffManager.instance.deliverHints(host);
src/java/org/apache/cassandra/service/StorageServiceMBean.java,270,public void deliverHints(String host) throws UnknownHostException;
src/java/org/apache/cassandra/service/GCInspector.java,101,Long duration = total - previousTotal;
src/java/org/apache/cassandra/service/GCInspector.java,102,assert duration > 0;
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,189,public void truncate(String cfname) throws InvalidRequestException, UnavailableException, org.apache.thrift.TException;
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,1049,public void truncate(String cfname) throws InvalidRequestException, UnavailableException, org.apache.thrift.TException
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,1065,public void recv_truncate() throws InvalidRequestException, UnavailableException, org.apache.thrift.TException
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,2312,public void getResult() throws InvalidRequestException, UnavailableException, org.apache.thrift.TException {
interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java,19905,UE((short)2, "ue");
src/java/org/apache/cassandra/thrift/CassandraServer.java,1028,public void truncate(String cfname) throws InvalidRequestException, UnavailableException, TException
src/java/org/apache/cassandra/thrift/CassandraServer.java,1039,throw (UnavailableException) new UnavailableException().initCause(e);
src/java/org/apache/cassandra/net/MessagingService.java,460,logger_.info("Shutting down MessageService...");
src/java/org/apache/cassandra/net/MessagingService.java,462,try
src/java/org/apache/cassandra/net/MessagingService.java,468,throw new IOError(e);
src/java/org/apache/cassandra/service/StorageService.java,325,MessagingService.instance().shutdown();
src/java/org/apache/cassandra/service/StorageService.java,1879,MessagingService.instance().shutdown();
src/java/org/apache/cassandra/service/StorageService.java,2273,MessagingService.instance().shutdown();
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,26,import org.apache.thrift.server.TThreadPoolServer;
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,32,import org.apache.thrift.TProcessorFactory;
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,34,import org.apache.thrift.protocol.TProtocolFactory;
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,36,import org.apache.thrift.transport.*;
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,99,int failureCount = 0;
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,111,++failureCount;
src/java/org/apache/cassandra/utils/ExpiringMap.java,34,private final long age;
src/java/org/apache/cassandra/utils/ExpiringMap.java,42,age = System.currentTimeMillis();
src/java/org/apache/cassandra/utils/ExpiringMap.java,52,return ((start - age) > expiration);
src/java/org/apache/cassandra/utils/ExpiringMap.java,77,private final long expiration;
src/java/org/apache/cassandra/utils/ExpiringMap.java,81,this(expiration, null);
src/java/org/apache/cassandra/utils/ExpiringMap.java,91,this.expiration = expiration;
src/java/org/apache/cassandra/utils/ExpiringMap.java,109,return put(key, value, this.expiration);
src/java/org/apache/cassandra/utils/ExpiringMap.java,133,return co == null ? 0 : co.age;
src/java/org/apache/cassandra/db/context/CounterContext.java,22,import java.util.*;
src/java/org/apache/cassandra/db/context/CounterContext.java,24,import org.apache.log4j.Logger;
src/java/org/apache/cassandra/db/context/CounterContext.java,26,import org.apache.cassandra.db.marshal.MarshalException;
src/java/org/apache/cassandra/db/context/CounterContext.java,70,private static final Logger logger = Logger.getLogger(CounterContext.class);
src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java,126,logger.info("JVM vendor/version: {}/{}", System.getProperty("java.vm.name"), System.getProperty("java.version") );
src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java,128,logger.info("Classpath: {}", System.getProperty("java.class.path"));
src/java/org/apache/cassandra/service/AbstractCassandraDaemon.java,129,CLibrary.tryMlockall();
src/java/org/apache/cassandra/utils/CLibrary.java,184,p.waitFor();
src/java/org/apache/cassandra/db/migration/DropKeyspace.java,81,Table table = Table.clear(ksm.name);
src/java/org/apache/cassandra/db/migration/DropKeyspace.java,82,assert table != null;
src/java/org/apache/cassandra/service/StorageService.java,388,tokenMetadata_.updateNormalToken(entry.getKey(), entry.getValue());
src/java/org/apache/cassandra/service/StorageService.java,389,Gossiper.instance.addSavedEndpoint(entry.getValue());
src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java,133,else
src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java,142,logger.error("Error in ThreadPoolExecutor", t);
src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java,143,else
src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java,144,Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), t);
src/java/org/apache/cassandra/db/RowMutationVerbHandler.java,25,import java.net.UnknownHostException;
src/java/org/apache/cassandra/db/RowMutationVerbHandler.java,35,import org.apache.cassandra.utils.FBUtilities;
src/java/org/apache/cassandra/db/RowMutationVerbHandler.java,86,private void forwardToLocalNodes(Message message, byte[] forwardBytes) throws UnknownHostException
src/java/org/apache/cassandra/db/RowMutationVerbHandler.java,92,assert forwardBytes.length >= bytesPerInetAddress;
src/java/org/apache/cassandra/db/RowMutationVerbHandler.java,93,assert forwardBytes.length % bytesPerInetAddress == 0;
src/java/org/apache/cassandra/db/RowMutationVerbHandler.java,95,int offset = 0;
src/java/org/apache/cassandra/db/RowMutationVerbHandler.java,96,byte[] addressBytes = new byte[bytesPerInetAddress];
src/java/org/apache/cassandra/db/RowMutationVerbHandler.java,101,System.arraycopy(forwardBytes, offset, addressBytes, 0, bytesPerInetAddress);
src/java/org/apache/cassandra/db/RowMutationVerbHandler.java,102,InetAddress address = InetAddress.getByAddress(addressBytes);
src/java/org/apache/cassandra/db/RowMutationVerbHandler.java,105,logger_.debug("Forwarding message to " + address);
src/java/org/apache/cassandra/db/RowMutationVerbHandler.java,111,offset += bytesPerInetAddress;
src/java/org/apache/cassandra/net/MessagingService.java,338,String id = nextId();
src/java/org/apache/cassandra/service/StorageProxy.java,313,MessagingService.instance().sendRR(message, destination, handler);
src/java/org/apache/cassandra/service/StorageProxy.java,315,else
src/java/org/apache/cassandra/service/StorageProxy.java,318,Iterator<InetAddress> iter = messages.getValue().iterator();
src/java/org/apache/cassandra/service/StorageProxy.java,319,InetAddress target = iter.next();
src/java/org/apache/cassandra/service/StorageProxy.java,337,MessagingService.instance().sendRR(message, target, handler);
src/java/org/apache/cassandra/config/CFMetaData.java,678,.columnMetadata(ColumnDefinition.fromColumnDef(cf_def.column_metadata));
src/java/org/apache/cassandra/cql/CreateColumnFamilyStatement.java,316,.keyAlias(keyAlias);
src/java/org/apache/cassandra/service/StorageProxy.java,299,String dataCenter = entry.getKey();
src/java/org/apache/cassandra/service/StorageProxy.java,323,InetAddress destination = iter.next();
src/java/org/apache/cassandra/service/StorageProxy.java,333,dos.write(destination.getAddress());
src/java/org/apache/cassandra/cli/CliMain.java,223,String message = (e.getCause() == null) ? e.getMessage() : e.getCause().getMessage();
src/java/org/apache/cassandra/cql/QueryProcessor.java,701,applyMigrationOnStage(new AddColumnFamily(createCf.getCFMetaData(keyspace)));
src/java/org/apache/cassandra/thrift/ThriftValidation.java,589,+ ", because it equals to the key_alias.");
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,153,return 0;
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,156,Arrays.sort(files, new FileUtils.FileComparator());
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,157,logger.info("Replaying " + StringUtils.join(files, ", "));
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,158,int replayed = recover(files);
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,806,finally
src/java/org/apache/cassandra/io/sstable/Component.java,100,case DATA:
src/java/org/apache/cassandra/io/sstable/Component.java,101,case PRIMARY_INDEX:
src/java/org/apache/cassandra/io/sstable/Component.java,102,case FILTER:
src/java/org/apache/cassandra/io/sstable/Component.java,103,case COMPACTED_MARKER:
src/java/org/apache/cassandra/io/sstable/Component.java,104,case STATS:
src/java/org/apache/cassandra/io/sstable/Component.java,105,return type.repr;
src/java/org/apache/cassandra/io/sstable/Component.java,106,case BITMAP_INDEX:
src/java/org/apache/cassandra/io/sstable/Component.java,109,throw new IllegalStateException();
src/java/org/apache/cassandra/io/sstable/Component.java,123,String repr = path.right;
src/java/org/apache/cassandra/io/sstable/Component.java,124,int id = -1;
src/java/org/apache/cassandra/io/sstable/Component.java,128,id = Integer.parseInt(repr.substring(0, separatorPos));
src/java/org/apache/cassandra/io/sstable/Component.java,129,repr = repr.substring(separatorPos+1, repr.length());
src/java/org/apache/cassandra/io/sstable/Component.java,131,Type type = Type.fromRepresentation(repr);
src/java/org/apache/cassandra/io/sstable/Component.java,141,case BITMAP_INDEX:
src/java/org/apache/cassandra/io/sstable/Component.java,142,component = new Component(type, id);
src/java/org/apache/cassandra/io/sstable/Component.java,143,break;
src/java/org/apache/cassandra/io/sstable/SSTable.java,201,final Set<Component> components = new HashSet<Component>();
src/java/org/apache/cassandra/io/sstable/SSTable.java,208,components.add(component.right);
src/java/org/apache/cassandra/io/sstable/SSTable.java,209,return false;
src/java/org/apache/cassandra/streaming/IncomingStreamReader.java,99,finally
src/java/org/apache/cassandra/tools/NodeProbe.java,525,return getEndpointSnitchInfoProxy().getDatacenter(host);
src/java/org/apache/cassandra/tools/NodeProbe.java,537,return getEndpointSnitchInfoProxy().getRack(host);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1034,data.addStreamedSSTable(sstable);
src/java/org/apache/cassandra/db/DataTracker.java,224,addSSTables(Arrays.asList(sstable));
src/java/org/apache/cassandra/db/DataTracker.java,225,incrementallyBackup(sstable);
src/java/org/apache/cassandra/db/DataTracker.java,230,replace(getSSTables(), Collections.<SSTableReader>emptyList());
src/java/org/apache/cassandra/cli/CliClient.java,2363,return ByteBufferUtil.bytes(columnValue);
src/java/org/apache/cassandra/service/AntiEntropyService.java,172,RepairSession.RepairJob job = session.jobs.peek();
src/java/org/apache/cassandra/service/AntiEntropyService.java,173,assert job != null : "A repair should have at least some jobs scheduled";
src/java/org/apache/cassandra/service/AntiEntropyService.java,686,throw new RuntimeException("Interrupted while waiting for repair: repair will continue in the background.");
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,763,oldMemtable.freeze();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,782,data.renewMemtable();
src/java/org/apache/cassandra/config/Config.java,110,public EncryptionOptions encryption_options;
src/java/org/apache/cassandra/client/RingCache.java,58,private Multimap<Range, InetAddress> rangeMap;
src/java/org/apache/cassandra/cql/QueryProcessor.java,51,import org.apache.cassandra.dht.Token;
src/java/org/apache/cassandra/cql/QueryProcessor.java,152,: (new Term()).getByteBuffer();
src/java/org/apache/cassandra/cql/QueryProcessor.java,156,: (new Term()).getByteBuffer();
src/java/org/apache/cassandra/cql/QueryProcessor.java,158,Token startToken = p.getToken(startKey), finishToken = p.getToken(finishKey);
src/java/org/apache/cassandra/cql/QueryProcessor.java,162,throw new InvalidRequestException("Start key's md5 sorts after end key's md5. This is not allowed; you probably should not specify end key at all, under RandomPartitioner");
src/java/org/apache/cassandra/cql/QueryProcessor.java,166,AbstractBounds bounds = new Bounds(startToken, finishToken);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1465,DecoratedKey startWith = new DecoratedKey(range.left, null);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1466,DecoratedKey stopAt = new DecoratedKey(range.right, null);
src/java/org/apache/cassandra/db/DecoratedKey.java,38,public class DecoratedKey<T extends Token> implements Comparable<DecoratedKey>
src/java/org/apache/cassandra/db/DecoratedKey.java,40,private static IPartitioner partitioner = StorageService.getPartitioner();
src/java/org/apache/cassandra/db/DecoratedKey.java,55,super();
src/java/org/apache/cassandra/db/DecoratedKey.java,56,assert token != null;
src/java/org/apache/cassandra/db/DecoratedKey.java,64,return token.hashCode();
src/java/org/apache/cassandra/db/DecoratedKey.java,73,return false;
src/java/org/apache/cassandra/db/DecoratedKey.java,77,DecoratedKey other = (DecoratedKey) obj;
src/java/org/apache/cassandra/db/DecoratedKey.java,78,return token.equals(other.token);
src/java/org/apache/cassandra/db/DecoratedKey.java,83,return token.compareTo(other.token);
src/java/org/apache/cassandra/db/DecoratedKey.java,88,return token.equals(partitioner.getMinimumToken());
src/java/org/apache/cassandra/db/HintedHandOffManager.java,449,ByteBuffer empty = ByteBufferUtil.EMPTY_BYTE_BUFFER;
src/java/org/apache/cassandra/db/HintedHandOffManager.java,450,Range range = new Range(partitioner.getToken(empty), partitioner.getToken(empty));
src/java/org/apache/cassandra/db/IndexScanCommand.java,46,public final AbstractBounds range;
src/java/org/apache/cassandra/db/IndexScanCommand.java,63,serializer.serialize(this, dob);
src/java/org/apache/cassandra/db/IndexScanCommand.java,79,return serializer.deserialize(new DataInputStream(bis));
src/java/org/apache/cassandra/db/IndexScanCommand.java,84,public void serialize(IndexScanCommand o, DataOutput out) throws IOException
src/java/org/apache/cassandra/db/IndexScanCommand.java,91,AbstractBounds.serializer().serialize(o.range, out);
src/java/org/apache/cassandra/db/IndexScanCommand.java,94,public IndexScanCommand deserialize(DataInput in) throws IOException
src/java/org/apache/cassandra/db/IndexScanCommand.java,104,AbstractBounds range = AbstractBounds.serializer().deserialize(in);
src/java/org/apache/cassandra/db/Memtable.java,77,private final ConcurrentNavigableMap<DecoratedKey, ColumnFamily> columnFamilies = new ConcurrentSkipListMap<DecoratedKey, ColumnFamily>();
src/java/org/apache/cassandra/db/Memtable.java,241,keySize += key.key.remaining();
src/java/org/apache/cassandra/db/Memtable.java,295,return columnFamilies.tailMap(startWith).entrySet().iterator();
src/java/org/apache/cassandra/db/RangeSliceCommand.java,72,public final AbstractBounds range;
src/java/org/apache/cassandra/db/RangeSliceCommand.java,138,AbstractBounds.serializer().serialize(sliceCommand.range, dos);
src/java/org/apache/cassandra/db/RangeSliceCommand.java,156,AbstractBounds range = AbstractBounds.serializer().deserialize(dis);
src/java/org/apache/cassandra/db/RowIteratorFactory.java,65,final DecoratedKey startWith,
src/java/org/apache/cassandra/db/RowIteratorFactory.java,66,final DecoratedKey stopAt,
src/java/org/apache/cassandra/db/RowIteratorFactory.java,81,&& (stopAt.isEmpty() || row.getKey().compareTo(stopAt) <= 0);
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,829,Collection<Range> ranges = StorageService.instance.getLocalRanges(table.name);
src/java/org/apache/cassandra/db/marshal/LocalByPartionerType.java,68,return partitioner.decorateKey(o1).compareTo(partitioner.decorateKey(o2));
src/java/org/apache/cassandra/dht/AbstractBounds.java,33,public abstract class AbstractBounds implements Serializable
src/java/org/apache/cassandra/dht/AbstractBounds.java,49,public final Token left;
src/java/org/apache/cassandra/dht/AbstractBounds.java,50,public final Token right;
src/java/org/apache/cassandra/dht/AbstractBounds.java,69,assert left.equals(token) || contains(token);
src/java/org/apache/cassandra/dht/AbstractBounds.java,70,AbstractBounds lb = createFrom(token);
src/java/org/apache/cassandra/dht/AbstractBounds.java,72,AbstractBounds rb = lb != null && token.equals(right) ? null : new Range(token, right);
src/java/org/apache/cassandra/dht/AbstractBounds.java,73,return new Pair<AbstractBounds,AbstractBounds>(lb, rb);
src/java/org/apache/cassandra/dht/AbstractBounds.java,82,public abstract boolean equals(Object obj);
src/java/org/apache/cassandra/dht/AbstractBounds.java,84,public abstract boolean contains(Token start);
src/java/org/apache/cassandra/dht/AbstractBounds.java,87,public abstract AbstractBounds createFrom(Token right);
src/java/org/apache/cassandra/dht/AbstractBounds.java,89,public abstract List<AbstractBounds> unwrap();
src/java/org/apache/cassandra/dht/AbstractBounds.java,98,List<AbstractBounds> output = new ArrayList<AbstractBounds>();
src/java/org/apache/cassandra/dht/AbstractBounds.java,115,public void serialize(AbstractBounds range, DataOutput out) throws IOException
src/java/org/apache/cassandra/dht/AbstractBounds.java,117,out.writeInt(range instanceof Range ? Type.RANGE.ordinal() : Type.BOUNDS.ordinal());
src/java/org/apache/cassandra/dht/AbstractBounds.java,118,Token.serializer().serialize(range.left, out);
src/java/org/apache/cassandra/dht/AbstractBounds.java,119,Token.serializer().serialize(range.right, out);
src/java/org/apache/cassandra/dht/AbstractBounds.java,122,public AbstractBounds deserialize(DataInput in) throws IOException
src/java/org/apache/cassandra/dht/AbstractBounds.java,125,return new Range(Token.serializer().deserialize(in), Token.serializer().deserialize(in));
src/java/org/apache/cassandra/dht/AbstractBounds.java,126,return new Bounds(Token.serializer().deserialize(in), Token.serializer().deserialize(in));
src/java/org/apache/cassandra/dht/AbstractByteOrderedPartitioner.java,41,public abstract class AbstractByteOrderedPartitioner implements IPartitioner<BytesToken>
src/java/org/apache/cassandra/dht/AbstractByteOrderedPartitioner.java,189,List<Range> sortedRanges = new ArrayList<Range>();
src/java/org/apache/cassandra/dht/AbstractByteOrderedPartitioner.java,196,sortedRanges.add(new Range(lastToken, node));
src/java/org/apache/cassandra/dht/BootStrapper.java,82,final Multimap<String, Map.Entry<InetAddress, Collection<Range>>> rangesToFetch = HashMultimap.create();
src/java/org/apache/cassandra/dht/BootStrapper.java,87,Map<InetAddress, Collection<Range>> workMap = getWorkMap(getRangesWithSources(table)).asMap();
src/java/org/apache/cassandra/dht/BootStrapper.java,114,logger.debug("Bootstrapping from " + source + " ranges " + StringUtils.join(entry.getValue(), ", "));
src/java/org/apache/cassandra/dht/BootStrapper.java,115,StreamIn.requestRanges(source, table, entry.getValue(), callback, OperationType.BOOTSTRAP);
src/java/org/apache/cassandra/dht/BootStrapper.java,199,Collection<Range> myRanges = strat.getPendingAddressRanges(tokenMetadata, token, address);
src/java/org/apache/cassandra/dht/BootStrapper.java,201,Multimap<Range, InetAddress> myRangeAddresses = ArrayListMultimap.create();
src/java/org/apache/cassandra/dht/BootStrapper.java,202,Multimap<Range, InetAddress> rangeAddresses = strat.getRangeAddresses(tokenMetadata);
src/java/org/apache/cassandra/dht/BootStrapper.java,252,Multimap<InetAddress, Range> sources = ArrayListMultimap.create();
src/java/org/apache/cassandra/dht/Bounds.java,29,public class Bounds extends AbstractBounds
src/java/org/apache/cassandra/dht/Bounds.java,40,assert left.compareTo(right) <= 0 || right.equals(partitioner.getMinimumToken()) : "[" + left + "," + right + "]";
src/java/org/apache/cassandra/dht/Bounds.java,45,return Range.contains(left, right, token) || left.equals(token);
src/java/org/apache/cassandra/dht/Bounds.java,50,return new Bounds(left, token, partitioner);
src/java/org/apache/cassandra/dht/Bounds.java,56,return Collections.<AbstractBounds>singletonList(this);
src/java/org/apache/cassandra/dht/Bounds.java,63,Bounds rhs = (Bounds)o;
src/java/org/apache/cassandra/dht/LocalPartitioner.java,31,public class LocalPartitioner implements IPartitioner<LocalToken>
src/java/org/apache/cassandra/dht/OrderPreservingPartitioner.java,36,public class OrderPreservingPartitioner implements IPartitioner<StringToken>
src/java/org/apache/cassandra/dht/OrderPreservingPartitioner.java,181,List<Range> sortedRanges = new ArrayList<Range>();
src/java/org/apache/cassandra/dht/OrderPreservingPartitioner.java,188,sortedRanges.add(new Range(lastToken, node));
src/java/org/apache/cassandra/dht/RandomPartitioner.java,37,public class RandomPartitioner implements IPartitioner<BigIntegerToken>
src/java/org/apache/cassandra/dht/Range.java,36,public class Range extends AbstractBounds implements Comparable<Range>, Serializable
src/java/org/apache/cassandra/dht/Range.java,71,return ( compare(bi,left) > 0 && compare(right,bi) >= 0);
src/java/org/apache/cassandra/dht/Range.java,87,return compare(left,that.left) <= 0 && compare(that.right,right) <= 0;
src/java/org/apache/cassandra/dht/Range.java,93,return compare(left,that.left) <= 0 || compare(that.right,right) <= 0;
src/java/org/apache/cassandra/dht/Range.java,125,return Collections.unmodifiableSet(new HashSet<Range>(Arrays.asList(ranges)));
src/java/org/apache/cassandra/dht/Range.java,148,return rangeSet(new Range((Token)ObjectUtils.max(this.left, that.left),
src/java/org/apache/cassandra/dht/Range.java,149,(Token)ObjectUtils.min(this.right, that.right),
src/java/org/apache/cassandra/dht/Range.java,150,partitioner));
src/java/org/apache/cassandra/dht/Range.java,176,Set<Range> intersection = new HashSet<Range>(2);
src/java/org/apache/cassandra/dht/Range.java,178,intersection.add(new Range(first.left, that.right, first.partitioner));
src/java/org/apache/cassandra/dht/Range.java,179,intersection.add(new Range(that.left, first.right, first.partitioner));
src/java/org/apache/cassandra/dht/Range.java,185,Set<Range> intersection = new HashSet<Range>(2);
src/java/org/apache/cassandra/dht/Range.java,187,intersection.add(new Range(other.left, wrapping.right, wrapping.partitioner));
src/java/org/apache/cassandra/dht/Range.java,190,intersection.add(new Range(wrapping.left, other.right, wrapping.partitioner));
src/java/org/apache/cassandra/dht/Range.java,198,return new Range(left, token, partitioner);
src/java/org/apache/cassandra/dht/Range.java,204,return (List)Arrays.asList(this);
src/java/org/apache/cassandra/dht/Range.java,205,List<AbstractBounds> unwrapped = new ArrayList<AbstractBounds>(2);
src/java/org/apache/cassandra/dht/Range.java,206,unwrapped.add(new Range(left, partitioner.getMinimumToken(), partitioner));
src/java/org/apache/cassandra/dht/Range.java,207,unwrapped.add(new Range(partitioner.getMinimumToken(), right, partitioner));
src/java/org/apache/cassandra/dht/Range.java,216,return compare(left,right) >= 0;
src/java/org/apache/cassandra/dht/Range.java,221,ByteBuffer l,r;
src/java/org/apache/cassandra/dht/Range.java,225,l  = ByteBuffer.wrap((byte[]) left.token);
src/java/org/apache/cassandra/dht/Range.java,229,l  = (ByteBuffer) left.token;
src/java/org/apache/cassandra/dht/Range.java,231,else
src/java/org/apache/cassandra/dht/Range.java,234,return left.compareTo(right);
src/java/org/apache/cassandra/dht/Range.java,239,r  = ByteBuffer.wrap((byte[]) right.token);
src/java/org/apache/cassandra/dht/Range.java,241,else
src/java/org/apache/cassandra/dht/Range.java,243,r  = (ByteBuffer) right.token;
src/java/org/apache/cassandra/dht/Range.java,246,return ByteBufferUtil.compareUnsigned(l, r);
src/java/org/apache/cassandra/dht/Range.java,261,return compare(right,rhs.right);
src/java/org/apache/cassandra/dht/Range.java,273,ArrayList<Range> difference = new ArrayList<Range>();
src/java/org/apache/cassandra/dht/Range.java,276,difference.add(new Range(left, contained.left, partitioner));
src/java/org/apache/cassandra/dht/Range.java,278,difference.add(new Range(contained.right, right, partitioner));
src/java/org/apache/cassandra/dht/Range.java,292,Set<Range> result;
src/java/org/apache/cassandra/dht/Range.java,293,Set<Range> intersectionSet = this.intersectionWith(rhs);
src/java/org/apache/cassandra/dht/Range.java,296,result = new HashSet<Range>();
src/java/org/apache/cassandra/dht/Range.java,305,result = new HashSet<Range>(rhs.subtractContained(intersections[0]));
src/java/org/apache/cassandra/dht/Range.java,310,Range first = intersections[0];
src/java/org/apache/cassandra/dht/Range.java,311,Range second = intersections[1];
src/java/org/apache/cassandra/dht/Range.java,312,ArrayList<Range> temp = rhs.subtractContained(first);
src/java/org/apache/cassandra/dht/Range.java,316,Range single = temp.get(0);
src/java/org/apache/cassandra/dht/Range.java,317,result = new HashSet<Range>(single.subtractContained(second));
src/java/org/apache/cassandra/dht/Range.java,341,Range rhs = (Range)o;
src/java/org/apache/cassandra/dht/Range.java,342,return compare(left,rhs.left) == 0 && compare(right,rhs.right) == 0;
src/java/org/apache/cassandra/dht/Token.java,32,public abstract class Token<T> implements Comparable<Token<T>>, Serializable
src/java/org/apache/cassandra/dht/Token.java,61,if (!(obj instanceof Token)) {
src/java/org/apache/cassandra/dht/Token.java,64,return token.equals(((Token)obj).token);
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,110,Range jobRange = null;
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,117,jobRange = new Range(partitioner.getTokenFactory().fromString(jobKeyRange.start_token),
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,118,partitioner.getTokenFactory().fromString(jobKeyRange.end_token),
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,119,partitioner);
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,131,Range dhtRange = new Range(partitioner.getTokenFactory().fromString(range.start_token),
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,132,partitioner.getTokenFactory().fromString(range.end_token),
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,133,partitioner);
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordWriter.java,125,Range range = ringCache.getRange(keybuff);
src/java/org/apache/cassandra/io/sstable/SSTableLoader.java,113,Map<InetAddress, Collection<Range>> endpointToRanges = client.getEndpointToRangesMap();
src/java/org/apache/cassandra/io/sstable/SSTableLoader.java,126,Collection<Range> ranges = entry.getValue();
src/java/org/apache/cassandra/io/sstable/SSTableLoader.java,225,private final Map<InetAddress, Collection<Range>> endpointToRanges = new HashMap<InetAddress, Collection<Range>>();
src/java/org/apache/cassandra/io/sstable/SSTableLoader.java,257,Collection<Range> ranges = endpointToRanges.get(endpoint);
src/java/org/apache/cassandra/io/sstable/SSTableLoader.java,260,ranges = new HashSet<Range>();
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,351,int index = Collections.binarySearch(indexSummary.getIndexPositions(), new IndexSummary.KeyPosition(decoratedKey, -1));
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,397,return kp.key;
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,411,DecoratedKey leftKey = new DecoratedKey(range.left, null);
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,412,DecoratedKey rightKey = new DecoratedKey(range.right, null);
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,414,int left = Collections.binarySearch(samples, new IndexSummary.KeyPosition(leftKey, -1));
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,426,: Collections.binarySearch(samples, new IndexSummary.KeyPosition(rightKey, -1));
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,481,return samples.get(idx++).key;
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,503,long left = getPosition(new DecoratedKey(range.left, null), Operator.GT);
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,507,long right = getPosition(new DecoratedKey(range.right, null), Operator.GT);
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,521,assert key.key != null;
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,549,assert decoratedKey.key != null; // null is ok for GE scans
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,564,IndexSummary.KeyPosition sampledPosition = getIndexScanPosition(decoratedKey);
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,586,int comparison = indexDecoratedKey.compareTo(decoratedKey);
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,594,cacheKey(decoratedKey, dataPosition);
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,196,Multimap<InetAddress, Range> map = HashMultimap.create();
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,200,Range range = metadata.getPrimaryRangeFor(token);
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,212,Multimap<Range, InetAddress> map = HashMultimap.create();
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,216,Range range = metadata.getPrimaryRangeFor(token);
src/java/org/apache/cassandra/locator/TokenMetadata.java,62,private ConcurrentMap<String, Multimap<Range, InetAddress>> pendingRanges = new ConcurrentHashMap<String, Multimap<Range, InetAddress>>();
src/java/org/apache/cassandra/locator/TokenMetadata.java,99,Range sourceRange = getPrimaryRangeFor(getToken(source));
src/java/org/apache/cassandra/locator/TokenMetadata.java,416,return new Range(getPredecessor(right), right);
src/java/org/apache/cassandra/locator/TokenMetadata.java,434,Multimap<Range, InetAddress> map = pendingRanges.get(table);
src/java/org/apache/cassandra/locator/TokenMetadata.java,438,Multimap<Range, InetAddress> priorMap = pendingRanges.putIfAbsent(table, map);
src/java/org/apache/cassandra/locator/TokenMetadata.java,453,List<Range> ranges = new ArrayList<Range>();
src/java/org/apache/cassandra/locator/TokenMetadata.java,536,final boolean insertMin = (includeMin && !ring.get(0).equals(StorageService.getPartitioner().getMinimumToken())) ? true : false;
src/java/org/apache/cassandra/locator/TokenMetadata.java,680,Map<Range, Collection<InetAddress>> ranges = getPendingRanges(table);
src/java/org/apache/cassandra/service/AntiEntropyService.java,144,Map<Range, List<InetAddress>> replicaSets = ss.getRangeToAddressMap(table);
src/java/org/apache/cassandra/service/AntiEntropyService.java,420,AbstractBounds.serializer().serialize(request.range, dos);
src/java/org/apache/cassandra/service/AntiEntropyService.java,428,Range range;
src/java/org/apache/cassandra/service/AntiEntropyService.java,430,range = (Range) AbstractBounds.serializer().deserialize(dis);
src/java/org/apache/cassandra/service/AntiEntropyService.java,432,range = new Range(StorageService.getPartitioner().getMinimumToken(), StorageService.getPartitioner().getMinimumToken());
src/java/org/apache/cassandra/service/AntiEntropyService.java,557,public final Range range;
src/java/org/apache/cassandra/service/AntiEntropyService.java,600,private final Range range;
src/java/org/apache/cassandra/service/AntiEntropyService.java,830,public List<Range> differences;
src/java/org/apache/cassandra/service/AntiEntropyService.java,838,this.differences = new ArrayList<Range>();
src/java/org/apache/cassandra/service/StorageProxy.java,226,List<InetAddress> naturalEndpoints = ss.getNaturalEndpoints(table, key);
src/java/org/apache/cassandra/service/StorageProxy.java,227,return ss.getTokenMetadata().getWriteEndpoints(StorageService.getPartitioner().getToken(key), table, naturalEndpoints);
src/java/org/apache/cassandra/service/StorageProxy.java,698,List<AbstractBounds> ranges = getRestrictedRanges(command.range);
src/java/org/apache/cassandra/service/StorageProxy.java,871,List<AbstractBounds> ranges = new ArrayList<AbstractBounds>();
src/java/org/apache/cassandra/service/StorageProxy.java,873,Iterator<Token> ringIter = TokenMetadata.ringIterator(tokenMetadata.sortedTokens(), queryRange.left, true);
src/java/org/apache/cassandra/service/StorageProxy.java,874,AbstractBounds remainder = queryRange;
src/java/org/apache/cassandra/service/StorageProxy.java,881,Pair<AbstractBounds,AbstractBounds> splits = remainder.split(token);
src/java/org/apache/cassandra/service/StorageProxy.java,974,Token leftToken = index_clause.start_key == null ? p.getMinimumToken() : p.getToken(index_clause.start_key);
src/java/org/apache/cassandra/service/StorageProxy.java,975,List<AbstractBounds> ranges = getRestrictedRanges(new Bounds(leftToken, p.getMinimumToken()));
src/java/org/apache/cassandra/service/StorageService.java,592,Map<Range, List<String>> map = new HashMap<Range, List<String>>();
src/java/org/apache/cassandra/service/StorageService.java,623,Map<Range, List<String>> map = new HashMap<Range, List<String>>();
src/java/org/apache/cassandra/service/StorageService.java,643,Map<Range, List<String>> map = new HashMap<Range, List<String>>();
src/java/org/apache/cassandra/service/StorageService.java,659,List<Range> ranges = getAllRanges(tokenMetadata_.sortedTokens());
src/java/org/apache/cassandra/service/StorageService.java,682,Map<Range, List<InetAddress>> rangeToEndpointMap = new HashMap<Range, List<InetAddress>>();
src/java/org/apache/cassandra/service/StorageService.java,1025,Multimap<Range, InetAddress> pendingRanges = HashMultimap.create();
src/java/org/apache/cassandra/service/StorageService.java,1037,Multimap<InetAddress, Range> addressRanges = strategy.getAddressRanges();
src/java/org/apache/cassandra/service/StorageService.java,1043,Set<Range> affectedRanges = new HashSet<Range>();
src/java/org/apache/cassandra/service/StorageService.java,1107,Multimap<Range, InetAddress> rangeAddresses = Table.open(table).getReplicationStrategy().getRangeAddresses(tokenMetadata_);
src/java/org/apache/cassandra/service/StorageService.java,1108,Multimap<InetAddress, Range> sourceRanges = HashMultimap.create();
src/java/org/apache/cassandra/service/StorageService.java,1173,Multimap<String, Map.Entry<InetAddress, Collection<Range>>> rangesToFetch = HashMultimap.create();
src/java/org/apache/cassandra/service/StorageService.java,1180,Set<Range> myNewRanges = new HashSet<Range>();
src/java/org/apache/cassandra/service/StorageService.java,1186,Multimap<InetAddress, Range> sourceRanges = getNewSourceRanges(table, myNewRanges);
src/java/org/apache/cassandra/service/StorageService.java,1199,Collection<Range> ranges = entry.getValue();
src/java/org/apache/cassandra/service/StorageService.java,1223,Collection<Range> ranges = getRangesForEndpoint(table, endpoint);
src/java/org/apache/cassandra/service/StorageService.java,1228,Map<Range, List<InetAddress>> currentReplicaEndpoints = new HashMap<Range, List<InetAddress>>();
src/java/org/apache/cassandra/service/StorageService.java,1241,Multimap<Range, InetAddress> changedRanges = HashMultimap.create();
src/java/org/apache/cassandra/service/StorageService.java,1629,public AntiEntropyService.RepairFuture forceTableRepair(final Range range, final String tableName, final String... columnFamilies) throws IOException
src/java/org/apache/cassandra/service/StorageService.java,1695,List<Range> ranges = new ArrayList<Range>();
src/java/org/apache/cassandra/service/StorageService.java,1699,Range range = new Range(sortedTokens.get(i - 1), sortedTokens.get(i));
src/java/org/apache/cassandra/service/StorageService.java,1702,Range range = new Range(sortedTokens.get(size - 1), sortedTokens.get(0));
src/java/org/apache/cassandra/service/StorageService.java,1737,return Table.open(table).getReplicationStrategy().getNaturalEndpoints(token);
src/java/org/apache/cassandra/service/StorageService.java,1749,return getLiveNaturalEndpoints(table, partitioner.getToken(key));
src/java/org/apache/cassandra/service/StorageService.java,1755,List<InetAddress> endpoints = Table.open(table).getReplicationStrategy().getNaturalEndpoints(token);
src/java/org/apache/cassandra/service/StorageService.java,1809,Range range = getLocalPrimaryRange();
src/java/org/apache/cassandra/service/StorageService.java,1908,Map<String, Multimap<Range, InetAddress>> rangesToStream = new HashMap<String, Multimap<Range, InetAddress>>();
src/java/org/apache/cassandra/service/StorageService.java,1978,Map<String, Multimap<InetAddress, Range>> rangesToFetch = new HashMap<String, Multimap<InetAddress, Range>>();
src/java/org/apache/cassandra/service/StorageService.java,1979,Map<String, Multimap<Range, InetAddress>> rangesToStreamByTable = new HashMap<String, Multimap<Range, InetAddress>>();
src/java/org/apache/cassandra/service/StorageService.java,1991,Collection<Range> currentRanges = getRangesForEndpoint(table, localAddress);
src/java/org/apache/cassandra/service/StorageService.java,1993,Collection<Range> updatedRanges = strategy.getPendingAddressRanges(tokenMetadata_, newToken, localAddress);
src/java/org/apache/cassandra/service/StorageService.java,1997,Multimap<Range, InetAddress> rangeAddresses = strategy.getRangeAddresses(tokenMetadata_);
src/java/org/apache/cassandra/service/StorageService.java,2000,Pair<Set<Range>, Set<Range>> rangesPerTable = calculateStreamAndFetchRanges(currentRanges, updatedRanges);
src/java/org/apache/cassandra/service/StorageService.java,2006,Multimap<Range, InetAddress> rangesToFetchWithPreferredEndpoints = ArrayListMultimap.create();
src/java/org/apache/cassandra/service/StorageService.java,2022,Multimap<Range, InetAddress> rangeWithEndpoints = HashMultimap.create();
src/java/org/apache/cassandra/service/StorageService.java,2034,Multimap<InetAddress, Range> workMap = BootStrapper.getWorkMap(rangesToFetchWithPreferredEndpoints);
src/java/org/apache/cassandra/service/StorageService.java,2160,Multimap<Range, InetAddress> changedRanges = getChangedRangesForLeaving(table, endpoint);
src/java/org/apache/cassandra/service/StorageService.java,2444,Multimap<Range, InetAddress> rangesWithEndpoints = rangesToStreamByTable.get(table);
src/java/org/apache/cassandra/service/StorageService.java,2452,final Set<Map.Entry<Range, InetAddress>> pending = new HashSet<Map.Entry<Range, InetAddress>>(rangesWithEndpoints.entries());
src/java/org/apache/cassandra/service/StorageService.java,2456,final Range range = entry.getKey();
src/java/org/apache/cassandra/service/StorageService.java,2496,Multimap<InetAddress, Range> endpointWithRanges = ranges.get(table);
src/java/org/apache/cassandra/service/StorageService.java,2509,Collection<Range> toFetch = endpointWithRanges.get(source);
src/java/org/apache/cassandra/service/StorageService.java,2548,Set<Range> toStream = new HashSet<Range>();
src/java/org/apache/cassandra/service/StorageService.java,2549,Set<Range> toFetch  = new HashSet<Range>();
src/java/org/apache/cassandra/service/StorageService.java,2553,Range r1 = current.next();
src/java/org/apache/cassandra/service/StorageService.java,2554,Range r2 = updated.next();
src/java/org/apache/cassandra/service/StorageService.java,2567,if (Range.compare(r1.left, r2.left) < 0) // if A < C
src/java/org/apache/cassandra/service/StorageService.java,2569,toStream.add(new Range(r1.left, r2.left)); // seed (A, C]
src/java/org/apache/cassandra/service/StorageService.java,2572,if (Range.compare(r1.right, r2.right) > 0) // if B > D
src/java/org/apache/cassandra/service/StorageService.java,2574,toStream.add(new Range(r2.right, r1.right)); // seed (D, B]
src/java/org/apache/cassandra/service/StorageService.java,2585,return new Pair<Set<Range>, Set<Range>>(toStream, toFetch);
src/java/org/apache/cassandra/service/StorageService.java,2601,Range range = entry.getKey();
src/java/org/apache/cassandra/service/StorageServiceMBean.java,119,public Map<Range, List<String>> getRangeToEndpointMap(String keyspace);
src/java/org/apache/cassandra/service/StorageServiceMBean.java,126,public Map<Range, List<String>> getPendingRangeToEndpointMap(String keyspace);
src/java/org/apache/cassandra/streaming/StreamRequestMessage.java,67,protected final Collection<Range> ranges;
src/java/org/apache/cassandra/streaming/StreamRequestMessage.java,147,AbstractBounds.serializer().serialize(range, dos);
src/java/org/apache/cassandra/streaming/StreamRequestMessage.java,168,List<Range> ranges = (size == 0) ? null : new ArrayList<Range>();
src/java/org/apache/cassandra/streaming/StreamRequestMessage.java,171,ranges.add((Range) AbstractBounds.serializer().deserialize(dis));
src/java/org/apache/cassandra/thrift/CassandraServer.java,620,AbstractBounds bounds;
src/java/org/apache/cassandra/thrift/CassandraServer.java,626,bounds = new Range(left, right);
src/java/org/apache/cassandra/thrift/CassandraServer.java,630,bounds = new Bounds(p.getToken(range.start_key), p.getToken(range.end_key));
src/java/org/apache/cassandra/thrift/CassandraServer.java,736,Range range = entry.getKey();
src/java/org/apache/cassandra/thrift/CassandraServer.java,769,List<Token> tokens = StorageService.instance.getSplits(state().getKeyspace(), cfName, new Range(tf.fromString(start_token), tf.fromString(end_token)), keys_per_split);
src/java/org/apache/cassandra/tools/BulkLoader.java,203,Range range = new Range(tkFactory.fromString(tr.start_token), tkFactory.fromString(tr.end_token));
src/java/org/apache/cassandra/utils/MerkleTree.java,79,public transient Range fullRange;
src/java/org/apache/cassandra/utils/MerkleTree.java,371,return hashHelper(root, new Range(fullRange.left, fullRange.right), range);
src/java/org/apache/cassandra/utils/MerkleTree.java,382,private byte[] hashHelper(Hashable hashable, Range active, Range range) throws StopRecursion
src/java/org/apache/cassandra/utils/MerkleTree.java,394,Range leftactive = new Range(active.left, node.token);
src/java/org/apache/cassandra/utils/MerkleTree.java,395,Range rightactive = new Range(node.token, active.right);
src/java/org/apache/cassandra/utils/MerkleTree.java,505,public static class TreeRange extends Range
src/java/org/apache/cassandra/config/EncryptionOptions.java,31,public String[] cipherSuites = {"TLS_RSA_WITH_AES_128_CBC_SHA", "TLS_RSA_WITH_AES_256_CBC_SHA"};
src/java/org/apache/cassandra/security/SSLFactory.java,45,private static final String PROTOCOL = "TLS";
src/java/org/apache/cassandra/security/SSLFactory.java,46,private static final String ALGORITHM = "SunX509";
src/java/org/apache/cassandra/security/SSLFactory.java,47,private static final String STORE_TYPE = "JKS";
src/java/org/apache/cassandra/security/SSLFactory.java,55,serverSocket.setEnabledCipherSuites(options.cipherSuites);
src/java/org/apache/cassandra/security/SSLFactory.java,65,socket.setEnabledCipherSuites(options.cipherSuites);
src/java/org/apache/cassandra/security/SSLFactory.java,74,socket.setEnabledCipherSuites(options.cipherSuites);
src/java/org/apache/cassandra/security/SSLFactory.java,81,ctx = SSLContext.getInstance(PROTOCOL);
src/java/org/apache/cassandra/security/SSLFactory.java,85,tmf = TrustManagerFactory.getInstance(ALGORITHM);
src/java/org/apache/cassandra/security/SSLFactory.java,86,KeyStore ts = KeyStore.getInstance(STORE_TYPE);
src/java/org/apache/cassandra/security/SSLFactory.java,90,kmf = KeyManagerFactory.getInstance(ALGORITHM);
src/java/org/apache/cassandra/security/SSLFactory.java,91,KeyStore ks = KeyStore.getInstance(STORE_TYPE);
src/java/org/apache/cassandra/service/StorageService.java,407,mutationStage.shutdown();
src/java/org/apache/cassandra/service/StorageService.java,408,mutationStage.awaitTermination(1, TimeUnit.SECONDS);
src/java/org/apache/cassandra/service/StorageService.java,409,CommitLog.instance.shutdownBlocking();
src/java/org/apache/cassandra/db/RowMutationVerbHandler.java,89,message.removeHeader(RowMutation.FORWARD_HEADER);
src/java/org/apache/cassandra/db/RowMutationVerbHandler.java,109,MessagingService.instance().sendOneWay(message, address);
src/java/org/apache/cassandra/net/Header.java,50,protected Map<String, byte[]> details_ = new Hashtable<String, byte[]>();
src/java/org/apache/cassandra/net/Header.java,63,this(from, verb);
src/java/org/apache/cassandra/net/Header.java,64,details_ = details;
src/java/org/apache/cassandra/net/Header.java,84,details_.put(key, value);
src/java/org/apache/cassandra/net/Header.java,89,details_.remove(key);
src/java/org/apache/cassandra/net/Message.java,71,header_.setDetail(key, value);
src/java/org/apache/cassandra/net/Message.java,76,header_.removeDetail(key);
src/java/org/apache/cassandra/service/StorageProxy.java,276,addHintHeader(hintedMessage, target);
src/java/org/apache/cassandra/service/StorageProxy.java,307,message.removeHeader(RowMutation.FORWARD_HEADER);
src/java/org/apache/cassandra/service/StorageProxy.java,325,ByteArrayOutputStream bos = new ByteArrayOutputStream();
src/java/org/apache/cassandra/service/StorageProxy.java,326,DataOutputStream dos = new DataOutputStream(bos);
src/java/org/apache/cassandra/service/StorageProxy.java,329,byte[] previousHints = message.getHeader(RowMutation.FORWARD_HEADER);
src/java/org/apache/cassandra/service/StorageProxy.java,331,dos.write(previousHints);
src/java/org/apache/cassandra/service/StorageProxy.java,334,message.setHeader(RowMutation.FORWARD_HEADER, bos.toByteArray());
src/java/org/apache/cassandra/service/StorageProxy.java,343,private static void addHintHeader(Message message, InetAddress target) throws IOException
src/java/org/apache/cassandra/service/StorageProxy.java,353,message.setHeader(RowMutation.HINT, bos.toByteArray());
src/java/org/apache/cassandra/db/RowMutationVerbHandler.java,22,import java.io.DataInputStream;
src/java/org/apache/cassandra/db/RowMutationVerbHandler.java,26,import java.nio.ByteBuffer;
src/java/org/apache/cassandra/db/RowMutationVerbHandler.java,34,import org.apache.cassandra.utils.ByteBufferUtil;
src/java/org/apache/cassandra/db/RowMutation.java,234,return makeRowMutationMessage(StorageService.Verb.MUTATION, version);
src/java/org/apache/cassandra/db/RowMutation.java,237,public Message makeRowMutationMessage(StorageService.Verb verb, int version) throws IOException
src/java/org/apache/cassandra/service/RowRepairResolver.java,115,repairMessage = rowMutation.getMessage(Gossiper.instance.getVersion(endpoints.get(i)));
src/java/org/apache/cassandra/db/EchoedRow.java,39,private final int gcBefore;
src/java/org/apache/cassandra/db/EchoedRow.java,45,this.gcBefore = controller.gcBefore;
src/java/org/apache/cassandra/db/EchoedRow.java,65,return !row.hasNext() && ColumnFamilyStore.removeDeletedCF(row.getColumnFamily(), gcBefore) == null;
src/java/org/apache/cassandra/db/compaction/CompactionController.java,34,import org.apache.cassandra.utils.ByteBufferUtil;
src/java/org/apache/cassandra/db/compaction/CompactionController.java,128,return new EchoedRow(this, rows.get(0));
src/java/org/apache/cassandra/db/compaction/LazilyCompactedRow.java,149,boolean cfIrrelevant = ColumnFamilyStore.removeDeletedCF(emptyColumnFamily, controller.gcBefore) == null;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,48,private final int gcBefore;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,55,this.gcBefore = Integer.MAX_VALUE;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,74,gcBefore = controller.gcBefore;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,136,return compactedCf == null || ColumnFamilyStore.removeDeletedCF(compactedCf, gcBefore) == null;
src/java/org/apache/cassandra/gms/FailureDetector.java,50,private List<IFailureDetectionEventListener> fdEvntListeners_ = new ArrayList<IFailureDetectionEventListener>();
src/java/org/apache/cassandra/cli/CliClient.java,1856,e.printStackTrace();
src/java/org/apache/cassandra/cli/CliMain.java,84,e.printStackTrace();
src/java/org/apache/cassandra/cli/CliMain.java,164,e.printStackTrace();
src/java/org/apache/cassandra/cli/CliOptions.java,70,options.addOption(null, DEBUG_OPTION,   "display stack traces");
src/java/org/apache/cassandra/dht/RandomPartitioner.java,121,new BigInteger(token);
src/java/org/apache/cassandra/streaming/IncomingStreamReader.java,47,InetSocketAddress remoteAddress = (InetSocketAddress)socket.getRemoteSocketAddress();
src/java/org/apache/cassandra/streaming/IncomingStreamReader.java,48,session = StreamInSession.get(remoteAddress.getAddress(), header.sessionId);
src/java/org/apache/cassandra/streaming/StreamHeader.java,99,return new StreamHeader(table, sessionId, file, pendingFiles);
src/java/org/apache/cassandra/locator/Ec2Snitch.java,86,return Gossiper.instance.getEndpointStateForEndpoint(endpoint).getApplicationState(ApplicationState.RACK).value;
src/java/org/apache/cassandra/locator/Ec2Snitch.java,93,return Gossiper.instance.getEndpointStateForEndpoint(endpoint).getApplicationState(ApplicationState.DC).value;
src/java/org/apache/cassandra/db/DataTracker.java,281,liveSize.addAndGet(-sstable.bytesOnDisk());
src/java/org/apache/cassandra/cql/UpdateStatement.java,221,value *= -1;
src/java/org/apache/cassandra/db/RowMutation.java,400,return deserialize(dis, version, true);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,272,rm = RowMutation.serializer().deserialize(new DataInputStream(bufIn), MessagingService.version_, false);
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,51,public final boolean fromRemote;
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,90,this(sstable.metadata, file, key, dataStart, dataSize, checkData, sstable, false);
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,96,this(metadata, file, key, dataStart, dataSize, false, null, fromRemote);
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,108,this.fromRemote = fromRemote;
src/java/org/apache/cassandra/io/util/ColumnSortedMap.java,47,private final boolean fromRemote;
src/java/org/apache/cassandra/io/util/ColumnSortedMap.java,57,this.fromRemote = fromRemote;
src/java/org/apache/cassandra/io/util/ColumnSortedMap.java,158,private boolean fromRemote;
src/java/org/apache/cassandra/io/util/ColumnSortedMap.java,167,this.fromRemote = fromRemote;
src/java/org/apache/cassandra/io/util/ColumnSortedMap.java,241,private final boolean fromRemote;
src/java/org/apache/cassandra/io/util/ColumnSortedMap.java,252,this.fromRemote = fromRemote;
src/java/org/apache/cassandra/service/StorageService.java,196,private volatile boolean efficientCrossDCWrites;
src/java/org/apache/cassandra/service/StorageService.java,726,case RELEASE_VERSION:
src/java/org/apache/cassandra/service/StorageService.java,727,updateEfficientCrossDCWriteMode();
src/java/org/apache/cassandra/service/StorageService.java,728,break;
src/java/org/apache/cassandra/service/StorageService.java,758,VersionedValue version = entry.getValue().getApplicationState(ApplicationState.RELEASE_VERSION);
src/java/org/apache/cassandra/service/StorageService.java,763,efficientCrossDCWrites = false;
src/java/org/apache/cassandra/service/StorageService.java,764,return;
src/java/org/apache/cassandra/service/StorageService.java,767,efficientCrossDCWrites = true;
src/java/org/apache/cassandra/service/StorageService.java,2381,return efficientCrossDCWrites;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,32,import javax.management.MBeanServer;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,33,import javax.management.ObjectName;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,399,MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,400,ObjectName nameObj = new ObjectName(mbeanName);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,402,mbs.unregisterMBean(nameObj);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1110,data.removeAllSSTables();
src/java/org/apache/cassandra/db/Table.java,343,cfs.removeAllSSTables();
src/java/org/apache/cassandra/db/Table.java,361,cfs.unregisterMBean();
src/java/org/apache/cassandra/service/ReadCallback.java,184,case ANY:
src/java/org/apache/cassandra/thrift/CassandraServer.java,118,throw new InvalidRequestException("Consistency level any may not be applied to read operations");
src/java/org/apache/cassandra/db/CounterColumn.java,228,ByteBuffer bb = contextManager.computeOldShardMerger(value(), NodeId.getOldLocalNodeIds());
src/java/org/apache/cassandra/db/CounterColumn.java,256,CounterColumn cleaned = ((CounterColumn) c).removeOldShards(gcBefore);
src/java/org/apache/cassandra/db/CounterColumn.java,273,CounterColumn cleaned = ((CounterColumn) subColumn).removeOldShards(gcBefore);
src/java/org/apache/cassandra/db/CounterMutation.java,109,row = mergeOldShards(readCommand.table, row);
src/java/org/apache/cassandra/db/CounterMutation.java,124,private Row mergeOldShards(String table, Row row) throws IOException
src/java/org/apache/cassandra/db/CounterMutation.java,126,ColumnFamily cf = row.cf;
src/java/org/apache/cassandra/db/CounterMutation.java,130,ColumnFamily merger = computeShardMerger(cf);
src/java/org/apache/cassandra/db/CounterMutation.java,133,RowMutation localMutation = new RowMutation(table, row.key.key);
src/java/org/apache/cassandra/db/CounterMutation.java,134,localMutation.add(merger);
src/java/org/apache/cassandra/db/CounterMutation.java,135,localMutation.apply();
src/java/org/apache/cassandra/db/CounterMutation.java,137,cf.addAll(merger);
src/java/org/apache/cassandra/db/CounterMutation.java,140,return row;
src/java/org/apache/cassandra/db/CounterMutation.java,145,ColumnFamily merger = null;
src/java/org/apache/cassandra/db/CounterMutation.java,153,continue;
src/java/org/apache/cassandra/db/CounterMutation.java,154,IColumn c = ((CounterColumn)column).computeOldShardMerger();
src/java/org/apache/cassandra/db/CounterMutation.java,158,merger = cf.cloneMeShallow();
src/java/org/apache/cassandra/db/CounterMutation.java,159,merger.addColumn(c);
src/java/org/apache/cassandra/db/CounterMutation.java,163,else // CF type: super
src/java/org/apache/cassandra/db/CounterMutation.java,167,IColumn mergerSuper = null;
src/java/org/apache/cassandra/db/CounterMutation.java,171,continue;
src/java/org/apache/cassandra/db/CounterMutation.java,172,IColumn c = ((CounterColumn)column).computeOldShardMerger();
src/java/org/apache/cassandra/db/CounterMutation.java,176,mergerSuper = ((SuperColumn)superColumn).cloneMeShallow();
src/java/org/apache/cassandra/db/CounterMutation.java,177,mergerSuper.addColumn(c);
src/java/org/apache/cassandra/db/CounterMutation.java,183,merger = cf.cloneMeShallow();
src/java/org/apache/cassandra/db/CounterMutation.java,184,merger.addColumn(mergerSuper);
src/java/org/apache/cassandra/db/CounterMutation.java,188,return merger;
src/java/org/apache/cassandra/db/compaction/LazilyCompactedRow.java,205,ColumnFamily purged = PrecompactedRow.removeDeletedAndOldShards(shouldPurge, controller, container);
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,60,return removeDeletedAndOldShards(controller.shouldPurge(key), controller, cf);
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,67,CounterColumn.removeOldShards(compacted, controller.gcBefore);
src/java/org/apache/cassandra/db/context/CounterContext.java,74,private static final long MIN_MERGE_DELAY = 5 * 60 * 1000; // should be aplenty
src/java/org/apache/cassandra/db/context/CounterContext.java,514,if (oldIds.size() < 2
src/java/org/apache/cassandra/db/context/CounterContext.java,515,|| now - oldIds.get(0).timestamp < MIN_MERGE_DELAY
src/java/org/apache/cassandra/db/context/CounterContext.java,516,|| now - oldIds.get(1).timestamp < MIN_MERGE_DELAY
src/java/org/apache/cassandra/db/context/CounterContext.java,518,return null;
src/java/org/apache/cassandra/db/context/CounterContext.java,521,NodeId.NodeIdRecord currRecord = recordIterator.next();
src/java/org/apache/cassandra/db/context/CounterContext.java,529,return context;
src/java/org/apache/cassandra/db/context/CounterContext.java,531,assert !currRecord.id.equals(NodeId.getLocalId());
src/java/org/apache/cassandra/db/context/CounterContext.java,533,int c = state.getNodeId().compareTo(currRecord.id);
src/java/org/apache/cassandra/db/context/CounterContext.java,540,return null;
src/java/org/apache/cassandra/db/context/CounterContext.java,542,foundState = state.duplicate();
src/java/org/apache/cassandra/db/context/CounterContext.java,543,currRecord = recordIterator.hasNext() ? recordIterator.next() : null;
src/java/org/apache/cassandra/db/context/CounterContext.java,544,state.moveToNext();
src/java/org/apache/cassandra/db/context/CounterContext.java,546,else
src/java/org/apache/cassandra/db/context/CounterContext.java,548,assert !foundState.getNodeId().equals(state.getNodeId());
src/java/org/apache/cassandra/db/context/CounterContext.java,551,int nbDelta = foundState.isDelta() ? 1 : 0;
src/java/org/apache/cassandra/db/context/CounterContext.java,552,nbDelta += state.isDelta() ? 1 : 0;
src/java/org/apache/cassandra/db/context/CounterContext.java,553,ContextState merger = ContextState.allocate(2, nbDelta);
src/java/org/apache/cassandra/db/context/CounterContext.java,555,long fclock = foundState.getClock();
src/java/org/apache/cassandra/db/context/CounterContext.java,556,long fcount = foundState.getCount();
src/java/org/apache/cassandra/db/context/CounterContext.java,557,long clock = state.getClock();
src/java/org/apache/cassandra/db/context/CounterContext.java,558,long count = state.getCount();
src/java/org/apache/cassandra/db/context/CounterContext.java,561,merger.writeElement(foundState.getNodeId(), -now - fclock, -fcount, true);
src/java/org/apache/cassandra/db/context/CounterContext.java,562,else
src/java/org/apache/cassandra/db/context/CounterContext.java,563,merger.writeElement(foundState.getNodeId(), -now, 0);
src/java/org/apache/cassandra/db/context/CounterContext.java,566,merger.writeElement(state.getNodeId(), fclock + clock, fcount, true);
src/java/org/apache/cassandra/db/context/CounterContext.java,567,else
src/java/org/apache/cassandra/db/context/CounterContext.java,568,merger.writeElement(state.getNodeId(), fclock + clock, fcount + count);
src/java/org/apache/cassandra/db/context/CounterContext.java,570,return merger.context;
src/java/org/apache/cassandra/db/context/CounterContext.java,573,else if (c < 0) // nodeid < record
src/java/org/apache/cassandra/db/context/CounterContext.java,575,state.moveToNext();
src/java/org/apache/cassandra/db/context/CounterContext.java,577,else // c > 0, nodeid > record
src/java/org/apache/cassandra/db/context/CounterContext.java,579,currRecord = recordIterator.hasNext() ? recordIterator.next() : null;
src/java/org/apache/cassandra/db/context/CounterContext.java,582,return null;
src/java/org/apache/cassandra/db/context/CounterContext.java,595,int removedBodySize = 0, removedHeaderSize = 0;
src/java/org/apache/cassandra/db/context/CounterContext.java,596,boolean forceFixing = false;
src/java/org/apache/cassandra/db/context/CounterContext.java,602,removedBodySize += STEP_LENGTH;
src/java/org/apache/cassandra/db/context/CounterContext.java,604,removedHeaderSize += HEADER_ELT_LENGTH;
src/java/org/apache/cassandra/db/context/CounterContext.java,608,forceFixing = true;
src/java/org/apache/cassandra/db/context/CounterContext.java,616,int newSize = context.remaining() - removedHeaderSize - removedBodySize;
src/java/org/apache/cassandra/db/context/CounterContext.java,623,long toAddBack = 0;
src/java/org/apache/cassandra/db/context/CounterContext.java,633,throw new RuntimeException("Merged counter shard with a count != 0 (likely due to #2968). You need to restart this node with -Dcassandra.renew_counter_id=true to fix.");
src/java/org/apache/cassandra/db/context/CounterContext.java,636,logger.info("Collectable old shard with a count != 0. Will fix.");
src/java/org/apache/cassandra/db/context/CounterContext.java,637,cleaned.writeElement(state.getNodeId(), clock - 1L, 0, true);
src/java/org/apache/cassandra/db/context/CounterContext.java,638,toAddBack += state.getCount();
src/java/org/apache/cassandra/db/context/CounterContext.java,640,else
src/java/org/apache/cassandra/db/context/CounterContext.java,642,state.copyTo(cleaned);
src/java/org/apache/cassandra/db/context/CounterContext.java,647,return toAddBack == 0 ? cleanedContext : merge(cleanedContext, create(toAddBack));
src/java/org/apache/cassandra/service/StorageProxy.java,1108,private interface WritePerformer
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,238,rows = null;
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,239,return;
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,244,.setEnd_token(split.getEndToken());
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,245,try
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,247,rows = client.get_range_slices(new ColumnParent(cfName),
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,248,predicate,
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,249,keyRange,
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,250,consistencyLevel);
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,269,throw new RuntimeException(e);
src/java/org/apache/cassandra/cli/CliClient.java,1707,? cfDef.subcomparator_type
src/java/org/apache/cassandra/cli/CliClient.java,1708,: cfDef.comparator_type);
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,1164,List<SSTableReader> truncatedSSTables = new ArrayList<SSTableReader>();
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,1168,truncatedSSTables.add(sstable);
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,1170,cfs.markCompacted(truncatedSSTables);
src/java/org/apache/cassandra/locator/TokenMetadata.java,54,private BiMap<Token, InetAddress> bootstrapTokens = HashBiMap.create();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,29,import java.util.concurrent.locks.Lock;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,30,import java.util.concurrent.locks.ReentrantLock;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,126,private boolean invalid = false;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,161,public final Lock flushLock = new ReentrantLock();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,398,invalid = true;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1105,return invalid;
src/java/org/apache/cassandra/db/DataTracker.java,280,sstable.markCompacted();
src/java/org/apache/cassandra/db/Memtable.java,265,cfs.flushLock.lock();
src/java/org/apache/cassandra/db/Memtable.java,266,try
src/java/org/apache/cassandra/db/Memtable.java,270,SSTableReader sstable = writeSortedContents(context);
src/java/org/apache/cassandra/db/Memtable.java,271,cfs.replaceFlushed(Memtable.this, sstable);
src/java/org/apache/cassandra/db/Memtable.java,274,finally
src/java/org/apache/cassandra/db/Memtable.java,276,cfs.flushLock.unlock();
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,115,return 0;
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,194,return this;
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,240,return this;
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,292,return this;
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,387,return this;
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,468,doValidationCompaction(cfStore, validator);
src/java/org/apache/cassandra/db/migration/DropColumnFamily.java,86,CompactionManager.instance.getCompactionLock().lock();
src/java/org/apache/cassandra/db/migration/DropColumnFamily.java,87,cfs.flushLock.lock();
src/java/org/apache/cassandra/db/migration/DropColumnFamily.java,88,try
src/java/org/apache/cassandra/db/migration/DropColumnFamily.java,92,finally
src/java/org/apache/cassandra/db/migration/DropColumnFamily.java,94,cfs.flushLock.unlock();
src/java/org/apache/cassandra/db/migration/DropColumnFamily.java,95,CompactionManager.instance.getCompactionLock().unlock();
src/java/org/apache/cassandra/db/migration/DropKeyspace.java,55,CompactionManager.instance.getCompactionLock().lock();
src/java/org/apache/cassandra/db/migration/DropKeyspace.java,56,try
src/java/org/apache/cassandra/db/migration/DropKeyspace.java,67,cfs.snapshot(snapshotName);
src/java/org/apache/cassandra/db/migration/DropKeyspace.java,68,cfs.flushLock.lock();
src/java/org/apache/cassandra/db/migration/DropKeyspace.java,69,try
src/java/org/apache/cassandra/db/migration/DropKeyspace.java,73,finally
src/java/org/apache/cassandra/db/migration/DropKeyspace.java,75,cfs.flushLock.unlock();
src/java/org/apache/cassandra/db/migration/DropKeyspace.java,86,finally
src/java/org/apache/cassandra/db/migration/DropKeyspace.java,88,CompactionManager.instance.getCompactionLock().unlock();
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,638,throw new IOException("Unable to create compaction marker");
src/java/org/apache/cassandra/service/StorageService.java,194,private String operationMode;
src/java/org/apache/cassandra/service/StorageService.java,218,setMode("Normal", false);
src/java/org/apache/cassandra/service/StorageService.java,352,setMode("Client", false);
src/java/org/apache/cassandra/service/StorageService.java,543,public void setCompactionThroughputMbPerSec(int value) {
src/java/org/apache/cassandra/service/StorageService.java,551,logger_.info(m);
src/java/org/apache/cassandra/service/StorageService.java,553,logger_.debug(m);
src/java/org/apache/cassandra/service/StorageService.java,1871,setMode("Leaving: sleeping " + RING_DELAY + " ms for pending range setup", true);
src/java/org/apache/cassandra/service/StorageService.java,1881,setMode("Decommissioned", true);
src/java/org/apache/cassandra/service/StorageService.java,1920,setMode("Leaving: streaming data to other nodes", true);
src/java/org/apache/cassandra/service/StorageService.java,2054,setMode("Moving: fetching new ranges and streaming old ranges", true);
src/java/org/apache/cassandra/service/StorageService.java,2253,return operationMode;
src/java/org/apache/cassandra/service/StorageService.java,2270,setMode("Starting drain process", true);
src/java/org/apache/cassandra/service/StorageService.java,2272,setMode("Draining: shutting down MessageService", false);
src/java/org/apache/cassandra/service/StorageService.java,2277,setMode("Draining: clearing mutation stage", false);
src/java/org/apache/cassandra/service/StorageService.java,2282,setMode("Draining: flushing column families", false);
src/java/org/apache/cassandra/service/StorageService.java,2304,setMode("Node is drained", true);
src/java/org/apache/cassandra/db/HintedHandOffManager.java,96,private static final String SEPARATOR = "-";
src/java/org/apache/cassandra/db/HintedHandOffManager.java,194,rm.apply();
src/java/org/apache/cassandra/utils/BloomFilterSerializer.java,35,long[] bits = bf.bitset.getBits();
src/java/org/apache/cassandra/utils/BloomFilterSerializer.java,36,int bitLength = bits.length;
src/java/org/apache/cassandra/utils/BloomFilterSerializer.java,42,dos.writeLong(bits[i]);
src/java/org/apache/cassandra/utils/BloomFilterSerializer.java,48,int bitLength = dis.readInt();
src/java/org/apache/cassandra/utils/BloomFilterSerializer.java,49,long[] bits = new long[bitLength];
src/java/org/apache/cassandra/utils/BloomFilterSerializer.java,51,bits[i] = dis.readLong();
src/java/org/apache/cassandra/utils/BloomFilterSerializer.java,52,OpenBitSet bs = new OpenBitSet(bits, bitLength);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,76,public class OpenBitSet implements Cloneable, Serializable {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,77,protected long[] bits;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,84,public OpenBitSet(long numBits) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,85,bits = new long[bits2words(numBits)];
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,86,wlen = bits.length;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,106,public OpenBitSet(long[] bits, int numWords) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,107,this.bits = bits;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,108,this.wlen = numWords;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,119,public long capacity() { return bits.length << 6; }
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,130,public int length() {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,131,return bits.length << 6;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,138,public long[] getBits() { return bits; }
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,141,public void setBits(long[] bits) { this.bits = bits; }
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,147,public void setNumWords(int nWords) { this.wlen=nWords; }
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,156,if (i>=bits.length) return false;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,160,return (bits[i] & bitmask) != 0;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,173,return (bits[i] & bitmask) != 0;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,182,if (i>=bits.length) return false;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,185,return (bits[i] & bitmask) != 0;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,195,return (bits[i] & bitmask) != 0;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,200,public boolean get1(int index) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,201,int i = index >> 6;                // div 64
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,202,int bit = index & 0x3f;            // mod 64
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,203,return ((bits[i]>>>bit) & 0x01) != 0;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,217,return ((int)(bits[i]>>>bit)) & 0x01;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,222,public boolean get2(int index) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,223,int word = index >> 6;            // div 64
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,224,int bit = index & 0x0000003f;     // mod 64
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,225,return (bits[word] << bit) < 0;   // hmmm, this would work if bit order were reversed
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,235,bits[wordNum] |= bitmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,246,bits[wordNum] |= bitmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,256,bits[wordNum] |= bitmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,277,bits[startWord] |= (startmask & endmask);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,281,bits[startWord] |= startmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,282,Arrays.fill(bits, startWord+1, endWord, -1L);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,283,bits[endWord] |= endmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,305,bits[wordNum] &= ~bitmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,322,bits[wordNum] &= ~bitmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,331,bits[wordNum] &= ~bitmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,357,bits[startWord] &= (startmask | endmask);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,361,bits[startWord] &= startmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,364,Arrays.fill(bits, startWord+1, middle, 0L);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,366,bits[endWord] &= endmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,394,bits[startWord] &= (startmask | endmask);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,395,return;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,398,bits[startWord] &= startmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,401,Arrays.fill(bits, startWord+1, middle, 0L);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,403,bits[endWord] &= endmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,416,boolean val = (bits[wordNum] & bitmask) != 0;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,417,bits[wordNum] |= bitmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,428,boolean val = (bits[wordNum] & bitmask) != 0;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,429,bits[wordNum] |= bitmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,440,bits[wordNum] ^= bitmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,450,bits[wordNum] ^= bitmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,458,bits[wordNum] ^= bitmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,468,bits[wordNum] ^= bitmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,469,return (bits[wordNum] & bitmask) != 0;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,479,bits[wordNum] ^= bitmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,480,return (bits[wordNum] & bitmask) != 0;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,507,bits[startWord] ^= (startmask & endmask);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,511,bits[startWord] ^= startmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,514,bits[i] = ~bits[i];
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,517,bits[endWord] ^= endmask;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,522,public static int pop(long v0, long v1, long v2, long v3) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,526,long twosA=v0 & v1;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,527,long ones=v0^v1;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,529,long u2=ones^v2;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,530,long twosB =(ones&v2)|(u2&v3);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,531,ones=u2^v3;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,533,long fours=(twosA&twosB);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,534,long twos=twosA^twosB;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,538,+ pop(ones);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,545,public long cardinality() {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,546,return BitUtil.pop_array(bits,0,wlen);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,552,public static long intersectionCount(OpenBitSet a, OpenBitSet b) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,553,return BitUtil.pop_intersect(a.bits, b.bits, 0, Math.min(a.wlen, b.wlen));
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,559,public static long unionCount(OpenBitSet a, OpenBitSet b) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,560,long tot = BitUtil.pop_union(a.bits, b.bits, 0, Math.min(a.wlen, b.wlen));
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,561,if (a.wlen < b.wlen) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,562,tot += BitUtil.pop_array(b.bits, a.wlen, b.wlen-a.wlen);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,564,tot += BitUtil.pop_array(a.bits, b.wlen, a.wlen-b.wlen);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,566,return tot;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,573,public static long andNotCount(OpenBitSet a, OpenBitSet b) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,574,long tot = BitUtil.pop_andnot(a.bits, b.bits, 0, Math.min(a.wlen, b.wlen));
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,575,if (a.wlen > b.wlen) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,576,tot += BitUtil.pop_array(a.bits, b.wlen, a.wlen-b.wlen);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,578,return tot;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,584,public static long xorCount(OpenBitSet a, OpenBitSet b) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,585,long tot = BitUtil.pop_xor(a.bits, b.bits, 0, Math.min(a.wlen, b.wlen));
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,586,if (a.wlen < b.wlen) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,587,tot += BitUtil.pop_array(b.bits, a.wlen, b.wlen-a.wlen);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,589,tot += BitUtil.pop_array(a.bits, b.wlen, a.wlen-b.wlen);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,591,return tot;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,602,long word = bits[i] >> subIndex;  // skip all the bits to the right of index
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,609,word = bits[i];
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,623,long word = bits[i] >>> subIndex;  // skip all the bits to the right of index
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,630,word = bits[i];
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,641,public Object clone() {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,642,try {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,643,OpenBitSet obs = (OpenBitSet)super.clone();
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,644,obs.bits = obs.bits.clone();  // hopefully an array clone is as fast(er) than arraycopy
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,645,return obs;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,647,throw new RuntimeException(e);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,654,long[] thisArr = this.bits;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,655,long[] otherArr = other.bits;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,659,thisArr[pos] &= otherArr[pos];
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,663,Arrays.fill(bits,newLen,this.wlen,0);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,669,public void union(OpenBitSet other) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,670,int newLen = Math.max(wlen,other.wlen);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,671,ensureCapacityWords(newLen);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,673,long[] thisArr = this.bits;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,674,long[] otherArr = other.bits;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,675,int pos=Math.min(wlen,other.wlen);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,676,while(--pos>=0) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,677,thisArr[pos] |= otherArr[pos];
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,679,if (this.wlen < newLen) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,680,System.arraycopy(otherArr, this.wlen, thisArr, this.wlen, newLen-this.wlen);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,682,this.wlen = newLen;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,687,public void remove(OpenBitSet other) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,688,int idx = Math.min(wlen,other.wlen);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,689,long[] thisArr = this.bits;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,690,long[] otherArr = other.bits;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,691,while(--idx>=0) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,692,thisArr[idx] &= ~otherArr[idx];
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,697,public void xor(OpenBitSet other) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,698,int newLen = Math.max(wlen,other.wlen);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,699,ensureCapacityWords(newLen);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,701,long[] thisArr = this.bits;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,702,long[] otherArr = other.bits;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,703,int pos=Math.min(wlen,other.wlen);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,704,while(--pos>=0) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,705,thisArr[pos] ^= otherArr[pos];
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,707,if (this.wlen < newLen) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,708,System.arraycopy(otherArr, this.wlen, thisArr, this.wlen, newLen-this.wlen);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,710,this.wlen = newLen;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,722,public void or(OpenBitSet other) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,723,union(other);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,727,public void andNot(OpenBitSet other) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,728,remove(other);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,732,public boolean intersects(OpenBitSet other) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,733,int pos = Math.min(this.wlen, other.wlen);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,734,long[] thisArr = this.bits;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,735,long[] otherArr = other.bits;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,736,while (--pos>=0) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,737,if ((thisArr[pos] & otherArr[pos])!=0) return true;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,739,return false;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,747,public void ensureCapacityWords(int numWords) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,748,if (bits.length < numWords) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,749,bits = ArrayUtil.grow(bits, numWords);
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,765,while (idx>=0 && bits[idx]==0) idx--;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,791,if (a.bits[i]!=0) return false;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,795,if (a.bits[i] != b.bits[i]) return false;
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,807,for (int i = bits.length; --i>=0;) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,808,h ^= bits[i];
src/java/org/apache/cassandra/service/StorageProxy.java,789,logger.debug("Received schema check response from " + message.getFrom().getHostAddress());
src/java/org/apache/cassandra/service/StorageProxy.java,820,logger.debug("My version is " + myVersion);
src/java/org/apache/cassandra/service/StorageProxy.java,840,logger.debug("Hosts not in agreement. Didn't get a response from everybody: " + StringUtils.join(results.get(UNREACHABLE), ","));
src/java/org/apache/cassandra/service/StorageProxy.java,847,logger.debug("%s disagrees (%s)", host, entry.getKey());
src/java/org/apache/cassandra/service/StorageProxy.java,865,logger.debug("restricted single token match for query " + queryRange);
src/java/org/apache/cassandra/service/StorageProxy.java,889,logger.debug("restricted ranges for query " + queryRange + " are " + ranges);
src/java/org/apache/cassandra/service/StorageProxy.java,976,logger.debug("scan ranges are " + StringUtils.join(ranges, ","));
src/java/org/apache/cassandra/service/StorageProxy.java,1003,logger.debug("reading " + command + " from " + endpoint);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1339,SliceQueryFilter sliceFilter = (SliceQueryFilter) filter.filter;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1345,IColumn sc = cached.getColumn(filter.path.superColumnName);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1348,ColumnFamily cf = cached.cloneMeShallow();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1350,cf.addColumn(sc);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1351,return removeDeleted(cf, gcBefore);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1354,else
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1359,removeDeletedColumnsOnly(cached, gcBefore);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1360,return removeDeletedCF(cached, gcBefore);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1367,ColumnFamily cf = ci.getColumnFamily().cloneMeShallow();
src/java/org/apache/cassandra/gms/Gossiper.java,534,epState.setHasToken(true);
src/java/org/apache/cassandra/gms/Gossiper.java,539,logger.info("FatClient " + endpoint + " has been silent for " + FatClientTimeout + "ms, removing from gossip");
src/java/org/apache/cassandra/gms/Gossiper.java,540,removeEndpoint(endpoint); // will put it in justRemovedEndpoints to respect quarantine delay
src/java/org/apache/cassandra/gms/Gossiper.java,541,evictFromMembership(endpoint); // can get rid of the state immediately
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,499,CompactionController controller = new CompactionController(cfs, Collections.<SSTableReader>emptyList(), Integer.MAX_VALUE, true);
src/java/org/apache/cassandra/config/CFMetaData.java,842,def.key_validation_class = cfm.keyValidator.getClass().getName();
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,433,right--;
src/java/org/apache/cassandra/service/AntiEntropyService.java,280,assert request.range.contains(sample.token);
src/java/org/apache/cassandra/utils/UUIDGen.java,25,import java.net.UnknownHostException;
src/java/org/apache/cassandra/utils/UUIDGen.java,113,long lsb = instance.getClockSeqAndNode();
src/java/org/apache/cassandra/utils/UUIDGen.java,141,try
src/java/org/apache/cassandra/utils/UUIDGen.java,143,return getClockSeqAndNode(InetAddress.getLocalHost());
src/java/org/apache/cassandra/utils/UUIDGen.java,147,throw new RuntimeException(e);
src/java/org/apache/cassandra/net/MessagingService.java,612,logger_.info("{} {} messages dropped in server lifetime", recent, verb);
src/java/org/apache/cassandra/config/KSMetaData.java,44,this(name, strategyClass, strategyOptions, true, cfDefs);
src/java/org/apache/cassandra/config/KSMetaData.java,49,this.name = name;
src/java/org/apache/cassandra/config/KSMetaData.java,50,this.strategyClass = strategyClass == null ? NetworkTopologyStrategy.class : strategyClass;
src/java/org/apache/cassandra/config/KSMetaData.java,51,this.strategyOptions = strategyOptions;
src/java/org/apache/cassandra/config/KSMetaData.java,52,Map<String, CFMetaData> cfmap = new HashMap<String, CFMetaData>();
src/java/org/apache/cassandra/config/KSMetaData.java,54,cfmap.put(cfm.cfName, cfm);
src/java/org/apache/cassandra/config/KSMetaData.java,55,this.cfMetaData = Collections.unmodifiableMap(cfmap);
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,21,import java.io.*;
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,391,KSMetaData systemMeta = new KSMetaData(Table.SYSTEM_TABLE,
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,392,LocalStrategy.class,
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,393,KSMetaData.optsWithRF(1),
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,394,CFMetaData.StatusCf,
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,395,CFMetaData.HintsCf,
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,396,CFMetaData.MigrationsCf,
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,397,CFMetaData.SchemaCf,
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,398,CFMetaData.IndexCf,
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,399,CFMetaData.NodeIdCf);
src/java/org/apache/cassandra/config/KSMetaData.java,32,import org.apache.commons.lang.StringUtils;
src/java/org/apache/cassandra/config/KSMetaData.java,178,CFMetaData[] cfMetaData = new CFMetaData[cfsz];
src/java/org/apache/cassandra/config/KSMetaData.java,181,cfMetaData[i] = CFMetaData.inflate(cfiter.next());
src/java/org/apache/cassandra/config/KSMetaData.java,205,cfDefs);
src/java/org/apache/cassandra/db/migration/AddColumnFamily.java,5,import java.util.ArrayList;
src/java/org/apache/cassandra/db/migration/AddColumnFamily.java,6,import java.util.List;
src/java/org/apache/cassandra/db/migration/AddColumnFamily.java,7,import java.util.Map;
src/java/org/apache/cassandra/db/migration/AddColumnFamily.java,70,List<CFMetaData> newCfs = new ArrayList<CFMetaData>(ksm.cfMetaData().values());
src/java/org/apache/cassandra/db/migration/AddColumnFamily.java,71,newCfs.add(cfm);
src/java/org/apache/cassandra/db/migration/AddColumnFamily.java,72,return new KSMetaData(ksm.name, ksm.strategyClass, ksm.strategyOptions, newCfs.toArray(new CFMetaData[newCfs.size()]));
src/java/org/apache/cassandra/db/migration/DropColumnFamily.java,68,return new KSMetaData(ksm.name, ksm.strategyClass, ksm.strategyOptions, newCfs.toArray(new CFMetaData[newCfs.size()]));
src/java/org/apache/cassandra/db/Table.java,373,public void renameCf(Integer cfId, String newName) throws IOException
src/java/org/apache/cassandra/db/Table.java,375,assert columnFamilyStores.containsKey(cfId);
src/java/org/apache/cassandra/db/Table.java,376,ColumnFamilyStore cfs = columnFamilyStores.remove(cfId);
src/java/org/apache/cassandra/db/Table.java,377,unloadCf(cfs);
src/java/org/apache/cassandra/db/Table.java,378,cfs.renameSSTables(newName);
src/java/org/apache/cassandra/db/Table.java,379,initCf(cfId, newName);
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,1,package org.apache.cassandra.db.migration;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,3,import java.io.IOException;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,4,import java.util.ArrayList;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,5,import java.util.List;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,7,import org.apache.cassandra.config.CFMetaData;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,8,import org.apache.cassandra.config.ConfigurationException;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,9,import org.apache.cassandra.config.DatabaseDescriptor;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,10,import org.apache.cassandra.config.KSMetaData;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,11,import org.apache.cassandra.db.Table;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,12,import org.apache.cassandra.service.StorageService;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,13,import org.apache.cassandra.utils.FBUtilities;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,14,import org.apache.cassandra.utils.UUIDGen;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,36,public class RenameColumnFamily extends Migration
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,38,private String tableName;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,39,private String oldName;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,40,private String newName;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,41,private Integer cfId;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,44,protected RenameColumnFamily() { /* pass */ }
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,48,public RenameColumnFamily(String tableName, String oldName, String newName) throws ConfigurationException, IOException
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,50,super(UUIDGen.makeType1UUIDFromHost(FBUtilities.getLocalAddress()), DatabaseDescriptor.getDefsVersion());
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,51,this.tableName = tableName;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,52,this.oldName = oldName;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,53,this.newName = newName;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,55,KSMetaData ksm = DatabaseDescriptor.getTableDefinition(tableName);
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,57,throw new ConfigurationException("No such keyspace: " + tableName);
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,59,throw new ConfigurationException("CF is not defined in that keyspace.");
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,61,throw new ConfigurationException("CF is already defined in that keyspace.");
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,63,throw new ConfigurationException("Invalid column family name: " + newName);
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,65,cfId = ksm.cfMetaData().get(oldName).cfId;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,68,KSMetaData newKsm = makeNewKeyspaceDefinition(ksm);
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,69,rm = Migration.makeDefinitionMutation(newKsm, null, newVersion);
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,74,CFMetaData oldCfm = ksm.cfMetaData().get(oldName);
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,75,List<CFMetaData> newCfs = new ArrayList<CFMetaData>(ksm.cfMetaData().values());
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,76,newCfs.remove(oldCfm);
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,77,assert newCfs.size() == ksm.cfMetaData().size() - 1;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,78,CFMetaData newCfm = CFMetaData.rename(oldCfm, newName);
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,79,newCfs.add(newCfm);
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,80,return new KSMetaData(ksm.name, ksm.strategyClass, ksm.strategyOptions, newCfs.toArray(new CFMetaData[newCfs.size()]));
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,83,public void applyModels() throws IOException
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,89,KSMetaData oldKsm = DatabaseDescriptor.getTableDefinition(tableName);
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,90,CFMetaData.purge(oldKsm.cfMetaData().get(oldName));
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,91,KSMetaData ksm = makeNewKeyspaceDefinition(DatabaseDescriptor.getTableDefinition(tableName));
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,92,try
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,94,CFMetaData.map(ksm.cfMetaData().get(newName));
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,100,throw new RuntimeException(ex);
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,102,DatabaseDescriptor.setTableDefinition(ksm, newVersion);
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,106,Table.open(ksm.name).renameCf(cfId, newName);
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,112,org.apache.cassandra.db.migration.avro.RenameColumnFamily rcf = new org.apache.cassandra.db.migration.avro.RenameColumnFamily();
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,113,rcf.ksname = new org.apache.avro.util.Utf8(tableName);
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,114,rcf.cfid = cfId;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,115,rcf.old_cfname = new org.apache.avro.util.Utf8(oldName);
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,116,rcf.new_cfname = new org.apache.avro.util.Utf8(newName);
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,117,mi.migration = rcf;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,122,org.apache.cassandra.db.migration.avro.RenameColumnFamily rcf = (org.apache.cassandra.db.migration.avro.RenameColumnFamily)mi.migration;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,123,tableName = rcf.ksname.toString();
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,124,cfId = rcf.cfid;
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,125,oldName = rcf.old_cfname.toString();
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,126,newName = rcf.new_cfname.toString();
src/java/org/apache/cassandra/db/migration/RenameColumnFamily.java,132,return String.format("Rename column family (%d) %s.%s to %s.%s", cfId, tableName, oldName, tableName, newName);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,19,package org.apache.cassandra.db.migration;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,21,import java.io.File;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,22,import java.io.IOException;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,23,import java.util.ArrayList;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,24,import java.util.List;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,26,import org.apache.commons.lang.StringUtils;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,28,import org.apache.cassandra.config.CFMetaData;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,29,import org.apache.cassandra.config.ConfigurationException;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,30,import org.apache.cassandra.config.DatabaseDescriptor;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,31,import org.apache.cassandra.config.KSMetaData;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,32,import org.apache.cassandra.db.Table;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,33,import org.apache.cassandra.service.StorageService;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,34,import org.apache.cassandra.utils.FBUtilities;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,35,import org.apache.cassandra.utils.UUIDGen;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,39,public class RenameKeyspace extends Migration
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,41,private String oldName;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,42,private String newName;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,45,protected RenameKeyspace() { /* pass */ }
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,47,public RenameKeyspace(String oldName, String newName) throws ConfigurationException, IOException
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,49,super(UUIDGen.makeType1UUIDFromHost(FBUtilities.getLocalAddress()), DatabaseDescriptor.getDefsVersion());
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,50,this.oldName = oldName;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,51,this.newName = newName;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,53,KSMetaData oldKsm = DatabaseDescriptor.getTableDefinition(oldName);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,55,throw new ConfigurationException("Keyspace either does not exist or does not match the one currently defined.");
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,57,throw new ConfigurationException("Keyspace already exists.");
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,59,throw new ConfigurationException("Invalid keyspace name: " + newName);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,62,KSMetaData newKsm = rename(oldKsm, newName, false);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,64,rm = makeDefinitionMutation(newKsm, oldKsm, newVersion);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,71,List<CFMetaData> newCfs = new ArrayList<CFMetaData>(ksm.cfMetaData().size());
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,75,CFMetaData.purge(oldCf);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,76,newCfs.add(CFMetaData.renameTable(oldCf, newName));
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,78,return new KSMetaData(newName, ksm.strategyClass, ksm.strategyOptions, newCfs.toArray(new CFMetaData[newCfs.size()]));
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,81,public void applyModels() throws IOException
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,84,renameKsStorageFiles(oldName, newName);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,86,KSMetaData oldKsm = DatabaseDescriptor.getTableDefinition(oldName);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,88,CFMetaData.purge(cfm);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,89,KSMetaData newKsm = rename(oldKsm, newName, true);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,92,try
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,94,CFMetaData.map(cfm);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,100,throw new RuntimeException(ex);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,105,DatabaseDescriptor.clearTableDefinition(oldKsm, newVersion);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,106,DatabaseDescriptor.setTableDefinition(newKsm, newVersion);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,110,Table.clear(oldKsm.name);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,111,Table.open(newName);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,115,private static void renameKsStorageFiles(String oldKs, String newKs) throws IOException
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,117,ArrayList<File> failed = new ArrayList<File>();
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,120,File ksDir = new File(dataDir, oldKs);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,123,failed.add(ksDir);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,127,throw new IOException("One or more problems encountered while renaming " + StringUtils.join(failed, ","));
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,132,org.apache.cassandra.db.migration.avro.RenameKeyspace rks = new org.apache.cassandra.db.migration.avro.RenameKeyspace();
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,133,rks.old_ksname = new org.apache.avro.util.Utf8(oldName);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,134,rks.new_ksname = new org.apache.avro.util.Utf8(newName);
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,135,mi.migration = rks;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,140,org.apache.cassandra.db.migration.avro.RenameKeyspace rks = (org.apache.cassandra.db.migration.avro.RenameKeyspace)mi.migration;
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,141,oldName = rks.old_ksname.toString();
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,142,newName = rks.new_ksname.toString();
src/java/org/apache/cassandra/db/migration/RenameKeyspace.java,148,return String.format("Rename keyspace %s to %s", oldName, newName);
src/java/org/apache/cassandra/db/HintedHandOffManager.java,308,int sleep = FBUtilities.threadLocalRandom().nextInt(60000);
src/java/org/apache/cassandra/thrift/CassandraServer.java,342,ThriftValidation.validateConsistencyLevel(keyspace, consistency_level);
src/java/org/apache/cassandra/thrift/CassandraServer.java,374,ThriftValidation.validateConsistencyLevel(keyspace, consistency_level);
src/java/org/apache/cassandra/thrift/CassandraServer.java,570,ThriftValidation.validateConsistencyLevel(state().getKeyspace(), consistency_level);
src/java/org/apache/cassandra/thrift/CassandraServer.java,614,ThriftValidation.validateConsistencyLevel(keyspace, consistency_level);
src/java/org/apache/cassandra/thrift/CassandraServer.java,678,ThriftValidation.validateConsistencyLevel(keyspace, consistency_level);
src/java/org/apache/cassandra/thrift/ThriftValidation.java,89,public static void validateConsistencyLevel(String table, ConsistencyLevel cl) throws InvalidRequestException
src/java/org/apache/cassandra/thrift/ThriftValidation.java,95,AbstractReplicationStrategy strategy = Table.open(table).getReplicationStrategy();
src/java/org/apache/cassandra/thrift/ThriftValidation.java,97,throw new InvalidRequestException("consistency level " + cl + " not compatible with replication strategy (" + strategy.getClass().getName() + ")");
src/java/org/apache/cassandra/thrift/ThriftValidation.java,685,throw new ConfigurationException("min_compaction_threshold cannot be greater than max_compaction_threshold");
src/java/org/apache/cassandra/thrift/ThriftValidation.java,692,throw new ConfigurationException(String.format("min_compaction_threshold cannot be greather than max_compaction_threshold (default %d)",
src/java/org/apache/cassandra/thrift/ThriftValidation.java,693,CFMetaData.DEFAULT_MAX_COMPACTION_THRESHOLD));
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,1209,return executor.getActiveCount() + validationExecutor.getActiveCount();
src/java/org/apache/cassandra/db/ColumnIndexer.java,73,int endPosition = 0, startPosition = -1;
src/java/org/apache/cassandra/tools/SSTableExport.java,131,serializedColumn.add(validator.getString(value));
src/java/org/apache/cassandra/tools/SSTableImport.java,106,value = stringAsType((String) fields.get(1), meta.getValueValidator(name.duplicate()));
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,27,import org.apache.cassandra.utils.FBUtilities;
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,507,return FBUtilities.bytesToHex(serializer.serialize(cfDef));
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,522,deserializer.deserialize(cfDef, FBUtilities.hexToBytes(st));
src/java/org/apache/cassandra/cql/QueryProcessor.java,622,clientState.setKeyspace((String)statement.statement);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1047,long size = sstable.length();
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1064,maxSize = sstable.length();
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,645,String compactionFileLocation = cfs.table.getDataFileLocation(sstable.length());
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,907,long startsize = sstable.length();
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,908,long endsize = newSstable.length();
src/java/org/apache/cassandra/io/sstable/SSTable.java,257,sum += sstable.length();
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,510,right = length();
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,305,maybeOpenIndexer();
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,312,long estimatedRows = indexer.prepareIndexing();
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,317,logger.debug("estimated row count was {} of real count", ((double)estimatedRows) / rows);
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,328,protected IndexWriter iwriter;
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,344,long prepareIndexing() throws IOException
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,346,long estimatedRows;
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,349,estimatedRows = SSTable.estimateRowsFromData(desc, dfile);
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,350,iwriter = new IndexWriter(desc, StorageService.getPartitioner(), estimatedRows);
src/java/org/apache/cassandra/io/sstable/SSTableWriter.java,351,return estimatedRows;
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,529,return getCachedPosition(new Pair<Descriptor, DecoratedKey>(descriptor, key));
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,535,return keyCache.get(unifiedKey);
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,558,Long cachedPosition = getCachedPosition(unifiedKey);
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,656,String indexFilename = sstable.descriptor.filenameFor(Component.PRIMARY_INDEX);
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,669,int goodRows = 0, badRows = 0, emptyRows = 0;
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,792,cfs.replaceCompactedSSTables(Arrays.asList(sstable), Arrays.asList(newSstable));
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,793,logger.info("Scrub of " + sstable + " complete: " + goodRows + " rows in new sstable and " + emptyRows + " empty (tombstoned) rows dropped");
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,795,logger.warn("Unable to recover " + badRows + " rows that were skipped.  You can attempt manual recovery from the pre-scrub snapshot.  You can also run nodetool repair to transfer the data from a healthy replica, if any");
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,797,else
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,799,cfs.markCompacted(Arrays.asList(sstable));
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,801,logger.warn("No valid rows found while scrubbing " + sstable + "; it is marked for deletion now. If you want to attempt manual recovery, you can find a copy in the pre-scrub snapshot");
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,802,else
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,803,logger.info("Scrub of " + sstable + " complete; looks like all " + emptyRows + " rows were tombstoned");
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,840,logger.debug("forceFlush requested but everything is clean");
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1969,public Future<?> truncate() throws IOException
src/java/org/apache/cassandra/db/Truncation.java,62,public void apply() throws IOException
src/java/org/apache/cassandra/db/Truncation.java,64,Table.open(keyspace).getColumnFamilyStore(columnFamily).truncate();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,477,segment.close();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,501,createNewSegment();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,506,try
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,508,executor.submit(task).get();
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,512,throw new AssertionError(e);
src/java/org/apache/cassandra/db/commitlog/CommitLog.java,516,throw new RuntimeException(e);
src/java/org/apache/cassandra/cli/CliClient.java,304,RuntimeException rtEx = new RuntimeException("schema does not match across nodes, (try again later).");
src/java/org/apache/cassandra/cli/CliClient.java,305,rtEx.initCause(e);
src/java/org/apache/cassandra/cli/CliClient.java,306,throw new RuntimeException();
src/java/org/apache/cassandra/cli/CliClient.java,555,throw new RuntimeException(errorMessage.append(Function.getFunctionNames()).toString());
src/java/org/apache/cassandra/cli/CliClient.java,781,throw new RuntimeException(e.getMessage());
src/java/org/apache/cassandra/cli/CliClient.java,810,throw new RuntimeException(e.getWhy());
src/java/org/apache/cassandra/cli/CliClient.java,814,throw new RuntimeException(e.getMessage());
src/java/org/apache/cassandra/cli/CliClient.java,897,throw new RuntimeException(e.getMessage());
src/java/org/apache/cassandra/cli/CliClient.java,964,throw new RuntimeException(e.getMessage());
src/java/org/apache/cassandra/cli/CliClient.java,1007,throw new RuntimeException(e.getWhy());
src/java/org/apache/cassandra/cli/CliClient.java,1011,throw new RuntimeException(e.getMessage(), e);
src/java/org/apache/cassandra/cli/CliClient.java,1037,throw new RuntimeException(e.getWhy());
src/java/org/apache/cassandra/cli/CliClient.java,1041,throw new RuntimeException(e.getMessage(), e);
src/java/org/apache/cassandra/cli/CliClient.java,1068,throw new RuntimeException(e.getWhy());
src/java/org/apache/cassandra/cli/CliClient.java,1072,throw new RuntimeException(e.getMessage(), e);
src/java/org/apache/cassandra/cli/CliClient.java,1102,throw new RuntimeException(e.getWhy());
src/java/org/apache/cassandra/cli/CliClient.java,1106,throw new RuntimeException(e.getMessage(), e);
src/java/org/apache/cassandra/cli/CliClient.java,1166,throw new RuntimeException(e.getMessage());
src/java/org/apache/cassandra/cli/CliClient.java,2182,throw new RuntimeException(e.getMessage(), e);
src/java/org/apache/cassandra/cli/CliClient.java,2213,throw new RuntimeException("IndexType '" + indexTypeAsString + "' is unsupported.");
src/java/org/apache/cassandra/cli/CliClient.java,2242,throw new RuntimeException(e.toString());
src/java/org/apache/cassandra/cli/CliClient.java,2357,throw new RuntimeException(e.getMessage(), e);
src/java/org/apache/cassandra/cli/CliClient.java,2493,throw new RuntimeException(e.getMessage());
src/java/org/apache/cassandra/cli/CliClient.java,2514,throw new RuntimeException(errorMessage.append(Function.getFunctionNames()).toString());
src/java/org/apache/cassandra/tools/NodeCmd.java,589,NodeCommand command = null;
src/java/org/apache/cassandra/tools/NodeCmd.java,593,command = cmd.getCommand();
src/java/org/apache/cassandra/tools/NodeCmd.java,597,badUse(e.getMessage());
src/java/org/apache/cassandra/tools/NodeCmd.java,601,NodeCmd nodeCmd = new NodeCmd(probe);
src/java/org/apache/cassandra/tools/NodeCmd.java,604,String[] arguments = cmd.getCommandArguments();
src/java/org/apache/cassandra/tools/NodeCmd.java,608,case RING            : nodeCmd.printRing(System.out); break;
src/java/org/apache/cassandra/tools/NodeCmd.java,609,case INFO            : nodeCmd.printInfo(System.out); break;
src/java/org/apache/cassandra/tools/NodeCmd.java,610,case CFSTATS         : nodeCmd.printColumnFamilyStats(System.out); break;
src/java/org/apache/cassandra/tools/NodeCmd.java,611,case DECOMMISSION    : probe.decommission(); break;
src/java/org/apache/cassandra/tools/NodeCmd.java,612,case TPSTATS         : nodeCmd.printThreadPoolStats(System.out); break;
src/java/org/apache/cassandra/tools/NodeCmd.java,613,case VERSION         : nodeCmd.printReleaseVersion(System.out); break;
src/java/org/apache/cassandra/tools/NodeCmd.java,614,case COMPACTIONSTATS : nodeCmd.printCompactionStats(System.out); break;
src/java/org/apache/cassandra/tools/NodeCmd.java,615,case DISABLEGOSSIP   : probe.stopGossiping(); break;
src/java/org/apache/cassandra/tools/NodeCmd.java,616,case ENABLEGOSSIP    : probe.startGossiping(); break;
src/java/org/apache/cassandra/tools/NodeCmd.java,617,case DISABLETHRIFT   : probe.stopThriftServer(); break;
src/java/org/apache/cassandra/tools/NodeCmd.java,618,case ENABLETHRIFT    : probe.startThriftServer(); break;
src/java/org/apache/cassandra/tools/NodeCmd.java,619,case STATUSTHRIFT    : nodeCmd.printIsThriftServerRunning(System.out); break;
src/java/org/apache/cassandra/tools/NodeCmd.java,621,case DRAIN :
src/java/org/apache/cassandra/tools/NodeCmd.java,622,try { probe.drain(); }
src/java/org/apache/cassandra/tools/NodeCmd.java,623,catch (ExecutionException ee) { err(ee, "Error occured during flushing"); }
src/java/org/apache/cassandra/tools/NodeCmd.java,624,break;
src/java/org/apache/cassandra/tools/NodeCmd.java,626,case NETSTATS :
src/java/org/apache/cassandra/tools/NodeCmd.java,627,if (arguments.length > 0) { nodeCmd.printNetworkStats(InetAddress.getByName(arguments[0]), System.out); }
src/java/org/apache/cassandra/tools/NodeCmd.java,628,else                      { nodeCmd.printNetworkStats(null, System.out); }
src/java/org/apache/cassandra/tools/NodeCmd.java,629,break;
src/java/org/apache/cassandra/tools/NodeCmd.java,631,case SNAPSHOT :
src/java/org/apache/cassandra/tools/NodeCmd.java,632,case CLEARSNAPSHOT :
src/java/org/apache/cassandra/tools/NodeCmd.java,633,String tag = cmd.getOptionValue(TAG_OPT.left);
src/java/org/apache/cassandra/tools/NodeCmd.java,634,handleSnapshots(command, tag, arguments, probe);
src/java/org/apache/cassandra/tools/NodeCmd.java,635,break;
src/java/org/apache/cassandra/tools/NodeCmd.java,637,case MOVE :
src/java/org/apache/cassandra/tools/NodeCmd.java,638,if (arguments.length != 1) { badUse("Missing token argument for move."); }
src/java/org/apache/cassandra/tools/NodeCmd.java,639,probe.move(arguments[0]);
src/java/org/apache/cassandra/tools/NodeCmd.java,640,break;
src/java/org/apache/cassandra/tools/NodeCmd.java,642,case JOIN:
src/java/org/apache/cassandra/tools/NodeCmd.java,645,System.err.println("This node has already joined the ring.");
src/java/org/apache/cassandra/tools/NodeCmd.java,646,System.exit(1);
src/java/org/apache/cassandra/tools/NodeCmd.java,649,probe.joinRing();
src/java/org/apache/cassandra/tools/NodeCmd.java,650,break;
src/java/org/apache/cassandra/tools/NodeCmd.java,652,case SETCOMPACTIONTHROUGHPUT :
src/java/org/apache/cassandra/tools/NodeCmd.java,653,if (arguments.length != 1) { badUse("Missing value argument."); }
src/java/org/apache/cassandra/tools/NodeCmd.java,654,probe.setCompactionThroughput(Integer.valueOf(arguments[0]));
src/java/org/apache/cassandra/tools/NodeCmd.java,655,break;
src/java/org/apache/cassandra/tools/NodeCmd.java,657,case REMOVETOKEN :
src/java/org/apache/cassandra/tools/NodeCmd.java,658,if (arguments.length != 1) { badUse("Missing an argument for removetoken (either status, force, or a token)"); }
src/java/org/apache/cassandra/tools/NodeCmd.java,659,else if (arguments[0].equals("status")) { nodeCmd.printRemovalStatus(System.out); }
src/java/org/apache/cassandra/tools/NodeCmd.java,660,else if (arguments[0].equals("force"))  { nodeCmd.printRemovalStatus(System.out); probe.forceRemoveCompletion(); }
src/java/org/apache/cassandra/tools/NodeCmd.java,661,else                                    { probe.removeToken(arguments[0]); }
src/java/org/apache/cassandra/tools/NodeCmd.java,662,break;
src/java/org/apache/cassandra/tools/NodeCmd.java,664,case CLEANUP :
src/java/org/apache/cassandra/tools/NodeCmd.java,665,case COMPACT :
src/java/org/apache/cassandra/tools/NodeCmd.java,666,case REPAIR  :
src/java/org/apache/cassandra/tools/NodeCmd.java,667,case FLUSH   :
src/java/org/apache/cassandra/tools/NodeCmd.java,668,case SCRUB   :
src/java/org/apache/cassandra/tools/NodeCmd.java,669,case INVALIDATEKEYCACHE :
src/java/org/apache/cassandra/tools/NodeCmd.java,670,case INVALIDATEROWCACHE :
src/java/org/apache/cassandra/tools/NodeCmd.java,672,break;
src/java/org/apache/cassandra/tools/NodeCmd.java,674,case GETCOMPACTIONTHRESHOLD :
src/java/org/apache/cassandra/tools/NodeCmd.java,675,if (arguments.length != 2) { badUse("getcompactionthreshold requires ks and cf args."); }
src/java/org/apache/cassandra/tools/NodeCmd.java,676,probe.getCompactionThreshold(System.out, arguments[0], arguments[1]);
src/java/org/apache/cassandra/tools/NodeCmd.java,677,break;
src/java/org/apache/cassandra/tools/NodeCmd.java,679,case CFHISTOGRAMS :
src/java/org/apache/cassandra/tools/NodeCmd.java,680,if (arguments.length != 2) { badUse("cfhistograms requires ks and cf args"); }
src/java/org/apache/cassandra/tools/NodeCmd.java,681,nodeCmd.printCfHistograms(arguments[0], arguments[1], System.out);
src/java/org/apache/cassandra/tools/NodeCmd.java,682,break;
src/java/org/apache/cassandra/tools/NodeCmd.java,684,case SETCACHECAPACITY :
src/java/org/apache/cassandra/tools/NodeCmd.java,685,if (arguments.length != 4) { badUse("setcachecapacity requires ks, cf, keycachecap, and rowcachecap args."); }
src/java/org/apache/cassandra/tools/NodeCmd.java,686,probe.setCacheCapacities(arguments[0], arguments[1], Integer.parseInt(arguments[2]), Integer.parseInt(arguments[3]));
src/java/org/apache/cassandra/tools/NodeCmd.java,687,break;
src/java/org/apache/cassandra/tools/NodeCmd.java,689,case SETCOMPACTIONTHRESHOLD :
src/java/org/apache/cassandra/tools/NodeCmd.java,690,if (arguments.length != 4) { badUse("setcompactionthreshold requires ks, cf, min, and max threshold args."); }
src/java/org/apache/cassandra/tools/NodeCmd.java,691,int minthreshold = Integer.parseInt(arguments[2]);
src/java/org/apache/cassandra/tools/NodeCmd.java,692,int maxthreshold = Integer.parseInt(arguments[3]);
src/java/org/apache/cassandra/tools/NodeCmd.java,693,if ((minthreshold < 0) || (maxthreshold < 0)) { badUse("Thresholds must be positive integers"); }
src/java/org/apache/cassandra/tools/NodeCmd.java,694,if (minthreshold > maxthreshold)              { badUse("Min threshold cannot be greater than max."); }
src/java/org/apache/cassandra/tools/NodeCmd.java,695,if (minthreshold < 2 && maxthreshold != 0)    { badUse("Min threshold must be at least 2"); }
src/java/org/apache/cassandra/tools/NodeCmd.java,696,probe.setCompactionThreshold(arguments[0], arguments[1], minthreshold, maxthreshold);
src/java/org/apache/cassandra/tools/NodeCmd.java,697,break;
src/java/org/apache/cassandra/tools/NodeCmd.java,699,case GETENDPOINTS :
src/java/org/apache/cassandra/tools/NodeCmd.java,700,if (arguments.length != 3) { badUse("getendpoints requires ks, cf and key args"); }
src/java/org/apache/cassandra/tools/NodeCmd.java,701,nodeCmd.printEndPoints(arguments[0], arguments[1], arguments[2], System.out);
src/java/org/apache/cassandra/tools/NodeCmd.java,702,break;
src/java/org/apache/cassandra/tools/NodeCmd.java,704,case REFRESH:
src/java/org/apache/cassandra/tools/NodeCmd.java,705,if (arguments.length != 2) { badUse("load_new_sstables requires ks and cf args"); }
src/java/org/apache/cassandra/tools/NodeCmd.java,706,probe.loadNewSSTables(arguments[0], arguments[1]);
src/java/org/apache/cassandra/tools/NodeCmd.java,707,break;
src/java/org/apache/cassandra/tools/NodeCmd.java,709,default :
src/java/org/apache/cassandra/tools/NodeCmd.java,710,throw new RuntimeException("Unreachable code.");
src/java/org/apache/cassandra/tools/NodeCmd.java,671,optionalKSandCFs(command, arguments, probe);
src/java/org/apache/cassandra/cli/CliClient.java,1617,opts.append("[{");
src/java/org/apache/cassandra/cli/CliClient.java,1624,opts.append("}]");
tools/stress/src/org/apache/cassandra/stress/operations/CounterGetter.java,67,ColumnParent parent = new ColumnParent("CounterSuper1").setSuper_column(superColumn.getBytes());
src/java/org/apache/cassandra/gms/FailureDetector.java,219,interArrivalTime = (value - tLast_);
src/java/org/apache/cassandra/gms/FailureDetector.java,225,tLast_ = value;
src/java/org/apache/cassandra/gms/FailureDetector.java,226,arrivalIntervals_.add(interArrivalTime);
src/java/org/apache/cassandra/locator/SimpleSeedProvider.java,46,seeds.add(InetAddress.getByName(host));
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,99,long currentPosition = -1L;
src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java,117,turnOn(cfm.cfId, (int) currentPosition);
src/java/org/apache/cassandra/db/HintedHandOffManager.java,333,ColumnFamilyStore hintStore = Table.open(Table.SYSTEM_TABLE).getColumnFamilyStore(HINTS_CF);
src/java/org/apache/cassandra/db/SystemTable.java,21,import java.io.File;
src/java/org/apache/cassandra/db/SystemTable.java,22,import java.io.FilenameFilter;
src/java/org/apache/cassandra/db/SystemTable.java,33,import java.util.concurrent.atomic.AtomicReference;
src/java/org/apache/cassandra/db/SystemTable.java,78,final ByteBuffer hintsPurged6to7 = ByteBufferUtil.bytes("Hints purged as part of upgrading from 0.6.x to 0.7");
src/java/org/apache/cassandra/db/SystemTable.java,80,QueryFilter dotSeven = QueryFilter.getNamesFilter(decorate(COOKIE_KEY), new QueryPath(STATUS_CF), hintsPurged6to7);
src/java/org/apache/cassandra/db/SystemTable.java,81,ColumnFamily cf = table.getColumnFamilyStore(STATUS_CF).getColumnFamily(dotSeven);
src/java/org/apache/cassandra/db/SystemTable.java,85,ColumnFamilyStore hintsCfs = Table.open(Table.SYSTEM_TABLE).getColumnFamilyStore(HintedHandOffManager.HINTS_CF);
src/java/org/apache/cassandra/db/SystemTable.java,88,logger.info("Possible 0.6-format hints found. Snapshotting as 'old-hints' and purging");
src/java/org/apache/cassandra/db/SystemTable.java,89,hintsCfs.snapshot("old-hints");
src/java/org/apache/cassandra/db/SystemTable.java,90,hintsCfs.removeAllSSTables();
src/java/org/apache/cassandra/db/SystemTable.java,92,RowMutation rm = new RowMutation(Table.SYSTEM_TABLE, COOKIE_KEY);
src/java/org/apache/cassandra/db/SystemTable.java,93,rm.add(new QueryPath(STATUS_CF, null, hintsPurged6to7), ByteBufferUtil.bytes("oh yes, it they were purged."), System.currentTimeMillis());
src/java/org/apache/cassandra/db/SystemTable.java,94,rm.apply();
src/java/org/apache/cassandra/service/StorageService.java,841,Gossiper.instance.removeEndpoint(currentOwner);
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,148,pair.set(0, marshallers.get(0).compose(name));
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,152,pair.set(1, new DataByteArray(ByteBufferUtil.getArray(col.value())));
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,153,else
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,154,pair.set(1, marshallers.get(1).compose(col.value()));
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,156,pair.set(1, validators.get(name).compose(col.value()));
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,358,List<AbstractType> marshallers = getDefaultMarshallers(cfDef);
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,359,Map<ByteBuffer,AbstractType> validators = getValidatorMap(cfDef);
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,403,column.name = marshallers.get(0).decompose((pair.get(0)));
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,407,column.value = objToBB(pair.get(1));
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,408,else
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,409,column.value = marshallers.get(1).decompose(pair.get(1));
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,410,else
contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java,411,column.value = validators.get(column.name).decompose(pair.get(1));
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,667,SSTableWriter writer = maybeCreateWriter(cfs, compactionFileLocation, expectedBloomFilterSize, null, Collections.singletonList(sstable));
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,668,executor.beginCompaction(new ScrubInfo(dataFile, sstable));
src/java/org/apache/cassandra/locator/AbstractEndpointSnitch.java,23,import java.util.Collection;
src/java/org/apache/cassandra/locator/AbstractEndpointSnitch.java,24,import java.util.List;
src/java/org/apache/cassandra/locator/AbstractEndpointSnitch.java,33,public abstract List<InetAddress> getSortedListByProximity(InetAddress address, Collection<InetAddress> unsortedAddress);
src/java/org/apache/cassandra/locator/AbstractEndpointSnitch.java,34,public abstract void sortByProximity(InetAddress address, List<InetAddress> addresses);
src/java/org/apache/cassandra/locator/AbstractEndpointSnitch.java,38,return a1.getHostAddress().compareTo(a2.getHostAddress());
src/java/org/apache/cassandra/locator/AbstractNetworkTopologySnitch.java,58,List<InetAddress> preferred = new ArrayList<InetAddress>(addresses);
src/java/org/apache/cassandra/locator/AbstractNetworkTopologySnitch.java,59,sortByProximity(address, preferred);
src/java/org/apache/cassandra/locator/AbstractNetworkTopologySnitch.java,60,return preferred;
src/java/org/apache/cassandra/locator/AbstractNetworkTopologySnitch.java,75,return compareEndpoints(address, a1, a2);
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,151,return compareEndpoints(address, a1, a2);
src/java/org/apache/cassandra/locator/SimpleSnitch.java,45,return new ArrayList<InetAddress>(addresses);
src/java/org/apache/cassandra/utils/FBUtilities.java,47,import org.apache.cassandra.db.marshal.AbstractType;
src/java/org/apache/cassandra/utils/FBUtilities.java,48,import org.apache.cassandra.db.marshal.TypeParser;
src/java/org/apache/cassandra/utils/FBUtilities.java,372,byte[] bytes = new byte[str.length()/2];
src/java/org/apache/cassandra/utils/FBUtilities.java,375,bytes[i] = (byte)((charToByte[str.charAt(i * 2)] << 4) | charToByte[str.charAt(i*2 + 1)]);
src/java/org/apache/cassandra/security/SSLFactory.java,87,ts.load(new FileInputStream(options.truststore), options.truststore_password.toCharArray());
src/java/org/apache/cassandra/security/SSLFactory.java,92,ks.load(new FileInputStream(options.keystore), options.keystore_password.toCharArray());
src/java/org/apache/cassandra/service/AntiEntropyService.java,170,assert session != null;
src/java/org/apache/cassandra/tools/BulkLoader.java,317,opts.ignores.add(InetAddress.getByName(node));
src/java/org/apache/cassandra/tools/BulkLoader.java,322,errorMsg(e.getMessage(), options);
src/java/org/apache/cassandra/tools/BulkLoader.java,360,options.addOption("i",  IGNORE_NODES_OPTION, "don't stream to this (comma separated) list of nodes");
src/java/org/apache/cassandra/cache/AutoSavingCache.java,152,logger.warn(String.format("error reading saved cache %s", path.getAbsolutePath()), ioe);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,972,cf.remove(cname);
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,994,c.remove(subColumn.name());
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,34,import org.apache.cassandra.db.ColumnFamily;
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,35,import org.apache.cassandra.db.DecoratedKey;
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,36,import org.apache.cassandra.db.IColumn;
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,214,ColumnFamily cf = columnFamily.cloneMeShallow();
src/java/org/apache/cassandra/db/filter/QueryFilter.java,113,curCF.addColumn(((SuperColumn)current).cloneMe());
src/java/org/apache/cassandra/db/filter/QueryFilter.java,133,c = filter.filterSuperColumn((SuperColumn)c, gcBefore);
src/java/org/apache/cassandra/db/filter/QueryFilter.java,136,curCF.clear();
src/java/org/apache/cassandra/io/sstable/ReducingKeyIterator.java,27,import java.util.Iterator;
src/java/org/apache/cassandra/io/sstable/ReducingKeyIterator.java,32,import org.apache.cassandra.utils.FBUtilities;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,567,logger.info("Removing compacted SSTable files (see http://wiki.apache.org/cassandra/MemtableSSTable)");
src/java/org/apache/cassandra/dht/BootStrapper.java,134,public static Token getBootstrapToken(final TokenMetadata metadata, final Map<InetAddress, Double> load) throws IOException, ConfigurationException
src/java/org/apache/cassandra/dht/BootStrapper.java,138,logger.debug("token manually specified as " + DatabaseDescriptor.getInitialToken());
src/java/org/apache/cassandra/dht/BootStrapper.java,139,Token token = StorageService.getPartitioner().getTokenFactory().fromString(DatabaseDescriptor.getInitialToken());
src/java/org/apache/cassandra/dht/BootStrapper.java,141,throw new ConfigurationException("Bootstraping to existing token " + token + " is not allowed (decommission/removetoken the old node first).");
src/java/org/apache/cassandra/dht/BootStrapper.java,142,return token;
src/java/org/apache/cassandra/dht/BootStrapper.java,145,return getBalancedToken(metadata, load);
src/java/org/apache/cassandra/service/StorageService.java,501,String initialToken = DatabaseDescriptor.getInitialToken();
src/java/org/apache/cassandra/service/StorageService.java,504,token = partitioner.getRandomToken();
src/java/org/apache/cassandra/service/StorageService.java,505,logger_.warn("Generated random token " + token + ". Random tokens will result in an unbalanced ring; see http://wiki.apache.org/cassandra/Operations");
src/java/org/apache/cassandra/service/StorageService.java,507,else
src/java/org/apache/cassandra/service/StorageService.java,509,token = partitioner.getTokenFactory().fromString(initialToken);
src/java/org/apache/cassandra/service/StorageService.java,510,logger_.info("Saved token not found. Using " + token + " from configuration");
src/java/org/apache/cassandra/cql/AbstractModification.java,76,return timestamp == null ? System.currentTimeMillis() : timestamp;
src/java/org/apache/cassandra/cql/DeleteStatement.java,85,rowMutations.add(mutationForKey(key.getByteBuffer(keyType), keyspace, timestamp));
src/java/org/apache/cassandra/cql/DeleteStatement.java,92,public RowMutation mutationForKey(ByteBuffer key, String keyspace, Long timestamp) throws InvalidRequestException
src/java/org/apache/cassandra/cql/DeleteStatement.java,96,mutationForKey(rm, keyspace, timestamp);
src/java/org/apache/cassandra/cql/DeleteStatement.java,98,return rm;
src/java/org/apache/cassandra/cql/DeleteStatement.java,102,public void mutationForKey(RowMutation mutation, String keyspace, Long timestamp) throws InvalidRequestException
src/java/org/apache/cassandra/cql/DeleteStatement.java,109,if (columns.size() < 1) // No columns, delete the row
src/java/org/apache/cassandra/cql/DeleteStatement.java,110,mutation.delete(new QueryPath(columnFamily), (timestamp == null) ? getTimestamp() : timestamp);
src/java/org/apache/cassandra/cql/DeleteStatement.java,111,else    // Delete specific columns
src/java/org/apache/cassandra/cql/DeleteStatement.java,117,mutation.delete(new QueryPath(columnFamily, null, columnName), (timestamp == null) ? getTimestamp() : timestamp);
src/java/org/apache/cassandra/cql/UpdateStatement.java,162,rowMutations.add(mutationForKey(keyspace, key.getByteBuffer(getKeyType(keyspace)), metadata, timestamp));
src/java/org/apache/cassandra/cql/UpdateStatement.java,180,private IMutation mutationForKey(String keyspace, ByteBuffer key, CFMetaData metadata, Long timestamp) throws InvalidRequestException
src/java/org/apache/cassandra/cql/UpdateStatement.java,203,(timestamp == null) ? getTimestamp() : timestamp,
src/java/org/apache/cassandra/streaming/StreamOutSession.java,37,public class StreamOutSession
src/java/org/apache/cassandra/service/StorageService.java,1593,List<AntiEntropyService.RepairFuture> futures = new ArrayList<AntiEntropyService.RepairFuture>();
src/java/org/apache/cassandra/service/StorageService.java,1626,throw new IOException("Some repair session(s) failed (see log for details).");
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1284,cached.remove(column.name());
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,1285,cached.addColumn(column.localCopy(this));
src/java/org/apache/cassandra/tools/NodeCmd.java,524,(i < rwlh.length ? rrlh[i] : ""),
src/java/org/apache/cassandra/tools/NodeCmd.java,525,(i < rrlh.length ? rwlh[i] : ""),
src/java/org/apache/cassandra/cli/CliClient.java,1798,keySpaceName = statement.getChild(0).getText();
src/java/org/apache/cassandra/cli/CliClient.java,1800,if (childCount == 3) {
src/java/org/apache/cassandra/tools/NodeProbe.java,63,private static final String fmtUrl = "service:jmx:rmi:///jndi/rmi://%s:%d/jmxrmi";
src/java/org/apache/cassandra/utils/ByteBufferUtil.java,117,return string(buffer, UTF_8);
src/java/org/apache/cassandra/utils/ByteBufferUtil.java,131,return string(buffer, position, length, UTF_8);
src/java/org/apache/cassandra/utils/ByteBufferUtil.java,224,return ByteBuffer.wrap(s.getBytes(UTF_8));
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,91,Thread.sleep(100);
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,209,activeClients.decrementAndGet();
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,214,inputTransport.close();
src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java,219,outputTransport.close();
src/java/org/apache/cassandra/service/StorageService.java,426,FBUtilities.waitOnFutures(flushes);
src/java/org/apache/cassandra/service/MigrationManager.java,50,public class MigrationManager implements IEndpointStateChangeSubscriber
src/java/org/apache/cassandra/service/MigrationManager.java,63,return;
src/java/org/apache/cassandra/service/StorageService.java,322,Gossiper.instance.unregister(migrationManager);
src/java/org/apache/cassandra/service/StorageService.java,450,Gossiper.instance.register(migrationManager);
src/java/org/apache/cassandra/net/OutboundTcpConnection.java,38,import org.apache.cassandra.config.DatabaseDescriptor;
src/java/org/apache/cassandra/service/StorageService.java,1545,return table.getColumnFamilyStores();
src/java/org/apache/cassandra/service/StorageService.java,1548,Set<ColumnFamilyStore> valid = new HashSet<ColumnFamilyStore>();
src/java/org/apache/cassandra/service/StorageService.java,729,case STATUS:
src/java/org/apache/cassandra/service/StorageService.java,730,String apStateValue = value.value;
src/java/org/apache/cassandra/service/StorageService.java,731,String[] pieces = apStateValue.split(VersionedValue.DELIMITER_STR, -1);
src/java/org/apache/cassandra/service/StorageService.java,732,assert (pieces.length > 0);
src/java/org/apache/cassandra/service/StorageService.java,734,String moveName = pieces[0];
src/java/org/apache/cassandra/service/StorageService.java,737,handleStateBootstrap(endpoint, pieces);
src/java/org/apache/cassandra/service/StorageService.java,739,handleStateNormal(endpoint, pieces);
src/java/org/apache/cassandra/service/StorageService.java,741,handleStateRemoving(endpoint, pieces);
src/java/org/apache/cassandra/service/StorageService.java,743,handleStateLeaving(endpoint, pieces);
src/java/org/apache/cassandra/service/StorageService.java,745,handleStateLeft(endpoint, pieces);
src/java/org/apache/cassandra/service/StorageService.java,747,handleStateMoving(endpoint, pieces);
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,99,endpoints = new ArrayList<InetAddress>(calculateNaturalEndpoints(searchToken, tokenMetadataClone));
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,61,this.tokenMetadata.register(this);
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,70,return cachedEndpoints.get(t);
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,75,cachedEndpoints.put(t, addr);
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,80,logger.debug("clearing cached endpoints");
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,81,cachedEndpoints.clear();
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,97,TokenMetadata tokenMetadataClone = tokenMetadata.cloneOnlyTokenMap();
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,98,keyToken = TokenMetadata.firstToken(tokenMetadataClone.sortedTokens(), searchToken);
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,100,cacheEndpoint(keyToken, endpoints);
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,240,clearEndpointCache();
src/java/org/apache/cassandra/locator/TokenMetadata.java,25,import java.util.concurrent.CopyOnWriteArrayList;
src/java/org/apache/cassandra/locator/TokenMetadata.java,30,import org.apache.cassandra.utils.Pair;
src/java/org/apache/cassandra/locator/TokenMetadata.java,73,private final CopyOnWriteArrayList<AbstractReplicationStrategy> subscribers = new CopyOnWriteArrayList<AbstractReplicationStrategy>();
src/java/org/apache/cassandra/locator/TokenMetadata.java,222,invalidateCaches();
src/java/org/apache/cassandra/locator/TokenMetadata.java,250,invalidateCaches();
src/java/org/apache/cassandra/locator/TokenMetadata.java,654,subscriber.invalidateCachedTokenEndpointValues();
src/java/org/apache/cassandra/locator/TokenMetadata.java,660,subscribers.add(subscriber);
src/java/org/apache/cassandra/locator/TokenMetadata.java,665,subscribers.remove(subscriber);
src/java/org/apache/cassandra/gms/FailureDetector.java,136,heartbeatWindow.add(now);
src/java/org/apache/cassandra/gms/FailureDetector.java,207,private final double PHI_FACTOR = 1.0 / Math.log(10.0);
src/java/org/apache/cassandra/gms/FailureDetector.java,216,double interArrivalTime;
src/java/org/apache/cassandra/gms/FailureDetector.java,223,interArrivalTime = Gossiper.intervalInMillis / 2;
src/java/org/apache/cassandra/gms/FailureDetector.java,266,: 0.0;
src/java/org/apache/cassandra/db/SystemTable.java,356,forceBlockingFlush(INDEX_CF);
src/java/org/apache/cassandra/utils/FBUtilities.java,606,throw new ConfigurationException(String.format("Unable to find %s class '%s'", readable, classname));
src/java/org/apache/cassandra/db/HintedHandOffManager.java,287,while (!gossiper.getEndpointStateForEndpoint(endpoint).getApplicationState(ApplicationState.SCHEMA).value.equals(
src/java/org/apache/cassandra/db/DataTracker.java,253,removeOldSSTablesSize(oldSSTables);
src/java/org/apache/cassandra/dht/BootStrapper.java,65,private static final long BOOTSTRAP_TIMEOUT = 30000; // default bootstrap timeout of 30s
src/java/org/apache/cassandra/dht/BootStrapper.java,231,MessagingService.instance().sendRR(message, maxEndpoint, btc, timeout);
src/java/org/apache/cassandra/dht/BootStrapper.java,232,Token token = btc.getToken(timeout);
src/java/org/apache/cassandra/locator/TokenMetadata.java,494,return leavingEndpoints;
src/java/org/apache/cassandra/locator/TokenMetadata.java,503,return movingEndpoints;
src/java/org/apache/cassandra/gms/Gossiper.java,223,Set<InetAddress> liveMbrs = new HashSet<InetAddress>(liveEndpoints);
src/java/org/apache/cassandra/gms/Gossiper.java,226,return liveMbrs;
src/java/org/apache/cassandra/service/StorageProxy.java,1082,Set<InetAddress> allEndpoints = Gossiper.instance.getLiveMembers();
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,770,public static int bits2words(long numBits) {
src/java/org/apache/cassandra/utils/obs/OpenBitSet.java,771,return (int)(((numBits-1)>>>6)+1);
src/java/org/apache/cassandra/db/SystemTable.java,248,return;
src/java/org/apache/cassandra/gms/Gossiper.java,447,int size = epSet.size();
src/java/org/apache/cassandra/gms/Gossiper.java,451,List<InetAddress> liveEndpoints = new ArrayList<InetAddress>(epSet);
src/java/org/apache/cassandra/dht/OrderPreservingPartitioner.java,172,throw new RuntimeException("The provided key was not UTF8 encoded.", e);
src/java/org/apache/cassandra/io/sstable/SSTableSimpleUnsortedWriter.java,68,this.bufferSize = bufferSizeInMB * 1024L * 1024L;
src/java/org/apache/cassandra/db/SystemTable.java,160,try
src/java/org/apache/cassandra/db/SystemTable.java,166,throw new RuntimeException(e);
src/java/org/apache/cassandra/db/SystemTable.java,170,throw new AssertionError(e);
src/java/org/apache/cassandra/cli/CliMain.java,281,return;
src/java/org/apache/cassandra/cli/CliMain.java,284,evaluateFileStatements(new BufferedReader(fileReader));
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,195,partitioner = FBUtilities.newPartitioner(client.describe_partitioner());
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,199,KsDef ks_def = client.describe_keyspace(keyspace);
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,200,List<String> cfnames = new ArrayList<String>();
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,202,cfnames.add(cfd.name);
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,203,int idx = cfnames.indexOf(cfName);
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,204,CfDef cf_def = ks_def.cf_defs.get(idx);
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,206,comparator = TypeParser.parse(cf_def.comparator_type);
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,207,subComparator = cf_def.subcomparator_type == null ? null : TypeParser.parse(cf_def.subcomparator_type);
src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java,46,public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor
src/java/org/apache/cassandra/net/MessagingService.java,29,import java.util.concurrent.ExecutorService;
src/java/org/apache/cassandra/net/MessagingService.java,488,ExecutorService stage = StageManager.getStage(message.getMessageType());
src/java/org/apache/cassandra/net/MessagingService.java,490,stage.execute(runnable);
src/java/org/apache/cassandra/service/MigrationManager.java,26,import java.util.concurrent.Future;
src/java/org/apache/cassandra/service/StorageProxy.java,178,mstrings.add(mutation.toString(true));
src/java/org/apache/cassandra/tools/NodeProbe.java,403,ColumnFamilyStoreMBean cfsProxy = getCfsProxy(ks, cf);
src/java/org/apache/cassandra/tools/NodeProbe.java,404,outs.println("Current compaction thresholds for " + ks + "/" + cf + ": \n" +
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,114,assert partitioner.preservesOrder() : "ConfigHelper.setInputKeyRange(..) can only be used with a order preserving paritioner";
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,115,assert jobKeyRange.start_key == null : "only start_token supported";
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,116,assert jobKeyRange.end_key == null : "only end_token supported";
src/java/org/apache/cassandra/db/commitlog/BatchCommitLogExecutorService.java,85,long end = System.nanoTime() + (long)(1000000 * DatabaseDescriptor.getCommitLogSyncBatchWindow());
src/java/org/apache/cassandra/cache/ConcurrentLinkedHashCache.java,33,public class ConcurrentLinkedHashCache<K, V> implements ICache<K, V>
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,80,ColumnFamily cf = null;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,83,ColumnFamily thisCF;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,95,cf = thisCF;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,97,else
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,102,return cf;
examples/client_only/src/ClientOnlyExample.java,22,import org.apache.cassandra.db.*;
examples/client_only/src/ClientOnlyExample.java,23,import org.apache.cassandra.db.filter.QueryPath;
examples/client_only/src/ClientOnlyExample.java,24,import org.apache.cassandra.service.StorageProxy;
examples/client_only/src/ClientOnlyExample.java,25,import org.apache.cassandra.service.StorageService;
examples/client_only/src/ClientOnlyExample.java,26,import org.apache.cassandra.thrift.*;
examples/client_only/src/ClientOnlyExample.java,27,import org.apache.cassandra.utils.ByteBufferUtil;
examples/client_only/src/ClientOnlyExample.java,29,import org.apache.thrift.TException;
examples/client_only/src/ClientOnlyExample.java,30,import org.apache.thrift.protocol.TBinaryProtocol;
examples/client_only/src/ClientOnlyExample.java,31,import org.apache.thrift.protocol.TProtocol;
examples/client_only/src/ClientOnlyExample.java,32,import org.apache.thrift.transport.TFramedTransport;
examples/client_only/src/ClientOnlyExample.java,33,import org.apache.thrift.transport.TSocket;
examples/client_only/src/ClientOnlyExample.java,34,import org.apache.thrift.transport.TTransport;
examples/client_only/src/ClientOnlyExample.java,35,import org.apache.thrift.transport.TTransportException;
examples/client_only/src/ClientOnlyExample.java,44,private static final String KEYSPACE = "Keyspace1";
examples/client_only/src/ClientOnlyExample.java,45,private static final String COLUMN_FAMILY = "Standard1";
examples/client_only/src/ClientOnlyExample.java,51,try
examples/client_only/src/ClientOnlyExample.java,53,Thread.sleep(10000L);
examples/client_only/src/ClientOnlyExample.java,57,throw new AssertionError(ex);
examples/client_only/src/ClientOnlyExample.java,66,RowMutation change = new RowMutation(KEYSPACE, ByteBufferUtil.bytes(("key" + i)));
examples/client_only/src/ClientOnlyExample.java,67,ColumnPath cp = new ColumnPath(COLUMN_FAMILY).setColumn(("colb").getBytes());
examples/client_only/src/ClientOnlyExample.java,68,change.add(new QueryPath(cp), ByteBufferUtil.bytes(("value" + i)), 0);
examples/client_only/src/ClientOnlyExample.java,74,StorageProxy.mutate(Arrays.asList(change), ConsistencyLevel.ONE);
examples/client_only/src/ClientOnlyExample.java,85,add(ByteBufferUtil.bytes("colb"));
examples/client_only/src/ClientOnlyExample.java,89,List<ReadCommand> commands = new ArrayList<ReadCommand>();
examples/client_only/src/ClientOnlyExample.java,90,SliceByNamesReadCommand readCommand = new SliceByNamesReadCommand(KEYSPACE, ByteBufferUtil.bytes(("key" + i)),
examples/client_only/src/ClientOnlyExample.java,91,new QueryPath(COLUMN_FAMILY, null, null), cols);
examples/client_only/src/ClientOnlyExample.java,92,readCommand.setDigestQuery(false);
examples/client_only/src/ClientOnlyExample.java,93,commands.add(readCommand);
examples/client_only/src/ClientOnlyExample.java,94,List<Row> rows = StorageProxy.read(commands, ConsistencyLevel.ONE);
examples/client_only/src/ClientOnlyExample.java,96,Row row = rows.get(0);
examples/client_only/src/ClientOnlyExample.java,97,ColumnFamily cf = row.cf;
examples/client_only/src/ClientOnlyExample.java,102,System.out.println(ByteBufferUtil.string(col.name()) + ", " + ByteBufferUtil.string(col.value()));
examples/client_only/src/ClientOnlyExample.java,105,else
examples/client_only/src/ClientOnlyExample.java,106,System.err.println("This output indicates that nothing was read.");
examples/client_only/src/ClientOnlyExample.java,127,setupKeyspace(createConnection());
examples/client_only/src/ClientOnlyExample.java,132,Thread.currentThread().sleep(10000);
examples/client_only/src/ClientOnlyExample.java,151,private static void setupKeyspace(Cassandra.Iface client) throws TException, InvalidRequestException
examples/client_only/src/ClientOnlyExample.java,153,List<CfDef> cfDefList = new ArrayList<CfDef>();
examples/client_only/src/ClientOnlyExample.java,154,CfDef columnFamily = new CfDef(KEYSPACE, COLUMN_FAMILY);
examples/client_only/src/ClientOnlyExample.java,155,cfDefList.add(columnFamily);
examples/client_only/src/ClientOnlyExample.java,157,try
examples/client_only/src/ClientOnlyExample.java,159,client.system_add_keyspace(new KsDef(KEYSPACE, "org.apache.cassandra.locator.SimpleStrategy", 1, cfDefList));
examples/client_only/src/ClientOnlyExample.java,160,int magnitude = client.describe_ring(KEYSPACE).size();
examples/client_only/src/ClientOnlyExample.java,161,try
examples/client_only/src/ClientOnlyExample.java,163,Thread.sleep(1000 * magnitude);
examples/client_only/src/ClientOnlyExample.java,167,throw new RuntimeException(e);
examples/client_only/src/ClientOnlyExample.java,172,logger.warn("Problem creating keyspace: " + probablyExists.getMessage());
examples/client_only/src/ClientOnlyExample.java,176,private static Cassandra.Iface createConnection() throws TTransportException
examples/client_only/src/ClientOnlyExample.java,180,logger.warn("cassandra.host or cassandra.port is not defined, using default");
examples/client_only/src/ClientOnlyExample.java,182,return createConnection( System.getProperty("cassandra.host","localhost"),
examples/client_only/src/ClientOnlyExample.java,183,Integer.valueOf(System.getProperty("cassandra.port","9160")),
examples/client_only/src/ClientOnlyExample.java,184,Boolean.valueOf(System.getProperty("cassandra.framed", "true")) );
examples/client_only/src/ClientOnlyExample.java,187,private static Cassandra.Client createConnection(String host, Integer port, boolean framed) throws TTransportException
examples/client_only/src/ClientOnlyExample.java,189,TSocket socket = new TSocket(host, port);
examples/client_only/src/ClientOnlyExample.java,190,TTransport trans = framed ? new TFramedTransport(socket) : socket;
examples/client_only/src/ClientOnlyExample.java,191,trans.open();
examples/client_only/src/ClientOnlyExample.java,192,TProtocol protocol = new TBinaryProtocol(trans);
examples/client_only/src/ClientOnlyExample.java,194,return new Cassandra.Client(protocol);
src/java/org/apache/cassandra/service/StorageService.java,338,initClient(RING_DELAY);
src/java/org/apache/cassandra/service/StorageService.java,341,public synchronized void initClient(int delay) throws IOException, ConfigurationException
src/java/org/apache/cassandra/service/StorageService.java,354,Gossiper.instance.start((int)(System.currentTimeMillis() / 1000)); // needed for node-ring gathering.
src/java/org/apache/cassandra/service/StorageService.java,355,MessagingService.instance().listen(FBUtilities.getLocalAddress());
src/java/org/apache/cassandra/service/StorageService.java,360,Thread.sleep(delay);
src/java/org/apache/cassandra/gms/Gossiper.java,693,logger.trace("marking as dead {}", addr);
src/java/org/apache/cassandra/gms/Gossiper.java,697,logger.info("InetAddress {} is now dead.", addr);
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,318,try
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,322,finally
src/java/org/apache/cassandra/db/RowMutation.java,242,public synchronized byte[] getSerializedBuffer(int version) throws IOException
src/java/org/apache/cassandra/db/RowMutation.java,330,boolean hasCounters = false;
src/java/org/apache/cassandra/db/RowMutation.java,335,hasCounters = true;
src/java/org/apache/cassandra/db/RowMutation.java,336,break;
src/java/org/apache/cassandra/db/RowMutation.java,342,rm.preserializedBuffers.put(version, raw);
src/java/org/apache/cassandra/db/RowMutation.java,343,return rm;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,47,import org.apache.cassandra.concurrent.NamedThreadFactory;
src/java/org/apache/cassandra/db/ColumnFamilyStore.java,48,import org.apache.cassandra.concurrent.StageManager;
src/java/org/apache/cassandra/db/SystemTable.java,40,import org.apache.cassandra.config.DatabaseDescriptor;
src/java/org/apache/cassandra/db/SystemTable.java,43,import org.apache.cassandra.db.marshal.BytesType;
src/java/org/apache/cassandra/db/SystemTable.java,47,import org.apache.cassandra.utils.ByteBufferUtil;
src/java/org/apache/cassandra/db/SystemTable.java,48,import org.apache.cassandra.utils.FBUtilities;
src/java/org/apache/cassandra/service/StorageService.java,451,Gossiper.instance.start(SystemTable.incrementAndGetGeneration()); // needed for node-ring gathering.
src/java/org/apache/cassandra/service/StorageService.java,454,Gossiper.instance.addLocalApplicationState(ApplicationState.RPC_ADDRESS, valueFactory.rpcaddress(DatabaseDescriptor.getRpcAddress()));
src/java/org/apache/cassandra/service/StorageService.java,459,Gossiper.instance.addLocalApplicationState(ApplicationState.RELEASE_VERSION, valueFactory.releaseVersion());
src/java/org/apache/cassandra/service/StorageService.java,980,Gossiper.instance.removeEndpoint(endpoint);
src/java/org/apache/cassandra/db/Table.java,739,return Table.open(tableName);
src/java/org/apache/cassandra/service/StorageService.java,2283,List<ColumnFamilyStore> cfses = new ArrayList<ColumnFamilyStore>();
src/java/org/apache/cassandra/service/StorageService.java,2286,Table table = Table.open(tableName);
src/java/org/apache/cassandra/service/StorageService.java,2287,cfses.addAll(table.getColumnFamilyStores());
src/java/org/apache/cassandra/service/StorageService.java,2289,totalCFs = remainingCFs = cfses.size();
src/java/org/apache/cassandra/service/StorageService.java,2292,cfs.forceBlockingFlush();
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,974,AbstractCompactedRow row = nni.next();
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,975,validator.add(row);
src/java/org/apache/cassandra/service/StorageProxy.java,295,throws IOException
src/java/org/apache/cassandra/service/StorageService.java,1939,public void move(String newToken) throws IOException, InterruptedException, ConfigurationException
src/java/org/apache/cassandra/service/StorageService.java,2325,StorageProxy.truncateBlocking(keyspace, columnFamily);
src/java/org/apache/cassandra/service/StorageService.java,2354,public void updateSnitch(String epSnitchClassName, Boolean dynamic, Integer dynamicUpdateInterval, Integer dynamicResetInterval, Double dynamicBadnessThreshold) throws ConfigurationException
src/java/org/apache/cassandra/service/StorageService.java,2359,IEndpointSnitch newSnitch = FBUtilities.construct(epSnitchClassName, "snitch");
src/java/org/apache/cassandra/service/StorageServiceMBean.java,225,public void move(String newToken) throws IOException, InterruptedException, ConfigurationException;
src/java/org/apache/cassandra/service/StorageServiceMBean.java,267,public void truncate(String keyspace, String columnFamily) throws UnavailableException, TimeoutException, IOException;
src/java/org/apache/cassandra/service/StorageServiceMBean.java,292,public void updateSnitch(String epSnitchClassName, Boolean dynamic, Integer dynamicUpdateInterval, Integer dynamicResetInterval, Double dynamicBadnessThreshold) throws ConfigurationException;
src/java/org/apache/cassandra/tools/NodeProbe.java,350,public void joinRing() throws IOException, ConfigurationException
src/java/org/apache/cassandra/tools/NodeProbe.java,360,public void move(String newToken) throws IOException, InterruptedException, ConfigurationException
src/java/org/apache/cassandra/tools/NodeProbe.java,479,throw new RuntimeException("Error while executing truncate", e);
src/java/org/apache/cassandra/streaming/StreamHeader.java,27,import java.util.ArrayList;
src/java/org/apache/cassandra/streaming/StreamHeader.java,28,import java.util.Collection;
src/java/org/apache/cassandra/streaming/StreamHeader.java,29,import java.util.Collections;
src/java/org/apache/cassandra/streaming/StreamHeader.java,30,import java.util.List;
src/java/org/apache/cassandra/streaming/StreamHeader.java,54,public final long sessionId;
src/java/org/apache/cassandra/streaming/StreamHeader.java,77,dos.writeLong(sh.sessionId);
src/java/org/apache/cassandra/streaming/StreamHeader.java,89,long sessionId = dis.readLong();
src/java/org/apache/cassandra/streaming/StreamInSession.java,38,import org.apache.cassandra.utils.Pair;
src/java/org/apache/cassandra/streaming/StreamInSession.java,65,StreamInSession session = new StreamInSession(context, callback);
src/java/org/apache/cassandra/streaming/StreamInSession.java,66,sessions.put(context, session);
src/java/org/apache/cassandra/streaming/StreamInSession.java,73,StreamInSession session = sessions.get(context);
src/java/org/apache/cassandra/streaming/StreamInSession.java,76,StreamInSession possibleNew = new StreamInSession(context, null);
src/java/org/apache/cassandra/streaming/StreamInSession.java,205,StreamInSession session = entry.getValue();
src/java/org/apache/cassandra/streaming/StreamOutSession.java,42,private static final ConcurrentMap<Pair<InetAddress, Long>, StreamOutSession> streams = new NonBlockingHashMap<Pair<InetAddress, Long>, StreamOutSession>();
src/java/org/apache/cassandra/streaming/StreamOutSession.java,57,StreamOutSession session = new StreamOutSession(table, context, callback);
src/java/org/apache/cassandra/streaming/StreamOutSession.java,58,streams.put(context, session);
src/java/org/apache/cassandra/streaming/StreamOutSession.java,125,streams.remove(context);
src/java/org/apache/cassandra/streaming/StreamOutSession.java,158,list.addAll(entry.getValue().getFiles());
src/java/org/apache/cassandra/streaming/StreamReply.java,46,public final long sessionId;
src/java/org/apache/cassandra/streaming/StreamReply.java,79,dos.writeLong(reply.sessionId);
src/java/org/apache/cassandra/streaming/StreamReply.java,86,long sessionId = dis.readLong();
src/java/org/apache/cassandra/gms/Gossiper.java,960,HeartBeatState hbState = new HeartBeatState(generationNbr);
src/java/org/apache/cassandra/gms/Gossiper.java,961,localState = new EndpointState(hbState);
src/java/org/apache/cassandra/gms/Gossiper.java,962,localState.markAlive();
src/java/org/apache/cassandra/gms/Gossiper.java,1005,EndpointState localState = endpointStateMap.get(addr);
src/java/org/apache/cassandra/gms/Gossiper.java,1008,HeartBeatState hbState = new HeartBeatState(generationNbr);
src/java/org/apache/cassandra/gms/Gossiper.java,1009,localState = new EndpointState(hbState);
src/java/org/apache/cassandra/gms/Gossiper.java,1010,localState.markAlive();
src/java/org/apache/cassandra/gms/Gossiper.java,1011,endpointStateMap.put(addr, localState);
src/java/org/apache/cassandra/service/StorageService.java,380,initialized = true;
src/java/org/apache/cassandra/tools/NodeCmd.java,886,toReturn[i - 1] = (String) params.get(i);
src/java/org/apache/cassandra/concurrent/Stage.java,28,STREAM,
src/java/org/apache/cassandra/concurrent/Stage.java,46,case STREAM:
src/java/org/apache/cassandra/concurrent/StageManager.java,48,stages.put(Stage.STREAM, new JMXEnabledThreadPoolExecutor(Stage.STREAM));
src/java/org/apache/cassandra/tools/BulkLoader.java,37,import org.apache.commons.cli.*;
src/java/org/apache/cassandra/tools/BulkLoader.java,153,sb.append(" (avg: ").append(mbPerSec(totalProgress, time - startTime)).append("MB/s)]");;
src/java/org/apache/cassandra/tools/BulkLoader.java,167,private final Map<String, Set<String>> knownCfs = new HashMap<String, Set<String>>();
src/java/org/apache/cassandra/tools/BulkLoader.java,237,Set<String> cfs = knownCfs.get(keyspace);
src/java/org/apache/cassandra/tools/BulkLoader.java,238,return cfs != null && cfs.contains(cfName);
src/java/org/apache/cassandra/io/util/FileUtils.java,119,public static class FileComparator implements Comparator<File>
src/java/org/apache/cassandra/io/util/FileUtils.java,123,return (int)(f.lastModified() - f2.lastModified());
src/java/org/apache/cassandra/service/ClientState.java,56,reset();
src/java/org/apache/cassandra/service/ClientState.java,94,logger.debug("logged out: {}", user);
src/java/org/apache/cassandra/service/ClientState.java,95,reset();
src/java/org/apache/cassandra/service/ClientState.java,107,user = DatabaseDescriptor.getAuthenticator().defaultUser();
src/java/org/apache/cassandra/service/ClientState.java,108,keyspace = null;
src/java/org/apache/cassandra/service/ClientState.java,109,resourceClear();
src/java/org/apache/cassandra/service/SocketSessionManagementService.java,24,import java.net.SocketAddress;
src/java/org/apache/cassandra/service/SocketSessionManagementService.java,25,import java.util.Map;
src/java/org/apache/cassandra/service/SocketSessionManagementService.java,26,import java.util.concurrent.ConcurrentHashMap;
src/java/org/apache/cassandra/service/SocketSessionManagementService.java,28,public class SocketSessionManagementService
src/java/org/apache/cassandra/service/SocketSessionManagementService.java,30,public final static SocketSessionManagementService instance = new SocketSessionManagementService();
src/java/org/apache/cassandra/service/SocketSessionManagementService.java,31,public final static ThreadLocal<SocketAddress> remoteSocket = new ThreadLocal<SocketAddress>();
src/java/org/apache/cassandra/service/SocketSessionManagementService.java,36,ClientState retval = null;
src/java/org/apache/cassandra/service/SocketSessionManagementService.java,39,retval = activeSocketSessions.get(key);
src/java/org/apache/cassandra/service/SocketSessionManagementService.java,41,return retval;
src/java/org/apache/cassandra/service/SocketSessionManagementService.java,48,activeSocketSessions.put(key, value);
src/java/org/apache/cassandra/service/SocketSessionManagementService.java,65,activeSocketSessions.clear();
src/java/org/apache/cassandra/thrift/CassandraServer.java,25,import java.net.SocketAddress;
src/java/org/apache/cassandra/thrift/CassandraServer.java,45,import org.apache.cassandra.config.*;
src/java/org/apache/cassandra/thrift/CassandraServer.java,76,return new ClientState();
src/java/org/apache/cassandra/thrift/CassandraServer.java,92,SocketAddress remoteSocket = SocketSessionManagementService.remoteSocket.get();
src/java/org/apache/cassandra/thrift/CustomTHsHaServer.java,34,import org.apache.cassandra.service.SocketSessionManagementService;
src/java/org/apache/cassandra/thrift/CustomTHsHaServer.java,40,import org.slf4j.Logger;
src/java/org/apache/cassandra/thrift/CustomTHsHaServer.java,41,import org.slf4j.LoggerFactory;
src/java/org/apache/cassandra/thrift/CustomTHsHaServer.java,104,SocketSessionManagementService.remoteSocket.set(socket.getSocketChannel().socket().getRemoteSocketAddress());
src/java/org/apache/cassandra/thrift/CustomTNonBlockingServer.java,24,import org.apache.cassandra.service.SocketSessionManagementService;
src/java/org/apache/cassandra/thrift/CustomTNonBlockingServer.java,39,SocketSessionManagementService.remoteSocket.set(socket.getSocketChannel().socket().getRemoteSocketAddress());
src/java/org/apache/cassandra/thrift/TCustomNonblockingServerSocket.java,28,import org.apache.cassandra.service.SocketSessionManagementService;
src/java/org/apache/cassandra/thrift/TCustomNonblockingServerSocket.java,58,SocketSessionManagementService.instance.remove(socket.getRemoteSocketAddress());
src/java/org/apache/cassandra/locator/PropertyFileSnitch.java,104,return getEndpointInfo(endpoint)[0];
src/java/org/apache/cassandra/locator/PropertyFileSnitch.java,115,return getEndpointInfo(endpoint)[1];
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,81,throw new UnsupportedOperationException("you must set the keyspace and columnfamily with setColumnFamily()");
src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java,85,throw new UnsupportedOperationException("you must set the predicate with setPredicate");
src/java/org/apache/cassandra/locator/TokenMetadata.java,682,return naturalEndpoints;
src/java/org/apache/cassandra/locator/TokenMetadata.java,684,Set<InetAddress> endpoints = new HashSet<InetAddress>(naturalEndpoints);
src/java/org/apache/cassandra/service/AbstractWriteResponseHandler.java,42,protected final Collection<InetAddress> writeEndpoints;
src/java/org/apache/cassandra/service/AbstractWriteResponseHandler.java,51,this.writeEndpoints = writeEndpoints;
src/java/org/apache/cassandra/service/DatacenterWriteResponseHandler.java,33,import org.apache.cassandra.db.Table;
src/java/org/apache/cassandra/service/DatacenterWriteResponseHandler.java,35,import org.apache.cassandra.locator.NetworkTopologyStrategy;
src/java/org/apache/cassandra/service/StorageProxy.java,211,Collection<InetAddress> writeEndpoints = getWriteEndpoints(table, mutation.key());
src/java/org/apache/cassandra/service/StorageProxy.java,225,StorageService ss = StorageService.instance;
src/java/org/apache/cassandra/service/StorageProxy.java,398,Collection<InetAddress> writeEndpoints = getWriteEndpoints(table, cm.key());
src/java/org/apache/cassandra/service/WriteResponseHandler.java,31,import org.apache.cassandra.db.Table;
tools/stress/src/org/apache/cassandra/stress/Session.java,414,CfDef standardCfDef = new CfDef("Keyspace1", "Standard1");
tools/stress/src/org/apache/cassandra/stress/Session.java,424,CfDef superCfDef = new CfDef("Keyspace1", "Super1").setColumn_type("Super");
tools/stress/src/org/apache/cassandra/stress/Session.java,433,keyspace.setName("Keyspace1");
src/java/org/apache/cassandra/utils/ByteBufferUtil.java,32,import static com.google.common.base.Charsets.UTF_8;
src/java/org/apache/cassandra/config/Config.java,36,public Boolean hinted_handoff_enabled = true;
src/java/org/apache/cassandra/config/Config.java,87,public Integer compaction_throughput_mb_per_sec = 16;
src/java/org/apache/cassandra/config/Config.java,120,public boolean incremental_backups = false;
src/java/org/apache/cassandra/service/StorageProxy.java,1033,return hintedHandoffEnabled;
src/java/org/apache/cassandra/service/StorageProxy.java,1038,hintedHandoffEnabled = b;
src/java/org/apache/cassandra/service/StorageProxy.java,1048,return maxHintWindow;
src/java/org/apache/cassandra/service/StorageProxy.java,1053,maxHintWindow = ms;
src/java/org/apache/cassandra/cli/CliClient.java,1001,validateSchemaIsSettled(mySchemaVersion);
src/java/org/apache/cassandra/cli/CliClient.java,1032,validateSchemaIsSettled(mySchemaVersion);
src/java/org/apache/cassandra/cli/CliClient.java,1063,validateSchemaIsSettled(mySchemaVersion);
src/java/org/apache/cassandra/cli/CliClient.java,1097,validateSchemaIsSettled(mySchemaVersion);
src/java/org/apache/cassandra/cli/CliClient.java,1289,validateSchemaIsSettled(version);
src/java/org/apache/cassandra/cli/CliClient.java,1312,validateSchemaIsSettled(mySchemaVersion);
src/java/org/apache/cassandra/cli/CliClient.java,2708,sessionState.out.println("Waiting for schema agreement...");
src/java/org/apache/cassandra/cli/CliClient.java,2709,Map<String, List<String>> versions = null;
src/java/org/apache/cassandra/cli/CliClient.java,2711,long limit = System.currentTimeMillis() + sessionState.schema_mwt;
src/java/org/apache/cassandra/cli/CliClient.java,2712,boolean inAgreement = false;
src/java/org/apache/cassandra/cli/CliClient.java,2713,outer:
src/java/org/apache/cassandra/cli/CliClient.java,2716,try
src/java/org/apache/cassandra/cli/CliClient.java,2718,versions = thriftClient.describe_schema_versions(); // getting schema version for nodes of the ring
src/java/org/apache/cassandra/cli/CliClient.java,2722,sessionState.err.println((e instanceof InvalidRequestException) ? ((InvalidRequestException) e).getWhy() : e.getMessage());
src/java/org/apache/cassandra/cli/CliClient.java,2723,continue;
src/java/org/apache/cassandra/cli/CliClient.java,2729,continue outer;
src/java/org/apache/cassandra/cli/CliClient.java,2731,inAgreement = true;
src/java/org/apache/cassandra/cli/CliClient.java,2735,sessionState.err.printf("Warning: unreachable nodes %s", Joiner.on(", ").join(versions.get(StorageProxy.UNREACHABLE)));
src/java/org/apache/cassandra/cli/CliClient.java,2738,sessionState.err.printf("The schema has not settled in %d seconds; further migrations are ill-advised until it does.%nVersions are %s%n",
src/java/org/apache/cassandra/cli/CliClient.java,2739,sessionState.schema_mwt / 1000, FBUtilities.toString(versions));
src/java/org/apache/cassandra/cli/CliClient.java,2740,System.exit(-1);
src/java/org/apache/cassandra/cli/CliClient.java,2742,sessionState.out.println("... schemas agree across the cluster");
src/java/org/apache/cassandra/cql/QueryProcessor.java,66,private static final long timeLimitForSchemaAgreement = 10 * 1000;
src/java/org/apache/cassandra/cql/QueryProcessor.java,482,private static void validateSchemaAgreement() throws SchemaDisagreementException
src/java/org/apache/cassandra/cql/QueryProcessor.java,485,throw new SchemaDisagreementException();
src/java/org/apache/cassandra/cql/QueryProcessor.java,666,validateSchemaAgreement();
src/java/org/apache/cassandra/cql/QueryProcessor.java,697,validateSchemaAgreement();
src/java/org/apache/cassandra/cql/QueryProcessor.java,722,validateSchemaAgreement();
src/java/org/apache/cassandra/cql/QueryProcessor.java,774,validateSchemaAgreement();
src/java/org/apache/cassandra/cql/QueryProcessor.java,799,validateSchemaAgreement();
src/java/org/apache/cassandra/cql/QueryProcessor.java,824,validateSchemaAgreement();
src/java/org/apache/cassandra/cql/QueryProcessor.java,851,validateSchemaAgreement();
src/java/org/apache/cassandra/cql/QueryProcessor.java,972,private static void validateSchemaIsSettled() throws SchemaDisagreementException
src/java/org/apache/cassandra/cql/QueryProcessor.java,974,long limit = System.currentTimeMillis() + timeLimitForSchemaAgreement;
src/java/org/apache/cassandra/cql/QueryProcessor.java,976,outer:
src/java/org/apache/cassandra/cql/QueryProcessor.java,983,continue outer;
src/java/org/apache/cassandra/cql/QueryProcessor.java,987,return;
src/java/org/apache/cassandra/cql/QueryProcessor.java,990,throw new SchemaDisagreementException();
src/java/org/apache/cassandra/thrift/CassandraServer.java,833,validateSchemaAgreement();
src/java/org/apache/cassandra/thrift/CassandraServer.java,859,validateSchemaAgreement();
src/java/org/apache/cassandra/thrift/CassandraServer.java,885,validateSchemaAgreement();
src/java/org/apache/cassandra/thrift/CassandraServer.java,930,validateSchemaAgreement();
src/java/org/apache/cassandra/thrift/CassandraServer.java,961,validateSchemaAgreement();
src/java/org/apache/cassandra/thrift/CassandraServer.java,995,validateSchemaAgreement();
src/java/org/apache/cassandra/thrift/CassandraServer.java,1019,private void validateSchemaAgreement() throws SchemaDisagreementException
src/java/org/apache/cassandra/thrift/CassandraServer.java,1022,Map<String, List<String>> versions = Maps.filterKeys(StorageProxy.describeSchemaVersions(),
src/java/org/apache/cassandra/thrift/CassandraServer.java,1023,Predicates.not(Predicates.equalTo(StorageProxy.UNREACHABLE)));
src/java/org/apache/cassandra/thrift/CassandraServer.java,1025,throw new SchemaDisagreementException();
src/java/org/apache/cassandra/service/ReadCallback.java,150,return true;
src/java/org/apache/cassandra/service/ReadCallback.java,155,((RowDigestResolver) resolver).injectPreProcessed(result);
src/java/org/apache/cassandra/service/ReadCallback.java,158,: received.get();
src/java/org/apache/cassandra/service/ReadCallback.java,161,condition.signal();
src/java/org/apache/cassandra/service/ReadCallback.java,162,maybeResolveForRepair();
src/java/org/apache/cassandra/service/StorageProxy.java,707,logger.debug("local range slice");
src/java/org/apache/cassandra/service/StorageProxy.java,732,handler.assureSufficientLiveNodes();
src/java/org/apache/cassandra/tools/SSTableExport.java,25,import java.util.*;
src/java/org/apache/cassandra/tools/SSTableExport.java,30,import org.apache.cassandra.db.*;
src/java/org/apache/cassandra/tools/SSTableExport.java,35,import org.apache.commons.cli.*;
src/java/org/apache/cassandra/tools/SSTableExport.java,37,import org.apache.cassandra.config.ConfigurationException;
src/java/org/apache/cassandra/tools/SSTableExport.java,39,import org.apache.cassandra.io.sstable.*;
src/java/org/apache/cassandra/tools/SSTableExport.java,44,import static org.apache.cassandra.utils.ByteBufferUtil.bytesToHex;
src/java/org/apache/cassandra/tools/SSTableExport.java,45,import static org.apache.cassandra.utils.ByteBufferUtil.hexToBytes;
src/java/org/apache/cassandra/tools/SSTableExport.java,166,writeKey(out, bytesToHex(key.key));
src/java/org/apache/cassandra/tools/SSTableExport.java,177,writeKey(out, "deletedAt");
src/java/org/apache/cassandra/tools/SSTableExport.java,178,out.print(column.getMarkedForDeleteAt());
src/java/org/apache/cassandra/tools/SSTableExport.java,179,out.print(", ");
src/java/org/apache/cassandra/tools/SSTableExport.java,246,outs.println("{");
src/java/org/apache/cassandra/tools/SSTableExport.java,279,outs.println("\n}");
src/java/org/apache/cassandra/tools/SSTableExport.java,298,outs.println("{");
src/java/org/apache/cassandra/tools/SSTableExport.java,319,outs.println("\n}");
src/java/org/apache/cassandra/tools/SSTableImport.java,24,import java.util.*;
src/java/org/apache/cassandra/tools/SSTableImport.java,26,import org.apache.cassandra.db.marshal.AbstractType;
src/java/org/apache/cassandra/tools/SSTableImport.java,27,import org.apache.cassandra.db.marshal.BytesType;
src/java/org/apache/cassandra/tools/SSTableImport.java,28,import org.apache.cassandra.db.marshal.MarshalException;
src/java/org/apache/cassandra/tools/SSTableImport.java,29,import org.apache.commons.cli.*;
src/java/org/apache/cassandra/tools/SSTableImport.java,34,import org.apache.cassandra.db.*;
src/java/org/apache/cassandra/tools/SSTableImport.java,38,import org.codehaus.jackson.type.TypeReference;
src/java/org/apache/cassandra/tools/SSTableImport.java,41,import org.codehaus.jackson.map.MappingJsonFactory;
src/java/org/apache/cassandra/tools/SSTableImport.java,45,import static org.apache.cassandra.utils.ByteBufferUtil.hexToBytes;
src/java/org/apache/cassandra/tools/SSTableImport.java,60,private static Integer keyCountToImport = null;
src/java/org/apache/cassandra/tools/SSTableImport.java,61,private static boolean isSorted = false;
src/java/org/apache/cassandra/tools/SSTableImport.java,228,addColumnsToCF((List<?>) data.get("subColumns"), stringAsType((String) entry.getKey(), comparator), cfamily);
src/java/org/apache/cassandra/tools/SSTableImport.java,247,public static void importJson(String jsonFile, String keyspace, String cf, String ssTablePath) throws IOException
src/java/org/apache/cassandra/tools/SSTableImport.java,253,: importUnsorted(getParser(jsonFile), columnFamily, ssTablePath, partitioner);
src/java/org/apache/cassandra/tools/SSTableImport.java,259,private static int importUnsorted(JsonParser parser, ColumnFamily columnFamily, String ssTablePath, IPartitioner<?> partitioner) throws IOException
src/java/org/apache/cassandra/tools/SSTableImport.java,263,Map<?, ?> data = parser.readValueAs(new TypeReference<Map<?, ?>>() {});
src/java/org/apache/cassandra/tools/SSTableImport.java,265,keyCountToImport = (keyCountToImport == null) ? data.size() : keyCountToImport;
src/java/org/apache/cassandra/tools/SSTableImport.java,271,SortedMap<DecoratedKey,String> decoratedKeys = new TreeMap<DecoratedKey,String>();
src/java/org/apache/cassandra/tools/SSTableImport.java,275,String key = (String) keyObject;
src/java/org/apache/cassandra/tools/SSTableImport.java,276,decoratedKeys.put(partitioner.decorateKey(hexToBytes(key)), key);
src/java/org/apache/cassandra/tools/SSTableImport.java,283,addToSuperCF((Map<?, ?>) data.get(rowKey.getValue()), columnFamily);
src/java/org/apache/cassandra/tools/SSTableImport.java,287,addToStandardCF((List<?>) data.get(rowKey.getValue()), columnFamily);
src/java/org/apache/cassandra/tools/SSTableImport.java,290,writer.append(rowKey.getKey(), columnFamily);
src/java/org/apache/cassandra/tools/SSTableImport.java,312,public static int importSorted(String jsonFile, ColumnFamily columnFamily, String ssTablePath, IPartitioner<?> partitioner) throws IOException
src/java/org/apache/cassandra/tools/SSTableImport.java,324,parser.nextToken(); // START_OBJECT
src/java/org/apache/cassandra/tools/SSTableImport.java,327,parser.nextToken();
src/java/org/apache/cassandra/tools/SSTableImport.java,329,if (parser.getCurrentName() == null) continue;
src/java/org/apache/cassandra/tools/SSTableImport.java,349,String tokenName = parser.nextToken().name();
src/java/org/apache/cassandra/tools/SSTableImport.java,355,throw new RuntimeException("Can't write Standard columns to the Super Column Family.");
src/java/org/apache/cassandra/tools/SSTableImport.java,358,List<?> columns = parser.readValueAs(new TypeReference<List<?>>() {});
src/java/org/apache/cassandra/tools/SSTableImport.java,359,addToStandardCF(columns, columnFamily);
src/java/org/apache/cassandra/tools/SSTableImport.java,365,throw new RuntimeException("Can't write Super columns to the Standard Column Family.");
src/java/org/apache/cassandra/tools/SSTableImport.java,368,Map<?, ?> columns = parser.readValueAs(new TypeReference<Map<?, ?>>() {});
src/java/org/apache/cassandra/tools/SSTableImport.java,369,addToSuperCF(columns, columnFamily);
src/java/org/apache/cassandra/tools/SSTableImport.java,371,else
src/java/org/apache/cassandra/tools/SSTableImport.java,373,throw new UnsupportedOperationException("Only Array or Hash allowed as row content.");
src/java/org/apache/cassandra/tools/SSTableImport.java,376,DecoratedKey currentKey = partitioner.decorateKey(hexToBytes(key));
src/java/org/apache/cassandra/tools/SSTableImport.java,380,System.err.printf("Line %d: Key %s is greater than previous, collection is not sorted properly. Aborting import. You might need to delete SSTables manually.%n", lineNumber, key);
src/java/org/apache/cassandra/tools/SSTableImport.java,381,return -1;
src/java/org/apache/cassandra/tools/SSTableImport.java,385,writer.append(currentKey, columnFamily);
src/java/org/apache/cassandra/tools/SSTableImport.java,386,columnFamily.clear();
src/java/org/apache/cassandra/tools/SSTableImport.java,388,prevStoredKey = currentKey;
src/java/org/apache/cassandra/tools/SSTableImport.java,389,importedKeys++;
src/java/org/apache/cassandra/tools/SSTableImport.java,390,lineNumber++;
src/java/org/apache/cassandra/tools/SSTableImport.java,392,long current = System.currentTimeMillis();
src/java/org/apache/cassandra/tools/SSTableImport.java,394,if (current - start >= 5000) // 5 secs.
src/java/org/apache/cassandra/tools/SSTableImport.java,396,System.out.printf("Currently imported %d keys.%n", importedKeys);
src/java/org/apache/cassandra/tools/SSTableImport.java,397,start = current;
src/java/org/apache/cassandra/tools/SSTableImport.java,401,break;
src/java/org/apache/cassandra/tools/SSTableImport.java,416,private static JsonParser getParser(String fileName) throws IOException
src/java/org/apache/cassandra/tools/SSTableImport.java,476,importJson(json, keyspace, cfamily, ssTable);
src/java/org/apache/cassandra/tools/SSTableImport.java,507,keyCountToImport = keyCount;
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,82,List<InetAddress> endpoints = new ArrayList<InetAddress>(getReplicationFactor());
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,86,String dcName = dcEntry.getKey();
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,87,int dcReplicas = dcEntry.getValue();
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,97,List<InetAddress> dcEndpoints = new ArrayList<InetAddress>(dcReplicas);
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,98,Set<String> racks = new HashSet<String>();
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,100,for (Iterator<Token> iter = TokenMetadata.ringIterator(dcTokens.sortedTokens(), searchToken, false);
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,103,Token token = iter.next();
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,104,InetAddress endpoint = dcTokens.getEndpoint(token);
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,105,String rack = snitch.getRack(endpoint);
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,108,dcEndpoints.add(endpoint);
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,109,racks.add(rack);
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,114,for (Iterator<Token> iter = TokenMetadata.ringIterator(dcTokens.sortedTokens(), searchToken, false);
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,117,Token token = iter.next();
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,118,InetAddress endpoint = dcTokens.getEndpoint(token);
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,120,dcEndpoints.add(endpoint);
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,124,logger.debug("{} endpoints in datacenter {} for token {} ",
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,125,new Object[] { StringUtils.join(dcEndpoints, ","), dcName, searchToken});
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,126,endpoints.addAll(dcEndpoints);
src/java/org/apache/cassandra/locator/NetworkTopologyStrategy.java,129,return endpoints;
src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java,228,return getAddressRanges(tokenMetadata);
src/java/org/apache/cassandra/locator/TokenMetadata.java,70,private ArrayList<Token> sortedTokens;
src/java/org/apache/cassandra/locator/TokenMetadata.java,77,this(null);
src/java/org/apache/cassandra/locator/TokenMetadata.java,83,tokenToEndpointMap = HashBiMap.create();
src/java/org/apache/cassandra/locator/TokenMetadata.java,335,return new TokenMetadata(HashBiMap.create(tokenToEndpointMap));
src/java/org/apache/cassandra/locator/TokenMetadata.java,421,lock.readLock().lock();
src/java/org/apache/cassandra/locator/TokenMetadata.java,422,try
src/java/org/apache/cassandra/locator/TokenMetadata.java,424,return sortedTokens;
src/java/org/apache/cassandra/locator/TokenMetadata.java,426,finally
src/java/org/apache/cassandra/locator/TokenMetadata.java,428,lock.readLock().unlock();
src/java/org/apache/cassandra/locator/TokenMetadata.java,488,return bootstrapTokens;
src/java/org/apache/cassandra/service/StorageService.java,1051,Set<InetAddress> currentEndpoints = ImmutableSet.copyOf(strategy.calculateNaturalEndpoints(range.right, tm));
src/java/org/apache/cassandra/service/StorageService.java,2027,Set<InetAddress> newEndpoints = ImmutableSet.copyOf(strategy.calculateNaturalEndpoints(toStream.right, tokenMetaClone));
src/java/org/apache/cassandra/gms/Gossiper.java,198,versions.put(address, version);
src/java/org/apache/cassandra/net/IncomingTcpConnection.java,69,MessagingService.validateMagic(input.readInt());
src/java/org/apache/cassandra/net/IncomingTcpConnection.java,70,int header = input.readInt();
src/java/org/apache/cassandra/net/IncomingTcpConnection.java,114,int size = input.readInt();
src/java/org/apache/cassandra/net/IncomingTcpConnection.java,115,byte[] headerBytes = new byte[size];
src/java/org/apache/cassandra/net/IncomingTcpConnection.java,116,input.readFully(headerBytes);
src/java/org/apache/cassandra/net/IncomingTcpConnection.java,120,else
src/java/org/apache/cassandra/net/IncomingTcpConnection.java,144,MessagingService.validateMagic(input.readInt());
src/java/org/apache/cassandra/net/IncomingTcpConnection.java,146,assert isStream == (MessagingService.getBits(header, 3, 1) == 1) : "Connections cannot change type: " + isStream;
src/java/org/apache/cassandra/net/IncomingTcpConnection.java,147,version = MessagingService.getBits(header, 15, 8);
src/java/org/apache/cassandra/net/MessagingService.java,48,import org.apache.cassandra.net.io.SerializerType;
src/java/org/apache/cassandra/net/MessagingService.java,511,return x >>> (p + 1) - n & ~(-1 << n);
src/java/org/apache/cassandra/net/MessagingService.java,547,Setting up the protocol header. This is 4 bytes long
src/java/org/apache/cassandra/net/MessagingService.java,548,represented as an integer. The first 2 bits indicate
src/java/org/apache/cassandra/net/MessagingService.java,549,the serializer type. The 3rd bit indicates if compression
src/java/org/apache/cassandra/net/MessagingService.java,550,is turned on or off. It is turned off by default. The 4th
src/java/org/apache/cassandra/net/MessagingService.java,551,bit indicates if we are in streaming mode. It is turned off
src/java/org/apache/cassandra/net/MessagingService.java,552,by default. The following 4 bits are reserved for future use.
src/java/org/apache/cassandra/net/MessagingService.java,553,The next 8 bits indicate a version number. Remaining 15 bits
src/java/org/apache/cassandra/net/MessagingService.java,554,are not used currently.
src/java/org/apache/cassandra/net/io/SerializerType.java,19,package org.apache.cassandra.net.io;
src/java/org/apache/cassandra/net/io/SerializerType.java,21,public enum SerializerType
src/java/org/apache/cassandra/net/io/SerializerType.java,23,BINARY,
src/java/org/apache/cassandra/net/io/SerializerType.java,24,JAVA,
src/java/org/apache/cassandra/net/io/SerializerType.java,25,XML,
src/java/org/apache/cassandra/net/io/SerializerType.java,26,JSON
src/java/org/apache/cassandra/streaming/StreamIn.java,78,Descriptor localdesc = Descriptor.fromFilename(cfStore.getFlushPath(remote.size, remote.desc.version));
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,26,import java.util.concurrent.LinkedBlockingDeque;
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,35,import org.apache.cassandra.utils.AbstractStatsDeque;
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,53,private final ConcurrentHashMap<InetAddress, AdaptiveLatencyTracker> windows = new ConcurrentHashMap<InetAddress, AdaptiveLatencyTracker>();
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,206,AdaptiveLatencyTracker tracker = windows.get(host);
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,209,AdaptiveLatencyTracker alt = new AdaptiveLatencyTracker(WINDOW_SIZE);
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,210,tracker = windows.putIfAbsent(host, alt);
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,212,tracker = alt;
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,214,tracker.add(latency);
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,233,scores.put(entry.getKey(), entry.getValue().score());
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,242,tracker.clear();
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,272,AdaptiveLatencyTracker window = windows.get(host);
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,286,class AdaptiveLatencyTracker extends AbstractStatsDeque
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,288,private final LinkedBlockingDeque<Double> latencies;
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,292,latencies = new LinkedBlockingDeque<Double>(size);
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,299,try
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,301,latencies.remove();
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,307,latencies.offer(i);
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,313,latencies.clear();
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,318,return latencies.iterator();
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,323,return latencies.size();
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,328,return (size() > 0) ? mean() : 0.0;
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,19,package org.apache.cassandra.utils;
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,21,import java.util.Iterator;
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,23,public abstract class AbstractStatsDeque implements Iterable<Double>
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,25,public abstract Iterator<Double> iterator();
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,26,public abstract int size();
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,27,public abstract void add(double o);
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,28,public abstract void clear();
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,36,double sum = 0d;
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,39,sum += interval;
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,41,return sum;
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,46,double sumOfDeviations = 0d;
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,47,double mean = mean();
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,51,double v = interval - mean;
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,52,sumOfDeviations += v * v;
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,55,return sumOfDeviations;
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,60,return sum() / size();
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,65,return sumOfDeviations() / size();
src/java/org/apache/cassandra/utils/AbstractStatsDeque.java,70,return Math.sqrt(variance());
src/java/org/apache/cassandra/utils/BoundedStatsDeque.java,27,public class BoundedStatsDeque extends AbstractStatsDeque
src/java/org/apache/cassandra/gms/EndpointState.java,24,import java.util.Map;
src/java/org/apache/cassandra/gms/Gossiper.java,590,int localHbVersion = epState.getHeartBeatState().getHeartBeatVersion();
src/java/org/apache/cassandra/net/MessagingService.java,201,getConnectionPool(ep).reset();
src/java/org/apache/cassandra/net/MessagingService.java,273,return getConnectionPool(to).getConnection(msg);
src/java/org/apache/cassandra/locator/TokenMetadata.java,437,map = HashMultimap.create();
src/java/org/apache/cassandra/locator/TokenMetadata.java,440,map = priorMap;
src/java/org/apache/cassandra/locator/TokenMetadata.java,643,sb.append(System.getProperty("line.separator"));
src/java/org/apache/cassandra/net/MessagingService.java,655,server.close();
src/java/org/apache/cassandra/locator/PropertyFileSnitch.java,60,reloadConfiguration();
src/java/org/apache/cassandra/locator/PropertyFileSnitch.java,68,reloadConfiguration();
src/java/org/apache/cassandra/locator/PropertyFileSnitch.java,118,public void reloadConfiguration() throws ConfigurationException
src/java/org/apache/cassandra/gms/Gossiper.java,747,return true;
src/java/org/apache/cassandra/gms/Gossiper.java,749,return false;
src/java/org/apache/cassandra/gms/Gossiper.java,741,String[] pieces = value.split(VersionedValue.DELIMITER_STR, -1);
src/java/org/apache/cassandra/gms/Gossiper.java,742,assert (pieces.length > 0);
src/java/org/apache/cassandra/gms/Gossiper.java,743,String state = pieces[0];
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,120,DataOutputBuffer buffer = new DataOutputBuffer();
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,121,try
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,129,throw new RuntimeException(e);
src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java,109,logExceptionsAfterExecute(r, t);
src/java/org/apache/cassandra/tools/SSTableExport.java,255,DecoratedKey decoratedKey = partitioner.decorateKey(hexToBytes(key));
src/java/org/apache/cassandra/tools/SSTableExport.java,287,static void export(SSTableReader reader, PrintStream outs, String[] excludes) throws IOException
src/java/org/apache/cassandra/tools/SSTableImport.java,520,return (type == BytesType.instance) ? hexToBytes(content) : type.fromString(content);
src/java/org/apache/cassandra/service/GCInspector.java,84,logGCResults();
src/java/org/apache/cassandra/service/GCInspector.java,87,StorageService.scheduledTasks.scheduleWithFixedDelay(t, INTERVAL_IN_MS, INTERVAL_IN_MS, TimeUnit.MILLISECONDS);
src/java/org/apache/cassandra/service/GCInspector.java,94,Long previousTotal = gctimes.get(gc.getName());
src/java/org/apache/cassandra/service/GCInspector.java,95,Long total = gc.getCollectionTime();
src/java/org/apache/cassandra/service/GCInspector.java,97,previousTotal = 0L;
src/java/org/apache/cassandra/service/GCInspector.java,99,continue;
src/java/org/apache/cassandra/service/GCInspector.java,100,gctimes.put(gc.getName(), total);
src/java/org/apache/cassandra/service/GCInspector.java,104,Long previousCount = gccounts.get(gc.getName());
src/java/org/apache/cassandra/service/GCInspector.java,105,Long count = gc.getCollectionCount();
src/java/org/apache/cassandra/service/GCInspector.java,110,continue;
src/java/org/apache/cassandra/service/GCInspector.java,112,gccounts.put(gc.getName(), count);
src/java/org/apache/cassandra/service/GCInspector.java,114,MemoryUsage mu = membean.getHeapMemoryUsage();
src/java/org/apache/cassandra/service/GCInspector.java,115,long memoryUsed = mu.getUsed();
src/java/org/apache/cassandra/service/GCInspector.java,116,long memoryMax = mu.getMax();
src/java/org/apache/cassandra/service/GCInspector.java,118,String st = String.format("GC for %s: %s ms for %s collections, %s used; max is %s",
src/java/org/apache/cassandra/service/GCInspector.java,119,gc.getName(), duration, count - previousCount, memoryUsed, memoryMax);
src/java/org/apache/cassandra/service/GCInspector.java,120,long durationPerCollection = duration / (count - previousCount);
src/java/org/apache/cassandra/service/GCInspector.java,122,logger.info(st);
src/java/org/apache/cassandra/service/GCInspector.java,124,logger.debug(st);
src/java/org/apache/cassandra/service/GCInspector.java,127,StatusLogger.log();
src/java/org/apache/cassandra/config/DatabaseDescriptor.java,727,return conf.in_memory_compaction_limit_in_mb * 1024 * 1024;
src/java/org/apache/cassandra/db/marshal/AbstractCompositeType.java,42,int length = (bb.get() & 0xFF) << 8;
src/java/org/apache/cassandra/db/marshal/AbstractCompositeType.java,43,return length | (bb.get() & 0xFF);
src/java/org/apache/cassandra/db/marshal/AbstractCompositeType.java,49,bb.put((byte) ((length >> 8) & 0xFF));
src/java/org/apache/cassandra/db/marshal/AbstractCompositeType.java,50,bb.put((byte) (length & 0xFF));
src/java/org/apache/cassandra/db/marshal/AbstractCompositeType.java,56,ByteBuffer copy = bb.duplicate();
src/java/org/apache/cassandra/db/marshal/AbstractCompositeType.java,57,copy.limit(copy.position() + length);
src/java/org/apache/cassandra/db/marshal/AbstractCompositeType.java,58,bb.position(bb.position() + length);
src/java/org/apache/cassandra/db/marshal/AbstractCompositeType.java,59,return copy;
src/java/org/apache/cassandra/db/marshal/AbstractCompositeType.java,65,int length = getShortLength(bb);
src/java/org/apache/cassandra/db/marshal/AbstractCompositeType.java,66,return getBytes(bb, length);
src/java/org/apache/cassandra/db/marshal/AbstractCompositeType.java,82,ByteBuffer value1 = getWithShortLength(bb1);
src/java/org/apache/cassandra/db/marshal/AbstractCompositeType.java,83,ByteBuffer value2 = getWithShortLength(bb2);
src/java/org/apache/cassandra/db/marshal/AbstractCompositeType.java,182,putShortLength(bb, component.remaining());
src/java/org/apache/cassandra/db/marshal/AbstractCompositeType.java,205,int length = getShortLength(bb);
src/java/org/apache/cassandra/db/marshal/AbstractCompositeType.java,209,ByteBuffer value = getBytes(bb, length);
src/java/org/apache/cassandra/db/marshal/DynamicCompositeType.java,89,int header = getShortLength(bb);
src/java/org/apache/cassandra/db/marshal/DynamicCompositeType.java,92,String name = ByteBufferUtil.string(getBytes(bb, header));
src/java/org/apache/cassandra/db/marshal/DynamicCompositeType.java,133,int header = getShortLength(bb);
src/java/org/apache/cassandra/db/marshal/DynamicCompositeType.java,136,String name = ByteBufferUtil.string(getBytes(bb, header));
src/java/org/apache/cassandra/db/marshal/DynamicCompositeType.java,166,int header = getShortLength(bb);
src/java/org/apache/cassandra/db/marshal/DynamicCompositeType.java,172,ByteBuffer value = getBytes(bb, header);
src/java/org/apache/cassandra/db/marshal/DynamicCompositeType.java,254,putShortLength(bb, header);
src/java/org/apache/cassandra/config/CFMetaData.java,642,public static CFMetaData fromThrift(org.apache.cassandra.thrift.CfDef cf_def) throws InvalidRequestException, ConfigurationException
src/java/org/apache/cassandra/service/StorageService.java,1769,org.apache.log4j.Logger.getLogger(classQualifier).setLevel(level);
src/java/org/apache/cassandra/io/util/AbstractDataInput.java,28,protected abstract void seekInternal(int position);
src/java/org/apache/cassandra/io/util/AbstractDataInput.java,29,protected abstract int getPosition();
src/java/org/apache/cassandra/io/util/AbstractDataInput.java,32,!! DataInput methods below are copied from the implementation in Apache Harmony RandomAccessFile.
src/java/org/apache/cassandra/io/util/AbstractDataInput.java,220,int unreadPosition = 0;
src/java/org/apache/cassandra/io/util/AbstractDataInput.java,228,seekInternal(unreadPosition);
src/java/org/apache/cassandra/io/util/AbstractDataInput.java,239,seekInternal(unreadPosition);
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,28,public class MappedFileDataInput extends AbstractDataInput implements FileDataInput
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,53,position = pos;
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,58,return position;
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,70,seekInternal(((MappedFileDataInputMark) mark).position);
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,139,public int skipBytes(int n) throws IOException
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,141,assert n >= 0 : "skipping negative bytes is illegal: " + n;
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,143,return 0;
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,144,int oldPosition = position;
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,145,assert ((long)oldPosition) + n <= Integer.MAX_VALUE;
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,146,position = Math.min(buffer.capacity(), position + n);
src/java/org/apache/cassandra/io/util/MappedFileDataInput.java,147,return position - oldPosition;
src/java/org/apache/cassandra/io/util/MemoryInputStream.java,48,position = pos;
src/java/org/apache/cassandra/io/util/MemoryInputStream.java,56,public int skipBytes(int n) throws IOException
src/java/org/apache/cassandra/io/util/MemoryInputStream.java,58,seekInternal(getPosition() + n);
src/java/org/apache/cassandra/io/util/MemoryInputStream.java,59,return position;
src/java/org/apache/cassandra/service/StorageProxy.java,1105,return !Gossiper.instance.getUnreachableMembers().isEmpty();
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,161,Double first = scores.get(addresses.get(0));
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,163,return;
src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java,166,Double next = scores.get(addr);
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java,96,Configuration conf = context.getConfiguration();
src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordWriter.java,92,this(context.getConfiguration());
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,44,private long[] bucketOffsets;
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,56,makeOffsets(bucketCount);
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,69,bucketOffsets = new long[size];
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,71,bucketOffsets[0] = last;
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,77,bucketOffsets[i] = next;
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,120,long[] rv = new long[buckets.length()];
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,122,rv[i] = buckets.get(i);
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,126,buckets.set(i, 0L);
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,176,elements += buckets.get(i);
src/java/org/apache/cassandra/utils/EstimatedHistogram.java,177,sum += buckets.get(i) * bucketOffsets[i];
src/java/org/apache/cassandra/io/sstable/Descriptor.java,163,String component = st.nextToken();
src/java/org/apache/cassandra/tools/BulkLoader.java,243,TSocket socket = new TSocket(host, port);
src/java/org/apache/cassandra/tools/BulkLoader.java,244,TTransport trans = new TFramedTransport(socket);
src/java/org/apache/cassandra/tools/BulkLoader.java,245,trans.open();
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,1330,private final SSTableScanner scanner;
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,356,int greaterThan = (index + 1) * -1;
src/java/org/apache/cassandra/net/MessagingService.java,637,Socket socket = server.accept();
src/java/org/apache/cassandra/net/MessagingService.java,648,throw new RuntimeException(e);
src/java/org/apache/cassandra/gms/Gossiper.java,156,logger.trace("Performing status check ...");
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,119,assert compactedCf != null;
src/java/org/apache/cassandra/db/compaction/CompactionController.java,27,import org.apache.cassandra.config.DatabaseDescriptor;
src/java/org/apache/cassandra/db/compaction/CompactionController.java,130,long rowSize = 0;
src/java/org/apache/cassandra/db/compaction/CompactionController.java,132,rowSize += row.dataSize;
src/java/org/apache/cassandra/db/compaction/CompactionController.java,136,String keyString = cfs.metadata.getKeyValidator().getString(rows.get(0).getKey().key);
src/java/org/apache/cassandra/db/compaction/CompactionController.java,137,logger.info(String.format("Compacting large row %s/%s:%s (%d bytes) incrementally",
src/java/org/apache/cassandra/db/compaction/CompactionController.java,139,return new LazilyCompactedRow(this, rows);
src/java/org/apache/cassandra/db/compaction/CompactionController.java,141,return new PrecompactedRow(this, rows);
src/java/org/apache/cassandra/db/compaction/CompactionController.java,147,return getCompactedRow(Collections.singletonList(row));
src/java/org/apache/cassandra/db/compaction/LazilyCompactedRow.java,40,import org.apache.cassandra.db.marshal.AbstractType;
src/java/org/apache/cassandra/db/compaction/LazilyCompactedRow.java,63,private final boolean shouldPurge;
src/java/org/apache/cassandra/db/compaction/LazilyCompactedRow.java,65,private ColumnFamily emptyColumnFamily;
src/java/org/apache/cassandra/db/compaction/LazilyCompactedRow.java,82,emptyColumnFamily = cf;
src/java/org/apache/cassandra/db/compaction/LazilyCompactedRow.java,84,emptyColumnFamily.delete(cf);
src/java/org/apache/cassandra/db/compaction/LazilyCompactedRow.java,143,iter.next().updateDigest(digest);
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,24,import java.io.DataOutput;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,25,import java.io.IOException;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,26,import java.security.MessageDigest;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,27,import java.util.List;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,37,import org.apache.cassandra.io.sstable.SSTableIdentityIterator;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,38,import org.apache.cassandra.io.util.DataOutputBuffer;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,43,public class PrecompactedRow extends AbstractCompactedRow
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,47,private final ColumnFamily compactedCf;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,53,super(key);
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,68,return compacted;
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,125,digest.update(buffer.getData(), 0, buffer.getLength());
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,131,compactedCf.updateDigest(digest);
src/java/org/apache/cassandra/db/compaction/PrecompactedRow.java,152,return compactedCf;
src/java/org/apache/cassandra/gms/FailureDetector.java,129,long now = System.currentTimeMillis();
src/java/org/apache/cassandra/gms/FailureDetector.java,146,long now = System.currentTimeMillis();
src/java/org/apache/cassandra/service/AbstractWriteResponseHandler.java,44,protected final ConsistencyLevel consistencyLevel;
src/java/org/apache/cassandra/io/util/SegmentedFile.java,50,this.path = path;
src/java/org/apache/cassandra/db/HintedHandOffManager.java,426,Map<String, Integer> result = new HashMap<String, Integer>();
src/java/org/apache/cassandra/db/HintedHandOffManager.java,432,return result;
src/java/org/apache/cassandra/db/HintedHandOffManagerMBean.java,44,public Map<String, Integer> countPendingHints();
src/java/org/apache/cassandra/io/sstable/SSTableLoader.java,248,public abstract boolean validateColumnFamily(String keyspace, String cfName);
src/java/org/apache/cassandra/tools/BulkLoader.java,135,completed++;
src/java/org/apache/cassandra/config/CFMetaData.java,64,public final static ByteBuffer DEFAULT_KEY_NAME = ByteBufferUtil.bytes("KEY");
src/java/org/apache/cassandra/cql/QueryProcessor.java,68,public static final String DEFAULT_KEY_NAME = bufferToString(CFMetaData.DEFAULT_KEY_NAME);
src/java/org/apache/cassandra/cql/QueryProcessor.java,130,String keyString = getKeyString(metadata);
src/java/org/apache/cassandra/cql/QueryProcessor.java,413,String realKeyAlias = bufferToString(cfm.getKeyName()).toUpperCase();
src/java/org/apache/cassandra/cql/QueryProcessor.java,941,String keyString;
src/java/org/apache/cassandra/cql/QueryProcessor.java,942,try
src/java/org/apache/cassandra/cql/QueryProcessor.java,944,keyString = ByteBufferUtil.string(metadata.getKeyName());
src/java/org/apache/cassandra/cql/QueryProcessor.java,948,throw new AssertionError(e);
src/java/org/apache/cassandra/cql/QueryProcessor.java,950,return keyString;
src/java/org/apache/cassandra/service/ReadCallback.java,131,condition.signal();
src/java/org/apache/cassandra/service/TruncateResponseHandler.java,74,condition.signal();
src/java/org/apache/cassandra/utils/SimpleCondition.java,61,set = true;
src/java/org/apache/cassandra/utils/SimpleCondition.java,62,notify();
src/java/org/apache/cassandra/utils/FBUtilities.java,543,InputStream in = FBUtilities.class.getClassLoader().getResourceAsStream("org/apache/cassandra/config/version.properties");
tools/stress/src/org/apache/cassandra/stress/Session.java,166,String node = null;
tools/stress/src/org/apache/cassandra/stress/Session.java,172,tmpNodes.add(node);
tools/stress/src/org/apache/cassandra/stress/Session.java,174,nodes = tmpNodes.toArray(new String[tmpNodes.size()]);
tools/stress/src/org/apache/cassandra/stress/Session.java,175,in.close();
src/java/org/apache/cassandra/io/sstable/IndexSummary.java,35,public class IndexSummary
src/java/org/apache/cassandra/tools/SSTableExport.java,224,outs.flush();
src/java/org/apache/cassandra/tools/SSTableExport.java,418,else
src/java/org/apache/cassandra/tools/SSTableExport.java,422,else
src/java/org/apache/cassandra/db/IndexScanCommand.java,20,package org.apache.cassandra.db;
src/java/org/apache/cassandra/db/IndexScanCommand.java,25,import org.apache.cassandra.dht.AbstractBounds;
src/java/org/apache/cassandra/db/IndexScanCommand.java,31,import org.apache.cassandra.thrift.IndexClause;
src/java/org/apache/cassandra/db/IndexScanCommand.java,32,import org.apache.cassandra.thrift.SlicePredicate;
src/java/org/apache/cassandra/db/IndexScanCommand.java,33,import org.apache.cassandra.utils.FBUtilities;
src/java/org/apache/cassandra/db/IndexScanCommand.java,34,import org.apache.thrift.TDeserializer;
src/java/org/apache/cassandra/db/IndexScanCommand.java,35,import org.apache.thrift.TSerializer;
src/java/org/apache/cassandra/db/IndexScanCommand.java,42,public final String keyspace;
src/java/org/apache/cassandra/db/IndexScanCommand.java,43,public final String column_family;
src/java/org/apache/cassandra/db/IndexScanCommand.java,44,public final IndexClause index_clause;
src/java/org/apache/cassandra/db/IndexScanCommand.java,45,public final SlicePredicate predicate;
src/java/org/apache/cassandra/db/IndexScanCommand.java,51,this.keyspace = keyspace;
src/java/org/apache/cassandra/db/IndexScanCommand.java,52,this.column_family = column_family;
src/java/org/apache/cassandra/db/IndexScanCommand.java,53,this.index_clause = index_clause;
src/java/org/apache/cassandra/db/IndexScanCommand.java,54,this.predicate = predicate;
src/java/org/apache/cassandra/db/IndexScanCommand.java,55,this.range = range;
src/java/org/apache/cassandra/db/IndexScanCommand.java,86,out.writeUTF(o.keyspace);
src/java/org/apache/cassandra/db/IndexScanCommand.java,87,out.writeUTF(o.column_family);
src/java/org/apache/cassandra/db/IndexScanCommand.java,88,TSerializer ser = new TSerializer(new TBinaryProtocol.Factory());
src/java/org/apache/cassandra/db/IndexScanCommand.java,89,FBUtilities.serialize(ser, o.index_clause, out);
src/java/org/apache/cassandra/db/IndexScanCommand.java,90,FBUtilities.serialize(ser, o.predicate, out);
src/java/org/apache/cassandra/db/IndexScanCommand.java,96,String keyspace = in.readUTF();
src/java/org/apache/cassandra/db/IndexScanCommand.java,97,String columnFamily = in.readUTF();
src/java/org/apache/cassandra/db/IndexScanCommand.java,103,FBUtilities.deserialize(dser, predicate, in);
src/java/org/apache/cassandra/dht/LocalPartitioner.java,42,return decorateKey(key);
src/java/org/apache/cassandra/io/sstable/Descriptor.java,158,nexttok = st.nextToken();
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,372,bf = LegacyBloomFilter.alwaysMatchingBloomFilter();
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,721,public static long readRowSize(DataInput in, Descriptor d) throws IOException
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,724,return in.readInt();
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,725,return in.readLong();
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,744,return p.convertFromDiskFormat(bytes);
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,745,return p.decorateKey(bytes);
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,19,package org.apache.cassandra.service;
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,21,import java.util.List;
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,23,import org.slf4j.Logger;
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,24,import org.slf4j.LoggerFactory;
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,26,import org.apache.cassandra.db.*;
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,28,import org.apache.cassandra.net.IVerbHandler;
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,30,import org.apache.cassandra.net.MessagingService;
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,34,private static final Logger logger = LoggerFactory.getLogger(IndexScanVerbHandler.class);
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,38,try
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,41,ColumnFamilyStore cfs = Table.open(command.keyspace).getColumnFamilyStore(command.column_family);
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,43,RangeSliceReply reply = new RangeSliceReply(rows);
src/java/org/apache/cassandra/service/IndexScanVerbHandler.java,51,throw new RuntimeException(ex);
src/java/org/apache/cassandra/service/StorageService.java,286,Gossiper.instance.start((int)(System.currentTimeMillis() / 1000));
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,19,package org.apache.cassandra.utils;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,21,import java.nio.ByteBuffer;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,22,import java.util.BitSet;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,25,import org.slf4j.Logger;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,26,import org.slf4j.LoggerFactory;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,30,private static final int EXCESS = 20;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,31,private static final Logger logger = LoggerFactory.getLogger(LegacyBloomFilter.class);
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,43,hashCount = hashes;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,49,long numBits = numElements * bucketsPer + EXCESS;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,50,return new BitSet((int)Math.min(Integer.MAX_VALUE, numBits));
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,59,int maxBucketsPerElement = Math.max(1, BloomCalculations.maxBucketsPerElement(numElements));
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,60,int bucketsPerElement = Math.min(targetBucketsPerElem, maxBucketsPerElement);
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,63,logger.warn(String.format("Cannot provide an optimal LegacyBloomFilter for %d elements (%d/%d buckets per element).",
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,64,numElements, bucketsPerElement, targetBucketsPerElem));
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,66,BloomCalculations.BloomSpecification spec = BloomCalculations.computeBloomSpec(bucketsPerElement);
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,67,return new LegacyBloomFilter(spec.K, bucketsFor(numElements, spec.bucketsPerElement));
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,78,assert maxFalsePosProbability <= 1.0 : "Invalid probability";
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,79,int bucketsPerElement = BloomCalculations.maxBucketsPerElement(numElements);
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,80,BloomCalculations.BloomSpecification spec = BloomCalculations.computeBloomSpec(bucketsPerElement, maxFalsePosProbability);
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,81,return new LegacyBloomFilter(spec.K, bucketsFor(numElements, spec.bucketsPerElement));
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,100,return false;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,103,return true;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,109,This is a general purpose API.
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,131,int n = 0;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,136,n++;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,139,return n;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,145,BitSet set = new BitSet(64);
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,146,set.set(0, 64);
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,147,return new LegacyBloomFilter(1, set);
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,152,return LegacyBloomFilter.getHashBuckets(key, hashCount, buckets());
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,162,int[] result = new int[hashCount];
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,163,int hash1 = MurmurHash.hash32(b, b.position(), b.remaining(), 0);
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,164,int hash2 = MurmurHash.hash32(b, b.position(), b.remaining(), hash1);
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,167,result[i] = Math.abs((hash1 + i * hash2) % max);
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,169,return result;
src/java/org/apache/cassandra/utils/LegacyBloomFilter.java,172,public BitSet getBitSet(){
src/java/org/apache/cassandra/utils/LegacyBloomFilterSerializer.java,24,import java.util.BitSet;
src/java/org/apache/cassandra/utils/LegacyBloomFilterSerializer.java,34,throws IOException
src/java/org/apache/cassandra/utils/LegacyBloomFilterSerializer.java,36,throw new UnsupportedOperationException("Shouldn't be serializing legacy bloom filters");
src/java/org/apache/cassandra/utils/LegacyBloomFilterSerializer.java,47,try
src/java/org/apache/cassandra/utils/LegacyBloomFilterSerializer.java,49,BitSet bs = (BitSet) ois.readObject();
src/java/org/apache/cassandra/utils/LegacyBloomFilterSerializer.java,50,return new LegacyBloomFilter(hashes, bs);
src/java/org/apache/cassandra/utils/LegacyBloomFilterSerializer.java,53,throw new RuntimeException(e);
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,36,import org.apache.cassandra.db.*;
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,40,import org.apache.cassandra.dht.AbstractBounds;
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,41,import org.apache.cassandra.dht.IPartitioner;
src/java/org/apache/cassandra/io/sstable/SSTableReader.java,42,import org.apache.cassandra.dht.Range;
src/java/org/apache/cassandra/db/ColumnFamily.java,40,import org.apache.cassandra.db.marshal.MarshalException;
src/java/org/apache/cassandra/db/ColumnFamily.java,51,private final CFMetaData cfm;
src/java/org/apache/cassandra/db/ColumnFamily.java,80,assert cfm != null;
src/java/org/apache/cassandra/db/ColumnFamily.java,81,this.cfm = cfm;
src/java/org/apache/cassandra/db/ColumnFamily.java,101,return cfm.cfType;
src/java/org/apache/cassandra/db/ColumnFamily.java,108,return cf;
src/java/org/apache/cassandra/db/ColumnFamily.java,113,return cfm.cfId;
src/java/org/apache/cassandra/db/ColumnFamily.java,121,return cfm;
src/java/org/apache/cassandra/db/ColumnFamily.java,213,columns.clear();
src/java/org/apache/cassandra/db/Memtable.java,300,return columnFamilies.isEmpty();
src/java/org/apache/cassandra/db/Memtable.java,390,return columnFamilies.get(key);
src/java/org/apache/cassandra/db/Memtable.java,395,columnFamilies.clear();
src/java/org/apache/cassandra/db/RowIteratorFactory.java,114,this.returnCF = ColumnFamily.create(cfs.metadata);
src/java/org/apache/cassandra/db/columniterator/IndexedSliceReader.java,34,import org.apache.cassandra.db.ColumnFamily;
src/java/org/apache/cassandra/db/columniterator/IndexedSliceReader.java,35,import org.apache.cassandra.db.DecoratedKey;
src/java/org/apache/cassandra/db/columniterator/SSTableNamesIterator.java,34,import org.apache.cassandra.db.ColumnFamily;
src/java/org/apache/cassandra/db/columniterator/SSTableNamesIterator.java,35,import org.apache.cassandra.db.DecoratedKey;
src/java/org/apache/cassandra/db/columniterator/SimpleSliceReader.java,31,import org.apache.cassandra.db.ColumnFamily;
src/java/org/apache/cassandra/db/columniterator/SimpleSliceReader.java,32,import org.apache.cassandra.db.DecoratedKey;
src/java/org/apache/cassandra/db/compaction/LazilyCompactedRow.java,183,ColumnFamily container = emptyColumnFamily.cloneMeShallow();
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,142,columnFamily = ColumnFamily.create(metadata);
src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java,220,cf.validateColumnFields();
src/java/org/apache/cassandra/tools/SSTableImport.java,249,ColumnFamily columnFamily = ColumnFamily.create(keyspace, cf);
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,347,throw new IllegalArgumentException("Unknown keyspace " + ksname);
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,351,Collection<Descriptor> descriptors = new ArrayList<Descriptor>(filenames.length);
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,353,String cfname = null;
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,367,throw new IllegalArgumentException("All provided sstables should be for the same column family");
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,370,descriptors.add(p.left);
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,373,ColumnFamilyStore cfs = Table.open(ksname).getColumnFamilyStore(cfname);
src/java/org/apache/cassandra/db/compaction/CompactionManager.java,374,submitUserDefined(cfs, descriptors, getDefaultGcBefore(cfs));
src/java/org/apache/cassandra/db/compaction/CompactionManagerMBean.java,47,public void forceUserDefinedCompaction(String ksname, String dataFiles);
src/java/org/apache/cassandra/db/CounterColumn.java,95,assert column instanceof CounterColumn : "Wrong class type.";
