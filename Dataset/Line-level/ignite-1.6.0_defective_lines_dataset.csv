File,Line_number,SRC
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxEntry.java,867,assert cacheCtx != null : "Failed to find cache context [cacheId=" + cacheId +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridCacheTxFinishSync.java,30,import org.apache.ignite.internal.util.typedef.F;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridCacheTxFinishSync.java,68,threadSync = F.addIfAbsent(threadMap, threadId, new ThreadFinishSync(threadId));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridCacheTxFinishSync.java,70,threadSync.onSend(nodeId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridCacheTxFinishSync.java,195,TxFinishSync sync = nodeMap.get(nodeId);
modules/core/src/main/java/org/apache/ignite/events/EventType.java,1014,EVT_CACHE_REBALANCE_PART_DATA_LOST
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/DynamicCacheDescriptor.java,43,private CacheConfiguration cacheCfg;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3532,return new GridFinishedFuture<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3540,if (replaceExisting) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3542,return runLoadKeysCallable(keys, plc, keepBinary, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3543,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3544,return ctx.closures().callLocalSafe(new Callable<Void>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3546,localLoadAndUpdate(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3548,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3553,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3554,return runLoadKeysCallable(keys, plc, keepBinary, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAttributes.java,54,ccfg = cfg;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,24,import java.util.Comparator;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,399,if (cc.isWriteBehindEnabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2146,CacheConfiguration cfgTemplate = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2148,CacheConfiguration dfltCacheCfg = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2150,List<CacheConfiguration> wildcardNameCfgs = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2160,cfgTemplate = cfg;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2171,wildcardNameCfgs.add(cfg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,833,for (CachedDeploymentInfo<K, V> t : deps.values()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,834,UUID sndId = t.senderId();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,835,IgniteUuid ldrId = t.loaderId();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,836,String userVer = t.userVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,837,DeploymentMode mode = t.mode();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,838,Map<UUID, IgniteUuid> participants = t.participants();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,840,GridDeployment d = cctx.gridDeploy().getGlobalDeployment(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,841,mode,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,842,name,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,843,name,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,844,userVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,845,sndId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,846,ldrId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,847,participants,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,848,F.<ClusterNode>alwaysTrue());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,850,if (d != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,851,Class cls = d.deployedClass(name);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,931,long noResStart = 0;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,951,noResStart = 0;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1029,noResStart = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,323,U.error(log, "Failed to process message [senderId=" + nodeId + ", messageType=" + cacheMsg.getClass() + ']', e);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,60,private final int MAX_HIST_SIZE = getInteger(IGNITE_AFFINITY_HISTORY_SIZE, 500);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,33,import javax.cache.CacheException;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,969,writeSslSystem(ses, sockCh);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1134,break;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/BlockingSslHandler.java,487,ch.write(outNetBuf);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,1027,assert false : "Got removed exception on entry with dht local candidate: " + entries;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,240,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,241,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,252,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,253,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,264,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,265,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,276,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,277,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,288,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,289,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,300,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,301,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,312,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,313,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,324,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,325,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,336,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,337,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,352,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,353,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicReferenceImpl.java,135,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicReferenceImpl.java,136,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicReferenceImpl.java,147,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicReferenceImpl.java,148,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicStampedImpl.java,159,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicStampedImpl.java,160,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicStampedImpl.java,171,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicStampedImpl.java,172,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicStampedImpl.java,184,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicStampedImpl.java,185,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicStampedImpl.java,196,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicStampedImpl.java,197,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicStampedImpl.java,208,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicStampedImpl.java,209,throw U.convertException(e);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,825,stmt = prepareStatement(conn, sql, useStmtCache);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,661,AffinityTopologyVersion topVer
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,713,if (crd) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,717,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,750,assert old == null : old;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,934,List<GridDhtAssignmentFetchFuture> fetchFuts = new ArrayList<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,938,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,1088,new IgniteBiInClosure<UUID, GridDhtAffinityAssignmentResponse>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,1093,);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,1141,assert old == null : old;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,1180,new IgniteBiInClosure<UUID, GridDhtAffinityAssignmentResponse>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,1185,);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,1189,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,1209,if (!crd) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,1219,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,1221,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,1228,boolean latePrimary = cache.rebalanceEnabled;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,1234,return waitRebalanceInfo;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,1569,abstract boolean client();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,1672,assert !cctx.kernalContext().clientNode();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,1705,boolean rebalanceEnabled,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,1706,GridCacheSharedContext cctx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,1707,GridAffinityAssignmentCache aff,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,1709,super(rebalanceEnabled, aff, initAff);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,1711,this.cctx = cctx;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1915,return ignite().configuration().getSslContextFactory() != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,410,if (primary || skipPrimaryCheck) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,412,onEntryUpdate(evt, notify, loc, recordIgniteEvt);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,413,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,414,fut.addContinuousQueryClosure(new CI1<Boolean>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,417,evt.entry().markFiltered();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,419,onEntryUpdate(evt, notify, loc, recordIgniteEvt);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4818,msg.message(null, msg.messageBytes());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,120,private static final Object JOIN_TIMEOUT = "JOIN_TIMEOUT";
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1333,if (msg == JOIN_TIMEOUT) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1334,if (state == STARTING) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1335,joinError(new IgniteSpiException("Join process timed out, did not receive response for " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1339,break;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1341,else if (state == DISCONNECTED) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1343,log.debug("Failed to reconnect, local node segmented " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1346,state = SEGMENTED;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1348,notifyDiscovery(EVT_NODE_SEGMENTED, topVer, locNode, allVisibleNodes());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1533,queue.add(JOIN_TIMEOUT);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,578,Map<Integer, CacheMetrics> cacheMetrics = this.cacheMetrics;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,580,out.writeInt(cacheMetrics == null ? 0 : cacheMetrics.size());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,583,for (Map.Entry<Integer, CacheMetrics> m : cacheMetrics.entrySet()) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,584,out.writeInt(m.getKey());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,585,out.writeObject(m.getValue());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,618,Map<Integer, CacheMetrics> cacheMetrics =
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,619,size > 0 ? U.<Integer, CacheMetrics>newHashMap(size) : Collections.<Integer, CacheMetrics>emptyMap();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,622,int id = in.readInt();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,625,cacheMetrics.put(id, m);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1140,int cnt = 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,465,assert false : "Got entry removed exception while holding transactional lock on entry [e=" + e + ", cached=" + cached + ']';
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1013,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1016,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1017,busyLock.leaveBusy();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,613,GridPingFutureAdapter<IgniteBiTuple<UUID, Boolean>> fut = new GridPingFutureAdapter<>();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,728,U.closeQuiet(fut.sock);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1106,synchronized (failedNodes) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1621,return new IgniteSpiException("Local node has the same ID as existing node in topology " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedSingleGetFuture.java,735,cctx.dht().sendTtlUpdateRequest(expiryPlc);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryFutureAdapter.java,262,throw new IgniteCheckedException("Query execution failed: " + qry, error());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,86,import org.apache.ignite.internal.util.typedef.internal.A;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,227,protected TcpDiscoverySpiState spiState = DISCONNECTED;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,833,locNode.order(1);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,834,locNode.internalOrder(1);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,836,spi.gridStartTime = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,838,locNode.visible(true);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,840,ring.clear();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,842,ring.topologyVersion(1);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,844,synchronized (mux) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,845,topHist.clear();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,847,spiState = CONNECTED;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,849,mux.notifyAll();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,852,notifyDiscovery(EVT_NODE_JOINED, 1, locNode);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1021,if (e != null && X.hasCause(e, ConnectException.class)) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1304,private static <T extends R, R> Collection<R> upcast(Collection<T> c) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1305,A.notNull(c, "c");
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1307,return (Collection<R>)c;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1372,return resolveCoordinator(null);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1389,excluded = F.concat(false, excluded, filter);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1727,Collections.<InetSocketAddress>emptyList();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1947,prepareNodeAddedMessage(msg0, destNodeId, null, null, null);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2390,prepareNodeAddedMessage(msg0, clientMsgWorker.clientNodeId, null, null, null);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2675,pendingMsgs.discardId, pendingMsgs.customDiscardId);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2716,prepareNodeAddedMessage(msg, next.id(), pendingMsgs.msgs, pendingMsgs.discardId,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2725,if (!failedNodes.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2726,for (TcpDiscoveryNode failedNode : failedNodes) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2727,assert !failedNode.equals(next) : failedNode;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2729,msg.addFailedNode(failedNode.id());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2870,prepareNodeAddedMessage(pendingMsg, locNodeId, pendingMsgs.msgs, pendingMsgs.discardId,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3433,sendMessageAcrossRing(msg);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4235,long order = msg.order();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4392,if (spiState == DISCONNECTED) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4394,log.debug("Ignoring status check request, SPI is already disconnected: " + msg);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4396,return;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4543,msg.cacheMetrics().get(nodeId) : Collections.<Integer, CacheMetrics>emptyMap();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4685,if (spiState == DISCONNECTED) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4687,log.debug("Ignoring ping request, SPI is already disconnected: " + msg);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4689,return;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoveryImpl.java,63,protected TcpDiscoveryNode locNode;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1922,return ((ServerImpl)impl).clientMsgWorkers.size();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,69,private TcpDiscoveryNode locNode;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoverySpiState.java,52,LOOPBACK_PROBLEM
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/messages/TcpDiscoveryNodeFailedMessage.java,50,public TcpDiscoveryNodeFailedMessage(UUID creatorNodeId, UUID failedNodeId, long order) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/messages/TcpDiscoveryNodeFailedMessage.java,54,assert order > 0;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/messages/TcpDiscoveryNodeFailedMessage.java,57,this.order = order;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/messages/TcpDiscoveryNodeFailedMessage.java,86,public long order() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxStateImpl.java,214,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,1549,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4225,e = new IgniteTxRollbackCheckedException("Transaction has been rolled back: " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4226,tx.xid(), e);
modules/core/src/main/java/org/apache/ignite/internal/transactions/IgniteTxHeuristicCheckedException.java,20,import org.apache.ignite.IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/transactions/IgniteTxHeuristicCheckedException.java,29,public class IgniteTxHeuristicCheckedException extends IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/transactions/IgniteTxOptimisticCheckedException.java,20,import org.apache.ignite.IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/transactions/IgniteTxOptimisticCheckedException.java,25,public class IgniteTxOptimisticCheckedException extends IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/transactions/IgniteTxRollbackCheckedException.java,20,import org.apache.ignite.IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/transactions/IgniteTxRollbackCheckedException.java,25,public class IgniteTxRollbackCheckedException extends IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/transactions/IgniteTxTimeoutCheckedException.java,20,import org.apache.ignite.IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/transactions/IgniteTxTimeoutCheckedException.java,25,public class IgniteTxTimeoutCheckedException extends IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeployable.java,20,import org.apache.ignite.internal.managers.deployment.*;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,994,buf.limit((int)ses.meta(WRITE_BUF_LIMIT));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1101,buf.limit((int)ses.meta(WRITE_BUF_LIMIT));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3213,return new CacheMetricsSnapshot(ctx.cache().localMetrics(), metrics);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3218,return new CacheMetricsSnapshot(metrics);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,346,log.debug("Sending local node ID to newly accepted session: " + ses);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1621,formatter = getSpiContext().messageFormatter();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1636,formatter = getSpiContext().messageFormatter();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,164,return nodes(VISIBLE_NODES, F.remoteNodes(locNode.id()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1857,if (tx == null || tx.implicit()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUpdateTxResult.java,56,this.success = success;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUpdateTxResult.java,58,this.updateCntr = updateCntr;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,62,import org.apache.ignite.internal.transactions.IgniteTxHeuristicCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,158,if (mapTopVer == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,33,import org.apache.ignite.internal.processors.affinity.AffinityTopologyVersion;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,34,import org.apache.ignite.internal.processors.cache.GridCacheContext;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,35,import org.apache.ignite.internal.processors.cache.GridCacheEntryEx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,42,import org.apache.ignite.internal.processors.cache.transactions.IgniteTxEntry;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,44,import org.apache.ignite.internal.transactions.IgniteTxHeuristicCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,61,import static org.apache.ignite.internal.processors.cache.GridCacheOperation.NOOP;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,916,nearTx = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,918,finish(nodeId, dhtTx, req);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,973,if (tx == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,976,ctx.tm().addCommittedTx(tx, req.version(), null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,977,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,978,ctx.tm().addRolledbackTx(tx, req.version());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,981,log.debug("Received finish request for non-existing transaction (added to completed set) " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,984,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,181,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,183,ses.send(msg);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,184,else if (msg instanceof GridClientHandshakeRequest) {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,185,GridClientHandshakeRequest hs = (GridClientHandshakeRequest)msg;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,187,short ver = hs.version();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,189,if (!SUPP_VERS.contains(ver)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,190,U.error(log, "Client protocol version is not supported [ses=" + ses +
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,194,ses.close();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,196,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,197,byte marshId = hs.marshallerId();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,200,U.awaitQuiet(marshMapLatch);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,202,GridClientMarshaller marsh = marshMap.get(marshId);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,204,if (marsh == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,205,U.error(log, "Client marshaller ID is invalid. Note that .NET and C++ clients " +
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,210,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,211,ses.addMeta(MARSHALLER.ordinal(), marsh);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,213,ses.send(GridClientHandshakeResponse.OK);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,217,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,218,final GridRestRequest req = createRestRequest(ses, msg);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,221,hnd.handleAsync(req).listen(new CI1<IgniteInternalFuture<GridRestResponse>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,223,GridClientResponse res = new GridClientResponse();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,225,res.requestId(msg.requestId());
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,226,res.clientId(msg.clientId());
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,228,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,229,GridRestResponse restRes = fut.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,231,res.sessionToken(restRes.sessionTokenBytes());
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,232,res.successStatus(restRes.getSuccessStatus());
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,233,res.errorMessage(restRes.getError());
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,235,Object o = restRes.getResponse();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,239,o = ((GridCacheRestMetrics)o).map();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,241,res.result(o);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,243,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,244,U.error(log, "Failed to process client request: " + msg, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,246,res.successStatus(GridClientResponse.STATUS_FAILED);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,247,res.errorMessage("Failed to process client request: " + e.getMessage());
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,250,GridNioFuture<?> sf = ses.send(res);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,263,else
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,264,U.error(log, "Failed to process client request (unknown packet type) [ses=" + ses +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEvictionManager.java,58,import org.apache.ignite.internal.processors.affinity.AffinityTopologyVersion;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,321,public void removeExplicitNodeLocks(UUID leftNodeId, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,322,for (GridDistributedCacheEntry entry : locked()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,323,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,324,entry.removeExplicitNodeLocks(leftNodeId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,328,catch (GridCacheEntryRemovedException ignore) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,330,log.debug("Attempted to remove node locks from removed entry in mvcc manager " +
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,2497,if (ctx.cache().cache(cacheCfg.getName()) == null) {
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,2701,return ctx.cache().publicJCache(cacheName);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,237,private IgniteUuid dynamicDeploymentId;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,370,void dynamicDeploymentId(IgniteUuid dynamicDeploymentId) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,371,this.dynamicDeploymentId = dynamicDeploymentId;
modules/core/src/main/java/org/apache/ignite/internal/client/ssl/GridSslBasicContextFactory.java,26,import java.security.cert.CertificateException;
modules/core/src/main/java/org/apache/ignite/internal/client/ssl/GridSslBasicContextFactory.java,435,throws CertificateException {
modules/core/src/main/java/org/apache/ignite/internal/client/ssl/GridSslBasicContextFactory.java,441,throws CertificateException {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1699,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,757,CachePeekMode[] peekModes,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,870,boolean offheap,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3929,private Iterator<Cache.Entry<K, V>> localIteratorHonorExpirePolicy(final CacheOperationContext opCtx) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3930,return F.iterator(iterator(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3931,new IgniteClosure<Cache.Entry<K, V>, Cache.Entry<K, V>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3932,private IgniteCacheExpiryPolicy expiryPlc =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3933,ctx.cache().expiryPolicy(opCtx != null ? opCtx.expiry() : null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3936,CacheOperationContext prev = ctx.gate().enter(opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3937,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3938,V val = localPeek(lazyEntry.getKey(), CachePeekModes.ONHEAP_ONLY, expiryPlc);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3940,GridCacheVersion ver = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3942,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3943,ver = lazyEntry.unwrap(GridCacheVersion.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3945,catch (IllegalArgumentException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3946,log.error("Failed to unwrap entry version information", e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3949,return new CacheEntryImpl<>(lazyEntry.getKey(), val, ver);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3951,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3952,throw CU.convertToCacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3954,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3955,ctx.gate().leave(prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3959,);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProxyImpl.java,993,CachePeekMode[] peekModes,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProxyImpl.java,1000,return delegate.localPeek(key, peekModes, plc);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheAdapter.java,516,return GridNearCacheAdapter.super.localPeek(e.getKey(), NEAR_PEEK_MODE, null) == null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,389,demander.handleSupplyMessage(idx, id, s);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,50,import org.apache.ignite.internal.util.future.GridCompoundFuture;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,51,import org.apache.ignite.internal.util.future.GridFinishedFuture;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,61,import org.apache.ignite.internal.util.worker.GridWorker;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,62,import org.apache.ignite.internal.util.worker.GridWorkerFuture;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,829,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,839,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,840,busyLock.leaveBusy();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,88,import org.apache.ignite.internal.processors.query.h2.opt.GridH2Row;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2Table.java,74,private final ReadWriteLock lock;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2505,if (storeErr != null &&
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2507,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareResponse.java,390,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareResponse.java,392,writer.incrementState();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareResponse.java,484,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareResponse.java,486,reader.incrementState();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetFuture.java,199,map0(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetFuture.java,206,map0(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetFuture.java,247,private void map0(Map<KeyCacheObject, Boolean> keys) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetFuture.java,255,if (!map(key.getKey())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetFuture.java,299,private boolean map(KeyCacheObject key) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetSingleFuture.java,230,map0();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetSingleFuture.java,239,map0();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetSingleFuture.java,245,private void map0() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetSingleFuture.java,271,private boolean map(KeyCacheObject key) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/dr/GridCacheDrManager.java,65,public void onExchange(AffinityTopologyVersion topVer, boolean left) throws IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheConflictResolutionManager.java,20,import org.apache.ignite.internal.processors.cache.version.*;
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,20,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,21,import java.util.Collections;
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,22,import java.util.EnumMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,23,import java.util.HashMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,24,import java.util.HashSet;
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,25,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,26,import java.util.Set;
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,27,import java.util.UUID;
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,28,import java.util.concurrent.ConcurrentMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,29,import java.util.concurrent.CountDownLatch;
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,30,import java.util.concurrent.RejectedExecutionException;
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,183,lock.writeLock();
modules/core/src/main/java/org/apache/ignite/configuration/CacheConfiguration.java,347,private CacheInterceptor<?, ?> interceptor;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,120,private static final int SIZE_OVERHEAD = 85 /*entry*/ + 32 /* version */ + 4 * 7 /* key + val */;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheEntry.java,783,removeLock(tx.xidVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/GridLocalCacheEntry.java,286,removeLock(tx.xidVersion());
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1044,catch (IgniteInterruptedCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1046,Thread.interrupted();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,871,catch (InterruptedException ignored) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,874,throw new IgniteSpiException("Thread has been interrupted.");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,138,private boolean locCache;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,241,public void localCache(boolean locCache) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,242,this.locCache = locCache;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,765,if (!locCache) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,637,hnd.localCache(cctx.isLocal());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,637,if (tx.onePhaseCommit() && tx.commitOnPrepare()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,647,if (tx.commitOnPrepare()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,648,if (tx.markFinalizing(IgniteInternalTx.FinalizationStatus.USER_FINISH)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,651,CIX1<IgniteInternalFuture<IgniteInternalTx>> resClo =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,652,new CIX1<IgniteInternalFuture<IgniteInternalTx>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,691,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,791,if (tx.remainingTime() == -1) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,115,private ClusterNode crd;
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,606,UUID subjId = getThreadContext(TC_SUBJ_ID);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxRemoteAdapter.java,723,commitIfLocked();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,649,IgniteInternalFuture<IgniteInternalTx> fut = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,664,if (prepErr == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,665,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,666,fut = tx.commitAsync();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,668,catch (RuntimeException | Error e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,669,Exception hEx = new IgniteTxHeuristicCheckedException("Commit produced a runtime " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,672,res.error(hEx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,674,tx.systemInvalidate(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,680,throw e;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,688,fut.listen(resClo);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,296,AffinityTopologyVersion topVer = tx.topologyVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,298,for (IgniteTxEntry e : tx.writeMap().values()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,299,GridCacheContext cacheCtx = e.context();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,301,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,303,GridCacheEntryEx entry = cacheCtx.cache().peekEx(e.key());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,309,catch (Throwable t) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,310,U.error(log, "Failed to invalidate entry.", t);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,313,throw (Error)t;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,750,throw (Error)e;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,777,U.error(log, "Failed completing transaction [commit=" + commit + ", tx=" + tx + ']', e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,780,throw e;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,785,return new GridFinishedFuture<>(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,845,else if (e instanceof IgniteTxHeuristicCheckedException) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,846,U.warn(log, "Failed to commit transaction (all transaction entries were invalidated): " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,847,CU.txString(dhtTx));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,1011,U.error(log, "Failed completing transaction [commit=" + req.commit() + ", tx=" + tx + ']', e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,1054,U.error(log, "Failed committing transaction [tx=" + tx + ']', e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,1057,tx.invalidate(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,1058,tx.systemInvalidate(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,1063,throw (Error)e;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,671,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,672,while (true) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,673,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,674,GridCacheEntryEx cached = txEntry.cached();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,678,if (!evictNearEntry(txEntry, false)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,679,if (cacheCtx.isNear() && cacheCtx.dr().receiveEnabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,680,cached.markObsolete(xidVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,682,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,686,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,690,boolean metrics = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,695,metrics = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,697,boolean evt = !isNearLocallyMapped(txEntry, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,702,IgniteBiTuple<GridCacheOperation, CacheObject> res = applyTransformClosures(txEntry,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,705,GridCacheVersion dhtVer = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,710,if (cacheCtx.isNear()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,711,if (txEntry.op() == CREATE || txEntry.op() == UPDATE ||
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,713,dhtVer = txEntry.dhtVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,715,if ((txEntry.op() == CREATE || txEntry.op() == UPDATE) &&
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,716,txEntry.conflictExpireTime() == CU.EXPIRE_TIME_CALCULATE) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,717,ExpiryPolicy expiry = cacheCtx.expiryForTxEntry(txEntry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,719,if (expiry != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,720,Duration duration = cached.hasValue() ?
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,721,expiry.getExpiryForUpdate() : expiry.getExpiryForCreation();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,723,txEntry.ttl(CU.toTtl(duration));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,728,GridCacheOperation op = res.get1();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,729,CacheObject val = res.get2();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,732,GridCacheVersion explicitVer = txEntry.conflictVersion() != null ?
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,733,txEntry.conflictVersion() : writeVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,735,if ((op == CREATE || op == UPDATE) &&
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,736,txEntry.conflictExpireTime() == CU.EXPIRE_TIME_CALCULATE) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,737,ExpiryPolicy expiry = cacheCtx.expiryForTxEntry(txEntry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,739,if (expiry != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,740,Duration duration = cached.hasValue() ?
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,741,expiry.getExpiryForUpdate() : expiry.getExpiryForCreation();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,743,long ttl = CU.toTtl(duration);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,745,txEntry.ttl(ttl);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,748,op = DELETE;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,752,boolean conflictNeedResolve = cacheCtx.conflictNeedResolve();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,754,GridCacheVersionConflictContext<?, ?> conflictCtx = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,756,if (conflictNeedResolve) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,757,IgniteBiTuple<GridCacheOperation, GridCacheVersionConflictContext> conflictRes =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,758,conflictResolve(op, txEntry, val, explicitVer, cached);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,760,assert conflictRes != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,762,conflictCtx = conflictRes.get2();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,765,op = NOOP;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,766,else if (conflictCtx.isUseNew()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,767,txEntry.ttl(conflictCtx.ttl());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,768,txEntry.conflictExpireTime(conflictCtx.expireTime());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,770,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,771,assert conflictCtx.isMerge();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,773,op = conflictRes.get1();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,774,val = txEntry.context().toCacheObject(conflictCtx.mergeValue());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,775,explicitVer = writeVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,777,txEntry.ttl(conflictCtx.ttl());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,778,txEntry.conflictExpireTime(conflictCtx.expireTime());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,781,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,783,explicitVer = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,785,if (sndTransformedVals || conflictNeedResolve) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,786,assert sndTransformedVals && cacheCtx.isReplicated() || conflictNeedResolve;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,788,txEntry.value(val, true, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,789,txEntry.op(op);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,790,txEntry.entryProcessors(null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,791,txEntry.conflictVersion(explicitVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,795,dhtVer = explicitVer != null ? explicitVer : writeVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,797,if (op == CREATE || op == UPDATE) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,798,GridCacheUpdateTxResult updRes = cached.innerSet(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,799,this,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,800,eventNodeId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,801,txEntry.nodeId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,802,val,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,803,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,804,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,805,txEntry.ttl(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,806,evt,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,807,metrics,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,808,txEntry.keepBinary(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,809,topVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,810,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,811,cached.detached() ? DR_NONE : drType,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,812,txEntry.conflictExpireTime(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,813,cached.isNear() ? null : explicitVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,814,CU.subjectId(this, cctx),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,815,resolveTaskName(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,816,dhtVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,845,else if (op == DELETE) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,846,GridCacheUpdateTxResult updRes = cached.innerRemove(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,847,this,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,848,eventNodeId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,849,txEntry.nodeId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,850,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,851,evt,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,852,metrics,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,853,txEntry.keepBinary(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,854,topVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,855,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,857,cached.isNear() ? null : explicitVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,858,CU.subjectId(this, cctx),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,859,resolveTaskName(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,860,dhtVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,885,else if (op == RELOAD) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,886,cached.innerReload();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,891,else if (op == READ) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,892,ExpiryPolicy expiry = cacheCtx.expiryForTxEntry(txEntry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,894,if (expiry != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,895,Duration duration = expiry.getExpiryForAccess();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,898,cached.updateTtl(null, CU.toTtl(duration));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,902,log.debug("Ignoring READ entry when committing: " + txEntry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,904,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,907,this + ", txEntry=" + txEntry + ']';
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,909,if (conflictCtx == null || !conflictCtx.isUseOld()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,911,cached.updateTtl(null, txEntry.ttl());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,915,log.debug("Ignoring NOOP entry when committing: " + txEntry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,924,checkCommitLocks(cached);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,927,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,930,catch (GridCacheEntryRemovedException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,932,log.debug("Got removed entry during transaction commit (will retry): " + txEntry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,934,txEntry.cached(entryEx(cacheCtx, txEntry.txKey(), topologyVersion()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,938,catch (Throwable ex) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,941,cctx.tm().removeCommittedTx(this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,966,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,970,catch (Throwable ex1) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,971,U.error(log, "Failed to uncommit transaction: " + this, ex1);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,974,throw ex1;
modules/core/src/main/java/org/apache/ignite/spi/IgniteSpiAdapter.java,47,import org.apache.ignite.internal.util.typedef.internal.CU;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,263,timer.schedule(
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryCachingMetadataHandler.java,50,synchronized (this) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryCachingMetadataHandler.java,51,BinaryType oldType = metas.put(typeId, type);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryCachingMetadataHandler.java,53,if (oldType != null) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryCachingMetadataHandler.java,54,BinaryMetadata oldMeta = ((BinaryTypeImpl)oldType).metadata();
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryCachingMetadataHandler.java,55,BinaryMetadata newMeta = ((BinaryTypeImpl)type).metadata();
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryCachingMetadataHandler.java,57,BinaryMetadata mergedMeta = BinaryUtils.mergeMetadata(oldMeta, newMeta);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryCachingMetadataHandler.java,59,BinaryType mergedType = mergedMeta.wrap(((BinaryTypeImpl)oldType).context());
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryCachingMetadataHandler.java,61,metas.put(typeId, mergedType);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,563,desc = registerClassDescriptor(cls, deserialize);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,619,desc = registerClassDescriptor(cls, deserialize);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,634,private BinaryClassDescriptor registerClassDescriptor(Class<?> cls, boolean deserialize) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,663,desc = registerUserClassDescriptor(cls, deserialize);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,674,private BinaryClassDescriptor registerUserClassDescriptor(Class<?> cls, boolean deserialize) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,728,private BinaryClassDescriptor registerUserClassDescriptor(BinaryClassDescriptor desc) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,424,U.await(evtLatch);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,750,this.partReleaseFut = partReleaseFut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,753,cctx.mvcc().removeExplicitNodeLocks(exchId.nodeId(), exchId.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxRemoteAdapter.java,759,catch (RuntimeException | Error e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxRemoteAdapter.java,762,throw e;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishFuture.java,215,Throwable finishErr = e != null ? e : err;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,1048,return new GridFinishedFuture<IgniteInternalTx>(this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4243,ctx.affinity().affinityReadyFuture(topVer.topologyVersion() + 1).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4969,ctx.affinity().affinityReadyFuture(topVer.topologyVersion() + 1);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,575,GridDhtPartitionsExchangeFuture lastInitializedFut0 = lastInitializedFut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,582,return lastInitializedFut0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,591,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,3119,IgniteCacheProxy<K, V> proxy = (IgniteCacheProxy<K, V>)jCacheProxies.get(name);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,3191,if (cache == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProxyImpl.java,91,public GridCacheProxyImpl(GridCacheContext<K, V> ctx, IgniteInternalCache<K, V> delegate,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedGetFuture.java,681,cctx.affinity().affinityReadyFuture(updTopVer).listen(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedGetFuture.java,747,IgniteInternalFuture<AffinityTopologyVersion> topFut = cctx.affinity().affinityReadyFuture(rmtTopVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedSingleGetFuture.java,561,IgniteInternalFuture<AffinityTopologyVersion> topFut = cctx.affinity().affinityReadyFuture(rmtTopVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedSingleGetFuture.java,697,cctx.affinity().affinityReadyFuture(updTopVer).listen(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,931,cctx.affinity().affinityReadyFuture(updTopVer).listen(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,932,new CI1<IgniteInternalFuture<AffinityTopologyVersion>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,934,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,940,onDone(Collections.<K, V>emptyMap());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,942,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,943,GridNearGetFuture.this.onDone(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,947,);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,997,IgniteInternalFuture<AffinityTopologyVersion> topFut = cctx.affinity().affinityReadyFuture(rmtTopVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java,769,retryFut = cctx.affinity().affinityReadyFuture(waitVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFutureAdapter.java,154,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFutureAdapter.java,156,Map<UUID, Collection<UUID>> map = txMapping.transactionNodes();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFutureAdapter.java,158,if (map.size() == 1) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFutureAdapter.java,159,Map.Entry<UUID, Collection<UUID>> entry = map.entrySet().iterator().next();
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,1144,A.notNull(cfg.getMBeanServer(), "cfg.getMBeanServer()");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedGetFuture.java,389,boolean fastLocGet = (!forcePrimary || affNodes.get(0).isLocal()) &&
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4893,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,388,((GridFutureAdapter)fut).onDone(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,391,((GridFutureAdapter)future).onDone(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,956,try {
modules/core/src/main/java/org/apache/ignite/internal/GridKernalGatewayImpl.java,189,private IllegalStateException illegalState() {
modules/core/src/main/java/org/apache/ignite/internal/GridKernalGatewayImpl.java,190,return new IllegalStateException("Grid is in invalid state to perform this operation. " +
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2IndexBase.java,26,import org.h2.index.BaseIndex;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2IndexBase.java,37,public abstract class GridH2IndexBase extends BaseIndex {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,187,try {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,189,String clsName = meta.className();
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,193,spi.register(ldr, cls);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,195,rsrc = spi.findResource(cls.getName());
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,197,if (rsrc != null && rsrc.getResourceClass().equals(cls)) {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,199,log.debug("Retrieved auto-loaded resource from spi: " + rsrc);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,201,dep = deploy(ctx.config().getDeploymentMode(), ldr, cls, meta.alias(), meta.record());
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,203,assert dep != null;
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,205,else {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,206,U.warn(log, "Failed to find resource from deployment SPI even after registering: " + meta);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,211,catch (ClassNotFoundException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,213,log.debug("Failed to load class for local auto-deployment [ldr=" + ldr + ", meta=" + meta + ']');
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,215,return null;
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,217,catch (IgniteSpiException e) {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,218,U.error(log, "Failed to deploy local class with meta: " + meta, e);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,220,return null;
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,348,spi.register(clsLdr, cls);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,350,GridDeployment dep = deployment(cls.getName());
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,352,if (dep == null) {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,353,DeploymentResource rsrc = spi.findResource(cls.getName());
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,356,dep = deploy(ctx.config().getDeploymentMode(), rsrc.getClassLoader(),
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,357,rsrc.getResourceClass(), rsrc.getName(), true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,106,public static final GridCacheAtomicVersionComparator ATOMIC_VER_COMPARATOR = new GridCacheAtomicVersionComparator();
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1774,Runtime.getRuntime().addShutdownHook(shutdownHook = new Thread() {
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,519,private class TopologyUpdaterThread extends Thread {
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,524,super(id + "-topology-update");
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,530,while (!isInterrupted()) {
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,531,Thread.sleep(cfg.getTopologyRefreshFrequency());
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,533,try {
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,534,tryInitTopology();
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,536,catch (GridClientException e) {
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,537,top.fail(e);
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,540,log.fine("Failed to update topology: " + e.getMessage());
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,544,catch (InterruptedException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,546,Thread.currentThread().interrupt();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,1790,ExecutorService executor = Executors.newFixedThreadPool(Math.min(10, addrs.size()));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,37,import java.util.Timer;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,38,import java.util.TimerTask;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,162,private final Timer timer = new Timer("TcpDiscoverySpi.timer");
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,298,timer.cancel();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,359,timer.schedule(new TimerTask() {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,361,if (pingFuts.remove(nodeId, finalFut)) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,363,finalFut.onDone(new IgniteClientDisconnectedCheckedException(null,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,365,else
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,366,finalFut.onDone(false);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1530,timer.schedule(new TimerTask() {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1359,TcpDiscoveryAbstractMessage leftMsg = new TcpDiscoveryNodeLeftMessage(getLocalNodeId());
modules/core/src/main/java/org/apache/ignite/internal/managers/GridManagerAdapter.java,218,try {
modules/core/src/main/java/org/apache/ignite/internal/managers/GridManagerAdapter.java,219,Map<String, Object> retval = spi.getNodeAttributes();
modules/core/src/main/java/org/apache/ignite/internal/managers/GridManagerAdapter.java,221,if (retval != null) {
modules/core/src/main/java/org/apache/ignite/internal/managers/GridManagerAdapter.java,222,for (Map.Entry<String, Object> e : retval.entrySet()) {
modules/core/src/main/java/org/apache/ignite/internal/managers/GridManagerAdapter.java,224,throw new IgniteCheckedException("SPI attribute collision for attribute [spi=" + spi +
modules/core/src/main/java/org/apache/ignite/internal/managers/GridManagerAdapter.java,231,ctx.addNodeAttribute(e.getKey(), e.getValue());
modules/core/src/main/java/org/apache/ignite/internal/managers/GridManagerAdapter.java,235,catch (IgniteSpiException e) {
modules/core/src/main/java/org/apache/ignite/internal/managers/GridManagerAdapter.java,236,throw new IgniteCheckedException("Failed to get SPI attributes.", e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,21,import java.io.InputStream;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,22,import java.io.OutputStream;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,23,import java.net.ConnectException;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,24,import java.net.InetAddress;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,26,import java.net.SocketTimeoutException;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,28,import java.nio.ByteOrder;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,29,import java.nio.channels.SelectableChannel;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,30,import java.nio.channels.SocketChannel;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,32,import java.util.ArrayList;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,33,import java.util.Arrays;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,36,import java.util.HashMap;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,37,import java.util.HashSet;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,38,import java.util.LinkedHashSet;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,41,import java.util.Set;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,43,import java.util.concurrent.BlockingQueue;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,44,import java.util.concurrent.ConcurrentMap;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,46,import java.util.concurrent.LinkedBlockingQueue;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,47,import java.util.concurrent.TimeUnit;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,48,import java.util.concurrent.atomic.AtomicBoolean;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,49,import javax.net.ssl.SSLEngine;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,50,import javax.net.ssl.SSLException;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,53,import org.apache.ignite.IgniteClientDisconnectedException;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,59,import org.apache.ignite.events.DiscoveryEvent;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,60,import org.apache.ignite.events.Event;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,64,import org.apache.ignite.internal.cluster.ClusterTopologyCheckedException;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,66,import org.apache.ignite.internal.util.GridConcurrentFactory;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,67,import org.apache.ignite.internal.util.GridSpinReadWriteLock;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,68,import org.apache.ignite.internal.util.future.GridFutureAdapter;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,69,import org.apache.ignite.internal.util.ipc.IpcEndpoint;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,70,import org.apache.ignite.internal.util.ipc.IpcToNioAdapter;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,71,import org.apache.ignite.internal.util.ipc.shmem.IpcOutOfSystemResourcesException;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,72,import org.apache.ignite.internal.util.ipc.shmem.IpcSharedMemoryServerEndpoint;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,73,import org.apache.ignite.internal.util.lang.IgniteInClosure2X;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,75,import org.apache.ignite.internal.util.nio.GridConnectionBytesVerifyFilter;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,76,import org.apache.ignite.internal.util.nio.GridDirectParser;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,77,import org.apache.ignite.internal.util.nio.GridNioCodecFilter;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,78,import org.apache.ignite.internal.util.nio.GridNioFilter;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,85,import org.apache.ignite.internal.util.nio.GridNioServerListener;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,86,import org.apache.ignite.internal.util.nio.GridNioServerListenerAdapter;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,89,import org.apache.ignite.internal.util.nio.GridShmemCommunicationClient;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,90,import org.apache.ignite.internal.util.nio.GridTcpNioCommunicationClient;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,91,import org.apache.ignite.internal.util.nio.ssl.BlockingSslHandler;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,92,import org.apache.ignite.internal.util.nio.ssl.GridNioSslFilter;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,94,import org.apache.ignite.internal.util.typedef.F;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,95,import org.apache.ignite.internal.util.typedef.X;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,96,import org.apache.ignite.internal.util.typedef.internal.LT;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,99,import org.apache.ignite.internal.util.worker.GridWorker;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,100,import org.apache.ignite.lang.IgniteBiInClosure;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,101,import org.apache.ignite.lang.IgniteBiTuple;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,106,import org.apache.ignite.lang.IgniteUuid;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,112,import org.apache.ignite.resources.IgniteInstanceResource;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,115,import org.apache.ignite.spi.IgniteSpiAdapter;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,116,import org.apache.ignite.spi.IgniteSpiConfiguration;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,121,import org.apache.ignite.spi.IgniteSpiOperationTimeoutException;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,122,import org.apache.ignite.spi.IgniteSpiOperationTimeoutHelper;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,124,import org.apache.ignite.spi.IgniteSpiTimeoutObject;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,292,private static final int TRACKER_META = GridNioSessionMetaKey.nextUniqueKey();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,326,private ConnectGateway connectGate;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,329,private final GridNioServerListener<Message> srvLsnr =
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,330,new GridNioServerListenerAdapter<Message>() {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,337,log.debug("Closing communication SPI session on write timeout [remoteAddr=" + ses.remoteAddress() +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,340,ses.close();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,344,if (ses.accepted()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,382,CommunicationListener<Message> lsnr0 = lsnr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,385,lsnr0.onDisconnected(id);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,394,UUID sndId;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,398,else {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,399,assert msg instanceof HandshakeMessage : msg;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,405,log.debug("Remote node ID received: " + sndId);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,419,return;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,527,assert ses.accepted() : ses;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,529,if (!connectGate.tryEnter()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,531,log.debug("Close incoming connection, failed to enter gateway.");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,535,return;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,538,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,539,onFirstMessage(ses, msg);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,541,finally {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,542,connectGate.leave();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,545,else {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,552,RecoveryLastReceivedMessage msg0 = (RecoveryLastReceivedMessage)msg;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,558,recovery.ackReceived(msg0.received());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,563,long rcvCnt = recovery.onReceived();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,565,if (rcvCnt % ackSndThreshold == 0) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,572,recovery.lastAcknowledged(rcvCnt);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,577,IgniteRunnable c;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,594,c = NOOP;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,609,private GridTcpNioCommunicationClient connected(
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,610,GridNioRecoveryDescriptor recovery,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,611,GridNioSession ses,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,612,ClusterNode node,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,613,long rcvCnt,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,614,boolean sndRes,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,615,boolean createClient) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,616,recovery.onHandshake(rcvCnt);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,620,nioSrvr.resend(ses);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,627,GridTcpNioCommunicationClient client = null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,629,if (createClient) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,638,return client;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,719,else {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,720,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,721,fut.onDone();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,723,finally {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,733,private IgniteLogger log;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,736,private String locAddr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,739,private volatile InetAddress locHost;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,742,private int locPort = DFLT_PORT;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,745,private int locPortRange = DFLT_PORT_RANGE;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,748,private int shmemPort = DFLT_SHMEM_PORT;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,751,private boolean directBuf = true;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,754,private boolean directSndBuf;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,757,private long idleConnTimeout = DFLT_IDLE_CONN_TIMEOUT;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,760,private long connTimeout = DFLT_CONN_TIMEOUT;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,763,private long maxConnTimeout = DFLT_MAX_CONN_TIMEOUT;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,767,private int reconCnt = DFLT_RECONNECT_CNT;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,770,private int sockSndBuf = DFLT_SOCK_BUF_SIZE;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,773,private int sockRcvBuf = DFLT_SOCK_BUF_SIZE;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,776,private int msgQueueLimit = DFLT_MSG_QUEUE_LIMIT;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,779,private int slowClientQueueLimit;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,782,private GridNioServer<Message> nioSrvr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,785,private IpcSharedMemoryServerEndpoint shmemSrv;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,788,private boolean tcpNoDelay = DFLT_TCP_NODELAY;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,791,private int ackSndThreshold = DFLT_ACK_SND_THRESHOLD;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,794,private int unackedMsgsBufSize;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,797,private long sockWriteTimeout = DFLT_SOCK_WRITE_TIMEOUT;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,800,private CommunicationWorker commWorker;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,803,private ShmemAcceptWorker shmemAcceptWorker;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,812,private volatile CommunicationListener<Message> lsnr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,815,private int boundTcpPort = -1;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,818,private int boundTcpShmemPort = -1;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,821,private int selectorsCnt = DFLT_SELECTORS_CNT;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,824,private AddressResolver addrRslvr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,839,private final CountDownLatch ctxInitLatch = new CountDownLatch(1);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,842,private volatile boolean stopping;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,857,GridConcurrentFactory.newMap();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,875,private boolean isSslEnabled() {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,876,return ignite.configuration().getSslContextFactory() != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,888,this.addrRslvr = addrRslvr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,898,super.injectResources(ignite);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,900,if (ignite != null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,901,setAddressResolver(ignite.configuration().getAddressResolver());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,902,setLocalAddress(ignite.configuration().getLocalHost());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,918,this.locAddr = locAddr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,923,return locAddr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,935,this.locPort = locPort;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,940,return locPort;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,961,this.locPortRange = locPortRange;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,966,return locPortRange;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,980,this.shmemPort = shmemPort;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,985,return shmemPort;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,998,this.idleConnTimeout = idleConnTimeout;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1003,return idleConnTimeout;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1008,return sockWriteTimeout;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1021,this.sockWriteTimeout = sockWriteTimeout;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1026,return ackSndThreshold;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1038,this.ackSndThreshold = ackSndThreshold;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1043,return unackedMsgsBufSize;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1055,this.unackedMsgsBufSize = unackedMsgsBufSize;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1104,this.connTimeout = connTimeout;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1106,failureDetectionTimeoutEnabled(false);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1111,return connTimeout;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1130,this.maxConnTimeout = maxConnTimeout;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1132,failureDetectionTimeoutEnabled(false);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1137,return maxConnTimeout;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1152,this.reconCnt = reconCnt;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1154,failureDetectionTimeoutEnabled(false);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1159,return reconCnt;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1173,this.directBuf = directBuf;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1178,return directBuf;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1183,return directSndBuf;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1195,this.directSndBuf = directSndBuf;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1207,this.selectorsCnt = selectorsCnt;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1212,return selectorsCnt;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1231,this.tcpNoDelay = tcpNoDelay;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1236,return tcpNoDelay;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1265,this.sockSndBuf = sockSndBuf;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1270,return sockSndBuf;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1285,this.msgQueueLimit = msgQueueLimit;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1290,return msgQueueLimit;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1295,return slowClientQueueLimit;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1311,this.slowClientQueueLimit = slowClientQueueLimit;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1335,this.lsnr = lsnr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1341,public CommunicationListener getListener() {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1342,return lsnr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1367,GridNioServer<Message> srv = nioSrvr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1369,return srv != null ? srv.outboundMessagesQueueSize() : 0;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1386,if (log != null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1411,initFailureDetectionTimeout();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1413,assertParameter(locPort > 1023, "locPort > 1023");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1414,assertParameter(locPort <= 0xffff, "locPort < 0xffff");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1415,assertParameter(locPortRange >= 0, "locPortRange >= 0");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1416,assertParameter(idleConnTimeout > 0, "idleConnTimeout > 0");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1417,assertParameter(sockRcvBuf >= 0, "sockRcvBuf >= 0");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1418,assertParameter(sockSndBuf >= 0, "sockSndBuf >= 0");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1419,assertParameter(msgQueueLimit >= 0, "msgQueueLimit >= 0");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1420,assertParameter(shmemPort > 0 || shmemPort == -1, "shmemPort > 0 || shmemPort == -1");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1421,assertParameter(selectorsCnt > 0, "selectorsCnt > 0");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1423,if (!failureDetectionTimeoutEnabled()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1424,assertParameter(reconCnt > 0, "reconnectCnt > 0");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1425,assertParameter(connTimeout >= 0, "connTimeout >= 0");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1426,assertParameter(maxConnTimeout >= connTimeout, "maxConnTimeout >= connTimeout");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1429,assertParameter(sockWriteTimeout >= 0, "sockWriteTimeout >= 0");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1430,assertParameter(ackSndThreshold > 0, "ackSndThreshold > 0");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1431,assertParameter(unackedMsgsBufSize >= 0, "unackedMsgsBufSize >= 0");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1433,if (unackedMsgsBufSize > 0) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1434,assertParameter(unackedMsgsBufSize >= msgQueueLimit * 5,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1437,assertParameter(unackedMsgsBufSize >= ackSndThreshold * 5,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1441,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1442,locHost = U.resolveLocalHost(locAddr);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1444,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1445,throw new IgniteSpiException("Failed to initialize local address: " + locAddr, e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1448,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1449,shmemSrv = resetShmemServer();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1451,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1452,U.warn(log, "Failed to start shared memory communication server.", e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1455,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1458,nioSrvr = resetNioServer();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1460,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1461,throw new IgniteSpiException("Failed to initialize TCP server: " + locHost, e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1465,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1466,IgniteBiTuple<Collection<String>, Collection<String>> addrs = U.resolveLocalAddresses(locHost);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1468,Collection<InetSocketAddress> extAddrs = addrRslvr == null ? null :
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1469,U.resolveAddresses(addrRslvr, F.flat(Arrays.asList(addrs.get1(), addrs.get2())), boundTcpPort);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1473,res.put(createSpiAttributeName(ATTR_ADDRS), addrs.get1());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1475,res.put(createSpiAttributeName(ATTR_PORT), boundTcpPort);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1476,res.put(createSpiAttributeName(ATTR_SHMEM_PORT), boundTcpShmemPort >= 0 ? boundTcpShmemPort : null);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1477,res.put(createSpiAttributeName(ATTR_EXT_ADDRS), extAddrs);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1479,return res;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1481,catch (IOException | IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1482,throw new IgniteSpiException("Failed to resolve local host to addresses: " + locHost, e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1488,assert locHost != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1491,startStopwatch();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1494,if (log.isDebugEnabled()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1495,log.debug(configInfo("locAddr", locAddr));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1496,log.debug(configInfo("locPort", locPort));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1497,log.debug(configInfo("locPortRange", locPortRange));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1498,log.debug(configInfo("idleConnTimeout", idleConnTimeout));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1499,log.debug(configInfo("directBuf", directBuf));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1500,log.debug(configInfo("directSendBuf", directSndBuf));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1501,log.debug(configInfo("selectorsCnt", selectorsCnt));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1502,log.debug(configInfo("tcpNoDelay", tcpNoDelay));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1503,log.debug(configInfo("sockSndBuf", sockSndBuf));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1504,log.debug(configInfo("sockRcvBuf", sockRcvBuf));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1505,log.debug(configInfo("shmemPort", shmemPort));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1506,log.debug(configInfo("msgQueueLimit", msgQueueLimit));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1508,if (failureDetectionTimeoutEnabled()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1509,log.debug(configInfo("connTimeout", connTimeout));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1510,log.debug(configInfo("maxConnTimeout", maxConnTimeout));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1511,log.debug(configInfo("reconCnt", reconCnt));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1513,else
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1514,log.debug(configInfo("failureDetectionTimeout", failureDetectionTimeout()));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1516,log.debug(configInfo("sockWriteTimeout", sockWriteTimeout));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1517,log.debug(configInfo("ackSndThreshold", ackSndThreshold));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1518,log.debug(configInfo("unackedMsgsBufSize", unackedMsgsBufSize));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1522,U.quietAndWarn(log, "'TCP_NO_DELAY' for communication is off, which should be used with caution " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1525,if (slowClientQueueLimit > 0 && msgQueueLimit > 0 && slowClientQueueLimit >= msgQueueLimit) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1533,connectGate = new ConnectGateway();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1535,if (shmemSrv != null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1536,shmemAcceptWorker = new ShmemAcceptWorker(shmemSrv);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1538,new IgniteThread(shmemAcceptWorker).start();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1541,nioSrvr.start();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1549,log.debug(startInfo());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1554,spiCtx.registerPort(boundTcpPort, IgnitePortProtocol.TCP);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1558,spiCtx.registerPort(boundTcpShmemPort, IgnitePortProtocol.TCP);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1560,spiCtx.addLocalEventListener(discoLsnr, EVT_NODE_LEFT, EVT_NODE_FAILED);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1562,ctxInitLatch.countDown();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1567,if (ctxInitLatch.getCount() > 0) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1569,log.debug("Waiting for context initialization.");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1571,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1572,U.await(ctxInitLatch);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1575,log.debug("Context has been initialized.");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1577,catch (IgniteInterruptedCheckedException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1578,U.warn(log, "Thread has been interrupted while waiting for SPI context initialization.", e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1582,return super.getSpiContext();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1591,private GridNioServer<Message> resetNioServer() throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1593,throw new IgniteCheckedException("Tcp NIO server was already created on port " + boundTcpPort);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1595,IgniteCheckedException lastEx = null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1598,int lastPort = locPortRange == 0 ? locPort : locPort + locPortRange - 1;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1600,for (int port = locPort; port <= lastPort; port++) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1601,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1602,MessageFactory msgFactory = new MessageFactory() {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1603,private MessageFactory impl;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1607,impl = getSpiContext().messageFactory();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1609,assert impl != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1611,return impl.create(type);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1615,GridNioMessageReaderFactory readerFactory = new GridNioMessageReaderFactory() {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1616,private MessageFormatter formatter;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1619,throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1623,assert formatter != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1631,GridNioMessageWriterFactory writerFactory = new GridNioMessageWriterFactory() {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1632,private MessageFormatter formatter;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1638,assert formatter != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1646,GridDirectParser parser = new GridDirectParser(log.getLogger(GridDirectParser.class),
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1647,msgFactory,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1648,readerFactory);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1650,IgnitePredicate<Message> skipRecoveryPred = new IgnitePredicate<Message>() {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1652,return msg instanceof RecoveryLastReceivedMessage;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1656,boolean clientMode = Boolean.TRUE.equals(ignite.configuration().isClientMode());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1658,IgniteBiInClosure<GridNioSession, Integer> queueSizeMonitor =
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1667,GridNioFilter[] filters;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1669,if (isSslEnabled()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1670,GridNioSslFilter sslFilter =
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1671,new GridNioSslFilter(ignite.configuration().getSslContextFactory().create(),
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1674,sslFilter.directMode(true);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1676,sslFilter.wantClientAuth(true);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1677,sslFilter.needClientAuth(true);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1679,filters = new GridNioFilter[] {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1680,new GridNioCodecFilter(parser, log, true),
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1681,new GridConnectionBytesVerifyFilter(log),
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1682,sslFilter
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1685,else
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1686,filters = new GridNioFilter[] {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1687,new GridNioCodecFilter(parser, log, true),
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1714,boundTcpPort = port;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1721,srvr.idleTimeout(idleConnTimeout);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1723,return srvr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1725,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1727,throw new IgniteSpiException("Failed to create SSL context. SSL factory: "
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1728,+ ignite.configuration().getSslContextFactory() + '.', e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1730,lastEx = e;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1733,log.debug("Failed to bind to local port (will try next port within range) [port=" + port +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1736,onException("Failed to bind to local port (will try next port within range) [port=" + port +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1742,throw new IgniteCheckedException("Failed to bind to any port within range [startPort=" + locPort +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1754,throw new IgniteCheckedException("Shared memory server was already created on port " + boundTcpShmemPort);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1757,return null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1759,IgniteCheckedException lastEx = null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1762,for (int port = shmemPort; port < shmemPort + locPortRange; port++) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1763,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1764,IpcSharedMemoryServerEndpoint srv =
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1767,srv.setPort(port);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1769,srv.omitOutOfResourcesWarning(true);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1771,srv.start();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1773,boundTcpShmemPort = port;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1777,log.info("Successfully bound shared memory communication to TCP port [port=" + boundTcpShmemPort +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1780,return srv;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1782,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1783,lastEx = e;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1786,log.debug("Failed to bind to local port (will try next port within range) [port=" + port +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1792,throw new IgniteCheckedException("Failed to bind shared memory communication to any port within range [startPort=" +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1793,locPort + ", portRange=" + locPortRange + ", locHost=" + locHost + ']', lastEx);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1798,assert stopping;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1800,unregisterMBean();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1804,nioSrvr.stop();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1809,U.cancel(shmemAcceptWorker);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1810,U.join(shmemAcceptWorker, log);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1812,U.cancel(shmemWorkers);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1813,U.join(shmemWorkers, log);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1815,shmemWorkers.clear();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1822,nioSrvr = null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1823,commWorker = null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1825,boundTcpPort = -1;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1829,log.debug(stopInfo());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1834,stopping = true;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1838,ctxInitLatch.countDown();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1841,connectGate.stopped();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1847,getSpiContext().deregisterPorts();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1849,getSpiContext().removeLocalEventListener(discoLsnr);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1854,connectGate.disconnected(reconnectFut);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1859,IgniteClientDisconnectedCheckedException err = new IgniteClientDisconnectedCheckedException(reconnectFut,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1863,clientFut.onDone(err);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1865,recoveryDescs.clear();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1870,connectGate.reconnected();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1877,assert nodeId != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1894,throws IgniteSpiException {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1896,checkAttributePresence(node, createSpiAttributeName(ATTR_ADDRS));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1897,checkAttributePresence(node, createSpiAttributeName(ATTR_HOST_NAMES));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1898,checkAttributePresence(node, createSpiAttributeName(ATTR_PORT));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1907,private void checkAttributePresence(ClusterNode node, String attrName) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1909,U.warn(log, "Remote node has inconsistent configuration (required attribute was not found) " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1916,sendMessage0(node, msg, null);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1932,throws IgniteSpiException {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1933,sendMessage0(node, msg, ackC);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1945,throws IgniteSpiException {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1946,assert node != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1947,assert msg != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1950,log.trace("Sending message with ack to node [node=" + node + ", msg=" + msg + ']');
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1952,ClusterNode locNode = getLocalNode();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1955,throw new IgniteSpiException("Local node has not been started or fully initialized " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1959,notifyListener(node.id(), msg, NOOP);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1960,else {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1961,GridCommunicationClient client = null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1963,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1964,boolean retry;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1966,do {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1969,UUID nodeId = null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1972,nodeId = node.id();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1974,retry = client.sendMessage(nodeId, msg, ackC);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1976,client.release();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1983,ClusterNode node0 = getSpiContext().node(node.id());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1990,while (retry);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1995,finally {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1997,client.forceClose();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2010,assert node != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2012,UUID nodeId = node.id();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2014,while (true) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2017,if (client == null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2019,throw new IgniteSpiException("Node is stopping.");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2022,GridFutureAdapter<GridCommunicationClient> fut = new ConnectFuture();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2026,if (oldFut == null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2027,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2030,if (client0 == null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2033,if (client0 != null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2039,if (client0 instanceof GridTcpNioCommunicationClient) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2040,GridTcpNioCommunicationClient tcpClient = ((GridTcpNioCommunicationClient)client0);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2044,log.debug("Session was closed after client creation, will retry " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2047,client0 = null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2052,U.sleep(200);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2055,fut.onDone(client0);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2057,catch (Throwable e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2058,fut.onDone(e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2061,throw (Error)e;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2063,finally {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2067,else
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2068,fut = oldFut;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2070,client = fut.get();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2075,if (getSpiContext().node(nodeId) == null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2077,client.forceClose();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2079,throw new IgniteSpiException("Destination node is not in topology: " + node.id());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2084,return client;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2085,else
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2097,assert node != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2099,Integer shmemPort = node.attribute(createSpiAttributeName(ATTR_SHMEM_PORT));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2101,ClusterNode locNode = getSpiContext().localNode();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2104,throw new IgniteCheckedException("Failed to create NIO client (local node is stopping)");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2107,log.debug("Creating NIO client to node: " + node);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2111,if (shmemPort != null && U.sameMacs(locNode, node)) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2112,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2113,GridCommunicationClient client = createShmemClient(
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2114,node,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2115,shmemPort);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2118,log.debug("Shmem client created: " + client);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2120,return client;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2122,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2129,log.debug("Failed to establish shared memory connection with local node (node has left): " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2130,node.id());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2156,Integer port) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2157,int attempt = 1;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2159,int connectAttempts = 1;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2161,long connTimeout0 = connTimeout;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2165,while (true) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2166,GridCommunicationClient client;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2168,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2170,port,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2171,timeoutHelper.nextTimeoutChunk(connTimeout),
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2172,log,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2173,getSpiContext().messageFormatter());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2175,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2177,throw e;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2180,if (connectAttempts < 2 && X.hasCause(e, ConnectException.class)) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2181,connectAttempts++;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2183,continue;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2186,throw e;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2189,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2193,client.forceClose();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2198,log.debug("Handshake timed out (failure threshold reached) [failureDetectionTimeout=" +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2199,failureDetectionTimeout() + ", err=" + e.getMessage() + ", client=" + client + ']');
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2201,throw e;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2204,assert !failureDetectionTimeoutEnabled();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2207,log.debug("Handshake timed out (will retry with increased timeout) [timeout=" + connTimeout0 +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2210,if (attempt == reconCnt || connTimeout0 > maxConnTimeout) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2212,log.debug("Handshake timedout (will stop attempts to perform the handshake) " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2217,throw e;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2219,else {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2220,attempt++;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2222,connTimeout0 *= 2;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2224,continue;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2227,catch (IgniteCheckedException | RuntimeException | Error e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2229,log.debug(
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2232,client.forceClose();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2234,throw e;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2237,return client;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2247,private void checkClientQueueSize(GridNioSession ses, int msgQueueSize) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2248,if (slowClientQueueLimit > 0 && msgQueueSize > slowClientQueueLimit) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2251,if (id != null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2254,if (node != null && node.isClient()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2255,String msg = "Client node outbound message queue size exceeded slowClientQueueLimit, " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2280,Collection<String> rmtAddrs0 = node.attribute(createSpiAttributeName(ATTR_ADDRS));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2281,Collection<String> rmtHostNames0 = node.attribute(createSpiAttributeName(ATTR_HOST_NAMES));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2282,Integer boundPort = node.attribute(createSpiAttributeName(ATTR_PORT));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2283,Collection<InetSocketAddress> extAddrs = node.attribute(createSpiAttributeName(ATTR_EXT_ADDRS));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2285,boolean isRmtAddrsExist = (!F.isEmpty(rmtAddrs0) && boundPort != null);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2286,boolean isExtAddrsExist = !F.isEmpty(extAddrs);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2289,throw new IgniteCheckedException("Failed to send message to the destination node. Node doesn't have any " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2293,LinkedHashSet<InetSocketAddress> addrs;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2296,if (isRmtAddrsExist) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2303,addrs = new LinkedHashSet<>(addrs0);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2305,else
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2306,addrs = new LinkedHashSet<>();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2310,addrs.addAll(extAddrs);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2314,IgniteCheckedException errs = null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2326,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2329,ch.configureBlocking(true);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2331,ch.socket().setTcpNoDelay(tcpNoDelay);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2332,ch.socket().setKeepAlive(true);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2335,ch.socket().setReceiveBufferSize(sockRcvBuf);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2338,ch.socket().setSendBufferSize(sockSndBuf);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2349,if (!recoveryDesc.reserve()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2350,U.closeQuiet(ch);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2352,return null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2359,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2362,if (isSslEnabled()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2365,sslEngine.setUseClientMode(true);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2402,finally {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2405,recoveryDesc.release();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2435,break;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2740,finally {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2744,removeTimeoutObject(obj);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2752,return rcvCnt;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2760,protected void notifyListener(UUID sndId, Message msg, IgniteRunnable msgC) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2761,CommunicationListener<Message> lsnr = this.lsnr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2765,lsnr.onMessage(sndId, msg, msgC);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2767,log.debug("Received communication message without any registered listeners (will ignore, " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2776,public void simulateNodeFailure() {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2778,nioSrvr.stop();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2782,U.join(commWorker, log);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2816,private void onException(String msg, Exception e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2817,getExceptionRegistry().onException(msg, e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2823,private NodeIdMessage nodeIdMessage() {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2824,ClusterNode locNode = getLocalNode();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2826,UUID id;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2828,if (locNode == null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2829,U.warn(log, "Local node is not started or fully initialized [isStopping=" +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2832,id = new UUID(0, 0);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2834,else
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2835,id = locNode.id();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2910,private class ShmemAcceptWorker extends GridWorker {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2912,private final IpcSharedMemoryServerEndpoint srv;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2917,ShmemAcceptWorker(IpcSharedMemoryServerEndpoint srv) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2920,this.srv = srv;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2925,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2926,while (!Thread.interrupted()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2927,ShmemWorker e = new ShmemWorker(srv.accept());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2929,shmemWorkers.add(e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2931,new IgniteThread(e).start();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2934,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2936,U.error(log, "Shmem server failed.", e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2938,finally {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2939,srv.close();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2945,super.cancel();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2947,srv.close();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2954,private class ShmemWorker extends GridWorker {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2956,private final IpcEndpoint endpoint;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2961,private ShmemWorker(IpcEndpoint endpoint) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2964,this.endpoint = endpoint;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2969,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2970,MessageFactory msgFactory = new MessageFactory() {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2971,private MessageFactory impl;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2975,impl = getSpiContext().messageFactory();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2977,assert impl != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2979,return impl.create(type);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2983,GridNioMessageWriterFactory writerFactory = new GridNioMessageWriterFactory() {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2984,private MessageFormatter formatter;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2988,formatter = getSpiContext().messageFormatter();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2990,assert formatter != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2998,GridNioMessageReaderFactory readerFactory = new GridNioMessageReaderFactory() {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2999,private MessageFormatter formatter;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3002,throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3004,formatter = getSpiContext().messageFormatter();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3006,assert formatter != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3014,IpcToNioAdapter<Message> adapter = new IpcToNioAdapter<>(
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3016,log,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3017,endpoint,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3018,srvLsnr,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3019,writerFactory,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3020,new GridNioCodecFilter(
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3022,log,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3023,true),
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3025,);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3027,adapter.serve();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3029,finally {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3030,shmemWorkers.remove(this);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3032,endpoint.close();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3038,super.cancel();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3040,endpoint.close();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3045,super.cleanup();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3047,endpoint.close();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3052,return S.toString(ShmemWorker.class, this);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3073,log.debug("Tcp communication worker has been started.");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3088,private void processIdle() {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3089,cleanupRecovery();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3092,UUID nodeId = e.getKey();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3159,continue;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3165,left = new HashSet<>();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3167,left.add(e.getKey());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3171,if (left != null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3172,assert !left.isEmpty();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3235,assert add;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3242,private static class ConnectFuture extends GridFutureAdapter<GridCommunicationClient> {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3252,private static class HandshakeTimeoutObject<T> implements IgniteSpiTimeoutObject {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3254,private final IgniteUuid id = IgniteUuid.randomUuid();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3257,private final T obj;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3260,private final long endTime;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3263,private final AtomicBoolean done = new AtomicBoolean();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3269,private HandshakeTimeoutObject(T obj, long endTime) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3270,assert obj != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3271,assert obj instanceof GridCommunicationClient || obj instanceof SelectableChannel;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3272,assert endTime > 0;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3274,this.obj = obj;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3275,this.endTime = endTime;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3281,boolean cancel() {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3282,return done.compareAndSet(false, true);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3287,if (done.compareAndSet(false, true)) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3290,((GridCommunicationClient)obj).forceClose();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3291,else
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3298,return endTime;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3303,return id;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3308,return S.toString(HandshakeTimeoutObject.class, this);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3315,private class HandshakeClosure extends IgniteInClosure2X<InputStream, OutputStream> {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3317,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3320,private final UUID rmtNodeId;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3325,private HandshakeClosure(UUID rmtNodeId) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3326,this.rmtNodeId = rmtNodeId;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3332,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3336,int n = 0;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3342,throw new IgniteCheckedException("Failed to get remote node ID (end of stream reached)");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3344,n += cnt;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3351,throw new IgniteCheckedException("Remote node ID is not as expected [expected=" + rmtNodeId +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3354,log.debug("Received remote node ID: " + id);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3356,catch (SocketTimeoutException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3357,throw new IgniteCheckedException("Failed to perform handshake due to timeout (consider increasing " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3360,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3361,throw new IgniteCheckedException("Failed to perform handshake.", e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3364,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3365,ClusterNode localNode = getLocalNode();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3368,throw new IgniteSpiException("Local node has not been started or fully initialized " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3371,UUID id = localNode.id();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3373,NodeIdMessage msg = new NodeIdMessage(id);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3375,out.write(U.IGNITE_HEADER);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3379,out.flush();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3382,log.debug("Sent local node ID [locNodeId=" + id + ", rmtNodeId=" + rmtNodeId + ']');
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3384,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3385,throw new IgniteCheckedException("Failed to perform handshake.", e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxRemoteAdapter.java,20,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxRemoteAdapter.java,87,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxRemoteAdapter.java,113,public GridDistributedTxRemoteAdapter() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,20,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,67,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,99,public GridDhtTxLocal() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,20,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,78,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,104,protected GridDhtTxLocalAdapter() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,20,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,56,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,70,public GridDhtTxRemote() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2986,String taskName = ctx.kernalContext().task().resolveTaskName(req.taskNameHash());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearAtomicCache.java,153,String taskName = ctx.kernalContext().task().resolveTaskName(req.taskNameHash());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearAtomicCache.java,316,String taskName = ctx.kernalContext().task().resolveTaskName(req.taskNameHash());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,20,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,87,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,140,public GridNearTxLocal() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxRemote.java,20,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxRemote.java,52,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxRemote.java,69,public GridNearTxRemote() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,20,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,21,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,22,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,23,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,24,import java.io.ObjectStreamException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,104,public abstract class IgniteTxAdapter extends GridMetadataAwareAdapter implements IgniteInternalTx, Externalizable {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,106,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,245,protected String taskName;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,257,protected IgniteTxAdapter() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1574,return taskName;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1576,return (taskName = cctx.kernalContext().task().resolveTaskName(taskNameHash));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1738,writeExternalMeta(out);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1740,out.writeObject(xidVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1741,out.writeBoolean(invalidate);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1742,out.writeLong(timeout);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1743,out.writeLong(threadId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1744,out.writeLong(startTime);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1746,U.writeUuid(out, nodeId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1748,out.write(isolation.ordinal());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1749,out.write(concurrency.ordinal());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1750,out.write(state().ordinal());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1755,readExternalMeta(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1757,xidVer = (GridCacheVersion)in.readObject();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1758,invalidate = in.readBoolean();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1759,timeout = in.readLong();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1760,threadId = in.readLong();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1761,startTime = in.readLong();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1763,nodeId = U.readUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1765,isolation = TransactionIsolation.fromOrdinal(in.read());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1766,concurrency = TransactionConcurrency.fromOrdinal(in.read());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1768,state = TransactionState.fromOrdinal(in.read());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1777,protected Object readResolve() throws ObjectStreamException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1778,return new TxShadow(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1780,nodeId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1781,threadId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1782,startTime,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1783,isolation,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1784,concurrency,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1785,invalidate,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1786,implicit,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1787,timeout,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1788,state(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1790,);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,20,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,120,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,168,protected IgniteTxLocalAdapter() {
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,1240,ctx.closure().runLocalSafe(new Runnable() {
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridMetadataAwareAdapter.java,20,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridMetadataAwareAdapter.java,21,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridMetadataAwareAdapter.java,22,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridMetadataAwareAdapter.java,23,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridMetadataAwareAdapter.java,351,protected void writeExternalMeta(ObjectOutput out) throws IOException {
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridMetadataAwareAdapter.java,352,Object[] cp;
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridMetadataAwareAdapter.java,355,synchronized (this) {
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridMetadataAwareAdapter.java,356,cp = Arrays.copyOf(this.data, this.data.length);
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridMetadataAwareAdapter.java,359,out.writeObject(cp);
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridMetadataAwareAdapter.java,372,protected void readExternalMeta(ObjectInput in) throws IOException, ClassNotFoundException {
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridMetadataAwareAdapter.java,373,Object[] cp = (Object[])in.readObject();
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridMetadataAwareAdapter.java,375,synchronized (this) {
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridMetadataAwareAdapter.java,376,this.data = cp;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1099,GridCacheVersion obsoleteVer = ctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4567,GridCacheVersion obsoleteVer = ctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4594,return evictx(key, ctx.versions().next(), CU.empty0());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4607,GridCacheVersion obsoleteVer = ctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAtomicVersionComparator.java,35,int topVer = one.topologyVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAtomicVersionComparator.java,36,int otherTopVer = other.topologyVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAtomicVersionComparator.java,38,if (topVer == otherTopVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAtomicVersionComparator.java,55,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAtomicVersionComparator.java,58,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAtomicVersionComparator.java,59,return topVer > otherTopVer ? 1 : -1;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,429,GridCacheVersion obsoleteVer = ctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxRemoteAdapter.java,151,ctx.versions().last(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,1529,obsoleteVer = ctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,1671,nearEntry.markObsolete(ctx.versions().next());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,1082,tx.writeVersion(cctx.versions().next(tx.topologyVersion()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,908,return new GridCacheDrInfo(o, ctx.versions().next(opCtx.dataCenterId()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,919,return ctx.versions().next(opCtx.dataCenterId());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,930,return new GridCacheDrInfo(ctx.toCacheObject(o), ctx.versions().next(opCtx.dataCenterId()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1097,conflictPutVal = new GridCacheDrInfo(ctx.toCacheObject(val), ctx.versions().next(dcId));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1102,conflictPutVal = new GridCacheDrInfo(proc, ctx.versions().next(dcId));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1107,conflictRmvVer = ctx.versions().next(dcId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1211,return ctx.versions().next(opCtx.dataCenterId());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,198,lockVer = tx != null ? tx.xidVersion() : cctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,146,Map<Integer, Object> tops = new HashMap<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,1023,private void checkIsDone() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,1062,onDone(!cancelled);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheAdapter.java,473,GridCacheVersion obsoleteVer = ctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,136,ver = tx == null ? cctx.versions().next() : tx.xidVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,281,GridCacheVersion obsolete = cctx.versions().next(topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,723,GridCacheVersion ver = atomic ? null : F.isEmpty(infos) ? null : cctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,201,lockVer = tx != null ? tx.xidVersion() : cctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTransactionalCache.java,220,GridCacheVersion obsoleteVer = ctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,174,ctx.versions().next(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/GridLocalLockFuture.java,142,lockVer = tx != null ? tx.xidVersion() : cctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,909,GridCacheVersion ver = ctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteInternalTx.java,545,public void endVersion(GridCacheVersion endVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,148,protected GridCacheVersion startVer;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,159,protected GridCacheVersion endVer;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,309,startVer = cctx.versions().last();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,351,this.startVer = startVer;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1143,this.endVer = endVer;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,1131,tx.endVersion(cctx.versions().next(tx.topologyVersion()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,27,import org.apache.ignite.internal.processors.affinity.AffinityTopologyVersion;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,61,private long gridStartTime;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,64,private GridCacheVersion ISOLATED_STREAMER_VER;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,180,if (ISOLATED_STREAMER_VER == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,181,long topVer = 1;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,184,gridStartTime = cctx.kernalContext().discovery().gridStartTime();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,186,topVer += (gridStartTime - TOP_VER_BASE_TIME) / 1000;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,191,return ISOLATED_STREAMER_VER;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,197,public GridCacheVersion next() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,198,return next(cctx.kernalContext().discovery().topologyVersion(), true, false, dataCenterId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,205,public GridCacheVersion next(byte dataCenterId) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,206,return next(cctx.kernalContext().discovery().topologyVersion(), true, false, dataCenterId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,217,public GridCacheVersion next(AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,218,return next(topVer.topologyVersion(), true, false, dataCenterId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,226,public GridCacheVersion nextForLoad() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,227,return next(cctx.kernalContext().discovery().topologyVersion(), true, true, dataCenterId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,235,public GridCacheVersion nextForLoad(AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,236,return next(topVer.topologyVersion(), true, true, dataCenterId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,244,public GridCacheVersion nextForLoad(GridCacheVersion ver) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,245,return next(ver.topologyVersion(), false, true, dataCenterId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,254,public GridCacheVersion next(GridCacheVersion ver) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,255,return next(ver.topologyVersion(), false, false, dataCenterId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,270,private GridCacheVersion next(long topVer, boolean addTime, boolean forLoad, byte dataCenterId) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,272,topVer = cctx.kernalContext().discovery().topologyVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,276,if (addTime) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,278,gridStartTime = cctx.kernalContext().discovery().gridStartTime();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,280,topVer += (gridStartTime - TOP_VER_BASE_TIME) / 1000;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,285,long ord = forLoad ? loadOrder.incrementAndGet() : order.incrementAndGet();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,288,(int)topVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,291,locNodeOrder,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,305,return last;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/client/message/GridClientAuthenticationRequest.java,33,private Object cred;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/client/message/GridClientAuthenticationRequest.java,38,public Object credentials() {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/client/message/GridClientAuthenticationRequest.java,45,public void credentials(Object cred) {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/client/message/GridClientAuthenticationRequest.java,60,cred = in.readObject();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,287,restReq.credentials(req.credentials());
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryReaderExImpl.java,1149,return BinaryUtils.doReadObjectArray(in, ctx, ldr, this, true);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryReaderExImpl.java,1291,return (Collection)BinaryUtils.doReadCollection(in, ctx, ldr, this, true, factory);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryReaderExImpl.java,1358,return (Map)BinaryUtils.doReadMap(in, ctx, ldr, this, true, factory);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryReaderExImpl.java,1618,obj = BinaryUtils.doReadObjectArray(in, ctx, ldr, this, true);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryReaderExImpl.java,1623,obj = BinaryUtils.doReadCollection(in, ctx, ldr, this, true, null);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryReaderExImpl.java,1628,obj = BinaryUtils.doReadMap(in, ctx, ldr, this, true, null);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryUtils.java,1633,obj = unmarshal(in, ctx, ldr, handles);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryUtils.java,1748,return doReadObjectArray(in, ctx, ldr, handles, false);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryUtils.java,1751,return doReadCollection(in, ctx, ldr, handles, false, null);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryUtils.java,1754,return doReadMap(in, ctx, ldr, handles, false, null);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryUtils.java,1787,BinaryReaderHandlesHolder handles, boolean deserialize) throws BinaryObjectException {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryUtils.java,1799,arr[i] = deserializeOrUnmarshal(in, ctx, ldr, handles, deserialize);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryUtils.java,1866,col.add(deserializeOrUnmarshal(in, ctx, ldr, handles, deserialize));
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryUtils.java,1918,Object key = deserializeOrUnmarshal(in, ctx, ldr, handles, deserialize);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryUtils.java,1919,Object val = deserializeOrUnmarshal(in, ctx, ldr, handles, deserialize);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryUtils.java,1934,BinaryReaderHandlesHolder handles, boolean deserialize) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryUtils.java,1935,return deserialize ? doReadObject(in, ctx, ldr, handles) : unmarshal(in, ctx, ldr, handles);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,909,if (expiryPlc != null && expiryPlc.entries() != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,501,for (K key : keys) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,503,throw new NullPointerException("Null key.");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,519,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,525,subjId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,527,taskName,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,529,!deserializeBinary);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,816,for (IgniteTxEntry entry : entries) {
modules/core/src/main/java/org/apache/ignite/internal/GridJobContextImpl.java,276,U.writeGridUuid(out, jobId);
modules/core/src/main/java/org/apache/ignite/internal/GridJobContextImpl.java,283,jobId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/GridJobSiblingImpl.java,187,U.writeGridUuid(out, sesId);
modules/core/src/main/java/org/apache/ignite/internal/GridJobSiblingImpl.java,188,U.writeGridUuid(out, jobId);
modules/core/src/main/java/org/apache/ignite/internal/GridJobSiblingImpl.java,194,sesId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/GridJobSiblingImpl.java,195,jobId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/GridTopic.java,240,U.writeGridUuid(out, id);
modules/core/src/main/java/org/apache/ignite/internal/GridTopic.java,246,id = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/GridTopic.java,308,U.writeGridUuid(out, id1);
modules/core/src/main/java/org/apache/ignite/internal/GridTopic.java,315,id1 = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/GridTopic.java,750,U.writeGridUuid(out, id1);
modules/core/src/main/java/org/apache/ignite/internal/GridTopic.java,757,id1 = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentInfoBean.java,267,U.writeGridUuid(out, clsLdrId);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentInfoBean.java,276,clsLdrId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityMessage.java,137,U.writeGridUuid(out, clsLdrId);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityMessage.java,149,clsLdrId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,693,U.writeGridUuid(out, setId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,699,setId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,773,U.writeGridUuid(out, setId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,780,setId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,659,return xidVer.asGridUuid();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1779,xidVer.asGridUuid(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersion.java,189,public IgniteUuid asGridUuid() {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,779,U.writeGridUuid(out, id);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,784,id = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,872,U.writeGridUuid(out, id);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,877,id = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,942,U.writeGridUuid(out, id);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,948,id = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,1057,U.writeGridUuid(out, id);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,1063,id = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueHeader.java,166,U.writeGridUuid(out, id);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueHeader.java,183,id = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueItemKey.java,85,U.writeGridUuid(out, queueId);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueItemKey.java,92,queueId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetHeader.java,74,U.writeGridUuid(out, id);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetHeader.java,80,id = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetItemKey.java,93,U.writeGridUuid(out, setId);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetItemKey.java,99,setId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridSetQueryPredicate.java,107,U.writeGridUuid(out, setId);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridSetQueryPredicate.java,113,setId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsBlockKey.java,146,U.writeGridUuid(out, fileId);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsBlockKey.java,147,U.writeGridUuid(out, affKey);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsBlockKey.java,154,fileId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsBlockKey.java,155,affKey = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsEntryInfo.java,269,U.writeGridUuid(out, id);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsEntryInfo.java,279,id = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileAffinityRange.java,253,U.writeGridUuid(out, affKey);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileAffinityRange.java,261,affKey = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,220,U.writeGridUuid(out, lockId);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,221,U.writeGridUuid(out, affKey);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,233,lockId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,234,affKey = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsListingEntry.java,101,U.writeGridUuid(out, id);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsListingEntry.java,107,id = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsUtils.java,506,IgniteUtils.writeGridUuid(out, entry.fileId());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsUtils.java,522,IgniteUuid id = IgniteUtils.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryListingRemoveProcessor.java,103,U.writeGridUuid(out, fileId);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryListingRemoveProcessor.java,109,fileId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryListingReplaceProcessor.java,101,U.writeGridUuid(out, id);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryListingReplaceProcessor.java,107,id = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileCreateProcessor.java,123,U.writeGridUuid(out, affKey);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileCreateProcessor.java,124,U.writeGridUuid(out, lockId);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileCreateProcessor.java,135,affKey = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileCreateProcessor.java,136,lockId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileLockProcessor.java,81,U.writeGridUuid(out, lockId);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileLockProcessor.java,86,lockId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4650,public static void writeGridUuids(DataOutput out, @Nullable Collection<IgniteUuid> col) throws IOException {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4657,writeGridUuid(out, id);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4681,col.add(readGridUuid(in));
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4733,public static void writeGridUuid(DataOutput out, IgniteUuid uid) throws IOException {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1896,if (msg.hasMetrics()) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1898,UUID nodeId = e.getKey();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1903,msg.cacheMetrics().get(nodeId) : Collections.<Integer, CacheMetrics>emptyMap();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,2016,private void updateMetrics(UUID nodeId,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,2017,ClusterMetrics metrics,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,2018,Map<Integer, CacheMetrics> cacheMetrics,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,2021,assert nodeId != null;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,2022,assert metrics != null;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,2025,TcpDiscoveryNode node = nodeId.equals(getLocalNodeId()) ? locNode : rmtNodes.get(nodeId);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,2027,if (node != null && node.visible()) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,2028,node.setMetrics(metrics);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,2033,notifyDiscovery(EVT_NODE_METRICS_UPDATED, topVer, node, allVisibleNodes());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,2036,log.debug("Received metrics from unknown node: " + nodeId);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4535,if (spiStateCopy() == CONNECTED) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4536,if (msg.hasMetrics()) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4538,UUID nodeId = e.getKey();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4621,private void updateMetrics(UUID nodeId,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4622,ClusterMetrics metrics,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4623,Map<Integer, CacheMetrics> cacheMetrics,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4626,assert nodeId != null;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4627,assert metrics != null;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4629,TcpDiscoveryNode node = ring.node(nodeId);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4631,if (node != null) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4632,node.setMetrics(metrics);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4633,node.setCacheMetrics(cacheMetrics);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4637,notifyDiscovery(EVT_NODE_METRICS_UPDATED, ring.topologyVersion(), node);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4640,log.debug("Received metrics from unknown node: " + nodeId);
modules/core/src/main/java/org/apache/ignite/internal/GridDiagnostic.java,98,if (!U.isSufficientlyTestedOs()) {
modules/core/src/main/java/org/apache/ignite/internal/GridDiagnostic.java,99,U.warn(log, "This operating system has been tested less rigorously: " + U.osString() +
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6289,public static boolean isSufficientlyTestedOs() {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6290,return
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6291,win7 ||
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6292,win8 ||
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6293,win81 ||
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6294,winXp ||
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6295,winVista ||
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6296,mac ||
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6297,linux ||
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6298,solaris;
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,322,if (cache != null) {
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,323,GridCacheDeploymentManager depMgr = cache.context().deploy();
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,325,GridDeploymentInfo depInfo = wrapper.depInfo;
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,327,if (depInfo != null) {
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,332,ldr = depMgr.globalLoader();
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,334,else {
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,335,U.warn(ctx.log(getClass()), "Received cache event for cache that is not configured locally " +
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,340,try {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentManager.java,290,GridDeployment dep = locStore.getDeployment(meta);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentManager.java,293,dep = ldrStore.getDeployment(ldr.classLoaderId());
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentManager.java,296,dep = verStore.getDeployment(ldr.classLoaderId());
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentMetadata.java,32,class GridDeploymentMetadata {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentMetadata.java,206,void classLoaderId(IgniteUuid clsLdrId) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,684,public void prepare(GridCacheDeployable deployable) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,1066,if (bean != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,1067,assert depEnabled : "Received deployment info while peer class loading is disabled [nodeId=" + nodeId +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,1074,log.debug("Set P2P context [senderId=" + nodeId + ", msg=" + cacheMsg + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,1077,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,657,if (ctx.config().isPeerClassLoadingEnabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,658,GridDeploymentInfo depInfo = e.deployInfo();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,660,if (depInfo != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,666,try {
examples/src/main/java-lgpl/org/apache/ignite/examples/misc/schedule/package-info.java,22,package org.apache.ignite.examples.misc.schedule;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsInputStreamImpl.java,511,public void apply(IgniteInternalFuture<byte[]> t) {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/client/message/GridClientCacheBean.java,112,public int hashCode() {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/client/message/GridClientCacheBean.java,120,public boolean equals(Object obj) {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/client/message/GridClientCacheBean.java,136,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/top/GridTopologyCommandHandler.java,139,public boolean apply(ClusterNode n) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,990,public boolean apply(Integer i) {
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridFilenameUtils.java,1558,public String toString() {
modules/core/src/main/java/org/apache/ignite/lang/IgniteBiTuple.java,204,public V2 put(V1 key, V2 val) {
modules/core/src/main/java/org/jsr166/ConcurrentLinkedDeque8.java,1724,public Unsafe run() throws Exception {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/HadoopExternalTaskExecutor.java,183,public void apply(IgniteInternalFuture<IgniteBiTuple<Process, HadoopProcessDescriptor>> f) {
modules/jms11/src/main/java/org/apache/ignite/stream/jms11/JmsStreamer.java,236,public void run() {
modules/jms11/src/main/java/org/apache/ignite/stream/jms11/JmsStreamer.java,490,public void execute(Runnable command) {
modules/jms11/src/main/java/org/apache/ignite/stream/jms11/JmsStreamer.java,497,public void onMessage(final Message message) {
modules/storm/src/main/java/org/apache/ignite/stream/storm/StormStreamer.java,207,public void prepare(Map map, TopologyContext topologyContext, OutputCollector collector) {
modules/storm/src/main/java/org/apache/ignite/stream/storm/StormStreamer.java,220,public void execute(Tuple tuple) {
modules/storm/src/main/java/org/apache/ignite/stream/storm/StormStreamer.java,247,public void cleanup() {
modules/storm/src/main/java/org/apache/ignite/stream/storm/StormStreamer.java,258,public void declareOutputFields(OutputFieldsDeclarer declarer) {
modules/storm/src/main/java/org/apache/ignite/stream/storm/StormStreamer.java,268,public Map<String, Object> getComponentConfiguration() {
modules/twitter/src/main/java/org/apache/ignite/stream/twitter/TwitterStreamer.java,129,public Boolean call() {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,881,sock.setKeepAlive(true);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,882,sock.setTcpNoDelay(true);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1207,sock.setKeepAlive(true);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1208,sock.setTcpNoDelay(true);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,5127,sock.setKeepAlive(true);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,5128,sock.setTcpNoDelay(true);
modules/core/src/main/java/org/apache/ignite/internal/MarshallerContextImpl.java,20,import java.io.BufferedReader;
modules/core/src/main/java/org/apache/ignite/internal/MarshallerContextImpl.java,25,import java.io.InputStreamReader;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,55,import org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtTopologyFuture;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,297,processSinglePartitionUpdate(node, msg);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,196,Object val = field(ctx, name);
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,96,private static final String UPDATE_TIMESTAMPS_CACHE_NAME = "org.hibernate.cache.spi.UpdateTimestampsCache";
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,97,private static final String STANDART_QUERY_CACHE_NAME = "org.hibernate.cache.internal.StandardQueryCache";
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,120,IgniteCache c1 = createCache(UPDATE_TIMESTAMPS_CACHE_NAME, ATOMIC);
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,121,IgniteCache c2 = createCache(STANDART_QUERY_CACHE_NAME, ATOMIC);
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,196,ignite.destroyCache(UPDATE_TIMESTAMPS_CACHE_NAME);
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,197,ignite.destroyCache(STANDART_QUERY_CACHE_NAME);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEvictionManager.java,1393,plc.onEntryAccessed(e.obsoleteOrDeleted(), e.wrapEviction());
modules/core/src/main/java/org/apache/ignite/internal/binary/GridBinaryMarshaller.java,298,return (T)new BinaryReaderExImpl(ctx, BinaryHeapInputStream.create(arr, 0), ldr, true).deserialize();
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,108,private final AtomicInteger fullHistSize = new AtomicInteger();
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,444,throw new IllegalStateException("Getting affinity for topology version earlier than affinity is " +
modules/core/src/main/java/org/apache/ignite/thread/IgniteThread.java,40,private static final ThreadGroup DFLT_GRP = new ThreadGroup("ignite");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,32,import javax.cache.Cache;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,33,import javax.cache.expiry.ExpiryPolicy;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,817,GridCacheEntryEx cached = entry.cached();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,819,GridCacheContext cacheCtx = entry.context();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,822,cached = cacheCtx.cache().peekEx(entry.key());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,825,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,827,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,829,cacheCtx.cache().removeEntry(cached);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,831,if (!tx.near() && isNearEnabled(cacheCtx)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,832,GridNearCacheAdapter near = cacheCtx.isNear() ? cacheCtx.near() : cacheCtx.dht().near();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,834,GridNearCacheEntry e = near.peekExx(entry.key());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,837,near.removeEntry(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,840,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,841,U.error(log, "Failed to remove obsolete entry from cache: " + cached, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,28,import javax.cache.Cache;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,29,import javax.cache.expiry.ExpiryPolicy;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,30,import javax.cache.processor.EntryProcessor;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,31,import javax.cache.processor.EntryProcessorResult;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryUtils.java,1508,Object[] arr = (Object[])Array.newInstance(BinaryObject.class, len);
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryBuilderSerializer.java,24,import org.apache.ignite.internal.binary.BinaryMetadata;
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryBuilderSerializer.java,115,int typeId = writer.context().typeId(clsName);
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryBuilderSerializer.java,116,String typeName = writer.context().userTypeName(clsName);
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryBuilderSerializer.java,169,int compTypeId = writer.context().typeId(((Object[])val).getClass().getComponentType().getName());
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryBuilderSerializer.java,171,if (val instanceof BinaryBuilderEnum[]) {
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryBuilderSerializer.java,177,if (((Object[])val).getClass().getComponentType().isEnum()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformContext.java,136,public void writeMetadata(BinaryRawWriterEx writer, int typeId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridCacheTxRecoveryFuture.java,107,for (Map.Entry<UUID, Collection<UUID>> e : tx.transactionNodes().entrySet()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridCacheTxRecoveryFuture.java,109,ClusterNode node = cctx.discovery().node(e.getKey());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridCacheTxRecoveryFuture.java,112,nodes.put(node.id(), node);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridCacheTxRecoveryFuture.java,117,for (UUID nodeId : e.getValue()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,581,protected FinalizationStatus finalizationStatus() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,701,if (req.commit()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,704,if (!tx.markFinalizing(USER_FINISH)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,706,log.debug("Will not finish transaction (it is handled by another thread): " + tx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,708,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,24,import java.util.HashSet;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,1764,if (tx.state(MARKED_ROLLBACK) || tx.state() == UNKNOWN) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,1801,processedVers = new HashSet<>(txNum, 1.0f);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,1850,if (!tx.markFinalizing(RECOVERY_FINISH)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,1854,return;
modules/core/src/main/java/org/apache/ignite/IgniteSystemProperties.java,25,import javax.net.ssl.HostnameVerifier;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,60,import javax.net.ssl.SSLException;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2013,this.discardId = discardId;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2014,this.customDiscardId = customDiscardId;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,1058,out.writeLong(idx);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,1064,idx = in.readLong();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,82,public class CacheContinuousQueryManager extends GridCacheManagerAdapter {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,468,rmtFilter,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,856,Factory<CacheEntryEventFilter> rmtFilterFactory = cfg.getCacheEntryEventFilterFactory();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,865,rmtFilterFactory,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,891,jCacheFilter,
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,557,throws BinaryObjectException {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,560,BinaryClassDescriptor desc = descByCls.get(cls);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,564,else if (!desc.registered()) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,570,return desc;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,583,boolean deserialize
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,635,BinaryClassDescriptor desc;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,637,String clsName = cls.getName();
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,639,if (marshCtx.isSystemType(clsName)) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,640,BinarySerializer serializer = null;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,643,serializer = new BinaryReflectiveSerializer();
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,645,desc = new BinaryClassDescriptor(this,
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,646,cls,
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,647,false,
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,648,clsName.hashCode(),
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,649,clsName,
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,650,null,
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,651,SIMPLE_NAME_LOWER_CASE_MAPPER,
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,652,serializer,
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,653,false,
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,655,);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,657,BinaryClassDescriptor old = descByCls.putIfAbsent(cls, desc);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,660,desc = old;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,662,else
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,665,return desc;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,675,boolean registered;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,677,final String clsName = cls.getName();
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,679,BinaryInternalMapper mapper = userTypeMapper(clsName);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,681,final String typeName = mapper.typeName(clsName);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,683,final int typeId = mapper.typeId(clsName);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,692,BinarySerializer serializer = serializerForClass(cls);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,694,String affFieldName = affinityFieldName(cls);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,696,BinaryClassDescriptor desc = new BinaryClassDescriptor(this,
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,697,cls,
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,698,true,
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,699,typeId,
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,700,typeName,
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,701,affFieldName,
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,702,mapper,
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,703,serializer,
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,704,true,
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,705,registered
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,706,);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,715,descByCls.put(cls, desc);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,717,typeId2Mapper.putIfAbsent(typeId, mapper);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,719,return desc;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,729,boolean registered;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,739,BinarySerializer serializer = desc.initialSerializer();
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,742,serializer = serializerForClass(desc.describedClass());
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,744,desc = new BinaryClassDescriptor(
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,745,this,
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,746,desc.describedClass(),
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,747,true,
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,748,desc.typeId(),
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,749,desc.typeName(),
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,750,desc.affFieldKeyName(),
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,751,desc.mapper(),
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,752,serializer,
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,753,true,
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,754,true
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,755,);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,757,descByCls.put(desc.describedClass(), desc);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,760,return desc;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryEnumObjectImpl.java,149,Class cls = BinaryUtils.resolveClass(ctx, typeId, clsName, ctx.configuration().getClassLoader(), true);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryEnumObjectImpl.java,360,public boolean isTypeEquals(final Class<?> cls) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryReaderExImpl.java,309,desc = ctx.descriptorForTypeId(userType, typeId, ldr, true);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryReaderExImpl.java,1474,desc = ctx.descriptorForTypeId(userType, typeId, ldr, true);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryUtils.java,1469,cls = ctx.descriptorForTypeId(true, typeId, ldr, deserialize).describedClass();
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,148,throw new BinaryObjectException("Object is not binary: [class=" + cls + ']');
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1986,throw new IgniteCheckedException("Failed to send message to remote node " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,34,import org.apache.ignite.internal.IgniteKernal;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,368,GridCacheAdapter cache = ((IgniteKernal) ignite).context().cache().internalCache(cacheName);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,371,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,379,return false; // Ignore this remove request because remove request will be sent again.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,391,try (DataStreamerImpl<KeyCacheObject, Object> dataLdr =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,392,(DataStreamerImpl) ignite.dataStreamer(cacheName)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,393,((DataStreamerImpl) dataLdr).maxRemapCount(0);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,398,dataLdr.receiver(DataStreamerCacheUpdaters.<KeyCacheObject, Object>batched());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,401,GridDhtLocalPartition locPart = dht.topology().localPartition(part, topVer, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,404,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,406,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,417,if (iter != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,422,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,423,locPart.release();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,444,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,641,job0.cancel();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2368,private ByteOrder byteOrder = ByteOrder.nativeOrder();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1672,true, ByteOrder.nativeOrder(), log);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxRemoteAdapter.java,255,Collection<GridCacheVersion> pendingVers) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxRemoteAdapter.java,297,Collection<GridCacheVersion> pendingVers) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxRemoteAdapter.java,440,txEntry.cached(txEntry.context().cache().entryEx(txEntry.key(), topologyVersion()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockFuture.java,265,tx.addInvalidPartition(cacheCtx, invalidPart);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,282,super.addInvalidPartition(cacheCtx, part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,284,txState.invalidPartition(part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,310,addInvalidPartition(cacheCtx, e.partition());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteInternalTx.java,324,public void addInvalidPartition(GridCacheContext<?, ?> cacheCtx, int part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,672,Set<Integer> parts = invalidParts.get(cacheCtx.cacheId());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,677,invalidParts.put(cacheCtx.cacheId(), parts);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,683,log.debug("Added invalid partition for transaction [cache=" + cacheCtx.name() + ", part=" + part +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxEntry.java,92,private IgniteInternalTx tx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,1525,tx.addInvalidPartition(cacheCtx, e.partition());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxRemoteEx.java,36,Collection<GridCacheVersion> pendingVers);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxRemoteState.java,38,public void invalidPartition(int part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxRemoteStateImpl.java,26,import org.apache.ignite.internal.processors.cache.GridCacheEntryEx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxRemoteStateImpl.java,134,GridCacheEntryEx cached = e.cached();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCache.java,22,import org.apache.ignite.internal.processors.cache.CacheMetricsImpl;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCache.java,75,CacheMetricsImpl m = new CacheMetricsImpl(ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCache.java,77,m.delegate(ctx.dht().near().metrics0());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCache.java,79,metrics = m;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,49,import org.apache.ignite.internal.processors.cache.CacheMetricsImpl;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,235,CacheMetricsImpl m = new CacheMetricsImpl(ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,238,m.delegate(ctx.dht().near().metrics0());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,240,metrics = m;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,1200,List<List<ClusterNode>> aff1 = ctx.affinity().assignments(expVer);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1648,private boolean permissionsEqual(SecurityPermissionSet locPerms, SecurityPermissionSet rmtPerms) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3723,if (!permissionsEqual(coordSubj.subject().permissions(), subj.subject().permissions())) {
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryObjectBuilderImpl.java,555,return setField(name, (Object)builder);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,451,exchange = onAffinityChangeRequest(crdNode);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,591,private ExchangeType onAffinityChangeRequest(boolean crd) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,594,cctx.affinity().onChangeAffinityMessage(this, crd, affChangeMsg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,607,private ExchangeType onClientNodeEvent(boolean crd) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,618,cctx.affinity().onClientEvent(this, crd);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,1452,cctx.affinity().onExchangeChangeAffinityMessage(GridDhtPartitionsExchangeFuture.this,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,1453,crd.isLocal(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,1454,msg);
modules/core/src/main/java/org/apache/ignite/internal/client/GridClient.java,71,public GridClientData data() throws GridClientException;
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,262,return data(null);
modules/core/src/main/java/org/apache/ignite/internal/client/router/impl/GridRouterClientImpl.java,179,return clientImpl.data();
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentClassLoader.java,602,GridDeploymentResponse res = comm.sendResourceRequest(path, ldrId, node, endTime);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentCommunication.java,350,final ClusterNode dstNode, long threshold) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentCommunication.java,472,throw new IgniteCheckedException("Got interrupted while waiting for response from node: " +
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentCommunication.java,473,dstNode.id(), e);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,686,ClassLoader temp = new GridDeploymentClassLoader(
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,709,rsrcIn = temp.getResourceAsStream(path);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,729,else
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryReaderExImpl.java,1709,throw new BinaryObjectException("Cannot find metadata for object with compact footer: " +
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryReaderExImpl.java,1710,typeId);
modules/tools/src/main/java/org/apache/ignite/tools/ant/beautifier/GridJavadocAntTask.java,44,private static final String SH_URL = "http://agorbatchev.typepad.com/pub/sh/3_0_83";
modules/tools/src/main/java/org/apache/ignite/tools/ant/beautifier/GridJavadocAntTask.java,280,tok.update(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,43,import javax.management.MBeanServer;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,1105,ctx.deploymentEnabled());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,1150,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,1151,ctx.deploymentEnabled());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,1265,ctx.deploymentEnabled());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,600,prepare0();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,1048,private void prepare0() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedCache.java,154,processLockResponse(nodeId, res);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedCache.java,1083,private void processLockResponse(UUID nodeId, GridNearLockResponse res) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,692,tx.onRemap(topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1461,IgniteInternalFuture<?> affFut =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1462,cctx.shared().exchange().affinityReadyFuture(res.clientRemapVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1485,int i = 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1487,for (KeyCacheObject k : keys) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1488,IgniteBiTuple<GridCacheVersion, CacheObject> oldValTup = valMap.get(k);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1490,CacheObject newVal = res.value(i);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1492,GridCacheVersion dhtVer = res.dhtVersion(i);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1494,if (newVal == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1495,if (oldValTup != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1497,newVal = oldValTup.get2();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1501,if (inTx()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1502,IgniteTxEntry txEntry = tx.entry(cctx.txKey(k));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1505,assert txEntry.cached().detached() : txEntry;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1507,txEntry.markLocked();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1509,GridDhtDetachedCacheEntry entry = (GridDhtDetachedCacheEntry)txEntry.cached();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1511,if (res.dhtVersion(i) == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1512,onDone(new IgniteCheckedException("Failed to receive DHT version from remote node " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1515,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1519,entry.resetFromPrimary(newVal, dhtVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1521,tx.hasRemoteLocks(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1524,log.debug("Processed response for entry [res=" + res + ", entry=" + entry + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1526,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1527,cctx.mvcc().markExplicitOwner(cctx.txKey(k), threadId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1529,if (retval && cctx.events().isRecordable(EVT_CACHE_OBJECT_READ)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1530,cctx.events().addEvent(cctx.affinity().partition(k),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1531,k,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1532,tx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1533,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1534,EVT_CACHE_OBJECT_READ,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1535,newVal,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1536,newVal != null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1537,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1538,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1539,CU.subjectId(tx, cctx.shared()),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1540,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1541,tx == null ? null : tx.resolveTaskName(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1542,keepBinary);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1545,i++;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1548,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1549,proceedMapping();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1551,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1552,onDone(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1555,onDone(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,833,private boolean isInitial() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,792,tx.onRemap(topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1502,IgniteInternalFuture<?> affFut =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1503,cctx.shared().exchange().affinityReadyFuture(res.clientRemapVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1505,if (affFut != null && !affFut.isDone()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1506,affFut.listen(new CI1<IgniteInternalFuture<?>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1508,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1509,fut.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1511,remap();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1513,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1514,onDone(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1516,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1517,cctx.shared().txContextReset();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1522,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1523,remap();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1525,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1526,int i = 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1528,AffinityTopologyVersion topVer = GridNearLockFuture.this.topVer;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1530,for (KeyCacheObject k : keys) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1531,while (true) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1532,GridNearCacheEntry entry = cctx.near().entryExx(k, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1534,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1535,if (res.dhtVersion(i) == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1536,onDone(new IgniteCheckedException("Failed to receive DHT version from remote node " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1539,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1542,IgniteBiTuple<GridCacheVersion, CacheObject> oldValTup = valMap.get(entry.key());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1544,CacheObject oldVal = entry.rawGet();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1545,boolean hasOldVal = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1546,CacheObject newVal = res.value(i);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1548,boolean readRecordable = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1550,if (retval) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1551,readRecordable = cctx.events().isRecordable(EVT_CACHE_OBJECT_READ);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1554,hasOldVal = entry.hasValue();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1557,GridCacheVersion dhtVer = res.dhtVersion(i);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1558,GridCacheVersion mappedVer = res.mappedVersion(i);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1560,if (newVal == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1561,if (oldValTup != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1563,newVal = oldValTup.get2();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1565,oldVal = oldValTup.get2();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1571,entry.resetFromPrimary(newVal, lockVer, dhtVer, node.id(), topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1573,if (inTx()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1574,tx.hasRemoteLocks(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1576,if (implicitTx() && tx.onePhaseCommit()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1577,boolean pass = res.filterResult(i);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1579,tx.entry(cctx.txKey(k)).filters(pass ? CU.empty0() : CU.alwaysFalse0Arr());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1583,entry.readyNearLock(lockVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1584,mappedVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1585,res.committedVersions(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1586,res.rolledbackVersions(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1587,res.pending());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1589,if (retval) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1591,cctx.events().addEvent(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1592,entry.partition(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1593,entry.key(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1594,tx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1595,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1596,EVT_CACHE_OBJECT_READ,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1597,newVal,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1598,newVal != null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1599,oldVal,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1600,hasOldVal,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1601,CU.subjectId(tx, cctx.shared()),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1602,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1603,inTx() ? tx.resolveTaskName() : null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1604,keepBinary);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1607,cctx.cache().metrics0().onRead(false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1611,log.debug("Processed response for entry [res=" + res + ", entry=" + entry + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1613,break; // Inner while loop.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1615,catch (GridCacheEntryRemovedException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1617,log.debug("Failed to add candidates because entry was removed (will renew).");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1619,synchronized (GridNearLockFuture.this) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1621,entries.set(i,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1622,(GridDistributedCacheEntry)cctx.cache().entryEx(entry.key()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1627,i++;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1630,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1631,proceedMapping();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1633,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1634,onDone(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1637,onDone(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockResponse.java,93,boolean addDepInfo
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockResponse.java,272,dhtVers = reader.readObjectArray("dhtVers", MessageCollectionItemType.MSG, GridCacheVersion.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockResponse.java,280,filterRes = reader.readBooleanArray("filterRes");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockResponse.java,288,mappedVers = reader.readObjectArray("mappedVers", MessageCollectionItemType.MSG, GridCacheVersion.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,137,if (ERR_UPD.compareAndSet(this, null, e)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,138,boolean marked = tx.setRollbackOnly();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,140,if (e instanceof IgniteTxRollbackCheckedException) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,141,if (marked) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFutureAdapter.java,114,tx.onRemap(topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,1335,mapped = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,1336,nearLocallyMapped = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,1337,colocatedLocallyMapped = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,1338,txNodes = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,1339,onePhaseCommit = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,1340,nearMap.clear();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,1341,dhtMap.clear();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,1342,mappings.clear();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,566,return cacheCfg.getCacheMode() == CacheMode.REPLICATED;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,746,return cacheCfg.getAtomicityMode() == ATOMIC;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,937,return cacheCfg;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,946,return store().isLocal() || cacheCfg.isWriteBehindEnabled();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1410,return cacheCfg.isReadThrough() && !skipStore();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1417,return store().configured() && cacheCfg.isReadThrough();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1424,return cacheCfg.isLoadPreviousValue();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1431,return cacheCfg.isWriteThrough() && !skipStore();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1438,return cacheCfg.isInvalidate();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1445,return cacheCfg.getWriteSynchronizationMode() == FULL_SYNC;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1452,return cacheCfg.getWriteSynchronizationMode() == FULL_SYNC;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1459,return cacheCfg.getWriteSynchronizationMode() == PRIMARY_SYNC;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProxyImpl.java,102,aff = new GridCacheAffinityProxy<>(ctx, ctx.cache().affinity());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxStateImpl.java,235,nonLocCtx = cacheCtx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxStateImpl.java,237,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxStateImpl.java,246,if (nonLocCtx.topology().stopping()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxStateImpl.java,250,return null;
modules/core/src/main/java/org/apache/ignite/configuration/IgniteConfiguration.java,155,public static final int DFLT_REBALANCE_THREAD_POOL_SIZE = 1;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,246,ctx.preloader().unwindUndeploys();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePreloader.java,150,public void unwindUndeploys();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,122,private final Map<Integer, Object> rebalanceTopics;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,149,tops.put(idx, GridCachePartitionExchangeManager.rebalanceTopic(idx));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,151,rebalanceTopics = tops;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,111,private final ReadWriteLock demandLock = new ReentrantReadWriteLock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,222,busyLock.writeLock().lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,383,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,385,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,386,demandLock.readLock().lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,392,demandLock.readLock().unlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,395,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,396,leaveBusy();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,403,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,405,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,406,supplier.handleDemandMessage(idx, id, d);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,408,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,409,leaveBusy();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,717,demandLock.writeLock().lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,719,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,722,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,723,demandLock.writeLock().unlock();
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,26,import java.util.concurrent.Executors;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,54,execs[i] = Executors.newSingleThreadExecutor(factory);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2197,queue.addFirst(msg);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2202,log.debug("Message has been added to queue: " + msg);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4526,if (locNodeId.equals(msg.creatorNodeId()) && !hasMetrics(msg, locNodeId) && msg.senderNodeId() != null) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4554,if ((locNodeId.equals(msg.creatorNodeId()) && msg.senderNodeId() == null ||
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4555,!hasMetrics(msg, locNodeId)) && spiStateCopy() == CONNECTED) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4647,return msg.hasMetrics(nodeId) || msg.hasCacheMetrics(nodeId);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/messages/TcpDiscoveryStatusCheckMessage.java,81,public TcpDiscoveryNode creatorNode() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,25,import java.util.Deque;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,30,import java.util.LinkedList;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,50,import org.apache.ignite.cache.CacheRebalanceMode;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,54,import org.apache.ignite.cache.affinity.rendezvous.RendezvousAffinityFunction;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,61,import org.apache.ignite.configuration.IgniteConfiguration;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,70,import org.apache.ignite.internal.IgniteNodeAttributes;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,131,import static org.apache.ignite.cache.CacheWriteSynchronizationMode.FULL_ASYNC;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,137,import static org.apache.ignite.configuration.DeploymentMode.ISOLATED;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,138,import static org.apache.ignite.configuration.DeploymentMode.PRIVATE;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,142,import static org.apache.ignite.internal.IgniteNodeAttributes.ATTR_CONSISTENCY_CHECK_SKIPPED;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,143,import static org.apache.ignite.internal.IgniteNodeAttributes.ATTR_TX_CONFIG;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,167,private final Deque<String> stopSeq;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,207,stopSeq = new LinkedList<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,217,throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,364,private void validate(IgniteConfiguration c,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,365,CacheConfiguration cc,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,366,CacheType cacheType,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,368,if (cc.getCacheMode() == REPLICATED) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,369,if (cc.getNearConfiguration() != null &&
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,370,ctx.discovery().cacheAffinityNode(ctx.discovery().localNode(), cc.getName())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,371,U.warn(log, "Near cache cannot be used with REPLICATED cache, " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,374,cc.setNearConfiguration(null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,379,U.warn(log, "AffinityFunction configuration parameter will be ignored for local cache [cacheName=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,380,U.maskName(cc.getName()) + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,383,assertParameter(cc.getRebalanceBatchSize() > 0, "rebalanceBatchSize > 0");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,385,if (cc.getCacheMode() == PARTITIONED || cc.getCacheMode() == REPLICATED) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,387,U.warn(log, "Cache write synchronization mode is set to FULL_ASYNC. All single-key 'put' and " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,392,DeploymentMode depMode = c.getDeploymentMode();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,394,if (c.isPeerClassLoadingEnabled() && (depMode == PRIVATE || depMode == ISOLATED) &&
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,401,throw new IgniteCheckedException("Cannot enable write-behind (writer or store is not provided) " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,404,assertParameter(cc.getWriteBehindBatchSize() > 0, "writeBehindBatchSize > 0");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,405,assertParameter(cc.getWriteBehindFlushSize() >= 0, "writeBehindFlushSize >= 0");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,406,assertParameter(cc.getWriteBehindFlushFrequency() >= 0, "writeBehindFlushFrequency >= 0");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,407,assertParameter(cc.getWriteBehindFlushThreadCount() > 0, "writeBehindFlushThreadCount > 0");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,410,throw new IgniteCheckedException("Cannot set both 'writeBehindFlushFrequency' and " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,415,throw new IgniteCheckedException("Cannot enable read-through (loader or store is not provided) " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,419,throw new IgniteCheckedException("Cannot enable write-through (writer or store is not provided) " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,422,long delay = cc.getRebalanceDelay();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,424,if (delay != 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,428,else if (cc.getRebalanceMode() == SYNC) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,429,if (delay < 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,430,U.warn(log, "Ignoring SYNC rebalance mode with manual rebalance start (node will not wait for " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,434,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,443,ctx.igfsHelper().validateCacheConfiguration(cc);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,894,for (String cacheName : stopSeq) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2719,private int validatePreloadOrder(CacheConfiguration[] cfgs) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2720,int maxOrder = 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2722,for (CacheConfiguration cfg : cfgs) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2723,int rebalanceOrder = cfg.getRebalanceOrder();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2725,if (rebalanceOrder > 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2727,throw new IgniteCheckedException("Rebalance order set for local cache (fix configuration and restart the " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2731,throw new IgniteCheckedException("Only caches with SYNC or ASYNC rebalance mode can be set as rebalance " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2735,maxOrder = Math.max(maxOrder, rebalanceOrder);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2738,throw new IgniteCheckedException("Rebalance order cannot be negative for cache (fix configuration and restart " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2742,return maxOrder;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2757,CacheConfiguration cfg = desc.cacheConfiguration();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2759,if (cfg.getAffinity() instanceof RendezvousAffinityFunction) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2760,RendezvousAffinityFunction aff = (RendezvousAffinityFunction)cfg.getAffinity();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2762,Object nodeHashObj = aff.resolveNodeHash(node);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2765,Object topNodeHashObj = aff.resolveNodeHash(topNode);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2767,if (nodeHashObj.hashCode() == topNodeHashObj.hashCode()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2774,String errMsg = "Failed to add node to topology because it has the same hash code for " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2778,String sndMsg = "Failed to add node to topology because it has the same hash code for " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2782,return new IgniteNodeValidationResult(topNode.id(), errMsg, sndMsg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2789,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,3073,return F.viewReadOnly(jCacheProxies.values(), new IgniteClosure<IgniteCacheProxy<?, ?>,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,3074,IgniteInternalCache<?, ?>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,3076,return entries.internalProxy();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheEntry.java,736,checkOwnerChanged(prev, owner, val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheEntry.java,856,e.recheck();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheEntry.java,858,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/GridLocalCacheEntry.java,272,e.recheck();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/GridLocalCacheEntry.java,274,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1118,if (!F.eq(locVal, rmtVal)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1119,if (fail) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1120,throw new IgniteCheckedException(attrMsg + " mismatch (fix " + attrMsg.toLowerCase() + " in cache " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1127,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1128,assert log != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1130,U.warn(log, attrMsg + " mismatch (fix " + attrMsg.toLowerCase() + " in cache " +
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1589,start0(startCtx);
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1610,private void start0(GridStartContext startCtx) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1613,IgniteConfiguration cfg = startCtx.config() != null ? startCtx.config() : new IgniteConfiguration();
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1615,IgniteConfiguration myCfg = initializeConfiguration(cfg);
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1623,ensureMultiInstanceSupport(myCfg.getDeploymentSpi());
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1624,ensureMultiInstanceSupport(myCfg.getCommunicationSpi());
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1625,ensureMultiInstanceSupport(myCfg.getDiscoverySpi());
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1626,ensureMultiInstanceSupport(myCfg.getCheckpointSpi());
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1627,ensureMultiInstanceSupport(myCfg.getEventStorageSpi());
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1628,ensureMultiInstanceSupport(myCfg.getCollisionSpi());
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1629,ensureMultiInstanceSupport(myCfg.getFailoverSpi());
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1630,ensureMultiInstanceSupport(myCfg.getLoadBalancingSpi());
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1698,if (myCfg.getConnectorConfiguration() != null) {
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1702,myCfg.getConnectorConfiguration().getThreadPoolSize(),
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1703,myCfg.getConnectorConfiguration().getThreadPoolSize(),
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1712,myCfg.getUtilityCacheThreadPoolSize(),
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1713,myCfg.getUtilityCacheThreadPoolSize(),
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1714,myCfg.getUtilityCacheKeepAliveTime(),
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1726,registerFactoryMbean(myCfg.getMBeanServer());
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,425,String name = fd.getName();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,427,Field field = cls.getDeclaredField(name);
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,429,field.setAccessible(true);
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,431,buf.a(name).a('=');
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,544,!f.getType().isAnnotationPresent(GridToStringExclude.class)) {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,573,GridToStringFieldDescriptor fd = new GridToStringFieldDescriptor(f.getName());
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringClassDescriptor.java,21,import java.util.Collections;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringClassDescriptor.java,37,private List<GridToStringFieldDescriptor> fields = new ArrayList<>();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringClassDescriptor.java,60,Collections.sort(fields, new Comparator<GridToStringFieldDescriptor>() {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringClassDescriptor.java,63,return arg0.getOrder() < arg1.getOrder() ? -1 : arg0.getOrder() > arg1.getOrder() ? 1 : 0;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringFieldDescriptor.java,33,GridToStringFieldDescriptor(String name) {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringFieldDescriptor.java,34,assert name != null;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringFieldDescriptor.java,36,this.name = name;
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcConnection.java,69,private static final String VALID_TASK_NAME =
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcConnection.java,456,return client.compute().<Boolean>executeAsync(VALID_TASK_NAME, cacheName).get(timeout, SECONDS);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,854,UUID routineId = req.routineId();
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/StartRoutineDiscoveryMessage.java,38,private final Map<UUID, IgniteCheckedException> errs = new HashMap<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/StartRoutineDiscoveryMessage.java,110,return errs;
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/StartRoutineDiscoveryMessage.java,127,return new StartRoutineAckDiscoveryMessage(routineId, errs, updateCntrs, updateCntrsPerNode);
modules/core/src/main/java/org/apache/ignite/IgniteScheduler.java,25,import org.jetbrains.annotations.Nullable;
modules/core/src/main/java/org/apache/ignite/IgniteScheduler.java,61,public IgniteFuture<?> runLocal(@Nullable Runnable r);
modules/core/src/main/java/org/apache/ignite/IgniteScheduler.java,75,public <R> IgniteFuture<R> callLocal(@Nullable Callable<R> c);
modules/core/src/main/java/org/apache/ignite/IgniteScheduler.java,87,public SchedulerFuture<?> scheduleLocal(Runnable job, String ptrn);
modules/core/src/main/java/org/apache/ignite/IgniteScheduler.java,98,public <R> SchedulerFuture<R> scheduleLocal(Callable<R> c, String ptrn);
modules/core/src/main/java/org/apache/ignite/IgniteSystemProperties.java,499,return val == null ? dflt : Boolean.valueOf(val);
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,277,long now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,287,while (!closed && (attrs == null || !attrs.containsKey(key)) && now < end) {
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,288,mux.wait(end - now);
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,290,now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,309,long now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,321,while (!closed && !(isFound = isAttributeSet(key, val)) && now < end) {
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,322,mux.wait(end - now);
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,324,now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,347,long now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,357,while (!closed && (attrs == null || !attrs.keySet().containsAll(keys)) && now < end) {
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,358,mux.wait(end - now);
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,360,now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,388,long now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,400,while (!closed && now < end) {
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,406,mux.wait(end - now);
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,408,now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/binary/streams/BinaryMemoryAllocatorChunk.java,39,private long lastCheck = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/binary/streams/BinaryMemoryAllocatorChunk.java,92,long now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/binary/streams/BinaryMemoryAllocatorChunk.java,94,if (now - this.lastCheck >= CHECK_FREQ) {
modules/core/src/main/java/org/apache/ignite/internal/binary/streams/BinaryMemoryAllocatorChunk.java,100,this.lastCheck = now;
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,211,long now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,215,long end = timeout == 0 ? Long.MAX_VALUE : timeout + now;
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,219,end = Long.MAX_VALUE;
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,230,while (iter.hasNext() && now < end) {
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,234,fut.get(end - now);
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,248,now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,347,long now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,351,long end = timeout == 0 ? Long.MAX_VALUE : timeout + now;
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,355,end = Long.MAX_VALUE;
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,377,now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,383,if (!isInterrupted && now < end) {
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,385,fut.get(end - now);
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,404,now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,484,long now = System.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,488,long end = timeout == 0 ? Long.MAX_VALUE : timeout + now;
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,492,end = Long.MAX_VALUE;
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,522,now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,526,if (!isInterrupted && !isResRcvd && now < end) {
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,528,res = fut.get(end - now);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1955,assert req != null || lastChk + segChkFreq < now;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1965,lastChk = now;
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,956,long now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,959,long endTime = now + timeout <= 0 ? Long.MAX_VALUE : now + timeout;
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,961,long delta = timeout;
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,967,while (!uids.isEmpty() && err.get() == null && delta > 0) {
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,968,qryMux.wait(delta);
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,970,delta = endTime - U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,282,LT.error(log, e, "Failed to handle request: " + req.command());
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,285,log.debug("Failed to handle request [req=" + req + ", e=" + e + "]");
modules/core/src/main/java/org/apache/ignite/internal/util/GridSpinReadWriteLock.java,23,import org.apache.ignite.internal.util.typedef.internal.U;
modules/core/src/main/java/org/apache/ignite/internal/util/GridSpinReadWriteLock.java,337,long end = U.currentTimeMillis() + unit.toMillis(timeout);
modules/core/src/main/java/org/apache/ignite/spi/IgniteSpiOperationTimeoutHelper.java,33,private long lastOperStartTs;
modules/core/src/main/java/org/apache/ignite/spi/IgniteSpiOperationTimeoutHelper.java,69,if (lastOperStartTs == 0) {
modules/core/src/main/java/org/apache/ignite/spi/IgniteSpiOperationTimeoutHelper.java,71,lastOperStartTs = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/IgniteSpiOperationTimeoutHelper.java,74,long curTs = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/IgniteSpiOperationTimeoutHelper.java,76,timeout = timeout - (curTs - lastOperStartTs);
modules/core/src/main/java/org/apache/ignite/spi/IgniteSpiOperationTimeoutHelper.java,78,lastOperStartTs = curTs;
modules/core/src/main/java/org/apache/ignite/spi/collision/jobstealing/JobStealingCollisionSpi.java,1013,private long ts = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/collision/jobstealing/JobStealingCollisionSpi.java,1030,return jobsToSteal > 0 && U.currentTimeMillis() - ts >= msgExpireTime;
modules/core/src/main/java/org/apache/ignite/spi/collision/jobstealing/JobStealingCollisionSpi.java,1041,ts = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2134,connectGate.enter();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2136,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2142,return client;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2144,finally {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2145,connectGate.leave();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,468,long startTime = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,577,long tstamp = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,596,spi.stats.onClientSocketInitialized(U.currentTimeMillis() - tstamp);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,600,tstamp = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1079,long waitEnd = U.currentTimeMillis() + (spi.failureDetectionTimeoutEnabled() ?
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1086,mux.wait(waitEnd);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1168,long startTime = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1254,if (timeout > 0 && (U.currentTimeMillis() - startTime) > timeout) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1894,long tstamp = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1905,updateMetrics(nodeId, metricsSet.metrics(), cacheMetrics, tstamp);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1908,updateMetrics(t.get1(), t.get2(), cacheMetrics, tstamp);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,2031,node.lastUpdateTime(tstamp);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,383,long threshold = U.currentTimeMillis() + timeout;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,389,timeout = threshold - U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,634,long tstamp = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,657,spi.stats.onClientSocketInitialized(U.currentTimeMillis() - tstamp);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,765,locNode.lastExchangeTime(U.currentTimeMillis());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,863,long threshold = U.currentTimeMillis() + timeout;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,869,timeout = threshold - U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1089,long tstamp = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1130,spi.stats.onClientSocketInitialized(U.currentTimeMillis() - tstamp);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1133,tstamp = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2145,private long lastTimeStatusMsgSent;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2515,long tstamp = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2541,spi.stats.onClientSocketInitialized(U.currentTimeMillis() - tstamp);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2672,long tstamp = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2720,long tstamp = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4533,long tstamp = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4545,updateMetrics(nodeId, metricsSet.metrics(), cacheMetrics, tstamp);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4548,updateMetrics(t.get1(), t.get2(), cacheMetrics, tstamp);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4609,locNode.lastUpdateTime(tstamp);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4635,node.lastUpdateTime(tstamp);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4941,lastTimeStatusMsgSent = locNode.lastUpdateTime();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4950,lastTimeStatusMsgSent = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4960,U.currentTimeMillis() - locNode.lastExchangeTime() >= connCheckThreshold &&
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,5049,long tstamp = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,5062,spi.stats.onServerSocketInitialized(U.currentTimeMillis() - tstamp);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoveryImpl.java,264,long start = spi.getJoinTimeout() > 0 ? U.currentTimeMillis() : 0;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,106,private volatile long lastUpdateTime = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,419,return lastUpdateTime;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,427,public void lastUpdateTime(long lastUpdateTime) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,428,assert lastUpdateTime > 0;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,430,this.lastUpdateTime = lastUpdateTime;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,438,public long lastExchangeTime() {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,439,return lastExchangeTime;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,447,public void lastExchangeTime(long lastExchangeTime) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,239,node.lastUpdateTime(U.currentTimeMillis());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,312,node.lastUpdateTime(U.currentTimeMillis());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,581,long rcvEnd = U.currentTimeMillis() + resWaitTime;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,584,while (U.currentTimeMillis() < rcvEnd) { // Try to receive multiple responses.
modules/core/src/main/java/org/apache/ignite/internal/processors/nodevalidation/OsDiscoveryNodeValidationProcessor.java,67,return new IgniteNodeValidationResult(node.id(), errMsg, errMsg);
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,155,ctx.resource().injectGeneric(filter);
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,158,((PlatformEventFilterListener)filter).initialize(ctx);
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,259,ctx.event().addLocalEventListener(lsnr, types);
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,384,GridDeployment dep = ctx.deploy().getGlobalDeployment(depInfo.deployMode(), clsName, clsName,
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,385,depInfo.userVersion(), nodeId, depInfo.classLoaderId(), depInfo.participants(), null);
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,388,throw new IgniteDeploymentCheckedException("Failed to obtain deployment for class: " + clsName);
modules/core/src/main/java/org/apache/ignite/internal/GridMessageListenHandler.java,90,public GridMessageListenHandler(GridMessageListenHandler orig) {
modules/core/src/main/java/org/apache/ignite/internal/GridMessageListenHandler.java,91,assert orig != null;
modules/core/src/main/java/org/apache/ignite/internal/GridMessageListenHandler.java,93,this.clsName = orig.clsName;
modules/core/src/main/java/org/apache/ignite/internal/GridMessageListenHandler.java,94,this.depInfo = orig.depInfo;
modules/core/src/main/java/org/apache/ignite/internal/GridMessageListenHandler.java,95,this.pred = orig.pred;
modules/core/src/main/java/org/apache/ignite/internal/GridMessageListenHandler.java,96,this.predBytes = orig.predBytes;
modules/core/src/main/java/org/apache/ignite/internal/GridMessageListenHandler.java,97,this.topic = orig.topic;
modules/core/src/main/java/org/apache/ignite/internal/GridMessageListenHandler.java,98,this.topicBytes = orig.topicBytes;
modules/core/src/main/java/org/apache/ignite/internal/GridMessageListenHandler.java,99,this.depEnabled = false;
modules/core/src/main/java/org/apache/ignite/internal/GridMessageListenHandler.java,135,throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/GridMessageListenHandler.java,187,GridDeployment dep = ctx.deploy().getGlobalDeployment(depInfo.deployMode(), clsName, clsName,
modules/core/src/main/java/org/apache/ignite/internal/GridMessageListenHandler.java,188,depInfo.userVersion(), nodeId, depInfo.classLoaderId(), depInfo.participants(), null);
modules/core/src/main/java/org/apache/ignite/internal/GridMessageListenHandler.java,191,throw new IgniteDeploymentCheckedException("Failed to obtain deployment for class: " + clsName);
modules/core/src/main/java/org/apache/ignite/internal/GridMessageListenHandler.java,193,ClassLoader ldr = dep.classLoader();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,306,if (locLsnr != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,307,if (locLsnr instanceof JCacheQueryLocalListener) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,308,ctx.resource().injectGeneric(((JCacheQueryLocalListener)locLsnr).impl);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,312,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,313,ctx.resource().injectGeneric(locLsnr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,319,final CacheEntryEventFilter filter = getEventFilter();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,321,if (filter != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,322,if (filter instanceof JCacheQueryRemoteFilter) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,324,ctx.resource().injectGeneric(((JCacheQueryRemoteFilter)filter).impl);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,329,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,330,ctx.resource().injectGeneric(filter);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,360,ctx.event().record(new CacheQueryExecutedEvent<>(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,361,ctx.discovery().localNode(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,363,EVT_CACHE_QUERY_EXECUTED,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,364,CacheQueryType.CONTINUOUS.name(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,365,cacheName,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,366,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,367,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,368,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,369,filter instanceof CacheEntryEventSerializableFilter ?
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,370,(CacheEntryEventSerializableFilter)filter : null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,371,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,372,nodeId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,374,));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,429,((PlatformContinuousQueryFilter)filter).onQueryUnregister();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,506,return mgr.registerListener(routineId, lsnr, internal);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,512,public CacheEntryEventFilter getEventFilter() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,755,private void onEntryUpdate(CacheContinuousQueryEvent evt, boolean notify, boolean loc, boolean recordIgniteEvt) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,800,ctx.event().record(new CacheQueryReadEvent<>(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,809,getEventFilter() instanceof CacheEntryEventSerializableFilter ?
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,810,(CacheEntryEventSerializableFilter)getEventFilter() : null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,1194,rmtFilter = rmtFilterDep.unmarshal(nodeId, ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandlerV2.java,133,rmtFilterFactory = rmtFilterFactoryDep.unmarshal(nodeId, ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandlerV2.java,171,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryListener.java,33,public void onExecution();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,63,import org.apache.ignite.lang.IgniteAsyncCallback;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,1011,protected boolean async() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,1012,return U.hasAnnotation(impl, IgniteAsyncCallback.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,1079,protected boolean async() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,1080,return U.hasAnnotation(impl, IgniteAsyncCallback.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,43,import org.apache.ignite.internal.GridMessageListenHandler;
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,432,if (!ctx.isDaemon() && data != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,433,for (DiscoveryDataItem item : data.items) {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,434,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,436,ctx.resource().injectGeneric(item.prjPred);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,439,if ((item.prjPred == null || item.prjPred.apply(ctx.discovery().localNode())) &&
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,448,locInfos.putIfAbsent(item.routineId, new LocalRoutineInfo(
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,451,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,452,U.error(log, "Failed to register continuous handler.", e);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,456,for (Map.Entry<UUID, Map<UUID, LocalRoutineInfo>> entry : data.clientInfos.entrySet()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,457,UUID clientNodeId = entry.getKey();
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,485,Map<UUID, LocalRoutineInfo> map = clientInfos.get(entry.getKey());
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,487,if (map == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,488,map = new HashMap<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,490,clientInfos.put(entry.getKey(), map);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,493,map.putAll(entry.getValue());
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,892,GridContinuousHandler hnd0 = hnd instanceof GridMessageListenHandler ?
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,893,new GridMessageListenHandler((GridMessageListenHandler)hnd) :
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,894,hnd;
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,908,hnd0,
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,932,prjPred, hnd0, data.bufferSize(), data.interval(), data.autoUnsubscribe()));
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,942,if (hnd0.isQuery()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,946,GridCacheAdapter cache = ctx.cache().internalCache(hnd0.cacheName());
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,425,String sesId = httpReq.getRequestedSessionId();
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,507,String sesId = httpReq.getRequestedSessionId();
examples/src/main/java/org/apache/ignite/examples/binary/computegrid/package-info.java,21,package org.apache.ignite.examples.binary.computegrid;
examples/src/main/java/org/apache/ignite/examples/binary/datagrid/package-info.java,21,package org.apache.ignite.examples.binary.datagrid;
examples/src/main/java/org/apache/ignite/examples/binary/package-info.java,21,package org.apache.ignite.examples.binary;
examples/src/main/java/org/apache/ignite/examples/computegrid/failover/package-info.java,22,package org.apache.ignite.examples.computegrid.failover;
examples/src/main/java/org/apache/ignite/examples/computegrid/montecarlo/package-info.java,22,package org.apache.ignite.examples.computegrid.montecarlo;
examples/src/main/java/org/apache/ignite/examples/computegrid/package-info.java,22,package org.apache.ignite.examples.computegrid;
examples/src/main/java/org/apache/ignite/examples/datagrid/starschema/package-info.java,22,package org.apache.ignite.examples.datagrid.starschema;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/package-info.java,22,package org.apache.ignite.examples.datagrid.store.auto;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/package-info.java,22,package org.apache.ignite.examples.datagrid.store.jdbc;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/package-info.java,22,package org.apache.ignite.examples.datagrid.store;
examples/src/main/java/org/apache/ignite/examples/datastructures/package-info.java,22,package org.apache.ignite.examples.datastructures;
examples/src/main/java/org/apache/ignite/examples/events/package-info.java,22,package org.apache.ignite.examples.events;
examples/src/main/java/org/apache/ignite/examples/igfs/package-info.java,22,package org.apache.ignite.examples.igfs;
examples/src/main/java/org/apache/ignite/examples/messaging/package-info.java,22,package org.apache.ignite.examples.messaging;
examples/src/main/java/org/apache/ignite/examples/misc/client/memcache/package-info.java,22,package org.apache.ignite.examples.misc.client.memcache;
examples/src/main/java/org/apache/ignite/examples/misc/client/package-info.java,22,package org.apache.ignite.examples.misc.client;
examples/src/main/java/org/apache/ignite/examples/misc/deployment/package-info.java,22,package org.apache.ignite.examples.misc.deployment;
examples/src/main/java/org/apache/ignite/examples/misc/lifecycle/package-info.java,22,package org.apache.ignite.examples.misc.lifecycle;
examples/src/main/java/org/apache/ignite/examples/misc/package-info.java,22,package org.apache.ignite.examples.misc;
examples/src/main/java/org/apache/ignite/examples/misc/springbean/package-info.java,22,package org.apache.ignite.examples.misc.springbean;
examples/src/main/java/org/apache/ignite/examples/model/package-info.java,23,package org.apache.ignite.examples.model;
examples/src/main/java/org/apache/ignite/examples/package-info.java,22,package org.apache.ignite.examples;
examples/src/main/java/org/apache/ignite/examples/servicegrid/package-info.java,22,package org.apache.ignite.examples.servicegrid;
examples/src/main/java/org/apache/ignite/examples/streaming/package-info.java,21,package org.apache.ignite.examples.streaming;
examples/src/main/java/org/apache/ignite/examples/streaming/wordcount/package-info.java,21,package org.apache.ignite.examples.streaming.wordcount;
examples/src/main/java/org/apache/ignite/examples/streaming/wordcount/socket/package-info.java,21,package org.apache.ignite.examples.streaming.wordcount.socket;
modules/aop/src/main/java/org/apache/ignite/compute/gridify/aop/aspectj/package-info.java,22,package org.apache.ignite.compute.gridify.aop.aspectj;
modules/aop/src/main/java/org/apache/ignite/compute/gridify/aop/spring/package-info.java,22,package org.apache.ignite.compute.gridify.aop.spring;
modules/aws/src/main/java/org/apache/ignite/spi/checkpoint/s3/package-info.java,22,package org.apache.ignite.spi.checkpoint.s3;
modules/camel/src/main/java/org/apache/ignite/stream/camel/package-info.java,21,package org.apache.ignite.stream.camel;
modules/cloud/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/cloud/package-info.java,21,package org.apache.ignite.spi.discovery.tcp.ipfinder.cloud;
modules/core/src/main/java/org/apache/ignite/binary/package-info.java,22,package org.apache.ignite.binary;
modules/core/src/main/java/org/apache/ignite/cache/affinity/package-info.java,21,package org.apache.ignite.cache.affinity;
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/package-info.java,21,package org.apache.ignite.cache.affinity.rendezvous;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/package-info.java,21,package org.apache.ignite.cache.eviction.fifo;
modules/core/src/main/java/org/apache/ignite/cache/eviction/igfs/package-info.java,21,package org.apache.ignite.cache.eviction.igfs;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/package-info.java,21,package org.apache.ignite.cache.eviction.lru;
modules/core/src/main/java/org/apache/ignite/cache/eviction/package-info.java,21,package org.apache.ignite.cache.eviction;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/package-info.java,21,package org.apache.ignite.cache.eviction.random;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/package-info.java,21,package org.apache.ignite.cache.eviction.sorted;
modules/core/src/main/java/org/apache/ignite/cache/package-info.java,22,package org.apache.ignite.cache;
modules/core/src/main/java/org/apache/ignite/cache/query/annotations/package-info.java,22,package org.apache.ignite.cache.query.annotations;
modules/core/src/main/java/org/apache/ignite/cache/query/package-info.java,21,package org.apache.ignite.cache.query;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/package-info.java,21,package org.apache.ignite.cache.store.jdbc.dialect;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/package-info.java,22,package org.apache.ignite.cache.store.jdbc;
modules/core/src/main/java/org/apache/ignite/cache/store/package-info.java,22,package org.apache.ignite.cache.store;
modules/core/src/main/java/org/apache/ignite/cluster/package-info.java,22,package org.apache.ignite.cluster;
modules/core/src/main/java/org/apache/ignite/compute/gridify/aop/GridifySetToSetAbstractAspect.java,167,for (Object element : taskRes) {
modules/core/src/main/java/org/apache/ignite/compute/gridify/aop/package-info.java,22,package org.apache.ignite.compute.gridify.aop;
modules/core/src/main/java/org/apache/ignite/compute/gridify/package-info.java,22,package org.apache.ignite.compute.gridify;
modules/core/src/main/java/org/apache/ignite/compute/package-info.java,22,package org.apache.ignite.compute;
modules/core/src/main/java/org/apache/ignite/configuration/package-info.java,22,package org.apache.ignite.configuration;
modules/core/src/main/java/org/apache/ignite/events/package-info.java,22,package org.apache.ignite.events;
modules/core/src/main/java/org/apache/ignite/igfs/mapreduce/package-info.java,22,package org.apache.ignite.igfs.mapreduce;
modules/core/src/main/java/org/apache/ignite/igfs/mapreduce/records/package-info.java,22,package org.apache.ignite.igfs.mapreduce.records;
modules/core/src/main/java/org/apache/ignite/igfs/package-info.java,22,package org.apache.ignite.igfs;
modules/core/src/main/java/org/apache/ignite/igfs/secondary/package-info.java,22,package org.apache.ignite.igfs.secondary;
modules/core/src/main/java/org/apache/ignite/internal/executor/package-info.java,22,package org.apache.ignite.internal.executor;
modules/core/src/main/java/org/apache/ignite/internal/igfs/common/package-info.java,22,package org.apache.ignite.internal.igfs.common;
modules/core/src/main/java/org/apache/ignite/internal/managers/checkpoint/package-info.java,22,package org.apache.ignite.internal.managers.checkpoint;
modules/core/src/main/java/org/apache/ignite/internal/managers/collision/package-info.java,22,package org.apache.ignite.internal.managers.collision;
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/package-info.java,22,package org.apache.ignite.internal.managers.communication;
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/package-info.java,22,package org.apache.ignite.internal.managers.deployment;
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/protocol/gg/package-info.java,22,package org.apache.ignite.internal.managers.deployment.protocol.gg;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/package-info.java,22,package org.apache.ignite.internal.managers.discovery;
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/package-info.java,22,package org.apache.ignite.internal.managers.eventstorage;
modules/core/src/main/java/org/apache/ignite/internal/managers/failover/package-info.java,22,package org.apache.ignite.internal.managers.failover;
modules/core/src/main/java/org/apache/ignite/internal/managers/indexing/package-info.java,22,package org.apache.ignite.internal.managers.indexing;
modules/core/src/main/java/org/apache/ignite/internal/managers/loadbalancer/package-info.java,22,package org.apache.ignite.internal.managers.loadbalancer;
modules/core/src/main/java/org/apache/ignite/internal/managers/package-info.java,22,package org.apache.ignite.internal.managers;
modules/core/src/main/java/org/apache/ignite/internal/mxbean/package-info.java,22,package org.apache.ignite.internal.mxbean;
modules/core/src/main/java/org/apache/ignite/internal/package-info.java,22,package org.apache.ignite.internal;
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/package-info.java,22,package org.apache.ignite.internal.processors.affinity;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/package-info.java,22,package org.apache.ignite.internal.processors.cacheobject;
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/package-info.java,22,package org.apache.ignite.internal.processors.closure;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/package-info.java,22,package org.apache.ignite.internal.processors.datastreamer;
modules/core/src/main/java/org/apache/ignite/internal/processors/dr/package-info.java,22,package org.apache.ignite.internal.processors.dr;
modules/core/src/main/java/org/apache/ignite/internal/processors/hadoop/package-info.java,22,package org.apache.ignite.internal.processors.hadoop;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/package-info.java,22,package org.apache.ignite.internal.processors.igfs;
modules/core/src/main/java/org/apache/ignite/internal/processors/job/package-info.java,22,package org.apache.ignite.internal.processors.job;
modules/core/src/main/java/org/apache/ignite/internal/processors/package-info.java,22,package org.apache.ignite.internal.processors;
modules/core/src/main/java/org/apache/ignite/internal/processors/port/package-info.java,22,package org.apache.ignite.internal.processors.port;
modules/core/src/main/java/org/apache/ignite/internal/processors/resource/package-info.java,22,package org.apache.ignite.internal.processors.resource;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/client/message/package-info.java,22,package org.apache.ignite.internal.processors.rest.client.message;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/package-info.java,22,package org.apache.ignite.internal.processors.rest.handlers.cache;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/package-info.java,22,package org.apache.ignite.internal.processors.rest.handlers;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/top/package-info.java,22,package org.apache.ignite.internal.processors.rest.handlers.top;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/version/package-info.java,22,package org.apache.ignite.internal.processors.rest.handlers.version;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/package-info.java,22,package org.apache.ignite.internal.processors.rest;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/package-info.java,22,package org.apache.ignite.internal.processors.rest.protocols;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/package-info.java,22,package org.apache.ignite.internal.processors.rest.protocols.tcp;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/request/package-info.java,22,package org.apache.ignite.internal.processors.rest.request;
modules/core/src/main/java/org/apache/ignite/internal/processors/schedule/package-info.java,22,package org.apache.ignite.internal.processors.schedule;
modules/core/src/main/java/org/apache/ignite/internal/processors/segmentation/package-info.java,22,package org.apache.ignite.internal.processors.segmentation;
modules/core/src/main/java/org/apache/ignite/internal/processors/session/package-info.java,23,package org.apache.ignite.internal.processors.session;
modules/core/src/main/java/org/apache/ignite/internal/processors/task/package-info.java,22,package org.apache.ignite.internal.processors.task;
modules/core/src/main/java/org/apache/ignite/internal/processors/timeout/package-info.java,22,package org.apache.ignite.internal.processors.timeout;
modules/core/src/main/java/org/apache/ignite/internal/util/future/package-info.java,22,package org.apache.ignite.internal.util.future;
modules/core/src/main/java/org/apache/ignite/internal/util/gridify/package-info.java,22,package org.apache.ignite.internal.util.gridify;
modules/core/src/main/java/org/apache/ignite/internal/util/ipc/loopback/package-info.java,22,package org.apache.ignite.internal.util.ipc.loopback;
modules/core/src/main/java/org/apache/ignite/internal/util/ipc/package-info.java,22,package org.apache.ignite.internal.util.ipc;
modules/core/src/main/java/org/apache/ignite/internal/util/ipc/shmem/package-info.java,22,package org.apache.ignite.internal.util.ipc.shmem;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/package-info.java,22,package org.apache.ignite.internal.util.nio;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/package-info.java,22,package org.apache.ignite.internal.util.nio.ssl;
modules/core/src/main/java/org/apache/ignite/internal/util/package-info.java,22,package org.apache.ignite.internal.util;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/package-info.java,22,package org.apache.ignite.internal.util.portscanner;
modules/core/src/main/java/org/apache/ignite/internal/util/scala/package-info.java,22,package org.apache.ignite.internal.util.scala;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/package-info.java,22,package org.apache.ignite.internal.util.tostring;
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/C1.java,32,public interface C1<E1, R> extends IgniteClosure<E1, R> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/C2.java,33,public interface C2<E1, E2, R> extends IgniteBiClosure<E1, E2, R> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/C3.java,36,public interface C3<E1, E2, E3, R> extends GridClosure3<E1, E2, E3, R> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/CI1.java,31,public interface CI1<T> extends IgniteInClosure<T> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/CI2.java,32,public interface CI2<E1, E2> extends IgniteBiInClosure<E1, E2> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/CI3.java,32,public interface CI3<E1, E2, E3> extends GridInClosure3<E1, E2, E3> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/CIX3.java,30,public abstract class CIX3<E1, E2, E3> extends GridInClosure3X<E1, E2, E3> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/CO.java,31,public interface CO<T> extends IgniteOutClosure<T> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/CX3.java,34,public abstract class CX3<E1, E2, E3, R> extends GridClosure3X<E1, E2, E3, R> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/F.java,29,public class F extends GridFunc { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/G.java,29,public class G extends Ignition { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/P1.java,31,public interface P1<E1> extends IgnitePredicate<E1> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/P2.java,32,public interface P2<T1, T2> extends IgniteBiPredicate<T1, T2> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/P3.java,33,public interface P3<T1, T2, T3> extends GridPredicate3<T1, T2, T3> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/PA.java,30,public interface PA extends GridAbsPredicate { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/PAX.java,31,public abstract class PAX extends GridAbsPredicateX { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/PE.java,33,public interface PE extends IgnitePredicate<Event> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/PKV.java,31,public interface PKV<K, V> extends IgniteBiPredicate<K, V> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/PN.java,33,public interface PN extends IgnitePredicate<ClusterNode> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/PX3.java,33,public abstract class PX3<T1, T2, T3> extends GridPredicate3X<T1, T2, T3> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/R1.java,32,public interface R1<E1, R> extends IgniteReducer<E1, R> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/R2.java,32,public interface R2<E1, E2, R> extends IgniteReducer2<E1, E2, R> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/R3.java,32,public interface R3<E1, E2, E3, R> extends IgniteReducer3<E1, E2, E3, R> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/internal/A.java,28,public class A extends GridArgumentCheck { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/internal/GPC.java,27,public interface GPC<T> extends GridPlainCallable<T> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/internal/GPR.java,27,public interface GPR extends GridPlainRunnable { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/internal/LT.java,28,public class LT extends GridLogThrottle { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/internal/S.java,28,public class S extends GridToStringBuilder { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/internal/U.java,28,public class U extends IgniteUtils { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/internal/package-info.java,22,package org.apache.ignite.internal.util.typedef.internal;
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/package-info.java,22,package org.apache.ignite.internal.util.typedef;
modules/core/src/main/java/org/apache/ignite/internal/util/worker/package-info.java,22,package org.apache.ignite.internal.util.worker;
modules/core/src/main/java/org/apache/ignite/lang/package-info.java,22,package org.apache.ignite.lang;
modules/core/src/main/java/org/apache/ignite/lifecycle/package-info.java,22,package org.apache.ignite.lifecycle;
modules/core/src/main/java/org/apache/ignite/logger/java/package-info.java,22,package org.apache.ignite.logger.java;
modules/core/src/main/java/org/apache/ignite/logger/package-info.java,22,package org.apache.ignite.logger;
modules/core/src/main/java/org/apache/ignite/marshaller/jdk/package-info.java,22,package org.apache.ignite.marshaller.jdk;
modules/core/src/main/java/org/apache/ignite/marshaller/package-info.java,22,package org.apache.ignite.marshaller;
modules/core/src/main/java/org/apache/ignite/messaging/package-info.java,22,package org.apache.ignite.messaging;
modules/core/src/main/java/org/apache/ignite/mxbean/package-info.java,22,package org.apache.ignite.mxbean;
modules/core/src/main/java/org/apache/ignite/package-info.java,21,package org.apache.ignite;
modules/core/src/main/java/org/apache/ignite/platform/cpp/package-info.java,22,package org.apache.ignite.platform.cpp;
modules/core/src/main/java/org/apache/ignite/platform/dotnet/package-info.java,22,package org.apache.ignite.platform.dotnet;
modules/core/src/main/java/org/apache/ignite/platform/package-info.java,22,package org.apache.ignite.platform;
modules/core/src/main/java/org/apache/ignite/plugin/extensions/communication/package-info.java,22,package org.apache.ignite.plugin.extensions.communication;
modules/core/src/main/java/org/apache/ignite/plugin/package-info.java,22,package org.apache.ignite.plugin;
modules/core/src/main/java/org/apache/ignite/plugin/security/package-info.java,22,package org.apache.ignite.plugin.security;
modules/core/src/main/java/org/apache/ignite/plugin/segmentation/package-info.java,22,package org.apache.ignite.plugin.segmentation;
modules/core/src/main/java/org/apache/ignite/resources/package-info.java,22,package org.apache.ignite.resources;
modules/core/src/main/java/org/apache/ignite/scheduler/package-info.java,22,package org.apache.ignite.scheduler;
modules/core/src/main/java/org/apache/ignite/services/package-info.java,21,package org.apache.ignite.services;
modules/core/src/main/java/org/apache/ignite/spi/checkpoint/cache/package-info.java,23,package org.apache.ignite.spi.checkpoint.cache;
modules/core/src/main/java/org/apache/ignite/spi/checkpoint/jdbc/package-info.java,23,package org.apache.ignite.spi.checkpoint.jdbc;
modules/core/src/main/java/org/apache/ignite/spi/checkpoint/noop/package-info.java,22,package org.apache.ignite.spi.checkpoint.noop;
modules/core/src/main/java/org/apache/ignite/spi/checkpoint/package-info.java,22,package org.apache.ignite.spi.checkpoint;
modules/core/src/main/java/org/apache/ignite/spi/checkpoint/sharedfs/package-info.java,22,package org.apache.ignite.spi.checkpoint.sharedfs;
modules/core/src/main/java/org/apache/ignite/spi/collision/fifoqueue/package-info.java,22,package org.apache.ignite.spi.collision.fifoqueue;
modules/core/src/main/java/org/apache/ignite/spi/collision/jobstealing/package-info.java,22,package org.apache.ignite.spi.collision.jobstealing;
modules/core/src/main/java/org/apache/ignite/spi/collision/noop/package-info.java,22,package org.apache.ignite.spi.collision.noop;
modules/core/src/main/java/org/apache/ignite/spi/collision/package-info.java,22,package org.apache.ignite.spi.collision;
modules/core/src/main/java/org/apache/ignite/spi/collision/priorityqueue/package-info.java,22,package org.apache.ignite.spi.collision.priorityqueue;
modules/core/src/main/java/org/apache/ignite/spi/communication/package-info.java,22,package org.apache.ignite.spi.communication;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/package-info.java,22,package org.apache.ignite.spi.communication.tcp;
modules/core/src/main/java/org/apache/ignite/spi/deployment/local/package-info.java,22,package org.apache.ignite.spi.deployment.local;
modules/core/src/main/java/org/apache/ignite/spi/deployment/package-info.java,22,package org.apache.ignite.spi.deployment;
modules/core/src/main/java/org/apache/ignite/spi/discovery/package-info.java,22,package org.apache.ignite.spi.discovery;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/package-info.java,22,package org.apache.ignite.spi.discovery.tcp.internal;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/jdbc/package-info.java,22,package org.apache.ignite.spi.discovery.tcp.ipfinder.jdbc;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/package-info.java,22,package org.apache.ignite.spi.discovery.tcp.ipfinder.multicast;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/package-info.java,22,package org.apache.ignite.spi.discovery.tcp.ipfinder;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/package-info.java,22,package org.apache.ignite.spi.discovery.tcp.ipfinder.sharedfs;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/vm/package-info.java,22,package org.apache.ignite.spi.discovery.tcp.ipfinder.vm;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/messages/package-info.java,22,package org.apache.ignite.spi.discovery.tcp.messages;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/package-info.java,22,package org.apache.ignite.spi.discovery.tcp;
modules/core/src/main/java/org/apache/ignite/spi/eventstorage/memory/package-info.java,22,package org.apache.ignite.spi.eventstorage.memory;
modules/core/src/main/java/org/apache/ignite/spi/eventstorage/package-info.java,22,package org.apache.ignite.spi.eventstorage;
modules/core/src/main/java/org/apache/ignite/spi/failover/always/package-info.java,22,package org.apache.ignite.spi.failover.always;
modules/core/src/main/java/org/apache/ignite/spi/failover/jobstealing/package-info.java,22,package org.apache.ignite.spi.failover.jobstealing;
modules/core/src/main/java/org/apache/ignite/spi/failover/never/package-info.java,22,package org.apache.ignite.spi.failover.never;
modules/core/src/main/java/org/apache/ignite/spi/failover/package-info.java,22,package org.apache.ignite.spi.failover;
modules/core/src/main/java/org/apache/ignite/spi/indexing/noop/package-info.java,22,package org.apache.ignite.spi.indexing.noop;
modules/core/src/main/java/org/apache/ignite/spi/indexing/package-info.java,22,package org.apache.ignite.spi.indexing;
modules/core/src/main/java/org/apache/ignite/spi/loadbalancing/adaptive/package-info.java,22,package org.apache.ignite.spi.loadbalancing.adaptive;
modules/core/src/main/java/org/apache/ignite/spi/loadbalancing/package-info.java,22,package org.apache.ignite.spi.loadbalancing;
modules/core/src/main/java/org/apache/ignite/spi/loadbalancing/roundrobin/package-info.java,22,package org.apache.ignite.spi.loadbalancing.roundrobin;
modules/core/src/main/java/org/apache/ignite/spi/loadbalancing/weightedrandom/package-info.java,22,package org.apache.ignite.spi.loadbalancing.weightedrandom;
modules/core/src/main/java/org/apache/ignite/spi/package-info.java,22,package org.apache.ignite.spi;
modules/core/src/main/java/org/apache/ignite/ssl/package-info.java,22,package org.apache.ignite.ssl;
modules/core/src/main/java/org/apache/ignite/startup/cmdline/package-info.java,22,package org.apache.ignite.startup.cmdline;
modules/core/src/main/java/org/apache/ignite/startup/package-info.java,21,package org.apache.ignite.startup;
modules/core/src/main/java/org/apache/ignite/stream/package-info.java,21,package org.apache.ignite.stream;
modules/core/src/main/java/org/apache/ignite/stream/socket/package-info.java,21,package org.apache.ignite.stream.socket;
modules/core/src/main/java/org/apache/ignite/thread/package-info.java,22,package org.apache.ignite.thread;
modules/core/src/main/java/org/apache/ignite/transactions/package-info.java,22,package org.apache.ignite.transactions;
modules/core/src/main/java/org/jsr166/package-info.java,20,package org.jsr166;
modules/extdata/uri/src/main/java/org/apache/ignite/spi/deployment/uri/tasks/package-info.java,22,package org.apache.ignite.spi.deployment.uri.tasks;
modules/flume/src/main/java/org/apache/ignite/stream/flume/package-info.java,21,package org.apache.ignite.stream.flume;
modules/gce/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/gce/package-info.java,22,package org.apache.ignite.spi.discovery.tcp.ipfinder.gce;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/package-info.java,22,package org.apache.ignite.hadoop.fs;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/package-info.java,22,package org.apache.ignite.hadoop.fs.v1;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/package-info.java,22,package org.apache.ignite.hadoop.fs.v2;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/package-info.java,22,package org.apache.ignite.hadoop.mapreduce;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/package-info.java,22,package org.apache.ignite.internal.processors.query.h2;
modules/jcl/src/main/java/org/apache/ignite/logger/jcl/package-info.java,22,package org.apache.ignite.logger.jcl;
modules/jms11/src/main/java/org/apache/ignite/stream/jms11/package-info.java,21,package org.apache.ignite.stream.jms11;
modules/jta/src/main/java/org/apache/ignite/cache/jta/jndi/package-info.java,22,package org.apache.ignite.cache.jta.jndi;
modules/jta/src/main/java/org/apache/ignite/cache/jta/package-info.java,22,package org.apache.ignite.cache.jta;
modules/jta/src/main/java/org/apache/ignite/cache/jta/reflect/package-info.java,22,package org.apache.ignite.cache.jta.reflect;
modules/kafka/src/main/java/org/apache/ignite/stream/kafka/package-info.java,21,package org.apache.ignite.stream.kafka;
modules/log4j/src/main/java/org/apache/ignite/logger/log4j/package-info.java,22,package org.apache.ignite.logger.log4j;
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/package-info.java,22,package org.apache.ignite.logger.log4j2;
modules/mesos/src/main/java/org/apache/ignite/mesos/package-info.java,22,package org.apache.ignite.mesos;
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/package-info.java,22,package org.apache.ignite.mesos.resource;
modules/mqtt/src/main/java/org/apache/ignite/stream/mqtt/package-info.java,21,package org.apache.ignite.stream.mqtt;
modules/rest-http/src/main/java/org/apache/ignite/internal/processors/rest/protocols/http/jetty/package-info.java,22,package org.apache.ignite.internal.processors.rest.protocols.http.jetty;
modules/slf4j/src/main/java/org/apache/ignite/logger/slf4j/package-info.java,22,package org.apache.ignite.logger.slf4j;
modules/spring/src/main/java/org/apache/ignite/cache/spring/package-info.java,22,package org.apache.ignite.cache.spring;
modules/spring/src/main/java/org/apache/ignite/cache/store/spring/package-info.java,21,package org.apache.ignite.cache.store.spring;
modules/tools/src/main/java/org/apache/ignite/tools/ant/beautifier/package-info.java,22,package org.apache.ignite.tools.ant.beautifier;
modules/tools/src/main/java/org/apache/ignite/util/antgar/package-info.java,22,package org.apache.ignite.util.antgar;
modules/twitter/src/main/java/org/apache/ignite/stream/twitter/package-info.java,21,package org.apache.ignite.stream.twitter;
modules/urideploy/src/main/java/org/apache/ignite/spi/deployment/uri/GridUriDeploymentJarVerifier.java,390,for (CodeSigner signer : signers) {
modules/urideploy/src/main/java/org/apache/ignite/spi/deployment/uri/package-info.java,22,package org.apache.ignite.spi.deployment.uri;
modules/urideploy/src/main/java/org/apache/ignite/spi/deployment/uri/scanners/GridDeploymentFolderScannerHelper.java,51,for (File child : file.listFiles()) {
modules/urideploy/src/main/java/org/apache/ignite/spi/deployment/uri/scanners/file/package-info.java,22,package org.apache.ignite.spi.deployment.uri.scanners.file;
modules/urideploy/src/main/java/org/apache/ignite/spi/deployment/uri/scanners/http/package-info.java,22,package org.apache.ignite.spi.deployment.uri.scanners.http;
modules/urideploy/src/main/java/org/apache/ignite/spi/deployment/uri/scanners/package-info.java,22,package org.apache.ignite.spi.deployment.uri.scanners;
modules/visor-plugins/src/main/java/org/apache/ignite/visor/plugin/package-info.java,22,package org.apache.ignite.visor.plugin;
modules/web/src/main/java/org/apache/ignite/cache/websession/package-info.java,22,package org.apache.ignite.cache.websession;
modules/web/src/main/java/org/apache/ignite/startup/servlet/package-info.java,22,package org.apache.ignite.startup.servlet;
modules/yarn/src/main/java/org/apache/ignite/yarn/package-info.java,22,package org.apache.ignite.yarn;
modules/yarn/src/main/java/org/apache/ignite/yarn/utils/package-info.java,22,package org.apache.ignite.yarn.utils;
modules/zookeeper/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/zk/package-info.java,21,package org.apache.ignite.spi.discovery.tcp.ipfinder.zk;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,519,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,537,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,542,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,624,GridDhtPartitionDemandMessage d = new GridDhtPartitionDemandMessage(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,631,if (!topologyChanged(fut) && !fut.isDone()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,873,synchronized (this) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,875,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,882,cleanupRemoteContexts(nodeId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,885,remaining.clear();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,890,return true;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3093,trySendMessageDirectly(node, new TcpDiscoveryAuthFailedMessage(locNodeId,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3094,spi.locHost));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3124,trySendMessageDirectly(node, new TcpDiscoveryAuthFailedMessage(locNodeId,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3125,spi.locHost));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3480,ClientMessageWorker worker = clientMsgWorkers.get(node.id());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3483,throw new IgniteSpiException("Client node already disconnected: " + node);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3485,msg.verify(getLocalNodeId()); // Client worker require verified messages.
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3487,worker.addMessage(msg);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3747,trySendMessageDirectly(node, new TcpDiscoveryAuthFailedMessage(locNodeId,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3748,spi.locHost));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,5426,boolean ignored = false;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,5428,TcpDiscoverySpiState state = null;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,5439,ignored = true;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,5441,state = spiState;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,5446,log.debug("Auth failed message has been ignored [msg=" + msg +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/messages/TcpDiscoveryAuthFailedMessage.java,44,public TcpDiscoveryAuthFailedMessage(UUID creatorNodeId, InetAddress addr) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,411,U.join(tcpSrvr, log);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1493,U.join(tcpSrvr, log);
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,27,import java.util.ArrayList;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,28,import java.util.Collections;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,29,import java.util.Comparator;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,30,import java.util.List;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,41,public static final String DOWNLOAD_LINK = "http://tiny.cc/updater/download_community.php";
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,44,private ClusterProperties props;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,47,private String latestVersion = null;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,50,private boolean hdfs = false;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,70,if (latestVersion == null) {
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,71,List<String> localFiles = findIgnites(folder);
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,72,List<String> hdfsFiles = findIgnites(fs, props.igniteReleasesDir());
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,74,String localLatestVersion = findLatestVersion(localFiles);
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,75,String hdfsLatestVersion = findLatestVersion(hdfsFiles);
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,77,if (localLatestVersion != null && hdfsLatestVersion != null) {
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,78,if (VersionComparator.INSTANCE.compare(hdfsLatestVersion, localLatestVersion) >= 0) {
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,79,latestVersion = hdfsLatestVersion;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,81,hdfs = true;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,85,latestVersion = localLatestVersion;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,86,else if (hdfsLatestVersion != null) {
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,87,latestVersion = hdfsLatestVersion;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,89,hdfs = true;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,93,String newVersion = updateIgnite(latestVersion);
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,95,if (latestVersion != null && newVersion.equals(latestVersion)) {
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,97,return new Path(formatPath(props.igniteReleasesDir(), latestVersion));
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,98,else
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,99,return IgniteYarnUtils.copyLocalToHdfs(fs, formatPath(props.igniteLocalWorkDir(), latestVersion),
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,100,formatPath(props.igniteReleasesDir(), latestVersion));
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,102,else {
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,103,latestVersion = newVersion;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,105,return IgniteYarnUtils.copyLocalToHdfs(fs, formatPath(props.igniteLocalWorkDir(), latestVersion),
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,106,formatPath(props.igniteReleasesDir(), latestVersion));
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,114,private List<String> findIgnites(File folder) {
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,117,List<String> ignites = new ArrayList<>();
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,122,ignites.add(fileName);
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,126,return ignites;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,133,private String findLatestVersion(List<String> files) {
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,134,String latestVersion = null;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,136,if (!files.isEmpty()) {
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,138,latestVersion = parseVersion(files.get(0));
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,139,else
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,140,latestVersion = parseVersion(Collections.max(files, VersionComparator.INSTANCE));
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,143,return latestVersion;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,151,private List<String> findIgnites(FileSystem fs, String folder) {
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,161,throw new RuntimeException("Couldnt get list files from hdfs.", e);
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,164,List<String> ignites = new ArrayList<>();
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,171,ignites.add(fileName);
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,175,return ignites;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,182,public Path getIgnite(String version) throws Exception {
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,186,String fileName = downloadIgnite(version);
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,201,private static String formatPath(String folder, String version) {
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,209,private String updateIgnite(String currentVersion) {
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,211,URL url;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,214,url = new URL(DOWNLOAD_LINK);
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,215,else
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,216,url = new URL(DOWNLOAD_LINK + "?version=" + currentVersion);
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,222,if (code == 200) {
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,223,String redirectUrl = conn.getURL().toString();
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,225,checkDownloadFolder();
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,227,FileOutputStream outFile = new FileOutputStream(props.igniteLocalWorkDir() + File.separator
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,228,+ fileName(redirectUrl));
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,230,outFile.getChannel().transferFrom(Channels.newChannel(conn.getInputStream()), 0, Long.MAX_VALUE);
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,232,outFile.close();
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,234,return parseVersion(redirectUrl);
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,238,return currentVersion;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,239,else
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,302,private static String parseVersion(String url) {
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,303,String[] split = url.split("-");
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,305,return split[split.length - 1].replaceAll(".zip", "");
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,321,public static final class VersionComparator implements Comparator<String> {
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,323,public static final VersionComparator INSTANCE = new VersionComparator();
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,326,private VersionComparator() {
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,333,return 0;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,335,String[] ver1 = parseVersion(f1).split("\\.");
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,336,String[] ver2 = parseVersion(f2).split("\\.");
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,342,return 1;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,343,else
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,344,return -1;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteYarnClient.java,194,return provider.getIgnite();
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteYarnClient.java,195,else
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteYarnClient.java,196,return provider.getIgnite(props.igniteUrl());
modules/core/src/main/java/org/apache/ignite/internal/IgniteVersionUtils.java,62,BUILD_TSTAMP_STR = new SimpleDateFormat("yyyyMMdd").format(new Date(BUILD_TSTAMP * 1000));
modules/core/src/main/java/org/apache/ignite/lang/IgniteProductVersion.java,24,import java.text.SimpleDateFormat;
modules/core/src/main/java/org/apache/ignite/lang/IgniteProductVersion.java,262,String revTsStr = new SimpleDateFormat("yyyyMMdd").format(new Date(revTs * 1000));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslHandler.java,596,(handshakeFinished && res.getHandshakeStatus() == NOT_HANDSHAKING || res.getHandshakeStatus() == NEED_UNWRAP));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,1769,assert !F.isEmpty(assignment) : assignment;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1406,updateCntr0 = updateCntr;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishFuture.java,20,import java.util.ArrayList;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishFuture.java,35,import org.apache.ignite.internal.processors.cache.transactions.IgniteTxEntry;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishFuture.java,373,Collection<Long> updCntrs = new ArrayList<>(dhtMapping.entries().size());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishFuture.java,376,updCntrs.add(e.updateCounter());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishRequest.java,233,if (updateIdxs != null && !updateIdxs.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishRequest.java,234,partUpdateCnt = new GridLongList(updateIdxs.size());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishRequest.java,237,partUpdateCnt.add(idx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFutureAdapter.java,111,topVer = topFut.topologyVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,999,tx.setPartitionUpdateCounters(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,1000,req.partUpdateCounters() != null ? req.partUpdateCounters().array() : null);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,9306,public static <T extends R, R> List<R> arrayList(Iterable<T> c, int cap,
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,9313,for (T t : c) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2174,dfltCacheCfg = cfg; // Template with name '*'.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2178,dfltCacheCfg = cfg;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2182,Collections.sort(wildcardNameCfgs, new Comparator<CacheConfiguration>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2184,Integer len1 = cfg1.getName() != null ? cfg1.getName().length() : 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2185,Integer len2 = cfg2.getName() != null ? cfg2.getName().length() : 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2187,return len2.compareTo(len1);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2191,for (CacheConfiguration cfg : wildcardNameCfgs) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2192,if (cacheName.startsWith(cfg.getName().substring(0, cfg.getName().length() - 1))) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2193,cfgTemplate = cfg;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2208,CacheConfiguration cfg = new CacheConfiguration(cfgTemplate);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheExplicitLockSpan.java,152,if (ver == null || deque.peekFirst().version().equals(ver)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheExplicitLockSpan.java,153,cand = deque.removeFirst();
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,48,import javax.management.JMException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,1051,GridCacheContext drCacheCtx = cacheCtx.isNear() ? cacheCtx.near().dht().context() : cacheCtx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,1053,if (drCacheCtx.isDrEnabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,1054,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,1057,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,1058,U.error(log, "Failed to notify DR: " + e, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1142,for (GridDhtPartitionsExchangeFuture fut : exchFuts.values()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1146,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,143,private boolean trackable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,233,return trackable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,238,trackable = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,677,GridDhtTopologyFuture fut = cctx.topologyVersionFuture();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,679,if (fut.isDone()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,708,map(keys, remap, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,711,c.run();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,713,markInitialized();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,715,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1190,trackable = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1224,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1227,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1228,busyLock.leaveBusy();
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1768,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1789,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,54,import org.apache.ignite.lang.IgniteBiInClosure;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceDeploymentFuture.java,37,public GridServiceDeploymentFuture(ServiceConfiguration cfg) {
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcConnection.java,713,private void ensureNotClosed() throws SQLException {
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,29,import java.util.LinkedList;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,31,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,32,import java.util.UUID;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,36,import org.apache.ignite.internal.processors.cache.query.GridCacheSqlIndexMetadata;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,38,import org.apache.ignite.internal.util.typedef.F;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,39,import org.apache.ignite.internal.util.typedef.internal.U;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,59,private Collection<List<Object>> indexes;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,696,updateMetaData();
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,698,List<List<?>> rows = new LinkedList<>();
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,705,rows.add(tableRow(schema.getKey(), tbl));
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,724,private List<Object> tableRow(String schema, String tbl) {
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,725,List<Object> row = new ArrayList<>(10);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,728,row.add(schema);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,729,row.add(tbl.toUpperCase());
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,730,row.add("TABLE");
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,731,row.add(null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,732,row.add(null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,733,row.add(null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,734,row.add(null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,735,row.add(null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,736,row.add(null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,738,return row;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,772,updateMetaData();
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,774,List<List<?>> rows = new LinkedList<>();
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,814,private List<Object> columnRow(String schema, String tbl, String col, int type, String typeName,
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,815,boolean nullable, int pos) {
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,839,return row;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,895,updateMetaData();
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,897,List<List<?>> rows = new LinkedList<>();
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1198,updateMetaData();
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1200,List<List<?>> rows = new ArrayList<>(meta.size());
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1308,private void updateMetaData() throws SQLException {
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1312,try {
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1313,Ignite ignite = conn.ignite();
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1315,UUID nodeId = conn.nodeId();
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1317,Collection<GridCacheSqlMetadata> metas;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1319,UpdateMetadataTask task = new UpdateMetadataTask(conn.cacheName(), nodeId == null ? ignite : null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1321,metas = nodeId == null ? task.call() : ignite.compute(ignite.cluster().forNodeId(nodeId)).call(task);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1323,meta = U.newHashMap(metas.size());
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1325,indexes = new ArrayList<>();
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1327,for (GridCacheSqlMetadata m : metas) {
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1328,String name = m.cacheName();
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1331,name = "PUBLIC";
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1333,Collection<String> types = m.types();
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1337,for (String type : types) {
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1340,for (GridCacheSqlIndexMetadata idx : m.indexes(type)) {
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1341,int cnt = 0;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1343,for (String field : idx.fields()) {
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1344,indexes.add(F.<Object>asList(name, type.toUpperCase(), !idx.unique(),
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1350,meta.put(name, typesMap);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1353,catch (Exception e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,790,U.error(log, "Error sending reply for job [nodeId=" + sndNode.id() + ", jobId=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,802,U.error(log, msg, e);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/TcpDiscoveryIpFinderAdapter.java,22,import org.apache.ignite.Ignite;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/TcpDiscoveryIpFinderAdapter.java,25,import org.apache.ignite.resources.IgniteInstanceResource;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/TcpDiscoveryIpFinderAdapter.java,29,import org.apache.ignite.spi.discovery.DiscoverySpi;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/TcpDiscoveryIpFinderAdapter.java,30,import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/TcpDiscoveryIpFinderAdapter.java,46,protected Ignite ignite;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/TcpDiscoveryIpFinderAdapter.java,61,registerAddresses(addrs);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/TcpDiscoveryIpFinderAdapter.java,93,protected boolean discoveryClientMode() {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/TcpDiscoveryIpFinderAdapter.java,94,boolean clientMode;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/TcpDiscoveryIpFinderAdapter.java,96,Ignite ignite0 = ignite;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/TcpDiscoveryIpFinderAdapter.java,98,if (ignite0 != null) { // Can be null if used in tests without starting Ignite.
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/TcpDiscoveryIpFinderAdapter.java,99,DiscoverySpi discoSpi = ignite0.configuration().getDiscoverySpi();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/TcpDiscoveryIpFinderAdapter.java,102,throw new IgniteSpiException("TcpDiscoveryIpFinder should be used with TcpDiscoverySpi: " + discoSpi);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/TcpDiscoveryIpFinderAdapter.java,104,clientMode = ignite0.configuration().isClientMode() && !((TcpDiscoverySpi)discoSpi).isForceServerMode();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/TcpDiscoveryIpFinderAdapter.java,106,else
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/TcpDiscoveryIpFinderAdapter.java,107,clientMode = false;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/TcpDiscoveryIpFinderAdapter.java,109,return clientMode;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,295,String overrideMcastGrp = System.getProperty(IGNITE_OVERRIDE_MCAST_GRP);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,298,mcastGrp = overrideMcastGrp;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,301,throw new IgniteSpiException("Multicast IP address is not specified.");
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,304,throw new IgniteSpiException("Invalid multicast port: " + mcastPort);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,307,throw new IgniteSpiException("Invalid wait time, value greater than zero is expected: " + resWaitTime);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,310,throw new IgniteSpiException("Invalid number of address request attempts, " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,314,throw new IgniteSpiException("Time-to-live value is out of 0 <= TTL <= 255 range: " + ttl);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,321,boolean clientMode = discoveryClientMode();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,323,try {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,324,mcastAddr = InetAddress.getByName(mcastGrp);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,326,catch (UnknownHostException e) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,327,throw new IgniteSpiException("Unknown multicast group: " + mcastGrp, e);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,331,throw new IgniteSpiException("Invalid multicast group address: " + mcastAddr);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,333,Collection<String> locAddrs;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,335,try {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,336,locAddrs = U.resolveLocalAddresses(U.resolveLocalHost(locAddr)).get1();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,338,catch (IOException | IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,339,throw new IgniteSpiException("Failed to resolve local addresses [locAddr=" + locAddr + ']', e);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,342,assert locAddrs != null;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,344,addrSnds = new ArrayList<>(locAddrs.size());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,346,reqItfs = new HashSet<>(locAddrs.size()); // Interfaces used to send requests.
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,348,for (String locAddr : locAddrs) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,349,InetAddress addr;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,352,addr = InetAddress.getByName(locAddr);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,354,catch (UnknownHostException e) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,356,log.debug("Failed to resolve local address [locAddr=" + locAddr + ", err=" + e + ']');
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,358,continue;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,361,if (!addr.isLoopbackAddress()) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,364,addrSnds.add(new AddressSender(mcastAddr, addr, addrs));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,366,reqItfs.add(addr);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,377,if (!clientMode) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,378,locNodeAddrs = new HashSet<>(addrs);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,380,if (addrSnds.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,381,try {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,384,addrSnds.add(new AddressSender(mcastAddr, null, addrs));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,386,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,388,log.debug("Failed to create multicast socket [mcastAddr=" + mcastAddr +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,392,if (addrSnds.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,393,try {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,394,addrSnds.add(new AddressSender(mcastAddr, mcastAddr, addrs));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,396,reqItfs.add(mcastAddr);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,398,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,400,log.debug("Failed to create multicast socket [mcastAddr=" + mcastAddr +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,407,if (!addrSnds.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,409,addrSnd.start();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,411,else
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,412,mcastErr = true;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,414,else {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,415,assert addrSnds.isEmpty() : addrSnds;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,417,locNodeAddrs = Collections.emptySet();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,445,if (getRegisteredAddresses().isEmpty()) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,751,super(ignite == null ? null : ignite.name(), "tcp-disco-multicast-addr-rcvr", log);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,795,super(ignite == null ? null : ignite.name(), "tcp-disco-multicast-addr-sender", log);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectContext.java,38,private GridKernalContext kernalCtx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectContext.java,47,private boolean cpyOnGet;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectContext.java,50,private boolean storeVal;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectContext.java,56,private boolean addDepInfo;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectContext.java,69,boolean addDepInfo) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,223,key = ((CacheObject)key).value(cctx.cacheObjectContext(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,225,return (key instanceof GridCacheInternal ? cctx.defaultAffMapper() : affMapper).affinityKey(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,44,import org.apache.ignite.cache.affinity.AffinityKeyMapper;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1124,public AffinityKeyMapper defaultAffMapper() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1125,return cacheObjCtx.defaultAffMapper();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryContext.java,18,package org.apache.ignite.internal.processors.cache.binary;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryContext.java,20,import org.apache.ignite.internal.GridKernalContext;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryContext.java,21,import org.apache.ignite.internal.processors.cache.CacheDefaultBinaryAffinityKeyMapper;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryContext.java,22,import org.apache.ignite.internal.processors.cache.CacheObjectContext;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryContext.java,23,import org.apache.ignite.internal.processors.cache.GridCacheDefaultAffinityKeyMapper;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryContext.java,28,public class CacheObjectBinaryContext extends CacheObjectContext {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryContext.java,30,private boolean binaryEnabled;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryContext.java,39,public CacheObjectBinaryContext(GridKernalContext kernalCtx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryContext.java,40,boolean cpyOnGet,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryContext.java,41,boolean storeVal,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryContext.java,42,boolean binaryEnabled,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryContext.java,43,boolean depEnabled) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryContext.java,47,this.binaryEnabled = binaryEnabled;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryContext.java,54,return binaryEnabled;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessor.java,18,package org.apache.ignite.internal.processors.cache.binary;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessor.java,20,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessor.java,21,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessor.java,25,import org.apache.ignite.binary.BinaryObjectBuilder;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessor.java,26,import org.apache.ignite.binary.BinaryType;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessor.java,28,import org.jetbrains.annotations.Nullable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessor.java,33,public interface CacheObjectBinaryProcessor extends IgniteCacheObjectProcessor {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessor.java,38,public BinaryObjectBuilder builder(String clsName);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessor.java,46,public BinaryObjectBuilder builder(BinaryObject binaryObj);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessor.java,63,public void updateMetadata(int typeId, String typeName, @Nullable String affKeyFieldName,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessor.java,78,public Map<Integer, BinaryType> metadata(Collection<Integer> typeIds) throws IgniteException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessor.java,84,public Collection<BinaryType> metadata() throws IgniteException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessor.java,92,public BinaryObject buildEnum(String typeName, int ord) throws IgniteException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,83,import org.apache.ignite.internal.processors.cacheobject.IgniteCacheObjectProcessorImpl;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,111,public class CacheObjectBinaryProcessorImpl extends IgniteCacheObjectProcessorImpl implements
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,112,CacheObjectBinaryProcessor {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,398,return super.typeId(typeName);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,714,return isBinaryObject(obj) ? ((BinaryObject)obj).field(fieldName) : super.field(obj, fieldName);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,731,assert cfg != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,733,boolean binaryEnabled = marsh instanceof BinaryMarshaller && !GridCacheUtils.isSystemCache(cfg.getName()) &&
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,734,!GridCacheUtils.isIgfsCache(ctx.config(), cfg.getName());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,736,CacheObjectContext ctx0 = super.contextForCache(cfg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,738,CacheObjectContext res = new CacheObjectBinaryContext(ctx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,739,ctx0.copyOnGet(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,740,ctx0.storeValue(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,741,binaryEnabled,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,742,ctx0.addDeploymentInfo());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,744,ctx.resource().injectGeneric(res.defaultAffMapper());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,746,return res;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,752,return super.marshal(ctx, val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,765,return super.unmarshal(ctx, bytes, clsLdr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,824,return new BinaryObjectImpl(binaryContext(), bytes, 0);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,826,return new BinaryEnumObjectImpl(binaryContext(), bytes);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,828,return super.toCacheObject(ctx, type, bytes);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/IgniteBinaryImpl.java,38,private CacheObjectBinaryProcessor proc;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/IgniteBinaryImpl.java,43,public IgniteBinaryImpl(GridKernalContext ctx, CacheObjectBinaryProcessor proc) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessor.java,182,public IgniteBinary binary();
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,18,package org.apache.ignite.internal.processors.cacheobject;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,20,import java.math.BigDecimal;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,22,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,23,import java.util.HashSet;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,24,import java.util.UUID;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,25,import org.apache.ignite.IgniteBinary;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,26,import org.apache.ignite.IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,27,import org.apache.ignite.IgniteException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,29,import org.apache.ignite.configuration.CacheConfiguration;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,30,import org.apache.ignite.internal.GridKernalContext;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,31,import org.apache.ignite.internal.processors.GridProcessorAdapter;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,32,import org.apache.ignite.internal.processors.cache.CacheObject;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,33,import org.apache.ignite.internal.processors.cache.CacheObjectByteArrayImpl;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,34,import org.apache.ignite.internal.processors.cache.CacheObjectContext;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,35,import org.apache.ignite.internal.processors.cache.CacheObjectImpl;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,36,import org.apache.ignite.internal.processors.cache.GridCacheContext;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,37,import org.apache.ignite.internal.processors.cache.GridCacheDefaultAffinityKeyMapper;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,38,import org.apache.ignite.internal.processors.cache.KeyCacheObject;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,39,import org.apache.ignite.internal.processors.cache.KeyCacheObjectImpl;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,43,import org.apache.ignite.internal.util.typedef.internal.CU;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,44,import org.apache.ignite.internal.util.typedef.internal.U;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,45,import org.apache.ignite.lang.IgniteUuid;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,46,import org.jetbrains.annotations.Nullable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,53,public class IgniteCacheObjectProcessorImpl extends GridProcessorAdapter implements IgniteCacheObjectProcessor {
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,55,private static final Collection<Class<?>> IMMUTABLE_CLS = new HashSet<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,58,private IgniteBinary noOpBinary = new NoOpBinary();
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,63,static {
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,64,IMMUTABLE_CLS.add(String.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,65,IMMUTABLE_CLS.add(Boolean.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,66,IMMUTABLE_CLS.add(Byte.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,67,IMMUTABLE_CLS.add(Short.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,68,IMMUTABLE_CLS.add(Character.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,69,IMMUTABLE_CLS.add(Integer.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,70,IMMUTABLE_CLS.add(Long.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,71,IMMUTABLE_CLS.add(Float.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,72,IMMUTABLE_CLS.add(Double.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,73,IMMUTABLE_CLS.add(UUID.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,74,IMMUTABLE_CLS.add(IgniteUuid.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,75,IMMUTABLE_CLS.add(BigDecimal.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,81,public IgniteCacheObjectProcessorImpl(GridKernalContext ctx) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,82,super(ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,87,return noOpBinary;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,93,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,95,return obj.prepareForCache(cctx.cacheObjectContext());
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,100,return CU.marshal(ctx.kernalContext().cache().context(), ctx.addDeploymentInfo(), val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,105,throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,119,return (KeyCacheObject)obj;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,166,switch (type) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,167,case CacheObject.TYPE_BYTE_ARR:
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,170,case CacheObject.TYPE_REGULAR:
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,174,throw new IllegalArgumentException("Invalid object type: " + type);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,180,boolean userObj) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,182,return (CacheObject)obj;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,184,return toCacheObject0(obj, userObj);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,194,protected CacheObject toCacheObject0(@Nullable Object obj, boolean userObj) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,195,assert obj != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,197,if (obj instanceof byte[]) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,199,return new CacheObjectByteArrayImpl((byte[])obj);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,201,return new UserCacheObjectByteArrayImpl((byte[])obj);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,205,return new CacheObjectImpl(obj, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,207,return new UserCacheObjectImpl(obj, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,212,assert ccfg != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,220,CacheObjectContext res = new CacheObjectContext(ctx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,221,ccfg.getAffinityMapper() != null ? ccfg.getAffinityMapper() : new GridCacheDefaultAffinityKeyMapper(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,223,storeVal,
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,224,ctx.config().isPeerClassLoadingEnabled() && !isBinaryEnabled(ccfg));
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,226,ctx.resource().injectGeneric(res.defaultAffMapper());
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,228,return res;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,233,assert obj != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,235,return IMMUTABLE_CLS.contains(obj.getClass());
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,245,return 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,250,return obj;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,255,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,260,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,265,return 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,270,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,275,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1110,this.state = state;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1194,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1195,busyLock.leaveBusy();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,415,buf.a(cd.getSimpleClassName()).a(" [");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,488,Collection<ClusterNode> nodes = CU.affinityNodes(cctx, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,516,nodes,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,526,else if (!pingNodes(nodes)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,684,assert cache != null : cacheName;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,686,cache.context().dataStructures().blockSet(setId);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,47,import org.apache.ignite.internal.processors.cache.query.CacheQueryType;
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,41,private static final Long CHECK_FREQ = Long.getLong(IGNITE_MARSHAL_BUFFERS_RECHECK, 10000);
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,135,bytes = newBytes;
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,140,if (maxOff < halfSize) {
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,141,byte[] newBytes = new byte[halfSize]; // Shrink.
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,145,bytes = newBytes;
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,186,int bytesToCp = arr.length << 3;
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,218,int bytesToCp = arr.length << 1;
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,241,int bytesToCp = arr.length << 3;
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,264,int bytesToCp = arr.length << 2;
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,305,int bytesToCp = arr.length << 1;
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,328,int bytesToCp = arr.length << 2;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,727,row.add(null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,753,Collections.<List<?>>emptyList(),
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,816,List<Object> row = new ArrayList<>(20);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1526,U.quietAndWarn(log, "Slow client queue limit is set to a value greater than message queue limit " +
modules/yardstick/src/main/java/org/apache/ignite/yardstick/IgniteAbstractBenchmark.java,115,return ignite().cluster().nodes().size() >= args.nodes();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreExample.java,21,import java.util.UUID;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreExample.java,24,import org.apache.ignite.IgniteException;
modules/core/src/main/java/org/apache/ignite/Ignition.java,27,import org.apache.ignite.spi.discovery.DiscoverySpi;
modules/core/src/main/java/org/apache/ignite/Ignition.java,28,import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;
modules/core/src/main/java/org/apache/ignite/cluster/ClusterNode.java,26,import org.apache.ignite.Ignition;
modules/core/src/main/java/org/apache/ignite/cluster/ClusterNode.java,29,import org.apache.ignite.spi.discovery.DiscoverySpi;
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientNioTcpConnection.java,79,import org.apache.ignite.internal.util.typedef.internal.U;
modules/core/src/main/java/org/apache/ignite/internal/cluster/ClusterGroupEx.java,22,import org.jetbrains.annotations.Nullable;
modules/core/src/main/java/org/apache/ignite/internal/managers/indexing/GridIndexingManager.java,29,import org.apache.ignite.spi.IgniteSpiException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheEntryPredicateAdapter.java,22,import org.apache.ignite.IgniteException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectContext.java,20,import java.util.ArrayList;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectContext.java,21,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectContext.java,22,import java.util.HashMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectContext.java,23,import java.util.HashSet;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectContext.java,24,import java.util.LinkedHashMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectContext.java,25,import java.util.LinkedList;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectContext.java,26,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectContext.java,29,import org.apache.ignite.internal.binary.BinaryUtils;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectContext.java,31,import org.apache.ignite.internal.util.typedef.F;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,21,import java.util.HashMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionExchangeId.java,33,import org.jetbrains.annotations.NotNull;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,54,import org.apache.ignite.internal.util.typedef.CI1;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearUnlockRequest.java,24,import org.apache.ignite.plugin.extensions.communication.MessageCollectionItemType;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessor.java,24,import org.apache.ignite.internal.GridComponent;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,30,import org.apache.ignite.internal.processors.cache.GridCacheContext;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicStampedImpl.java,30,import org.apache.ignite.internal.processors.cache.GridCacheContext;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheCountDownLatchImpl.java,31,import org.apache.ignite.IgniteLogger;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheCountDownLatchImpl.java,33,import org.apache.ignite.internal.processors.cache.GridCacheContext;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheLockImpl.java,48,import org.apache.ignite.IgniteLogger;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheLockImpl.java,50,import org.apache.ignite.internal.processors.cache.GridCacheContext;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSemaphoreImpl.java,36,import org.apache.ignite.IgniteLogger;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSemaphoreImpl.java,40,import org.apache.ignite.internal.processors.cache.GridCacheContext;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformProcessor.java,25,import org.jetbrains.annotations.Nullable;
modules/core/src/main/java/org/apache/ignite/internal/processors/plugin/CachePluginManager.java,23,import java.util.ListIterator;
modules/rest-http/src/main/java/org/apache/ignite/internal/processors/rest/protocols/http/jetty/GridJettyRestProtocol.java,26,import java.util.Properties;
modules/rest-http/src/main/java/org/apache/ignite/internal/processors/rest/protocols/http/jetty/GridJettyRestProtocol.java,46,import org.eclipse.jetty.util.log.StdErrLog;
modules/cloud/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/cloud/TcpDiscoveryCloudIpFinder.java,137,private final static String JCLOUD_CONNECTION_TIMEOUT = "10000"; //10 secs
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryFieldAccessor.java,157,private static abstract class AbstractPrimitiveAccessor extends BinaryFieldAccessor {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryReaderHandles.java,54,public @Nullable <T> T get(int pos) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1752,public static TransactionConfiguration transactionConfiguration(final @Nullable GridCacheContext sysCacheCtx,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,522,public @Nullable IgfsEntryInfo lock(IgniteUuid fileId, boolean del) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2949,final @Nullable IgniteUuid affKey,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,3044,final @Nullable IgniteUuid affKey,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,582,private @Nullable IgniteBiTuple<UUID, Boolean> pingNode(InetSocketAddress addr, @Nullable UUID nodeId,
modules/gce/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/gce/TcpDiscoveryGoogleStorageIpFinder.java,77,private final static ByteArrayInputStream OBJECT_CONTENT =  new ByteArrayInputStream(new byte[0]);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSession.java,49,private volatile transient boolean isValid = true;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionV2.java,95,WebSessionV2(final String id, final @Nullable HttpSession ses, final boolean isNew, final ServletContext ctx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,789,private class CacheClassLoader extends ClassLoader {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8250,Class old = ldrMap.putIfAbsent(clsName, cls = Class.forName(clsName, true, ldr));
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,198,return getTypedValue(colIdx, String.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,203,Boolean val = getTypedValue(colIdx, Boolean.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,205,return val != null ? val : false;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,210,Byte val = getTypedValue(colIdx, Byte.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,212,return val != null ? val : 0;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,217,Short val = getTypedValue(colIdx, Short.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,219,return val != null ? val : 0;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,224,Integer val = getTypedValue(colIdx, Integer.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,226,return val != null ? val : 0;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,231,Long val = getTypedValue(colIdx, Long.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,233,return val != null ? val : 0;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,238,Float val = getTypedValue(colIdx, Float.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,240,return val != null ? val : 0;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,245,Double val = getTypedValue(colIdx, Double.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,247,return val != null ? val : 0;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,252,return getTypedValue(colIdx, BigDecimal.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,257,return getTypedValue(colIdx, byte[].class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,262,return getTypedValue(colIdx, Date.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,267,return getTypedValue(colIdx, Time.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,272,return getTypedValue(colIdx, Timestamp.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,298,return getTypedValue(colLb, String.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,303,Boolean val = getTypedValue(colLb, Boolean.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,305,return val != null ? val : false;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,310,Byte val = getTypedValue(colLb, Byte.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,312,return val != null ? val : 0;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,317,Short val = getTypedValue(colLb, Short.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,319,return val != null ? val : 0;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,324,Integer val = getTypedValue(colLb, Integer.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,326,return val != null ? val : 0;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,331,Long val = getTypedValue(colLb, Long.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,333,return val != null ? val : 0;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,338,Float val = getTypedValue(colLb, Float.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,340,return val != null ? val : 0;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,345,Double val = getTypedValue(colLb, Double.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,347,return val != null ? val : 0;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,352,return getTypedValue(colLb, BigDecimal.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,357,return getTypedValue(colLb, byte[].class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,362,return getTypedValue(colLb, Date.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,367,return getTypedValue(colLb, Time.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,372,return getTypedValue(colLb, Timestamp.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,424,return getTypedValue(colIdx, Object.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,429,return getTypedValue(colLb, Object.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,460,return getTypedValue(colIdx, BigDecimal.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,465,return getTypedValue(colLb, BigDecimal.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,939,return getTypedValue(colIdx, Object.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,972,return getTypedValue(colLb, Object.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1005,return getTypedValue(colIdx, Date.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1010,return getTypedValue(colLb, Date.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1015,return getTypedValue(colIdx, Time.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1020,return getTypedValue(colLb, Time.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1025,return getTypedValue(colIdx, Timestamp.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1030,return getTypedValue(colLb, Timestamp.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1035,return getTypedValue(colIdx, URL.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1040,return getTypedValue(colLb, URL.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1433,return getTypedValue(colIdx, type);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1438,return getTypedValue(colLb, type);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1449,private <T> T getTypedValue(String colLb, Class<T> cls) throws SQLException {
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1450,ensureNotClosed();
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1451,ensureHasCurrentRow();
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1453,String name = colLb.toUpperCase();
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1455,Integer idx = stmt.fieldsIdxs.get(name);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1457,int colIdx;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1460,colIdx = idx;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1462,colIdx = cols.indexOf(name) + 1;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1465,throw new SQLException("Invalid column label: " + colLb);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1467,stmt.fieldsIdxs.put(name, colIdx);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1470,return getTypedValue(colIdx, cls);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1482,private <T> T getTypedValue(int colIdx, Class<T> cls) throws SQLException {
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1493,catch (IndexOutOfBoundsException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1494,throw new SQLException("Invalid column index: " + colIdx);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1496,catch (ClassCastException ignored) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1261,InetSocketAddress resolved = remAddr.isUnresolved() ?
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1262,new InetSocketAddress(InetAddress.getByName(remAddr.getHostName()), remAddr.getPort()) : remAddr;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1264,InetAddress addr = resolved.getAddress();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1266,assert addr != null;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1268,sock.connect(resolved, (int)timeoutHelper.nextTimeoutChunk(sockTimeout));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1270,writeToSocket(sock, null, U.IGNITE_HEADER, timeoutHelper.nextTimeoutChunk(sockTimeout));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1272,return sock;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1282,Socket sock;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1285,sock = sslSockFactory.createSocket();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1286,else
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1287,sock = new Socket();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1289,sock.bind(new InetSocketAddress(locHost, 0));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1291,sock.setTcpNoDelay(true);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1293,return sock;
modules/core/src/main/java/org/apache/ignite/internal/mxbean/IgniteStandardMXBean.java,98,assert str.trim().length() > 0 : "Method description cannot be empty: " + mtd;
modules/core/src/main/java/org/apache/ignite/internal/mxbean/IgniteStandardMXBean.java,126,assert str.trim().length() > 0;
modules/core/src/main/java/org/apache/ignite/internal/mxbean/IgniteStandardMXBean.java,149,assert str.trim().length() > 0;
modules/core/src/main/java/org/apache/ignite/internal/mxbean/IgniteStandardMXBean.java,179,assert str.trim().length() > 0;
modules/core/src/main/java/org/apache/ignite/internal/mxbean/IgniteStandardMXBean.java,209,assert str.trim().length() > 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,1272,ClusterNode curPrimary = curNodes.size() > 0 ? curNodes.get(0) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,1273,ClusterNode newPrimary = newNodes.size() > 0 ? newNodes.get(0) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,1405,ClusterNode curPrimary = curNodes.size() > 0 ? curNodes.get(0) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,1406,ClusterNode newPrimary = newNodes.size() > 0 ? newNodes.get(0) : null;
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridFilenameUtils.java,1236,if (backtrack.size() > 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1258,cctx.dataStructures().onEntryUpdated(key, false, keepBinary);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1456,cctx.dataStructures().onEntryUpdated(key, true, keepBinary);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1833,cctx.dataStructures().onEntryUpdated(key, op == GridCacheOperation.DELETE, keepBinary);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,26,import java.util.Iterator;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,48,import org.apache.ignite.internal.processors.cache.KeyCacheObject;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,61,import org.apache.ignite.internal.util.GridConcurrentHashSet;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,82,private ConcurrentMap<IgniteUuid, GridConcurrentHashSet<SetItemKey>> setDataMap =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,317,public void onEntryUpdated(KeyCacheObject key, boolean rmv, boolean keepBinary) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,321,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,323,Object key0 = cctx.cacheObjectContext().unwrapBinaryIfNeeded(key, keepBinary, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,326,onSetItemUpdated((SetItemKey)key0, rmv);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,334,public void onPartitionEvicted(int part) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,335,GridCacheAffinityManager aff = cctx.affinity();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,337,for (GridConcurrentHashSet<SetItemKey> set : setDataMap.values()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,338,Iterator<SetItemKey> iter = set.iterator();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,340,while (iter.hasNext()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,341,SetItemKey key = iter.next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,344,iter.remove();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,426,return setDataMap.get(id);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,446,GridConcurrentHashSet<SetItemKey> set = setDataMap.get(setId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,449,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,451,IgniteInternalCache cache = cctx.cache();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,457,for (SetItemKey key : set) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,461,keys.add(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,473,setDataMap.remove(setId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,481,public void removeSetData(IgniteUuid id) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,565,private void onSetItemUpdated(SetItemKey key, boolean rmv) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,566,GridConcurrentHashSet<SetItemKey> set = setDataMap.get(key.setId());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,568,if (set == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,570,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,572,GridConcurrentHashSet<SetItemKey> old = setDataMap.putIfAbsent(key.setId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,573,set = new GridConcurrentHashSet<>());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,576,set = old;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,580,set.remove(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,581,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,582,set.add(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,652,iter = setIterator(qry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,788,private GridCloseableIterator<IgniteBiTuple<K, V>> setIterator(GridCacheQueryAdapter<?> qry) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,791,filter.init(cctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,795,Collection<SetItemKey> data = cctx.dataStructures().setData(id);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,798,data = Collections.emptyList();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,800,final GridIterator<IgniteBiTuple<K, V>> it = F.iterator(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,801,data,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,802,new C1<SetItemKey, IgniteBiTuple<K, V>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,804,return new IgniteBiTuple<>((K)e.item(), (V)Boolean.TRUE);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,807,true,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,808,new P1<SetItemKey>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,810,return filter.apply(e, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,814,return new GridCloseableIteratorAdapter<IgniteBiTuple<K, V>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,816,return it.hasNext();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,820,return it.next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,824,it.remove();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,48,import org.apache.ignite.internal.util.GridConcurrentHashSet;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,159,if (ctx.isLocal() || ctx.isReplicated()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,160,GridConcurrentHashSet<SetItemKey> set = ctx.dataStructures().setData(id);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,162,return set != null ? set.size() : 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,166,new GridSetQueryPredicate<>(id, collocated), null, false, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,191,GridConcurrentHashSet<SetItemKey> set = ctx.dataStructures().setData(id);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,193,return (set == null || set.isEmpty()) && size() == 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,707,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,708,sendPrepareResponse(res);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,713,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,715,onComplete(res);
modules/zookeeper/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/zk/TcpDiscoveryZookeeperIpFinder.java,112,private boolean allowDuplicateRegistrations = false;
modules/core/src/main/java/org/apache/ignite/spi/discovery/DiscoverySpiListener.java,43,public void onDiscovery(
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,414,lsnr.onDiscovery(EVT_NODE_FAILED, topVer, n, top, new TreeMap<>(topHist), null);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,2056,private void notifyDiscovery(int type, long topVer, ClusterNode node, Collection<ClusterNode> top,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,2062,log.debug("Discovery notification [node=" + node + ", type=" + U.gridEventName(type) +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,2065,lsnr.onDiscovery(type, topVer, node, top, new TreeMap<>(topHist), data);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,2068,log.debug("Skipped discovery notification [node=" + node + ", type=" + U.gridEventName(type) +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2320,processCustomMessage((TcpDiscoveryCustomEventMessage)msg);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4723,private void processCustomMessage(TcpDiscoveryCustomEventMessage msg) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4750,notifyDiscoveryListener(msg);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4755,processCustomMessage(msg);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4784,processCustomMessage(ackMsg);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4814,notifyDiscoveryListener(msg);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4865,processCustomMessage(msg);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4876,private void notifyDiscoveryListener(TcpDiscoveryCustomEventMessage msg) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4892,if (node != null) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4895,U.resolveClassLoader(spi.ignite().configuration()));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4897,lsnr.onDiscovery(DiscoveryCustomEvent.EVT_DISCOVERY_CUSTOM_EVT,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4898,msg.topologyVersion(),
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4899,node,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4900,snapshot,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4901,hist,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4902,msgObj);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4907,catch (Throwable e) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4908,U.error(log, "Failed to unmarshal discovery custom message.", e);
modules/core/src/main/java/org/apache/ignite/IgniteLock.java,125,void lock() throws IgniteException;
modules/core/src/main/java/org/apache/ignite/IgniteLock.java,317,void unlock() throws IgniteInterruptedException;
modules/core/src/main/java/org/apache/ignite/binary/BinaryBasicIdMapper.java,69,public int typeId(String typeName) {
modules/core/src/main/java/org/apache/ignite/binary/BinaryBasicIdMapper.java,90,public int fieldId(int typeId, String fieldName) {
modules/core/src/main/java/org/apache/ignite/cache/query/ContinuousQuery.java,162,public ContinuousQuery<K, V> setInitialQuery(Query<Cache.Entry<K, V>> initQry) {
modules/core/src/main/java/org/apache/ignite/cache/query/ContinuousQuery.java,290,public ContinuousQuery<K, V> setTimeInterval(long timeInterval) {
modules/core/src/main/java/org/apache/ignite/cache/query/ContinuousQuery.java,321,public ContinuousQuery<K, V> setAutoUnsubscribe(boolean autoUnsubscribe) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,116,public boolean equals(Object other) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryTypeImpl.java,98,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,330,public void write(byte[] val) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,341,public void write(byte[] val, int off, int len) {
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryBuilderReader.java,163,public byte readBytePositioned(int pos) {
modules/core/src/main/java/org/apache/ignite/internal/binary/streams/BinaryOffheapOutputStream.java,95,public int capacity() {
modules/core/src/main/java/org/apache/ignite/internal/client/ssl/GridSslBasicContextFactory.java,422,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/cluster/ClusterGroupAdapter.java,997,protected Object readResolve() throws ObjectStreamException {
modules/core/src/main/java/org/apache/ignite/internal/cluster/IgniteClusterImpl.java,566,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/direct/DirectMessageReader.java,383,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/direct/DirectMessageReader.java,423,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/direct/DirectMessageWriter.java,382,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/direct/stream/v1/DirectByteBufferStreamImplV1.java,1328,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignment.java,124,public List<List<ClusterNode>> idealAssignment() {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignment.java,131,public List<List<ClusterNode>> assignment() {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignment.java,138,public AffinityTopologyVersion topologyVersion() {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignment.java,216,public Set<Integer> primaryPartitions(UUID nodeId) {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignment.java,228,public Set<Integer> backupPartitions(UUID nodeId) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheEntryImpl.java,106,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheEntryImpl0.java,61,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheEntryImplEx.java,60,public GridCacheVersion version() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheEntryImplEx.java,92,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheLazyEntry.java,201,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectAdapter.java,121,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectByteArrayImpl.java,167,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,748,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,5440,protected boolean clearServerCache() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,5447,protected boolean clearNearCache() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,5488,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,5529,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,5586,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,5629,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtilityKey.java,44,public abstract int hashCode();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/KeyCacheObject.java,27,public int hashCode();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessor.java,98,public IgniteBinary binary() throws IgniteException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockFuture.java,610,public void onError(Throwable t) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,220,public void transactionNodes(Map<UUID, Collection<UUID>> txNodes) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,742,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,207,public void onResult(UUID nodeId, GridNearGetResponse res) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockMapping.java,115,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,771,boolean onNodeLeft(UUID nodeId, boolean discoThread) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/IgniteTxMappingsImpl.java,89,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/IgniteTxMappingsSingleImpl.java,98,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,1491,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/store/GridCacheStoreManagerAdapter.java,1263,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxImplicitSingleStateImpl.java,275,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxRemoteSingleStateImpl.java,114,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxRemoteStateImpl.java,147,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxStateImpl.java,430,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,414,public void affinityRun(IgniteRunnable job) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,423,public <R> R affinityCall(IgniteCallable<R> job) {
modules/core/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopFileBlock.java,161,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDirectoryInfo.java,65,public IgfsEntryInfo length(long len) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDirectoryInfo.java,110,protected IgfsDirectoryInfo copy() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDirectoryInfo.java,115,public boolean isFile() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDirectoryInfo.java,120,public long length() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDirectoryInfo.java,125,public int blockSize() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDirectoryInfo.java,130,public long blocksCount() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDirectoryInfo.java,135,public Map<String, IgfsListingEntry> listing() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDirectoryInfo.java,140,public boolean hasChildren() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDirectoryInfo.java,145,public boolean hasChild(String name) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDirectoryInfo.java,150,public boolean hasChild(String name, IgniteUuid expId) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDirectoryInfo.java,167,public IgfsFileMap fileMap() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDirectoryInfo.java,177,public boolean evictExclude() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,155,public boolean isFile() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,160,public long length() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,165,public int blockSize() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,170,public long blocksCount() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,175,public Map<String, IgfsListingEntry> listing() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,180,public boolean hasChildren() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,185,public boolean hasChild(String name) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,190,public boolean hasChild(String name, IgniteUuid expId) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,200,public IgfsFileMap fileMap() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,210,public boolean evictExclude() {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/client/message/GridClientNodeMetricsBean.java,1234,public int hashCode() {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/client/message/GridClientNodeMetricsBean.java,1239,public boolean equals(Object obj) {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestParser.java,828,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/util/GridConcurrentSkipListSet.java,167,public boolean equals(Object o) {
modules/core/src/main/java/org/apache/ignite/internal/util/GridStringBuilder.java,466,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteExceptionRegistry.java,244,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioFilterAdapter.java,48,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioFilterChain.java,78,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafePartitionedMap.java,294,protected void advance() throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafePartitionedMap.java,316,protected void advance() throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/lang/IgniteProductVersion.java,261,public String toString() {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,2140,public String toString() {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2034,public Iterator<TcpDiscoveryAbstractMessage> iterator() {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,283,public void setMetrics(ClusterMetrics metrics) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,299,public Map<Integer, CacheMetrics> cacheMetrics() {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,316,public void setCacheMetrics(Map<Integer, CacheMetrics> cacheMetrics) {
modules/core/src/main/java/org/apache/ignite/ssl/SslContextFactory.java,429,public String toString() {
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,38,private static final String DOWNLOAD_LINK = "http://ignite.run/download_ignite.php";
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,73,URL updateUrl = new URL(DOWNLOAD_LINK);
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,75,HttpURLConnection conn = (HttpURLConnection)updateUrl.openConnection();
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,77,int code = conn.getResponseCode();
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,80,url = conn.getURL();
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,81,else
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,82,throw new RuntimeException("Failed to download ignite distributive. Maybe set incorrect version? " +
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,86,url = new URL(String.format(DOWNLOAD_URL_PATTERN, ver.replace("-incubating", ""), ver));
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,88,return downloadIgnite(url);
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,113,FileOutputStream outFile = new FileOutputStream(downloadFolder + fileName);
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,122,throw new RuntimeException("Got unexpected response code. Response code: " + code);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,749,GridContinuousHandler.RegisterStatus registerListener(UUID lsnrId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,751,boolean internal) {
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,476,taskClsName = task.getClass().getName();
modules/core/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/messages/GridQueryFailResponse.java,52,this.errMsg = err.getClass() + ":" + err.getMessage();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,331,if (explicitParts == null) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,335,if (grp.register(reserved.subList(reserved.size() - partIds.size(), reserved.size()))) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishRequest.java,543,writeVer = reader.readMessage("writeVer");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareRequest.java,539,topVer = reader.readMessage("topVer");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareResponse.java,521,writeVer = reader.readMessage("writeVer");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,789,byte typeOrd;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,791,typeOrd = reader.readByte("type");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,796,type = GridCacheQueryType.fromOrdinal(typeOrd);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,562,case 114: {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,219,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,220,SupplyContext sctx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,589,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,592,catch (IgniteSpiException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,594,log.debug("Failed to send message to node (current node is stopping?) [node=" + node.id() +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtForceKeysFuture.java,283,log.debug("Sending force key request [cacheName=" + cctx.name() + "node=" + n.id() +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtForceKeysFuture.java,318,if (log.isDebugEnabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtForceKeysFuture.java,321,log.debug("Will not rebalance key (entry is not new) [cacheName=" + cctx.name() +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtForceKeysFuture.java,331,log.debug("Received removed DHT entry for force keys request [entry=" + e +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtForceKeysFuture.java,342,log.debug("Will not rebalance key (local node is owner) [key=" + key + ", part=" + part +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtForceKeysFuture.java,353,log.debug("Mapping local partition [loc=" + cctx.localNodeId() + ", topVer" + topVer +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtForceKeysFuture.java,372,log.debug("Will not rebalance key (no nodes to request from with rebalancing disabled) [key=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtForceKeysFuture.java,395,log.debug("Will not rebalance key (local partition is not MOVING) [cacheName=" + cctx.name() +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtForceKeysFuture.java,570,log.debug("Trying to rebalance removed entry (will ignore) [cacheName=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,714,log.debug("Entry has been concurrently removed while rebalancing (will ignore) [key=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,353,int affCnt = affNodes.size();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,355,Collection<ClusterNode> rmts = remoteOwners(p, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,357,int rmtCnt = rmts.size();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,360,return rmts;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,362,List<ClusterNode> sorted = new ArrayList<>(rmts);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,365,Collections.sort(sorted, CU.nodeComparator(false));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,368,return sorted.subList(0, affCnt);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,376,private Collection<ClusterNode> remoteOwners(int p, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1660,new CI2<GridNioSession, Integer>() {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1662,checkClientQueueSize(ses, qSize);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1665,null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3021,new GridDirectParser(log.getLogger(GridDirectParser.class),msgFactory, readerFactory),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,3264,keepBinary);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryReaderExImpl.java,235,footerLen = len - offset - 4;
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,3229,close();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,770,AffinityTopologyVersion topVer = this.topVer;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,772,assert topVer != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,774,assert topVer.topologyVersion() > 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,776,if (CU.affinityNodes(cctx, topVer).isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,777,onDone(new ClusterTopologyServerNotFoundException("Failed to map keys for cache " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,780,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,783,boolean clientNode = cctx.kernalContext().clientNode();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,785,assert !remap || (clientNode && (tx == null || !tx.hasRemoteLocks()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,789,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,791,mappings = new ArrayDeque<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,794,GridNearLockMapping map = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,796,for (KeyCacheObject key : keys) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,797,GridNearLockMapping updated = map(key, map, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,800,if (updated != map) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,801,mappings.add(updated);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,804,tx.colocatedLocallyMapped(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,807,map = updated;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,810,if (isDone()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,812,log.debug("Abandoning (re)map because future is done: " + this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,814,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,818,log.debug("Starting (re)map for mappings [mappings=" + mappings + ", fut=" + this + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,820,boolean hasRmtNodes = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,822,boolean first = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,825,for (Iterator<GridNearLockMapping> iter = mappings.iterator(); iter.hasNext(); ) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,826,GridNearLockMapping mapping = iter.next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,828,ClusterNode node = mapping.node();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,829,Collection<KeyCacheObject> mappedKeys = mapping.mappedKeys();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,831,boolean loc = node.equals(cctx.localNode());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,833,assert !mappedKeys.isEmpty();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,835,GridNearLockRequest req = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,837,Collection<KeyCacheObject> distributedKeys = new ArrayList<>(mappedKeys.size());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,839,for (KeyCacheObject key : mappedKeys) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,840,IgniteTxKey txKey = cctx.txKey(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,842,GridDistributedCacheEntry entry = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,844,if (tx != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,845,IgniteTxEntry txEntry = tx.entry(txKey);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,847,if (txEntry != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,848,entry = (GridDistributedCacheEntry)txEntry.cached();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,851,entry = cctx.colocated().entryExx(key, topVer, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,853,txEntry.cached(entry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,858,boolean explicit;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,860,while (true) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,861,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,863,entry = cctx.colocated().entryExx(key, topVer, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,865,if (!cctx.isAll(entry, filter)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,867,log.debug("Entry being locked did not pass filter (will not lock): " + entry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,871,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,874,assert loc ^ entry.detached() : "Invalid entry [loc=" + loc + ", entry=" + entry + ']';
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,876,GridCacheMvccCandidate cand = addEntry(entry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,879,IgniteBiTuple<GridCacheVersion, CacheObject> val = entry.detached() ? null :
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,880,((GridDhtCacheEntry)entry).versionedValue(topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,882,GridCacheVersion dhtVer = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,884,if (val != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,885,dhtVer = val.get1();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,887,valMap.put(key, val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,890,if (cand != null && !cand.reentry()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,891,if (req == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,892,boolean clientFirst = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,894,if (first) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,895,clientFirst = clientNode &&
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,896,!topLocked &&
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,897,(tx == null || !tx.hasRemoteLocks());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,931,distributedKeys.add(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,936,req.addKeyBytes(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,937,key,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,938,retval,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,939,dhtVer, // Include DHT version to match remote DHT entry.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,940,cctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,943,explicit = inTx() && cand == null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,946,tx.addKeyMapping(txKey, mapping.node());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,948,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,950,catch (GridCacheEntryRemovedException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,952,log.debug("Got removed entry in lockAsync(..) method (will retry): " + entry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,954,entry = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,959,if (explicit) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,960,boolean marked = tx != null && tx.markExplicit(node.id());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,962,assert tx == null || marked;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,969,if (!distributedKeys.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,970,mapping.distributedKeys(distributedKeys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,972,hasRmtNodes |= !mapping.node().isLocal();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,974,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,975,assert mapping.request() == null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,977,iter.remove();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,981,if (hasRmtNodes) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,982,trackable = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,985,throw new IllegalStateException("Duplicate future ID: " + this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,987,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,988,trackable = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearPessimisticTxPrepareFuture.java,38,import org.apache.ignite.internal.transactions.IgniteTxRollbackCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,1415,if (curPrimary != null && newPrimary != null && !curPrimary.equals(newPrimary)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,1416,if (aliveNodes.contains(curPrimary)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,1417,GridDhtPartitionState state = top.partitionState(newPrimary.id(), p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,1428,GridDhtPartitionState state = top.partitionState(newPrimary.id(), p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,50,import org.apache.ignite.internal.processors.cache.GridCacheIndexUpdateException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,943,if (X.hasCause(ex, GridCacheIndexUpdateException.class) && cacheCtx.cache().isMongoDataCache()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,945,log.debug("Failed to update mongo document index (transaction entry will " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,949,txEntry.op(NOOP);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,951,errorWhenCommitting();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,953,throw ex;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,955,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,956,IgniteCheckedException err = new IgniteTxHeuristicCheckedException("Failed to locally write to cache " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,962,COMMIT_ERR_UPD.compareAndSet(this, null, err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,964,state(UNKNOWN);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,978,throw ex;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,980,throw err;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1264,changed = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1289,changed = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1924,ctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1995,ctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,2045,ctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3498,ctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1078,cctx.evicts().touch(this, cctx.affinity().affinityTopologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,326,entry.context().evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,560,entry.context().evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,1050,cache.context().evicts().touch(entry, AffinityTopologyVersion.NONE);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetFuture.java,386,cctx.evicts().touch(e, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetSingleFuture.java,343,cctx.evicts().touch(e, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,1381,ctx.evicts().touch(entry, ctx.affinity().affinityTopologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,1568,ctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2796,ctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearAtomicCache.java,289,ctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,549,cctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,653,dht.context().evicts().touch(dhtEntry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,795,cctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTransactionalCache.java,257,ctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTransactionalCache.java,366,ctx.evicts().touch(entry, req.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTransactionalCache.java,601,ctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/GridLocalCache.java,206,ctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1513,ctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1530,ctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,1127,public void updateMetadata(int typeId, BinaryMetadata meta) throws BinaryObjectException {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,1128,metaHnd.addMeta(typeId, meta.wrap(this));
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryMetadataHandler.java,34,public void addMeta(int typeId, BinaryType meta) throws BinaryObjectException;
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryBuilderSerializer.java,119,writer.context().updateMetadata(typeId, meta);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheReturn.java,258,new CacheInvokeDirectResult(key, cctx.toCacheObject(res)) : new CacheInvokeDirectResult(key, err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessor.java,53,public void addMeta(int typeId, final BinaryType newMeta) throws IgniteException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,204,CacheObjectBinaryProcessorImpl.this.addMeta(typeId, newMeta0.wrap(binaryCtx));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,541,binaryCtx.updateMetadata(typeId, meta);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,396,CacheInvokeEntry<Object, Object> invokeEntry = new CacheInvokeEntry<>(key, val,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,397,txEntry.cached().version(), keepBinary, txEntry.cached());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,399,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,412,modified |= invokeEntry.modified();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1811,for (int i = 0; i < locked.size(); i++) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1908,dhtFut = updatePartialBatch(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1918,dhtFut,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1923,updRes,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1957,dhtFut = updatePartialBatch(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1967,dhtFut,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1972,updRes,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2087,dhtFut = updatePartialBatch(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2097,dhtFut,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2102,updRes,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2110,updRes.dhtFuture(dhtFut);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2114,return updRes;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2198,boolean sndPrevVal
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2200,GridCacheReturn retVal = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2201,Collection<IgniteBiTuple<GridDhtCacheEntry, GridCacheVersion>> deleted = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2576,batchRes.addDeleted(entry, updRes, entries);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2658,return dhtFut;
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,789,fut.get();
modules/spring/src/main/java/org/apache/ignite/cache/spring/SpringCacheManager.java,250,assert ignite == null;
modules/spring/src/main/java/org/apache/ignite/cache/spring/SpringCacheManager.java,252,if (cfgPath != null && cfg != null) {
modules/spring/src/main/java/org/apache/ignite/cache/spring/SpringCacheManager.java,253,throw new IllegalArgumentException("Both 'configurationPath' and 'configuration' are " +
modules/spring/src/main/java/org/apache/ignite/transactions/spring/SpringTransactionManager.java,312,assert ignite == null;
modules/spring/src/main/java/org/apache/ignite/transactions/spring/SpringTransactionManager.java,314,if (cfgPath != null && cfg != null) {
modules/spring/src/main/java/org/apache/ignite/transactions/spring/SpringTransactionManager.java,315,throw new IllegalArgumentException("Both 'configurationPath' and 'configuration' are " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,1422,throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,1576,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,1577,U.error(log, "Failed to remove locks for keys: " + keys, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,124,private LockTimeoutObject timeoutObj;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,416,if (!isDone()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,421,MiniFuture mini = miniFuture(res.miniId());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,423,if (mini != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,424,assert mini.node().id().equals(nodeId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,429,mini.onResult(res);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1338,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,119,private LockTimeoutObject timeoutObj;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,454,if (!isDone()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,456,log.debug("Received lock response from node [nodeId=" + nodeId + ", res=" + res + ", fut=" + this + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,458,MiniFuture mini = miniFuture(res.miniId());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,460,if (mini != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,461,assert mini.node().id().equals(nodeId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,464,log.debug("Found mini future for response [mini=" + mini + ", res=" + res + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,466,mini.onResult(res);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,469,log.debug("Future after processed lock response [fut=" + this + ", mini=" + mini +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,475,U.warn(log, "Failed to find mini future for response (perhaps due to stale message) [res=" + res +
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,180,return CU.clientNode(n);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1533,public static boolean clientNode(ClusterNode node) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1536,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1537,return clientNodeDirect(node);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1545,public static boolean clientNodeDirect(ClusterNode node) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1546,Boolean clientModeAttr = node.attribute(IgniteNodeAttributes.ATTR_CLIENT_MODE);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1548,assert clientModeAttr != null : node;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1550,return clientModeAttr != null && clientModeAttr;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,310,assert CU.clientNode(nearNode) : nearNode;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,512,if (!res && !node.isClient() && nodeAlive(nodeId)) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,535,if (node.isClient()) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1726,return !node.isClient() ? spi.getNodeAddresses(node) :
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1847,if (node.isClient() && !msgs.contains(msg)) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1878,assert node != null && node.isClient() : node;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3470,if (node.isClient()) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3643,if (node.isClient()) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,43,import org.apache.ignite.internal.util.typedef.internal.CU;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,471,return clientRouterNodeId != null;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,533,public boolean isCacheClient() {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,534,if (!cacheCliInit) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,535,cacheCli = CU.clientNodeDirect(this);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,537,cacheCliInit = true;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,540,return cacheCli;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,64,return node.isClient();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,609,return !node.isClient() && (excludedEmpty || !excluded.contains(node));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java,176,setManagers(mgrs, txMgr,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java,215,private void setManagers(List<GridCacheSharedManager<K, V>> mgrs,
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,2239,);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentManager.java,473,locDep.deployMode() + ']', "Failed to deploy class in SHARED or CONTINUOUS mode.");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,426,U.warn(log, "Rebalance delay is supported only for partitioned caches (will ignore): " + (cc.getName()),
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestProtocol.java,156,U.warn(log, "Failed to start " + name() + " protocol on port " + port + ": " + e.getMessage(),
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestProtocol.java,161,U.warn(log, "Failed to start " + name() + " protocol on port " + port + ": " + e.getMessage(),
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,114,assert !F.isEmpty(longMsg);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,174,level.doLog(log, longMsg, shortMsg, e, quiet);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,217,U.error(log, longMsg, e);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,219,U.error(log, longMsg);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,227,U.quietAndWarn(log, longMsg, F.isEmpty(shortMsg) ? longMsg : shortMsg);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,229,U.warn(log, longMsg, F.isEmpty(shortMsg) ? longMsg : shortMsg);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,237,U.quietAndInfo(log, longMsg);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,240,log.info(longMsg);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,253,public abstract void doLog(IgniteLogger log, String longMsg, String shortMsg, Throwable e, boolean quiet);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4037,warn(log, s, s);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4096,public static void warn(@Nullable IgniteLogger log, Object longMsg, Object shortMsg) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4097,assert longMsg != null;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4098,assert shortMsg != null;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4101,log.warning(compact(longMsg.toString()));
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4102,else
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4104,compact(shortMsg.toString()));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3085,U.addressesAsString(node) + ']');
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3116,U.addressesAsString(node) + ']');
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3729,U.addressesAsString(node) + ']');
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,877,String msg = "Query execution is too long (" + time + " ms): " + sql;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,884,String longMsg = "Query execution is too long [time=" + time + " ms, sql='" + sql + '\'' +
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryObjectBuilderImpl.java,396,if (!F.eq(newFldTypeName, oldFldTypeName)) {
modules/flink/src/main/java/org/apache/ignite/sink/flink/IgniteSink.java,46,private static volatile boolean stopped = true;
modules/flink/src/main/java/org/apache/ignite/sink/flink/IgniteSink.java,49,private static String igniteCfgFile;
modules/flink/src/main/java/org/apache/ignite/sink/flink/IgniteSink.java,52,private static String cacheName;
modules/flink/src/main/java/org/apache/ignite/sink/flink/IgniteSink.java,117,this.log = SinkContext.getIgnite().log();
modules/flink/src/main/java/org/apache/ignite/sink/flink/IgniteSink.java,126,public void start() throws IgniteException {
modules/flink/src/main/java/org/apache/ignite/sink/flink/IgniteSink.java,130,SinkContext.getStreamer().autoFlushFrequency(autoFlushFrequency);
modules/flink/src/main/java/org/apache/ignite/sink/flink/IgniteSink.java,131,SinkContext.getStreamer().allowOverwrite(allowOverwrite);
modules/flink/src/main/java/org/apache/ignite/sink/flink/IgniteSink.java,141,public void stop() throws IgniteException {
modules/flink/src/main/java/org/apache/ignite/sink/flink/IgniteSink.java,147,SinkContext.getStreamer().close();
modules/flink/src/main/java/org/apache/ignite/sink/flink/IgniteSink.java,148,SinkContext.getIgnite().cache(cacheName).close();
modules/flink/src/main/java/org/apache/ignite/sink/flink/IgniteSink.java,149,SinkContext.getIgnite().close();
modules/flink/src/main/java/org/apache/ignite/sink/flink/IgniteSink.java,165,SinkContext.getStreamer().addData((Map)in);
modules/flink/src/main/java/org/apache/ignite/sink/flink/IgniteSink.java,175,private static class SinkContext {
modules/flink/src/main/java/org/apache/ignite/sink/flink/IgniteSink.java,177,private SinkContext() {
modules/flink/src/main/java/org/apache/ignite/sink/flink/IgniteSink.java,181,private static class Holder {
modules/flink/src/main/java/org/apache/ignite/sink/flink/IgniteSink.java,182,private static final Ignite IGNITE = Ignition.start(igniteCfgFile);
modules/flink/src/main/java/org/apache/ignite/sink/flink/IgniteSink.java,183,private static final IgniteDataStreamer STREAMER = IGNITE.dataStreamer(cacheName);
modules/flink/src/main/java/org/apache/ignite/sink/flink/IgniteSink.java,191,private static Ignite getIgnite() {
modules/flink/src/main/java/org/apache/ignite/sink/flink/IgniteSink.java,192,return Holder.IGNITE;
modules/flink/src/main/java/org/apache/ignite/sink/flink/IgniteSink.java,200,private static IgniteDataStreamer getStreamer() {
modules/flink/src/main/java/org/apache/ignite/sink/flink/IgniteSink.java,201,return Holder.STREAMER;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1403,if (assignsMap != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1508,U.log(log, "Skipping rebalancing (obsolete exchange ID) " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,235,return
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,237,fut != rebalanceFut; // Same topology, but dummy exchange forced because of missing partitions.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,156,if (topVer.compareTo(t.get3()) > 0) { // Clear all obsolete contexts.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloaderAssignments.java,23,import org.apache.ignite.internal.util.tostring.GridToStringExclude;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloaderAssignments.java,79,AffinityTopologyVersion topologyVersion() {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,268,List<GridReservable> reserved
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,277,if (cctx == null) // Cache was not found, probably was not deployed yet.
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java,766,Set<ClusterNode> nodes = replicatedUnstableDataNodes(cctx);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java,814,private Set<ClusterNode> replicatedUnstableDataNodes(GridCacheContext<?,?> cctx) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java,922,Set<ClusterNode> dataNodes = replicatedUnstableDataNodes(extraCctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,797,if (!req.inTx()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,798,GridDhtPartitionTopology top = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,800,if (req.firstClientRequest()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,801,assert CU.clientNode(nearNode);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,803,top = topology();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,808,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,810,if (log.isDebugEnabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,811,log.debug("Client topology version mismatch, need remap lock request [" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,817,GridNearLockResponse res = sendClientLockRemapResponse(nearNode,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,818,req,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,821,return new GridFinishedFuture<>(res);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,843,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,845,top.readUnlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,895,if (tx == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,896,GridDhtPartitionTopology top = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,898,if (req.firstClientRequest()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,899,assert CU.clientNode(nearNode);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,901,top = topology();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,906,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,908,if (log.isDebugEnabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,909,log.debug("Client topology version mismatch, need remap lock request [" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,915,GridNearLockResponse res = sendClientLockRemapResponse(nearNode,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,916,req,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,919,return new GridFinishedFuture<>(res);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,922,tx = new GridDhtTxLocal(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,923,ctx.shared(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,924,req.topologyVersion(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,925,nearNode.id(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,926,req.version(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,927,req.futureId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,928,req.miniId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,929,req.threadId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,932,ctx.systemTx(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,933,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,934,ctx.ioPolicy(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,935,PESSIMISTIC,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,936,req.isolation(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,937,req.timeout(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,938,req.isInvalidate(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,939,!req.skipStore(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,940,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,941,req.txSize(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,942,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,943,req.subjectId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,944,req.taskNameHash());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,947,tx.syncMode(FULL_SYNC);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,949,tx = ctx.tm().onCreated(null, tx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,951,if (tx == null || !tx.init()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,952,String msg = "Failed to acquire lock (transaction has been completed): " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,953,req.version();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,955,U.warn(log, msg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,963,tx.topologyVersion(req.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,965,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,967,top.readUnlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,172,Iterable<Integer> col = (Iterable<Integer>)qry.execute(new SumReducer()).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,991,onDone(loadEntries(node.id(), keys.keySet(), res.entries(), savedEntries, topVer));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,1011,onDone(loadEntries(node.id(), keys.keySet(), res.entries(), savedEntries, topVer));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/CacheQuery.java,217,public CacheQuery<T> keepAll(boolean keepAll);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheDistributedQueryManager.java,270,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java,106,private volatile boolean keepAll = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java,186,boolean keepAll,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java,203,this.keepAll = keepAll;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java,316,this.keepAll = keepAll;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java,318,return this;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java,324,public boolean keepAll() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java,325,return keepAll;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryFutureAdapter.java,79,private final Collection<Object> allCol = new LinkedList<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryFutureAdapter.java,406,allCol.addAll(maskNulls((Collection<Object>)data));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryFutureAdapter.java,409,onDone((Collection<R>)(qry.query().keepAll() ? unmaskNulls(allCol) : data));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryFutureAdapter.java,582,X.println(">>>  allCollSize: " + allCol.size());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/CustomMessageWrapper.java,36,CustomMessageWrapper(DiscoveryCustomMessage delegate) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1990,assert polled != null;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4754,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,2861,V ret = tx.removeAllAsync(ctx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,2862,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,2865,null,
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,30,import java.util.LinkedList;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,32,import java.util.Queue;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,89,private static ThreadLocal<Queue<GridToStringThreadLocal>> threadCache = new ThreadLocal<Queue<GridToStringThreadLocal>>() {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,91,Queue<GridToStringThreadLocal> queue = new LinkedList<>();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,93,queue.offer(new GridToStringThreadLocal());
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,95,return queue;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,127,Queue<GridToStringThreadLocal> queue = threadCache.get();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,129,assert queue != null;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,134,GridToStringThreadLocal tmp = queue.isEmpty() ? new GridToStringThreadLocal() : queue.remove();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,136,Object[] addNames = tmp.getAdditionalNames();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,137,Object[] addVals = tmp.getAdditionalValues();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,154,queue.offer(tmp);
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,279,Queue<GridToStringThreadLocal> queue = threadCache.get();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,281,assert queue != null;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,286,GridToStringThreadLocal tmp = queue.isEmpty() ? new GridToStringThreadLocal() : queue.remove();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,288,Object[] addNames = tmp.getAdditionalNames();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,289,Object[] addVals = tmp.getAdditionalValues();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,300,queue.offer(tmp);
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,319,Queue<GridToStringThreadLocal> queue = threadCache.get();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,321,assert queue != null;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,326,GridToStringThreadLocal tmp = queue.isEmpty() ? new GridToStringThreadLocal() : queue.remove();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,328,Object[] addNames = tmp.getAdditionalNames();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,329,Object[] addVals = tmp.getAdditionalValues();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,338,queue.offer(tmp);
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,354,Queue<GridToStringThreadLocal> queue = threadCache.get();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,356,assert queue != null;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,361,GridToStringThreadLocal tmp = queue.isEmpty() ? new GridToStringThreadLocal() : queue.remove();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,368,queue.offer(tmp);
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringThreadLocal.java,18,package org.apache.ignite.internal.util.tostring;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringThreadLocal.java,25,class GridToStringThreadLocal {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringThreadLocal.java,39,return sb;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringThreadLocal.java,45,Object[] getAdditionalNames() {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringThreadLocal.java,46,return addNames;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringThreadLocal.java,52,Object[] getAdditionalValues() {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringThreadLocal.java,53,return addVals;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,460,synchronized (mux) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,461,if (waitInfo != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,465,if (rmv) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,477,cctx.kernalContext().closure().runLocalSafe(new Runnable() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,903,closeScanFilter(keyValFilter);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,914,private static void closeScanFilter(Object f) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,916,((PlatformCacheEntryFilter)f).onClose();
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,67,import static org.apache.ignite.events.EventType.EVT_NODE_JOINED;
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,97,assert evtType == EVT_NODE_FAILED || evtType == EVT_NODE_LEFT || evtType == EVT_NODE_JOINED;
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,105,if (evtType == EVT_NODE_FAILED || evtType == EVT_NODE_LEFT) {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,106,final Collection<String> caches = ctx.cache().cacheNames();
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,108,final Collection<AffinityAssignmentKey> rmv = new HashSet<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,110,for (AffinityAssignmentKey key : affMap.keySet()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,112,rmv.add(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,115,if (!rmv.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,116,ctx.timeout().addTimeoutObject(
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,117,new GridTimeoutObjectAdapter(
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,118,IgniteUuid.fromUuid(ctx.localNodeId()),
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,119,AFFINITY_MAP_CLEAN_UP_DELAY) {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,121,affMap.keySet().removeAll(rmv);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,138,ctx.event().addLocalEventListener(lsnr, EVT_NODE_FAILED, EVT_NODE_LEFT, EVT_NODE_JOINED);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,516,prepare(cfg, cfg.getEvictionPolicy(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,522,NearCacheConfiguration nearCfg = cfg.getNearConfiguration();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,525,prepare(cfg, nearCfg.getNearEvictionPolicy(), true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,553,cleanup(cfg, cfg.getEvictionPolicy(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,563,NearCacheConfiguration nearCfg = cfg.getNearConfiguration();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,566,cleanup(cfg, nearCfg.getNearEvictionPolicy(), true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareRequest.java,330,return S.toString(GridDhtTxPrepareRequest.class, this, "super", super.toString());
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,1124,if (!cache.context().affinityNode()) {
modules/core/src/main/java/org/apache/ignite/IgniteJdbcDriver.java,32,import org.apache.ignite.logger.java.JavaLogger;
modules/core/src/main/java/org/apache/ignite/IgniteJdbcDriver.java,324,private static final IgniteLogger LOG = new JavaLogger();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4451,t.join();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4453,return true;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,296,U.join(sockReader, log);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryEnumObjectImpl.java,361,return ctx.descriptorForClass(cls, false).typeId() == typeId();
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryMarshaller.java,92,return impl.marshal(obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryReaderExImpl.java,260,desc = ctx.descriptorForClass(BinaryUtils.doReadClass(in, ctx, ldr, typeId0), false);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryUtils.java,1446,ctx.descriptorForClass(cls, true);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryUtils.java,1479,ctx.descriptorForClass(cls, true);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,145,BinaryClassDescriptor desc = ctx.descriptorForClass(cls, false);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,665,BinaryClassDescriptor desc = ctx.descriptorForClass(val.getClass().getComponentType(), false);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,781,BinaryClassDescriptor desc = ctx.descriptorForClass(val.getClass().getComponentType(), false);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,810,BinaryClassDescriptor desc = ctx.descriptorForClass(val, false);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,839,BinaryClassDescriptor desc = ctx.descriptorForClass(intf, false);
modules/core/src/main/java/org/apache/ignite/internal/binary/GridBinaryMarshaller.java,234,public byte[] marshal(@Nullable Object obj) throws BinaryObjectException {
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryBuilderEnum.java,66,this.typeId = reader.binaryContext().descriptorForClass(cls, false).typeId();
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryEnumArrayLazyValue.java,59,compTypeId = reader.binaryContext().descriptorForClass(cls, true).typeId();
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryObjectArrayLazyValue.java,58,compTypeId = reader.binaryContext().descriptorForClass(cls, true).typeId();
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryObjectBuilderImpl.java,157,this.typeId = ctx.descriptorForClass(cls, false).typeId();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheDefaultBinaryAffinityKeyMapper.java,40,key = proc.toBinary(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1782,return cacheObjects().toCacheObject(cacheObjCtx, obj, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessor.java,105,public Object marshalToBinary(Object obj) throws IgniteException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,409,byte[] arr = binaryMarsh.marshal(obj);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,457,pArr[i] = marshalToBinary(arr[i]);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,466,return new T2<>(marshalToBinary(tup.get1()), marshalToBinary(tup.get2()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,468,return new IgniteBiTuple<>(marshalToBinary(tup.get1()), marshalToBinary(tup.get2()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,478,pCol.add(marshalToBinary(item));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,491,pMap.put(marshalToBinary(e.getKey()), marshalToBinary(e.getValue()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,500,return new GridMapEntry<>(marshalToBinary(e.getKey()), marshalToBinary(e.getValue()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,506,byte[] arr = binaryMarsh.marshal(obj);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,754,byte[] arr = binaryMarsh.marshal(val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,806,boolean userObj) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,808,return super.toCacheObject(ctx, obj, userObj);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,813,obj = toBinary(obj);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,868,return marshalToBinary(obj);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/IgniteBinaryImpl.java,67,return (T)proc.marshalToBinary(obj);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1563,GridDhtPartitionTopology top = topology();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1565,top.readLock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1567,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1568,if (top.stopping()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1572,completionCb.apply(req, res);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1574,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1677,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1678,top.readUnlock();
modules/core/src/main/java/org/apache/ignite/internal/util/StripedCompositeReadWriteLock.java,80,return locks[idx % locks.length].readLock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheGateway.java,106,onEnter();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheGateway.java,120,onEnter();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheGateway.java,169,onEnter();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheGateway.java,192,onEnter();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheGateway.java,243,private void onEnter() {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1470,void cancelAll(@Nullable IgniteCheckedException err) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1472,err = new IgniteCheckedException("Data streamer has been cancelled: " + DataStreamerImpl.this);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,95,private static final int DEFAULT_SES_TIMEOUT = 30_000;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,370,throw new IgniteCheckedException("Failed to handle request - unsupported case (misamatched " +
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,396,long sesExpTime0;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,397,String sesExpTime = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,399,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,400,sesExpTime = System.getProperty(IgniteSystemProperties.IGNITE_REST_SESSION_TIMEOUT);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,407,catch (NumberFormatException ignore) {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,408,U.warn(log, "Failed parsing IGNITE_REST_SESSION_TIMEOUT system variable [IGNITE_REST_SESSION_TIMEOUT="
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,409,+ sesExpTime + "]");
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,411,sesExpTime0 = DEFAULT_SES_TIMEOUT;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,414,sesTtl = sesExpTime0;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,426,sesId2Ses.remove(ses.sesId, ses);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,538,GridRestCacheRequest req0 = (GridRestCacheRequest) req;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,556,GridRestTaskRequest req0 = (GridRestTaskRequest) req;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,656,private SecurityContext authenticate(GridRestRequest req) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,758,name = ((GridRestTaskRequest)req).taskName();
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,123,private void requestFreeSize(int size) {
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,131,byte[] newBytes = new byte[size << 1]; // Grow.
modules/core/src/main/java/org/apache/ignite/internal/client/marshaller/jdk/GridClientJdkMarshaller.java,63,ObjectInput in = new ObjectInputStream(tmp);
modules/core/src/main/java/org/apache/ignite/internal/client/router/impl/GridTcpRouterNioListenerAdapter.java,82,marshMap.put(GridClientJdkMarshaller.ID, new GridClientJdkMarshaller());
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestProtocol.java,175,marshMap.put(GridClientJdkMarshaller.ID, new GridClientJdkMarshaller());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1522,throw new UnsupportedOperationException();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,514,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,136,cctx.time().schedule(new BackupCleaner(lsnrs, cctx.kernalContext()), BACKUP_ACK_FREQ, BACKUP_ACK_FREQ);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,257,wait();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1992,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1993,throw new IgniteSpiException("Failed to send message to remote node: " + node, e);
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,29,import java.util.HashMap;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,36,import java.util.concurrent.locks.ReentrantReadWriteLock;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,80,private static final Map<String, GridToStringClassDescriptor> classCache = new HashMap<>();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,83,private static final ReadWriteLock rwLock = new ReentrantReadWriteLock();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,494,rwLock.writeLock().lock();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,498,try {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,499,classCache.remove(cls.getName() + System.identityHashCode(cls.getClassLoader()));
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,501,finally {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,502,rwLock.writeLock().unlock();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,523,rwLock.readLock().lock();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,525,try {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,526,cd = classCache.get(key);
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,528,finally {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,529,rwLock.readLock().unlock();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,589,rwLock.writeLock().lock();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,591,try {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,592,classCache.put(key, cd);
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,594,finally {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,595,rwLock.writeLock().unlock();
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,1292,add(ATTR_MACS, (macs.isEmpty() ? "" : macs));
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,41,private static int throttleTimeout = DFLT_THROTTLE_TIMEOUT;
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,61,public static long throttleTimeout() {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,186,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/configuration/FileSystemConfiguration.java,41,public static final long DFLT_FRAGMENTIZER_THROTTLING_BLOCK_LENGTH = 16 * 1024 * 1024;
modules/core/src/main/java/org/apache/ignite/internal/GridDiagnostic.java,139,final long HALF_GB = 512/*MB*/ * 1024 * 1024;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,657,cctx.kernalContext().continuous().stopRoutine(id);
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,423,return X.timeSpan2HMSM(U.currentTimeMillis() - startTime);
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,1989,X.timeSpan2HMSM(U.currentTimeMillis() - startTime) + ']');
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,1992,X.timeSpan2HMSM(U.currentTimeMillis() - startTime) + ']');
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/X.java,57,private static final long[] SPAN_DIVS = new long[] {1000L, 60L, 60L, 60L};
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,32,import org.apache.ignite.IgniteLogger;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,35,import org.apache.ignite.internal.processors.cache.GridCacheContext;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,543,U.error(log, "Failed to get and add: " + this, e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2519,if (client == null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2520,assert errs != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2531,return client;
modules/rest-http/src/main/java/org/apache/ignite/internal/processors/rest/protocols/http/jetty/GridJettyRestProtocol.java,123,InetAddress locHost;
modules/rest-http/src/main/java/org/apache/ignite/internal/processors/rest/protocols/http/jetty/GridJettyRestProtocol.java,126,locHost = U.resolveLocalHost(ctx.config().getLocalHost());
modules/rest-http/src/main/java/org/apache/ignite/internal/processors/rest/protocols/http/jetty/GridJettyRestProtocol.java,129,throw new IgniteCheckedException("Failed to resolve local host to bind address: " + ctx.config().getLocalHost(), e);
modules/rest-http/src/main/java/org/apache/ignite/internal/processors/rest/protocols/http/jetty/GridJettyRestProtocol.java,132,System.setProperty(IGNITE_JETTY_HOST, locHost.getHostAddress());
modules/core/src/main/java/org/apache/ignite/internal/NodeStoppingException.java,25,public class NodeStoppingException extends IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/X.java,436,public static boolean hasCause(@Nullable Throwable t, @Nullable Class<? extends Throwable>... cls) {
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/X.java,443,for (Class<? extends Throwable> c : cls) {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,105,private final AtomicInteger histSize = new AtomicInteger();
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,186,onHistoryAdded(assignment);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,298,assert evt.type() == EVT_DISCOVERY_CUSTOM_EVT  || aff.primaryPartitions(evt.eventNode().id()).isEmpty() : evt;
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,299,assert evt.type() == EVT_DISCOVERY_CUSTOM_EVT  || aff.backupPartitions(evt.eventNode().id()).isEmpty() : evt;
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,316,onHistoryAdded(assignmentCpy);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,534,private void onHistoryAdded(GridAffinityAssignment aff) {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,535,int fullSize = fullHistSize.incrementAndGet();
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,537,int size;
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,540,size = histSize.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,541,else
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,542,size = histSize.incrementAndGet();
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,544,int rmvCnt = size - MAX_HIST_SIZE;
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,546,if (rmvCnt <= 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,548,rmvCnt = MAX_HIST_SIZE;
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,551,if (rmvCnt > 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,562,histSize.decrementAndGet();
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,30,import java.util.concurrent.ConcurrentMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,583,private static class AffinityAssignmentKey {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,594,private AffinityAssignmentKey(String cacheName, @NotNull AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/IgniteCache.java,816,public IgniteFuture<?> rebalance();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,7819,for (Class<?> c = cls != null ? cls : obj.getClass(); cls != Object.class; cls = cls.getSuperclass()) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,7822,for (Method declaredMtd : c.getDeclaredMethods()) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,7878,for (Class<?> c = cls != null ? cls : obj.getClass(); cls != Object.class; cls = cls.getSuperclass()) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,7882,mtd = c.getDeclaredMethod(mtdName, paramTypes);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,2384,return resMap.isEmpty() ? null : resMap.values().iterator().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,2387,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,732,EntryProcessorResult<T> res = invokeFut.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,734,return res != null ? res : new CacheInvokeResult<T>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,776,EntryProcessorResult<T> res = resMap.isEmpty() ? null : resMap.values().iterator().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,789,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,620,EntryProcessorResult<T> res = invokeAsync(key, entryProcessor, args).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,622,return res != null ? res : new CacheInvokeResult<T>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,685,return resMap.isEmpty() ? null : resMap.values().iterator().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,688,return null;
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientNioTcpConnection.java,216,final long startConnTime = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientNioTcpConnection.java,220,final long connTimeoutRest = connectTimeout - (U.currentTimeMillis() - startConnTime);
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientNioTcpConnection.java,435,long now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientNioTcpConnection.java,474,lastMsgSndTime = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientNioTcpConnection.java,508,lastPingRcvTime = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientNioTcpConnection.java,519,lastMsgRcvTime = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1340,private boolean isLocalNodeCoordinator() {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpiMBean.java,29,public interface TcpDiscoverySpiMBean extends IgniteSpiManagementMBean {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpiMBean.java,44,public String getSpiState();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpiMBean.java,140,public long getNodesJoined();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpiMBean.java,148,public long getNodesLeft();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpiMBean.java,156,public long getNodesFailed();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,217,return; // Context will be cleaned at topology change.
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignment.java,148,public List<ClusterNode> get(int part) {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignment.java,161,public HashSet<UUID> getIds(int part) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,425,GridDhtLocalPartition locPart = createPartition(p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,433,createPartition(p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,636,private GridDhtLocalPartition createPartition(int p) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,657,boolean updateSeq) {
modules/core/src/main/java/org/apache/ignite/cache/QueryEntity.java,112,public Collection<QueryIndex> getIndexes() {
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/X.java,472,if (t.getSuppressed() != null) {
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/X.java,473,for (Throwable th : t.getSuppressed()) {
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/X.java,475,return true;
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/X.java,478,return true;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/BlockingSslHandler.java,359,readFromNet();
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,167,worker.finishTask(null, err);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2073,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1471,return (CacheException)e.getCause();
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/services/PlatformServices.java,388,return ((GridServiceProxy)proxy).invokeMethod(mtd, args);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,137,public Object invokeMethod(final Method mtd, final Object[] args) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,7053,while (true) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,7055,throw (Error)t;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,7057,if (t instanceof GridClosureException) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,7058,t = ((GridClosureException)t).unwrap();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,7060,continue;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,7064,return (IgniteCheckedException)t;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,7067,return new IgniteCheckedException(t);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,7069,assert t.getCause() != null; // ...and it is IgniteException.
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,7071,t = t.getCause();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,642,UUID id = cctx.kernalContext().continuous().startRoutine(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,643,hnd,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,644,internal && loc,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,645,bufSize,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,646,timeInterval,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,647,autoUnsubscribe,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,648,pred).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,636,StartFuture fut = new StartFuture(ctx, routineId);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,638,startFuts.put(routineId, fut);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,645,ctx.discovery().sendCustomEvent(new StartRoutineDiscoveryMessage(routineId, reqData,
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,646,reqData.handler().keepBinary()));
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,648,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,649,startFuts.remove(routineId);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,650,locInfos.remove(routineId);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,652,unregisterHandler(routineId, hnd, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,654,fut.onDone(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,656,return fut;
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,660,fut.onLocalRegistered();
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,662,return fut;
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,674,StopFuture fut = stopFuts.get(routineId);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,677,if (fut == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,678,StopFuture old = stopFuts.putIfAbsent(routineId, fut = new StopFuture(ctx));
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,681,fut = old;
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,682,else
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,683,doStop = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,686,if (doStop) {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,688,LocalRoutineInfo routine = locInfos.remove(routineId);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,691,if (routine == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,692,stopFuts.remove(routineId);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,694,fut.onDone();
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,696,return fut;
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,700,unregisterHandler(routineId, routine.hnd, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,702,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,703,ctx.discovery().sendCustomEvent(new StopRoutineDiscoveryMessage(routineId));
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,705,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,706,fut.onDone(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,710,fut.onDone();
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,713,return fut;
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,1741,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,1786,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalStateAdapter.java,36,cacheCtx.cache().metrics0().onTxCommit((U.currentTimeMillis() - tx.startTime()) * 1000);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalStateAdapter.java,38,cacheCtx.cache().metrics0().onTxRollback((U.currentTimeMillis() - tx.startTime()) * 1000);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,263,if (prevAssignment != null && discoEvt != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,264,boolean affNode = CU.affinityNode(discoEvt.eventNode(), nodeFilter);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,268,else
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,270,discoEvt, topVer, backups));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,688,GridCacheEntryEx nearCached = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,693,nearCached = cacheCtx.dht().near().peekEx(txEntry.key());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,822,if (nearCached != null && updRes.success()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,823,nearCached.innerSet(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,824,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,825,eventNodeId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,826,nodeId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,827,val,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,828,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,829,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,830,txEntry.ttl(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,831,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,832,metrics,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,833,txEntry.keepBinary(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,834,topVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,835,CU.empty0(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,836,DR_NONE,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,837,txEntry.conflictExpireTime(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,838,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,839,CU.subjectId(this, cctx),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,840,resolveTaskName(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,841,dhtVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,842,null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,866,if (nearCached != null && updRes.success()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,867,nearCached.innerRemove(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,868,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,869,eventNodeId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,870,nodeId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,871,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,872,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,873,metrics,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,874,txEntry.keepBinary(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,875,topVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,876,CU.empty0(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,877,DR_NONE,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,878,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,879,CU.subjectId(this, cctx),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,880,resolveTaskName(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,881,dhtVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,882,null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,889,nearCached.innerReload();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,544,for (Map.Entry<Integer, CacheEntryInfoCollection> e : supply.infos().entrySet()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,545,int p = e.getKey();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,548,GridDhtLocalPartition part = top.localPartition(p, topVer, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,550,assert part != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,554,if (part.state() == MOVING) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,555,boolean reserved = part.reserve();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,560,part.lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,562,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,564,for (GridCacheEntryInfo entry : e.getValue().infos()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,574,if (!preloadEntry(node, p, entry, topVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,576,log.debug("Got entries for invalid partition during " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,579,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,585,if (last) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,586,top.own(part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,591,log.debug("Finished rebalancing partition: " + part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,594,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,595,part.unlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,596,part.release();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,604,log.debug("Skipping rebalancing partition (state is not MOVING): " + part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,607,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,611,log.debug("Skipping rebalancing partition (it does not belong on current node): " + p);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1322,U.error(log, "Failed to marshal (request will not be sent).", e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1618,entry.initialValue(e.getValue(),
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1619,ver,
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1620,ttl,
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1621,expiryTime,
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1622,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1623,topVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,42,import org.apache.ignite.Ignite;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/dotnet/PlatformDotNetCacheStore.java,334,ptr = platformCtx.gateway().cacheStoreCreate(mem.pointer());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/GridLocalLockFuture.java,43,import org.apache.ignite.transactions.TransactionDeadlockException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/GridLocalLockFuture.java,260,for (GridLocalCacheEntry e : entries) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/CacheDistributedGetFutureAdapter.java,158,protected final ClusterNode affinityNode(List<ClusterNode> affNodes) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/CacheDistributedGetFutureAdapter.java,159,if (!canRemap) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/CacheDistributedGetFutureAdapter.java,160,for (ClusterNode node : affNodes) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/CacheDistributedGetFutureAdapter.java,162,return node;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/CacheDistributedGetFutureAdapter.java,165,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/CacheDistributedGetFutureAdapter.java,167,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/CacheDistributedGetFutureAdapter.java,168,return affNodes.get(0);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedGetFuture.java,395,ClusterNode node = affinityNode(affNodes);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedSingleGetFuture.java,340,ClusterNode affNode = affinityNode(affNodes);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedSingleGetFuture.java,671,if (!canRemap) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedSingleGetFuture.java,672,for (ClusterNode node : affNodes) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedSingleGetFuture.java,674,return node;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedSingleGetFuture.java,677,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedSingleGetFuture.java,679,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedSingleGetFuture.java,680,return affNodes.get(0);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,485,ClusterNode affNode = affinityNode(affNodes);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,492,assert obj != null;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,493,assert writer != null;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,494,assert mode != BinaryWriteMode.OPTIMIZED : "OptimizedMarshaller should not be used here: " + cls.getName();
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,496,writer.typeId(typeId);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,498,switch (mode) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,499,case P_BYTE:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,500,case BYTE:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,501,writer.writeByteFieldPrimitive((byte) obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,503,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,505,case P_SHORT:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,506,case SHORT:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,507,writer.writeShortFieldPrimitive((short)obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,509,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,511,case P_INT:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,512,case INT:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,513,writer.writeIntFieldPrimitive((int) obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,515,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,517,case P_LONG:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,518,case LONG:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,519,writer.writeLongFieldPrimitive((long) obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,521,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,523,case P_FLOAT:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,524,case FLOAT:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,525,writer.writeFloatFieldPrimitive((float) obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,527,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,529,case P_DOUBLE:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,530,case DOUBLE:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,531,writer.writeDoubleFieldPrimitive((double) obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,533,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,535,case P_CHAR:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,536,case CHAR:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,537,writer.writeCharFieldPrimitive((char) obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,539,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,541,case P_BOOLEAN:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,542,case BOOLEAN:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,543,writer.writeBooleanFieldPrimitive((boolean) obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,545,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,547,case DECIMAL:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,548,writer.doWriteDecimal((BigDecimal)obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,550,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,552,case STRING:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,553,writer.doWriteString((String)obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,555,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,557,case UUID:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,558,writer.doWriteUuid((UUID)obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,560,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,562,case DATE:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,563,writer.doWriteDate((Date)obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,565,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,567,case TIMESTAMP:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,568,writer.doWriteTimestamp((Timestamp)obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,570,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,572,case BYTE_ARR:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,573,writer.doWriteByteArray((byte[])obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,575,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,577,case SHORT_ARR:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,578,writer.doWriteShortArray((short[]) obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,580,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,582,case INT_ARR:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,583,writer.doWriteIntArray((int[]) obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,585,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,587,case LONG_ARR:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,588,writer.doWriteLongArray((long[]) obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,590,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,592,case FLOAT_ARR:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,593,writer.doWriteFloatArray((float[]) obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,595,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,597,case DOUBLE_ARR:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,598,writer.doWriteDoubleArray((double[]) obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,600,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,602,case CHAR_ARR:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,603,writer.doWriteCharArray((char[]) obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,605,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,607,case BOOLEAN_ARR:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,608,writer.doWriteBooleanArray((boolean[]) obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,610,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,612,case DECIMAL_ARR:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,613,writer.doWriteDecimalArray((BigDecimal[]) obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,615,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,617,case STRING_ARR:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,618,writer.doWriteStringArray((String[]) obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,620,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,622,case UUID_ARR:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,623,writer.doWriteUuidArray((UUID[]) obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,625,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,627,case DATE_ARR:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,628,writer.doWriteDateArray((Date[]) obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,630,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,632,case TIMESTAMP_ARR:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,633,writer.doWriteTimestampArray((Timestamp[]) obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,635,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,637,case OBJECT_ARR:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,638,writer.doWriteObjectArray((Object[])obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,640,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,642,case COL:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,643,writer.doWriteCollection((Collection<?>)obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,645,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,647,case MAP:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,648,writer.doWriteMap((Map<?, ?>)obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,650,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,652,case ENUM:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,653,writer.doWriteEnum((Enum<?>)obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,655,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,657,case BINARY_ENUM:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,658,writer.doWriteBinaryEnum((BinaryEnumObjectImpl)obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,660,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,662,case ENUM_ARR:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,663,writer.doWriteEnumArray((Object[])obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,665,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,667,case CLASS:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,668,writer.doWriteClass((Class)obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,670,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,672,case PROXY:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,673,writer.doWriteProxy((Proxy)obj, intfs);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,675,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,677,case BINARY_OBJ:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,678,writer.doWriteBinaryObject((BinaryObjectImpl)obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,680,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,682,case BINARY:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,683,if (preWrite(writer, obj)) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,684,try {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,686,serializer.writeBinary(obj, writer);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,687,else
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,688,((Binarylizable)obj).writeBinary(writer);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,694,int schemaId = writer.schemaId();
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,696,if (schemaReg.schema(schemaId) == null) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,698,BinaryMetadataCollector collector =
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,699,new BinaryMetadataCollector(typeId, typeName, mapper);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,702,serializer.writeBinary(obj, collector);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,703,else
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,704,((Binarylizable)obj).writeBinary(collector);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,706,BinarySchema newSchema = collector.schema();
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,708,BinaryMetadata meta = new BinaryMetadata(typeId, typeName, collector.meta(),
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,711,ctx.updateMetadata(typeId, meta);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,713,schemaReg.addSchema(newSchema.schemaId(), newSchema);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,717,finally {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,718,writer.popSchema();
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,722,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,724,case OBJECT:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,725,if (preWrite(writer, obj)) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,726,try {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,728,info.write(obj, writer);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,730,writer.schemaId(stableSchema.schemaId());
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,734,finally {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,735,writer.popSchema();
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,739,break;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,741,default:
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,742,assert false : "Invalid mode: " + mode;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryFieldAccessor.java,143,public abstract void write(Object obj, BinaryWriterExImpl writer) throws BinaryObjectException;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryFieldAccessor.java,461,writer.writeByteField((Byte) val);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryFieldAccessor.java,466,writer.writeShortField((Short) val);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryFieldAccessor.java,471,writer.writeIntField((Integer) val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,461,case 45: {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,465,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1278,int cnt = 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePreloader.java,26,import org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtLocalPartition;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePreloader.java,175,public void evictPartitionAsync(GridDhtLocalPartition part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePreloaderAdapter.java,28,import org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtLocalPartition;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1260,part.rent(false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1285,part.rent(false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionsReservation.java,192,part.tryEvictAsync(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionsReservation.java,230,tryEvict(part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,22,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,23,import java.util.HashSet;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,25,import org.apache.ignite.internal.GridDirectCollection;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,32,import org.apache.ignite.plugin.extensions.communication.MessageCollectionItemType;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,45,private long updateSeq;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,49,private Collection<Integer> parts;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,74,this.updateSeq = updateSeq;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,84,updateSeq = cp.updateSeq;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,85,topic = cp.topic;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,86,timeout = cp.timeout;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,87,workerId = cp.workerId;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,88,topVer = cp.topVer;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,91,this.parts = new HashSet<>(parts);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,108,parts.add(p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,115,Collection<Integer> partitions() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,122,void updateSequence(long updateSeq) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,123,this.updateSeq = updateSeq;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,129,long updateSequence() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,130,return updateSeq;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,179,return topVer;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,326,return 44;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,22,import java.util.Collections;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,292,log.debug("Adding partition assignments: " + assigns);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,303,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,304,fut.listen(new CI1<IgniteInternalFuture<Boolean>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,306,oldFut.onDone(fut.result());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,379,for (Map.Entry<ClusterNode, GridDhtPartitionDemandMessage> e : assigns.entrySet()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,457,private String partitionsList(Collection<Integer> c) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,458,List<Integer> s = new ArrayList<>(c);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,460,Collections.sort(s);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,462,StringBuilder sb = new StringBuilder();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,464,int start = -1;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,466,int prev = -1;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,468,Iterator<Integer> sit = s.iterator();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,470,while (sit.hasNext()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,471,int p = sit.next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,473,if (start == -1) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,474,start = p;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,475,prev = p;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,478,if (prev < p - 1) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,479,sb.append(start);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,482,sb.append("-").append(prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,484,sb.append(", ");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,486,start = p;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,489,if (!sit.hasNext()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,490,sb.append(start);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,493,sb.append("-").append(p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,496,prev = p;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,499,return sb.toString();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,508,int idx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,509,final UUID id,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,521,if (!fut.isActual(supply.updateSequence())) // Current future have another update sequence.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,522,return; // Supple message based on another future.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,535,fut.cancel(id);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,588,fut.partitionDone(id, p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,601,fut.partitionDone(id, p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,608,fut.partitionDone(id, p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,618,fut.partitionMissed(id, miss);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,622,fut.partitionDone(id, miss);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,629,d.topic(rebalanceTopics.get(idx));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,658,ClusterNode pick,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,670,log.debug("Rebalancing key [key=" + entry.key() + ", part=" + p + ", node=" + pick.id() + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,766,private final Map<UUID, T2<Long, Collection<Integer>>> remaining = new HashMap<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,779,private final long updateSeq;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,792,long updateSeq) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,793,assert assigns != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,800,this.updateSeq = updateSeq;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,826,private boolean isActual(long updateSeq) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,827,return this.updateSeq == updateSeq;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,926,missed.put(nodeId, new HashSet<Integer>());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,976,T2<Long, Collection<Integer>> t = remaining.get(nodeId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,981,Collection<Integer> parts = t.get2();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,1037,log.debug("Completed rebalance future: " + this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,39,import org.apache.ignite.internal.util.lang.GridCloseableIterator;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,64,private final boolean depEnabled;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,123,final Iterator it = sc.entryIt;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,125,if (it != null && it instanceof GridCloseableIterator && !((GridCloseableIterator)it).isClosed()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,127,((GridCloseableIterator)it).close();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,134,final GridDhtLocalPartition loc = sc.loc;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,136,if (loc != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,137,assert loc.reservations() > 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,139,loc.release();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,182,public void handleDemandMessage(int idx, UUID id, GridDhtPartitionDemandMessage d) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,184,assert id != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,189,T3<UUID, Integer, AffinityTopologyVersion> scId = new T3<>(id, idx, demTop);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,191,if (d.updateSequence() == -1) { //Demand node requested context cleanup.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,193,clearContext(scMap.remove(scId), log);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,199,if (cutTop.compareTo(demTop) > 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,201,log.debug("Demand request cancelled [current=" + cutTop + ", demanded=" + demTop +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,204,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,208,log.debug("Demand request accepted [current=" + cutTop + ", demanded=" + demTop +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,223,sctx = scMap.remove(scId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,225,assert sctx == null || d.updateSequence() == sctx.updateSeq;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,232,assert !(sctx != null && d.partitions() != null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,234,long bCnt = 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,236,SupplyContextPhase phase = SupplyContextPhase.NEW;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,238,boolean newReq = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,243,phase = sctx.phase;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,255,Iterator<Integer> partIt = sctx != null ? sctx.partIt : d.partitions().iterator();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,257,while ((sctx != null && newReq) || partIt.hasNext()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,258,int part = sctx != null && newReq ? sctx.part : partIt.next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,260,newReq = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,262,GridDhtLocalPartition loc;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,264,if (sctx != null && sctx.loc != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,265,loc = sctx.loc;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,267,assert loc.reservations() > 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,269,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,270,loc = top.localPartition(part, d.topologyVersion(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,272,if (loc == null || loc.state() != OWNING || !loc.reserve()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,275,s.missed(part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,278,log.debug("Requested partition is not owned by local node [part=" + part +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,281,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,307,s.missed(part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,313,partMissing = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,523,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,527,if (++bCnt >= maxBatchesCnt) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,528,saveSupplyContext(scId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,529,phase,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,530,partIt,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,531,part,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,534,loc,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,535,d.topologyVersion(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,536,d.updateSequence());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,538,loc = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,540,reply(node, d, s, scId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,542,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,544,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,546,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,566,phase = SupplyContextPhase.NEW;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,568,sctx = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,570,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,572,loc.release();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,581,reply(node, d, s, scId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,590,U.error(log, "Failed to send partition supply message to node: " + id, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,606,private boolean reply(ClusterNode n,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,614,log.debug("Replying to partition demand [node=" + n.id() + ", demand=" + d + ", supply=" + s + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,626,log.debug("Failed to send partition supply message because node left grid: " + n.id());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,629,clearContext(scMap.remove(scId), log);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,645,T3<UUID, Integer, AffinityTopologyVersion> t,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,646,SupplyContextPhase phase,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,647,Iterator<Integer> partIt,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,648,int part,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,650,GridDhtLocalPartition loc,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,651,AffinityTopologyVersion topVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,652,long updateSeq) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,655,assert scMap.get(t) == null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,657,scMap.put(t,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,658,new SupplyContext(phase,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,659,partIt,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,660,entryIt,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,662,part,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,663,loc,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,664,updateSeq));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,666,else if (loc != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,667,assert loc.reservations() > 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,669,loc.release();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,677,private enum SupplyContextPhase {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,679,NEW,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,693,private final SupplyContextPhase phase;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,697,private final Iterator<Integer> partIt;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,701,private final Iterator<?> entryIt;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,708,private final int part;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,711,private final GridDhtLocalPartition loc;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,714,private final long updateSeq;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,725,public SupplyContext(SupplyContextPhase phase,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,726,Iterator<Integer> partIt,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,727,Iterator<?> entryIt,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,729,int part,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,730,GridDhtLocalPartition loc,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,731,long updateSeq) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,732,this.phase = phase;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,733,this.partIt = partIt;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,734,this.entryIt = entryIt;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,736,this.part = part;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,737,this.loc = loc;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,738,this.updateSeq = updateSeq;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,1038,public void dumpDebugInfo() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,1039,synchronized (scMap) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,1040,if (!scMap.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,1041,U.warn(log, "Rebalancing supplier reserved following partitions:");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,1043,for (SupplyContext sc : scMap.values()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,1045,U.warn(log, ">>> " + sc.loc);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyMessage.java,55,private long updateSeq;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyMessage.java,88,this.updateSeq = updateSeq;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyMessage.java,115,long updateSequence() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyMessage.java,116,return updateSeq;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,27,import java.util.concurrent.atomic.AtomicInteger;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,60,import org.apache.ignite.internal.util.typedef.internal.GPC;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,61,import org.apache.ignite.internal.util.typedef.internal.U;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,117,private final AtomicInteger partsEvictOwning = new AtomicInteger();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,285,assigns.cancelled(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,287,return assigns;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,337,return assigns;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,350,private Collection<ClusterNode> pickedOwners(int p, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,758,if (partsEvictOwning.get() == 0 && partsEvictOwning.compareAndSet(0, 1)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,761,boolean locked = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,765,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,767,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,773,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,776,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,777,boolean res = partsEvictOwning.compareAndSet(1, 0);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,779,assert res;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,781,locked = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,786,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,801,supplier.dumpDebugInfo();
modules/core/src/main/java/org/apache/ignite/configuration/IgniteReflectionFactory.java,253,Method mtd = obj.getClass().getMethod(sb.toString(), paramCls);
modules/core/src/main/java/org/apache/ignite/configuration/IgniteReflectionFactory.java,271,Method mtd = obj.getClass().getMethod(sb.toString(), itf);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,552,private QueryResult<K, V> executeQuery(GridCacheQueryAdapter<?> qry,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,626,iter = scanIterator(qry, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1474,IgniteSpiCloseableIterator<IgniteBiTuple<K, V>> iter;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1478,executeQuery(qry, qryInfo.arguments(), loc, qry.subjectId(), taskName,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1507,IgniteBiTuple<K, V> row = iter.next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1510,if (row == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1520,if (!cctx.isReplicated() && qry.type() == SCAN && qry.partition() == null &&
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1521,cctx.config().getCacheMode() != LOCAL && !incBackups &&
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1524,log.debug("Ignoring backup element [row=" + row +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1528,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1531,V val = row.getValue();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1533,if (log.isDebugEnabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1543,if (val == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1547,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1550,if (statsEnabled) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1551,CacheMetricsImpl metrics = cctx.cache().metrics0();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1553,metrics.onRead(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1555,metrics.addGetTimeNanos(System.nanoTime() - start);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1562,switch (type) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1563,case SQL:
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1564,cctx.gridEvents().record(new CacheQueryReadEvent<>(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1565,cctx.localNode(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1567,EVT_CACHE_QUERY_OBJECT_READ,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1568,CacheQueryType.SQL.name(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1570,qry.queryClassName(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1571,qry.clause(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1572,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1573,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1574,qryInfo.arguments(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1575,qry.subjectId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1576,taskName,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1577,key0,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1578,val0,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1579,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1580,null));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1582,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1584,case TEXT:
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1585,cctx.gridEvents().record(new CacheQueryReadEvent<>(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1586,cctx.localNode(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1588,EVT_CACHE_QUERY_OBJECT_READ,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1589,CacheQueryType.FULL_TEXT.name(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1591,qry.queryClassName(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1592,qry.clause(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1593,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1594,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1595,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1596,qry.subjectId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1597,taskName,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1598,key0,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1599,val0,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1600,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1601,null));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1603,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1605,case SCAN:
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1606,cctx.gridEvents().record(new CacheQueryReadEvent<>(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1607,cctx.localNode(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1609,EVT_CACHE_QUERY_OBJECT_READ,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1610,CacheQueryType.SCAN.name(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1612,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1613,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1614,qry.scanFilter(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1615,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1616,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1617,qry.subjectId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1618,taskName,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1619,key0,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1620,val0,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1621,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1622,null));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1624,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1881,fut.onDone(executeQuery(qryInfo.query(), qryInfo.arguments(), false,
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,906,Collection<GridCacheAdapter<?, ?>> caches = ctx.cache().internalCaches();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,909,return Collections.emptyMap();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,911,Map<Integer, CacheMetrics> metrics = null;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,913,for (GridCacheAdapter<?, ?> cache : caches) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,915,cache.context().started() &&
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,916,cache.context().affinity().affinityTopologyVersion().topologyVersion() > 0) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,918,metrics = U.newHashMap(caches.size());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,920,metrics.put(cache.context().cacheId(), cache.localMetrics());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,924,return metrics == null ? Collections.<Integer, CacheMetrics>emptyMap() : metrics;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,491,Thread.sleep(2000);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,537,return null;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,542,Thread.sleep(2000);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1005,U.sleep(2000);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1039,U.sleep(2000);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoveryImpl.java,290,U.sleep(2000);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1558,U.sleep(2000);
modules/core/src/main/java/org/apache/ignite/internal/GridKernalContextImpl.java,556,return locNode.id();
modules/core/src/main/java/org/apache/ignite/internal/GridKernalContextImpl.java,559,locNode = discoMgr.localNode();
modules/core/src/main/java/org/apache/ignite/internal/GridKernalContextImpl.java,561,return locNode != null ? locNode.id() : config().getNodeId();
modules/core/src/main/java/org/apache/ignite/internal/GridKernalContextImpl.java,830,return config().isDaemon() || "true".equalsIgnoreCase(System.getProperty(IGNITE_DAEMON));
modules/core/src/main/java/org/apache/ignite/internal/GridKernalContextImpl.java,973,locNode = discoMgr != null ? discoMgr.localNode() : null;
modules/core/src/main/java/org/apache/ignite/internal/GridKernalContextImpl.java,975,return locNode != null ? (locNode.isClient() && disconnected) : false;
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,2134,return cfg.isDaemon() || "true".equalsIgnoreCase(System.getProperty(IGNITE_DAEMON));
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,520,catch (IgniteException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,1018,assert !leftNode.isClient() : leftNode;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,1446,List<ClusterNode> owners = top.owners(p);
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcResultSet.java,1520,throw new SQLException("Value is an not instance of " + cls.getName());
modules/core/src/main/java/org/apache/ignite/stream/StreamTransformer.java,55,return new StreamTransformer<K, V>() {
modules/core/src/main/java/org/apache/ignite/stream/StreamTransformer.java,57,return ep.process(entry, args);
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,83,boolean isLog4jUsed = U.gridClassLoader().getResource("org/apache/log4j/Appender.class") != null;
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,85,try {
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,87,U.addLog4jNoOpLogger();
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,88,else
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,91,catch (IgniteCheckedException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/direct/stream/v2/DirectByteBufferStreamImplV2.java,1315,private boolean writeArray(Object arr, long off, int len, int bytes) {
modules/core/src/main/java/org/apache/ignite/internal/direct/stream/v2/DirectByteBufferStreamImplV2.java,1361,private boolean writeArrayLE(Object arr, long off, int len, int typeSize, int shiftCnt) {
modules/core/src/main/java/org/apache/ignite/internal/direct/stream/v2/DirectByteBufferStreamImplV2.java,1435,private <T> T readArray(ArrayCreator<T> creator, int lenShift, long off) {
modules/core/src/main/java/org/apache/ignite/internal/direct/stream/v2/DirectByteBufferStreamImplV2.java,1499,private <T> T readArrayLE(ArrayCreator<T> creator, int typeSize, int lenShift, long off) {
modules/core/src/main/java/org/apache/ignite/internal/direct/stream/v2/DirectByteBufferStreamImplV2.java,1525,int toRead = (tmpArrBytes - tmpArrOff) >> lenShift;
modules/core/src/main/java/org/apache/ignite/internal/direct/stream/v2/DirectByteBufferStreamImplV2.java,1526,int remaining = buf.remaining() >> lenShift;
modules/core/src/main/java/org/apache/ignite/internal/direct/stream/v2/DirectByteBufferStreamImplV2.java,1528,lastFinished = toRead <= buf.remaining();
modules/core/src/main/java/org/apache/ignite/internal/direct/stream/v2/DirectByteBufferStreamImplV2.java,1530,if (lastFinished) {
modules/core/src/main/java/org/apache/ignite/internal/direct/stream/v2/DirectByteBufferStreamImplV2.java,1531,readArrayLE(typeSize, off, toRead);
modules/core/src/main/java/org/apache/ignite/internal/direct/stream/v2/DirectByteBufferStreamImplV2.java,1533,T arr = (T)tmpArr;
modules/core/src/main/java/org/apache/ignite/internal/direct/stream/v2/DirectByteBufferStreamImplV2.java,1535,tmpArr = null;
modules/core/src/main/java/org/apache/ignite/internal/direct/stream/v2/DirectByteBufferStreamImplV2.java,1536,tmpArrBytes = 0;
modules/core/src/main/java/org/apache/ignite/internal/direct/stream/v2/DirectByteBufferStreamImplV2.java,1537,tmpArrOff = 0;
modules/core/src/main/java/org/apache/ignite/internal/direct/stream/v2/DirectByteBufferStreamImplV2.java,1539,return arr;
modules/core/src/main/java/org/apache/ignite/internal/direct/stream/v2/DirectByteBufferStreamImplV2.java,1541,else {
modules/core/src/main/java/org/apache/ignite/internal/direct/stream/v2/DirectByteBufferStreamImplV2.java,1542,for (int i = 0; i < remaining; i++) {
modules/core/src/main/java/org/apache/ignite/internal/direct/stream/v2/DirectByteBufferStreamImplV2.java,1543,int pos = buf.position();
modules/core/src/main/java/org/apache/ignite/internal/direct/stream/v2/DirectByteBufferStreamImplV2.java,1545,for (int j = 0; j < typeSize; j++) {
modules/core/src/main/java/org/apache/ignite/internal/direct/stream/v2/DirectByteBufferStreamImplV2.java,1546,byte b = GridUnsafe.getByte(heapArr, baseOff + pos + (typeSize - j - 1));
modules/core/src/main/java/org/apache/ignite/internal/direct/stream/v2/DirectByteBufferStreamImplV2.java,1548,GridUnsafe.putByteField(tmpArr, off + tmpArrOff + j, b);
modules/core/src/main/java/org/apache/ignite/internal/direct/stream/v2/DirectByteBufferStreamImplV2.java,1551,buf.position(pos + typeSize);
modules/core/src/main/java/org/apache/ignite/internal/direct/stream/v2/DirectByteBufferStreamImplV2.java,1555,tmpArrOff += buf.remaining();
modules/core/src/main/java/org/apache/ignite/internal/direct/stream/v2/DirectByteBufferStreamImplV2.java,1557,return null;
modules/core/src/main/java/org/apache/ignite/internal/direct/stream/v2/DirectByteBufferStreamImplV2.java,1566,private void readArrayLE(int typeSize, long off, int toRead) {
modules/core/src/main/java/org/apache/ignite/internal/direct/stream/v2/DirectByteBufferStreamImplV2.java,1567,for (int i = 0; i < toRead; i++) {
modules/core/src/main/java/org/apache/ignite/internal/direct/stream/v2/DirectByteBufferStreamImplV2.java,1568,int pos = buf.position();
modules/core/src/main/java/org/apache/ignite/internal/direct/stream/v2/DirectByteBufferStreamImplV2.java,1570,for (int j = 0; j < typeSize; j++) {
modules/core/src/main/java/org/apache/ignite/internal/direct/stream/v2/DirectByteBufferStreamImplV2.java,1571,byte b = GridUnsafe.getByte(heapArr, baseOff + pos + (typeSize - j - 1));
modules/core/src/main/java/org/apache/ignite/internal/direct/stream/v2/DirectByteBufferStreamImplV2.java,1573,GridUnsafe.putByteField(tmpArr, off + tmpArrOff++, b);
modules/core/src/main/java/org/apache/ignite/internal/direct/stream/v2/DirectByteBufferStreamImplV2.java,1576,buf.position(pos + typeSize);
modules/core/src/main/java/org/apache/ignite/internal/direct/stream/v2/DirectByteBufferStreamImplV2.java,1789,private interface ArrayCreator<T> {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,140,private IgniteInternalCache<Object, Object> cache;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,623,GridServiceAssignments assigns = (GridServiceAssignments)cache.getForcePrimary(
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,781,ServiceConfiguration cfg = dep.configuration();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheEvictionConfiguration.java,21,import org.apache.ignite.cache.eviction.EvictionPolicy;
modules/core/src/main/java/org/apache/ignite/internal/visor/util/VisorTaskUtils.java,52,import org.apache.ignite.cache.eviction.EvictionPolicy;
modules/core/src/main/java/org/apache/ignite/internal/visor/util/VisorTaskUtils.java,53,import org.apache.ignite.cache.eviction.fifo.FifoEvictionPolicyMBean;
modules/core/src/main/java/org/apache/ignite/internal/visor/util/VisorTaskUtils.java,54,import org.apache.ignite.cache.eviction.lru.LruEvictionPolicyMBean;
modules/core/src/main/java/org/apache/ignite/internal/visor/util/VisorTaskUtils.java,674,public static Integer evictionPolicyMaxSize(@Nullable EvictionPolicy plc) {
modules/core/src/main/java/org/apache/ignite/internal/visor/util/VisorTaskUtils.java,676,return ((LruEvictionPolicyMBean)plc).getMaxSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/util/VisorTaskUtils.java,682,return ((FifoEvictionPolicyMBean)plc).getMaxSize();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,915,if (writeThrough && keys.size() > 1) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,916,return updateWithBatch(op,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,917,keys,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,918,vals,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,919,invokeArgs,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,920,expiryPlc,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,921,ver,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,922,filters,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,923,keepBinary,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,924,subjId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,925,taskName);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,928,Iterator<?> valsIter = vals != null ? vals.iterator() : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,934,boolean intercept = ctx.config().getInterceptor() != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,936,for (K key : keys) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,938,throw new NullPointerException("Null key.");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,940,Object val = valsIter != null ? valsIter.next() : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,943,throw new NullPointerException("Null value.");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,945,KeyCacheObject cacheKey = ctx.toCacheKeyObject(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,948,val = ctx.toCacheObject(val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,950,while (true) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,951,GridCacheEntryEx entry = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,953,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,954,entry = entryEx(cacheKey);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,956,GridTuple3<Boolean, Object, EntryProcessorResult<Object>> t = entry.innerUpdateLocal(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,957,ver,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,958,val == null ? DELETE : op,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,959,val,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,960,invokeArgs,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,961,writeThrough,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,962,readThrough,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,963,retval,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,964,keepBinary,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,965,expiryPlc,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,966,true,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,967,true,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,968,filters,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,969,intercept,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,970,subjId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,971,taskName);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,973,if (op == TRANSFORM) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,974,if (t.get3() != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,975,Map<K, EntryProcessorResult> computedMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,977,if (res == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,978,computedMap = U.newHashMap(keys.size());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,980,res = new IgniteBiTuple<>(true, computedMap);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,982,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,983,computedMap = (Map<K, EntryProcessorResult>)res.get2();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,985,computedMap.put(key, t.get3());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,989,res = new T2(t.get1(), t.get2());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,991,break; // While.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,993,catch (GridCacheEntryRemovedException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,995,log.debug("Got removed entry while updating (will retry): " + key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,997,entry = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,999,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1001,err = partialUpdateException();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1003,err.add(F.asList(key), e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1005,U.error(log, "Failed to update key : " + key, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1007,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1009,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1011,ctx.evicts().touch(entry, ctx.affinity().affinityTopologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignment.java,189,public Set<ClusterNode> primaryPartitionNodes() {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignment.java,190,Set<ClusterNode> primaryPartsNodes0 = primaryPartsNodes;
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignment.java,192,if (primaryPartsNodes0 == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignment.java,193,int parts = assignment.size();
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignment.java,195,primaryPartsNodes0 = new HashSet<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignment.java,197,for (int p = 0; p < parts; p++) {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignment.java,201,primaryPartsNodes0.add(nodes.get(0));
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignment.java,204,primaryPartsNodes = primaryPartsNodes0;
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignment.java,207,return primaryPartsNodes0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,367,return;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,251,private final Collection<Connection> conns = Collections.synchronizedCollection(new ArrayList<Connection>());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,298,conns.add(c);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,519,conns.remove(conn);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,675,lock.writeLock().lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,686,throw new GridDhtInvalidPartitionException(p, "Adding entry to evicted partition " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,691,if (loc == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,693,throw new GridDhtInvalidPartitionException(p, "Creating partition which does not belong to " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,700,this.updateSeq.incrementAndGet();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,703,log.debug("Created local partition: " + loc);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,707,lock.writeLock().unlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1230,lock.writeLock().unlock();
modules/core/src/main/java/org/apache/ignite/internal/ClusterMetricsSnapshot.java,350,curWaitingJobs += m.getCurrentJobWaitTime();
modules/core/src/main/java/org/apache/ignite/internal/ClusterMetricsSnapshot.java,360,avgJobWaitTime += m.getCurrentJobWaitTime();
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,693,if (obj.getClass() != BinaryMetadata.class) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedGetFuture.java,236,AffinityTopologyVersion topVer
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedGetFuture.java,331,MiniFuture fut = new MiniFuture(n, mappedKeys, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedGetFuture.java,620,MiniFuture(ClusterNode node, LinkedHashMap<KeyCacheObject, Boolean> keys, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,367,MiniFuture fut = new MiniFuture(n, mappedKeys, saved, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,857,AffinityTopologyVersion topVer
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,858,) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,1015,else
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,195,if (!".svn".equals(fileName)) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,196,InetSocketAddress addr = null;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,198,StringTokenizer st = new StringTokenizer(fileName, DELIM);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,200,if (st.countTokens() == 2) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,201,String addrStr = st.nextToken();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,202,String portStr = st.nextToken();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,204,try {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,205,int port = Integer.parseInt(portStr);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,207,addr = new InetSocketAddress(denormalizeAddress(addrStr), port);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,209,catch (IllegalArgumentException e) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,210,U.error(log, "Failed to parse file entry: " + fileName, e);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,215,addrs.add(addr);
modules/yarn/src/main/java/org/apache/ignite/yarn/ApplicationMaster.java,120,Map<String, String> env = new HashMap<>(System.getenv());
modules/core/src/main/java/org/apache/ignite/internal/visor/node/VisorNodeDataCollectorTaskArg.java,65,boolean sysCaches
modules/core/src/main/java/org/apache/ignite/internal/GridJobExecuteRequest.java,199,this.top = top;
modules/core/src/main/java/org/apache/ignite/internal/GridJobExecuteRequest.java,617,forceLocDep = reader.readBoolean("forceLocDep");
modules/core/src/main/java/org/apache/ignite/internal/GridJobExecuteRequest.java,745,userVer = reader.readString("userVer");
modules/core/src/main/java/org/apache/ignite/internal/IgniteComputeImpl.java,51,import static org.apache.ignite.internal.processors.task.GridTaskThreadContextKey.TC_SUBGRID;
modules/core/src/main/java/org/apache/ignite/internal/IgniteComputeImpl.java,212,ctx.task().setThreadContextIfNotNull(TC_SUBGRID, prj.nodes());
modules/core/src/main/java/org/apache/ignite/internal/IgniteComputeImpl.java,233,ctx.task().setThreadContextIfNotNull(TC_SUBGRID, prj.nodes());
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,599,boolean fullSup = dep != null && taskCls!= null &&
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,602,Collection<? extends ClusterNode> nodes = (Collection<? extends ClusterNode>)map.get(TC_SUBGRID);
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,604,Collection<UUID> top = nodes != null ? F.nodeIds(nodes) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,3525,private void checkEmptyTransactions() throws IgniteException {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,379,for (SharedDeployment d : deps) {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,380,if (!d.pendingUndeploy() && !d.undeployed()) {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,381,Map<UUID, IgniteUuid> parties = d.participants();
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,383,if (parties != null) {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,384,IgniteUuid ldrId = parties.get(meta.senderNodeId());
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,386,if (ldrId != null) {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,387,assert !ldrId.equals(meta.classLoaderId());
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,390,log.debug("Skipping deployment (loaders on remote node are different) " +
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,393,continue;
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,398,depsToCheck = new LinkedList<>();
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,401,log.debug("Adding deployment to check: " + d);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,403,depsToCheck.add(d);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,165,return aff.assignments(topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,296,tx.nearLocallyMapped(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,298,tx.colocatedLocallyMapped(true);
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetricsCollectorTask.java,120,if (ca.context().started()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheEntry.java,382,if (this.dhtVer == null || this.dhtVer.compareTo(dhtVer) < 0) {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,548,retry = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,523,fut.get();
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,185,throw new IllegalStateException("Ignite requires Java 7 or above. Current Java version " +
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,355,throw new IllegalStateException("Data streamer has been closed.");
modules/spring/src/main/java/org/apache/ignite/IgniteSpringBean.java,40,import org.springframework.beans.factory.InitializingBean;
modules/spring/src/main/java/org/apache/ignite/IgniteSpringBean.java,81,public class IgniteSpringBean implements Ignite, DisposableBean, InitializingBean,
modules/spring/src/main/java/org/apache/ignite/IgniteSpringBean.java,128,g = IgniteSpring.start(cfg, appCtx);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2121,private class RingMessageWorker extends MessageWorkerAdapter<TcpDiscoveryAbstractMessage> {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3298,return false;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3300,boolean res = true;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3302,if (file.isDirectory()) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3303,File[] files = file.listFiles();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3308,res &= delete(file1);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3310,try {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3312,new JarFile(file1, false).close();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3316,catch (IOException ignore) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3319,else
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3320,res &= file1.delete();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3322,res &= file.delete();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3324,else
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3325,res = file.delete();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3327,return res;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,790,Arrays.asList("TABLE_CAT", "TABLE_SCHEM", "TABLE_NAME", "COLUMN_NAME", "DATA_TYPE",
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,794,Arrays.asList(String.class.getName(), String.class.getName(), String.class.getName(),
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,795,String.class.getName(), Integer.class.getName(), String.class.getName(), Integer.class.getName(),
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,796,Integer.class.getName(), Integer.class.getName(), Integer.class.getName(), String.class.getName(),
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,797,String.class.getName(), Integer.class.getName(), Integer.class.getName(), String.class.getName(),
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,798,String.class.getName(), String.class.getName(), String.class.getName(), Short.class.getName(),
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,799,String.class.getName()),
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,818,row.add(null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,819,row.add(schema);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,820,row.add(tbl);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,821,row.add(col);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,822,row.add(type);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,823,row.add(typeName);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,824,row.add(null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,825,row.add(null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,826,row.add(10);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,827,row.add(nullable ? columnNullable : columnNoNulls);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,828,row.add(null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,829,row.add(null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,830,row.add(Integer.MAX_VALUE);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,831,row.add(pos);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,832,row.add("YES");
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,833,row.add(null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,834,row.add(null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,835,row.add(null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,836,row.add(null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,837,row.add("NO");
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,45,import org.apache.logging.log4j.core.config.AppenderRef;
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,48,import org.apache.logging.log4j.core.config.LoggerConfig;
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,108,private Logger consoleLog;
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,122,private Log4J2Logger(final Logger impl, @Nullable final Logger consoleLog) {
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,124,this.impl = impl;
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,125,this.consoleLog = consoleLog;
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,138,throw new IgniteCheckedException("Configuration XML file for Log4j must be specified.");
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,143,throw new IgniteCheckedException("Log4j configuration path was not found: " + path);
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,211,public void setLevel(Level level) {
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,212,LoggerContext ctx = (LoggerContext)LogManager.getContext(false);
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,214,Configuration conf = ctx.getConfiguration();
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,216,conf.getLoggerConfig(impl.getName()).setLevel(level);
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,218,ctx.updateLoggers(conf);
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,245,return normilize(((FileAppender)innerApp).getFileName());
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,248,return normilize(((RollingFileAppender)innerApp).getFileName());
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,268,private String normilize(String path) {
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,338,consoleLog = createConsoleLogger();
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,351,public static Logger createConsoleLogger() {
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,352,LoggerContext ctx = (LoggerContext)LogManager.getContext(true);
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,354,Configuration cfg = ctx.getConfiguration();
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,362,AppenderRef ref = AppenderRef.createAppenderRef(CONSOLE_APPENDER, Level.TRACE, null);
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,364,AppenderRef[] refs = {ref};
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,369,logCfg.addAppender(consoleApp, null, null);
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,372,cfg.addLogger(LogManager.ROOT_LOGGER_NAME, logCfg);
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,376,return (Logger)LogManager.getContext().getLogger(LogManager.ROOT_LOGGER_NAME);
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,388,((LoggerContext)LogManager.getContext(false)).reconfigure();
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,407,return new Log4J2Logger((Logger)LogManager.getRootLogger(),
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,408,consoleLog == null ? null : (Logger)LogManager.getContext().getLogger(""));
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,413,return new Log4J2Logger((Logger)LogManager.getLogger(name),
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,414,consoleLog == null ? null : (Logger)LogManager.getContext().getLogger(name));
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,419,return new Log4J2Logger((Logger)LogManager.getLogger(name),
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,420,consoleLog == null ? null : (Logger)LogManager.getContext().getLogger(name));
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,431,consoleLog.trace(msg);
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,442,consoleLog.debug(msg);
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,453,consoleLog.info(msg);
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,461,consoleLog.warn(msg);
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,469,consoleLog.warn(msg, e);
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,477,consoleLog.error(msg);
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,485,consoleLog.error(msg, e);
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,490,return impl.isTraceEnabled() || (consoleLog != null && consoleLog.isTraceEnabled());
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,495,return impl.isDebugEnabled() || (consoleLog != null && consoleLog.isDebugEnabled());
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,500,return impl.isInfoEnabled() || (consoleLog != null && consoleLog.isInfoEnabled());
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,371,cfg.setNodeFilter(F.<ClusterNode>alwaysTrue() == prj.predicate() ? null : prj.predicate());
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,373,return deploy(cfg);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,395,return deploy(cfg);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2312,boolean conn = false;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2325,while (!conn) { // Reconnection on handshake timeout.
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2374,finally {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2376,recoveryDesc.release();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2379,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2400,conn = true;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2403,if (!conn) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2546,private <T> long safeHandshake(
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2547,T client,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2553,HandshakeTimeoutObject<T> obj = new HandshakeTimeoutObject<>(client, U.currentTimeMillis() + timeout);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2561,((GridCommunicationClient)client).doHandshake(new HandshakeClosure(rmtNodeId));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2562,else {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2563,SocketChannel ch = (SocketChannel)client;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2565,boolean success = false;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2567,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2568,BlockingSslHandler sslHnd = null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2570,ByteBuffer buf;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2572,if (isSslEnabled()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2578,ByteBuffer handBuff = sslHnd.applicationBuffer();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2581,buf = ByteBuffer.allocate(1000);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2583,int read = ch.read(buf);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2588,buf.flip();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2590,buf = sslHnd.decode(buf);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2592,else
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2593,buf = handBuff;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2595,else {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2599,int read = ch.read(buf);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2604,i += read;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2614,log.debug("Received remote node ID: " + rmtNodeId0);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2616,if (isSslEnabled()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2617,assert sslHnd != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2619,ch.write(sslHnd.encrypt(ByteBuffer.wrap(U.IGNITE_HEADER)));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2621,else
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2622,ch.write(ByteBuffer.wrap(U.IGNITE_HEADER));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2624,ClusterNode locNode = getLocalNode();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2627,throw new IgniteCheckedException("Local node has not been started or " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2630,if (recovery != null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2640,buf.order(ByteOrder.nativeOrder());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2642,boolean written = msg.writeTo(buf, null);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2644,assert written;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2646,buf.flip();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2648,if (isSslEnabled()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2649,assert sslHnd != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2651,ch.write(sslHnd.encrypt(buf));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2653,else
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2654,ch.write(buf);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2656,else {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2657,if (isSslEnabled()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2658,assert sslHnd != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2660,ch.write(sslHnd.encrypt(ByteBuffer.wrap(nodeIdMessage().nodeIdBytesWithType)));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2662,else
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2663,ch.write(ByteBuffer.wrap(nodeIdMessage().nodeIdBytesWithType));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2665,if (recovery != null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2667,log.debug("Waiting for handshake [rmtNode=" + rmtNodeId + ']');
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2669,if (isSslEnabled()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2670,assert sslHnd != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2672,buf = ByteBuffer.allocate(1000);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2679,int read = ch.read(buf);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2685,buf.flip();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2697,else {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2700,buf.order(ByteOrder.nativeOrder());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2703,int read = ch.read(buf);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2709,i += read;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2716,log.debug("Received handshake message [rmtNode=" + rmtNodeId + ", rcvCnt=" + rcvCnt + ']');
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2718,if (rcvCnt == -1) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2720,log.debug("Connection rejected, will retry client creation [rmtNode=" + rmtNodeId + ']');
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2722,else
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2723,success = true;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2725,else
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2726,success = true;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2728,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2730,log.debug("Failed to read from channel: " + e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2732,throw new IgniteCheckedException("Failed to read from channel.", e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2734,finally {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2736,U.closeQuiet(ch);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,56,private Map<String, Map<String, Map<String, String>>> meta;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1335,Map<String, Map<String, String>> typesMap = U.newHashMap(types.size());
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1338,typesMap.put(type.toUpperCase(), m.fields(type));
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1398,return ((IgniteCacheProxy)cache).context().queries().sqlMetadata();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,2340,private static class CacheSqlMetadata implements GridCacheSqlMetadata {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,2497,private static class CacheSqlIndexMetadata implements GridCacheSqlIndexMetadata {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,324,readResolveMtd = U.findNonPublicMethod(cls, "readResolve");
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,9235,try {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,9236,Method mtd = cls.getDeclaredMethod(name, paramTypes);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,9238,if (mtd.getReturnType() != void.class) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,9239,mtd.setAccessible(true);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,9241,return mtd;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,9244,catch (NoSuchMethodException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedGetFuture.java,678,final AffinityTopologyVersion updTopVer =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedGetFuture.java,685,fut.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedGetFuture.java,688,map(keys.keySet(), F.t(node, keys), updTopVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedSingleGetFuture.java,694,final AffinityTopologyVersion updTopVer = new AffinityTopologyVersion(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedSingleGetFuture.java,701,fut.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedSingleGetFuture.java,703,remap(updTopVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,928,final AffinityTopologyVersion updTopVer =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,935,fut.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,938,map(keys.keySet(), F.t(node, keys), updTopVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1198,executeClearTask(keys, false).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1199,executeClearTask(keys, true).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1207,return executeClearTask(keys, false).chain(new CX1<IgniteInternalFuture<?>, Object>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1209,executeClearTask(keys, true).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,307,U.writeLock(lock);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,311,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,313,long updateSeq = this.updateSeq.incrementAndGet();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,317,consistencyCheck();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,320,lock.writeLock().unlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,532,lock.writeLock().lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,536,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,542,log.debug("Partition map before afterExchange [exchId=" + exchFut.exchangeId() + ", fullMap=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,543,fullMapString() + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,545,long updateSeq = this.updateSeq.incrementAndGet();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,547,for (int p = 0; p < num; p++) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,553,if (locPart == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,555,log.debug("Skipping local partition afterExchange (will not create): " + p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,557,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,560,GridDhtPartitionState state = locPart.state();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,562,if (state == MOVING) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,564,Collection<ClusterNode> owners = owners(p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,567,if (F.isEmpty(owners)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,568,boolean owned = locPart.own();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,571,locPart + ']';
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,575,changed = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,586,log.debug("Owned partition: " + locPart);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,589,log.debug("Will not own partition (there are owners to rebalance from) [locPart=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,590,locPart + ", owners = " + owners + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,592,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,596,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,597,if (locPart != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,598,GridDhtPartitionState state = locPart.state();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,601,locPart.rent(false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,605,changed = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,608,log.debug("Evicting moving partition (it does not belong to affinity): " + locPart);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,616,consistencyCheck();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,619,lock.writeLock().unlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,985,lock.writeLock().lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1003,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1049,partMap.put(part.nodeId(), part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1053,for (Iterator<UUID> it = partMap.keySet().iterator(); it.hasNext(); ) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1054,UUID nodeId = it.next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1058,log.debug("Removing left node from full map update [nodeId=" + nodeId + ", partMap=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1059,partMap + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1061,it.remove();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1097,consistencyCheck();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1100,log.debug("Partition map after full update: " + fullMapString());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1434,lock.writeLock().lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1438,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1440,assert part.state() == EVICTED;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1442,long seq = updateSeq ? this.updateSeq.incrementAndGet() : this.updateSeq.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1446,consistencyCheck();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1449,lock.writeLock().unlock();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,171,private static final IgnitePredicate<ClusterNode> FILTER_DAEMON = new P1<ClusterNode>() {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2021,evt.topologySnapshot(topVer, U.<ClusterNode, ClusterNode>arrayList(topSnapshot, FILTER_DAEMON));
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,328,depMgr.p2pContext(nodeId, depInfo.classLoaderId(), depInfo.userVersion(), depInfo.deployMode(),
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,329,depInfo.participants(), depInfo.localDeploymentOwner());
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentInfoBean.java,76,public GridDeploymentInfoBean(IgniteUuid clsLdrId, String userVer, DeploymentMode depMode,
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentInfoBean.java,77,Map<UUID, IgniteUuid> participants, boolean locDepOwner) {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentInfoBean.java,82,this.locDepOwner = locDepOwner;
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentInfoBean.java,92,locDepOwner = dep.localDeploymentOwner();
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentInfoBean.java,131,public void localDeploymentOwner(boolean locDepOwner) {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentInfoBean.java,132,this.locDepOwner = locDepOwner;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,87,private volatile boolean locDepOwner;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,169,&& !cctx.kernalContext().job().internal()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,170,ClassLoader ldr = Thread.currentThread().getContextClassLoader();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,176,locDepOwner = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,378,public void p2pContext(UUID sndId, IgniteUuid ldrId, String userVer, DeploymentMode mode,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,379,Map<UUID, IgniteUuid> participants, boolean locDepOwner) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,450,Map<UUID, IgniteUuid> added = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,453,added = addGlobalParticipants(sndId, ldrId, participants, locDepOwner);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,460,added.remove(sndId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,472,added.remove(id);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,480,cctx.gridDeploy().addCacheParticipants(allParticipants, added);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,698,dep.localDeploymentOwner(locDepOwner);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,717,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,736,return new GridDeploymentInfoBean(d.loaderId(), d.userVersion(), d.mode(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,737,participants, locDepOwner);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,1070,cctx.deploy().p2pContext(nodeId, bean.classLoaderId(), bean.userVersion(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,1071,bean.deployMode(), bean.participants(), bean.localDeploymentOwner());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,661,depMgr.p2pContext(nodeId, depInfo.classLoaderId(), depInfo.userVersion(), depInfo.deployMode(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,662,depInfo.participants(), depInfo.localDeploymentOwner());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,899,U.addressesAsString(msg.addresses(), msg.hostNames()) + ']');
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryObjectBuilderImpl.java,515,Object val = val0 == null ? new BinaryValueWithType(BinaryUtils.typeByClass(Object.class), null) : val0;
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryObjectBuilderImpl.java,522,if (oldVal instanceof BinaryValueWithType && val0 != null) {
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryObjectBuilderImpl.java,523,((BinaryValueWithType)oldVal).value(val);
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryObjectBuilderImpl.java,553,return setField(name, null, Object.class);
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryObjectBuilderImpl.java,554,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3806,Collection<ClusterNode> nodes = grp.nodes();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3827,Collection<ClusterNode> nodes = grp.nodes();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,440,Collection<TcpDiscoveryNode> rmts = null;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,454,if (rmts != null && !rmts.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,460,Collection<ClusterNode> processed = new HashSet<>();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,462,for (TcpDiscoveryNode n : rmts) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,844,if (fut == null &&
modules/core/src/main/java/org/apache/ignite/internal/visor/file/VisorLatestTextFilesTask.java,21,import java.net.URL;
modules/core/src/main/java/org/apache/ignite/internal/visor/file/VisorLatestTextFilesTask.java,27,import org.apache.ignite.internal.util.typedef.internal.U;
modules/core/src/main/java/org/apache/ignite/internal/visor/file/VisorLatestTextFilesTask.java,73,URL url = U.resolveIgniteUrl(path);
modules/core/src/main/java/org/apache/ignite/internal/visor/file/VisorLatestTextFilesTask.java,76,return null;
modules/core/src/main/java/org/apache/ignite/internal/visor/file/VisorLatestTextFilesTask.java,79,File folder = new File(url.toURI());
modules/core/src/main/java/org/apache/ignite/internal/visor/log/VisorLogSearchTask.java,21,import java.io.FileNotFoundException;
modules/core/src/main/java/org/apache/ignite/internal/visor/log/VisorLogSearchTask.java,24,import java.net.URL;
modules/core/src/main/java/org/apache/ignite/internal/visor/log/VisorLogSearchTask.java,224,UUID uuid = ignite.localNode().id();
modules/core/src/main/java/org/apache/ignite/internal/visor/log/VisorLogSearchTask.java,225,String nid = uuid.toString().toLowerCase();
modules/core/src/main/java/org/apache/ignite/internal/visor/log/VisorLogSearchTask.java,229,try {
modules/core/src/main/java/org/apache/ignite/internal/visor/log/VisorLogSearchTask.java,230,File fld = new File(url.toURI());
modules/core/src/main/java/org/apache/ignite/internal/visor/log/VisorLogSearchTask.java,231,int pathIdx = (fld.isDirectory() ? fld : fld.getParentFile()).getAbsolutePath().length() + 1;
modules/core/src/main/java/org/apache/ignite/internal/visor/log/VisorLogSearchTask.java,233,List<VisorLogFile> matchingFiles = matchedFiles(fld, filePtrn);
modules/core/src/main/java/org/apache/ignite/internal/visor/util/VisorTaskUtils.java,485,public static List<VisorLogFile> fileTree(File file, int maxDepth, @Nullable FileFilter filter) {
modules/core/src/main/java/org/apache/ignite/internal/visor/util/VisorTaskUtils.java,512,public static List<VisorLogFile> matchedFiles(File fld, final String ptrn) {
modules/core/src/main/java/org/apache/ignite/internal/visor/util/VisorTaskUtils.java,513,List<VisorLogFile> files = fileTree(fld, MAX_FOLDER_DEPTH,
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,989,if (!ses.isValid()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,899,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,902,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,904,assert obj instanceof GridJobWorker;
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,906,IgniteUuid jobId1 = ses.getJobId();
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,907,IgniteUuid jobId2 = ((GridJobWorker)obj).ses.getJobId();
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,909,assert jobId1 != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,910,assert jobId2 != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,912,return jobId1.equals(jobId2);
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,546,Collection<GridJobResultImpl> jobResList = new ArrayList<>(jobs.size());
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcDatabaseMetadata.java,116,return "Ignite Cache";
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,115,return "Ignite Cache";
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/X.java,215,(t[1] < 10 ? "0" + t[1] : Long.toString(t[1])) + ':' +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3190,new TcpDiscoveryCheckFailedMessage(locNodeId, err.sendMessage()));
examples/src/main/java/org/apache/ignite/examples/datastructures/IgniteSemaphoreExample.java,41,private static final int NUM_PRODUCERS = 10;
examples/src/main/java/org/apache/ignite/examples/datastructures/IgniteSemaphoreExample.java,44,private static final int NUM_CONSUMERS = 10;
examples/src/main/java/org/apache/ignite/examples/datastructures/IgniteSemaphoreExample.java,79,syncSemaphore.acquire(NUM_CONSUMERS + NUM_PRODUCERS);
examples/src/main/java/org/apache/ignite/examples/datastructures/IgniteSemaphoreExample.java,162,IgniteSemaphore sync = Ignition.ignite().semaphore(SEM_NAME, 3, true, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,432,forcePrimary,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,433,subjId0,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,434,taskName,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,435,deserializeBinary,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,436,expiryPlc,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,437,skipVals,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,438,skipStore,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,439,canRemap,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,440,needVer);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,393,private void onFirstMessage(GridNioSession ses, Message msg) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,417,ses.close();
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcConnection.java,53,import org.apache.ignite.Ignition;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcConnection.java,177,Ignite ignite;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcConnection.java,180,Ignition.setClientMode(true);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcConnection.java,182,ignite = Ignition.start();
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcConnection.java,187,fut.onDone(ignite);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/store/CacheStoreManager.java,170,public void sessionEnd(IgniteInternalTx tx, boolean commit, boolean last) throws IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/store/GridCacheStoreManagerAdapter.java,905,private final Set<CacheStoreManager> started =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/store/GridCacheStoreManagerAdapter.java,906,new GridSetWrapper<>(new IdentityHashMap<CacheStoreManager, Object>());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/store/GridCacheStoreManagerAdapter.java,909,private final Set<CacheStore> ended = new GridSetWrapper<>(new IdentityHashMap<CacheStore, Object>());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/store/GridCacheStoreManagerAdapter.java,972,private boolean started(CacheStoreManager mgr) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/store/GridCacheStoreManagerAdapter.java,973,return !started.add(mgr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/store/GridCacheStoreManagerAdapter.java,981,return !ended.add(store);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1241,protected void sessionEnd(Collection<CacheStoreManager> stores, boolean commit) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1247,store.sessionEnd(this, commit, !it.hasNext());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,20,import java.lang.reflect.Field;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,32,import java.util.concurrent.atomic.AtomicReferenceArray;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,39,import org.apache.ignite.events.CacheQueryReadEvent;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,64,import org.apache.ignite.internal.util.typedef.T2;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,69,import org.h2.result.ResultInterface;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,75,import static org.apache.ignite.events.EventType.EVT_CACHE_QUERY_OBJECT_READ;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,86,private static final Field RESULT_FIELD;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,91,static {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,92,try {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,93,RESULT_FIELD = JdbcResultSet.class.getDeclaredField("result");
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,95,RESULT_FIELD.setAccessible(true);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,97,catch (NoSuchFieldException e) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,98,throw new IllegalStateException("Check H2 version in classpath.", e);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,118,private final ConcurrentMap<T2<String, AffinityTopologyVersion>, GridReservable> reservations =
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,119,new ConcurrentHashMap8<>();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,284,final T2<String,AffinityTopologyVersion> grpKey =
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,285,new T2<>(cctx.name(), cctx.isReplicated() ? null : topVer);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,290,if (r != ReplicatedReservation.INSTANCE) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,311,reservations.putIfAbsent(grpKey, ReplicatedReservation.INSTANCE);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,559,QueryResult res = qr.result(qry);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,563,int page = res.page;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,581,res.cols,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,582,loc ? null : toMessages(rows, new ArrayList<Message>(res.cols)),
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,623,for (T2<String,AffinityTopologyVersion> grpKey : reservations.keySet()) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,632,private class QueryResults {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,634,private final long qryReqId;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,637,private final AtomicReferenceArray<QueryResult> results;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,643,private volatile boolean canceled;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,651,this.qryReqId = qryReqId;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,654,results = new AtomicReferenceArray<>(qrys);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,661,QueryResult result(int qry) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,662,return results.get(qry);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,673,throw new IllegalStateException();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,679,boolean isAllClosed() {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,680,for (int i = 0; i < results.length(); i++) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,681,QueryResult res = results.get(i);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,684,return false;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,687,return true;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,692,return;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,694,canceled = true;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,696,for (int i = 0; i < results.length(); i++) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,697,QueryResult res = results.get(i);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,700,res.close();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,708,private class QueryResult implements AutoCloseable {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,710,private final ResultInterface res;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,713,private final ResultSet rs;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,719,private final GridCacheSqlQuery qry;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,722,private final UUID qrySrcNodeId;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,725,private final int cols;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,728,private int page;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,734,private volatile boolean closed;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,745,this.qry = qry;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,746,this.qrySrcNodeId = qrySrcNodeId;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,764,synchronized boolean fetchNextPage(List<Value[]> rows, int pageSize) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,766,return true;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,770,page++;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,772,for (int i = 0 ; i < pageSize; i++) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,774,return true;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,776,Value[] row = res.currentRow();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,778,assert row != null;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,780,if (readEvt) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,784,EVT_CACHE_QUERY_OBJECT_READ,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,785,CacheQueryType.SQL.name(),
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,787,null,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,788,qry.query(),
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,789,null,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,790,null,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,792,qrySrcNodeId,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,793,null,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,794,null,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,795,null,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,796,null,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,797,row(row)));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,800,rows.add(res.currentRow());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,803,return false;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,810,private List<?> row(Value[] row) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,811,List<Object> res = new ArrayList<>(row.length);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,814,res.add(v.getObject());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,816,return res;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,822,return;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,824,closed = true;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,826,U.close(rs, log);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,833,private static class ReplicatedReservation implements GridReservable {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,835,static final ReplicatedReservation INSTANCE = new ReplicatedReservation();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,839,throw new IllegalStateException();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,844,throw new IllegalStateException();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,51,public GridLuceneDirectory(GridUnsafeMemory mem) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,69,List<String> names = new ArrayList<>(fileNames.size());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,72,names.add(name);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,118,doDeleteFile(name);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,127,private void doDeleteFile(String name) throws IOException {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,145,GridLuceneFile existing = fileMap.remove(name);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,153,fileMap.put(name, file);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,186,doDeleteFile(fileName);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,189,throw new IllegalStateException(e);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java,20,import java.io.Serializable;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java,22,import java.util.concurrent.atomic.AtomicInteger;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java,29,public class GridLuceneFile implements Serializable {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java,31,private static final long serialVersionUID = 0L;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java,34,public static final AtomicInteger filesCnt = new AtomicInteger();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java,56,filesCnt.incrementAndGet();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java,101,protected final synchronized long getBuffer(int idx) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java,108,protected final synchronized int numBuffers() {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java,118,protected long newBuffer() {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java,125,public synchronized void delete() {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java,134,filesCnt.decrementAndGet();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java,140,public long getSizeInBytes() {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,294,U.closeQuiet(dir);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,31,public class GridLuceneInputStream extends IndexInput {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,28,public class GridLuceneOutputStream extends IndexOutput {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1217,changed |= checkEvictions(updateSeq, aff);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheEntry.java,253,if (!markObsolete(dhtVer)) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,930,return Integer.highestOneBit(v - 1) << 1;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,963,ctx.ttl().expire();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1333,exchFut.init();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,418,public void init() throws IgniteInterruptedCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1336,if (readEvt) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1466,GridCacheQueryAdapter<?> qry = qryInfo.query();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1558,if (readEvt) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1781,if (readEvt) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4231,U.addLastCause(e, e1, log);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,676,fut = tx.rollbackAsync();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,678,fut.listen(resClo);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,685,fut = tx.rollbackAsync();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,1068,tx.rollbackAsync();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,745,rollbackFut.listen(CU.errorLogger(log));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,747,res = rollbackFut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,2289,tx.rollbackAsync();
modules/flume/src/main/java/org/apache/ignite/stream/flume/IgniteSink.java,176,transaction.rollback();
modules/core/src/main/java/org/apache/ignite/cache/CacheManager.java,46,import org.apache.ignite.internal.processors.cache.IgniteCacheProxy;
modules/core/src/main/java/org/apache/ignite/cache/CacheManager.java,179,((IgniteCacheProxy<K, V>)res).setCacheManager(this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,873,proxy.gate().onStopped();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1743,proxy.gate().onStopped();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,3085,return jCacheProxies.values();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,3197,return (IgniteCacheProxy<K, V>)cache;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,3313,for (Map.Entry<String, IgniteCacheProxy<?, ?>> entry : jCacheProxies.entrySet()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,3315,res.add(entry.getValue());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,21,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,22,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,23,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,24,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,25,import java.util.Collections;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,27,import java.util.Iterator;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,28,import java.util.List;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,29,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,30,import java.util.NoSuchElementException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,31,import java.util.Set;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,33,import java.util.concurrent.locks.Lock;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,34,import javax.cache.Cache;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,35,import javax.cache.CacheException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,36,import javax.cache.configuration.CacheEntryListenerConfiguration;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,37,import javax.cache.configuration.Configuration;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,38,import javax.cache.expiry.ExpiryPolicy;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,39,import javax.cache.integration.CompletionListener;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,40,import javax.cache.processor.EntryProcessor;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,41,import javax.cache.processor.EntryProcessorException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,42,import javax.cache.processor.EntryProcessorResult;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,44,import org.apache.ignite.IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,45,import org.apache.ignite.IgniteException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,46,import org.apache.ignite.cache.CacheEntry;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,47,import org.apache.ignite.cache.CacheEntryProcessor;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,48,import org.apache.ignite.cache.CacheManager;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,49,import org.apache.ignite.cache.CacheMetrics;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,50,import org.apache.ignite.cache.CachePeekMode;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,51,import org.apache.ignite.cache.query.ContinuousQuery;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,52,import org.apache.ignite.cache.query.Query;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,53,import org.apache.ignite.cache.query.QueryCursor;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,54,import org.apache.ignite.cache.query.QueryMetrics;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,55,import org.apache.ignite.cache.query.ScanQuery;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,56,import org.apache.ignite.cache.query.SpiQuery;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,57,import org.apache.ignite.cache.query.SqlFieldsQuery;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,58,import org.apache.ignite.cache.query.SqlQuery;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,59,import org.apache.ignite.cache.query.TextQuery;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,60,import org.apache.ignite.cluster.ClusterGroup;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,61,import org.apache.ignite.configuration.CacheConfiguration;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,62,import org.apache.ignite.internal.AsyncSupportAdapter;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,64,import org.apache.ignite.internal.IgniteEx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,65,import org.apache.ignite.internal.IgniteInternalFuture;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,66,import org.apache.ignite.internal.processors.affinity.AffinityTopologyVersion;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,67,import org.apache.ignite.internal.processors.cache.query.CacheQuery;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,68,import org.apache.ignite.internal.processors.cache.query.CacheQueryFuture;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,70,import org.apache.ignite.internal.util.GridCloseableIteratorAdapter;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,71,import org.apache.ignite.internal.util.GridEmptyIterator;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,72,import org.apache.ignite.internal.util.future.IgniteFutureImpl;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,73,import org.apache.ignite.internal.util.lang.GridCloseableIterator;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,74,import org.apache.ignite.internal.util.lang.GridClosureException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,75,import org.apache.ignite.internal.util.lang.IgniteOutClosureX;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,76,import org.apache.ignite.internal.util.tostring.GridToStringExclude;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,77,import org.apache.ignite.internal.util.tostring.GridToStringInclude;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,78,import org.apache.ignite.internal.util.typedef.CI1;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,79,import org.apache.ignite.internal.util.typedef.CX1;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,80,import org.apache.ignite.internal.util.typedef.internal.A;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,81,import org.apache.ignite.internal.util.typedef.internal.CU;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,82,import org.apache.ignite.internal.util.typedef.internal.S;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,83,import org.apache.ignite.internal.util.typedef.internal.U;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,84,import org.apache.ignite.lang.IgniteBiPredicate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,86,import org.apache.ignite.mxbean.CacheMetricsMXBean;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,87,import org.apache.ignite.plugin.security.SecurityPermission;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,88,import org.jetbrains.annotations.Nullable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,93,public class IgniteCacheProxy<K, V> extends AsyncSupportAdapter<IgniteCache<K, V>>
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,94,implements IgniteCache<K, V>, Externalizable {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,96,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,119,private CacheOperationContext opCtx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,123,private GridCacheProxyImpl<K, V> internalProxy;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,127,private CacheManager cacheMgr;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,131,private boolean lock;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,136,public IgniteCacheProxy() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,146,public IgniteCacheProxy(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,147,GridCacheContext<K, V> ctx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,148,IgniteInternalCache<K, V> delegate,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,149,CacheOperationContext opCtx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,150,boolean async
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,151,) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,152,this(ctx, delegate, opCtx, async, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,162,private IgniteCacheProxy(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,163,GridCacheContext<K, V> ctx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,164,IgniteInternalCache<K, V> delegate,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,166,boolean async,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,167,boolean lock
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,168,) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,169,super(async);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,171,assert ctx != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,172,assert delegate != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,174,this.ctx = ctx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,175,this.delegate = delegate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,176,this.opCtx = opCtx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,178,gate = ctx.gate();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,180,internalProxy = new GridCacheProxyImpl<>(ctx, delegate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,182,this.lock = lock;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,189,return opCtx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,198,public IgniteCacheProxy<K, V> cacheNoGate() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,199,return new IgniteCacheProxy<>(ctx, delegate, opCtx, isAsync(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,205,public GridCacheContext<K, V> context() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,206,return ctx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,212,public GridCacheGateway<K, V> gate() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,213,return gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,218,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,220,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,222,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,223,return ctx.cache().clusterMetrics();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,225,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,226,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,232,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,234,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,236,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,237,return ctx.cache().clusterMetrics(grp);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,239,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,240,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,245,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,247,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,249,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,250,return ctx.cache().localMetrics();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,252,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,253,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,259,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,261,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,263,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,264,return ctx.cache().clusterMxBean();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,266,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,267,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,272,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,274,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,276,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,277,return ctx.cache().localMxBean();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,279,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,280,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,286,CacheConfiguration cfg = ctx.config();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,289,throw new IllegalArgumentException();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,291,return clazz.cast(cfg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,316,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,318,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,320,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,321,CacheOperationContext prj0 = opCtx != null ? opCtx.withExpiryPolicy(plc) :
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,324,return new IgniteCacheProxy<>(ctx, delegate, prj0, isAsync(), lock);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,326,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,327,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,333,return skipStore();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,338,return keepBinary();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,343,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,345,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,347,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,348,boolean noRetries = opCtx != null && opCtx.noRetries();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,351,return this;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,353,CacheOperationContext opCtx0 = opCtx != null ? opCtx.setNoRetries(true) :
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,356,return new IgniteCacheProxy<>(ctx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,357,delegate,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,358,opCtx0,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,359,isAsync(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,360,lock);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,362,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,363,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,369,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,370,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,372,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,374,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,375,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,377,setFuture(ctx.cache().localLoadCacheAsync(p, args));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,378,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,379,setFuture(ctx.cache().globalLoadCacheAsync(p, args));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,381,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,383,ctx.cache().localLoadCache(p, args);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,384,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,385,ctx.cache().globalLoadCache(p, args);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,388,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,389,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,392,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,393,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,399,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,400,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,402,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,404,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,406,setFuture(delegate.localLoadCacheAsync(p, args));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,407,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,408,delegate.localLoadCache(p, args);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,410,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,411,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,414,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,415,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,421,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,422,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,424,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,426,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,427,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,428,setFuture(delegate.getAndPutIfAbsentAsync(key, val));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,430,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,432,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,433,return delegate.getAndPutIfAbsent(key, val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,435,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,436,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,439,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,440,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,446,return lockAll(Collections.singleton(key));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,451,return new CacheLockImpl<>(gate, delegate, opCtx, keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,456,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,458,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,460,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,461,return byCurrThread ? delegate.isLockedByThread(key) : delegate.isLocked(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,463,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,464,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,475,throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,478,boolean isKeepBinary = opCtx != null && opCtx.isKeepBinary();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,516,if (filter instanceof TextQuery) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,517,TextQuery p = (TextQuery)filter;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,519,qry = ctx.queries().createFullTextQuery(p.getType(), p.getText(), isKeepBinary);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,522,qry.projection(grp);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,525,new IgniteOutClosureX<CacheQueryFuture<Map.Entry<K, V>>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,527,return qry.execute();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,531,else if (filter instanceof SpiQuery) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,532,qry = ctx.queries().createSpiQuery(isKeepBinary);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,535,qry.projection(grp);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,540,return qry.execute(((SpiQuery)filter).getArgs());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,544,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,546,throw new CacheException("Use methods 'queryFields' and 'localQueryFields' for " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,547,SqlFieldsQuery.class.getSimpleName() + ".");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,549,throw new CacheException("Unsupported query type: " + filter);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,552,return new QueryCursorImpl<>(new GridCloseableIteratorAdapter<Entry<K, V>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,558,throw new NoSuchElementException();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,562,cur = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,572,fut.cancel();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,581,private ClusterGroup projection(boolean loc) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,583,return ctx.kernalContext().grid().cluster().forLocal();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,586,return ctx.kernalContext().grid().cluster().forDataNodes(ctx.name()).forRandom();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,588,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,599,private QueryCursor<Cache.Entry<K, V>> queryContinuous(ContinuousQuery qry, boolean loc, boolean keepBinary) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,601,throw new IgniteException("Initial predicate for continuous query can't be an instance of another " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,605,throw new IgniteException("Mandatory local listener is not set for the query: " + qry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,608,throw new IgniteException("Should be used either RemoterFilter or RemoteFilterFactory.");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,610,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,611,final UUID routineId = ctx.continuousQueries().executeQuery(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,612,qry.getLocalListener(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,613,qry.getRemoteFilter(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,614,qry.getRemoteFilterFactory(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,615,qry.getPageSize(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,616,qry.getTimeInterval(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,617,qry.isAutoUnsubscribe(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,618,loc,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,621,final QueryCursor<Cache.Entry<K, V>> cur =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,622,qry.getInitialQuery() != null ? query(qry.getInitialQuery()) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,624,return new QueryCursor<Cache.Entry<K, V>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,626,return cur != null ? cur.iterator() : new GridEmptyIterator<Cache.Entry<K, V>>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,630,return cur != null ? cur.getAll() : Collections.<Cache.Entry<K, V>>emptyList();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,635,cur.close();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,637,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,638,ctx.kernalContext().continuous().stopRoutine(routineId).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,640,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,641,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,646,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,647,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,654,A.notNull(qry, "qry");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,656,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,658,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,660,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,661,ctx.checkSecurity(SecurityPermission.CACHE_READ);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,663,validate(qry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,696,catch (Exception e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,698,throw (CacheException)e;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,700,throw new CacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,702,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,703,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,720,private void validate(Query qry) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,723,throw new CacheException("Indexing is disabled for cache: " + ctx.cache().name() +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,726,if (!ctx.kernalContext().query().moduleEnabled() &&
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,728,throw new CacheException("Failed to execute query. Add module 'ignite-indexing' to the classpath " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,734,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,736,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,738,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,739,return delegate.localEntries(peekModes);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,741,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,742,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,744,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,745,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,751,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,753,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,755,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,756,return delegate.context().queries().metrics();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,758,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,759,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,765,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,767,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,769,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,770,delegate.evictAll(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,772,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,773,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,779,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,781,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,783,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,784,return delegate.localPeek(key, peekModes, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,786,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,787,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,789,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,790,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,796,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,808,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,809,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,815,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,817,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,819,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,820,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,823,return 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,825,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,828,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,829,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,831,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,832,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,861,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,863,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,865,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,866,return delegate.localSize(peekModes);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,868,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,869,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,871,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,872,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,878,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,880,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,882,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,883,return delegate.localSizeLong(peekModes);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,885,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,886,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,888,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,889,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,895,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,896,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,898,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,900,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,901,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,902,setFuture(delegate.getAsync(key));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,904,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,906,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,907,return delegate.get(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,909,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,910,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,913,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,914,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,920,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,921,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,923,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,925,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,926,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,927,setFuture(delegate.getEntryAsync(key));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,929,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,931,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,932,return delegate.getEntry(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,934,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,935,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,938,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,939,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,945,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,946,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,948,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,950,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,951,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,952,setFuture(delegate.getAllAsync(keys));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,954,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,956,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,957,return delegate.getAll(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,959,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,960,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,963,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,964,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,970,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,971,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,973,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,975,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,976,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,977,setFuture(delegate.getEntriesAsync(keys));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,979,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,981,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,982,return delegate.getEntries(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,984,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,985,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,988,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,989,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,995,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,996,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,998,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1000,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1001,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1002,setFuture(delegate.getAllOutTxAsync(keys));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1004,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1006,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1007,return delegate.getAllOutTx(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1009,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1010,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1013,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1014,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1022,public Map<K, V> getAll(Collection<? extends K> keys) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1023,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1024,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1026,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1028,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1029,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1030,setFuture(delegate.getAllAsync(keys));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1032,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1034,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1035,return delegate.getAll(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1037,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1038,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1041,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1042,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1053,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1055,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1057,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1060,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1061,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1087,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1089,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1091,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1092,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1093,setFuture(delegate.containsKeysAsync(keys));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1095,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1097,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1098,return delegate.containsKeys(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1100,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1101,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1107,Set<? extends K> keys,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1108,boolean replaceExisting,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1110,) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1111,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1113,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1115,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1116,IgniteInternalFuture<?> fut = ctx.cache().loadAll(keys, replaceExisting);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1118,if (completionLsnr != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1119,fut.listen(new CI1<IgniteInternalFuture<?>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1121,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1122,fut.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1124,completionLsnr.onCompletion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1126,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1127,completionLsnr.onException(cacheException(e));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1133,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1134,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1140,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1141,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1143,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1145,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1164,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1165,delegate.put(key, val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1167,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1168,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1171,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1172,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1178,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1179,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1181,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1183,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1184,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1185,setFuture(delegate.getAndPutAsync(key, val));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1187,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1189,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1190,return delegate.getAndPut(key, val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1192,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1193,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1196,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1197,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1203,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1204,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1206,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1208,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1210,setFuture(delegate.putAllAsync(map));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1211,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1212,delegate.putAll(map);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1214,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1215,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1218,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1219,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1225,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1226,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1228,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1230,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1231,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1232,setFuture(delegate.putIfAbsentAsync(key, val));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1234,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1236,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1237,return delegate.putIfAbsent(key, val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1239,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1240,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1243,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1244,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1250,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1251,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1253,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1255,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1256,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1257,setFuture(delegate.removeAsync(key));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1259,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1261,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1262,return delegate.remove(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1275,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1276,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1278,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1280,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1281,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1282,setFuture(delegate.removeAsync(key, oldVal));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1284,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1286,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1287,return delegate.remove(key, oldVal);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1289,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1290,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1293,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1294,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1300,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1301,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1303,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1305,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1306,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1307,setFuture(delegate.getAndRemoveAsync(key));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1309,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1311,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1312,return delegate.getAndRemove(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1314,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1315,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1318,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1319,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1325,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1326,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1328,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1330,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1331,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1332,setFuture(delegate.replaceAsync(key, oldVal, newVal));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1334,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1336,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1337,return delegate.replace(key, oldVal, newVal);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1339,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1340,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1343,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1344,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1350,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1351,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1353,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1355,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1356,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1357,setFuture(delegate.replaceAsync(key, val));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1359,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1361,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1362,return delegate.replace(key, val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1364,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1365,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1368,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1369,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1375,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1376,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1378,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1380,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1381,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1382,setFuture(delegate.getAndReplaceAsync(key, val));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1384,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1386,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1387,return delegate.getAndReplace(key, val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1389,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1390,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1393,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1394,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1400,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1401,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1403,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1405,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1407,setFuture(delegate.removeAllAsync(keys));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1408,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1409,delegate.removeAll(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1411,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1412,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1415,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1416,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1422,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1424,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1426,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1428,setFuture(delegate.removeAllAsync());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1429,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1430,delegate.removeAll();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1432,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1433,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1435,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1436,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1442,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1444,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1446,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1448,setFuture(delegate.clearAsync(key));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1449,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1450,delegate.clear(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1452,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1453,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1455,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1456,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1462,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1464,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1466,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1468,setFuture(delegate.clearAllAsync(keys));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1469,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1470,delegate.clearAll(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1472,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1473,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1475,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1476,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1482,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1484,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1486,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1488,setFuture(delegate.clearAsync());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1489,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1490,delegate.clear();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1492,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1493,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1495,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1496,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1502,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1504,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1506,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1507,delegate.clearLocally(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1509,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1510,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1516,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1518,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1520,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1522,delegate.clearLocally(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1524,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1525,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1531,throws EntryProcessorException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1532,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1533,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1535,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1537,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1538,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1557,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1559,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1560,EntryProcessorResult<T> res = delegate.invoke(key, entryProcessor, args);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1562,return res != null ? res.get() : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1565,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1566,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1569,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1570,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1576,throws EntryProcessorException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1577,return invoke(key, (EntryProcessor<K, V, T>)entryProcessor, args);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1587,public <T> T invoke(@Nullable AffinityTopologyVersion topVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1588,K key,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1589,EntryProcessor<K, V, T> entryProcessor,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1590,Object... args) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1591,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1592,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1594,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1596,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1598,throw new UnsupportedOperationException();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1599,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1600,EntryProcessorResult<T> res = delegate.invoke(topVer, key, entryProcessor, args);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1602,return res != null ? res.get() : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1605,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1606,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1609,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1610,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1616,EntryProcessor<K, V, T> entryProcessor,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1617,Object... args) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1618,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1619,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1621,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1623,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1624,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1625,setFuture(delegate.invokeAllAsync(keys, entryProcessor, args));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1627,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1629,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1630,return delegate.invokeAll(keys, entryProcessor, args);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1632,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1633,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1636,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1637,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1643,CacheEntryProcessor<K, V, T> entryProcessor,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1644,Object... args) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1645,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1646,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1648,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1650,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1651,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1652,setFuture(delegate.invokeAllAsync(keys, entryProcessor, args));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1654,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1656,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1657,return delegate.invokeAll(keys, entryProcessor, args);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1659,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1660,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1663,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1664,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1670,Map<? extends K, ? extends EntryProcessor<K, V, T>> map,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1671,Object... args) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1672,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1673,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1675,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1677,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1678,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1679,setFuture(delegate.invokeAllAsync(map, args));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1681,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1683,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1684,return delegate.invokeAll(map, args);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1686,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1687,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1690,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1691,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1697,return delegate.name();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1702,return cacheMgr;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1708,public void setCacheManager(CacheManager cacheMgr) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1709,this.cacheMgr = cacheMgr;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1714,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1717,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1719,IgniteInternalFuture<?> fut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1721,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1724,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1725,onLeave(gate);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1728,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1729,fut.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1731,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1732,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1738,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1741,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1743,IgniteInternalFuture<?> fut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1745,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1746,fut = ctx.kernalContext().cache().dynamicCloseCache(ctx.name());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1748,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1749,onLeave(gate);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1752,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1753,fut.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1755,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1756,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1762,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1765,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1767,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1768,return ctx.kernalContext().cache().context().closed(ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1770,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1771,onLeave(gate);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1778,public IgniteInternalCache delegate() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1779,return delegate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1786,return (T)this;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1788,return (T)ctx.grid();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1790,throw new IllegalArgumentException("Unwrapping to class is not supported: " + clazz);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1795,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1797,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1799,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1800,CacheOperationContext opCtx = ctx.operationContextPerCall();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1802,ctx.continuousQueries().executeJCacheQuery(lsnrCfg, false, opCtx != null && opCtx.isKeepBinary());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1804,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1805,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1807,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1808,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1814,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1816,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1818,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1819,ctx.continuousQueries().cancelJCacheQuery(lsnrCfg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1821,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1822,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1824,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1825,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1831,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1833,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1835,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1836,return ctx.cache().igniteIterator();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1838,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1839,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1841,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1842,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1848,return new IgniteCacheProxy<>(ctx, delegate, opCtx, true, lock);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1875,public <K1, V1> IgniteCache<K1, V1> keepBinary() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1876,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1878,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1880,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1881,CacheOperationContext opCtx0 =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1882,new CacheOperationContext(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1883,opCtx != null && opCtx.skipStore(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1884,opCtx != null ? opCtx.subjectId() : null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1885,true,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1886,opCtx != null ? opCtx.expiry() : null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1887,opCtx != null && opCtx.noRetries(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1890,return new IgniteCacheProxy<>((GridCacheContext<K1, V1>)ctx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1892,opCtx0,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1893,isAsync(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1894,lock);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1896,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1897,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1905,public IgniteCache<K, V> withDataCenterId(byte dataCenterId) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1906,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1908,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1909,Byte prevDataCenterId = opCtx != null ? opCtx.dataCenterId() : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1912,return this;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1914,CacheOperationContext opCtx0 =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1915,new CacheOperationContext(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1916,opCtx != null && opCtx.skipStore(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1917,opCtx != null ? opCtx.subjectId() : null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1918,opCtx != null && opCtx.isKeepBinary(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1919,opCtx != null ? opCtx.expiry() : null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1920,opCtx != null && opCtx.noRetries(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1923,return new IgniteCacheProxy<>(ctx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1924,delegate,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1925,opCtx0,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1926,isAsync(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1927,lock);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1929,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1930,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1937,public IgniteCache<K, V> skipStore() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1938,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1940,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1942,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1943,boolean skip = opCtx != null && opCtx.skipStore();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1946,return this;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1948,CacheOperationContext opCtx0 =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1949,new CacheOperationContext(true,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1950,opCtx != null ? opCtx.subjectId() : null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1951,opCtx != null && opCtx.isKeepBinary(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1952,opCtx != null ? opCtx.expiry() : null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1953,opCtx != null && opCtx.noRetries(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1956,return new IgniteCacheProxy<>(ctx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1957,delegate,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1958,opCtx0,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1959,isAsync(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1960,lock);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1962,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1963,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1971,private RuntimeException cacheException(IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1972,return CU.convertToCacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1978,private <R> void setFuture(IgniteInternalFuture<R> fut) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1985,public GridCacheProxyImpl<K, V> internalProxy() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1986,return internalProxy;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1992,public boolean proxyClosed() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1993,return !gate.getClass().equals(GridCacheGateway.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1999,public void closeProxy() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2000,gate = new GridCacheGateway<K, V>(ctx) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2002,throw new IllegalStateException("Cache has been closed: " + ctx.name());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2006,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2010,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2014,assert false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2018,assert false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2022,throw new IllegalStateException("Cache has been closed: " + ctx.name());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2026,throw new IllegalStateException("Cache has been closed: " + ctx.name());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2030,assert false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2034,assert false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2052,private CacheOperationContext onEnter(GridCacheGateway<K, V> gate, CacheOperationContext opCtx) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2063,private boolean onEnterIfNoStop(GridCacheGateway<K, V> gate) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2074,private void onLeave(GridCacheGateway<K, V> gate, CacheOperationContext opCtx) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2076,gate.leave(opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2077,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2078,gate.leaveNoLock(opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2084,private void onLeave(GridCacheGateway<K, V> gate) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2086,gate.leave();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2087,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2088,gate.leaveNoLock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2093,out.writeObject(ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2095,out.writeObject(delegate);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2097,out.writeObject(opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2099,out.writeBoolean(lock);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2105,ctx = (GridCacheContext<K, V>)in.readObject();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2107,delegate = (IgniteInternalCache<K, V>)in.readObject();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2109,opCtx = (CacheOperationContext)in.readObject();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2111,gate = ctx.gate();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2113,lock = in.readBoolean();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2129,public V getTopologySafe(K key) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2130,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2131,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2133,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2135,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2136,return delegate.getTopologySafe(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2138,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2139,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2142,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2143,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2149,return S.toString(IgniteCacheProxy.class, this);
modules/core/src/main/java/org/apache/ignite/internal/processors/dr/IgniteDrDataStreamerCacheUpdater.java,65,CacheOperationContext opCtx = ((IgniteCacheProxy)cache0).operationContext();
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,56,import javax.cache.Cache;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,59,import javax.cache.integration.CompletionListener;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,60,import javax.cache.processor.EntryProcessorException;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,61,import javax.cache.processor.EntryProcessorResult;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,62,import java.util.Iterator;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,63,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,64,import java.util.Set;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,65,import java.util.concurrent.ConcurrentMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,66,import java.util.concurrent.TimeUnit;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,67,import java.util.concurrent.atomic.AtomicLong;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,68,import java.util.concurrent.locks.Lock;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/store/GridCacheStoreManagerAdapter.java,861,assert !sesHolder.get().ended(store);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/store/GridCacheStoreManagerAdapter.java,863,store.sessionEnd(!threwEx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java,650,tx.txState().awaitLastFut(this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java,664,tx.txState().awaitLastFut(this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java,678,tx.txState().awaitLastFut(this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxState.java,56,public void awaitLastFut(GridCacheSharedContext cctx);
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaResource.java,103,cacheTx.rollback();
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaResource.java,121,cacheTx.prepare();
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaResource.java,149,cacheTx.commit();
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaResource.java,164,cacheTx.invalidate(true);
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaResource.java,166,cacheTx.commit();
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaResource.java,249,cacheTx.prepare();
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaResource.java,264,cacheTx.commit();
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaResource.java,277,cacheTx.rollback();
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,1664,cancelledJobs.remove(worker.getJobId(), worker);
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,1666,heldJobs.remove(worker.getJobId());
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,52,import org.apache.ignite.internal.processors.cache.IgniteCacheProxy;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,925,boolean sameCaches = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,929,for (int i = 1; i < subgrid.size(); i++) {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,931,sameCaches = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,933,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,937,Map<ComputeJob, ClusterNode> map = U.newHashMap(sameCaches ? 1 : subgrid.size());
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,940,map.put(new MetadataJob(), ignite.localNode());
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,941,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,943,map.put(new MetadataJob(), node);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,993,IgniteCacheProxy<?, ?> cache = F.first(ignite.context().cache().publicCaches());
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,996,return Collections.emptyList();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,999,return cache.context().queries().sqlMetadata();
modules/core/src/main/java/org/apache/ignite/internal/processors/timeout/GridTimeoutProcessor.java,40,private final IgniteThread timeoutWorker;
modules/core/src/main/java/org/apache/ignite/internal/processors/timeout/GridTimeoutProcessor.java,66,new TimeoutWorker());
modules/core/src/main/java/org/apache/ignite/internal/processors/timeout/GridTimeoutProcessor.java,71,timeoutWorker.start();
modules/core/src/main/java/org/apache/ignite/internal/processors/timeout/GridTimeoutProcessor.java,79,U.interrupt(timeoutWorker);
modules/core/src/main/java/org/apache/ignite/internal/processors/timeout/GridTimeoutProcessor.java,173,while (true) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryUtils.java,654,cls == LinkedList.class;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryUtils.java,1052,return ArrayList.class.equals(cls) || LinkedList.class.equals(cls) ||
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryUtils.java,1868,return col;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,480,return pCol;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformUtils.java,891,return col0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/store/GridCacheStoreManagerAdapter.java,340,sessionEnd0(tx, threwEx);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,36,public class GridLuceneDirectory extends Directory {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,52,this.mem = mem;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,54,try {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,55,setLockFactory(new GridLuceneLockFactory());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,57,catch (IOException e) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,58,throw new IllegalStateException(e);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,79,ensureOpen();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,81,return fileMap.containsKey(name);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,88,throw new IllegalStateException(name);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,97,ensureOpen();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,99,throw new IllegalStateException(name);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,40,import org.apache.lucene.document.DateTools;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,47,import org.apache.lucene.queryParser.MultiFieldQueryParser;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,48,import org.apache.lucene.search.Filter;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,51,import org.apache.lucene.search.TermRangeFilter;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,53,import org.apache.lucene.util.Version;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,112,writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_30, new StandardAnalyzer(
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,113,Version.LUCENE_30)));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,175,doc.add(new Field(VAL_STR_FIELD_NAME, val.toString(), Field.Store.YES, Field.Index.ANALYZED));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,184,doc.add(new Field(idxdFields[i], fieldVal.toString(), Field.Store.YES, Field.Index.ANALYZED));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,190,String keyStr = org.apache.commons.codec.binary.Base64.encodeBase64String(k.valueBytes(coctx));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,194,writer.deleteDocuments(new Term(KEY_FIELD_NAME, keyStr));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,199,doc.add(new Field(KEY_FIELD_NAME, keyStr, Field.Store.YES, Field.Index.NOT_ANALYZED));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,202,doc.add(new Field(VAL_FIELD_NAME, v.valueBytes(coctx)));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,206,doc.add(new Field(EXPIRATION_TIME_FIELD_NAME, DateTools.timeToString(expires,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,207,DateTools.Resolution.MILLISECOND), Field.Store.YES, Field.Index.NOT_ANALYZED));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,209,writer.addDocument(doc);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,228,org.apache.commons.codec.binary.Base64.encodeBase64String(key.valueBytes(objectContext()))));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,259,reader = IndexReader.open(writer, true);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,267,MultiFieldQueryParser parser = new MultiFieldQueryParser(Version.LUCENE_30, idxdFields,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,271,Filter f = new TermRangeFilter(EXPIRATION_TIME_FIELD_NAME, DateTools.timeToString(U.currentTimeMillis(),
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,272,DateTools.Resolution.MILLISECOND), null, false, false);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,277,docs = searcher.search(parser.parse(qry), f, Integer.MAX_VALUE);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,354,return filters == null || filters.apply(key, val) ;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,395,K k = unmarshall(org.apache.commons.codec.binary.Base64.decodeBase64(doc.get(KEY_FIELD_NAME)), ldr);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,399,this.<V>unmarshall(doc.getBinaryValue(VAL_FIELD_NAME), ldr);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,428,U.closeQuiet(searcher);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,24,import org.apache.lucene.store.IndexOutput;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,68,length = file.getLength();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,153,assert numBytes >= 0 : "numBytes=" + numBytes;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,155,GridLuceneOutputStream gridOut = out instanceof GridLuceneOutputStream ? (GridLuceneOutputStream)out : null;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,157,long left = numBytes;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,159,while (left > 0) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,160,if (bufPosition == bufLength) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,161,++currBufIdx;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,163,switchCurrentBuffer(true);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,166,final int bytesInBuf = bufLength - bufPosition;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,167,final int toCp = (int)(bytesInBuf < left ? bytesInBuf : left);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,170,gridOut.writeBytes(currBuf + bufPosition, toCp);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,171,else {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,172,byte[] buff = new byte[toCp];
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,174,mem.readBytes(currBuf + bufPosition, buff);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,176,out.writeBytes(buff, toCp);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,179,bufPosition += toCp;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,181,left -= toCp;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,184,assert left == 0 : "Insufficient bytes to copy: numBytes=" + numBytes + " copied=" + (numBytes - left);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneLockFactory.java,35,return new LockImpl(lockName);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneLockFactory.java,40,locks.remove(lockName);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneLockFactory.java,59,return locks.add(lockName);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneLockFactory.java,64,locks.remove(lockName);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneLockFactory.java,69,return locks.contains(lockName);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,91,setFileLength();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,93,if (pos < bufStart || pos >= bufStart + bufLength) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,94,currBufIdx = (int)(pos / BUFFER_SIZE);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,96,switchCurrentBuffer();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,99,bufPosition = (int)(pos % BUFFER_SIZE);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,104,return file.getLength();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,177,public long sizeInBytes() {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,178,return (long)file.numBuffers() * (long)BUFFER_SIZE;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,221,void writeBytes(long ptr, int len) throws IOException {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,222,while (len > 0) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,223,if (bufPosition == bufLength) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,224,currBufIdx++;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,225,switchCurrentBuffer();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,228,int remainInBuf = BUFFER_SIZE - bufPosition;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,229,int bytesToCp = len < remainInBuf ? len : remainInBuf;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,231,mem.copyMemory(ptr, currBuf + bufPosition, bytesToCp);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,233,ptr += bytesToCp;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,234,len -= bytesToCp;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,235,bufPosition += bytesToCp;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,553,if (node2part != null && node2part.compareTo(partMap) >= 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,555,log.debug("Stale partition map for full partition map update (will ignore) [lastExchId=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,561,updateSeq.incrementAndGet();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,572,if (newPart != null && newPart.updateSequence() < part.updateSequence()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,575,mapString(part) + ", newPart=" + mapString(newPart) + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionFullMap.java,35,implements Comparable<GridDhtPartitionFullMap>, Externalizable {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionFullMap.java,177,assert nodeId == null || (nodeOrder != o.nodeOrder && !nodeId.equals(o.nodeId)) ||
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionFullMap.java,178,(nodeOrder == o.nodeOrder && nodeId.equals(o.nodeId)): "Inconsistent node order and ID [id1=" + nodeId +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionFullMap.java,182,return -1;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionFullMap.java,184,return 1;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionFullMap.java,186,return 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionFullMap.java,188,int res = Long.compare(nodeOrder, o.nodeOrder);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionFullMap.java,191,res = Long.compare(updateSeq, o.updateSeq);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionFullMap.java,193,return res;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,736,BinaryClassDescriptor desc = ctx.descriptorForClass(val.getClass(), false);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,746,doWriteString(val.getClass().getName());
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryBuilderSerializer.java,112,if (val.getClass().isEnum()) {
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryBuilderSerializer.java,113,String clsName = val.getClass().getName();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,552,boolean last = supply.last().contains(p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,564,s.last(part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyMessage.java,62,private Collection<Integer> last;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyMessage.java,136,Collection<Integer> last() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyMessage.java,137,return last == null ? Collections.<Integer>emptySet() : last;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyMessage.java,143,void last(int p) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyMessage.java,145,last = new HashSet<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyMessage.java,147,if (last.add(p)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyMessage.java,148,msgSize += 4;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,1449,onReassignmentFailed(topVer, retries);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,392,return mtd.invoke(svcCtx.service(), args);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,2012,if (loaded.size() != loadKeys.size()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,2015,continue;
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,21,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,22,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,23,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,24,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,97,private final Lock lock = new ReentrantLock();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,232,lock.lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,391,lock.lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,397,lock.unlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,490,lock.lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,492,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,493,curLocVal = locVal;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,504,long curGlobalVal = seq.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,506,long newLocVal;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,509,long off = batchSize > 1 ? batchSize - 1 : 1;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,512,if (curLocVal + l >= curGlobalVal) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,513,newLocVal = curLocVal + l;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,515,newUpBound = newLocVal + off;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,517,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,518,newLocVal = curGlobalVal;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,520,newUpBound = newLocVal + off;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,523,locVal = newLocVal;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,524,upBound = newUpBound;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,527,curLocVal = newLocVal;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,529,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,530,lock.unlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,487,U.cancel(exchWorker);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,490,log.debug("Before joining on exchange worker: " + exchWorker);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,492,U.join(exchWorker, log);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheAdapter.java,40,import org.apache.ignite.internal.processors.cache.CacheObject;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheAdapter.java,49,import org.apache.ignite.internal.processors.cache.GridCacheValueCollection;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheAdapter.java,304,return nearEntries().size() + dht().size();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1326,err = new TransactionDeadlockException(deadlock.toString(cctx.shared()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/GridLocalLockFuture.java,468,new TransactionDeadlockException(deadlock.toString(cctx.shared())));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,5518,return 0;
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,128,SessionFactory sesFactory = createHibernateSessionFactory(hibernateCfg);
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,130,System.out.println();
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,131,System.out.println(">>> Creating objects.");
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,133,final long userId;
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,135,Session ses = sesFactory.openSession();
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,137,try {
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,138,Transaction tx = ses.beginTransaction();
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,140,User user = new User("jedi", "Luke", "Skywalker");
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,142,user.getPosts().add(new Post(user, "Let the Force be with you."));
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,144,ses.save(user);
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,146,tx.commit();
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,150,userId = user.getId();
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,152,finally {
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,153,ses.close();
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,159,printStats(sesFactory);
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,161,System.out.println();
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,162,System.out.println(">>> Querying object by ID.");
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,168,for (int i = 0; i < 3; i++) {
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,169,ses = sesFactory.openSession();
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,171,try {
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,172,Transaction tx = ses.beginTransaction();
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,174,User user = (User)ses.get(User.class, userId);
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,176,System.out.println("User: " + user);
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,179,System.out.println("\tPost: " + post);
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,181,tx.commit();
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,183,finally {
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,184,ses.close();
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,192,printStats(sesFactory);
modules/core/src/main/java/org/apache/ignite/internal/visor/node/VisorNodeDataCollectorJob.java,121,catch (Exception eventsEx) {
modules/core/src/main/java/org/apache/ignite/internal/visor/node/VisorNodeDataCollectorJob.java,173,catch (Exception cachesEx) {
modules/core/src/main/java/org/apache/ignite/internal/visor/node/VisorNodeDataCollectorJob.java,208,catch (Exception igfssEx) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,248,req.taskNameHash());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,112,boolean single
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,113,) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,183,int taskNameHash
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,184,) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,1145,single);
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheConfigurationCollectorJob.java,53,Map<IgniteUuid, VisorCacheConfiguration> res = U.newHashMap(caches.size());
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheConfigurationCollectorJob.java,56,IgniteUuid deploymentId = cache.context().dynamicDeploymentId();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheConfigurationCollectorJob.java,59,res.put(deploymentId, config(cache.getConfiguration(CacheConfiguration.class)));
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheConfigurationCollectorJob.java,69,protected VisorCacheConfiguration config(CacheConfiguration ccfg) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java,543,return cctx.affinityNode() ?
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java,544,Collections.singletonList(cctx.localNode()) :
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java,545,Collections.singletonList(F.rand(nodes(cctx, null, null)));
modules/log4j/src/main/java/org/apache/ignite/logger/log4j/Log4JLogger.java,374,String fmt = "[%d{ABSOLUTE}][%-5p][%t][%c{1}] %m%n";
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/jdbc/GridCacheQueryJdbcTask.java,109,Map<? extends ComputeJob, ClusterNode> node = mapToNode(subgrid, args, first, cache);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/jdbc/GridCacheQueryJdbcTask.java,111,if (node == null && cache == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cluster/ClusterProcessor.java,61,private final AtomicBoolean notifyEnabled = new AtomicBoolean();
modules/core/src/main/java/org/apache/ignite/internal/processors/cluster/ClusterProcessor.java,77,notifyEnabled.set(IgniteSystemProperties.getBoolean(IGNITE_UPDATE_NOTIFIER,
modules/core/src/main/java/org/apache/ignite/internal/processors/cluster/ClusterProcessor.java,78,Boolean.parseBoolean(IgniteProperties.get("ignite.update.notifier.enabled.by.default"))));
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/shuffle/streams/HadoopOffheapBuffer.java,95,assert size > 0 : size;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java,390,BigInteger intVal = new BigInteger(data);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java,392,if (scale < 0) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java,393,scale &= 0x7FFFFFFF;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectOffheapImpl.java,280,BigInteger intVal = new BigInteger(data);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectOffheapImpl.java,282,if (scale < 0) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectOffheapImpl.java,283,scale &= 0x7FFFFFFF;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,386,U.quietAndWarn(log, "No server nodes found for cache client: " + req.cacheName());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1750,assert req.stop() || req.close() : req;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1778,Throwable err
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,175,).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,62,import org.apache.ignite.internal.processors.cache.CachePeekModes;
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,480,ctx.security().authorize(taskClsName, SecurityPermission.TASK_EXECUTE, null);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,686,attrs.put(IgniteNodeAttributes.ATTR_SECURITY_CREDENTIALS,
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/top/GridTopologyCommandHandler.java,42,import org.apache.ignite.internal.processors.rest.client.message.GridClientNodeBean;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3720,node.<byte[]>attribute(IgniteNodeAttributes.ATTR_SECURITY_SUBJECT),
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3721,U.resolveClassLoader(spi.ignite().configuration()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,365,RebalanceFuture fut,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,366,GridDhtPreloaderAssignments assigns
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,367,) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheLockImpl.java,1158,sync.setBroken(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheLockImpl.java,1181,sync.setBroken(true);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,388,stmt.executeUpdate("SET SCHEMA " + schema);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,414,executeStatement("INFORMATION_SCHEMA", "CREATE SCHEMA IF NOT EXISTS " + schema);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,427,executeStatement("INFORMATION_SCHEMA", "DROP SCHEMA IF EXISTS " + schema);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1312,boolean escapeAll = schema.escapeAll();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1650,createSchema(schema);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1652,createSqlFunctions(schema, ccfg.getSqlFunctionClasses());
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,342,final String cacheName = req0.cacheName();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/query/QueryCommandHandler.java,304,IgniteCache<Object, Object> cache = ctx.grid().cache(req.cacheName());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/QueryCursorImpl.java,31,public class QueryCursorImpl<T> implements QueryCursorEx<T> {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,786,pool = Executors.newFixedThreadPool(maxPoolSize);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridAtomicCacheQueueImpl.java,36,private static final long RETRY_TIMEOUT = 3000;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridAtomicCacheQueueImpl.java,97,U.warn(log, "Failed to get item, will retry poll [queue=" + queueName + ", idx=" + idx + ']');
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,1772,final int reachTimeout = 2000;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java,25,import java.util.concurrent.ConcurrentHashMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java,26,import java.util.concurrent.ConcurrentMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,2306,unmarshall(nodeId, cacheMsg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,2308,if (cacheMsg.classError() != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,2310,processFailedMessage(nodeId, cacheMsg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,2363,private void processFailedMessage(UUID nodeId, GridCacheMessage msg) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,2395,fut.onResult(nodeId, res);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/TxDeadlock.java,24,import org.apache.ignite.internal.processors.cache.GridCacheContext;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/TxDeadlock.java,28,import org.apache.ignite.internal.util.typedef.internal.CU;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/TxDeadlock.java,136,GridCacheContext cctx = ctx.cacheContext(txKey.cacheId());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/TxDeadlock.java,138,Object val = CU.value(txKey.key(), cctx, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/TxDeadlock.java,140,sb.append(e.getValue()).append(" [key=").append(val).append(", cache=").append(cctx.namexx()).append("]\n");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/TxLocksResponse.java,184,super.finishUnmarshal(ctx, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/TxLocksResponse.java,186,if (nearTxKeysArr != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/TxLocksResponse.java,187,for (int i = 0; i < nearTxKeysArr.length; i++) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/TxLocksResponse.java,188,IgniteTxKey key = nearTxKeysArr[i];
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/TxLocksResponse.java,190,key.finishUnmarshal(ctx.cacheContext(key.cacheId()), ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/TxLocksResponse.java,192,txLocks().put(key, locksArr[i]);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/TxLocksResponse.java,195,nearTxKeysArr = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/TxLocksResponse.java,196,locksArr = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/TxLocksResponse.java,199,if (txKeysArr != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/TxLocksResponse.java,200,txKeys = U.newHashSet(txKeysArr.length);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/TxLocksResponse.java,202,for (IgniteTxKey key : txKeysArr) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/TxLocksResponse.java,203,key.finishUnmarshal(ctx.cacheContext(key.cacheId()), ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/TxLocksResponse.java,205,txKeys.add(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/TxLocksResponse.java,208,txKeysArr = null;
modules/core/src/main/java/org/apache/ignite/configuration/CacheConfiguration.java,2298,for (Method mtd : c.getDeclaredMethods()) {
modules/core/src/main/java/org/apache/ignite/configuration/CacheConfiguration.java,2299,QuerySqlField sqlAnn = mtd.getAnnotation(QuerySqlField.class);
modules/core/src/main/java/org/apache/ignite/configuration/CacheConfiguration.java,2300,QueryTextField txtAnn = mtd.getAnnotation(QueryTextField.class);
modules/core/src/main/java/org/apache/ignite/configuration/CacheConfiguration.java,2302,if (sqlAnn != null || txtAnn != null) {
modules/core/src/main/java/org/apache/ignite/configuration/CacheConfiguration.java,2304,throw new CacheException("Getter with QuerySqlField " +
modules/core/src/main/java/org/apache/ignite/configuration/CacheConfiguration.java,2307,ClassProperty prop = new ClassProperty(mtd);
modules/core/src/main/java/org/apache/ignite/configuration/CacheConfiguration.java,2309,prop.parent(parent);
modules/core/src/main/java/org/apache/ignite/configuration/CacheConfiguration.java,2330,Class<?> cls, ClassProperty prop, TypeDescriptor desc) {
modules/core/src/main/java/org/apache/ignite/configuration/CacheConfiguration.java,2332,processAnnotationsInClass(key, cls, desc, prop);
modules/core/src/main/java/org/apache/ignite/configuration/CacheConfiguration.java,2338,String idxName = prop.alias() + "_idx";
examples/src/main/java/org/apache/ignite/examples/streaming/wordcount/QueryWords.java,78,System.out.printf("Query results [avg=%.2f, min=%d, max=%d]%n", row.get(0), row.get(1), row.get(2));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,2547,throw new UnsupportedOperationException();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,255,for (GridCacheAtomicFuture<?> cacheFut : atomicFuts.values()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,258,if (cacheFut.isCancelled() || cacheFut.isDone()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProxyImpl.java,1278,CacheOperationContext prev = gate.enter(opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProxyImpl.java,1280,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProxyImpl.java,1281,return delegate.tryGetAndPut(key, val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProxyImpl.java,1283,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProxyImpl.java,1284,gate.leave(prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTryPutFailedException.java,18,package org.apache.ignite.internal.processors.cache;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTryPutFailedException.java,20,import org.apache.ignite.IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTryPutFailedException.java,25,public class GridCacheTryPutFailedException extends IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTryPutFailedException.java,27,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedSingleGetFuture.java,69,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,487,A.notNull(key, "key", val, "val");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,490,key,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,491,val,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,492,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,493,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,494,true,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,495,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,496,false).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,573,true,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,594,true,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,821,true,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,860,true,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,886,final boolean waitTopFut,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,961,opCtx != null && opCtx.noRetries() ? 1 : MAX_RETRIES,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,962,waitTopFut);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1003,createSingleUpdateFuture(key, val, proc, invokeArgs, retval, filter, waitTopFut);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1068,boolean waitTopFut
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1129,opCtx != null && opCtx.noRetries() ? 1 : MAX_RETRIES,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1130,waitTopFut
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1152,opCtx != null && opCtx.noRetries() ? 1 : MAX_RETRIES,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1153,waitTopFut);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1234,opCtx != null && opCtx.noRetries() ? 1 : MAX_RETRIES,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1235,true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2883,MAX_RETRIES,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2884,true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateFuture.java,61,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicAbstractUpdateFuture.java,95,protected final boolean waitTopFut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicAbstractUpdateFuture.java,166,int remapCnt,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicAbstractUpdateFuture.java,167,boolean waitTopFut
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicAbstractUpdateFuture.java,185,this.waitTopFut = waitTopFut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicAbstractUpdateFuture.java,190,remapCnt = 1;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java,32,import org.apache.ignite.internal.processors.cache.GridCacheTryPutFailedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java,107,int remapCnt,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java,108,boolean waitTopFut
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java,163,assert res == null || res instanceof GridCacheReturn;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java,165,GridCacheReturn ret = (GridCacheReturn)res;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java,172,retval = Collections.emptyMap();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java,174,if (super.onDone(retval, err)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java,178,cctx.mvcc().removeAtomicFuture(futVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java,180,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java,537,onDone(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,41,import org.apache.ignite.internal.processors.cache.GridCacheTryPutFailedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,135,int remapCnt,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,136,boolean waitTopFut
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,138,super(cctx, cache, syncMode, op, invokeArgs, retval, rawRetval, expiryPlc, filter, subjId, taskNameHash,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,226,assert res == null || res instanceof GridCacheReturn;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,228,GridCacheReturn ret = (GridCacheReturn)res;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,230,Object retval =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,231,res == null ? null : rawRetval ? ret : (this.retval || op == TRANSFORM) ?
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,232,cctx.unwrapBinaryIfNeeded(ret.value(), keepBinary) : ret.success();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,235,retval = Collections.emptyMap();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,237,if (super.onDone(retval, err)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,243,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,399,onDone(res.error());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,619,onDone(new GridCacheReturn(cctx, true, true, null, true));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,652,onDone(new ClusterTopologyServerNotFoundException("Failed to map keys for cache (all partition nodes " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,734,onDone(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,754,onDone(new GridCacheReturn(cctx, true, true, null, true));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearAtomicCache.java,476,return dht.tryGetAndPut(key, val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/GridLocalLockFuture.java,59,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,52,import org.apache.ignite.binary.BinaryObject;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1480,TypeKind valKind = em.valueKind();
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1484,valKind = TypeKind.BINARY;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1487,Object fieldVal = extractParameter(em.cacheName, em.valueType(), valKind, field.getJavaFieldName(), val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/store/GridCacheStoreManagerAdapter.java,34,import org.apache.ignite.IgniteSystemProperties;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/store/GridCacheStoreManagerAdapter.java,72,import static org.apache.ignite.IgniteSystemProperties.IGNITE_LOCAL_STORE_KEEPS_PRIMARY_ONLY;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,147,public static final int SKIP_STORE_FLAG_MASK = 0x1;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,150,public static final int KEEP_BINARY_FLAG_MASK = 0x2;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedLockRequest.java,40,import static org.apache.ignite.internal.processors.cache.GridCacheUtils.KEEP_BINARY_FLAG_MASK;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedLockRequest.java,41,import static org.apache.ignite.internal.processors.cache.GridCacheUtils.SKIP_STORE_FLAG_MASK;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,64,import org.apache.ignite.internal.util.F0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearSingleGetRequest.java,36,import static org.apache.ignite.internal.processors.cache.GridCacheUtils.SKIP_STORE_FLAG_MASK;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearSingleGetRequest.java,194,return (flags & SKIP_STORE_FLAG_MASK) != 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1490,CacheObject cacheVal = txEntry.hasValue() ? txEntry.value() :
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1491,txEntry.cached().innerGet(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxEntry.java,60,import static org.apache.ignite.internal.processors.cache.GridCacheUtils.KEEP_BINARY_FLAG_MASK;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxEntry.java,61,import static org.apache.ignite.internal.processors.cache.GridCacheUtils.SKIP_STORE_FLAG_MASK;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxEntry.java,486,setFlag(skipStore, SKIP_STORE_FLAG_MASK);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxEntry.java,493,return isFlag(SKIP_STORE_FLAG_MASK);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxEntry.java,502,setFlag(keepBinary, KEEP_BINARY_FLAG_MASK);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxEntry.java,509,return isFlag(KEEP_BINARY_FLAG_MASK);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryListingAddProcessor.java,83,assert fileInfo.isDirectory();
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,631,protected TypeKind kindForName(String type) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,640,catch(ClassNotFoundException ignored) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,641,return TypeKind.BINARY;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,709,TypeKind keyKind = kindForName(keyType);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,712,throw new CacheException("Key type has no class [cache=" + U.maskName(cacheName) +
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,723,TypeKind valKind = kindForName(valType);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,731,if (binarySupported && keyKind == TypeKind.POJO) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,732,keyTypeId = typeIdForTypeName(TypeKind.BINARY, keyType);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,734,valKind = valKind == TypeKind.POJO ? TypeKind.BINARY : valKind;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStore.java,26,import java.util.ArrayList;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,839,if (perNodeCnt > maxPerNodeCnt && maxPerNodeCnt != 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4137,saveFuture(holder, f);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4144,saveFuture(holder, f);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4305,return asyncOp(tx, op, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4310,fut.execute();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4316,return asyncOp(tx, op, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4329,final CacheOperationContext opCtx
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4331,IgniteInternalFuture<T> fail = asyncOpAcquire();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4374,saveFuture(holder, f);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4398,saveFuture(holder, f);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4417,protected void saveFuture(final FutureHolder holder, IgniteInternalFuture<?> fut) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4427,asyncOpRelease();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4432,asyncOpRelease();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4935,public void execute() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4946,IgniteInternalFuture<T> fut = asyncOp(tx, op, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4976,execute();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,674,IgniteInternalFuture<T> fail = asyncOpAcquire();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,698,saveFuture(holder, f);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,705,saveFuture(holder, f);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedCache.java,64,import org.apache.ignite.internal.processors.cache.transactions.IgniteTxLocalAdapter;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedCache.java,74,import org.apache.ignite.internal.util.typedef.T2;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1588,IgniteInternalFuture fail = asyncOpAcquire();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1608,saveFuture(holder, f);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1615,saveFuture(holder, f);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/client/message/GridClientNodeBean.java,253,out.writeObject(consistentId);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,565,binaryCache.remove(cached.id());
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,567,else if (!cached.getId().equals(sesId)) {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,568,final String oldId = cached.getId();
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,570,cached.invalidate();
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,572,binaryCache.remove(oldId);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,574,else
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,575,updateAttributesV2(cached.getId(), cached);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,1001,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSemaphoreImpl.java,357,protected boolean releaseFailedNode(final UUID nodeId) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSemaphoreImpl.java,541,sync.releaseFailedNode(nodeId);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSemaphoreImpl.java,542,else {
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryObjectBuilderImpl.java,520,Object oldVal = assignedVals.put(name, val);
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryObjectBuilderImpl.java,525,assignedVals.put(name, oldVal);
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryObjectBuilderImpl.java,543,assignedVals = new LinkedHashMap<>();
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryObjectBuilderImpl.java,545,assignedVals.put(name, new BinaryValueWithType(typeId, val));
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryObjectBuilderImpl.java,566,assignedVals = new LinkedHashMap<>();
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryObjectBuilderImpl.java,568,assignedVals.put(name, REMOVED_FIELD_MARKER);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,759,threadProcessingMessage(true);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,773,threadProcessingMessage(false);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,808,threadProcessingMessage(true);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,813,threadProcessingMessage(false);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1146,threadProcessingMessage(true);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1151,threadProcessingMessage(false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,96,import org.apache.ignite.internal.util.typedef.T2;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioBackPressureControl.java,25,private static ThreadLocal<Boolean> threadProcMsg = new ThreadLocal<Boolean>() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioBackPressureControl.java,27,return Boolean.FALSE;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioBackPressureControl.java,35,return threadProcMsg.get();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioBackPressureControl.java,41,public static void threadProcessingMessage(boolean processing) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioBackPressureControl.java,42,threadProcMsg.set(processing);
modules/core/src/main/java/org/apache/ignite/configuration/IgniteConfiguration.java,68,import org.apache.ignite.spi.eventstorage.memory.MemoryEventStorageSpi;
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,92,import org.apache.ignite.spi.eventstorage.memory.MemoryEventStorageSpi;
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,2032,cfg.setEventStorageSpi(new MemoryEventStorageSpi());
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,787,public <T extends Event> Collection<T> localEvents(IgnitePredicate<T> p) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,447,rmts = ring.visibleRemoteNodes();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,467,List<ClusterNode> top = U.arrayList(rmts, F.notIn(processed));
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,409,if (cls != null && ctx.config().getMarshaller() instanceof BinaryMarshaller) {
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcConnection.java,184,else
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcConnection.java,185,ignite = Ignition.start(loadConfiguration(cfgUrl));
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcConnection.java,207,private IgniteConfiguration loadConfiguration(String cfgUrl) {
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcConnection.java,219,return cfg;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,1532,private abstract class BusyRunnable implements Runnable {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,1550,busyLock.leaveBusy();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,38,import java.util.NavigableMap;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,40,import java.util.TreeMap;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,82,import org.apache.ignite.internal.util.F0;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,87,import org.apache.ignite.internal.util.lang.GridTuple5;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,89,import org.apache.ignite.internal.util.tostring.GridToStringInclude;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,90,import org.apache.ignite.internal.util.typedef.C1;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,102,import org.apache.ignite.lang.IgniteProductVersion;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,232,private GridFutureAdapter<DiscoveryEvent> locJoinEvt = new GridFutureAdapter<>();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,545,DiscoCache cache = new DiscoCache(locNode, F.view(topSnapshot, F.remoteNodes(locNode.id())));
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,547,discoCacheHist.put(nextTopVer, cache);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,549,boolean set = updateTopologyVersionIfGreater(nextTopVer, cache);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,562,new DiscoCache(localNode(), F.view(topSnapshot, F.remoteNodes(locNode.id()))));
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,572,discoEvt.topologySnapshot(topVer, new ArrayList<>(
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,573,F.viewReadOnly(topSnapshot, new C1<ClusterNode, ClusterNode>() {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,575,return e;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,579,locJoinEvt.onDone(discoEvt);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,594,locJoinEvt = new GridFutureAdapter<>();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,603,new DiscoCache(locNode, Collections.<ClusterNode>emptySet())));
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,620,discoWrk.addEvent(type, nextTopVer, node, topSnapshot, null);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,632,discoWrk.addEvent(type, nextTopVer, node, topSnapshot, customMsg);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1263,locJoinEvt.onDone(
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1515,return resolveDiscoCache(null, topVer).allNodes();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1523,return resolveDiscoCache(null, topVer).srvNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1534,return resolveDiscoCache(null, topVer).node(id);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1545,return resolveDiscoCache(cacheName, topVer).cacheNodes(cacheName, topVer.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1554,public Collection<ClusterNode> cacheNodes(AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1555,return resolveDiscoCache(null, topVer).allNodesWithCaches(topVer.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1575,public Collection<ClusterNode> remoteCacheNodes(AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1576,return resolveDiscoCache(null, topVer).remoteCacheNodes(topVer.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1587,return resolveDiscoCache(cacheName, topVer).aliveCacheNodes(cacheName, topVer.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1598,return resolveDiscoCache(cacheName, topVer).aliveRemoteCacheNodes(cacheName, topVer.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1639,return resolveDiscoCache(cacheName, topVer).cacheAffinityNodes(cacheName, topVer.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1715,public boolean hasNearCache(@Nullable String cacheName, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1716,return resolveDiscoCache(cacheName, topVer).hasNearCache(cacheName);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1726,private DiscoCache resolveDiscoCache(@Nullable String cacheName, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1743,throw new IgniteException("Failed to resolve nodes topology [cacheName=" + cacheName +
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1794,return locJoinEvt.get();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1968,discoWrk.addEvent(EVT_NODE_SEGMENTED, AffinityTopologyVersion.NONE, getSpi().getLocalNode(),
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1969,Collections.<ClusterNode>emptyList(), null);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1989,private final BlockingQueue<GridTuple5<Integer, AffinityTopologyVersion, ClusterNode, Collection<ClusterNode>,
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1990,DiscoveryCustomMessage>> evts = new LinkedBlockingQueue<>();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2011,private void recordEvent(int type, long topVer, ClusterNode node, Collection<ClusterNode> topSnapshot) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2047,ctx.event().record(evt);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2067,evts.add(new GridTuple5<>(type, topVer, node, topSnapshot, data));
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2104,GridTuple5<Integer, AffinityTopologyVersion, ClusterNode, Collection<ClusterNode>,
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2236,customEvt.topologySnapshot(topVer.topologyVersion(), evt.get4());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2238,customEvt.customMessage(evt.get5());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2240,ctx.event().record(customEvt);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2254,recordEvent(type, topVer.topologyVersion(), node, evt.get4());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2465,private class DiscoCache {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2467,private final List<ClusterNode> rmtNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2470,private final List<ClusterNode> allNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2473,private final List<ClusterNode> srvNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2477,private final Collection<ClusterNode> allNodesWithCaches;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2481,private final Collection<ClusterNode> rmtNodesWithCaches;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2485,private final Map<String, Collection<ClusterNode>> allCacheNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2489,private final Map<String, Collection<ClusterNode>> rmtCacheNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2493,private final Map<String, Collection<ClusterNode>> affCacheNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2497,private final Set<String> nearEnabledCaches;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2500,private final NavigableMap<IgniteProductVersion, Collection<ClusterNode>> nodesByVer;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2503,private final List<ClusterNode> daemonNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2506,private final Map<UUID, ClusterNode> nodeMap;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2509,private final ClusterNode loc;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2512,private final long maxOrder;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2518,private final ConcurrentMap<String, Collection<ClusterNode>> aliveCacheNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2524,private final ConcurrentMap<String, Collection<ClusterNode>> aliveRmtCacheNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2545,private DiscoCache(ClusterNode loc, Collection<ClusterNode> rmts) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2546,this.loc = loc;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2548,rmtNodes = Collections.unmodifiableList(new ArrayList<>(F.view(rmts, FILTER_DAEMON)));
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2550,assert !rmtNodes.contains(loc) : "Remote nodes collection shouldn't contain local node" +
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2553,List<ClusterNode> all = new ArrayList<>(rmtNodes.size() + 1);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2556,all.add(loc);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2558,all.addAll(rmtNodes);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2560,Collections.sort(all, GridNodeOrderComparator.INSTANCE);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2562,allNodes = Collections.unmodifiableList(all);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2564,Map<String, Collection<ClusterNode>> cacheMap = new HashMap<>(allNodes.size(), 1.0f);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2565,Map<String, Collection<ClusterNode>> rmtCacheMap = new HashMap<>(allNodes.size(), 1.0f);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2566,Map<String, Collection<ClusterNode>> dhtNodesMap = new HashMap<>(allNodes.size(), 1.0f);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2567,Collection<ClusterNode> nodesWithCaches = new HashSet<>(allNodes.size());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2568,Collection<ClusterNode> rmtNodesWithCaches = new HashSet<>(allNodes.size());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2570,aliveCacheNodes = new ConcurrentHashMap8<>(allNodes.size(), 1.0f);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2571,aliveRmtCacheNodes = new ConcurrentHashMap8<>(allNodes.size(), 1.0f);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2575,nodesByVer = new TreeMap<>();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2577,long maxOrder0 = 0;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2579,Set<String> nearEnabledSet = new HashSet<>();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2581,List<ClusterNode> srvNodes = new ArrayList<>();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2583,for (ClusterNode node : allNodes) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2584,assert node.order() != 0 : "Invalid node order [locNode=" + loc + ", node=" + node + ']';
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2585,assert !node.isDaemon();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2588,srvNodes.add(node);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2591,maxOrder0 = node.order();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2593,boolean hasCaches = false;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2595,for (Map.Entry<String, CachePredicate> entry : registeredCaches.entrySet()) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2596,String cacheName = entry.getKey();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2598,CachePredicate filter = entry.getValue();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2600,if (filter.cacheNode(node)) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2601,nodesWithCaches.add(node);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2604,rmtNodesWithCaches.add(node);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2606,addToMap(cacheMap, cacheName, node);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2609,addToMap(aliveCacheNodes, maskNull(cacheName), node);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2612,addToMap(dhtNodesMap, cacheName, node);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2615,nearEnabledSet.add(cacheName);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2617,if (!loc.id().equals(node.id())) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2618,addToMap(rmtCacheMap, cacheName, node);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2621,addToMap(aliveRmtCacheNodes, maskNull(cacheName), node);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2624,hasCaches = true;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2641,IgniteProductVersion nodeVer = U.productVersion(node);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2644,Collection<ClusterNode> nodes = nodesByVer.get(nodeVer);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2646,if (nodes == null) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2647,nodes = new ArrayList<>(allNodes.size());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2649,nodesByVer.put(nodeVer, nodes);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2652,nodes.add(node);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2655,Collections.sort(srvNodes, CU.nodeComparator(true));
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2658,for (ClusterNode node : allNodes) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2659,IgniteProductVersion nodeVer = U.productVersion(node);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2662,NavigableMap<IgniteProductVersion, Collection<ClusterNode>> updateView =
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2663,nodesByVer.headMap(nodeVer, false);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2666,prevVersions.add(node);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2669,maxOrder = maxOrder0;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2671,allCacheNodes = Collections.unmodifiableMap(cacheMap);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2672,rmtCacheNodes = Collections.unmodifiableMap(rmtCacheMap);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2673,affCacheNodes = Collections.unmodifiableMap(dhtNodesMap);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2674,allNodesWithCaches = Collections.unmodifiableCollection(nodesWithCaches);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2675,this.rmtNodesWithCaches = Collections.unmodifiableCollection(rmtNodesWithCaches);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2676,nearEnabledCaches = Collections.unmodifiableSet(nearEnabledSet);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2677,this.srvNodes = Collections.unmodifiableList(srvNodes);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2679,daemonNodes = Collections.unmodifiableList(new ArrayList<>(
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2680,F.view(F.concat(false, loc, rmts), F0.not(FILTER_DAEMON))));
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2682,Map<UUID, ClusterNode> nodeMap = new HashMap<>(allNodes().size() + daemonNodes.size(), 1.0f);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2685,nodeMap.put(n.id(), n);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2687,this.nodeMap = nodeMap;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2697,private void addToMap(Map<String, Collection<ClusterNode>> cacheMap, String cacheName, ClusterNode rich) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2698,Collection<ClusterNode> cacheNodes = cacheMap.get(cacheName);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2700,if (cacheNodes == null) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2701,cacheNodes = new ArrayList<>(allNodes.size());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2703,cacheMap.put(cacheName, cacheNodes);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2706,cacheNodes.add(rich);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2710,ClusterNode localNode() {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2711,return loc;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2715,Collection<ClusterNode> remoteNodes() {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2716,return rmtNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2720,Collection<ClusterNode> allNodes() {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2721,return allNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2730,Collection<ClusterNode> elderNodes(IgniteProductVersion ver) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2731,Map.Entry<IgniteProductVersion, Collection<ClusterNode>> entry = nodesByVer.ceilingEntry(ver);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2734,return Collections.emptyList();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2736,return entry.getValue();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2742,NavigableMap<IgniteProductVersion, Collection<ClusterNode>> versionsMap() {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2743,return nodesByVer;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2752,Collection<ClusterNode> allNodesWithCaches(final long topVer) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2753,return filter(topVer, allNodesWithCaches);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2763,Collection<ClusterNode> cacheNodes(@Nullable String cacheName, final long topVer) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2764,return filter(topVer, allCacheNodes.get(cacheName));
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2784,Collection<ClusterNode> remoteCacheNodes(final long topVer) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2785,return filter(topVer, rmtNodesWithCaches);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2796,Collection<ClusterNode> cacheAffinityNodes(@Nullable String cacheName, final long topVer) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2797,return filter(topVer, affCacheNodes.get(cacheName));
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2807,Collection<ClusterNode> aliveCacheNodes(@Nullable String cacheName, final long topVer) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2808,return filter(topVer, aliveCacheNodes.get(maskNull(cacheName)));
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2818,Collection<ClusterNode> aliveRemoteCacheNodes(@Nullable String cacheName, final long topVer) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2819,return filter(topVer, aliveRmtCacheNodes.get(maskNull(cacheName)));
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2858,boolean hasNearCache(@Nullable String cacheName) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2859,return nearEnabledCaches.contains(cacheName);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2867,void updateAlives(ClusterNode leftNode) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2869,return;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2871,filterNodeMap(aliveCacheNodes, leftNode);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2873,filterNodeMap(aliveRmtCacheNodes, leftNode);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2876,aliveSrvNodesWithCaches.remove(leftNode);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2886,private void filterNodeMap(ConcurrentMap<String, Collection<ClusterNode>> map, final ClusterNode exclNode) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2887,for (String cacheName : registeredCaches.keySet()) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2888,String maskedName = maskNull(cacheName);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2890,while (true) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2891,Collection<ClusterNode> oldNodes = map.get(maskedName);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2894,break;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2896,Collection<ClusterNode> newNodes = new ArrayList<>(oldNodes);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2899,break;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2902,break;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2913,private String maskNull(@Nullable String cacheName) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2914,return cacheName == null ? NULL_CACHE_NAME : cacheName;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2922,private Collection<ClusterNode> filter(final long topVer, @Nullable Collection<ClusterNode> nodes) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2924,return Collections.emptyList();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2927,return nodes.isEmpty() || topVer < 0 || topVer >= maxOrder ?
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2928,nodes :
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2929,F.view(nodes, new P1<ClusterNode>() {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2931,return node.order() <= topVer;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2937,Collection<ClusterNode> daemonNodes() {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2938,return daemonNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2946,return nodeMap.get(id);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2951,return S.toString(DiscoCache.class, this, "allNodesWithDaemons", U.toShortString(allNodes));
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,573,getOrCreate(t).add(lsnr);
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,598,getOrCreate(type).add(lsnr);
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,605,getOrCreate(t).add(lsnr);
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,621,private Collection<GridLocalEventListener> getOrCreate(Integer type) {
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,622,Set<GridLocalEventListener> set = lsnrs.get(type);
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,627,Set<GridLocalEventListener> prev = lsnrs.putIfAbsent(type, set);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,243,public List<List<ClusterNode>> calculate(AffinityTopologyVersion topVer, DiscoveryEvent discoEvt) {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,254,sorted = new ArrayList<>(ctx.discovery().cacheAffinityNodes(cacheName, topVer));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,406,fut.discoveryEvent());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,752,List<List<ClusterNode>> newAff = cache.affinity().calculate(fut.topologyVersion(), fut.discoveryEvent());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,790,cache.affinity().calculate(fut.topologyVersion(), fut.discoveryEvent());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,816,List<List<ClusterNode>> assignment = aff.calculate(fut.topologyVersion(), fut.discoveryEvent());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,823,fut.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,877,List<List<ClusterNode>> newAff = cache.affinity().calculate(topVer, fut.discoveryEvent());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,944,cacheCtx.affinity().affinityCache().calculate(fut.topologyVersion(), fut.discoveryEvent());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,951,topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,985,List<List<ClusterNode>> aff = affCache.calculate(topVer, fut.discoveryEvent());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,997,affCache.calculate(topVer, fut.discoveryEvent());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,1027,cacheCtx.affinity().affinityCache().calculate(fut.topologyVersion(), fut.discoveryEvent());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,1077,cache.affinity().calculate(fut.topologyVersion(), fut.discoveryEvent());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,1117,prev.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,1128,aff.calculate(fut.topologyVersion(), fut.discoveryEvent());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java,1264,List<List<ClusterNode>> idealAssignment = aff.calculate(topVer, fut.discoveryEvent());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,80,aff.calculate(LOC_CACHE_TOP_VER, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,44,import org.apache.ignite.events.Event;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,51,import org.apache.ignite.internal.managers.eventstorage.GridLocalEventListener;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,163,private final GridLocalEventListener discoLsnr = new GridLocalEventListener() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,169,DiscoveryEvent e = (DiscoveryEvent)evt;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,173,assert e.type() == EVT_NODE_JOINED || e.type() == EVT_NODE_LEFT || e.type() == EVT_NODE_FAILED ||
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,174,e.type() == EVT_DISCOVERY_CUSTOM_EVT;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,176,final ClusterNode n = e.eventNode();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,181,if (e.type() != EVT_DISCOVERY_CUSTOM_EVT) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,184,if (e.type() == EVT_NODE_LEFT || e.type() == EVT_NODE_FAILED) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,191,initFut = exchangeFuture(initialExchangeId(), null, null, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,203,e.type() != EVT_NODE_JOINED || n.order() > loc.order() :
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,208,affinityTopologyVersion(e),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,209,e.type());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,211,exchFut = exchangeFuture(exchId, e, null, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,214,DiscoveryCustomEvent customEvt = (DiscoveryCustomEvent)e;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,244,exchId = exchangeId(n.id(), affinityTopologyVersion(e), e.type());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,246,exchFut = exchangeFuture(exchId, e, valid, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,254,exchId = exchangeId(n.id(), affinityTopologyVersion(e), e.type());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,256,exchFut = exchangeFuture(exchId, e, null, msg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,260,exchangeFuture(msg.exchangeId(), null, null, null).onAffinityChangeMessage(customEvt.eventNode(), msg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,269,exchFut.onEvent(exchId, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,291,cctx.gridEvents().addLocalEventListener(discoLsnr, EVT_NODE_JOINED, EVT_NODE_LEFT, EVT_NODE_FAILED,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,349,DiscoveryEvent discoEvt = cctx.discovery().localJoinEvent();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,353,GridDhtPartitionsExchangeFuture fut = exchangeFuture(exchId, discoEvt, null, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,460,cctx.gridEvents().removeLocalEventListener(discoLsnr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,874,fut.onEvent(exchId, discoEvt);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1018,exchangeFuture(msg.exchangeId(), null, null, null).onReceive(node, msg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1084,exchangeFuture(msg.exchangeId(), null, null, null).onReceive(node, msg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,45,import org.apache.ignite.internal.util.typedef.internal.CU;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,411,ClusterNode n = cctx.discovery().node(nodeId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,437,Collection<UUID> allIds = topVer.topologyVersion() > 0 ? F.nodeIds(CU.allNodes(cctx, topVer)) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,460,ClusterNode n = cctx.discovery().node(id);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtAssignmentFetchFuture.java,79,AffinityTopologyVersion topVer
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtAssignmentFetchFuture.java,84,Collection<ClusterNode> availableNodes = ctx.discovery().cacheAffinityNodes(cacheName, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,880,Collection<UUID> allIds = topVer.topologyVersion() > 0 ? F.nodeIds(CU.affinityNodes(cctx, topVer)) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1256,Collection<UUID> nodeIds = F.nodeIds(nodes(p, topVer, OWNING));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1274,List<ClusterNode> sorted = new ArrayList<>(cctx.discovery().nodes(nodeIds));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1277,Collections.sort(sorted, CU.nodeComparator(true));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1279,int diff = sorted.size() - affCnt;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1282,ClusterNode n = sorted.get(i);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1371,ClusterNode oldest = CU.oldest(cctx.discovery().serverNodes(topVer));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2207,boolean checkReaders = hasNear || ctx.discovery().hasNearCache(name(), topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2441,boolean checkReaders = hasNear || ctx.discovery().hasNearCache(name(), topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,47,import org.apache.ignite.internal.managers.discovery.GridDiscoveryTopologySnapshot;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,144,private AtomicReference<GridDiscoveryTopologySnapshot> topSnapshot = new AtomicReference<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,371,public void onEvent(GridDhtPartitionExchangeId exchId, DiscoveryEvent discoEvt) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,431,srvNodes = new ArrayList<>(cctx.discovery().serverNodes(topologyVersion()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,835,if (cctx.discovery().cacheAffinityNodes(name, topologyVersion()).isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,1127,topSnapshot.set(null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,1246,if (!crd.equals(cctx.discovery().serverNodes(topologyVersion()).get(0))) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,46,import org.apache.ignite.events.Event;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,57,import org.apache.ignite.internal.managers.eventstorage.GridLocalEventListener;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,143,private GridLocalEventListener topLsnr = new TopologyListener();
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,183,ctx.event().addLocalEventListener(topLsnr, EVTS);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,227,ctx.event().removeLocalEventListener(topLsnr);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,1303,private class TopologyListener implements GridLocalEventListener {
modules/core/src/main/java/org/apache/ignite/internal/GridKernalGatewayImpl.java,47,private IgniteFutureImpl<?> reconnectFut;
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,926,comp.onKernalStart();
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,3133,IgniteFuture<?> userFut = new IgniteFutureImpl<>(reconnectFut);
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,3135,ctx.cluster().get().clientReconnectFuture(userFut);
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,3188,GridCompoundFuture<?, ?> reconnectFut = new GridCompoundFuture<>();
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,3194,reconnectFut.add((IgniteInternalFuture)fut);
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,3197,reconnectFut.add((IgniteInternalFuture)ctx.cache().context().exchange().reconnectExchangeFuture());
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,3199,reconnectFut.markInitialized();
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,3201,reconnectFut.listen(new CI1<IgniteInternalFuture<?>>() {
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,3204,fut.get();
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,3209,U.error(log, "Failed to reconnect, will stop node", e);
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,3211,close();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1523,catch (IgniteClientDisconnectedCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtAssignmentFetchFuture.java,25,import java.util.concurrent.Executor;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtAssignmentFetchFuture.java,205,U.error(log0, "Failed to request affinity assignment from remote node (will " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,503,U.error(log, "Failed to reinitialize local partitions (preloading will be stopped): " + exchId, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,505,onDone(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,1286,onDone(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,1303,log.debug("Failed to send full partition map to node, node left grid " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,841,protected SocketReader() {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,849,public void setSocket(SocketStream sockStream, UUID rmtNodeId) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,965,private final long socketTimeout;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,973,protected SocketWriter() {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,976,socketTimeout = spi.failureDetectionTimeoutEnabled() ? spi.failureDetectionTimeout() :
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1050,if (msg == null) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1051,mux.wait();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1074,socketTimeout);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1420,state = DISCONNECTED;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1422,nodeAdded = false;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1424,IgniteClientDisconnectedCheckedException err =
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1425,new IgniteClientDisconnectedCheckedException(null, "Failed to ping node, " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1428,for (Map.Entry<UUID, GridFutureAdapter<Boolean>> e : pingFuts.entrySet()) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1429,GridFutureAdapter<Boolean> fut = e.getValue();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1432,fut.onDone(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,269,U.shutdownNow(GridServiceProcessor.class, depExe, log);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,1325,depExe.submit(new BusyRunnable() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,37,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,38,import java.util.Collections;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,39,import java.util.List;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,40,import java.util.Set;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,41,import java.util.UUID;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,95,aff.cancelFutures(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,103,aff.cancelFutures(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheManagerAdapter.java,37,private final AtomicBoolean starting = new AtomicBoolean(false);
modules/core/src/main/java/org/apache/ignite/cache/eviction/EvictionPolicy.java,22,import org.apache.ignite.cache.eviction.random.RandomEvictionPolicy;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,21,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,22,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,23,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,27,import org.apache.ignite.cache.eviction.EvictionPolicy;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,28,import org.apache.ignite.internal.util.typedef.internal.A;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,32,import org.jsr166.LongAdder8;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,34,import static org.apache.ignite.configuration.CacheConfiguration.DFLT_CACHE_SIZE;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,54,public class FifoEvictionPolicy<K, V> implements EvictionPolicy<K, V>, FifoEvictionPolicyMBean, Externalizable {
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,59,private volatile int max = DFLT_CACHE_SIZE;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,62,private volatile int batchSize = 1;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,65,private volatile long maxMemSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,68,private final LongAdder8 memSize = new LongAdder8();
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,87,A.ensure(max >= 0, "max >= 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,89,this.max = max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,99,A.ensure(max >= 0, "max >= 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,100,A.ensure(batchSize > 0, "batchSize > 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,102,this.max = max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,103,this.batchSize = batchSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,112,return max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,121,A.ensure(max >= 0, "max >= 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,123,this.max = max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,128,return batchSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,133,A.ensure(batchSize > 0, "batchSize > 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,135,this.batchSize = batchSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,145,return maxMemSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,150,A.ensure(maxMemSize >= 0, "maxMemSize >= 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,152,this.maxMemSize = maxMemSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,157,return memSize.longValue();
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,171,if (!rmv) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,173,return;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,177,shrink();
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,179,else {
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,180,Node<EvictableEntry<K, V>> node = entry.removeMeta();
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,182,if (node != null) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,183,queue.unlinkx(node);
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,185,memSize.add(-entry.size());
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,194,private boolean touch(EvictableEntry<K, V> entry) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,217,memSize.add(entry.size());
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,234,private void shrink() {
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,235,long maxMem = this.maxMemSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,237,if (maxMem > 0) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,238,long startMemSize = memSize.longValue();
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,241,for (long i = maxMem; i < startMemSize && memSize.longValue() > maxMem;) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,242,int size = shrink0();
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,245,break;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,247,i += size;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,251,int max = this.max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,253,if (max > 0) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,254,int startSize = queue.sizex();
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,260,break;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,269,private int shrink0() {
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,282,memSize.add(-size);
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,293,out.writeInt(max);
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,294,out.writeInt(batchSize);
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,295,out.writeLong(maxMemSize);
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,300,max = in.readInt();
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,301,batchSize = in.readInt();
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,302,maxMemSize = in.readLong();
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,21,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,22,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,23,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,27,import org.apache.ignite.cache.eviction.EvictionPolicy;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,28,import org.apache.ignite.internal.util.typedef.internal.A;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,32,import org.jsr166.LongAdder8;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,34,import static org.apache.ignite.configuration.CacheConfiguration.DFLT_CACHE_SIZE;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,53,public class LruEvictionPolicy<K, V> implements EvictionPolicy<K, V>, LruEvictionPolicyMBean, Externalizable {
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,58,private volatile int max = DFLT_CACHE_SIZE;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,61,private volatile int batchSize = 1;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,64,private volatile long maxMemSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,67,private final LongAdder8 memSize = new LongAdder8();
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,86,A.ensure(max >= 0, "max >= 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,88,this.max = max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,97,return max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,106,A.ensure(max >= 0, "max >= 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,108,this.max = max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,113,return batchSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,118,A.ensure(batchSize > 0, "batchSize > 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,120,this.batchSize = batchSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,130,return maxMemSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,135,A.ensure(maxMemSize >= 0, "maxMemSize >= 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,137,this.maxMemSize = maxMemSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,142,return memSize.longValue();
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,156,if (!rmv) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,158,return;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,161,shrink();
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,163,else {
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,164,Node<EvictableEntry<K, V>> node = entry.removeMeta();
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,166,if (node != null) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,167,queue.unlinkx(node);
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,169,memSize.add(-entry.size());
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,178,private boolean touch(EvictableEntry<K, V> entry) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,188,queue.unlinkx(node);
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,196,queue.unlinkx(node);
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,201,memSize.add(entry.size());
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,210,else if (queue.unlinkx(node)) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,216,queue.unlinkx(newNode);
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,226,private void shrink() {
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,227,long maxMem = this.maxMemSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,229,if (maxMem > 0) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,230,long startMemSize = memSize.longValue();
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,233,for (long i = maxMem; i < startMemSize && memSize.longValue() > maxMem;) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,234,int size = shrink0();
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,237,break;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,239,i += size;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,243,int max = this.max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,245,if (max > 0) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,246,int startSize = queue.sizex();
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,251,break;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,260,private int shrink0() {
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,273,memSize.add(-size);
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,284,out.writeInt(max);
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,285,out.writeInt(batchSize);
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,286,out.writeLong(maxMemSize);
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,291,max = in.readInt();
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,292,batchSize = in.readInt();
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,293,maxMemSize = in.readLong();
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,298,return S.toString(LruEvictionPolicy.class, this, "size", queue.sizex());
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,18,package org.apache.ignite.cache.eviction.random;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,20,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,21,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,22,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,23,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,24,import javax.cache.Cache;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,25,import org.apache.ignite.IgniteCache;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,26,import org.apache.ignite.cache.CachePeekMode;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,27,import org.apache.ignite.cache.eviction.EvictableEntry;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,28,import org.apache.ignite.cache.eviction.EvictionPolicy;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,29,import org.apache.ignite.internal.util.typedef.internal.A;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,30,import org.apache.ignite.internal.util.typedef.internal.S;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,32,import static org.apache.ignite.configuration.CacheConfiguration.DFLT_CACHE_SIZE;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,47,public class RandomEvictionPolicy<K, V> implements EvictionPolicy<K, V>, RandomEvictionPolicyMBean, Externalizable {
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,49,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,52,private volatile int max = DFLT_CACHE_SIZE;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,57,public RandomEvictionPolicy() {
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,66,public RandomEvictionPolicy(int max) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,67,A.ensure(max > 0, "max > 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,69,this.max = max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,78,return max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,87,A.ensure(max > 0, "max > 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,89,this.max = max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,96,return;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,98,IgniteCache<K, V> cache = entry.unwrap(IgniteCache.class);
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,100,int size = cache.localSize(CachePeekMode.ONHEAP);
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,102,for (int i = max; i < size; i++) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,103,Cache.Entry<K, V> e = cache.randomEntry();
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,106,e.unwrap(EvictableEntry.class).evict();
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,112,out.writeInt(max);
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,117,max = in.readInt();
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,122,return S.toString(RandomEvictionPolicy.class, this);
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicyMBean.java,18,package org.apache.ignite.cache.eviction.random;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicyMBean.java,20,import org.apache.ignite.mxbean.MXBeanDescription;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicyMBean.java,26,public interface RandomEvictionPolicyMBean {
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicyMBean.java,33,public int getMaxSize();
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicyMBean.java,41,public void setMaxSize(int max);
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,33,import org.apache.ignite.cache.eviction.EvictionPolicy;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,62,public class SortedEvictionPolicy<K, V> implements EvictionPolicy<K, V>, SortedEvictionPolicyMBean, Externalizable {
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,67,private volatile int max = DFLT_CACHE_SIZE;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,70,private volatile int batchSize = 1;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,73,private volatile long maxMemSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,76,private final LongAdder8 memSize = new LongAdder8();
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,121,A.ensure(max >= 0, "max >= 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,122,A.ensure(batchSize > 0, "batchSize > 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,124,this.max = max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,125,this.batchSize = batchSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,146,return max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,155,A.ensure(max >= 0, "max >= 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,157,this.max = max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,162,return batchSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,167,A.ensure(batchSize > 0, "batchSize > 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,169,this.batchSize = batchSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,174,return set.sizex();
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,179,return maxMemSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,184,A.ensure(maxMemSize >= 0, "maxMemSize >= 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,186,this.maxMemSize = maxMemSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,191,return memSize.longValue();
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,210,if (!rmv) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,212,return;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,215,shrink();
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,217,else {
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,218,Holder<K, V> holder = entry.removeMeta();
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,220,if (holder != null) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,221,removeHolder(holder);
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,223,memSize.add(-entry.size());
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,232,private boolean touch(EvictableEntry<K, V> entry) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,248,removeHolder(holder);
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,253,memSize.add(entry.size());
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,270,private void shrink() {
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,271,long maxMem = this.maxMemSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,273,if (maxMem > 0) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,274,long startMemSize = memSize.longValue();
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,277,for (long i = maxMem; i < startMemSize && memSize.longValue() > maxMem;) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,278,int size = shrink0();
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,281,break;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,283,i += size;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,287,int max = this.max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,289,if (max > 0) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,290,int startSize = set.sizex();
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,292,if (startSize >= max + (maxMem > 0 ? 1 : this.batchSize)) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,293,for (int i = max; i < startSize && set.sizex() > max; i++) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,295,break;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,306,private int shrink0() {
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,316,if (h.order > 0 && entry.removeMeta(h)) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,319,memSize.add(-size);
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,330,out.writeInt(max);
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,331,out.writeInt(batchSize);
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,332,out.writeLong(maxMemSize);
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,339,max = in.readInt();
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,340,batchSize = in.readInt();
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,341,maxMemSize = in.readLong();
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,350,private void removeHolder(Holder<K, V> holder) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,356,set.remove(holder);
modules/core/src/main/java/org/apache/ignite/internal/visor/util/VisorTaskUtils.java,55,import org.apache.ignite.cache.eviction.random.RandomEvictionPolicyMBean;
modules/core/src/main/java/org/apache/ignite/internal/visor/util/VisorTaskUtils.java,679,return ((RandomEvictionPolicyMBean)plc).getMaxSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,21,import org.apache.ignite.IgniteCompute;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,29,import org.apache.ignite.lang.IgniteCallable;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,97,private boolean callAsync(IgniteCallable<Integer> subJob, int idx) {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,98,IgniteCompute compute = ignite.compute(ignite.cluster().forCacheNodes(cacheName)).withAsync();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,100,compute.call(subJob);
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,102,IgniteFuture<Integer> fut = compute.future();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,122,IgniteCache cache = ignite.cache(cacheName);
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,125,return null;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,128,return null;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,131,return null;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,149,private static class VisorCacheSizeCallable implements IgniteCallable<Integer> {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,151,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,154,private final IgniteCache cache;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,159,private VisorCacheSizeCallable(IgniteCache cache) {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,160,this.cache = cache;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,165,return cache.size(CachePeekMode.PRIMARY);
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,173,private static class VisorCacheClearCallable implements IgniteCallable<Integer> {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,175,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,178,private final IgniteCache cache;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,183,private VisorCacheClearCallable(IgniteCache cache) {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,184,this.cache = cache;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,189,cache.clear();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,191,return 0;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,251,private GridSqlElement parseTable(TableFilter filter) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,259,else if (tbl instanceof TableView) {
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,879,List<ClusterNode> assigment = assignments.get(part);
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,881,assert assigment.size() > 0;
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,883,List<ClusterNode> backups = assigment.subList(1, assigment.size());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java,608,assert r.idxs.size() == 1 : r.idxs;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java,610,GridMergeIndex idx = r.idxs.get(0);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java,612,Cursor cur = idx.findInStream(null, null);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java,614,while (cur.next()) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java,615,Row row = cur.get();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java,617,int cols = row.getColumnCount();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java,622,resRow.add(row.getValue(c).getObject());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java,624,res.add(resRow);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryUtils.java,1431,return Object.class;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryUtils.java,1466,return Object.class;
modules/core/src/main/java/org/apache/ignite/internal/binary/GridBinaryMarshaller.java,187,public static final int OBJECT_TYPE_ID = -1;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryUtils.java,1790,Class compType = doReadClass(in, ctx, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,2316,Collection<String> idxFields = e.getValue().fields();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,2321,descendings.add(idxField);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryUtils.java,67,import static org.apache.ignite.IgniteSystemProperties.IGNITE_BINARY_MARSHALLER_USE_STRING_SERIALIZATION_VER_2;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryUtils.java,1145,BigInteger intVal = new BigInteger(mag);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryUtils.java,1147,if (scale < 0) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryUtils.java,1148,scale &= 0x7FFFFFFF;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,360,if (intVal.signum() == -1) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,361,intVal = intVal.negate();
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,363,out.unsafeWriteInt(val.scale() | 0x80000000);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,365,else
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,366,out.unsafeWriteInt(val.scale());
modules/core/src/main/java/org/apache/ignite/configuration/CacheConfiguration.java,2292,processAnnotation(key, sqlAnn, txtAnn, field.getType(), prop, type);
modules/core/src/main/java/org/apache/ignite/configuration/CacheConfiguration.java,2311,processAnnotation(key, sqlAnn, txtAnn, mtd.getReturnType(), prop, type);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1819,private static class ClassProperty extends GridQueryProperty {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1929,private class BinaryProperty extends GridQueryProperty {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,2007,assert obj instanceof BinaryObject;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,2009,BinaryObject obj0 = (BinaryObject)obj;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,2011,return fieldValue(obj0);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProperty.java,25,public abstract class GridQueryProperty {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProperty.java,34,public abstract Object value(Object key, Object val) throws IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProperty.java,39,public abstract String name();
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProperty.java,44,public abstract Class<?> type();
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,409,Object[] args = reader.readObjectArray();
modules/core/src/main/java/org/apache/ignite/lang/IgniteProductVersion.java,162,return new Date(revTs);
modules/core/src/main/java/org/apache/ignite/internal/processors/cluster/GridUpdateNotifier.java,205,IgniteSystemProperties.snapshot().store(new PrintWriter(sw), "");
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1509,Server web = new Server(webSrv, "-webPort", "0");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,782,boolean keyPrimary = ctx.affinity().primary(ctx.localNode(), part, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,791,boolean keyBackup = ctx.affinity().belongs(ctx.localNode(), part, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,812,nearKey = !ctx.affinity().belongs(ctx.localNode(), part, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,233,public List<ClusterNode> nodes(Object key, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,234,return nodes(partition(key), topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,242,public List<ClusterNode> nodes(int part, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,278,return primary(partition(key), topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,287,List<ClusterNode> nodes = nodes(part, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,301,public boolean primary(ClusterNode n, Object key, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,302,return F.eq(primary(key, topVer), n);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,311,public boolean primary(ClusterNode n, int part, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,312,return F.eq(primary(part, topVer), n);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,320,public Collection<ClusterNode> backups(Object key, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,321,return backups(partition(key), topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,329,public Collection<ClusterNode> backups(int part, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,330,List<ClusterNode> nodes = nodes(part, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,346,public boolean backup(ClusterNode n, int part, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,347,List<ClusterNode> nodes = nodes(part, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,359,public Collection<ClusterNode> remoteNodes(Iterable keys, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,360,Collection<Collection<ClusterNode>> colcol = new GridLeanSet<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,363,colcol.add(nodes(key, topVer));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,365,return F.view(F.flatCollections(colcol), F.remoteNodes(cctx.localNodeId()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,373,public boolean localNode(Object key, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,374,return localNode(partition(key), topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,382,public boolean localNode(int part, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,385,return nodes(part, topVer).contains(cctx.localNode());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,394,public boolean belongs(ClusterNode node, int part, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,398,return nodes(part, topVer).contains(node);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1582,public boolean hasKey(Iterable<? extends K> keys, Collection<Integer> movingParts) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1583,for (K key : keys) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1585,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1588,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEvictionManager.java,913,if (cctx.affinity().backups(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,985,assert ctx != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,986,assert key != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,988,CacheConfiguration cfg = ctx.cache().configuration();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,991,return ctx.localNode();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,993,return ctx.affinity().primary(key, ctx.affinity().affinityTopologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,85,return cctx.affinity().primary(n, key, topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,92,return cctx.affinity().backups(key, topologyVersion()).contains(n);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,99,return cctx.affinity().belongs(n, cctx.affinity().partition(key), topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,129,for (ClusterNode affNode : cctx.affinity().nodes(part, topVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,145,return F.first(cctx.affinity().nodes(part, topologyVersion()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,207,ClusterNode primary = cctx.affinity().primary(key, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,230,return cctx.affinity().nodes(partition(key), topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,237,return cctx.affinity().nodes(part, topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,922,List<ClusterNode> nodes = ctx.affinity().nodes(e.getKey(), topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheEntry.java,405,if (cctx.affinity().belongs(node, partition(), topVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,611,return cctx.affinity().primary(cctx.localNode(), id, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,619,return cctx.affinity().backup(cctx.localNode(), id, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,550,if (cctx.affinity().localNode(p, topVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,680,boolean belongs = cctx.affinity().localNode(p, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,277,return !cacheCtx.affinity().backups(key, topVer).contains(cctx.localNode());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedGetFuture.java,381,List<ClusterNode> affNodes = cctx.affinity().nodes(part, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedSingleGetFuture.java,326,List<ClusterNode> affNodes = cctx.affinity().nodes(part, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2323,if (!ctx.affinity().belongs(node, entry.partition(), topVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2453,return ctx.affinity().primary(ctx.localNode(), key, req.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2476,return ctx.affinity().primary(ctx.localNode(), key, req.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2515,boolean primary = !req.fastMap() || ctx.affinity().primary(ctx.localNode(), entry.key(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2611,if (!ctx.affinity().belongs(node, entry.partition(), topVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java,601,ClusterNode primary = cctx.affinity().primary(cacheKey, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,981,ClusterNode primary = cctx.affinity().primary(cacheKey.partition(), topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,1032,Collections.singletonList(affMgr.primary(key, topVer));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedCache.java,176,return allowDetached && !ctx.affinity().primary(ctx.localNode(), key, topVer) ?
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedCache.java,679,ClusterNode primary = ctx.affinity().primary(key, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedCache.java,799,ClusterNode primary = ctx.affinity().primary(key, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1176,if (!cctx.affinity().primary(cctx.localNode(), key, topVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1260,ClusterNode primary = cctx.affinity().primary(key, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,547,if (cctx.affinity().localNode(p, topVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,1308,if (cctx.affinity().localNode(p, topVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,305,if (!cctx.affinity().belongs(node, part, d.topologyVersion())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,390,if (!cctx.affinity().belongs(node, part, d.topologyVersion())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,513,if (!cctx.affinity().belongs(node, part, d.topologyVersion())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,811,if (!cctx.affinity().belongs(node, part, d.topologyVersion())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,862,if (!cctx.affinity().belongs(node, part, d.topologyVersion())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplier.java,950,if (!cctx.affinity().belongs(node, part, d.topologyVersion())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,291,if (cctx.affinity().localNode(p, topVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,351,Collection<ClusterNode> affNodes = cctx.affinity().nodes(p, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearAtomicCache.java,164,if (ctx.affinity().belongs(ctx.localNode(), ctx.affinity().partition(key), req.topologyVersion())) { // Reader became backup.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheEntry.java,114,if (cctx.affinity().backup(cctx.localNode(), part, topVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheEntry.java,164,ClusterNode primaryNode = cctx.affinity().primary(key, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheEntry.java,685,primary = cctx.affinity().primary(part, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,417,List<ClusterNode> affNodes = cctx.affinity().nodes(part, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,730,if (!cctx.affinity().localNode(info.key(), cctx.affinity().affinityTopologyVersion())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1324,ClusterNode primary = cctx.affinity().primary(key, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTransactionalCache.java,478,return ctx.affinity().belongs(ctx.localNode(), e.partition(), topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTransactionalCache.java,550,ClusterNode primary = ctx.affinity().primary(key, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTransactionalCache.java,672,ClusterNode primary = ctx.affinity().primary(key, cand.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,302,if (e.op() != NOOP && !cacheCtx.affinity().localNode(e.key(), topVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1522,!cctx.affinity().primary(cctx.localNode(), key, topVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1534,ClusterNode primaryNode = CU.primaryNode(cctx, key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,2202,return cache.context().affinity().primary(ctx.discovery().localNode(), k, NONE);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,848,for (ClusterNode node : aff.nodes(partId, initTopVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1291,!e.context().affinity().primary(e.cached().partition(), topologyVersion()).isLocal();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1695,List<ClusterNode> affNodes = cacheCtx.affinity().nodes(part, topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1112,return entry.context().affinity().primary(cctx.localNode(), entry.partition(), AffinityTopologyVersion.NONE);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/TxDeadlockDetection.java,389,ClusterNode node = ctx.affinity().primary(txKey.key(), topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,499,List<ClusterNode> nodes0 = ctx.affinity().nodes(hdrPart, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridSetQueryPredicate.java,94,return !filter || ctx.affinity().primary(ctx.localNode(), k, ctx.affinity().affinityTopologyVersion());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1730,return aff.primary(locNode, k, topVer0);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1417,val = (val0 != null) ? new CacheEntryImplEx<>(key, val0, t != null ? t.get2() : null) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1457,IgniteInternalFuture<T2<V, GridCacheVersion>> fut =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1463,new CX1<IgniteInternalFuture<T2<V, GridCacheVersion>>, CacheEntry<K, V>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1466,T2<V, GridCacheVersion> t = f.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1480,fut.listen(new UpdateGetTimeStatClosure<T2<V, GridCacheVersion>>(metrics0(), start));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1513,Map<K, T2<V, GridCacheVersion>> map = (Map<K, T2<V, GridCacheVersion>>)getAll(keys, !ctx.keepBinary(), true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1521,res.add(new CacheEntryImplEx<>(e.getKey(), e.getValue().get1(), e.getValue().get2()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1561,IgniteInternalFuture<Map<K, T2<V, GridCacheVersion>>> fut =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1568,fut.chain(new CX1<IgniteInternalFuture<Map<K, T2<V, GridCacheVersion>>>, Collection<CacheEntry<K, V>>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1570,IgniteInternalFuture<Map<K, T2<V, GridCacheVersion>>> f) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1578,new CacheEntryImplEx<>(e.getKey(), e.getValue().get1(), e.getValue().get2()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1586,fut.listen(new UpdateGetTimeStatClosure<Map<K, T2<V, GridCacheVersion>>>(metrics0(), start));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1656,for (Map.Entry<K, T2<V, GridCacheVersion>> e : map.entrySet()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1657,V val = interceptor.onGet(e.getKey(), e.getValue().get1());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1660,res.put(e.getKey(), new CacheEntryImplEx<>(e.getKey(), val, e.getValue().get2()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,93,import org.apache.ignite.internal.util.typedef.T2;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1881,final GridCacheVersion ver) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1893,map.put((K1)key0, ver != null ? (V1)new T2<>(val0, ver) : (V1)val0);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1895,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1896,map.put((K1)key,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1897,(V1)(ver != null ?
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1898,(V1)new T2<>(skipVals ? true : val, ver) :
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1899,skipVals ? true : val));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1911,public <K1, V1> void addResult(Map<K1, V1> map,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1912,KeyCacheObject key,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1913,CacheObject val,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1914,boolean skipVals,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1915,boolean keepCacheObjects,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1916,boolean deserializeBinary,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1917,boolean cpy) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1918,addResult(map, key, val, skipVals, keepCacheObjects, deserializeBinary, cpy, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,71,import org.apache.ignite.internal.util.typedef.T2;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,75,import org.apache.ignite.internal.util.typedef.T2;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,641,IgniteInternalFuture<Map<KeyCacheObject, T2<CacheObject, GridCacheVersion>>> getDhtAllAsync(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetFuture.java,50,import org.apache.ignite.internal.util.typedef.T2;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetFuture.java,395,IgniteInternalFuture<Map<KeyCacheObject, T2<CacheObject, GridCacheVersion>>> fut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetFuture.java,425,new C2<Boolean, Exception, IgniteInternalFuture<Map<KeyCacheObject, T2<CacheObject, GridCacheVersion>>>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetFuture.java,463,new C2<Map<KeyCacheObject, T2<CacheObject, GridCacheVersion>>, Exception, Collection<GridCacheEntryInfo>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetFuture.java,465,Map<KeyCacheObject, T2<CacheObject, GridCacheVersion>> map, Exception e
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetFuture.java,483,private Collection<GridCacheEntryInfo> toEntryInfos(Map<KeyCacheObject, T2<CacheObject, GridCacheVersion>> map) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetFuture.java,489,for (Map.Entry<KeyCacheObject, T2<CacheObject, GridCacheVersion>> entry : map.entrySet()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetFuture.java,490,T2<CacheObject, GridCacheVersion> val = entry.getValue();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetFuture.java,498,info.value(skipVals ? null : val.get1());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetFuture.java,499,info.version(val.get2());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetSingleFuture.java,42,import org.apache.ignite.internal.util.typedef.T2;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetSingleFuture.java,348,IgniteInternalFuture<Map<KeyCacheObject, T2<CacheObject, GridCacheVersion>>> fut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetSingleFuture.java,427,return new IgniteInClosure<IgniteInternalFuture<Map<KeyCacheObject, T2<CacheObject, GridCacheVersion>>>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetSingleFuture.java,429,IgniteInternalFuture<Map<KeyCacheObject, T2<CacheObject, GridCacheVersion>>> fut
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetSingleFuture.java,439,private void onResult(IgniteInternalFuture<Map<KeyCacheObject, T2<CacheObject, GridCacheVersion>>> fut) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetSingleFuture.java,458,private GridCacheEntryInfo toEntryInfo(Map<KeyCacheObject, T2<CacheObject, GridCacheVersion>> map) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetSingleFuture.java,462,T2<CacheObject, GridCacheVersion> val = map.get(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetSingleFuture.java,470,info.value(skipVals ? null : val.get1());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetSingleFuture.java,471,info.version(val.get2());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedGetFuture.java,465,if (res != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedGetFuture.java,503,ver);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedGetFuture.java,562,needVer ? info.version() : null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedSingleGetFuture.java,53,import org.apache.ignite.internal.util.typedef.T2;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedSingleGetFuture.java,616,onDone(new T2<>(res, ver));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedSingleGetFuture.java,634,onDone(needVer ? new T2<>(res, ver) : res);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedSingleGetFuture.java,637,onDone(needVer ? new T2<>(val, ver) : val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1364,if (res != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1396,ctx.addResult(locVals, key, v, skipVals, false, deserializeBinary, true, ver);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedCache.java,500,if (res != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedCache.java,543,ver);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,58,import org.apache.ignite.internal.util.typedef.T2;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,668,(V)new T2<>(skipVals ? true : v, ver) :
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,676,(V)new T2<>(!skipVals ?
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,762,needVer ? info.version() : null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,63,import org.apache.ignite.internal.util.typedef.T2;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,473,T2<Object, GridCacheVersion> t = (T2)val;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,475,v = t.get1();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,476,ver = t.get2();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,515,GridCacheVersion ver;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,538,v,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,543,ver);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,571,true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1212,cacheCtx.addResult(map, key, val, skipVals, keepCacheObjects, deserializeBinary, false, ver);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1241,if (res != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1278,readVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1327,if (res != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1358,needVer ? readVer : null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1529,needVer ? loadVer : null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1551,needVer ? loadVer : null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1675,if (res != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1714,readVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,5737,return ttl;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,5744,return CU.TTL_NOT_CHANGED;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,5749,return CU.TTL_NOT_CHANGED;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3440,long ttl = ttlExtras();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3442,long expTime = CU.toExpireTime(ttl);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,109,return lockAllAsync(keys, timeout, tx, isInvalidate, isRead, retval, isolation, accessTtl);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,753,final CacheExpiryPolicy expiryPlc = CacheExpiryPolicy.forAccess(req.accessTtl());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,850,long ttl = req.accessTtl();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,852,final CacheExpiryPolicy expiryPlc = CacheExpiryPolicy.forAccess(ttl);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,151,subjId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,419,flags = reader.readCollection("flags", MessageCollectionItemType.BOOLEAN);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,427,futId = reader.readIgniteUuid("futId");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,435,keys = reader.readCollection("keys", MessageCollectionItemType.MSG);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,443,miniId = reader.readIgniteUuid("miniId");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,451,readThrough = reader.readBoolean("readThrough");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,459,reload = reader.readBoolean("reload");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,467,skipVals = reader.readBoolean("skipVals");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,475,subjId = reader.readUuid("subjId");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,483,taskNameHash = reader.readInt("taskNameHash");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,491,topVer = reader.readMessage("topVer");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,499,ver = reader.readMessage("ver");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,507,partIds = reader.readCollection("partIds", MessageCollectionItemType.INT);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,526,return 16;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockRequest.java,479,dhtVers = reader.readObjectArray("dhtVers", MessageCollectionItemType.MSG, GridCacheVersion.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockRequest.java,487,filter = reader.readObjectArray("filter", MessageCollectionItemType.MSG, CacheEntryPredicate.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockRequest.java,495,firstClientReq = reader.readBoolean("firstClientReq");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockRequest.java,503,hasTransforms = reader.readBoolean("hasTransforms");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockRequest.java,511,implicitSingleTx = reader.readBoolean("implicitSingleTx");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockRequest.java,519,implicitTx = reader.readBoolean("implicitTx");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockRequest.java,527,miniId = reader.readIgniteUuid("miniId");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockRequest.java,535,onePhaseCommit = reader.readBoolean("onePhaseCommit");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockRequest.java,543,retVal = reader.readBoolean("retVal");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockRequest.java,551,subjId = reader.readUuid("subjId");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockRequest.java,559,syncCommit = reader.readBoolean("syncCommit");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockRequest.java,567,taskNameHash = reader.readInt("taskNameHash");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockRequest.java,575,topVer = reader.readMessage("topVer");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockRequest.java,602,return 35;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearSingleGetRequest.java,269,flags = reader.readByte("flags");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearSingleGetRequest.java,277,futId = reader.readLong("futId");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearSingleGetRequest.java,285,key = reader.readMessage("key");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearSingleGetRequest.java,293,subjId = reader.readUuid("subjId");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearSingleGetRequest.java,301,taskNameHash = reader.readInt("taskNameHash");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearSingleGetRequest.java,309,topVer = reader.readMessage("topVer");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearSingleGetRequest.java,317,partId = reader.readInt("partId", -1);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearSingleGetRequest.java,409,return 11;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,340,accessPolicy(cacheCtx, keys),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,371,accessPolicy(cacheCtx, keys),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,402,accessPolicy(cacheCtx, keys),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,428,IgniteCacheExpiryPolicy expiryPlc = accessPolicy(cacheCtx, keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,453,expiryPlc,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1459,final boolean needVer
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1750,needVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1823,needVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,2030,keepBinary);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,2199,keepBinary);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,2232,final boolean keepBinary) {
modules/core/src/main/java/org/apache/ignite/internal/igfs/common/IgfsMarshaller.java,134,U.writeStringMap(out, req.properties());
modules/core/src/main/java/org/apache/ignite/internal/igfs/common/IgfsMarshaller.java,252,req.properties(U.readStringMap(in));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileImpl.java,24,import org.apache.ignite.internal.util.typedef.internal.U;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileImpl.java,208,U.writeStringMap(out, props);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileImpl.java,226,props = U.readStringMap(in);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4983,public static void writeStringMap(DataOutput out, @Nullable Map<String, String> map) throws IOException {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4984,if (map != null) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4985,out.writeInt(map.size());
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4987,for (Map.Entry<String, String> e : map.entrySet()) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4988,writeUTFStringNullable(out, e.getKey());
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4989,writeUTFStringNullable(out, e.getValue());
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4992,else
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4993,out.writeInt(-1);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,5003,public static Map<String, String> readStringMap(DataInput in) throws IOException {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,5004,int size = in.readInt();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,5007,return null;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,5008,else {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,5009,Map<String, String> map = U.newHashMap(size);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,5012,map.put(readUTFStringNullable(in), readUTFStringNullable(in));
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,5014,return map;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,5025,public static void writeUTFStringNullable(DataOutput out, @Nullable String val) throws IOException {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,5026,if (val != null) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,5027,out.writeBoolean(true);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,5029,out.writeUTF(val);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,5031,else
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,5032,out.writeBoolean(false);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,5042,public static String readUTFStringNullable(DataInput in) throws IOException {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,5043,return in.readBoolean() ? in.readUTF() : null;
modules/aws/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/s3/TcpDiscoveryS3IpFinder.java,248,s3 = cfg != null ? new AmazonS3Client(cred, cfg) : new AmazonS3Client(cred);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,352,qryProc.onSwap(space, key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,371,qryProc.onUnswap(space, key, val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,408,qryProc.store(space, key, val, CU.versionToBytes(ver), expirationTime);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,433,qryProc.remove(space, key, val);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,649,if (ctx.indexing().enabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,650,coctx = cacheObjectContext(space);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1001,if (ctx.indexing().enabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1002,CacheObjectContext coctx = cacheObjectContext(space);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1173,if (ctx.indexing().enabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1174,CacheObjectContext coctx = cacheObjectContext(spaceName);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1212,if (ctx.indexing().enabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1213,CacheObjectContext coctx = cacheObjectContext(spaceName);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,877,sqlQry,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,947,final String qry, @Nullable final Collection<Object> params, GridQueryTypeDescriptor type,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,990,sql = generateQuery(qry.getSql(), tblDesc);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1138,private String generateQuery(String qry, TableDescriptor tbl) throws IgniteCheckedException {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1175,from = " FROM " + t +
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientConnectionManagerAdapter.java,316,F.containsAny(U.allLocalMACs(), node.attribute(ATTR_MACS).toString().split(", "));
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientTopology.java,24,import java.util.HashSet;
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientTopology.java,69,private final Set<String> routerAddrs;
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientTopology.java,99,routerAddrs = (!cfg.getRouters().isEmpty() && cfg.getServers().isEmpty()) ?
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientTopology.java,100,new HashSet<>(cfg.getRouters()) : null;
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientTopology.java,386,boolean router = routerAddrs == null ||
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientTopology.java,387,routerAddrs.contains(addr.getHostName() + ":" + addr.getPort()) ||
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientTopology.java,388,routerAddrs.contains(addr.getAddress().getHostAddress() + ":" + addr.getPort());
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientTopology.java,391,F.containsAny(U.allLocalMACs(), node.attribute(ATTR_MACS).toString().split(", "));
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/BasicJdbcDialect.java,171,for (int cnt = keyCols.size(); cnt > 0; cnt--) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/BasicJdbcDialect.java,174,sb.a(cols[j]).a(" > ? ");
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/BasicJdbcDialect.java,176,sb.a(cols[j]).a(" = ? AND ");
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/BasicJdbcDialect.java,190,for (int cnt = keyCols.size(); cnt > 0; cnt--) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/BasicJdbcDialect.java,193,sb.a(cols[j]).a(" <= ? ");
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/BasicJdbcDialect.java,195,sb.a(cols[j]).a(" = ? AND ");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicAbstractUpdateFuture.java,209,map(topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicAbstractUpdateFuture.java,216,protected abstract void map(AffinityTopologyVersion topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java,346,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java,347,AffinityTopologyVersion topVer = fut.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java,349,map(topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java,351,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java,352,onDone(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java,386,AffinityTopologyVersion topVer = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java,433,map(topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java,485,protected void map(AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java,495,Exception err = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java,498,GridCacheVersion futVer = cctx.versions().next(topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java,520,assert this.futVer == null : this;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java,521,assert this.topVer == AffinityTopologyVersion.ZERO : this;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java,523,this.topVer = topVer;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java,525,this.futVer = futVer;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java,542,if (storeFuture()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java,543,if (!cctx.mvcc().addAtomicFuture(futVer, this)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java,544,assert isDone() : this;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java,546,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java,557,GridCacheVersion onFutureDone() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,456,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,457,AffinityTopologyVersion topVer = fut.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,459,map(topVer, remapKeys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,461,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,462,onDone(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,497,AffinityTopologyVersion topVer = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,544,map(topVer, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,640,protected void map(AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,641,map(topVer, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,648,void map(AffinityTopologyVersion topVer, @Nullable Collection<KeyCacheObject> remapKeys) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,658,Exception err = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,662,int size = keys.size();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,664,GridCacheVersion futVer = cctx.versions().next(topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,714,assert this.futVer == null : this;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,715,assert this.topVer == AffinityTopologyVersion.ZERO : this;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,717,this.topVer = topVer;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,719,this.futVer = futVer;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,739,if (storeFuture()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,740,if (!cctx.mvcc().addAtomicFuture(futVer, this)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,741,assert isDone() : this;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,743,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,763,GridCacheVersion onFutureDone() {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1902,Map<Integer, CacheMetrics> cacheMetrics = msg.hasCacheMetrics() ?
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4542,Map<Integer, CacheMetrics> cacheMetrics = msg.hasCacheMetrics() ?
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,847,public BinaryInternalMapper userTypeMapper(int typeId) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,857,private BinaryInternalMapper userTypeMapper(String clsName) {
modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/OdbcRequestHandler.java,314,OdbcTableMeta tableMeta = new OdbcTableMeta(req.catalog(), cacheName, table.name(), "TABLE");
modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/OdbcTableMeta.java,53,int hash = catalog.hashCode();
modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/OdbcTableMeta.java,55,hash = 31 * hash + schema.hashCode();
modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/OdbcTableMeta.java,56,hash = 31 * hash + table.hashCode();
modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/OdbcTableMeta.java,57,hash = 31 * hash + tableType.hashCode();
modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/OdbcTableMeta.java,67,return this == other || catalog.equals(other.catalog) && schema.equals(other.schema) &&
modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/OdbcTableMeta.java,68,table.equals(other.table) && tableType.equals(other.tableType);
modules/jcl/src/main/java/org/apache/ignite/logger/jcl/JclLogger.java,136,return !isInfoEnabled() && !isDebugEnabled();
modules/slf4j/src/main/java/org/apache/ignite/logger/slf4j/Slf4jLogger.java,48,impl = LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);
modules/slf4j/src/main/java/org/apache/ignite/logger/slf4j/Slf4jLogger.java,132,return !isInfoEnabled() && !isDebugEnabled();
modules/core/src/main/java/org/apache/ignite/cache/store/CacheLoadOnlyStoreAdapter.java,156,exec.submit(new Worker(c, buf, args));
modules/core/src/main/java/org/apache/ignite/cache/store/CacheLoadOnlyStoreAdapter.java,163,exec.submit(new Worker(c, buf, args));
modules/core/src/main/java/org/apache/ignite/configuration/IgniteConfiguration.java,149,public static final int DFLT_PUBLIC_THREAD_CNT = Math.max(8, AVAILABLE_PROC_CNT) * 2;
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,184,ctx.getSystemExecutorService().submit(new Runnable() {
modules/core/src/main/java/org/apache/ignite/internal/GridJobContextImpl.java,220,execSvc.submit(new Runnable() {
modules/core/src/main/java/org/apache/ignite/internal/GridKernalContextImpl.java,388,List<PluginProvider> plugins) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/GridTopic.java,97,TOPIC_TX;
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,67,import org.apache.ignite.IgniteLock;
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,183,import static org.apache.ignite.IgniteSystemProperties.IGNITE_BINARY_MARSHALLER_USE_STRING_SERIALIZATION_VER_2;
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,199,import static org.apache.ignite.internal.IgniteNodeAttributes.ATTR_LATE_AFFINITY_ASSIGNMENT;
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,211,import static org.apache.ignite.internal.IgniteNodeAttributes.ATTR_MARSHALLER_USE_DFLT_SUID;
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,667,public void start(final IgniteConfiguration cfg,
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,782,plugins);
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,972,private long lastCompletedCnt;
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,976,return;
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,978,ThreadPoolExecutor exec = (ThreadPoolExecutor)execSvc;
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,987,interval + "ms, is executorService pool size large enough?)");
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,989,lastCompletedCnt = completedCnt;
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1736,grid0.start(myCfg, utilityCacheExecSvc, marshCacheExecSvc, execSvc, sysExecSvc, p2pExecSvc, mgmtExecSvc,
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,595,ClusterNode node = ctx.discovery().node(nodeId);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,597,if (node == null) {
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,599,log.debug("Ignoring message from dead node [senderId=" + nodeId + ", msg=" + msg + ']');
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,601,return; // We can't receive messages from non-discovered ones.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1138,execSvc.submit(jobs.get(i));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,2522,A.notNull(key, "key", val, "val");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,220,preldr.onKernalStart();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockResponse.java,34,import org.apache.ignite.internal.util.GridLeanSet;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockResponse.java,60,private Collection<Integer> invalidParts = new GridLeanSet<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockResponse.java,137,return invalidParts;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,473,A.notNull(key, "key", val, "val");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheDistributedQueryManager.java,275,req.partition(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,124,private int part;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,482,return part == -1 ? null : part;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,409,AffinityTopologyVersion topVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,490,GridCacheEntryEx entry = cacheCtx.cache().entryEx(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1516,GridCacheEntryEx e = txEntry == null ? entryEx(cacheCtx, txKey) : txEntry.cached();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,355,dualPool.submit(batch);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpMemcachedNioListener.java,24,import org.apache.ignite.internal.GridKernalContext;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpMemcachedNioListener.java,41,import org.apache.ignite.marshaller.Marshaller;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpMemcachedNioListener.java,42,import org.apache.ignite.marshaller.jdk.JdkMarshaller;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpMemcachedNioListener.java,76,private final Marshaller jdkMarshaller = new JdkMarshaller();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpMemcachedNioListener.java,79,private final GridKernalContext ctx;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpMemcachedNioListener.java,89,public GridTcpMemcachedNioListener(IgniteLogger log, GridRestProtocolHandler hnd, GridKernalContext ctx) {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpMemcachedNioListener.java,92,this.ctx = ctx;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,143,memcachedLsnr = new GridTcpMemcachedNioListener(log, hnd, ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,1005,exe.submit(new Runnable() {
modules/core/src/main/java/org/apache/ignite/internal/util/future/GridFutureAdapter.java,231,return new ChainFuture<>(this, doneCb);
modules/core/src/main/java/org/apache/ignite/internal/util/future/GridFutureAdapter.java,485,IgniteClosure<? super IgniteInternalFuture<R>, T> doneCb
modules/core/src/main/java/org/apache/ignite/internal/util/future/GridFutureAdapter.java,490,fut.listen(new GridFutureChainListener<>(this, doneCb));
modules/core/src/main/java/org/apache/ignite/internal/util/future/GridFutureChainListener.java,28,public class GridFutureChainListener<T, R> implements IgniteInClosure<IgniteInternalFuture<T>> {
modules/core/src/main/java/org/apache/ignite/internal/util/future/GridFutureChainListener.java,45,IgniteClosure<? super IgniteInternalFuture<T>, R> doneCb
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridAbstractCommunicationClient.java,41,protected GridAbstractCommunicationClient(@Nullable GridNioMetricsListener metricsLsnr) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridConnectionBytesVerifyFilter.java,71,return proceedSessionWrite(ses, msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioAsyncNotifyFilter.java,111,return proceedSessionWrite(ses, msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioCodecFilter.java,82,return proceedSessionWrite(ses, msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioCodecFilter.java,87,return proceedSessionWrite(ses, res);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioFilter.java,111,public GridNioFuture<?> proceedSessionWrite(GridNioSession ses, Object msg) throws IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioFilter.java,155,public GridNioFuture<?> onSessionWrite(GridNioSession ses, Object msg) throws IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioFilterAdapter.java,114,return nextFilter.onSessionWrite(ses, msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioFilterChain.java,185,return tail.onSessionWrite(ses, msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioFilterChain.java,260,return proceedSessionWrite(ses, msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioFuture.java,50,public void ackClosure(IgniteInClosure<IgniteException> closure);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,39,private final ArrayDeque<GridNioFuture<?>> msgFuts;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,82,public GridNioRecoveryDescriptor(int queueLimit, ClusterNode node, IgniteLogger log) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,86,msgFuts = new ArrayDeque<>(queueLimit);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,157,public boolean add(GridNioFuture<?> fut) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,158,assert fut != null;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,160,if (!fut.skipRecovery()) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,162,msgFuts.addLast(fut);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,166,return msgFuts.size() < queueLimit;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,184,GridNioFuture<?> fut = msgFuts.pollFirst();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,186,assert fut != null : "Missed message future [rcvCnt=" + rcvCnt +
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,190,assert fut.isDone() : fut;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,193,fut.ackClosure().apply(null);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,195,fut.onAckReceived();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,214,GridNioFuture<?>[] futs = null;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,222,if (!msgFuts.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,223,futs = msgFuts.toArray(new GridNioFuture<?>[msgFuts.size()]);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,225,msgFuts.clear();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,230,completeOnNodeLeft(futs);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,238,public Deque<GridNioFuture<?>> messagesFutures() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,239,return msgFuts;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,274,resendCnt = msgFuts.size();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,281,public void connected() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,306,GridNioFuture<?>[] futs = null;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,326,if (nodeLeft && !msgFuts.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,327,futs = msgFuts.toArray(new GridNioFuture<?>[msgFuts.size()]);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,329,msgFuts.clear();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,334,completeOnNodeLeft(futs);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,386,private void completeOnNodeLeft(GridNioFuture<?>[] futs) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,387,for (GridNioFuture<?> msg : futs) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,388,IOException e = new IOException("Failed to send message, node has left: " + node.id());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,390,((GridNioFutureImpl)msg).onDone(e);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,393,msg.ackClosure().apply(new IgniteException(e));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,93,public static final int DFLT_SEND_QUEUE_LIMIT = 1024;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,150,private int balanceIdx;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,303,new DirectNioClientWorker(i, gridName, "grid-nio-worker-" + i, log) :
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,304,new ByteBufferNioClientWorker(i, gridName, "grid-nio-worker-" + i, log);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,393,clientWorkers.get(impl.selectorIndex()).offer(fut);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,403,GridNioFuture<?> send(GridNioSession ses, ByteBuffer msg) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,404,assert ses instanceof GridSelectorNioSessionImpl;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,408,NioOperationFuture<?> fut = new NioOperationFuture<Void>(impl, NioOperation.REQUIRE_WRITE, msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,410,send0(impl, fut, false);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,412,return fut;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,420,GridNioFuture<?> send(GridNioSession ses, Message msg) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,425,NioOperationFuture<?> fut = new NioOperationFuture<Void>(impl, NioOperation.REQUIRE_WRITE, msg,
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,426,skipRecoveryPred.apply(msg));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,428,send0(impl, fut, false);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,430,return fut;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,438,private void send0(GridSelectorNioSessionImpl ses, NioOperationFuture<?> fut, boolean sys) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,440,assert fut != null;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,442,int msgCnt = sys ? ses.offerSystemFuture(fut) : ses.offerFuture(fut);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,447,fut.ackClosure(ackC);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,451,fut.connectionClosed();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,455,clientWorkers.get(ses.selectorIndex()).offer(fut);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,468,public GridNioFuture<?> sendSystem(GridNioSession ses, Message msg) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,469,return sendSystem(ses, msg, null);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,480,public GridNioFuture<?> sendSystem(GridNioSession ses,
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,487,NioOperationFuture<?> fut = new NioOperationFuture<Void>(impl, NioOperation.REQUIRE_WRITE, msg,
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,488,skipRecoveryPred.apply(msg));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,496,send0(impl, fut, true);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,498,return fut;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,507,GridNioRecoveryDescriptor recoveryDesc = ses.recoveryDescriptor();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,509,if (recoveryDesc != null && !recoveryDesc.messagesFutures().isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,510,Deque<GridNioFuture<?>> futs = recoveryDesc.messagesFutures();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,517,GridNioFuture<?> fut0 = futs.iterator().next();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,519,for (GridNioFuture<?> fut : futs) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,522,((NioOperationFuture)fut).resetSession(ses0);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,528,clientWorkers.get(ses0.selectorIndex()).offer(((NioOperationFuture)fut0));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,537,GridNioFuture<?> pauseResumeReads(GridNioSession ses, NioOperation op) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,549,clientWorkers.get(impl.selectorIndex()).offer(fut);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,678,clientWorkers.get(balanceIdx).offer(req);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,680,balanceIdx++;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,795,NioOperationFuture<?> req = ses.removeMeta(NIO_OPERATION.ordinal());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,801,req = (NioOperationFuture<?>)ses.pollFuture();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,804,key.interestOps(key.interestOps() & (~SelectionKey.OP_WRITE));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,809,buf = req.message();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,844,req.onDone();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,996,NioOperationFuture<?> req = ses.removeMeta(NIO_OPERATION.ordinal());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1000,req = (NioOperationFuture<?>)ses.pollFuture();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1002,if (req == null && buf.position() == 0) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1003,key.interestOps(key.interestOps() & (~SelectionKey.OP_WRITE));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1005,break;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1013,msg = req.directMessage();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1028,req.onDone();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1030,req = (NioOperationFuture<?>)ses.pollFuture();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1035,msg = req.directMessage();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1132,queue.remove(buf);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1150,NioOperationFuture<?> req = ses.removeMeta(NIO_OPERATION.ordinal());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1164,req = (NioOperationFuture<?>)ses.pollFuture();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1166,if (req == null && buf.position() == 0) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1167,key.interestOps(key.interestOps() & (~SelectionKey.OP_WRITE));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1169,return;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1177,msg = req.directMessage();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1179,assert msg != null;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1192,req.onDone();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1194,req = (NioOperationFuture<?>)ses.pollFuture();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1199,msg = req.directMessage();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1250,private abstract class AbstractNioClientWorker extends GridWorker {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1252,private final ConcurrentLinkedQueue<NioOperationFuture> changeReqs = new ConcurrentLinkedQueue<>();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1325,Class<?> selectorImplClass =
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1332,Field selectedKeysField = selectorImplClass.getDeclaredField("selectedKeys");
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1333,Field publicSelectedKeysField = selectorImplClass.getDeclaredField("publicSelectedKeys");
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1360,private void offer(NioOperationFuture req) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1372,private void bodyInternal() throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1377,NioOperationFuture req;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1379,while ((req = changeReqs.poll()) != null) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1380,switch (req.operation()) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1382,register(req);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1387,case REQUIRE_WRITE: {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1389,SelectionKey key = req.session().key();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1391,if (key.isValid()) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1392,key.interestOps(key.interestOps() | SelectionKey.OP_WRITE);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1395,((GridNioSessionImpl)key.attachment()).bytesSent(0);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1447,StringBuilder sb = new StringBuilder();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1449,Set<SelectionKey> keys = selector.keys();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1454,.append("]").append(U.nl());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1456,for (SelectionKey key : keys) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1457,GridSelectorNioSessionImpl ses = (GridSelectorNioSessionImpl)key.attachment();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1459,MessageWriter writer = ses.meta(MSG_WRITER.ordinal());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1460,MessageReader reader = ses.meta(GridDirectParser.READER_META_KEY);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1470,GridNioRecoveryDescriptor desc = ses.recoveryDescriptor();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1472,if (desc != null) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1476,.append(", descIdHash=").append(System.identityHashCode(desc));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1478,else
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1479,sb.append(", recoveryDesc=null");
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1481,sb.append("]").append(U.nl());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1484,U.warn(log, sb.toString());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1487,req.onDone(true);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1493,if (selector.select(2000) > 0) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1496,processSelectedKeys(selector.selectedKeys());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1497,else
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1498,processSelectedKeysOptimized(selectedKeys.flip());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1700,idx,
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1770,Socket sock = ((SocketChannel)key.channel()).socket();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1816,NioOperationFuture<?> fut = ses.removeMeta(NIO_OPERATION.ordinal());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1818,GridNioRecoveryDescriptor recovery = ses.recoveryDescriptor();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1820,if (recovery != null) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1823,while ((fut = (NioOperationFuture<?>)ses.pollFuture()) != null) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1825,fut.connectionClosed();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1829,recovery.release();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1834,fut.connectionClosed();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1837,fut.connectionClosed();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2033,private enum NioOperation {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2056,private static class NioOperationFuture<R> extends GridNioFutureImpl<R> {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2071,private ByteBuffer msg;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2074,private Message commMsg;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2133,NioOperationFuture(GridSelectorNioSessionImpl ses, NioOperation op,
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2134,ByteBuffer msg) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2162,this.commMsg = commMsg;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2169,private NioOperation operation() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2176,private ByteBuffer message() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2183,private Message directMessage() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2184,return commMsg;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2190,private void resetSession(GridSelectorNioSessionImpl ses) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2191,assert commMsg != null;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2193,this.ses = ses;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2199,private SocketChannel socketChannel() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2206,private GridSelectorNioSessionImpl session() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2227,private void connectionClosed() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2228,assert op == NioOperation.REQUIRE_WRITE;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2229,assert ses != null;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2231,onDone(new IOException("Failed to send message (connection was closed): " + ses));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2236,assert commMsg != null;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2238,commMsg.onAckReceived();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2293,SelectionKey key = ((GridSelectorNioSessionImpl)ses).key();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2296,key.interestOps(key.interestOps() | SelectionKey.OP_WRITE);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2301,return send(ses, (Message)msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2304,return send(ses, (ByteBuffer)msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioSession.java,161,public void recoveryDescriptor(GridNioRecoveryDescriptor recoveryDesc);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioSessionImpl.java,102,return chain().onSessionWrite(this, msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,25,import java.util.concurrent.atomic.AtomicInteger;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,40,private final ConcurrentLinkedDeque8<GridNioFuture<?>> queue = new ConcurrentLinkedDeque8<>();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,47,private final int selectorIdx;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,50,private final AtomicInteger queueSize = new AtomicInteger();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,63,private GridNioRecoveryDescriptor recovery;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,83,int selectorIdx,
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,94,assert selectorIdx >= 0;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,104,this.selectorIdx = selectorIdx;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,127,assert this.key == null;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,156,int selectorIndex() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,157,return selectorIdx;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,166,int offerSystemFuture(GridNioFuture<?> writeFut) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,173,return queueSize.incrementAndGet();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,186,int offerFuture(GridNioFuture<?> writeFut) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,198,return queueSize.incrementAndGet();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,204,void resend(Collection<GridNioFuture<?>> futs) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,211,boolean set = queueSize.compareAndSet(0, futs.size());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,213,assert set;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,220,GridNioFuture<?> last = queue.poll();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,223,queueSize.decrementAndGet();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,228,if (recovery != null) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,229,if (!recovery.add(last)) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,252,boolean removeFuture(GridNioFuture<?> fut) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,264,return queueSize.get();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,271,recovery = recoveryDesc;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,276,return recovery;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,281,if (val instanceof GridNioRecoveryDescriptor) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,282,recovery = (GridNioRecoveryDescriptor)val;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,285,recovery.connected();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridShmemCommunicationClient.java,58,public GridShmemCommunicationClient(GridNioMetricsListener metricsLsnr,
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridShmemCommunicationClient.java,65,super(metricsLsnr);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,51,public GridTcpNioCommunicationClient(GridNioSession ses, IgniteLogger log) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,52,super(null);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,110,assert nodeId == null;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,113,ses.addMeta(ACK_CLOSURE.ordinal(), closure);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,115,GridNioFuture<?> fut = ses.send(msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,117,if (fut.isDone()) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,118,try {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,119,fut.get();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,121,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,123,ses.removeMeta(ACK_CLOSURE.ordinal());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,126,log.debug("Failed to send message [client=" + this + ", err=" + e + ']');
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,129,return true;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,130,else
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,131,throw new IgniteCheckedException("Failed to send message [client=" + this + ']', e);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,136,ses.removeMeta(ACK_CLOSURE.ordinal());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslFilter.java,254,return proceedSessionWrite(ses, msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslHandler.java,433,req.future().onDone((GridNioFuture<Object>)parent.proceedSessionWrite(ses, req.buffer()));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslHandler.java,478,return parent.proceedSessionWrite(ses, cp);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,262,public static final int DFLT_SHMEM_PORT = 48100;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,286,public static final int DFLT_SELECTORS_CNT = Math.min(4, Runtime.getRuntime().availableProcessors());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,289,private static final int NODE_ID_META = GridNioSessionMetaKey.nextUniqueKey();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,304,public static final int DFLT_ACK_SND_THRESHOLD = 16;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,348,ses.send(nodeIdMessage());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,353,UUID id = ses.meta(NODE_ID_META);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,355,if (id != null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,397,sndId = U.bytesToUuid(((NodeIdMessage)msg).nodeIdBytes, 0);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,407,final UUID old = ses.addMeta(NODE_ID_META, sndId);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,409,assert old == null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,427,GridCommunicationClient oldClient = clients.get(sndId);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,429,boolean hasShmemClient = false;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,431,if (oldClient != null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,432,if (oldClient instanceof GridTcpNioCommunicationClient) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,434,log.debug("Received incoming connection when already connected " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,438,ses.send(new RecoveryLastReceivedMessage(-1));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,440,return;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,443,assert oldClient instanceof GridShmemCommunicationClient;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,445,hasShmemClient = true;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,449,GridFutureAdapter<GridCommunicationClient> fut = new GridFutureAdapter<>();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,451,GridFutureAdapter<GridCommunicationClient> oldFut = clientFuts.putIfAbsent(sndId, fut);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,453,assert msg instanceof HandshakeMessage : msg;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,455,HandshakeMessage msg0 = (HandshakeMessage)msg;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,457,final GridNioRecoveryDescriptor recoveryDesc = recoveryDescriptor(rmtNode);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,459,if (oldFut == null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,460,oldClient = clients.get(sndId);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,471,fut.onDone(oldClient);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,482,boolean reserved = recoveryDesc.tryReserve(msg0.connectCount(),
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,483,new ConnectClosure(ses, recoveryDesc, rmtNode, msg0, !hasShmemClient, fut));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,486,log.debug("Received incoming connection from remote node " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,489,if (reserved) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,490,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,491,GridTcpNioCommunicationClient client =
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,494,fut.onDone(client);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,496,finally {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,497,clientFuts.remove(rmtNode.id(), fut);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,501,else {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,502,if (oldFut instanceof ConnectFuture && locNode.order() < rmtNode.order()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,503,if (log.isDebugEnabled()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,504,log.debug("Received incoming connection from remote node while " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,510,ses.send(new RecoveryLastReceivedMessage(-1));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,512,else {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,514,boolean reserved = recoveryDesc.tryReserve(msg0.connectCount(),
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,515,new ConnectClosure(ses, recoveryDesc, rmtNode, msg0, !hasShmemClient, fut));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,518,connected(recoveryDesc, ses, rmtNode, msg0.received(), true, !hasShmemClient);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,524,UUID sndId = ses.meta(NODE_ID_META);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,526,if (sndId == null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,548,GridNioRecoveryDescriptor recovery = ses.recoveryDescriptor();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,550,if (recovery != null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,551,if (msg instanceof RecoveryLastReceivedMessage) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,555,log.debug("Received recovery acknowledgement [rmtNode=" + sndId +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,562,else {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,567,log.debug("Send recovery acknowledgement [rmtNode=" + sndId +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,570,nioSrvr.sendSystem(ses, new RecoveryLastReceivedMessage(rcvCnt));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,596,notifyListener(sndId, msg, c);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,618,ses.recoveryDescriptor(recovery);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,623,nioSrvr.sendSystem(ses, new RecoveryLastReceivedMessage(recovery.received()));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,625,recovery.connected();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,630,client = new GridTcpNioCommunicationClient(ses, log);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,632,GridCommunicationClient oldClient = clients.putIfAbsent(node.id(), client);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,634,assert oldClient == null : "Client already created [node=" + node + ", client=" + client +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,692,IgniteInClosure<IgniteInternalFuture<?>> lsnr = new IgniteInClosure<IgniteInternalFuture<?>>() {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,694,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,695,msgFut.get();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,697,GridTcpNioCommunicationClient client =
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,698,connected(recoveryDesc, ses, rmtNode, msg.received(), false, createClient);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,700,fut.onDone(client);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,702,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,704,log.debug("Failed to send recovery handshake " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,707,recoveryDesc.release();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,709,fut.onDone();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,711,finally {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,712,clientFuts.remove(rmtNode.id(), fut);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,717,nioSrvr.sendSystem(ses, new RecoveryLastReceivedMessage(recoveryDesc.received()), lsnr);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,724,clientFuts.remove(rmtNode.id(), fut);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,809,private final ConcurrentMap<UUID, GridCommunicationClient> clients = GridConcurrentFactory.newMap();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,856,private final ConcurrentMap<UUID, GridFutureAdapter<GridCommunicationClient>> clientFuts =
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,860,private final ConcurrentMap<ClientKey, GridNioRecoveryDescriptor> recoveryDescs = GridConcurrentFactory.newMap();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1389,for (Map.Entry<ClientKey, GridNioRecoveryDescriptor> entry : recoveryDescs.entrySet()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1625,UUID rmtNodeId = ses.meta(NODE_ID_META);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1627,return rmtNodeId != null ? formatter.reader(rmtNodeId, msgFactory) : null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1640,UUID rmtNodeId = ses.meta(NODE_ID_META);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1642,return rmtNodeId != null ? formatter.writer(rmtNodeId) : null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1718,log.info("Successfully bound to TCP port [port=" + boundTcpPort +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1819,client.forceClose();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1845,client.forceClose();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1857,client.forceClose();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1879,GridCommunicationClient client = clients.get(nodeId);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1881,if (client != null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1883,log.debug("Forcing NIO client close since node has left [nodeId=" + nodeId +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1886,client.forceClose();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1888,clients.remove(nodeId, client);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1967,client = reserveClient(node);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2009,private GridCommunicationClient reserveClient(ClusterNode node) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2015,GridCommunicationClient client = clients.get(nodeId);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2024,GridFutureAdapter<GridCommunicationClient> oldFut = clientFuts.putIfAbsent(nodeId, fut);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2028,GridCommunicationClient client0 = clients.get(nodeId);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2031,client0 = createNioClient(node);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2034,GridCommunicationClient old = clients.put(nodeId, client0);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2036,assert old == null : "Client already created " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2042,if (tcpClient.session().closeTime() > 0 && clients.remove(nodeId, client0)) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2064,clientFuts.remove(nodeId, fut);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2087,clients.remove(nodeId, client);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2137,GridCommunicationClient client = createTcpClient(node);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2169,client = new GridShmemCommunicationClient(metricsLsnr,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2190,safeHandshake(client, null, node.id(), timeoutHelper.nextTimeoutChunk(connTimeout0), null);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2249,UUID id = ses.meta(NODE_ID_META);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2252,ClusterNode node = getSpiContext().node(id);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2262,U.quietAndWarn(
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2263,log,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2264,msg);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2266,getSpiContext().failNode(id, msg);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2279,protected GridCommunicationClient createTcpClient(ClusterNode node) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2347,GridNioRecoveryDescriptor recoveryDesc = recoveryDescriptor(node);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2382,meta.put(NODE_ID_META, node.id());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2398,client = new GridTcpNioCommunicationClient(ses, log);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2631,HandshakeMessage msg = new HandshakeMessage(locNode.id(),
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2632,recovery.incrementConnectCount(),
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2633,recovery.received());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2638,buf = ByteBuffer.allocate(33);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2785,client.forceClose();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2792,private GridNioRecoveryDescriptor recoveryDescriptor(ClusterNode node) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2793,ClientKey id = new ClientKey(node.id(), node.order());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2795,GridNioRecoveryDescriptor recovery = recoveryDescs.get(id);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2800,int queueLimit = unackedMsgsBufSize != 0 ? unackedMsgsBufSize : (maxSize * 5);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2802,GridNioRecoveryDescriptor old =
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2803,recoveryDescs.putIfAbsent(id, recovery = new GridNioRecoveryDescriptor(queueLimit, node, log));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2848,private static class ClientKey {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2850,private UUID nodeId;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2853,private long order;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2859,private ClientKey(UUID nodeId, long order) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2860,this.nodeId = nodeId;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2861,this.order = order;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2867,return true;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2870,return false;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2872,ClientKey other = (ClientKey)obj;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2874,return order == other.order && nodeId.equals(other.nodeId);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2880,int res = nodeId.hashCode();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2882,res = 31 * res + (int)(order ^ (order >>> 32));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2884,return res;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2889,return S.toString(ClientKey.class, this);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2992,UUID rmtNodeId = ses.meta(NODE_ID_META);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2994,return rmtNodeId != null ? formatter.writer(rmtNodeId) : null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3008,UUID rmtNodeId = ses.meta(NODE_ID_META);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3010,return rmtNodeId != null ? formatter.reader(rmtNodeId, msgFactory) : null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3091,for (Map.Entry<UUID, GridCommunicationClient> e : clients.entrySet()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3094,GridCommunicationClient client = e.getValue();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3096,ClusterNode node = getSpiContext().node(nodeId);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3098,if (node == null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3100,log.debug("Forcing close of non-existent node connection: " + nodeId);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3102,client.forceClose();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3104,clients.remove(nodeId, client);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3106,continue;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3109,GridNioRecoveryDescriptor recovery = null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3111,if (client instanceof GridTcpNioCommunicationClient) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3112,recovery = recoveryDescs.get(new ClientKey(node.id(), node.order()));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3114,if (recovery != null && recovery.lastAcknowledged() != recovery.received()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3115,RecoveryLastReceivedMessage msg = new RecoveryLastReceivedMessage(recovery.received());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3118,log.debug("Send recovery acknowledgement on timeout [rmtNode=" + nodeId +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3121,nioSrvr.sendSystem(((GridTcpNioCommunicationClient)client).session(), msg);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3123,recovery.lastAcknowledged(msg.received());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3125,continue;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3129,long idleTime = client.getIdleTime();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3131,if (idleTime >= idleConnTimeout) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3132,if (recovery != null &&
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3133,recovery.nodeAlive(getSpiContext().node(nodeId)) &&
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3134,!recovery.messagesFutures().isEmpty()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3136,log.debug("Node connection is idle, but there are unacknowledged messages, " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3139,continue;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3143,log.debug("Closing idle node connection: " + nodeId);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3146,clients.remove(nodeId, client);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3155,Set<ClientKey> left = null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3157,for (Map.Entry<ClientKey, GridNioRecoveryDescriptor> e : recoveryDescs.entrySet()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3161,GridNioRecoveryDescriptor recoverySnd = e.getValue();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3163,if (!recoverySnd.nodeAlive(getSpiContext().node(recoverySnd.node().id()))) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3174,for (ClientKey id : left) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3175,GridNioRecoveryDescriptor recoverySnd = recoveryDescs.get(id);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3178,recoveryDescs.remove(id);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3459,buf.put(HANDSHAKE_MSG_TYPE);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3167,utilityPool.submit(
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3212,utilityPool.submit(
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3269,utilityPool.submit(
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3311,utilityPool.submit(
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3349,utilityPool.submit(
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/jobtracker/HadoopJobTracker.java,245,evtProcSvc.submit(new EventHandler() {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/jobtracker/HadoopJobTracker.java,269,evtProcSvc.submit(new EventHandler() {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/communication/HadoopExternalCommunication.java,1306,return proceedSessionWrite(ses, msg);
modules/kafka/src/main/java/org/apache/ignite/stream/kafka/KafkaStreamer.java,172,executor.submit(new Runnable() {
modules/tools/src/main/java/org/apache/ignite/tools/classgen/ClassesGenerator.java,125,throw new Exception(sb.toString().trim());
modules/yardstick/src/main/java/org/apache/ignite/yardstick/cache/CacheEntryEventProbe.java,75,buildingService.submit(new Runnable() {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,28,import org.apache.ignite.IgniteCheckedException;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,29,import org.apache.ignite.internal.IgniteInternalFuture;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,30,import org.apache.ignite.internal.client.GridClient;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,31,import org.apache.ignite.internal.client.GridClientConfiguration;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,32,import org.apache.ignite.internal.client.GridClientException;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,33,import org.apache.ignite.internal.client.GridClientFactory;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,34,import org.apache.ignite.internal.client.marshaller.jdk.GridClientJdkMarshaller;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,36,import org.apache.ignite.internal.util.future.GridFutureAdapter;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,39,import static org.apache.ignite.internal.client.GridClientProtocol.TCP;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,50,private static final ConcurrentHashMap<String, IgniteInternalFuture<GridClient>> cliMap = new ConcurrentHashMap<>();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,92,private static ClientProtocol createProtocol(String addr, Configuration conf) throws IOException {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,104,try {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,107,if (fut == null) {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,108,GridFutureAdapter<GridClient> fut0 = new GridFutureAdapter<>();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,113,return oldFut.get();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,114,else {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,115,GridClientConfiguration cliCfg = new GridClientConfiguration();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,117,cliCfg.setProtocol(TCP);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,119,cliCfg.setMarshaller(new GridClientJdkMarshaller());
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,120,cliCfg.setDaemon(true);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,122,try {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,123,GridClient cli = GridClientFactory.start(cliCfg);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,125,fut0.onDone(cli);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,127,return cli;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,129,catch (GridClientException e) {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,130,fut0.onDone(e);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,137,return fut.get();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,139,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1513,joinError(new IgniteSpiException("Join process timed out."));
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,425,.callAsyncNoFailover(BROADCAST, affinityJob(cacheName, topVer), F.asList(n), true/*system pool*/).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3583,true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3589,true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,494,true).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,517,true).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,2140,rmtFut = cctx.closures().callAsyncNoFailover(BROADCAST, Collections.singleton(job), nodes, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,519,public <R> IgniteInternalFuture<R> callAsyncNoFailover(GridClosureCallMode mode, @Nullable Callable<R> job,
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,550,public <R> IgniteInternalFuture<Collection<R>> callAsyncNoFailover(GridClosureCallMode mode,
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,552,boolean sys) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,576,public Map<UUID, Integer> serviceTopology(String name) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,584,false
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,174,false
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,249,Map<UUID, Integer> snapshot = ctx.service().serviceTopology(name);
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,739,boolean loc = ctx.localNodeId().equals(sndNode.id()) && !ctx.config().isMarshalLocalJobs();
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,741,Map<Object, Object> attrs = jobCtx.getAttributes();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3195,return clusterMetrics(ctx.grid().cluster().forCacheNodes(ctx.name()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4514,ctx.preloader().forcePreload();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4516,return ctx.preloader().syncFuture();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,687,public void forcePreloadExchange(GridDhtPartitionsExchangeFuture exchFut) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,689,new GridDhtPartitionsExchangeFuture(cctx, exchFut.discoveryEvent(), exchFut.exchangeId()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1441,cnt);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePreloader.java,93,int cnt);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePreloader.java,145,public void forcePreload();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePreloaderAdapter.java,163,Collection<String> caches, int cnt) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2118,ctx.preloader().forcePreload();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,2120,return new IgniteFutureImpl<>(ctx.preloader().syncFuture());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,208,void forcePreload() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,222,cctx.shared().exchange().forcePreloadExchange(exchFut);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,290,final Collection<String> caches, int cnt) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,344,cctx.shared().exchange().forcePreloadExchange(exchFut);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,225,GridDhtPartitionExchangeId exchId) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,415,boolean forcePreload, Collection<String> caches, int cnt) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,416,return demander.addAssignments(assignments, forcePreload, caches, cnt);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,712,demander.forcePreload();
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,32,import java.util.HashMap;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,267,stableFieldsMeta = metaDataEnabled ? new HashMap<String, Integer>() : null;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryUtils.java,905,boolean changed = false;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryUtils.java,907,Map<String, Integer> mergedFields = new HashMap<>(oldMeta.fieldsMap());
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryObjectBuilderImpl.java,389,fieldsMeta = new HashMap<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformContextImpl.java,367,Map<String, Integer> fields = PlatformUtils.readMap(reader,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,753,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1970,GridCacheVersion verSet = entry.versionedValue(cacheVal, ver, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2153,entry.versionedValue(ctx.toCacheObject(v), null, ver);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,493,GridCacheVersion setVer = entry.versionedValue(cacheVal, ver, null);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,733,setFilters(filters);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,735,try {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,754,setFilters(null);
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,301,LT.warn(log, null, "Affinity function excludeNeighbors property is ignored " +
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,404,LT.warn(log, null, "Affinity function excludeNeighbors property is ignored " +
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,986,LT.warn(log, null, "Possible thread pool starvation detected (no task completed in last " +
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,320,LT.warn(log, null, "Local node is in participants (most probably, " +
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,968,LT.warn(log, null, "Failed to check network segment (retrying every 2000 ms).");
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,281,LT.warn(log, null, "Trying to record event without checking if it is recordable: " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,402,LT.warn(log, null, "Ignoring deployment in PRIVATE or ISOLATED mode " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,411,LT.warn(log, null, "Local and remote deployment mode mismatch (please fix configuration and restart) " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEventManager.java,254,LT.warn(log, null, "Added event without checking if event is recordable: " + U.gridEventName(type));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEventManager.java,264,LT.warn(log, null, "Failed to find event node in grid topology history " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEventManager.java,287,LT.warn(log, null, "Failed to unmarshall cache object value for the event notification " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEventManager.java,354,LT.warn(log, null, "Added event without checking if event is recordable: " + U.gridEventName(type));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEventManager.java,367,LT.warn(log, null, "Added event without checking if event is recordable: " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/store/GridCacheStoreManagerAdapter.java,550,LT.warn(log, null, "Calling Cache.loadCache() method will have no effect, " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/store/GridCacheWriteBehindStore.java,708,LT.warn(log, e, "Unable to update underlying store: " + store);
modules/core/src/main/java/org/apache/ignite/internal/processors/clock/GridClockSyncProcessor.java,461,LT.warn(log, e, "Failed to send time request to remote node [rmtNodeId=" + rmtNodeId +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFragmentizerManager.java,44,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFragmentizerManager.java,45,import java.util.Iterator;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFragmentizerManager.java,46,import java.util.LinkedList;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFragmentizerManager.java,47,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFragmentizerManager.java,48,import java.util.UUID;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFragmentizerManager.java,49,import java.util.concurrent.BlockingQueue;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFragmentizerManager.java,50,import java.util.concurrent.ConcurrentHashMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFragmentizerManager.java,51,import java.util.concurrent.ConcurrentMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFragmentizerManager.java,52,import java.util.concurrent.LinkedBlockingDeque;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFragmentizerManager.java,53,import java.util.concurrent.TimeUnit;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFragmentizerManager.java,54,import java.util.concurrent.locks.Condition;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFragmentizerManager.java,55,import java.util.concurrent.locks.Lock;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFragmentizerManager.java,56,import java.util.concurrent.locks.ReentrantLock;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFragmentizerManager.java,386,LT.warn(log, e, "Failed to get fragmentizer file info (will retry).");
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,80,import java.io.OutputStream;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,81,import java.net.URI;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,82,import java.util.ArrayList;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,83,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,84,import java.util.Collections;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,85,import java.util.HashMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,86,import java.util.HashSet;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,87,import java.util.LinkedHashMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,88,import java.util.List;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,89,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,92,import java.util.concurrent.Callable;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,94,import java.util.concurrent.ThreadFactory;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,96,import java.util.concurrent.atomic.AtomicLong;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1223,LT.warn(log, e, "Failed to get secondary file system consumed space size.");
modules/core/src/main/java/org/apache/ignite/internal/processors/nodevalidation/OsDiscoveryNodeValidationProcessor.java,61,LT.warn(log, null, errMsg);
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,595,LT.warn(log, null, "Number of jobs in task is too large for task: " + ses.getTaskName() +
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,85,public static void warn(@Nullable IgniteLogger log, @Nullable Throwable e, String msg) {
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,99,public static void warn(@Nullable IgniteLogger log, @Nullable Throwable e, String msg, boolean quite) {
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,113,public static void warn(@Nullable IgniteLogger log, @Nullable Throwable e, String longMsg, @Nullable String shortMsg) {
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,126,public static void info(@Nullable IgniteLogger log, String msg, boolean quite) {
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,159,private static void log(@Nullable IgniteLogger log, @Nullable Throwable e, String longMsg, @Nullable String shortMsg,
modules/core/src/main/java/org/apache/ignite/internal/util/ipc/shmem/IpcSharedMemoryNativeLoader.java,153,LT.warn(log, null, "Failed to load 'igniteshmem' library from classpath. Will try to load it from IGNITE_HOME.");
modules/core/src/main/java/org/apache/ignite/internal/util/ipc/shmem/IpcSharedMemoryServerEndpoint.java,300,LT.warn(log, null, msg);
modules/core/src/main/java/org/apache/ignite/internal/util/ipc/shmem/IpcSharedMemoryServerEndpoint.java,306,LT.warn(log, null, OUT_OF_RESOURCES_MSG);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridConnectionBytesVerifyFilter.java,118,LT.warn(log, null, "Unknown connection detected (is some other software connecting to this " +
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioCodecFilter.java,113,LT.warn(log, null, "Parser returned null but there are still unread data in input buffer (bug in " +
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioFilterChain.java,161,LT.warn(log, ex, "Failed to forward GridNioException to filter chain [ses=" + ses + ", e=" + e + ']');
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,771,LT.warn(log, null, "Read buffer contains data after filter chain processing (will discard " +
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,230,LT.warn(log, null, "Unacknowledged messages queue size overflow, will attempt to reconnect " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,332,LT.warn(log, null, "Communication SPI Session write timed out (consider increasing " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2125,LT.warn(log, null, OUT_OF_RESOURCES_TCP_MSG);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2127,LT.warn(log, null, e.getMessage());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2488,LT.warn(log, null, "Connect timed out (consider increasing 'failureDetectionTimeout' " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2492,LT.warn(log, null, "Connect timed out (consider increasing 'connTimeout' " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2523,LT.warn(log, null, "Failed to connect to a remote node " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,485,LT.warn(log, null, "IP finder returned empty addresses list. " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,539,LT.warn(log, null, "Failed to connect to any address from IP finder (will retry to join topology " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,903,LT.warn(log, null, "Failed to read message due to ClassNotFoundException " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,57,import java.util.concurrent.ThreadPoolExecutor;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,513,LT.warn(log, null, "Failed to ping node (status check will be initiated): " + nodeId);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,902,LT.warn(log, null, "Node has not been connected to topology and will repeat join process. " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1022,LT.warn(log, null, "Failed to connect to any address from IP finder " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2888,LT.warn(log, null, "Local node has detected failed nodes and started cluster-wide procedure. " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2973,LT.warn(log, null, errMsg);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3026,LT.warn(log, null, "Ignoring join request from node (duplicate ID) [node=" + node +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3081,LT.warn(log, null,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3111,LT.warn(log, null,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3182,LT.warn(log, null, err.message());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3223,LT.warn(log, null, errMsg);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3442,LT.warn(log, null, errMsg);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3725,LT.warn(log, null,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,5153,LT.warn(log, null, "Failed to read magic header (too few bytes received) [rmtAddr=" +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,5169,LT.warn(log, null, "Unknown connection detected (is some other software connecting to " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,5289,LT.warn(log, null, "Failed to initialize connection " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,5318,LT.warn(log, null, "Socket operation timed out on handshake " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,5323,LT.warn(log, null, "Failed to read message due to ClassNotFoundException " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,5553,LT.warn(log, null, "Failed to read message due to ClassNotFoundException " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoveryImpl.java,305,LT.warn(log, null, "Acknowledgement timeout is greater than maximum acknowledgement timeout " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1472,LT.warn(log, null, "Timed out waiting for message to be read (most probably, the reason is " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1512,LT.warn(log, null, "Timed out waiting for message delivery receipt (most probably, the reason is " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1576,LT.warn(log, null, "Failed to resolve address from IP finder (host is unknown): " + addr);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,2033,LT.warn(log, null, "Socket write has timed out (consider increasing " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,601,LT.warn(log, e, "Failed to deserialize multicast response.");
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,882,LT.warn(log, e, "Failed to send/receive address message (will try to reconnect).");
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/communication/HadoopExternalCommunication.java,853,LT.warn(log, null, OUT_OF_RESOURCES_TCP_MSG);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/communication/HadoopExternalCommunication.java,1056,LT.warn(log, null, "Connect timed out (consider increasing 'connTimeout' " +
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/communication/HadoopExternalCommunication.java,1081,LT.warn(log, null, "Failed to connect to a remote Hadoop process (is process still running?). " +
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,887,LT.warn(log, null, longMsg, msg);
modules/urideploy/src/main/java/org/apache/ignite/spi/deployment/uri/scanners/http/UriDeploymentHttpScanner.java,346,LT.warn(scanCtx.getLogger(), e, "Failed to connect to HTTP server " +
modules/urideploy/src/main/java/org/apache/ignite/spi/deployment/uri/scanners/http/UriDeploymentHttpScanner.java,350,LT.warn(scanCtx.getLogger(), e, "Failed to connect to HTTP server " +
modules/urideploy/src/main/java/org/apache/ignite/spi/deployment/uri/scanners/http/UriDeploymentHttpScanner.java,407,LT.warn(scanCtx.getLogger(), e, "Failed to connect to HTTP server (connection refused): " +
modules/urideploy/src/main/java/org/apache/ignite/spi/deployment/uri/scanners/http/UriDeploymentHttpScanner.java,411,LT.warn(scanCtx.getLogger(), e, "Failed to connect to HTTP server (host is unknown): " +
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedObjectOutputStream.java,29,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedObjectOutputStream.java,69,private static final Collection<String> CONVERTED_ERR = F.asList(
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedObjectOutputStream.java,73,);
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedObjectOutputStream.java,160,try {
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedObjectOutputStream.java,161,writeObject0(obj);
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedObjectOutputStream.java,163,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedObjectOutputStream.java,164,Throwable t = e;
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedObjectOutputStream.java,166,do {
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedObjectOutputStream.java,168,throw new IOException("You are trying to serialize internal classes that are not supposed " +
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedObjectOutputStream.java,172,while ((t = t.getCause()) != null);
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedObjectOutputStream.java,174,throw e;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,28,import java.util.Queue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,32,import java.util.concurrent.Callable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,79,import org.apache.ignite.internal.util.typedef.internal.GPC;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,89,import org.jsr166.ConcurrentLinkedDeque8;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,94,import static org.apache.ignite.events.EventType.EVT_CACHE_REBALANCE_STARTED;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,148,private final Queue<Callable<Boolean>> rebalanceQ = new ConcurrentLinkedDeque8<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1276,boolean startEvtFired = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1280,IgniteInternalFuture asyncStartFut = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1356,if (!exchFut.skipPreload() && cacheCtx.events().isRecordable(EVT_CACHE_REBALANCE_STARTED)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1357,if (!cacheCtx.isReplicated() || !startEvtFired) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1358,DiscoveryEvent discoEvt = exchFut.discoveryEvent();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1360,cacheCtx.events().addPreloadEvent(-1, EVT_CACHE_REBALANCE_STARTED,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1361,discoEvt.eventNode(), discoEvt.type(), discoEvt.timestamp());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1366,startEvtFired = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1406,rebalanceQ.clear();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1423,Callable<Boolean> marshR = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1424,List<Callable<Boolean>> orderedRs = new ArrayList<>(size);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1427,for (Integer order : orderMap.keySet()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1431,List<String> waitList = new ArrayList<>(size - 1);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1433,for (List<Integer> cIds : orderMap.headMap(order).values()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1435,waitList.add(cctx.cacheContext(cId).name());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1438,Callable<Boolean> r = cacheCtx.preloader().addAssignments(assignsMap.get(cacheId),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1440,waitList,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1443,if (r != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1444,U.log(log, "Cache rebalancing scheduled: [cache=" + cacheCtx.name() +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1448,marshR = r;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1449,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1450,orderedRs.add(r);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1456,asyncStartFut.get(); // Wait for thread stop.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1458,rebalanceQ.addAll(orderedRs);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1460,if (marshR != null || !rebalanceQ.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1462,U.log(log, "Rebalancing required " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1466,if (marshR != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1467,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1468,marshR.call(); //Marshaller cache rebalancing launches in sync way.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1470,catch (Exception ex) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1472,log.debug("Failed to send initial demand request to node");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1474,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1478,final GridFutureAdapter fut = new GridFutureAdapter();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1480,asyncStartFut = fut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1482,cctx.kernalContext().closure().callLocalSafe(new GPC<Boolean>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1484,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1485,while (true) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1486,Callable<Boolean> r = rebalanceQ.poll();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1489,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1492,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1495,catch (Exception ex) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1497,log.debug("Failed to send initial demand request to node");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1499,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1501,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1502,fut.onDone();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1507,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1513,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePreloader.java,22,import java.util.concurrent.Callable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePreloader.java,90,public Callable<Boolean> addAssignments(GridDhtPreloaderAssignments assignments,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePreloader.java,92,Collection<String> caches,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePreloaderAdapter.java,22,import java.util.concurrent.Callable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,31,import java.util.concurrent.Callable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,256,private boolean waitForCacheRebalancing(String name, RebalanceFuture fut) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,258,log.debug("Waiting for another cache to start rebalancing [cacheName=" + cctx.name() +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,262,.preloader().rebalanceFuture();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,264,if (!topologyChanged(fut) && wFut.updateSeq == fut.updateSeq) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,265,if (!wFut.get()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,266,U.log(log, "Skipping waiting of " + name + " cache [top=" + fut.topologyVersion() +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,269,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,272,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,274,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,275,U.log(log, "Skipping waiting of " + name + " cache [top=" + fut.topologyVersion() +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,278,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,289,Callable<Boolean> addAssignments(final GridDhtPreloaderAssignments assigns, boolean force,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,299,final RebalanceFuture fut = new RebalanceFuture(assigns, cctx, log, oldFut.isInitial(), cnt);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,313,if (assigns.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,314,fut.doneIfEmpty(assigns.cancelled());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,319,return new Callable<Boolean>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,321,for (String c : caches) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,323,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,326,return requestPartitions(fut, assigns);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,364,private boolean requestPartitions(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,368,for (Map.Entry<ClusterNode, GridDhtPartitionDemandMessage> e : assigns.entrySet()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,370,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,390,U.log(log, "Starting rebalancing [cache=" + cctx.name() + ", mode=" + cfg.getRebalanceMode() +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,450,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,745,void updateLastExchangeFuture(GridDhtPartitionsExchangeFuture lastFut) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,746,lastExchangeFut = lastFut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,757,private final boolean sndStoppedEvnt;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,791,boolean sentStopEvnt,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,799,this.sndStoppedEvnt = sentStopEvnt;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,811,this.sndStoppedEvnt = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,852,private void doneIfEmpty(boolean cancelled) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,853,synchronized (this) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,855,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,857,assert remaining.isEmpty();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,860,log.debug("Rebalancing is not required [cache=" + cctx.name() +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,863,checkIsDone(cancelled, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,878,+ ", topology=" + topologyVersion() + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,887,checkIsDone(true /* cancelled */, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,909,onDone(false); // Finishing rebalance future a non completed.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,1024,checkIsDone(false, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,1031,private void checkIsDone(boolean cancelled, boolean wasEmpty) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,1034,preloadEvent(EVT_CACHE_REBALANCE_STOPPED, exchFut.discoveryEvent());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,1040,cctx.shared().exchange().scheduleResendPartitions();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,25,import java.util.concurrent.Callable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,256,demander.updateLastExchangeFuture(lastFut);
modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/OdbcRequestHandler.java,154,IgniteCache<Object, Object> cache = ctx.grid().cache(req.cacheName());
modules/core/src/main/java/org/apache/ignite/internal/binary/GridBinaryMarshaller.java,46,static final byte OPTM_MARSH = -2;
modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/OdbcRequestHandler.java,157,return new OdbcResponse(OdbcResponse.STATUS_FAILED,
modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/OdbcRequestHandler.java,160,QueryCursor qryCur = cache.query(qry);
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,1582,return cfg.getConnectorConfiguration() != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/OdbcNioListener.java,140,ses.send(parser.encode(new OdbcResponse(OdbcResponse.STATUS_FAILED, e.getMessage())));
modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/OdbcRequestHandler.java,175,return new OdbcResponse(OdbcResponse.STATUS_FAILED, e.getMessage());
modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/OdbcRequestHandler.java,203,return new OdbcResponse(OdbcResponse.STATUS_FAILED, e.getMessage());
modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/OdbcRequestHandler.java,230,return new OdbcResponse(OdbcResponse.STATUS_FAILED, e.getMessage());
modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/OdbcRequestHandler.java,284,return new OdbcResponse(OdbcResponse.STATUS_FAILED, e.getMessage());
modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/OdbcRequestHandler.java,123,IgniteProductVersion ver = ctx.grid().version();
modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/OdbcRequestHandler.java,125,String verStr = Byte.toString(ver.major()) + '.' + ver.minor() + '.' + ver.maintenance();
modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/OdbcRequestHandler.java,130,return new OdbcResponse(res);
modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/OdbcRequestHandler.java,162,Iterator iter = qryCur.iterator();
modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/OdbcRequestHandler.java,164,qryCursors.put(qryId, new IgniteBiTuple<>(qryCur, iter));
modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/OdbcRequestHandler.java,187,QueryCursor cur = qryCursors.get(req.queryId()).get1();
modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/OdbcRequestHandler.java,215,Iterator cur = qryCursors.get(req.queryId()).get2();
modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/OdbcRequestHandler.java,223,items.add(cur.next());
modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/OdbcRequestHandler.java,225,OdbcQueryFetchResult res = new OdbcQueryFetchResult(req.queryId(), items, !cur.hasNext());
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,28,import java.util.ArrayList;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,266,ArrayList<BinaryFieldAccessor> fields0 = new ArrayList<>();
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,269,BinarySchema.Builder schemaBuilder = BinarySchema.Builder.newBuilder();
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,297,fields0.add(fieldInfo);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,299,schemaBuilder.addField(fieldId);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,310,fields = fields0.toArray(new BinaryFieldAccessor[fields0.size()]);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,708,if (!deserialize) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,709,Collection<BinarySchema> schemas = desc.schema() != null ? Collections.singleton(desc.schema()) : null;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,712,new BinaryMetadata(typeId, typeName, desc.fieldsMeta(), affFieldName, schemas, desc.isEnum()).wrap(this));
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,1045,Collection<BinarySchema> schemas = null;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,1070,schemas = desc.schema() != null ? Collections.singleton(desc.schema()) : null;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,1075,metaHnd.addMeta(id, new BinaryMetadata(id, typeName, fieldsMeta, affKeyFieldName, schemas, isEnum).wrap(this));
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryObjectBuilderImpl.java,518,assignedVals = new LinkedHashMap<>();
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,151,useOptMarshaller = serializer == null;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,182,if (useOptMarshaller && userType && !U.isIgnite(cls) && !U.isJdk(cls)) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,304,return marshCtx.isSystemType(cls.getName()) || serializerForClass(cls) == null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,771,part.tryEvict();
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcResultSet.java,1510,T val = cls == String.class ? (T)String.valueOf(curr.get(colIdx - 1)) : (T)curr.get(colIdx - 1);
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcResultSet.java,1514,return val;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1487,T val = cls == String.class ? (T)String.valueOf(curr.get(colIdx - 1)) : (T)curr.get(colIdx - 1);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1491,return val;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1936,colIdxs.put(meta.getColumnLabel(i), i);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/BasicJdbcDialect.java,155,return String.format("SELECT %s FROM (SELECT %s, ROWNUM() AS rn FROM %s ORDER BY %s) WHERE mod(rn, ?) = 0",
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/BasicJdbcDialect.java,156,cols, cols, fullTblName, cols);
modules/core/src/main/java/org/apache/ignite/internal/util/future/GridFutureAdapter.java,266,U.error(null, "Failed to notify listener (is grid stopped?) [fut=" + this +
modules/core/src/main/java/org/apache/ignite/internal/util/future/GridFutureAdapter.java,270,U.error(null, "Failed to notify listener: " + lsnr, e);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,181,addPage0(page);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,188,assert !cnt.initialized : "Counter is already initialized.";
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,190,cnt.addAndGet(allRows);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,195,cnt.initialized = true;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,198,if (cnt.addAndGet(-pageRowsCnt) == 0) { // Result can be negative in case of race between messages, it is ok.
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,199,boolean last = true;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,201,for (Counter c : remainingRows.values()) { // Check all the sources.
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,202,if (c.get() != 0 || !c.initialized) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,203,last = false;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,205,break;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,209,if (last && lastSubmitted.compareAndSet(false, true)) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,434,volatile boolean initialized;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,1840,IgniteBiTuple<Collection<String>, Collection<String>> res = cachedLocalAddr;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,1843,List<InetAddress> localAddrs = new ArrayList<>();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,1848,localAddrs.add(addr);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,1852,localAddrs = filterReachable(localAddrs);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,1855,addresses(addr, addrs, hostNames);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,1862,cachedLocalAddr = res;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,1868,addresses(locAddr, addrs, hostNames);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,1878,private static void addresses(InetAddress addr, Collection<String> addrs, Collection<String> hostNames) {
modules/core/src/main/java/org/apache/ignite/internal/visor/misc/VisorResolveHostNameTask.java,69,IgniteUtils.resolveLocalAddresses(InetAddress.getByName("0.0.0.0"));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2ValueCacheObject.java,149,if (o1 instanceof BinaryEnumObjectImpl && o2 instanceof Enum) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2ValueCacheObject.java,150,final BinaryEnumObjectImpl bo1 = (BinaryEnumObjectImpl)o1;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2ValueCacheObject.java,153,return Integer.compare(bo1.enumOrdinal(), ((Enum)o2).ordinal());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/BlockingSslHandler.java,95,int netBufSize = sslEngine.getSession().getPacketBufferSize() + 50;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/BlockingSslHandler.java,169,outNetBuf.flip();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/BlockingSslHandler.java,175,handshakeStatus + ']');
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/BlockingSslHandler.java,177,writeNetBuffer();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/BlockingSslHandler.java,502,ByteBuffer res = ByteBuffer.allocate(cap);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/BlockingSslHandler.java,504,res.order(ByteOrder.nativeOrder());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/BlockingSslHandler.java,519,private ByteBuffer copy(ByteBuffer original) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/BlockingSslHandler.java,520,ByteBuffer cp = ByteBuffer.allocate(original.remaining());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/BlockingSslHandler.java,522,cp.put(original);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/BlockingSslHandler.java,524,cp.flip();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/BlockingSslHandler.java,526,return cp;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,172,boolean aggregateFound = false;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,483,Set<String> colNames, final int idx, boolean collocated, boolean isHaving) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,502,splitAggregates(alias, 0, mapSelect, idx, true);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,573,splitAggregate(parentExpr, childIdx, mapSelect, exprIdx, first);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,616,case AVG: // SUM( AVG(CAST(x AS DOUBLE))*COUNT(x) )/SUM( COUNT(x) ).
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,619,.resultType(GridSqlType.BIGINT).addChild(agg.child());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,623,String cntMapAggAlias = columnName(mapSelect.size());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,625,cntMapAgg = alias(cntMapAggAlias, cntMapAgg);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,627,mapSelect.add(cntMapAgg);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,630,mapAgg = aggregate(agg.distinct(), AVG).resultType(GridSqlType.DOUBLE).addChild(
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,631,function(CAST).resultType(GridSqlType.DOUBLE).addChild(agg.child()));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,634,GridSqlElement sumUpRdc = aggregate(false, SUM).addChild(
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,635,op(GridSqlOperationType.MULTIPLY,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,636,column(mapAggAlias.alias()),
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,637,column(cntMapAggAlias)));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,639,GridSqlElement sumDownRdc = aggregate(false, SUM).addChild(column(cntMapAggAlias));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,641,rdcAgg = op(GridSqlOperationType.DIVIDE, sumUpRdc, sumDownRdc);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,648,mapAgg = aggregate(agg.distinct(), agg.type()).resultType(agg.resultType()).addChild(agg.child());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,649,rdcAgg = aggregate(agg.distinct(), agg.type()).addChild(column(mapAggAlias.alias()));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,655,mapAgg = aggregate(agg.distinct(), agg.type()).resultType(GridSqlType.BIGINT);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,658,mapAgg.addChild(agg.child());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,660,rdcAgg = aggregate(false, SUM).addChild(column(mapAggAlias.alias()));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,661,rdcAgg = function(CAST).resultType(GridSqlType.BIGINT).addChild(rdcAgg);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,126,BinaryObjectExImpl otherPo = (BinaryObjectExImpl)other;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,132,if (otherPo.hasArray()) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,133,int len = length();
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,134,int end = start() + len;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,136,byte[] arr = array();
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,137,byte[] otherArr = otherPo.array();
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,139,for (int i = start(), j = otherPo.start(); i < end; i++, j++) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,147,assert otherPo.offheapAddress() > 0;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,149,return GridUnsafeMemory.compare(otherPo.offheapAddress() + otherPo.start(), array());
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,156,return GridUnsafeMemory.compare(offheapAddress() + start(), otherPo.array());
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,158,assert otherPo.offheapAddress() > 0;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,160,return GridUnsafeMemory.compare(offheapAddress() + start(),
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,161,otherPo.offheapAddress() + otherPo.start(),
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,162,length());
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectOffheapImpl.java,99,String clsName = BinaryUtils.doReadClassName(new BinaryOffheapInputStream(off, size));
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMemory.java,516,int len = bytes.length;
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMemory.java,519,for (int i = 0; i < align && i < len; i++) {
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMemory.java,523,ptr++;
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMemory.java,545,int comp = GridUnsafe.getInt(bytes, GridUnsafe.BYTE_ARR_OFF + step);
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMemory.java,561,long comp = GridUnsafe.getLong(bytes, GridUnsafe.BYTE_ARR_OFF + step);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/BlockingSslHandler.java,468,inNetBuf.clear();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,143,public static GridCacheTwoStepQuery split(JdbcPreparedStatement stmt, Object[] params, boolean collocated, IgniteH2Indexing igniteH2Indexing) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,175,aggregateFound |= splitSelectExpression(mapExps, rdcExps, colNames, i, collocated, i == havingCol);
modules/core/src/main/java/org/apache/ignite/spi/loadbalancing/roundrobin/RoundRobinGlobalLoadBalancer.java,29,import org.apache.ignite.IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/spi/loadbalancing/roundrobin/RoundRobinGlobalLoadBalancer.java,122,EVT_NODE_FAILED, EVT_NODE_JOINED, EVT_NODE_LEFT
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtAffinityAssignmentRequest.java,133,return S.toString(GridDhtAffinityAssignmentRequest.class, this);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioSessionMetaKey.java,30,SSL_HANDLER,
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioSessionMetaKey.java,48,SSL_ENGINE,
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/BlockingSslHandler.java,258,inNetBuf.clear();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslFilter.java,38,import static org.apache.ignite.internal.util.nio.GridNioSessionMetaKey.SSL_HANDLER;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslFilter.java,157,SSLEngine engine = sslCtx.createSSLEngine();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslFilter.java,159,engine.setUseClientMode(clientMode);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslFilter.java,161,if (!clientMode) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslFilter.java,162,engine.setWantClientAuth(wantClientAuth);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslFilter.java,164,engine.setNeedClientAuth(needClientAuth);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslFilter.java,168,engine.setEnabledCipherSuites(enabledCipherSuites);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslFilter.java,171,engine.setEnabledProtocols(enabledProtos);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslFilter.java,174,GridNioSslHandler hnd = new GridNioSslHandler(this, ses, engine, directBuf, order, log);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslFilter.java,176,ses.addMeta(SSL_HANDLER.ordinal(), hnd);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslFilter.java,382,GridNioSslHandler hnd = ses.meta(SSL_HANDLER.ordinal());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslHandler.java,46,import static org.apache.ignite.internal.util.nio.GridNioSessionMetaKey.SSL_ENGINE;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslHandler.java,114,IgniteLogger log) throws SSLException {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslHandler.java,131,sslEngine = ses.meta(SSL_ENGINE.ordinal());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2357,SSLEngine sslEngine = null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2363,sslEngine = ignite.configuration().getSslContextFactory().create().createSSLEngine();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2368,rcvCnt = safeHandshake(ch, recoveryDesc, node.id(),
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2369,timeoutHelper.nextTimeoutChunk(connTimeout0), sslEngine);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2380,Map<Integer, Object> meta = new HashMap<>();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2384,if (isSslEnabled()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2385,assert sslEngine != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2387,meta.put(GridNioSessionMetaKey.SSL_ENGINE.ordinal(), sslEngine);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2573,sslHnd = new BlockingSslHandler(ssl, ch, directBuf, ByteOrder.nativeOrder(), log);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2691,buf.flip();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2692,buf.compact();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java,113,for (JdbcType jdbcType : jdbcFactory.getTypes()) {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java,114,VisorCacheTypeMetadata meta = metaMap.get(jdbcType.getKeyType());
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java,116,boolean notFound = meta == null;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java,118,if (notFound) {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java,119,meta = new VisorCacheTypeMetadata();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java,121,meta.keyType = jdbcType.getKeyType();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java,122,meta.valType = jdbcType.getValueType();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java,124,meta.qryFlds = Collections.emptyMap();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java,125,meta.ascFlds = Collections.emptyMap();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java,126,meta.descFlds = Collections.emptyMap();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java,127,meta.txtFlds = Collections.emptyList();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java,128,meta.grps = Collections.emptyMap();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java,131,meta.dbSchema = jdbcType.getDatabaseSchema();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java,132,meta.dbTbl = jdbcType.getDatabaseTable();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java,134,JdbcTypeField[] keyFields = jdbcType.getKeyFields();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java,143,JdbcTypeField[] valFields = jdbcType.getValueFields();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java,149,fld.getDatabaseFieldName(), fld.getDatabaseFieldType(),
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java,150,fld.getDatabaseFieldName(), U.compact(fld.getJavaFieldType().getName())));
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java,153,metas.add(meta);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,584,final List<CacheContinuousQueryEntry> entries = (List<CacheContinuousQueryEntry>)objs;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,628,notifyCallback0(nodeId, ctx, entries);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,4024,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,4078,else
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,338,byte[] nodeHashBytes = ignite.configuration().getMarshaller().marshal(nodeHash);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcBlobStore.java,563,return marsh.marshal(obj);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcBlobStore.java,578,return marsh.unmarshal(bytes, getClass().getClassLoader());
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,373,filterBytes = ctx.config().getMarshaller().marshal(filter);
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,390,filter = ctx.config().getMarshaller().unmarshal(filterBytes, U.resolveClassLoader(dep.classLoader(), ctx.config()));
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,493,bytes = marsh.marshal(evt);
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,507,evt = marsh.unmarshal(bytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/GridJobSiblingsResponse.java,77,siblings = marsh.unmarshal(siblingsBytes, null);
modules/core/src/main/java/org/apache/ignite/internal/GridMessageListenHandler.java,162,topicBytes = ctx.config().getMarshaller().marshal(topic);
modules/core/src/main/java/org/apache/ignite/internal/GridMessageListenHandler.java,164,predBytes = ctx.config().getMarshaller().marshal(pred);
modules/core/src/main/java/org/apache/ignite/internal/GridMessageListenHandler.java,196,topic = ctx.config().getMarshaller().unmarshal(topicBytes, U.resolveClassLoader(ldr, ctx.config()));
modules/core/src/main/java/org/apache/ignite/internal/GridMessageListenHandler.java,198,pred = ctx.config().getMarshaller().unmarshal(predBytes, U.resolveClassLoader(ldr, ctx.config()));
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryEnumObjectImpl.java,240,return ctx.marshaller().marshal(this);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryMarshaller.java,102,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,160,byte[] arr = ctx.optimizedMarsh().marshal(obj);
modules/core/src/main/java/org/apache/ignite/internal/client/marshaller/optimized/GridClientOptimizedMarshaller.java,87,byte[] bytes = opMarsh.marshal(obj);
modules/core/src/main/java/org/apache/ignite/internal/client/marshaller/optimized/GridClientOptimizedMarshaller.java,107,return opMarsh.unmarshal(bytes, null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcUtils.java,70,return MARSHALLER.marshal(args);
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcUtils.java,99,return MARSHALLER.unmarshal(bytes, null);
modules/core/src/main/java/org/apache/ignite/internal/managers/checkpoint/GridCheckpointManager.java,176,byte[] data = state == null ? null : marsh.marshal(state);
modules/core/src/main/java/org/apache/ignite/internal/managers/checkpoint/GridCheckpointManager.java,207,byte[] data = state == null ? null : marsh.marshal(state);
modules/core/src/main/java/org/apache/ignite/internal/managers/checkpoint/GridCheckpointManager.java,341,state = marsh.unmarshal(data, U.resolveClassLoader(ses.getClassLoader(), ctx.config()));
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,608,marsh.unmarshal(msg.topicBytes(), U.resolveClassLoader(ctx.config())));
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1281,ioMsg.topicBytes(marsh.marshal(topic));
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1541,serMsg = marsh.marshal(msg);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1544,serTopic = marsh.marshal(topic);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,2201,msgTopic = marsh.unmarshal(msgTopicBytes,
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,2211,msgBody = marsh.unmarshal(ioMsg.bodyBytes(),
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentCommunication.java,185,req.responseTopic(marsh.unmarshal(req.responseTopicBytes(), U.resolveClassLoader(ctx.config())));
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentCommunication.java,446,req.responseTopicBytes(marsh.marshal(req.responseTopic()));
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,894,res.events(marsh.<Collection<Event>>unmarshal(res.eventsBytes(),
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,898,res.exception(marsh.<Throwable>unmarshal(res.exceptionBytes(),
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,935,byte[] serFilter = marsh.marshal(p);
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,1026,msg.responseTopicBytes(marsh.marshal(msg.responseTopic()));
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,1092,req.responseTopic(marsh.unmarshal(req.responseTopicBytes(), U.resolveClassLoader(ctx.config())));
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,1108,filter = marsh.unmarshal(req.filter(), U.resolveClassLoader(dep.classLoader(), ctx.config()));
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,1143,res.eventsBytes(marsh.marshal(res.events()));
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,1144,res.exceptionBytes(marsh.marshal(res.exception()));
modules/core/src/main/java/org/apache/ignite/internal/managers/swapspace/GridSwapSpaceManager.java,403,return marsh.unmarshal(swapBytes, ldr != null ? ldr : U.gridClassLoader());
modules/core/src/main/java/org/apache/ignite/internal/managers/swapspace/GridSwapSpaceManager.java,413,private byte[] marshal(Object obj) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/managers/swapspace/GridSwapSpaceManager.java,414,return ctx.config().getMarshaller().marshal(obj);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityUtils.java,80,ctx.config().getMarshaller().marshal(o),
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityUtils.java,113,Object src = ctx.config().getMarshaller().unmarshal(msg.source(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheEntrySerializablePredicate.java,83,p = ctx.marshaller().unmarshal(bytes, U.resolveClassLoader(ldr, ctx.gridConfig()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheEntrySerializablePredicate.java,96,bytes = ctx.marshaller().marshal(p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheInvokeDirectResult.java,109,errBytes = ctx.marshaller().marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheInvokeDirectResult.java,124,err = ctx.marshaller().unmarshal(errBytes, U.resolveClassLoader(ldr, ctx.gridConfig()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMessage.java,460,args[i] = byteCol[i] == null ? null : marsh.unmarshal(byteCol[i], U.resolveClassLoader(ldr, ctx.gridConfig()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMessage.java,611,col.add(bytes == null ? null : marsh.<T>unmarshal(bytes, U.resolveClassLoader(ldr, ctx.gridConfig())));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,119,import org.apache.ignite.marshaller.jdk.JdkMarshaller;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,3548,marshaller.unmarshal(marshaller.marshal(val.getCacheStoreFactory()),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,3558,return marshaller.unmarshal(marshaller.marshal(val), U.resolveClassLoader(ctx.config()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,3600,return marshaller.unmarshal(marshaller.marshal(obj), U.resolveClassLoader(ctx.config()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,874,return ctx.marshaller().marshal(obj);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedLockResponse.java,191,errBytes = ctx.marshaller().marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedLockResponse.java,201,err = ctx.marshaller().unmarshal(errBytes, U.resolveClassLoader(ldr, ctx.gridConfig()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxPrepareRequest.java,334,txNodesBytes = ctx.marshaller().marshal(txNodes);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxPrepareRequest.java,374,txNodes = ctx.marshaller().unmarshal(txNodesBytes, U.resolveClassLoader(ldr, ctx.gridConfig()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxPrepareResponse.java,98,errBytes = ctx.marshaller().marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxPrepareResponse.java,106,err = ctx.marshaller().unmarshal(errBytes, U.resolveClassLoader(ldr, ctx.gridConfig()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtAffinityAssignmentResponse.java,210,affAssignmentBytes = ctx.marshaller().marshal(affAssignment);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtAffinityAssignmentResponse.java,213,affAssignmentIdsBytes = ctx.marshaller().marshal(affAssignmentIds);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtAffinityAssignmentResponse.java,216,idealAffAssignmentBytes = ctx.marshaller().marshal(idealAffAssignment);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtAffinityAssignmentResponse.java,231,affAssignmentIds = ctx.marshaller().unmarshal(affAssignmentIdsBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtAffinityAssignmentResponse.java,234,idealAffAssignment = ctx.marshaller().unmarshal(idealAffAssignmentBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtAffinityAssignmentResponse.java,250,List<List<ClusterNode>> affAssignment = ctx.marshaller().unmarshal(bytes,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishResponse.java,114,checkCommittedErrBytes = ctx.marshaller().marshal(checkCommittedErr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishResponse.java,123,checkCommittedErr = ctx.marshaller().unmarshal(checkCommittedErrBytes, U.resolveClassLoader(ldr, ctx.gridConfig()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateResponse.java,170,errBytes = ctx.marshaller().marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateResponse.java,184,err = ctx.marshaller().unmarshal(errBytes, U.resolveClassLoader(ldr, ctx.gridConfig()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateRequest.java,661,expiryPlc = ctx.marshaller().unmarshal(expiryPlcBytes, U.resolveClassLoader(ldr, ctx.gridConfig()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateResponse.java,399,errBytes = ctx.marshaller().marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateResponse.java,418,err = ctx.marshaller().unmarshal(errBytes, U.resolveClassLoader(ldr, ctx.gridConfig()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtForceKeysResponse.java,175,errBytes = ctx.marshaller().marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtForceKeysResponse.java,193,err = ctx.marshaller().unmarshal(errBytes, U.resolveClassLoader(ldr, ctx.gridConfig()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,188,topicBytes = ctx.marshaller().marshal(topic);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,196,topic = ctx.marshaller().unmarshal(topicBytes, U.resolveClassLoader(ldr, ctx.gridConfig()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsFullMessage.java,136,partsBytes = ctx.marshaller().marshal(parts);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsFullMessage.java,139,partCntrsBytes = ctx.marshaller().marshal(partCntrs);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsFullMessage.java,161,parts = ctx.marshaller().unmarshal(partsBytes, U.resolveClassLoader(ldr, ctx.gridConfig()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsFullMessage.java,167,partCntrs = ctx.marshaller().unmarshal(partCntrsBytes, U.resolveClassLoader(ldr, ctx.gridConfig()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsSingleMessage.java,140,partsBytes = ctx.marshaller().marshal(parts);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsSingleMessage.java,143,partCntrsBytes = ctx.marshaller().marshal(partCntrs);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsSingleMessage.java,151,parts = ctx.marshaller().unmarshal(partsBytes, U.resolveClassLoader(ldr, ctx.gridConfig()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsSingleMessage.java,154,partCntrs = ctx.marshaller().unmarshal(partCntrsBytes, U.resolveClassLoader(ldr, ctx.gridConfig()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetResponse.java,193,errBytes = ctx.marshaller().marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetResponse.java,208,err = ctx.marshaller().unmarshal(errBytes, U.resolveClassLoader(ldr, ctx.gridConfig()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearSingleGetResponse.java,172,errBytes = ctx.marshaller().marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearSingleGetResponse.java,191,err = ctx.marshaller().unmarshal(errBytes, U.resolveClassLoader(ldr, ctx.gridConfig()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishResponse.java,104,errBytes = ctx.marshaller().marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishResponse.java,112,err = ctx.marshaller().unmarshal(errBytes, U.resolveClassLoader(ldr, ctx.gridConfig()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheLocalQueryFuture.java,116,marsh.<IgniteReducer<Object, Object>>unmarshal(marsh.marshal(qry.reducer()),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheLocalQueryFuture.java,120,marsh.<IgniteClosure<Object, Object>>unmarshal(marsh.marshal(qry.transform()),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,322,keyValFilter = mrsh.unmarshal(keyValFilterBytes, U.resolveClassLoader(ldr, ctx.gridConfig()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,325,rdc = mrsh.unmarshal(rdcBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,328,trans = mrsh.unmarshal(transBytes, U.resolveClassLoader(ldr, ctx.gridConfig()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,331,args = mrsh.unmarshal(argsBytes, U.resolveClassLoader(ldr, ctx.gridConfig()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,346,rdc = rdc != null ? marsh.<IgniteReducer<Object, Object>>unmarshal(marsh.marshal(rdc),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,348,trans = trans != null ? marsh.<IgniteClosure<Object, Object>>unmarshal(marsh.marshal(trans),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryResponse.java,127,errBytes = ctx.marshaller().marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryResponse.java,152,err = ctx.marshaller().unmarshal(errBytes, U.resolveClassLoader(ldr, ctx.gridConfig()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheSqlQuery.java,143,paramsBytes = m.marshal(params);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,1539,bytes = ctx.config().getMarshaller().marshal(obj);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,1557,return ctx.config().getMarshaller().unmarshal(bytes, U.resolveClassLoader(dep.classLoader(), ctx.config()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/jdbc/GridCacheQueryJdbcMetadataTask.java,156,data = MARSHALLER.marshal(F.asList(schemasMap, indexesInfo));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/jdbc/GridCacheQueryJdbcMetadataTask.java,166,data = MARSHALLER.marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/jdbc/GridCacheQueryJdbcTask.java,87,Map<String, Object> args = MARSHALLER.unmarshal(arg, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/jdbc/GridCacheQueryJdbcTask.java,168,bytes = MARSHALLER.marshal(res.getData());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/jdbc/GridCacheQueryJdbcTask.java,173,bytes = MARSHALLER.marshal(new SQLException(res.getException().getMessage()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxEntry.java,880,entryProcessorsCol = ctx.marshaller().unmarshal(transformClosBytes,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxEntry.java,881,U.resolveClassLoader(clsLdr, ctx.gridConfig()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxEntry.java,899,expiryPlc = ctx.marshaller().unmarshal(expiryPlcBytes, U.resolveClassLoader(clsLdr, ctx.gridConfig()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheRawVersionedEntry.java,194,val = marsh.unmarshal(valBytes, U.resolveClassLoader(ctx.kernalContext().config()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheRawVersionedEntry.java,225,key = marsh.unmarshal(keyBytes, U.resolveClassLoader(ctx.kernalContext().config()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheRawVersionedEntry.java,242,keyBytes = marsh.marshal(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheRawVersionedEntry.java,248,valBytes = marsh.marshal(val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,106,return ctx.kernalContext().cache().context().marshaller().unmarshal(bytes, U.resolveClassLoader(clsLdr,
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,107,ctx.kernalContext().config()));
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1167,closureBytes = marsh.marshal(c.job);
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1171,c.job = marsh.unmarshal(closureBytes, U.resolveClassLoader(ctx.config()));
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1173,c.job = marsh.unmarshal(marsh.marshal(c.job), U.resolveClassLoader(ctx.config()));
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1176,job = marsh.unmarshal(marsh.marshal(job), U.resolveClassLoader(ctx.config()));
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,286,msg.data(marsh.unmarshal(msg.dataBytes(), U.resolveClassLoader(ctx.config())));
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,1219,msg.dataBytes(marsh.marshal(msg.data()));
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/StartRequestData.java,98,prjPredBytes = marsh.marshal(prjPred);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/StartRequestData.java,112,prjPred = marsh.unmarshal(prjPredBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamProcessor.java,93,marshErrBytes = marsh.marshal(new IgniteCheckedException("Failed to marshal response error, " +
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamProcessor.java,238,topic = marsh.unmarshal(req.responseTopicBytes(), U.resolveClassLoader(null, ctx.config()));
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamProcessor.java,278,updater = marsh.unmarshal(req.updaterBytes(), U.resolveClassLoader(clsLdr, ctx.config()));
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamProcessor.java,332,errBytes = err != null ? marsh.marshal(err) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1315,updaterBytes = ctx.config().getMarshaller().marshal(rcvr);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1319,topicBytes = ctx.config().getMarshaller().marshal(topic);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1450,err = ctx.config().getMarshaller().unmarshal(
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsAckMessage.java,99,errBytes = marsh.marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsAckMessage.java,107,err = marsh.unmarshal(errBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteMessage.java,98,errBytes = marsh.marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteMessage.java,106,err = marsh.unmarshal(errBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsPaths.java,78,new JdkMarshaller().marshal(payload, out);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsPaths.java,109,return new JdkMarshaller().unmarshal(in, clsLdr);
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,404,loc ? null : marsh.marshal(attrs), attrs);
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,517,loc ? null : marsh.marshal(topic)),
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,1015,siblings0 = marsh.unmarshal(req.getSiblingsBytes(), U.resolveClassLoader(ctx.config()));
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,1027,sesAttrs = marsh.unmarshal(req.getSessionAttributesBytes(),
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,1054,jobAttrs = marsh.unmarshal(req.getJobAttributesBytes(),
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,1327,loc ? null : marsh.marshal(ex),
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,1329,loc ? null : marsh.marshal(null),
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,1331,loc ? null : marsh.marshal(null),
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,1422,(Map<?, ?>)marsh.unmarshal(req.getAttributesBytes(),
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,409,job = marsh.unmarshal(jobBytes, U.resolveClassLoader(dep.classLoader(), ctx.config()));
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,747,loc ? null : marsh.marshal(ex),
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,749,loc ? null: marsh.marshal(res),
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,751,loc ? null : marsh.marshal(attrs),
modules/core/src/main/java/org/apache/ignite/internal/processors/offheap/GridOffHeapProcessor.java,111,return keyBytes != null ? keyBytes : marsh.marshal(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/offheap/GridOffHeapProcessor.java,215,return marsh.unmarshal(valBytes, U.resolveClassLoader(ldr, ctx.config()));
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/task/GridTaskCommandHandler.java,138,res.resultBytes(ctx.config().getMarshaller().marshal(desc.result()));
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/task/GridTaskCommandHandler.java,144,Object topic = ctx.config().getMarshaller().unmarshal(req.topicBytes(),
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/task/GridTaskCommandHandler.java,145,U.resolveClassLoader(ctx.config()));
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/task/GridTaskCommandHandler.java,443,res.result(ctx.config().getMarshaller().unmarshal(res.resultBytes(),
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/task/GridTaskCommandHandler.java,444,U.resolveClassLoader(ctx.config())));
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/task/GridTaskCommandHandler.java,497,byte[] topicBytes = ctx.config().getMarshaller().marshal(topic);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestParser.java,721,return jdkMarshaller.unmarshal(bytes, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestParser.java,803,jdkMarshaller.marshal(obj, out);
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,916,loc ? null : marsh.marshal(attrs),
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,1032,marsh.<Map<?, ?>>unmarshal(msg.getAttributesBytes(),
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,1308,topic = marsh.unmarshal(req.topicBytes(), U.resolveClassLoader(ctx.config()));
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,1316,loc ? null : marsh.marshal(siblings)),
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,768,Object res0 = loc ? res.getJobResult() : marsh.unmarshal(res.getJobResultBytes(),
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,772,marsh.<IgniteException>unmarshal(res.getExceptionBytes(),
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,776,marsh.<Map<Object, Object>>unmarshal(res.getJobAttributesBytes(),
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,1218,loc ? null : marsh.marshal(res.getJob()),
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,1223,loc ? null : marsh.marshal(ses.getJobSiblings()),
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,1225,loc ? null : marsh.marshal(sesAttrs),
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,1227,loc ? null : marsh.marshal(jobAttrs),
modules/core/src/main/java/org/apache/ignite/marshaller/jdk/JdkMarshaller.java,81,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/marshaller/jdk/JdkMarshaller.java,104,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/marshaller/jdk/JdkMarshaller.java,105,throw new IgniteCheckedException("Failed to deserialize object with given class loader: " + clsLdr, e);
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedMarshaller.java,196,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedMarshaller.java,220,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedMarshaller.java,221,throw new IgniteCheckedException("Failed to deserialize object with given class loader: " + clsLdr, e);
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedMarshaller.java,249,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedMarshaller.java,250,throw new IgniteCheckedException("Failed to deserialize object with given class loader: " + clsLdr, e);
modules/core/src/main/java/org/apache/ignite/spi/checkpoint/sharedfs/SharedFsUtils.java,64,return (SharedFsCheckpointData)m.unmarshal(in, U.gridClassLoader());
modules/core/src/main/java/org/apache/ignite/spi/checkpoint/sharedfs/SharedFsUtils.java,94,m.marshal(data, out);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,696,byte[] addrsData = marsh.marshal(addrs);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,715,addrs = marsh.unmarshal(Arrays.copyOfRange(data, U.IGNITE_HEADER.length, data.length), null);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/messages/TcpDiscoveryCustomEventMessage.java,80,msg = marsh.unmarshal(msgBytes, ldr);
modules/core/src/main/java/org/apache/ignite/spi/swapspace/file/FileSwapSpaceSpi.java,599,keyBytes = ignite.configuration().getMarshaller().marshal(key.key());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/communication/HadoopMarshallerFilter.java,32,private Marshaller marshaller;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/communication/HadoopMarshallerFilter.java,37,public HadoopMarshallerFilter(Marshaller marshaller) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/communication/HadoopMarshallerFilter.java,40,this.marshaller = marshaller;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/communication/HadoopMarshallerFilter.java,62,return proceedSessionWrite(ses, marshaller.marshal(msg));
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/communication/HadoopMarshallerFilter.java,69,proceedMessageReceived(ses, marshaller.unmarshal((byte[])msg, null));
modules/hibernate/src/main/java/org/apache/ignite/cache/store/hibernate/CacheHibernateBlobStore.java,509,return marsh.marshal(obj);
modules/hibernate/src/main/java/org/apache/ignite/cache/store/hibernate/CacheHibernateBlobStore.java,524,return marsh.unmarshal(bytes, getClass().getClassLoader());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1556,return marshaller.marshal(obj);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1562,return marshaller.unmarshal(bytes, clsLdr);
modules/kafka/src/main/java/org/apache/ignite/stream/kafka/connect/serialization/CacheEventDeserializer.java,43,return marsh.unmarshal(bytes, getClass().getClassLoader());
modules/kafka/src/main/java/org/apache/ignite/stream/kafka/connect/serialization/CacheEventSerializer.java,43,return marsh.marshal(event);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionV2.java,85,private final Marshaller marshaller;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionV2.java,98,assert marshaller != null;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionV2.java,102,this.marshaller = marshaller;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionV2.java,334,if (marshaller != null) {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionV2.java,336,return marshaller.unmarshal(bytes, getClass().getClassLoader());
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionV2.java,354,if (marshaller != null) {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionV2.java,356,return marshaller.marshal(obj);
modules/core/src/main/java/org/apache/ignite/configuration/CacheConfiguration.java,2634,name = member instanceof Method && member.getName().startsWith("get") && member.getName().length() > 3 ?
modules/core/src/main/java/org/apache/ignite/configuration/CacheConfiguration.java,2635,member.getName().substring(3) : member.getName();
modules/core/src/main/java/org/apache/ignite/configuration/CacheConfiguration.java,2637,((AccessibleObject) member).setAccessible(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,69,import javax.cache.Cache;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,70,import javax.cache.CacheException;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,71,import java.lang.reflect.AccessibleObject;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,72,import java.lang.reflect.Field;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,73,import java.lang.reflect.Member;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,74,import java.lang.reflect.Method;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,75,import java.math.BigDecimal;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,76,import java.sql.Time;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,77,import java.sql.Timestamp;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,78,import java.util.ArrayList;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,79,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,80,import java.util.Collections;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,81,import java.util.Comparator;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,82,import java.util.HashMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,83,import java.util.HashSet;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,84,import java.util.Iterator;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,85,import java.util.LinkedHashMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,86,import java.util.List;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,87,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,88,import java.util.Set;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,89,import java.util.TreeSet;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,90,import java.util.UUID;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,91,import java.util.concurrent.ConcurrentMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,92,import java.util.concurrent.ExecutorService;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1684,if (tmp == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1686,tmp = new ClassProperty(cls.getDeclaredField(prop), key, alias, coCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1688,catch (NoSuchFieldException ignored) {
modules/flink/src/main/java/org/apache/ignite/sink/flink/IgniteSink.java,37,private final IgniteLogger log;
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,88,log(log, e, msg, null, LogLevel.WARN, false);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,102,log(log, e, msg, null, LogLevel.WARN, quite);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,116,log(log, e, longMsg, shortMsg, LogLevel.WARN, false);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,129,log(log, null, msg, null, LogLevel.INFO, quite);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,160,LogLevel level, boolean quiet) {
modules/core/src/main/java/org/apache/ignite/internal/GridKernalContextImpl.java,406,marshCtx = new MarshallerContextImpl(plugins);
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1817,U.setWorkDirectory(cfg.getWorkDirectory(), ggHome);
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1828,IgniteLogger cfgLog = initLogger(cfg.getGridLogger(), nodeId);
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,2073,private IgniteLogger initLogger(@Nullable IgniteLogger cfgLog, UUID nodeId) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/MarshallerContextImpl.java,71,public MarshallerContextImpl(List<PluginProvider> plugins) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/MarshallerContextImpl.java,74,workDir = U.resolveWorkDirectory("marshaller", false);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsServer.java,167,IpcSharedMemoryServerEndpoint endpoint = new IpcSharedMemoryServerEndpoint();
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cpp/PlatformCppConfigurationClosure.java,20,import org.apache.ignite.IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cpp/PlatformCppConfigurationClosure.java,134,ggHome = U.getIgniteHome();
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cpp/PlatformCppConfigurationClosure.java,135,else
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cpp/PlatformCppConfigurationClosure.java,139,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cpp/PlatformCppConfigurationClosure.java,140,U.setWorkDirectory(igniteCfg.getWorkDirectory(), ggHome);
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cpp/PlatformCppConfigurationClosure.java,142,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cpp/PlatformCppConfigurationClosure.java,143,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/dotnet/PlatformDotNetConfigurationClosure.java,20,import org.apache.ignite.IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/dotnet/PlatformDotNetConfigurationClosure.java,148,ggHome = U.getIgniteHome();
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/dotnet/PlatformDotNetConfigurationClosure.java,149,else
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/dotnet/PlatformDotNetConfigurationClosure.java,153,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/dotnet/PlatformDotNetConfigurationClosure.java,154,U.setWorkDirectory(igniteCfg.getWorkDirectory(), ggHome);
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/dotnet/PlatformDotNetConfigurationClosure.java,156,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/dotnet/PlatformDotNetConfigurationClosure.java,157,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformUtils.java,790,new BinaryContext(BinaryNoopMetadataHandler.instance(), new IgniteConfiguration(), new NullLogger());
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformUtils.java,794,marsh.setContext(new MarshallerContextImpl(null));
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,304,private static volatile String igniteWork;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8713,String igniteWork0 = igniteWork;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8715,if (igniteWork0 == null) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8716,synchronized (IgniteUtils.class) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8718,igniteWork0 = igniteWork;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8721,return;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8723,File workDir;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8726,workDir = new File(userWorkDir);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8728,workDir = new File(IGNITE_WORK_DIR);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8730,workDir = new File(userIgniteHome, "work");
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8731,else {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8732,String tmpDirPath = System.getProperty("java.io.tmpdir");
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8735,throw new IgniteCheckedException("Failed to create work directory in OS temp " +
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8738,workDir = new File(tmpDirPath, "ignite" + File.separator + "work");
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8742,throw new IgniteCheckedException("Work directory path must be absolute: " + workDir);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8745,throw new IgniteCheckedException("Work directory does not exist and cannot be created: " + workDir);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8748,throw new IgniteCheckedException("Cannot read from work directory: " + workDir);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8751,throw new IgniteCheckedException("Cannot write to work directory: " + workDir);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8753,igniteWork = workDir.getAbsolutePath();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8768,public static void nullifyWorkDirectory() {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8769,igniteWork = null;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8780,public static File resolveWorkDirectory(String path, boolean delIfExist) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8784,String ggWork0 = igniteWork;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8789,dir = new File(ggWork0, dir.getPath());
modules/core/src/main/java/org/apache/ignite/internal/util/ipc/shmem/IpcSharedMemoryServerEndpoint.java,143,public IpcSharedMemoryServerEndpoint() {
modules/core/src/main/java/org/apache/ignite/internal/util/ipc/shmem/IpcSharedMemoryServerEndpoint.java,154,public IpcSharedMemoryServerEndpoint(IgniteLogger log, UUID locNodeId, String gridName) {
modules/core/src/main/java/org/apache/ignite/internal/util/ipc/shmem/IpcSharedMemoryServerEndpoint.java,184,tokDir = U.resolveWorkDirectory(tokDirPath, false);
modules/core/src/main/java/org/apache/ignite/logger/java/JavaLogger.java,364,fileHnd.nodeId(nodeId);
modules/core/src/main/java/org/apache/ignite/logger/java/JavaLoggerFileHandler.java,83,public void nodeId(UUID nodeId) throws IgniteCheckedException, IOException {
modules/core/src/main/java/org/apache/ignite/logger/java/JavaLoggerFileHandler.java,94,ptrn = new File(logDirectory(), ptrn.replace("%{id8}", U.id8(nodeId))).getAbsolutePath();
modules/core/src/main/java/org/apache/ignite/logger/java/JavaLoggerFileHandler.java,138,private static File logDirectory() throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/logger/java/JavaLoggerFileHandler.java,139,return !F.isEmpty(U.IGNITE_LOG_DIR) ? new File(U.IGNITE_LOG_DIR) : U.resolveWorkDirectory("log", false);
modules/core/src/main/java/org/apache/ignite/spi/checkpoint/sharedfs/SharedFsCheckpointSpi.java,38,import org.apache.ignite.marshaller.jdk.JdkMarshaller;
modules/core/src/main/java/org/apache/ignite/spi/checkpoint/sharedfs/SharedFsCheckpointSpi.java,291,folder = U.resolveWorkDirectory(curDirPath, false);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1765,new IpcSharedMemoryServerEndpoint(log, ignite.configuration().getNodeId(), gridName);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,151,tmp = U.resolveWorkDirectory(path, false);
modules/core/src/main/java/org/apache/ignite/spi/swapspace/file/FileSwapSpaceSpi.java,302,dir = U.resolveWorkDirectory(path, true);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/HadoopExternalTaskExecutor.java,109,outputBase = U.resolveWorkDirectory("hadoop", false);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/HadoopExternalTaskExecutor.java,121,ctx.kernalContext().gridName());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/HadoopExternalTaskExecutor.java,383,Process proc = startJavaProcess(childProcId, startMeta, job);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/HadoopExternalTaskExecutor.java,523,HadoopJob job) throws Exception {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/HadoopExternalTaskExecutor.java,531,File workDir = U.resolveWorkDirectory("", false);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/child/HadoopExternalProcessStarter.java,84,U.setWorkDirectory(args.workDir, U.getIgniteHome());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/communication/HadoopExternalCommunication.java,264,String gridName
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/communication/HadoopExternalCommunication.java,688,locProcDesc.processId(), gridName);
modules/urideploy/src/main/java/org/apache/ignite/spi/deployment/uri/UriDeploymentSpi.java,1032,uri = U.resolveWorkDirectory(DFLT_DEPLOY_DIR, false).toURI();
modules/core/src/main/java/org/apache/ignite/cache/query/SpiQuery.java,62,return (SqlQuery<K, V>)super.setPageSize(pageSize);
modules/core/src/main/java/org/apache/ignite/cache/query/SpiQuery.java,67,return (SqlQuery<K, V>)super.setLocal(loc);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,514,final CacheQueryFuture<Map.Entry<K, V>> fut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,538,new IgniteOutClosureX<CacheQueryFuture<Map.Entry<K, V>>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,554,private Map.Entry<K, V> cur;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,560,Map.Entry<K, V> e = cur;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,564,return new CacheEntryImpl<>(e.getKey(), e.getValue());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,568,return cur != null || (cur = fut.next()) != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,696,if (qry.clause() == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,37,private final GridAtomicLong minTime = new GridAtomicLong();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,61,return minTime.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,74,long val = completed.sum();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,76,return val > 0 ? sumTime.sum() / val : 0;
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryObjectBuilderImpl.java,27,import org.apache.ignite.internal.binary.BinaryWriterExImpl;
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryObjectBuilderImpl.java,28,import org.apache.ignite.internal.binary.GridBinaryMarshaller;
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryObjectBuilderImpl.java,29,import org.apache.ignite.internal.binary.BinaryContext;
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryObjectBuilderImpl.java,32,import org.apache.ignite.internal.binary.BinaryObjectOffheapImpl;
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryObjectBuilderImpl.java,39,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryObjectBuilderImpl.java,40,import java.util.Collections;
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryObjectBuilderImpl.java,41,import java.util.HashMap;
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryObjectBuilderImpl.java,42,import java.util.LinkedHashMap;
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryObjectBuilderImpl.java,43,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryObjectBuilderImpl.java,44,import java.util.Set;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,829,writer.postWrite(userType, registered, obj instanceof CacheObjectImpl ? 0 : obj.hashCode());
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryUtils.java,295,private static boolean isFlagSet(short flags, short flag) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,245,public void postWrite(boolean userType, boolean registered, int hashCode) {
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryObjectBuilderImpl.java,332,writer.postWrite(true, registeredType, hashCode);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8407,try {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8408,Class<?> cls = obj.getClass();
modules/core/src/main/java/org/apache/ignite/internal/managers/loadbalancer/GridLoadBalancerManager.java,75,return getSpi(ses.getLoadBalancingSpi()).getBalancedNode(ses, top, job);
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,459,internal = dep.internalTask(task, taskCls);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,322,catch (IgniteTxOptimisticCheckedException ignore) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,334,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,335,U.error(log, "Failed to invalidate transaction: " + tx, e);
modules/spring/src/main/java/org/apache/ignite/IgniteSpringBean.java,435,return g.reentrantLock(name, failoverSafe, create, fair);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,727,entryMappings.put(keyTypeId, new EntryMapping(cacheName, dialect, type, keyKind, valKind));
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,736,entryMappings.put(keyTypeId, new EntryMapping(cacheName, dialect, type, TypeKind.BINARY, valKind));
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1728,TypeKind keyKind, TypeKind valKind) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1755,fullTblName = F.isEmpty(schema) ? tblName : schema + "." + tblName;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1757,Collection<String> uniqValCols = databaseColumns(uniqValFlds);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1759,cols = F.concat(false, keyCols, uniqValCols);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1768,loadCacheQry = dialect.loadCacheQuery(fullTblName, cols);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1770,loadCacheSelRangeQry = dialect.loadCacheSelectRangeQuery(fullTblName, keyCols);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1772,loadQrySingle = dialect.loadQuery(fullTblName, keyCols, cols, 1);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1774,maxKeysPerStmt = dialect.getMaxParameterCount() / keyCols.size();
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1776,loadQry = dialect.loadQuery(fullTblName, keyCols, cols, maxKeysPerStmt);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1778,insQry = dialect.insertQuery(fullTblName, keyCols, uniqValCols);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1780,updQry = dialect.updateQuery(fullTblName, keyCols, uniqValCols);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1782,mergeQry = dialect.mergeQuery(fullTblName, keyCols, uniqValCols);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1784,remQry = dialect.removeQuery(fullTblName, keyCols);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1845,return dialect.loadQuery(fullTblName, keyCols, cols, keyCnt);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1856,return dialect.loadCacheRangeQuery(fullTblName, keyCols, cols, appendLowerBound, appendUpperBound);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStoreFactory.java,114,private int batchSizw = DFLT_BATCH_SIZE;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStoreFactory.java,126,private int maxWriteAttempts = DFLT_WRITE_ATTEMPTS;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStoreFactory.java,151,store.setBatchSize(batchSizw);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStoreFactory.java,154,store.setMaximumWriteAttempts(maxWriteAttempts);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStoreFactory.java,204,return batchSizw;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStoreFactory.java,214,this.batchSizw = batchSize;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStoreFactory.java,288,return maxWriteAttempts;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStoreFactory.java,298,this.maxWriteAttempts = maxWrtAttempts;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/BasicJdbcDialect.java,249,Collection<String> uniqCols) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/DB2Dialect.java,38,Collection<String> uniqCols) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/H2Dialect.java,37,Collection<String> uniqCols) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/JdbcDialect.java,46,public String loadCacheRangeQuery(String fullTblName,
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/JdbcDialect.java,47,Collection<String> keyCols, Iterable<String> uniqCols, boolean appendLowerBound, boolean appendUpperBound);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/MySQLDialect.java,38,Collection<String> uniqCols) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/OracleDialect.java,38,Collection<String> uniqCols) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/SQLServerDialect.java,38,Collection<String> uniqCols) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/SQLServerDialect.java,68,match, setCols, colsLst, valuesCols);
modules/schema-import-db/src/main/java/org/apache/ignite/schema/parser/DbColumn.java,42,public DbColumn(String name, int type, boolean key, boolean nullable) {
modules/schema-import-db/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,33,import org.apache.ignite.cache.QueryIndexType;
modules/schema-import-db/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,119,Collection<DbTable> tbls = new ArrayList<>();
modules/schema-import-db/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,139,Set<String> pkCols = new HashSet<>();
modules/schema-import-db/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,146,List<DbColumn> cols = new ArrayList<>();
modules/schema-import-db/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,153,colName,
modules/schema-import-db/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,154,colsRs.getInt(COL_DATA_TYPE_IDX),
modules/schema-import-db/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,155,pkCols.contains(colName),
modules/schema-import-db/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,156,colsRs.getInt(COL_NULLABLE_IDX) == DatabaseMetaData.columnNullable));
modules/schema-import-db/src/main/java/org/apache/ignite/schema/parser/dialect/MySQLMetadataDialect.java,25,import java.util.List;
modules/schema-import-db/src/main/java/org/apache/ignite/schema/parser/dialect/MySQLMetadataDialect.java,34,List<String> schemas = new ArrayList<>();
modules/schema-import-db/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,262,throws SQLException {
modules/schema-import-db/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,353,!"N".equals(colsRs.getString(NULLABLE_IDX))));
modules/schema-import/src/main/java/org/apache/ignite/schema/model/PojoDescriptor.java,126,toJavaFieldName(colName), toJavaType(col.type(), col.nullable()).getName(),
modules/schema-import/src/main/java/org/apache/ignite/schema/model/PojoDescriptor.java,434,private static Class<?> toJavaType(int type, boolean nullable) {
modules/schema-import/src/main/java/org/apache/ignite/schema/model/PojoDescriptor.java,435,switch (type) {
modules/schema-import/src/main/java/org/apache/ignite/schema/model/PojoDescriptor.java,441,return nullable ? Byte.class : byte.class;
modules/schema-import/src/main/java/org/apache/ignite/schema/model/PojoDescriptor.java,444,return nullable ? Short.class : short.class;
modules/schema-import/src/main/java/org/apache/ignite/schema/model/PojoDescriptor.java,447,return nullable ? Integer.class : int.class;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,821,doWriteString(val.getClass().getName());
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,802,String selQry = args[i + 1].toString();
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,806,futs.add(pool.submit(new LoadCacheCustomQueryWorker<>(em, selQry, clo)));
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,810,Collection<EntryMapping> entryMappings = mappings.values();
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,812,for (EntryMapping em : entryMappings) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1917,log.debug("Load cache using custom query [cache= " + U.maskName(em.cacheName) +
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStore.java,105,throw new CacheException("Failed to read object of class: " + typeName, e);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStore.java,263,throw new CacheException("Failed to read binary object", e);
modules/core/src/main/java/org/apache/ignite/spi/swapspace/file/FileSwapSpaceSpi.java,642,Space old = spaces.putIfAbsent(masked, space = new Space(masked));
modules/core/src/main/java/org/apache/ignite/spi/swapspace/file/FileSwapSpaceSpi.java,840,private SwapValuesQueue(int minTakeSize, int maxSize) {
modules/core/src/main/java/org/apache/ignite/spi/swapspace/file/FileSwapSpaceSpi.java,856,mayAdd.await();
modules/core/src/main/java/org/apache/ignite/spi/swapspace/file/FileSwapSpaceSpi.java,1422,private final SwapValuesQueue que = new SwapValuesQueue(writeBufSize, maxWriteQueSize);
modules/core/src/main/java/org/apache/ignite/spi/swapspace/file/FileSwapSpaceSpi.java,1446,private Space(String name) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1158,old = (retval || intercept || lsnrCol != null) ?
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1356,old = (retval || intercept || lsnrCol != null) ?
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,349,if (hasFilters || retVal || txEntry.op() == DELETE || txEntry.op() == TRANSFORM) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,365,CacheObject val = cached.innerGet(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxEntry.java,1184,return 13;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,28,import org.apache.ignite.binary.BinaryObjectException;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,29,import org.apache.ignite.binary.BinaryType;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,30,import org.apache.ignite.binary.BinaryObject;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,201,buf.a(Arrays.toString((byte[]) val));
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,203,buf.a(Arrays.toString((short[])val));
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,205,buf.a(Arrays.toString((int[])val));
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,207,buf.a(Arrays.toString((long[])val));
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,209,buf.a(Arrays.toString((float[])val));
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,211,buf.a(Arrays.toString((double[])val));
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,213,buf.a(Arrays.toString((char[])val));
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,215,buf.a(Arrays.toString((boolean[]) val));
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,217,buf.a(Arrays.toString((BigDecimal[])val));
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,218,else {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,219,if (val instanceof BinaryObjectExImpl) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,220,BinaryObjectExImpl po = (BinaryObjectExImpl)val;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,222,Integer idHash0 = handles.get(val);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,224,if (idHash0 != null) {  // Circular reference.
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,227,assert meta0 != null;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,229,buf.a(meta0.typeName()).a(" [hash=").a(idHash0).a(", ...]");
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,231,else
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,232,buf.a(po.toString(ctx, handles));
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,234,else
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,235,buf.a(val);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,247,try {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,248,BinaryReaderHandles ctx = new BinaryReaderHandles();
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,250,ctx.put(start(), this);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,252,return toString(ctx, new IdentityHashMap<BinaryObject, Integer>());
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,254,catch (BinaryObjectException e) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java,255,throw new IgniteException("Failed to create string representation of binary object.", e);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousHandler.java,65,public void onListenerRegistered(UUID routineId, GridKernalContext ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,440,!locInfos.containsKey(item.routineId)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,441,if (registerHandler(data.nodeId, item.routineId, item.hnd, item.bufSize, item.interval,
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,443,item.hnd.onListenerRegistered(item.routineId, ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,517,hnd.onListenerRegistered(routineId, this.ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,568,hnd.onListenerRegistered(routineId, ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,641,if (locIncluded
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,643,hnd.onListenerRegistered(routineId, ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,914,boolean registered = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,924,!locInfos.containsKey(routineId)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,925,registered = registerHandler(node.id(), routineId, hnd0, data.bufferSize(), data.interval(),
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,957,hnd0.onListenerRegistered(routineId, ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformAbstractTarget.java,72,return processInStreamOutLong(type, reader);
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,293,switch (type) {
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,294,case OP_PUT:
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,295,cache.put(reader.readObjectDetached(), reader.readObjectDetached());
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,297,return TRUE;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,299,case OP_REMOVE_BOOL:
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,300,return cache.remove(reader.readObjectDetached(), reader.readObjectDetached()) ? TRUE : FALSE;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,302,case OP_REMOVE_ALL:
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,303,cache.removeAll(PlatformUtils.readSet(reader));
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,305,return TRUE;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,307,case OP_PUT_ALL:
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,308,cache.putAll(PlatformUtils.readMap(reader));
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,310,return TRUE;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,312,case OP_LOC_EVICT:
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,313,cache.localEvict(PlatformUtils.readCollection(reader));
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,315,return TRUE;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,317,case OP_CONTAINS_KEY:
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,318,return cache.containsKey(reader.readObjectDetached()) ? TRUE : FALSE;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,320,case OP_CONTAINS_KEYS:
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,321,return cache.containsKeys(PlatformUtils.readSet(reader)) ? TRUE : FALSE;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,323,case OP_LOC_PROMOTE: {
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,324,cache.localPromote(PlatformUtils.readSet(reader));
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,326,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,329,case OP_REPLACE_3:
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,330,return cache.replace(reader.readObjectDetached(), reader.readObjectDetached(),
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,331,reader.readObjectDetached()) ? TRUE : FALSE;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,333,case OP_LOC_LOAD_CACHE:
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,334,loadCache0(reader, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,336,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,338,case OP_LOAD_CACHE:
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,339,loadCache0(reader, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,341,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,343,case OP_CLEAR:
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,344,cache.clear(reader.readObjectDetached());
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,346,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,348,case OP_CLEAR_ALL:
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,349,cache.clearAll(PlatformUtils.readSet(reader));
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,351,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,353,case OP_LOCAL_CLEAR:
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,354,cache.localClear(reader.readObjectDetached());
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,356,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,358,case OP_LOCAL_CLEAR_ALL:
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,359,cache.localClearAll(PlatformUtils.readSet(reader));
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,361,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,363,case OP_PUT_IF_ABSENT: {
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,364,return cache.putIfAbsent(reader.readObjectDetached(), reader.readObjectDetached()) ? TRUE : FALSE;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,367,case OP_REPLACE_2: {
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,368,return cache.replace(reader.readObjectDetached(), reader.readObjectDetached()) ? TRUE : FALSE;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,371,case OP_REMOVE_OBJ: {
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,372,return cache.remove(reader.readObjectDetached()) ? TRUE : FALSE;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,375,case OP_IS_LOCAL_LOCKED:
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,376,return cache.isLocalLocked(reader.readObjectDetached(), reader.readBoolean()) ? TRUE : FALSE;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,378,case OP_LOAD_ALL: {
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,379,long futId = reader.readLong();
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,380,boolean replaceExisting = reader.readBoolean();
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,382,CompletionListenable fut = new CompletionListenable();
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,384,PlatformFutureUtils.listen(platformCtx, fut, futId, PlatformFutureUtils.TYP_OBJ, null, this);
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,386,cache.loadAll(PlatformUtils.readSet(reader), replaceExisting, fut);
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,388,return TRUE;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,391,default:
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,392,return super.processInStreamOutLong(type, reader);
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,559,throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,560,switch (type) {
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,561,case OP_GET: {
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,562,writer.writeObjectDetached(cache.get(reader.readObjectDetached()));
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,564,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,567,case OP_GET_AND_PUT: {
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,568,writer.writeObjectDetached(cache.getAndPut(reader.readObjectDetached(), reader.readObjectDetached()));
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,570,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,573,case OP_GET_AND_REPLACE: {
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,574,writer.writeObjectDetached(cache.getAndReplace(reader.readObjectDetached(),
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,575,reader.readObjectDetached()));
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,577,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,580,case OP_GET_AND_REMOVE: {
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,581,writer.writeObjectDetached(cache.getAndRemove(reader.readObjectDetached()));
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,583,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,586,case OP_GET_AND_PUT_IF_ABSENT: {
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,587,writer.writeObjectDetached(cache.getAndPutIfAbsent(reader.readObjectDetached(), reader.readObjectDetached()));
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,589,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,592,case OP_PEEK: {
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,593,Object key = reader.readObjectDetached();
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,595,CachePeekMode[] modes = PlatformUtils.decodeCachePeekModes(reader.readInt());
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,597,writer.writeObjectDetached(cache.localPeek(key, modes));
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,599,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,602,case OP_GET_ALL: {
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,603,Set keys = PlatformUtils.readSet(reader);
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,605,Map entries = cache.getAll(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,607,PlatformUtils.writeNullableMap(writer, entries);
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,609,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,612,case OP_INVOKE: {
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,613,Object key = reader.readObjectDetached();
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,615,CacheEntryProcessor proc = platformCtx.createCacheEntryProcessor(reader.readObjectDetached(), 0);
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,617,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,618,writer.writeObjectDetached(cache.invoke(key, proc));
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,623,writer.writeObjectDetached(((PlatformNativeException)ex.getCause()).cause());
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,624,else
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,625,throw ex;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,628,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,631,case OP_INVOKE_ALL: {
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,632,Set<Object> keys = PlatformUtils.readSet(reader);
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,634,CacheEntryProcessor proc = platformCtx.createCacheEntryProcessor(reader.readObjectDetached(), 0);
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,636,writeInvokeAllResult(writer, cache.invokeAll(keys, proc));
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,638,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,641,case OP_LOCK:
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,642,writer.writeLong(registerLock(cache.lock(reader.readObjectDetached())));
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,644,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,646,case OP_LOCK_ALL:
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,647,writer.writeLong(registerLock(cache.lockAll(PlatformUtils.readCollection(reader))));
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,649,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,651,default:
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,652,super.processInStreamOutStream(type, reader, writer);
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,701,writeError(writer, ex);
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCache.java,1028,writeError(writer, (Exception) err);
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/dotnet/PlatformDotNetCacheStore.java,392,return platformCtx.gateway().cacheStoreInvoke(ptr, mem.pointer(), cb);
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformFutureUtils.java,295,outWriter.writeString(err.getClass().getName());
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformFutureUtils.java,296,outWriter.writeString(err.getMessage());
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/BasicHadoopFileSystemFactory.java,86,ClassLoader ctxClsLdr = Thread.currentThread().getContextClassLoader();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/BasicHadoopFileSystemFactory.java,87,ClassLoader clsLdr = getClass().getClassLoader();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/BasicHadoopFileSystemFactory.java,91,else {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/BasicHadoopFileSystemFactory.java,92,Thread.currentThread().setContextClassLoader(clsLdr);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/BasicHadoopFileSystemFactory.java,94,try {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/BasicHadoopFileSystemFactory.java,95,return create(usrName);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/BasicHadoopFileSystemFactory.java,97,finally {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/BasicHadoopFileSystemFactory.java,98,Thread.currentThread().setContextClassLoader(ctxClsLdr);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopUtils.java,325,final ClassLoader cl0 = Thread.currentThread().getContextClassLoader();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopUtils.java,327,Thread.currentThread().setContextClassLoader(Configuration.class.getClassLoader());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopUtils.java,333,Thread.currentThread().setContextClassLoader(cl0);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopUtils.java,342,public static JobConf safeCreateJobConf() {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopUtils.java,343,final ClassLoader cl0 = Thread.currentThread().getContextClassLoader();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopUtils.java,345,Thread.currentThread().setContextClassLoader(JobConf.class.getClassLoader());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopUtils.java,347,try {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopUtils.java,348,return new JobConf();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopUtils.java,350,finally {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopUtils.java,351,Thread.currentThread().setContextClassLoader(cl0);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,133,hadoopJobID = new JobID(jobId.globalId().toString(), jobId.localId());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,135,jobConf = HadoopUtils.safeCreateJobConf();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,137,HadoopFileSystemsUtils.setupFileSystems(jobConf);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,139,Thread.currentThread().setContextClassLoader(null);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,142,jobConf.set(e.getKey(), e.getValue());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,144,jobCtx = new JobContextImpl(jobConf, hadoopJobID);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,146,rsrcMgr = new HadoopV2JobResourceManager(jobId, jobCtx, log, this);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,161,Thread.currentThread().setContextClassLoader(jobConf.getClassLoader());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,218,Thread.currentThread().setContextClassLoader(null);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,292,.equals(HadoopClassLoader.nameForJob(this.locNodeId));
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,294,Thread.currentThread().setContextClassLoader(jobConf.getClassLoader());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,300,Thread.currentThread().setContextClassLoader(null);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2JobResourceManager.java,97,Thread.currentThread().setContextClassLoader(cfg.getClassLoader());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2JobResourceManager.java,106,Thread.currentThread().setContextClassLoader(null);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2TaskContext.java,161,Thread.currentThread().setContextClassLoader(getClass().getClassLoader());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2TaskContext.java,183,Thread.currentThread().setContextClassLoader(null);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2TaskContext.java,232,try {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2TaskContext.java,233,Thread.currentThread().setContextClassLoader(jobConf().getClassLoader());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2TaskContext.java,261,Thread.currentThread().setContextClassLoader(null);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2TaskContext.java,292,Thread.currentThread().setContextClassLoader(jobConf().getClassLoader());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2TaskContext.java,308,Thread.currentThread().setContextClassLoader(null);
modules/core/src/main/java/org/apache/ignite/internal/GridLoggerProxy.java,205,String gridNameR = t.get1();
modules/core/src/main/java/org/apache/ignite/internal/GridLoggerProxy.java,208,IgniteLogger log = IgnitionEx.gridx(gridNameR).log();
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1291,throw new IllegalArgumentException("This method should be accessed under " + IgniteThread.class.getName());
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1300,public static IgniteKernal gridx(@Nullable String name) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryMarshaller.java,27,import org.apache.ignite.marshaller.AbstractMarshaller;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryMarshaller.java,36,public class BinaryMarshaller extends AbstractMarshaller {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryMarshaller.java,74,public MarshallerContext getContext() {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryMarshaller.java,75,return ctx;
modules/core/src/main/java/org/apache/ignite/internal/client/GridClientConfiguration.java,160,marshaller = cfg.getMarshaller();
modules/core/src/main/java/org/apache/ignite/internal/cluster/ClusterGroupAdapter.java,724,IgniteKernal g = IgnitionEx.gridx(gridName);
modules/core/src/main/java/org/apache/ignite/internal/cluster/ClusterNodeLocalMapImpl.java,92,return IgnitionEx.gridx(stash.get()).cluster().nodeLocalMap();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4502,return IgnitionEx.gridx(t.get1()).cachex(t.get2());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,2041,IgniteKernal grid = IgnitionEx.gridx(t.get1());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,188,private Marshaller marshaller = new JdkMarshaller();
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,20,import org.apache.ignite.IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,24,import org.apache.ignite.internal.util.typedef.internal.U;
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,25,import org.jetbrains.annotations.Nullable;
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,52,this.ctx = ctx;
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,57,GridByteArrayOutputStream out = null;
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,59,try {
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,60,out = new GridByteArrayOutputStream(DFLT_BUFFER_SIZE);
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,62,marshal(obj, out);
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,64,return out.toByteArray();
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,66,finally {
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,67,U.close(out, null);
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,73,GridByteArrayInputStream in = null;
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,75,try {
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,76,in = new GridByteArrayInputStream(arr, 0, arr.length);
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,78,return unmarshal(in, clsLdr);
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,80,finally {
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,81,U.close(in, null);
modules/core/src/main/java/org/apache/ignite/marshaller/jdk/JdkMarshaller.java,28,import org.apache.ignite.marshaller.AbstractMarshaller;
modules/core/src/main/java/org/apache/ignite/marshaller/jdk/JdkMarshaller.java,66,public class JdkMarshaller extends AbstractMarshaller {
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedMarshaller.java,30,import org.apache.ignite.marshaller.AbstractMarshaller;
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedMarshaller.java,85,public class OptimizedMarshaller extends AbstractMarshaller {
modules/core/src/main/java/org/apache/ignite/spi/checkpoint/sharedfs/SharedFsCheckpointSpi.java,217,marsh = ignite.configuration().getMarshaller() instanceof BinaryMarshaller ? new JdkMarshaller() :
modules/core/src/main/java/org/apache/ignite/spi/checkpoint/sharedfs/SharedFsCheckpointSpi.java,218,ignite.configuration().getMarshaller();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,433,spi.marsh.marshal(evt)));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,687,spi.marsh.marshal(attrs.get(IgniteNodeAttributes.ATTR_SECURITY_CREDENTIALS)));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,888,msg = spi.marsh.unmarshal(in, U.resolveClassLoader(spi.ignite().configuration()));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1213,TcpDiscoveryAbstractMessage msg = spi.marsh.unmarshal(in,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1974,DiscoverySpiCustomMessage msgObj = msg.message(spi.marsh,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,740,msgWorker.addMessage(new TcpDiscoveryCustomEventMessage(getLocalNodeId(), evt, spi.marsh.marshal(evt)));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,823,attrs.put(IgniteNodeAttributes.ATTR_SECURITY_SUBJECT, spi.marsh.marshal(subj));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1235,spi.marsh.marshal(attrs.get(IgniteNodeAttributes.ATTR_SECURITY_CREDENTIALS)));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1258,return spi.marsh.unmarshal(credBytes, null);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2368,msgBytes = spi.marsh.marshal(msg);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2387,msg0 = spi.marsh.unmarshal(msgBytes,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3140,attrs.put(IgniteNodeAttributes.ATTR_SECURITY_SUBJECT, spi.marsh.marshal(subj));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3719,SecurityContext coordSubj = spi.marsh.unmarshal(
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4768,msgObj = msg.message(spi.marsh, U.resolveClassLoader(spi.ignite().configuration()));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4780,getLocalNodeId(), nextMsg, spi.marsh.marshal(nextMsg));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4894,DiscoverySpiCustomMessage msgObj = msg.message(spi.marsh,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4905,msg.message(msgObj, spi.marsh.marshal(msgObj));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,5341,TcpDiscoveryAbstractMessage msg = spi.marsh.unmarshal(in,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,5832,msgBytes = spi.marsh.marshal(msg);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,344,protected final Marshaller marsh = new JdkMarshaller();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1381,marsh.marshal(msg, out);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1465,T res = marsh.unmarshal(in == null ? sock.getInputStream() : in,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1683,byte[] bytes = marsh.marshal(entry.getValue());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1714,Serializable compData = marsh.unmarshal(entry.getValue(), clsLdr);
modules/core/src/main/java/org/apache/ignite/stream/socket/SocketStreamer.java,38,import org.apache.ignite.marshaller.jdk.JdkMarshaller;
modules/core/src/main/java/org/apache/ignite/stream/socket/SocketStreamer.java,176,converter = new DefaultConverter<>();
modules/core/src/main/java/org/apache/ignite/stream/socket/SocketStreamer.java,219,private static final JdkMarshaller MARSH = new JdkMarshaller();
modules/core/src/main/java/org/apache/ignite/stream/socket/SocketStreamer.java,224,return MARSH.unmarshal(msg, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,1368,if (ctx.event().isRecordable(evtType)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java,302,return dataCachePrj.igfsDataSpaceMax();
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeLru.java,32,class GridUnsafeLru {
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeLru.java,159,return lrus[addIdx.getAndIncrement() % cnt].offer(part, addr, hash);
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeLru.java,168,int idx = rmvIdx.getAndIncrement();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,218,private final GridCacheMapEntry entry;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,228,this.entry = entry;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,236,res = compareKeys(entry.context(), entry.key(), o.entry.context(), o.entry.key());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,251,return expireTime == that.expireTime &&
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,252,compareKeys(entry.context(), entry.key(), that.entry.context(), that.entry.key()) == 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,259,res = 31 * res + entry.key().hashCode();
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryObjectBuilderImpl.java,202,if (reader != null) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryReaderHandles.java,60,return (T)data;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheSqlQuery.java,156,params = m.unmarshal(paramsBytes, U.resolveClassLoader(ctx.config()));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2ValueCacheObject.java,24,import org.apache.ignite.binary.BinaryObject;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2ValueCacheObject.java,25,import org.apache.ignite.internal.binary.BinaryEnumObjectImpl;
modules/core/src/main/java/org/apache/ignite/internal/MarshallerContextImpl.java,202,private static class ContinuousQueryListener implements CacheEntryUpdatedListener<Integer, String> {
modules/core/src/main/java/org/apache/ignite/internal/MarshallerContextImpl.java,213,private ContinuousQueryListener(IgniteLogger log, File workDir) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,363,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,364,assert prevBatch.finishing() :
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformConfigurationUtils.java,560,writer.writeInt(ccfg.getAtomicityMode() == null ?
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformConfigurationUtils.java,561,CacheConfiguration.DFLT_CACHE_ATOMICITY_MODE.ordinal() : ccfg.getAtomicityMode().ordinal());
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformConfigurationUtils.java,562,writer.writeInt(ccfg.getAtomicWriteOrderMode() == null ? 0 : ccfg.getAtomicWriteOrderMode().ordinal());
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformConfigurationUtils.java,564,writer.writeInt(ccfg.getCacheMode() == null ?
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformConfigurationUtils.java,565,CacheConfiguration.DFLT_CACHE_MODE.ordinal() : ccfg.getCacheMode().ordinal());
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformConfigurationUtils.java,580,writer.writeInt(ccfg.getMemoryMode() == null ?
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformConfigurationUtils.java,581,CacheConfiguration.DFLT_MEMORY_MODE.ordinal() : ccfg.getMemoryMode().ordinal());
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformConfigurationUtils.java,587,writer.writeInt(ccfg.getRebalanceMode() == null ?
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformConfigurationUtils.java,588,CacheConfiguration.DFLT_REBALANCE_MODE.ordinal() : ccfg.getRebalanceMode().ordinal());
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformConfigurationUtils.java,599,writer.writeInt(ccfg.getWriteSynchronizationMode() == null ? 0 : ccfg.getWriteSynchronizationMode().ordinal());
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformConfigurationUtils.java,695,writer.writeByte((byte)index.getIndexType().ordinal());
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformConfigurationUtils.java,801,w.writeInt(atomic.getCacheMode().ordinal());
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformConfigurationUtils.java,812,w.writeInt(tx.getDefaultTxConcurrency().ordinal());
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformConfigurationUtils.java,813,w.writeInt(tx.getDefaultTxIsolation().ordinal());
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,558,return loadCacheRange(m, clo, null, null);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,815,log.debug("Multithread loading entries from db [cache=" +  U.maskName(cacheName) +
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,837,futs.add(pool.submit(loadCacheRange(em, clo, null, upperBound)));
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,847,futs.add(pool.submit(loadCacheRange(em, clo, lowerBound, upperBound)));
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,850,futs.add(pool.submit(loadCacheRange(em, clo, upperBound, null)));
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,852,else
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,853,futs.add(pool.submit(loadCacheFull(em, clo)));
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,855,catch (SQLException ignored) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,856,futs.add(pool.submit(loadCacheFull(em, clo)));
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,862,else {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,864,log.debug("Single thread loading entries from db [cache=" +  U.maskName(cacheName) +
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,867,futs.add(pool.submit(loadCacheFull(em, clo)));
modules/schema-import-db/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,174,idx = new QueryIndex();
modules/schema-import-db/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,175,idx.setName(idxName);
modules/schema-import-db/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,176,idx.setIndexType(QueryIndexType.SORTED);
modules/schema-import-db/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,177,idx.setFields(new LinkedHashMap<String, Boolean>());
modules/schema-import-db/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,275,idx = new QueryIndex();
modules/schema-import-db/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,276,idx.setName(idxName);
modules/schema-import-db/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,277,idx.setIndexType(QueryIndexType.SORTED);
modules/schema-import-db/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,278,idx.setFields(new LinkedHashMap<String, Boolean>());
modules/schema-import/src/main/java/org/apache/ignite/schema/generator/CodeGenerator.java,784,add2(src, "// Configure JDBC types. ");
modules/schema-import/src/main/java/org/apache/ignite/schema/generator/CodeGenerator.java,797,add2(src, "// Configure query entities. ");
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/DatabaseMetadataParser.java,102,res.add(parent);
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/DatabaseMetadataParser.java,103,res.addAll(children);
examples/src/main/java-lgpl/org/apache/ignite/examples/datagrid/hibernate/HibernateL2CacheExample.java,254,System.out.println("\t\tL2 cache entries: " + stats.getEntries());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,343,void finish() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,358,if ((tx.onePhaseCommit() && needFinishOnePhase()) || (!tx.onePhaseCommit() && mappings != null)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,363,finish(mapping);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,366,finish(mappings.mappings());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,486,private boolean needFinishOnePhase() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,490,boolean finish = tx.txState().hasNearCache(cctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,547,private void finish(Iterable<GridDistributedTxMapping> mappings) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,550,finish(m);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,556,private void finish(GridDistributedTxMapping m) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,860,fut0.finish();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,865,fut0.onDone(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,872,fut0.onDone(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,920,fut.finish();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,936,fut0.finish();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,398,void await(IgfsPath... paths) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsUtils.java,25,import org.apache.ignite.cache.CacheMode;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsUtils.java,368,if (igfsCfg.isColocateMetadata() && ccfg.getCacheMode() == CacheMode.REPLICATED &&
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,93,private final Method writeReplaceMtd;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,301,if (metaDataEnabled) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,302,assert stableFieldsMeta != null;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,325,writeReplaceMtd = U.findNonPublicMethod(cls, "writeReplace");
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,329,writeReplaceMtd = null;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryClassDescriptor.java,475,return writeReplaceMtd;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryUtils.java,594,cls == TreeMap.class ||
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryUtils.java,651,cls == TreeSet.class ||
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,23,import java.lang.reflect.InvocationTargetException;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,32,import org.apache.ignite.IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,33,import org.apache.ignite.binary.BinaryObjectException;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,34,import org.apache.ignite.binary.BinaryRawWriter;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,35,import org.apache.ignite.binary.BinaryWriter;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,36,import org.apache.ignite.internal.binary.streams.BinaryHeapOutputStream;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,37,import org.apache.ignite.internal.binary.streams.BinaryOutputStream;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,38,import org.apache.ignite.internal.util.typedef.internal.A;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,39,import org.jetbrains.annotations.Nullable;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,173,if (enableReplace && desc.getWriteReplaceMethod() != null) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,174,Object replacedObj;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,176,try {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,177,replacedObj = desc.getWriteReplaceMethod().invoke(obj);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,179,catch (IllegalAccessException e) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,180,throw new RuntimeException(e);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,182,catch (InvocationTargetException e) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,184,throw (BinaryObjectException)e.getTargetException();
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryWriterExImpl.java,186,throw new BinaryObjectException("Failed to execute writeReplace() method on " + obj, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,67,import org.apache.ignite.internal.processors.continuous.GridContinuousBatchAdapter;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,135,private transient Collection<CacheContinuousQueryEntry> backupQueue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,433,Iterator<CacheContinuousQueryEntry> it = backupQueue.iterator();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,435,while (it.hasNext()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,436,CacheContinuousQueryEntry backupEntry = it.next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,438,Long updateCntr = updateCntrs.get(backupEntry.partition());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,441,it.remove();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,450,GridCacheContext<K, V> cctx = cacheContext(ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,452,for (CacheContinuousQueryEntry e : backupQueue) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,454,prepareEntry(cctx, nodeId, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,457,ctx.continuous().addBackupNotification(nodeId, routineId, backupQueue, topic);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,459,backupQueue.clear();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,482,for (Iterator<CacheContinuousQueryEntry> it = backupQueue.iterator(); it.hasNext();) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,484,it.remove();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,768,if (!evts.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,772,sendBackupAcknowledge(ackBuf.onAcknowledged(entry), routineId, ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,934,public PartitionRecovery(IgniteLogger log, AffinityTopologyVersion topVer, @Nullable Long initCntr) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,1199,return new GridContinuousBatchAdapter();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,1348,size += batch.size();
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,172,unregisterRemote(routineId);
modules/spring/src/main/java/org/apache/ignite/cache/spring/SpringCache.java,54,return val != null ? new SimpleValueWrapper(val) : null;
modules/spring/src/main/java/org/apache/ignite/cache/spring/SpringCache.java,71,cache.put(key, val);
modules/spring/src/main/java/org/apache/ignite/cache/spring/SpringCache.java,76,Object old = cache.putIfAbsent(key, val);
modules/spring/src/main/java/org/apache/ignite/cache/spring/SpringCache.java,78,return old != null ? new SimpleValueWrapper(old) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,83,pendingEntries.add(new EntryWrapper(entry));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,143,protected CleanupWorker() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,152,EntryWrapper first = pendingEntries.firstx();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,154,if (first != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,155,long waitTime = first.expireTime - U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,158,U.sleep(waitTime);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,160,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,161,U.sleep(500);
modules/cassandra/src/main/java/org/apache/ignite/cache/store/cassandra/bean/CassandraLifeCycleBean.java,18,package org.apache.ignite.cache.store.cassandra.bean;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,616,assert discoEvt.type() == EVT_NODE_JOINED : discoEvt;
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,209,return primaryAndBackups(affInfo, key);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,231,key = ((CacheObject)key).value(affInfo.cacheObjCtx, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,233,return affInfo.mapper.affinityKey(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,488,key = ((CacheObject)key).value(aff.cacheObjCtx, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,490,int part = aff.affFunc.partition(aff.mapper.affinityKey(key));
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,505,private <K> List<ClusterNode> primaryAndBackups(AffinityInfo aff, K key) {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,507,key = ((CacheObject)key).value(aff.cacheObjCtx, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,509,int part = aff.affFunc.partition(aff.mapper.affinityKey(key));
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,511,return aff.assignment.get(part);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,570,private AffinityKeyMapper keyMapper() {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,571,return mapper;
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,661,return cache().affinityFunction().partition(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,773,key = ((CacheObject)key).value(cache().cacheObjCtx, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,775,return cache().keyMapper().affinityKey(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,831,return cache().assignment().get(partition(key));
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,865,map.put(p, mapPartitionToNode(p));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,197,public int partition(Object key) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,201,return ((KeyCacheObject)key).partition();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,206,int p = affFunction.partition(affinityKey(key));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,209,((KeyCacheObject)key).partition(p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,211,return p;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1790,return toCacheKeyObject(obj, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1797,public KeyCacheObject toCacheKeyObject(Object obj, boolean includePartition) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1801,return cacheObjects().toCacheKeyObject(cacheObjCtx, obj, true, affinity().partition(obj));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1802,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1803,return cacheObjects().toCacheKeyObject(cacheObjCtx, obj, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1824,return cacheObjects().toCacheKeyObject(cacheObjCtx, obj, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1972,return cacheKeysView(keys, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1980,public Collection<KeyCacheObject> cacheKeysView(Collection<?> keys, final boolean includePartition) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1986,return toCacheKeyObject(key, includePartition);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEntryInfo.java,410,key = ctx.cacheObjects().toCacheKeyObject(cacheObjCtx, key0, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryContext.java,44,super(kernalCtx, binaryEnabled ? new CacheDefaultBinaryAffinityKeyMapper() :
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryContext.java,45,new GridCacheDefaultAffinityKeyMapper(), cpyOnGet, storeVal, depEnabled);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,772,return toCacheKeyObject(ctx, obj, userObj, -1);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,779,boolean userObj,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,780,int partition
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,783,return super.toCacheKeyObject(ctx, obj, userObj, partition);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,786,((KeyCacheObject)obj).partition(partition);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,788,return (KeyCacheObject)obj;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,791,if (((CacheObjectBinaryContext)ctx).binaryEnabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,792,obj = toBinary(obj);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,794,if (obj instanceof KeyCacheObject) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,795,((KeyCacheObject)obj).partition(partition);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,797,return (KeyCacheObject)obj;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,801,return toCacheKeyObject0(obj, userObj, partition);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,339,return getAsync0(ctx.toCacheKeyObject(key, true),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,385,return getAsync0(ctx.toCacheKeyObject(key, true),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,431,return getAllAsync0(ctx.cacheKeysView(keys, true),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,859,KeyCacheObject cacheKey = cctx.toCacheKeyObject(key, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,976,KeyCacheObject cacheKey = cctx.toCacheKeyObject(key, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessor.java,135,public KeyCacheObject toCacheKeyObject(CacheObjectContext ctx, Object obj, boolean userObj);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessor.java,145,public KeyCacheObject toCacheKeyObject(CacheObjectContext ctx, Object obj, boolean userObj, int partition);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,112,return toCacheKeyObject(ctx, obj, userObj, -1);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,118,((KeyCacheObject)obj).partition(partition);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,122,return toCacheKeyObject0(obj, userObj, partition);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,132,protected KeyCacheObject toCacheKeyObject0(Object obj, boolean userObj, int partititon) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,134,return new KeyCacheObjectImpl(obj, null, partititon);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,136,return new UserKeyCacheObjectImpl(obj, partititon);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,302,UserKeyCacheObjectImpl(Object key, int partition) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,303,super(key, null, partition);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,504,keys.add(cacheObjProc.toCacheKeyObject(cacheObjCtx, entry.getKey(), true));
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,509,KeyCacheObject key = cacheObjProc.toCacheKeyObject(cacheObjCtx, e.getKey(), true);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,601,KeyCacheObject key0 = cacheObjProc.toCacheKeyObject(cacheObjCtx, key, true);
modules/spring/src/main/java/org/apache/ignite/cache/spring/SpringCacheManager.java,136,public class SpringCacheManager implements CacheManager, InitializingBean {
modules/spring/src/main/java/org/apache/ignite/cache/spring/SpringCacheManager.java,260,ignite = Ignition.start(cfgPath);
modules/spring/src/main/java/org/apache/ignite/cache/spring/SpringCacheManager.java,262,ignite = Ignition.start(cfg);
modules/spring/src/main/java/org/apache/ignite/transactions/spring/SpringTransactionManager.java,197,implements ResourceTransactionManager, PlatformTransactionManager, InitializingBean {
modules/spring/src/main/java/org/apache/ignite/transactions/spring/SpringTransactionManager.java,322,ignite = Ignition.start(cfgPath);
modules/spring/src/main/java/org/apache/ignite/transactions/spring/SpringTransactionManager.java,324,ignite = Ignition.start(cfg);
modules/spring/src/main/java/org/apache/ignite/transactions/spring/SpringTransactionManager.java,338,IgniteTransactionObject txObject = new IgniteTransactionObject();
modules/spring/src/main/java/org/apache/ignite/transactions/spring/SpringTransactionManager.java,340,txObject.setTransactionHolder(
modules/spring/src/main/java/org/apache/ignite/transactions/spring/SpringTransactionManager.java,343,return txObject;
modules/spring/src/main/java/org/apache/ignite/transactions/spring/SpringTransactionManager.java,353,IgniteTransactionObject txObject = (IgniteTransactionObject)transaction;
modules/spring/src/main/java/org/apache/ignite/transactions/spring/SpringTransactionManager.java,357,if (txObject.getTransactionHolder() == null || txObject.getTransactionHolder().isSynchronizedWithTransaction()) {
modules/spring/src/main/java/org/apache/ignite/transactions/spring/SpringTransactionManager.java,369,txObject.setTransactionHolder(new IgniteTransactionHolder(newTx), true);
modules/spring/src/main/java/org/apache/ignite/transactions/spring/SpringTransactionManager.java,372,txObject.getTransactionHolder().setSynchronizedWithTransaction(true);
modules/spring/src/main/java/org/apache/ignite/transactions/spring/SpringTransactionManager.java,373,txObject.getTransactionHolder().setTransactionActive(true);
modules/spring/src/main/java/org/apache/ignite/transactions/spring/SpringTransactionManager.java,375,tx = txObject.getTransactionHolder().getTransaction();
modules/spring/src/main/java/org/apache/ignite/transactions/spring/SpringTransactionManager.java,379,TransactionSynchronizationManager.bindResource(this.ignite, txObject.getTransactionHolder());
modules/spring/src/main/java/org/apache/ignite/transactions/spring/SpringTransactionManager.java,393,IgniteTransactionObject txObject = (IgniteTransactionObject)status.getTransaction();
modules/spring/src/main/java/org/apache/ignite/transactions/spring/SpringTransactionManager.java,394,Transaction tx = txObject.getTransactionHolder().getTransaction();
modules/spring/src/main/java/org/apache/ignite/transactions/spring/SpringTransactionManager.java,411,IgniteTransactionObject txObject = (IgniteTransactionObject)status.getTransaction();
modules/spring/src/main/java/org/apache/ignite/transactions/spring/SpringTransactionManager.java,412,Transaction tx = txObject.getTransactionHolder().getTransaction();
modules/spring/src/main/java/org/apache/ignite/transactions/spring/SpringTransactionManager.java,429,IgniteTransactionObject txObject = (IgniteTransactionObject)transaction;
modules/spring/src/main/java/org/apache/ignite/transactions/spring/SpringTransactionManager.java,432,if (txObject.isNewTransactionHolder()) {
modules/spring/src/main/java/org/apache/ignite/transactions/spring/SpringTransactionManager.java,433,Transaction tx = txObject.getTransactionHolder().getTransaction();
modules/spring/src/main/java/org/apache/ignite/transactions/spring/SpringTransactionManager.java,440,txObject.getTransactionHolder().clear();
modules/spring/src/main/java/org/apache/ignite/transactions/spring/SpringTransactionManager.java,447,IgniteTransactionObject txObject = (IgniteTransactionObject)transaction;
modules/spring/src/main/java/org/apache/ignite/transactions/spring/SpringTransactionManager.java,449,return (txObject.getTransactionHolder() != null && txObject.getTransactionHolder().isTransactionActive());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,204,throw new IgniteException(FAILED_TO_FIND_CACHE_ERR_MSG + cctx.name());
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSemaphoreImpl.java,161,public int getPermitsForNode(UUID nodeID){
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSemaphoreImpl.java,214,for (;;) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSemaphoreImpl.java,241,for (;;) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSemaphoreImpl.java,264,for (;;) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSemaphoreImpl.java,307,Map<UUID,Integer> map = val.getWaiters();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSemaphoreImpl.java,373,Map<UUID,Integer> map = val.getWaiters();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSemaphoreImpl.java,375,if(!map.containsKey(nodeId)){
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSemaphoreImpl.java,792,boolean result =  sync.tryAcquireSharedNanos(permits, unit.toNanos(timeout));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,90,import java.util.Set;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,221,if (cfg.isInitializeDefaultPathModes()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,233,if (igfsCtx.configuration().getPathModes() != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,234,for (Map.Entry<String, IgfsMode> e : igfsCtx.configuration().getPathModes().entrySet()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,260,modeRslvr = new IgfsModeResolver(dfltMode, modes);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,619,assert mode == DUAL_SYNC || mode == DUAL_ASYNC;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,664,Set<IgfsMode> childrenModes = modeRslvr.resolveChildrenModes(src);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,682,if (!childrenModes.equals(Collections.singleton(PRIMARY))) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,683,assert mode == DUAL_SYNC || mode == DUAL_ASYNC;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,713,Set<IgfsMode> childrenModes = modeRslvr.resolveChildrenModes(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,768,assert mode == DUAL_SYNC || mode == DUAL_ASYNC;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,792,Set<IgfsMode> childrenModes = modeRslvr.resolveChildrenModes(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,796,if (childrenModes.contains(DUAL_SYNC) || childrenModes.contains(DUAL_ASYNC)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,809,else if (mode == PRIMARY) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,810,checkConflictWithPrimary(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,835,Set<IgfsMode> childrenModes = modeRslvr.resolveChildrenModes(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,839,if (childrenModes.contains(DUAL_SYNC) || childrenModes.contains(DUAL_ASYNC)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,875,checkConflictWithPrimary(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,917,assert mode == DUAL_SYNC || mode == DUAL_ASYNC;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,931,if (info == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,932,checkConflictWithPrimary(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1069,assert mode == DUAL_SYNC || mode == DUAL_ASYNC;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1085,if (!create) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1086,checkConflictWithPrimary(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1134,if (desc == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1135,checkConflictWithPrimary(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1157,private void checkConflictWithPrimary(IgfsPath path) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1158,if (secondaryFs != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1159,if (secondaryFs.info(path) != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1160,throw new IgfsInvalidPathException("Path mapped to a PRIMARY mode found in secondary file " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1190,assert mode == DUAL_SYNC || mode == DUAL_ASYNC;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,20,import java.util.ArrayList;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,22,import java.util.Comparator;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,23,import java.util.HashSet;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,26,import java.util.Set;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,44,private ArrayList<T2<IgfsPath, IgfsMode>> modes;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,50,private Map<IgfsPath, Set<IgfsMode>> childrenModesCache;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,61,if (modes != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,62,ArrayList<T2<IgfsPath, IgfsMode>> modes0 = new ArrayList<>(modes);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,65,Collections.sort(modes0, new Comparator<Map.Entry<IgfsPath, IgfsMode>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,67,Map.Entry<IgfsPath, IgfsMode> o2) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,68,return o2.getKey().components().size() - o1.getKey().components().size();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,72,this.modes = modes0;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,75,childrenModesCache = new GridBoundedConcurrentLinkedHashMap<>(MAX_PATH_CACHE);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,95,if (startsWith(path, entry.getKey())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,117,public Set<IgfsMode> resolveChildrenModes(IgfsPath path) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,118,assert path != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,121,return Collections.singleton(dfltMode);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,122,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,123,Set<IgfsMode> children = childrenModesCache.get(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,125,if (children == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,126,children = new HashSet<>(IgfsMode.values().length, 1.0f);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,128,IgfsMode pathDefault = dfltMode;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,130,for (T2<IgfsPath, IgfsMode> child : modes) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,131,if (startsWith(path, child.getKey())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,132,pathDefault = child.getValue();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,134,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,137,children.add(child.getValue());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,140,children.add(pathDefault);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,142,childrenModesCache.put(path, children);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,145,return children;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,164,private static boolean startsWith(IgfsPath path, IgfsPath prefix) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,165,List<String> p1Comps = path.components();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,166,List<String> p2Comps = prefix.components();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,169,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,171,for (int i = 0; i < p1Comps.size(); i++) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,174,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,177,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,181,return true;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/IgniteHadoopFileSystem.java,83,import java.util.Set;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/IgniteHadoopFileSystem.java,656,Set<IgfsMode> childrenModes = modeRslvr.resolveChildrenModes(srcPath);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/IgniteHadoopFileSystem.java,658,if (childrenModes.contains(PROXY)) {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/IgniteHadoopFileSystem.java,660,clientLog.logRename(srcPath, PROXY, dstPath);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/IgniteHadoopFileSystem.java,662,secondaryFileSystem().rename(toSecondary(src), toSecondary(dst));
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/IgniteHadoopFileSystem.java,664,else {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/IgniteHadoopFileSystem.java,666,clientLog.logRename(srcPath, modeRslvr.resolveMode(srcPath), dstPath);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/IgniteHadoopFileSystem.java,686,Set<IgfsMode> childrenModes = modeRslvr.resolveChildrenModes(path);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/IgniteHadoopFileSystem.java,688,if (childrenModes.contains(PROXY)) {
modules/schedule/src/main/java/org/apache/ignite/internal/processors/schedule/ScheduleFutureImpl.java,453,return nextExecutionTimes(1, U.currentTimeMillis())[0];
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,103,import static org.apache.ignite.transactions.TransactionConcurrency.PESSIMISTIC;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,104,import static org.apache.ignite.transactions.TransactionIsolation.REPEATABLE_READ;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,198,final Object key, GridRestCacheRequest req, final boolean prepend) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,210,try (IgniteInternalTx tx = cache.txStartEx(PESSIMISTIC, REPEATABLE_READ)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,211,Object curVal = cache.get(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,214,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,217,Object newVal = appendOrPrepend(curVal, val, !prepend);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,220,cache.put(key, newVal);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,222,tx.commit();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,225,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,239,private static Object appendOrPrepend(Object origVal, Object appendVal, boolean appendPlc) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,316,private static IgniteInternalCache<Object, Object> cache(Ignite ignite, String cacheName) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,658,IgniteInternalCache<?,?> prj = localCache(cacheName).forSubjectId(clientId).setSkipStore(skipStore);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,722,GridCacheAdapter<Object,Object> cache = ctx.cache().internalCache(cacheName);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,1509,return c.sizeAsync(new CachePeekMode[]{CachePeekMode.PRIMARY});
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,20,import java.nio.ByteBuffer;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,422,protected Object getColumnValue(ResultSet rs, int colIdx, Class<?> type) throws SQLException {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,423,Object val = rs.getObject(colIdx);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,426,return null;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,429,return rs.getInt(colIdx);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,432,return rs.getLong(colIdx);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,435,return rs.getDouble(colIdx);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,438,return rs.getBoolean(colIdx);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,441,return rs.getByte(colIdx);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,444,return rs.getShort(colIdx);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,447,return rs.getFloat(colIdx);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,449,if (type == Integer.class || type == Long.class || type == Double.class ||
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,450,type == Byte.class || type == Short.class ||  type == Float.class) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,451,Number num = (Number)val;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,454,return num.intValue();
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,456,return num.longValue();
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,458,return num.doubleValue();
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,460,return num.byteValue();
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,462,return num.shortValue();
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,464,return num.floatValue();
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,467,if (type == UUID.class) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,469,return val;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,471,if (val instanceof byte[]) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,472,ByteBuffer bb = ByteBuffer.wrap((byte[])val);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,474,long most = bb.getLong();
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,475,long least = bb.getLong();
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,477,return new UUID(most, least);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,481,return UUID.fromString((String)val);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,486,return new java.sql.Date(((java.util.Date)val).getTime());
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,488,return val;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStore.java,154,return getColumnValue(rs, loadColIdxs.get(field.getDatabaseFieldName()), field.getJavaFieldType());
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStore.java,203,Object colVal = getColumnValue(rs, colIdx, fld.getJavaFieldType());
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStore.java,249,Object colVal = getColumnValue(rs, colIdx, field.getJavaFieldType());
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryContext.java,1066,false
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,1630,return serviceTopology(ignite.context().cache().utilityCache(), svcName);
modules/core/src/main/java/org/apache/ignite/IgniteDataStreamer.java,293,IllegalStateException;
modules/core/src/main/java/org/apache/ignite/IgniteDataStreamer.java,316,IllegalStateException;
modules/core/src/main/java/org/apache/ignite/IgniteDataStreamer.java,336,public IgniteFuture<?> addData(Collection<? extends Map.Entry<K, V>> entries) throws IllegalStateException;
modules/core/src/main/java/org/apache/ignite/IgniteDataStreamer.java,356,public IgniteFuture<?> addData(Map<K, V> entries) throws IllegalStateException;
modules/core/src/main/java/org/apache/ignite/IgniteDataStreamer.java,373,public void flush() throws CacheException, IgniteInterruptedException, IllegalStateException;
modules/core/src/main/java/org/apache/ignite/IgniteDataStreamer.java,394,public void close(boolean cancel) throws CacheException, IgniteInterruptedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,859,fut.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,979,IgniteCheckedException e = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,996,catch (IgniteCheckedException e0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,997,e = e0;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1000,fut.onDone(null, e != null ? e : err);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1003,throw e;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1245,U.acquire(sem);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1271,incrementActiveTasks();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1468,.append(", bytesSent=").append(ses.bytesSent());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1806,try {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1807,filterChain.onSessionClosed(ses);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1809,catch (IgniteCheckedException e1) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1810,filterChain.onExceptionCaught(ses, e1);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,356,GridCommunicationClient rmv = clients.get(id);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,358,if (rmv instanceof GridTcpNioCommunicationClient &&
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,359,((GridTcpNioCommunicationClient)rmv).session() == ses &&
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,360,clients.remove(id, rmv)) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,361,rmv.forceClose();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,363,if (!stopping) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,364,GridNioRecoveryDescriptor recoveryData = ses.recoveryDescriptor();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,366,if (recoveryData != null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,367,if (recoveryData.nodeAlive(getSpiContext().node(id))) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,368,if (!recoveryData.messagesFutures().isEmpty()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,370,log.debug("Session was closed but there are unacknowledged messages, " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,373,commWorker.addReconnectRequest(recoveryData);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,376,else
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,377,recoveryData.onNodeLeft();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3061,private final BlockingQueue<GridNioRecoveryDescriptor> q = new LinkedBlockingQueue<>();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3076,GridNioRecoveryDescriptor recoveryDesc = q.poll(idleConnTimeout, TimeUnit.MILLISECONDS);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3079,processRecovery(recoveryDesc);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3186,private void processRecovery(GridNioRecoveryDescriptor recoveryDesc) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3187,ClusterNode node = recoveryDesc.node();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3189,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3190,if (clients.containsKey(node.id()) ||
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3191,!recoveryDesc.nodeAlive(getSpiContext().node(node.id())) ||
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3193,return;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3195,catch (IgniteClientDisconnectedException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3197,log.debug("Failed to ping node, client disconnected.");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3199,return;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3202,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3204,log.debug("Recovery reconnect [rmtNode=" + recoveryDesc.node().id() + ']');
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3206,GridCommunicationClient client = reserveClient(node);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3208,client.release();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3210,catch (IgniteCheckedException | IgniteException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3211,if (recoveryDesc.nodeAlive(getSpiContext().node(node.id()))) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3213,log.debug("Recovery reconnect failed, will retry " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3216,addReconnectRequest(recoveryDesc);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3218,else {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3220,log.debug("Recovery reconnect failed, " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3223,onException("Recovery reconnect failed, node left [rmtNode=" + recoveryDesc.node().id() + "]",
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3224,e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3232,void addReconnectRequest(GridNioRecoveryDescriptor recoverySnd) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3233,boolean add = q.add(recoverySnd);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,20,import java.io.File;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,21,import java.io.FilenameFilter;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,24,import java.net.MalformedURLException;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,426,private static String getEnv(String name, String dflt) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,427,String res = System.getProperty(name);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,430,res = System.getenv(name);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,432,return F.isEmpty(res) ? dflt : res;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,441,private static void addUrls(Collection<URL> res, File dir, final String startsWith) throws Exception {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,442,File[] files = dir.listFiles(new FilenameFilter() {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,444,return startsWith == null || name.startsWith(startsWith);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,449,throw new IOException("Path is not a directory: " + dir);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,452,res.add(file.toURI().toURL());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,484,return getEnv("HADOOP_PREFIX", getEnv("HADOOP_HOME", null));
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,503,hadoopUrls = new ArrayList<>();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,505,String hadoopPrefix = hadoopHome();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,508,throw new IgniteCheckedException("Failed resolve Hadoop installation location. Either HADOOP_PREFIX or " +
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,511,String commonHome = getEnv("HADOOP_COMMON_HOME", hadoopPrefix + "/share/hadoop/common");
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,512,String hdfsHome = getEnv("HADOOP_HDFS_HOME", hadoopPrefix + "/share/hadoop/hdfs");
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,513,String mapredHome = getEnv("HADOOP_MAPRED_HOME", hadoopPrefix + "/share/hadoop/mapreduce");
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,516,addUrls(hadoopUrls, new File(commonHome + "/lib"), null);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,517,addUrls(hadoopUrls, new File(hdfsHome + "/lib"), null);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,518,addUrls(hadoopUrls, new File(mapredHome + "/lib"), null);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,520,addUrls(hadoopUrls, new File(hdfsHome), "hadoop-hdfs-");
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,522,addUrls(hadoopUrls, new File(commonHome), "hadoop-common-");
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,523,addUrls(hadoopUrls, new File(commonHome), "hadoop-auth-");
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,524,addUrls(hadoopUrls, new File(commonHome + "/lib"), "hadoop-auth-");
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,526,addUrls(hadoopUrls, new File(mapredHome), "hadoop-mapreduce-client-common");
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,527,addUrls(hadoopUrls, new File(mapredHome), "hadoop-mapreduce-client-core");
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,529,catch (Exception e) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,530,throw new IgniteCheckedException(e);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,36,import static org.apache.ignite.internal.processors.hadoop.HadoopClassLoader.hadoopHome;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,37,import static org.apache.ignite.internal.processors.hadoop.HadoopClassLoader.hadoopUrls;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,78,U.quietAndInfo(log, "HADOOP_HOME is set to " + hadoopHome());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,80,boolean ok = false;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,82,try { // Check for Hadoop installation.
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,83,hadoopUrls();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,85,ok = true;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,87,catch (IgniteCheckedException e) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,88,U.quietAndWarn(log, e.getMessage());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,91,if (ok) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,92,hctx = new HadoopContext(
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,93,ctx,
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,94,cfg,
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,95,new HadoopJobTracker(),
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,96,new HadoopEmbeddedTaskExecutor(),
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,99,new HadoopShuffle());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,103,c.start(hctx);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,105,hadoop = new HadoopImpl(this);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,386,fut = ctx.task().execute(MetadataTask.class, cacheName);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,907,private static class MetadataTask extends ComputeTaskAdapter<String, GridRestResponse> {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,916,private String cacheName;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,921,this.cacheName = cacheName;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,966,GridCacheSqlMetadata cacheMeta = map.remove(cacheName);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,969,metas.add(cacheMeta);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,882,if (e.getValue() < maxPerNodeCnt) {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,699,log.debug("Session created: " + sesId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,65,import static org.apache.ignite.transactions.TransactionIsolation.READ_COMMITTED;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,643,catch (GridDhtInvalidPartitionException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1402,if (cacheCtx.isNear() && entry != null && readCommitted()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1403,if (cacheCtx.affinity().belongs(cacheCtx.localNode(), entry.partition(), topVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1405,cacheCtx.cache().removeEntry(entry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,1239,public void fastFinishTx(IgniteInternalTx tx, boolean commit) {
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformProcessorImpl.java,79,private final Collection<PlatformCacheStore> stores =
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformProcessorImpl.java,80,Collections.newSetFromMap(new ConcurrentHashMap<PlatformCacheStore, Boolean>());
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformProcessorImpl.java,98,private boolean stopped;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformProcessorImpl.java,169,storeLock.writeLock().lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformProcessorImpl.java,171,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformProcessorImpl.java,172,for (PlatformCacheStore store : stores) {
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformProcessorImpl.java,173,if (store != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformProcessorImpl.java,174,if (store instanceof PlatformDotNetCacheStore) {
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformProcessorImpl.java,175,PlatformDotNetCacheStore store0 = (PlatformDotNetCacheStore)store;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformProcessorImpl.java,177,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformProcessorImpl.java,178,store0.destroy(platformCtx.kernalContext());
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformProcessorImpl.java,180,catch (Exception e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformProcessorImpl.java,181,U.error(log, "Failed to destroy .Net cache store [store=" + store0 +
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformProcessorImpl.java,185,else
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformProcessorImpl.java,186,assert false : "Invalid interop cache store type: " + store;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformProcessorImpl.java,190,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformProcessorImpl.java,191,stopped = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformProcessorImpl.java,193,storeLock.writeLock().unlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/callback/PlatformCallbackGateway.java,91,enter();
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/dotnet/PlatformDotNetCacheStore.java,60,public class PlatformDotNetCacheStore<K, V> implements CacheStore<K, V>, PlatformCacheStore {
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/dotnet/PlatformDotNetCacheStore.java,401,public void destroy(GridKernalContext ctx) {
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/dotnet/PlatformDotNetCacheStore.java,402,assert ctx != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/dotnet/PlatformDotNetCacheStore.java,404,platformCtx.gateway().cacheStoreDestroy(ptr);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,41,import org.apache.ignite.internal.util.typedef.internal.U;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,60,import static org.apache.ignite.cache.CacheMemoryMode.OFFHEAP_VALUES;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,332,long maxSpaceSize = cfg.getMaxSpaceSize();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,334,if (maxSpaceSize > 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,336,long maxHeapSize = Runtime.getRuntime().maxMemory();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,337,long offHeapSize = dataCacheCfg.getOffHeapMaxMemory();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,341,throw new IgniteCheckedException("Maximum IGFS space size cannot be greater that size of available heap " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,345,throw new IgniteCheckedException("Maximum IGFS space size cannot be greater than size of available heap " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,351,U.warn(log, "IGFS max space size is not specified but data cache values are stored off-heap (max " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,343,if (igfsDataSpaceMax == 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,344,long maxMem = Runtime.getRuntime().maxMemory();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,347,long jvmFreeSize = (maxMem - 512 * 1024 * 1024);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,350,jvmFreeSize = maxMem / 2;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,352,long dfltMaxSize = (long)(0.8f * maxMem);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,354,igfsDataSpaceMax = Math.min(dfltMaxSize, jvmFreeSize);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java,504,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java,506,log.debug("Failed to find write completion future for file in pending write map (most likely it was " +
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8645,try {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8646,Collection<InetSocketAddress> extAddrs0 = addrRslvr.getExternalAddresses(sockAddr);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8649,extAddrs.addAll(extAddrs0);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8651,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8652,throw new IgniteSpiException("Failed to get mapped external addresses " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,136,import static org.apache.ignite.IgniteSystemProperties.IGNITE_BINARY_MARSHALLER_USE_STRING_SERIALIZATION_VER_2;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4031,spi.ipFinder.unregisterAddresses(locNode.socketAddresses());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoveryImpl.java,268,spi.ipFinder.initializeLocalAddresses(locNode.socketAddresses());
modules/zookeeper/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/zk/TcpDiscoveryZookeeperIpFinder.java,20,import com.google.common.collect.Sets;
modules/zookeeper/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/zk/TcpDiscoveryZookeeperIpFinder.java,135,log.info("Initializing ZooKeeper IP Finder.");
modules/zookeeper/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/zk/TcpDiscoveryZookeeperIpFinder.java,158,log.info("Destroying ZooKeeper IP Finder.");
modules/zookeeper/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/zk/TcpDiscoveryZookeeperIpFinder.java,188,log.info("ZooKeeper IP Finder resolved addresses: " + answer);
modules/zookeeper/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/zk/TcpDiscoveryZookeeperIpFinder.java,197,log.info("Registering addresses with ZooKeeper IP Finder: " + addrs);
modules/zookeeper/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/zk/TcpDiscoveryZookeeperIpFinder.java,242,log.info("Unregistering addresses with ZooKeeper IP Finder: " + addrs);
modules/core/src/main/java/org/apache/ignite/internal/MarshallerContextImpl.java,167,FileLock fileLock = in.getChannel().lock(0L, Long.MAX_VALUE, true);
modules/core/src/main/java/org/apache/ignite/internal/MarshallerContextImpl.java,236,FileLock fileLock = out.getChannel().lock(0L, Long.MAX_VALUE, false);
modules/zookeeper/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/zk/TcpDiscoveryZookeeperIpFinder.java,221,.build();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8540,List<InetAddress> res = new ArrayList<>(addrs.size());
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8573,return Collections.unmodifiableList(res);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8599,List<InetSocketAddress> res = new ArrayList<>(addrs.size());
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8620,return Collections.unmodifiableList(res);
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridFunc.java,1729,public static <T1, T2> List<T2> viewListReadOnly(@Nullable final List<? extends T1> c,
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridFunc.java,1730,final IgniteClosure<? super T1, T2> trans) {
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridFunc.java,1731,A.notNull(trans, "trans");
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridFunc.java,1734,return Collections.emptyList();
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridFunc.java,1736,assert c != null;
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridFunc.java,1738,return new GridSerializableList<T2>() {
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridFunc.java,1740,private static final long serialVersionUID = 3126625219739967068L;
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridFunc.java,1743,return trans.apply(c.get(idx));
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridFunc.java,1748,return F.<T1, T2>iterator(c, trans, true);
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridFunc.java,1752,return c.size();
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridFunc.java,1756,return c.isEmpty();
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridFunc.java,1773,public static <T1, T2> List<T2> transformList(Collection<? extends T1> c,
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridFunc.java,1774,IgniteClosure<? super T1, T2> trans, @Nullable IgnitePredicate<? super T1>... p) {
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridFunc.java,1775,A.notNull(c, "c", trans, "trans");
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridFunc.java,1778,return Collections.emptyList();
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridFunc.java,1780,return new ArrayList<>(transform(retain(c, true, p), trans));
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheCountDownLatchImpl.java,29,import java.util.concurrent.atomic.AtomicBoolean;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheCountDownLatchImpl.java,86,private volatile CountDownLatch internalLatch;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheCountDownLatchImpl.java,89,private final AtomicBoolean initGuard = new AtomicBoolean();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheCountDownLatchImpl.java,240,internalLatch.countDown();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheCountDownLatchImpl.java,247,if (initGuard.compareAndSet(false, true)) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1719,U.error(log, "Failed to unmarshal discovery data for component: "  + entry.getKey(), e);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,34,import javax.servlet.http.HttpServletRequest;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,35,import javax.servlet.http.HttpServletRequestWrapper;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,36,import javax.servlet.http.HttpSession;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlJoin.java,39,super(new ArrayList<GridSqlElement>(on == null ? 2 : 3));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlJoin.java,45,addChild(on);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlJoin.java,68,return size() < 3 ? null : child(2);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlJoin.java,81,GridSqlElement on = on();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlJoin.java,84,buff.append(" \n ON ").append(StringUtils.unEnclose(on.getSQL()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,729,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,730,ClusterNode locNode = ctx.discovery().localNode();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,820,for (CacheConfiguration cfg : ctx.config().getCacheConfiguration()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,821,GridCacheAdapter cache = caches.get(maskNull(cfg.getName()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,823,if (cache != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,824,if (cfg.getRebalanceMode() == SYNC) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,825,CacheMode cacheMode = cfg.getCacheMode();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,828,cache.preloader().syncFuture().get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,743,backupQueue.add(entry);
modules/core/src/main/java/org/apache/ignite/internal/IgniteServicesImpl.java,232,return ctx.service().serviceProxy(prj, name, svcItf, sticky);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,727,return new GridServiceProxy<>(prj, name, svcItf, sticky, ctx).proxy();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,876,nm.setNonHeapMemoryUsed(metrics.getNonHeapMemoryUsed());
modules/core/src/main/java/org/apache/ignite/internal/cluster/ClusterGroupAdapter.java,313,Collection<ClusterNode> all = ctx.discovery().allNodes();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,715,its.add(iterator(map.entries().iterator(), !ctx.keepBinary()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,724,its.add(cache.localEntriesIterator(modes.primary, modes.backup));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,735,its.add(swapMgr.<K, V>swapIterator(modes.primary, modes.backup, topVer));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,738,its.add(swapMgr.<K, V>offheapIterator(modes.primary, modes.backup, topVer));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1005,return new EntrySet(map.entrySet(filter));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3766,it = ctx.swap().offheapIterator(true, true, ctx.affinity().affinityTopologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3777,return entry == null || entry.obsolete() ? null : entry.<K, V>wrapLazyValue();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4634,public Set<Cache.Entry<K, V>> primaryEntrySet() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4635,return new EntrySet(map.entrySet(CU.cachePrimary(ctx.grid().affinity(ctx.name()), ctx.localNode())));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,6653,private EntryIterator(Iterator<GridCacheMapEntry> internalIterator) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,6666,return current.wrapLazyValue();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,6675,GridCacheAdapter.this.getAndRemove((K)current.wrapLazyValue().getKey());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,6694,private EntrySet(Set<GridCacheMapEntry> internalSet) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,6700,return new EntryIterator(internalSet.iterator());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1158,return F.isEmpty(p) || isAll(e.<K1, V1>wrapLazyValue(), p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1690,return cacheCfg.getMemoryMode() == OFFHEAP_TIERED && isOffHeapEnabled();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1697,return cacheCfg.getMemoryMode() == OFFHEAP_TIERED || cacheCfg.getMemoryMode() == OFFHEAP_VALUES;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEntryEx.java,152,public <K, V> Cache.Entry<K, V> wrapLazyValue();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3934,return new LazyValueEntry<>(key, opCtx != null && opCtx.isKeepBinary());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1609,public <K, V> Iterator<Map.Entry<K, V>> lazySwapIterator() throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1613,return lazyIterator(cctx.gridSwap().rawIterator(spaceName));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1668,public <K, V> Iterator<Map.Entry<K, V>> lazyOffHeapIterator() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1672,return lazyIterator(offheap.iterator(spaceName));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1700,final GridCloseableIterator<? extends Map.Entry<byte[], byte[]>> it) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1713,cur = new GridVersionedMapEntry<K, V>(cur0);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,2046,throws IgniteCheckedException
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,2054,return cacheEntryIterator(this.<K, V>lazySwapIterator());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,2059,return new PartitionsIterator<K, V>(parts) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,2086,return cacheEntryIterator(this.<K, V>lazyOffHeapIterator());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,2091,return new PartitionsIterator<K, V>(parts) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,2310,public PartitionsIterator(Collection<Integer> parts) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,2317,return cacheEntryIterator(GridCacheSwapManager.this.<K, V>lazyIterator(nextPartition(part)));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,2348,advance();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,2376,private void advance() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,2520,private Map.Entry<byte[], byte[]> entry;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,2527,public GridVersionedMapEntry(Map.Entry<byte[], byte[]> entry) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,2534,KeyCacheObject key = cctx.toCacheKeyObject(entry.getKey());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,2536,return key.value(cctx.cacheObjectContext(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,2550,return e.value().value(cctx.cacheObjectContext(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,1215,public Iterator<Cache.Entry<K, V>> localEntriesIterator(final boolean primary, final boolean backup) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,1219,return iterator(entries().iterator(), !ctx.keepBinary());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,1283,return iterator(it, !ctx.keepBinary());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,1348,entry = next.wrapLazyValue();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,980,final Iterator<Cache.Entry<K, V>> iter = cache.localEntriesIterator(true, backups);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1161,key = (K)cctx.unwrapBinaryIfNeeded(key, keepBinary);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,2676,key = cctx.toCacheKeyObject(keyBytes()).value(cctx.cacheObjectContext(), false);
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,876,return true;
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,877,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetFuture.java,182,fut.listen(new CI1<IgniteInternalFuture<Object>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetFuture.java,184,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetFuture.java,185,fut.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetFuture.java,187,catch (NodeStoppingException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetFuture.java,188,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetFuture.java,190,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtGetFuture.java,192,log.debug("Failed to request keys from preloader [keys=" + keys + ", err=" + e + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,553,res = secondaryFs.exists(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,799,Collection<IgfsPath> children = secondaryFs.listPaths(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,802,files.add(child.name());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,842,Collection<IgfsFile> children = secondaryFs.listFiles(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,844,for (IgfsFile child : children) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,845,IgfsFileImpl impl = new IgfsFileImpl(child, data.groupBlockSize());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,847,files.add(impl);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1560,private IgfsFileImpl resolveFileInfo(IgfsPath path, IgfsMode mode) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1577,IgfsFile status = secondaryFs.info(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1580,return new IgfsFileImpl(status, data.groupBlockSize());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,396,throw new IgniteCheckedException("Cannot start cache in PRIVATE or ISOLATED deployment mode: " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,397,ctx.config().getDeploymentMode());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1391,V val = get(key, !ctx.keepBinary(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1410,T2<V, GridCacheVersion> t = (T2<V, GridCacheVersion>)get(key, !ctx.keepBinary(), true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1434,IgniteInternalFuture<V> fut = getAsync(key, !ctx.keepBinary(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1469,if (intercept) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1474,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1475,return val;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,2863,Collections.singletonList(key),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEntryEx.java,915,public boolean onTtlExpired(GridCacheVersion obsoleteVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,491,boolean swapEnabled = cctx.swap().swapEnabled();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,512,CacheObject val = cctx.fromOffheap(offHeapPointer(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,531,long delta = e.expireTime() == 0 ? 0 : e.expireTime() - U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,533,if (delta >= 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,534,CacheObject val = e.value();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,536,val = cctx.kernalContext().cacheObjects().prepareForCache(val, cctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,539,update(val, e.expireTime(), e.ttl(), e.version(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,543,offHeapPointer(e.offheapPointer());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,547,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,548,clearIndex(e.value());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,565,long expireTime = expireTimeExtras();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,567,if (expireTime > 0 && U.currentTimeMillis() >= expireTime) { // Don't swap entry if it's expired.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,569,if (cctx.offheapTiered()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,570,cctx.swap().removeOffheap(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,572,offHeapPointer(0);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,575,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,578,if (cctx.offheapTiered() && hasOffHeapPointer() && !swapNeeded) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,608,expireTime,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,610,valClsLdrId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,649,synchronized (this) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,650,cctx.swap().remove(key());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,761,CacheObject old;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,762,CacheObject ret = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,767,boolean expired = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,769,CacheObject expiredVal = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,771,boolean hasOldBytes;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,777,startVer = ver;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,783,double delta;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,785,long expireTime = expireTimeExtras();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,787,if (expireTime > 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,788,delta = expireTime - U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,791,log.debug("Checked expiration time for entry [timeLeft=" + delta + ", entry=" + this + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,794,expired = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,797,CacheObject val = this.val;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,799,hasOldBytes = hasOffHeapPointer();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,804,boolean valid = valid(tx != null ? tx.topologyVersion() : cctx.affinity().affinityTopologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,807,if (val == null && !hasOldBytes && readSwap) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,809,if (isNew() || !valid) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,812,if (expired) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,813,releaseSwap();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,816,clearIndex(null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,818,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,821,unswap(false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,826,val = unswap();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,829,if (expireTime > 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,830,delta = expireTime - U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,833,log.debug("Checked expiration time for entry [timeLeft=" + delta +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,837,expired = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,843,old = expired || !valid ? null : val;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,845,if (expired) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,846,expiredVal = val;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,848,value(null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,851,if (old == null && !hasOldBytes) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,860,ret = old;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,863,if (evt && expired) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,864,if (cctx.events().isRecordable(EVT_CACHE_OBJECT_EXPIRED)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,865,cctx.events().addEvent(partition(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,866,key,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,867,tx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,868,owner,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,869,EVT_CACHE_OBJECT_EXPIRED,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,870,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,871,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,872,expiredVal,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,873,expiredVal != null || hasOldBytes,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,874,subjId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,875,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,876,taskName,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,877,keepBinary);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,880,cctx.continuousQueries().onEntryExpired(this, key, expiredVal);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,883,evt = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,886,if (evt && !expired && cctx.events().isRecordable(EVT_CACHE_OBJECT_READ)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,895,old,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,896,hasOldBytes || old != null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,924,boolean loadedFromStore = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,926,if (ret == null && readThrough) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,943,loadedFromStore = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,963,updateIndex(ret, expTime, nextVer, prevVal);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,985,old,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,986,hasOldBytes,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1146,unswap(retval);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1561,unswap(retval);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1920,unswap(retval);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2762,if (!hasValueUnlocked() || checkExpired()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2764,ver = nextVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2775,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2776,obsolete = markObsolete0(ver, true, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2785,cctx.onDeferredDelete(this, ver);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3410,CacheObject val = isNew ? unswap(true) : rawGetOrUnmarshalUnlocked(false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3660,CacheObject expiredVal = saveOldValueUnlocked(false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3662,boolean hasOldBytes = hasOffHeapPointer();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3664,boolean expired = checkExpired();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3666,if (expired) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3667,if (!obsolete()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3668,if (cctx.deferredDelete() && !detached() && !isInternal()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3669,if (!deletedUnlocked()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3670,update(null, 0L, 0L, ver0 = ver, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3672,deletedUnlocked(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3674,deferred = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3677,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3679,obsolete = true; // Success, will return "true".
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3683,clearIndex(expiredVal);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3685,releaseSwap();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3687,if (cctx.events().isRecordable(EVT_CACHE_OBJECT_EXPIRED)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3688,cctx.events().addEvent(partition(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3689,key,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3690,cctx.localNodeId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3691,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3692,EVT_CACHE_OBJECT_EXPIRED,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3693,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3694,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3695,expiredVal,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3696,expiredVal != null || hasOldBytes,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3697,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3698,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3699,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3700,true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3703,cctx.continuousQueries().onEntryExpired(this, key, expiredVal);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3727,return obsolete;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1229,public void remove(final KeyCacheObject key) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1237,int part = cctx.affinity().partition(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,131,e.entry.onTtlExpired(obsoleteVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,587,cctx.swap().remove(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,366,if (cctx.isReplicated() || cctx.affinity().primary(cctx.localNode(), key, AffinityTopologyVersion.NONE)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,367,boolean primary = cctx.affinity().primary(cctx.localNode(), key, AffinityTopologyVersion.NONE);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1412,CacheEntry<K, V> val = t != null ? new CacheEntryImplEx<>(key, t.get1(), t.get2()) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1458,(IgniteInternalFuture<T2<V, GridCacheVersion>>)getAsync(key, !ctx.keepBinary(), true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1468,CacheEntry<K, V> val = t != null ? new CacheEntryImplEx<>(key, t.get1(), t.get2()) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1470,V val0 = (V)ctx.config().getInterceptor().onGet(key, t != null ? val.getValue() : null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1472,return new CacheEntryImplEx<>(key, val0, t != null ? t.get2() : null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1723,return map.get(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1162,val0 = CU.value(val, cctx, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1680,updated0 = value(updated0, updated, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1687,return new GridTuple3<>(false, cctx.unwrapTemporary(value(old0, old, false)), invokeRes);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2332,updated0 = value(updated0, updated, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2578,return cacheObj != null ? cacheObj.value(cctx.cacheObjectContext(), cpy) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheReturn.java,246,resMap.put(key0 != null ? key0 : CU.value(key, cctx, true), res0);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,435,ret.addEntryProcessResult(txEntry.context(), key, null, procRes, err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1877,invokeRes.addEntryProcessResult(ctx, entry.key(), invokeEntry.key(), computed, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1891,invokeRes.addEntryProcessResult(ctx, entry.key(), invokeEntry.key(), null, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2025,updated.value(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2026,ctx.cacheObjectContext(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2369,compRes.get2());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedCache.java,239,return (V)map.get(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,415,return m.get(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxEntry.java,43,import org.apache.ignite.internal.processors.cache.version.GridCacheVersion;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxEntry.java,946,assert this.serReadVer == null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,2827,ret.addEntryProcessResult(ctx, txEntry.key(), key0, res, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,2830,ret.addEntryProcessResult(ctx, txEntry.key(), key0, null, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1382,if (cctx.offheapTiered() && hadValPtr) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1383,boolean rmv = cctx.swap().removeOffheap(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1385,assert rmv;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1486,if (intercept) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1487,entry0.updateCounter(updateCntr0);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1489,cctx.config().getInterceptor().onAfterRemove(entry0);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1775,boolean hasValPtr = hasOffHeapPointer();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1786,if (cctx.offheapTiered() && hasValPtr) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1787,boolean rmv = cctx.swap().removeOffheap(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1789,assert rmv;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2464,boolean hasValPtr = hasOffHeapPointer();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2472,if (cctx.offheapTiered() && hasValPtr) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2473,boolean rmv = cctx.swap().removeOffheap(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2475,assert rmv;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,129,import static org.apache.ignite.internal.IgniteNodeAttributes.ATTR_LATE_AFFINITY_ASSIGNMENT;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceAssignments.java,29,import org.apache.ignite.services.Service;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceAssignments.java,80,public Service service() {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceAssignments.java,81,return cfg.getService();
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,974,final Service svc = copyAndInject(assigns.service());
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,983,log.error("Failed to initialize service (service will not be deployed): " + assigns.name(), e);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,1047,private Service copyAndInject(Service svc) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,1050,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,1051,byte[] bytes = m.marshal(svc);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,1053,Service cp = m.unmarshal(bytes,
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,1054,U.resolveClassLoader(svc.getClass().getClassLoader(), ctx.config()));
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,1056,ctx.resource().inject(cp);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,1058,return cp;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,1060,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,1061,log.error("Failed to copy service (will reuse same instance): " + svc.getClass(), e);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,1063,return svc;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/ServiceDescriptorImpl.java,57,return dep.configuration().getService().getClass();
modules/core/src/main/java/org/apache/ignite/services/ServiceConfiguration.java,58,private String name;
modules/core/src/main/java/org/apache/ignite/services/ServiceConfiguration.java,65,private int totalCnt;
modules/core/src/main/java/org/apache/ignite/services/ServiceConfiguration.java,68,private int maxPerNodeCnt;
modules/core/src/main/java/org/apache/ignite/services/ServiceConfiguration.java,71,private String cacheName;
modules/core/src/main/java/org/apache/ignite/services/ServiceConfiguration.java,74,private Object affKey;
modules/core/src/main/java/org/apache/ignite/services/ServiceConfiguration.java,78,private IgnitePredicate<ClusterNode> nodeFilter;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,283,restReq = new GridRestTaskRequest();
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcDatabaseMetadata.java,236,return false;
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcDatabaseMetadata.java,241,return false;
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcDatabaseMetadata.java,251,return false;
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcDatabaseMetadata.java,336,return false;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,235,return false;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,240,return false;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,250,return false;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,335,return false;
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,74,public IgniteLogger getLogger(Object ctgr);
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,81,public void trace(String msg);
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,88,public void debug(String msg);
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,95,public void info(String msg);
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,102,public void warning(String msg);
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,110,public void warning(String msg, @Nullable Throwable e);
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,117,public void error(String msg);
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,125,public void error(String msg, @Nullable Throwable e);
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,132,public boolean isTraceEnabled();
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,139,public boolean isDebugEnabled();
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,146,public boolean isInfoEnabled();
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,153,public boolean isQuiet();
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,160,public String fileName();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2327,SocketChannel ch = SocketChannel.open();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,367,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,369,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,370,GridCacheContext cacheCtx = cctx.cacheContext(m.cacheId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,372,if (cacheCtx != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,374,cacheCtx.preloader().handleSupplyMessage(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,377,cacheCtx.preloader().handleDemandMessage(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,378,idx, id, (GridDhtPartitionDemandMessage)m);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,379,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,380,U.error(log, "Unsupported message type: " + m.getClass().getName());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,383,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,384,leaveBusy();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,422,long ttl = CU.toTtl(expiry.getExpiryForAccess());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,534,long reservations = state.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,536,int ord = (int)(reservations >> 32);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,539,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,542,clearAll();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,544,if (isEmpty() && casState(reservations, EVICTED)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,546,log.debug("Evicted partition: " + this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,549,clearSwap();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,552,cctx.dr().partitionEvicted(id);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,554,cctx.continuousQueries().onPartitionEvicted(id);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,556,cctx.dataStructures().onPartitionEvicted(id);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,558,rent.onDone();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,560,((GridDhtPreloader)cctx.preloader()).onPartitionEvicted(this, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,562,clearDeferredDeletes();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1461,if (futQ.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1514,U.log(log, "Skipping rebalancing (nothing scheduled) " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1418,orderMap.put(order, new ArrayList<Integer>(size));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1428,for (Integer cacheId : orderMap.get(order)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1429,GridCacheContext<K, V> cacheCtx = cctx.cacheContext(cacheId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,316,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java,496,GridNearAtomicUpdateRequest singleReq0 = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,659,GridNearAtomicUpdateRequest singleReq0 = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,660,Map<UUID, GridNearAtomicUpdateRequest> mappings0 = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1524,return;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1053,continue;
modules/log4j/src/main/java/org/apache/ignite/logger/log4j/Log4JLogger.java,311,if ("CONSOLE_ERR".equals(appender.getName())) {
modules/log4j/src/main/java/org/apache/ignite/logger/log4j/Log4JLogger.java,350,else
modules/log4j/src/main/java/org/apache/ignite/logger/log4j/Log4JLogger.java,352,rootCategory.addAppender(createConsoleAppender(Level.OFF));
modules/log4j/src/main/java/org/apache/ignite/logger/log4j/Log4JLogger.java,373,private Appender createConsoleAppender(Level maxLevel) {
modules/log4j/src/main/java/org/apache/ignite/logger/log4j/Log4JLogger.java,377,Appender app = new ConsoleAppender(new PatternLayout(fmt), ConsoleAppender.SYSTEM_OUT);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2TreeIndex.java,299,public GridH2Row findOne(GridSearchRowPointer row) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,689,return (QueryCursor<R>)ctx.kernalContext().query().queryLocalFields(ctx, p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,691,return (QueryCursor<R>)ctx.kernalContext().query().queryTwoStep(ctx, p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,396,List<Set<Integer>> sParts = new ArrayList<>(lsnrCnt);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,411,GridDhtPartitionDemandMessage initD = new GridDhtPartitionDemandMessage(d, sParts.get(cnt));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,417,synchronized (fut) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,418,if (!fut.isDone()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,421,cctx.io().sendOrderedMessage(node,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,422,rebalanceTopics.get(cnt), initD, cctx.ioPolicy(), initD.timeout());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,427,log.debug("Requested rebalancing [from node=" + node.id() + ", listener index=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,428,cnt + ", partitions count=" + sParts.get(cnt).size() +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,434,U.log(log, "Starting rebalancing (old api) [cache=" + cctx.name() +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,441,d.timeout(cctx.config().getRebalanceTimeout());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,442,d.workerId(0);//old api support.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,444,worker = new DemandWorker(dmIdx.incrementAndGet(), fut);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java,446,worker.run(node, d);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,944,Integer res = sendMessageDirectly(joinReq, addr);
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryReaderExImpl.java,1712,for (BinarySchema typeSchema : type.metadata().schemas()) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryReaderExImpl.java,1713,if (schemaId == typeSchema.schemaId()) {
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryReaderExImpl.java,1714,schema = typeSchema;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryReaderExImpl.java,1716,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,179,if (metaDataCache == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,202,assert metaDataCache != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,553,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,554,BinaryMetadata oldMeta = metaDataCache.localPeek(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,555,BinaryMetadata mergedMeta = BinaryUtils.mergeMetadata(oldMeta, newMeta0);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,557,AffinityTopologyVersion topVer = ctx.cache().context().lockedTopologyVersion(null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,560,topVer = ctx.cache().context().exchange().readyAffinityVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,562,BinaryObjectException err = metaDataCache.invoke(topVer, key, new MetadataProcessor(mergedMeta));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,565,throw err;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,567,catch (CacheException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,568,throw new BinaryObjectException("Failed to update meta data for type: " + newMeta.typeName(), e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,581,BinaryMetadata meta = metaDataCache.getTopologySafe(new BinaryMetadataKey(typeId));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,588,BinaryMetadata meta = metaDataCache.localPeek(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,591,meta = metaDataCache.getTopologySafe(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java,610,Map<BinaryMetadataKey, BinaryMetadata> meta = metaDataCache.getAll(keys);
modules/cassandra/src/main/java/org/apache/ignite/cache/store/cassandra/CassandraCacheStore.java,100,pool = Executors.newFixedThreadPool(maxPoolSize);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,697,final IgniteCache cache = cctx.kernalContext().cache().jcache(cctx.name());
modules/cassandra/src/main/java/org/apache/ignite/cache/store/cassandra/datasource/DataSource.java,522,return ses = new CassandraSessionImpl(builder, fetchSize, readConsistency, writeConsistency, log);
modules/cassandra/src/main/java/org/apache/ignite/cache/store/cassandra/session/CassandraSessionImpl.java,33,import java.io.IOException;
modules/cassandra/src/main/java/org/apache/ignite/cache/store/cassandra/session/CassandraSessionImpl.java,34,import java.util.HashMap;
modules/cassandra/src/main/java/org/apache/ignite/cache/store/cassandra/session/CassandraSessionImpl.java,35,import java.util.LinkedList;
modules/cassandra/src/main/java/org/apache/ignite/cache/store/cassandra/session/CassandraSessionImpl.java,36,import java.util.List;
modules/cassandra/src/main/java/org/apache/ignite/cache/store/cassandra/session/CassandraSessionImpl.java,37,import java.util.Map;
modules/cassandra/src/main/java/org/apache/ignite/cache/store/cassandra/session/CassandraSessionImpl.java,38,import java.util.concurrent.atomic.AtomicInteger;
modules/cassandra/src/main/java/org/apache/ignite/cache/store/cassandra/session/CassandraSessionImpl.java,39,import javax.cache.Cache;
modules/cassandra/src/main/java/org/apache/ignite/cache/store/cassandra/session/CassandraSessionImpl.java,104,ConsistencyLevel writeConsistency, IgniteLogger log) {
modules/cassandra/src/main/java/org/apache/ignite/cache/store/cassandra/session/CassandraSessionImpl.java,407,SessionPool.put(this, ses);
modules/cassandra/src/main/java/org/apache/ignite/cache/store/cassandra/session/pool/SessionPool.java,20,import com.datastax.driver.core.Session;
modules/cassandra/src/main/java/org/apache/ignite/cache/store/cassandra/session/pool/SessionPool.java,101,public static void put(CassandraSessionImpl cassandraSes, Session driverSes) {
modules/cassandra/src/main/java/org/apache/ignite/cache/store/cassandra/session/pool/SessionPool.java,108,old = sessions.put(cassandraSes, new SessionWrapper(driverSes));
modules/cassandra/src/main/java/org/apache/ignite/cache/store/cassandra/session/pool/SessionWrapper.java,28,public static final long DFLT_EXPIRATION_TIMEOUT = 300000;  // 5 minutes.
modules/cassandra/src/main/java/org/apache/ignite/cache/store/cassandra/session/pool/SessionWrapper.java,41,public SessionWrapper(Session ses) {
modules/cassandra/src/main/java/org/apache/ignite/cache/store/cassandra/session/pool/SessionWrapper.java,43,this.time = System.currentTimeMillis();
modules/cassandra/src/main/java/org/apache/ignite/cache/store/cassandra/session/pool/SessionWrapper.java,52,return System.currentTimeMillis() - time > DFLT_EXPIRATION_TIMEOUT;
examples/src/main/java/org/apache/ignite/examples/binary/computegrid/ComputeClientBinaryTaskExecutionExample.java,27,import org.apache.ignite.binary.BinaryObject;
examples/src/main/java/org/apache/ignite/examples/binary/computegrid/ComputeClientTask.java,28,import org.apache.ignite.binary.BinaryObject;
examples/src/main/java/org/apache/ignite/examples/model/Address.java,21,import org.apache.ignite.binary.Binarylizable;
modules/aws/src/main/java/org/apache/ignite/spi/checkpoint/s3/S3CheckpointSpi.java,20,import com.amazonaws.AmazonClientException;
modules/aws/src/main/java/org/apache/ignite/spi/checkpoint/s3/S3CheckpointSpi.java,21,import com.amazonaws.AmazonServiceException;
modules/aws/src/main/java/org/apache/ignite/spi/checkpoint/s3/S3CheckpointSpi.java,22,import com.amazonaws.ClientConfiguration;
modules/aws/src/main/java/org/apache/ignite/spi/checkpoint/s3/S3CheckpointSpi.java,23,import com.amazonaws.auth.AWSCredentials;
modules/aws/src/main/java/org/apache/ignite/spi/checkpoint/s3/S3CheckpointSpi.java,24,import com.amazonaws.services.s3.AmazonS3;
modules/aws/src/main/java/org/apache/ignite/spi/checkpoint/s3/S3CheckpointSpi.java,25,import com.amazonaws.services.s3.AmazonS3Client;
modules/aws/src/main/java/org/apache/ignite/spi/checkpoint/s3/S3CheckpointSpi.java,26,import com.amazonaws.services.s3.model.ObjectListing;
modules/aws/src/main/java/org/apache/ignite/spi/checkpoint/s3/S3CheckpointSpi.java,27,import com.amazonaws.services.s3.model.ObjectMetadata;
modules/aws/src/main/java/org/apache/ignite/spi/checkpoint/s3/S3CheckpointSpi.java,28,import com.amazonaws.services.s3.model.S3Object;
modules/aws/src/main/java/org/apache/ignite/spi/checkpoint/s3/S3CheckpointSpi.java,29,import com.amazonaws.services.s3.model.S3ObjectSummary;
modules/benchmarks/src/main/java/org/apache/ignite/internal/benchmarks/jmh/cache/JmhCacheBenchmark.java,28,import java.util.concurrent.ThreadLocalRandom;
modules/benchmarks/src/main/java/org/apache/ignite/internal/benchmarks/jmh/runner/JmhIdeBenchmarkRunner.java,24,import java.util.concurrent.TimeUnit;
modules/benchmarks/src/main/java/org/apache/ignite/internal/benchmarks/model/IntValue.java,20,import org.apache.ignite.binary.BinaryObjectException;
modules/benchmarks/src/main/java/org/apache/ignite/internal/benchmarks/model/IntValue.java,21,import org.apache.ignite.binary.BinaryReader;
modules/benchmarks/src/main/java/org/apache/ignite/internal/benchmarks/model/IntValue.java,22,import org.apache.ignite.binary.BinaryWriter;
modules/benchmarks/src/main/java/org/apache/ignite/internal/benchmarks/model/IntValue.java,23,import org.apache.ignite.binary.Binarylizable;
modules/cloud/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/cloud/TcpDiscoveryCloudIpFinder.java,20,import com.google.common.base.Charsets;
modules/cloud/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/cloud/TcpDiscoveryCloudIpFinder.java,21,import com.google.common.base.Predicate;
modules/cloud/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/cloud/TcpDiscoveryCloudIpFinder.java,22,import com.google.common.base.Supplier;
modules/cloud/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/cloud/TcpDiscoveryCloudIpFinder.java,23,import com.google.common.io.Files;
modules/core/src/main/java/org/apache/ignite/configuration/FileSystemConfiguration.java,28,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/igfs/IgfsParentNotDirectoryException.java,20,import org.jetbrains.annotations.*;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryEnumCache.java,20,import org.apache.ignite.binary.BinaryObjectException;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryFieldImpl.java,23,import org.apache.ignite.binary.BinaryObject;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryFieldImpl.java,24,import org.apache.ignite.binary.BinaryField;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryRawWriterEx.java,20,import org.apache.ignite.internal.binary.streams.BinaryOutputStream;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryReaderHandles.java,20,import org.jetbrains.annotations.Nullable;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinarySchemaRegistry.java,22,import java.util.HashMap;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryThreadLocalContext.java,20,import org.apache.ignite.internal.binary.streams.BinaryMemoryAllocatorChunk;
modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryTypeImpl.java,20,import org.apache.ignite.binary.BinaryType;
modules/core/src/main/java/org/apache/ignite/internal/binary/GridBinaryMarshaller.java,26,import org.apache.ignite.binary.BinaryObjectException;
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryBuilderEnum.java,20,import org.apache.ignite.internal.binary.GridBinaryMarshaller;
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryBuilderEnum.java,23,import org.apache.ignite.binary.BinaryInvalidTypeException;
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryBuilderReader.java,21,import org.apache.ignite.internal.binary.BinaryObjectImpl;
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryBuilderReader.java,22,import org.apache.ignite.internal.binary.BinaryReaderExImpl;
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryBuilderReader.java,23,import org.apache.ignite.internal.binary.BinaryWriterExImpl;
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryBuilderReader.java,24,import org.apache.ignite.internal.binary.GridBinaryMarshaller;
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryBuilderReader.java,29,import org.apache.ignite.internal.binary.streams.BinaryHeapInputStream;
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryBuilderReader.java,32,import java.sql.Timestamp;
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryBuilderReader.java,33,import java.util.Date;
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryBuilderReader.java,34,import java.util.HashMap;
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryBuilderReader.java,35,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryEnumArrayLazyValue.java,23,import org.apache.ignite.binary.BinaryObjectException;
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryEnumArrayLazyValue.java,24,import org.apache.ignite.binary.BinaryInvalidTypeException;
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryLazyArrayList.java,26,import org.apache.ignite.internal.binary.BinaryUtils;
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryLazyLinkedList.java,28,import org.apache.ignite.internal.binary.BinaryUtils;
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryLazyMap.java,28,import org.apache.ignite.internal.binary.BinaryUtils;
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryLazySet.java,24,import org.apache.ignite.internal.binary.BinaryUtils;
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryObjectArrayLazyValue.java,20,import org.apache.ignite.internal.binary.GridBinaryMarshaller;
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryObjectArrayLazyValue.java,23,import org.apache.ignite.binary.BinaryInvalidTypeException;
modules/core/src/main/java/org/apache/ignite/internal/binary/builder/BinaryPlainBinaryObject.java,23,import org.apache.ignite.binary.BinaryObject;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheLockTimeoutException.java,20,import org.apache.ignite.internal.processors.cache.version.*;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/IgniteBinaryImpl.java,22,import org.apache.ignite.internal.GridKernalContext;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/IgniteBinaryImpl.java,23,import org.apache.ignite.internal.processors.cacheobject.IgniteCacheObjectProcessor;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/IgniteBinaryImpl.java,27,import org.apache.ignite.binary.BinaryObject;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/store/CacheOsStoreManager.java,26,import org.apache.ignite.internal.binary.BinaryMarshaller;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,33,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,34,import java.util.HashMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,35,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,36,import java.util.concurrent.TimeUnit;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,37,import java.util.concurrent.locks.Condition;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,38,import java.util.concurrent.locks.Lock;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,39,import java.util.concurrent.locks.ReentrantLock;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDirectoryInfo.java,33,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDirectoryInfo.java,34,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDirectoryInfo.java,35,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDirectoryInfo.java,36,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDirectoryInfo.java,37,import java.util.Collections;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDirectoryInfo.java,38,import java.util.HashMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDirectoryInfo.java,39,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsEntryInfo.java,28,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsEntryInfo.java,29,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsEntryInfo.java,30,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsEntryInfo.java,31,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsEntryInfo.java,32,import java.util.Collections;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsEntryInfo.java,33,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileImpl.java,28,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileImpl.java,29,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileImpl.java,30,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileImpl.java,31,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileImpl.java,32,import java.util.Collections;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileImpl.java,33,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,33,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,34,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,35,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,36,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,37,import java.util.Collections;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,38,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,20,import org.apache.ignite.IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,21,import org.apache.ignite.igfs.IgfsPath;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,22,import org.apache.ignite.internal.util.future.GridFutureAdapter;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,23,import org.apache.ignite.internal.util.typedef.internal.U;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsInputStreamImpl.java,35,import java.io.EOFException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsInputStreamImpl.java,36,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsInputStreamImpl.java,37,import java.util.Arrays;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsInputStreamImpl.java,38,import java.util.LinkedHashMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsInputStreamImpl.java,39,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsInputStreamImpl.java,40,import java.util.Set;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsInputStreamImpl.java,41,import java.util.concurrent.TimeUnit;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsInputStreamImpl.java,42,import java.util.concurrent.locks.Condition;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsInputStreamImpl.java,43,import java.util.concurrent.locks.Lock;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsInputStreamImpl.java,44,import java.util.concurrent.locks.ReentrantLock;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,45,import java.io.Closeable;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,46,import java.io.DataInput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,47,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,48,import java.util.Iterator;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,49,import java.util.concurrent.LinkedBlockingQueue;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,50,import java.util.concurrent.RejectedExecutionException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,51,import java.util.concurrent.atomic.AtomicLong;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsListingEntry.java,32,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsListingEntry.java,33,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsListingEntry.java,34,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsListingEntry.java,35,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsOutputStreamImpl.java,32,import java.io.DataInput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsOutputStreamImpl.java,33,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsOutputStreamImpl.java,34,import java.nio.ByteBuffer;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsPathIds.java,24,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsPathIds.java,25,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsPathsCreateResult.java,23,import java.util.List;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsUtils.java,51,import java.io.DataInput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsUtils.java,52,import java.io.DataOutput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsUtils.java,53,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsUtils.java,54,import java.lang.reflect.Constructor;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsUtils.java,55,import java.util.HashMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsUtils.java,56,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsUtils.java,57,import java.util.UUID;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsUtils.java,58,import java.util.concurrent.ThreadLocalRandom;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryCreateProcessor.java,33,import javax.cache.processor.EntryProcessor;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryCreateProcessor.java,34,import javax.cache.processor.EntryProcessorException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryCreateProcessor.java,35,import javax.cache.processor.MutableEntry;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryCreateProcessor.java,36,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryCreateProcessor.java,37,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryCreateProcessor.java,38,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryCreateProcessor.java,39,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryCreateProcessor.java,40,import java.util.Collections;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryCreateProcessor.java,41,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryListingAddProcessor.java,34,import javax.cache.processor.EntryProcessor;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryListingAddProcessor.java,35,import javax.cache.processor.MutableEntry;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryListingAddProcessor.java,36,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryListingAddProcessor.java,37,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryListingAddProcessor.java,38,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryListingAddProcessor.java,39,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryListingAddProcessor.java,40,import java.util.HashMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryListingAddProcessor.java,41,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryListingRemoveProcessor.java,34,import javax.cache.processor.EntryProcessor;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryListingRemoveProcessor.java,35,import javax.cache.processor.EntryProcessorException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryListingRemoveProcessor.java,36,import javax.cache.processor.MutableEntry;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryListingRemoveProcessor.java,37,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryListingRemoveProcessor.java,38,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryListingRemoveProcessor.java,39,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryListingRemoveProcessor.java,40,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryListingRemoveProcessor.java,41,import java.util.HashMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryListingRemoveProcessor.java,42,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryListingReplaceProcessor.java,34,import javax.cache.processor.EntryProcessor;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryListingReplaceProcessor.java,35,import javax.cache.processor.EntryProcessorException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryListingReplaceProcessor.java,36,import javax.cache.processor.MutableEntry;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryListingReplaceProcessor.java,37,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryListingReplaceProcessor.java,38,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryListingReplaceProcessor.java,39,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryListingReplaceProcessor.java,40,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryListingReplaceProcessor.java,41,import java.util.HashMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaDirectoryListingReplaceProcessor.java,42,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileCreateProcessor.java,34,import javax.cache.processor.EntryProcessor;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileCreateProcessor.java,35,import javax.cache.processor.EntryProcessorException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileCreateProcessor.java,36,import javax.cache.processor.MutableEntry;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileCreateProcessor.java,37,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileCreateProcessor.java,38,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileCreateProcessor.java,39,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileCreateProcessor.java,40,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileCreateProcessor.java,41,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileLockProcessor.java,32,import javax.cache.processor.EntryProcessor;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileLockProcessor.java,33,import javax.cache.processor.EntryProcessorException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileLockProcessor.java,34,import javax.cache.processor.MutableEntry;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileLockProcessor.java,35,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileLockProcessor.java,36,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileLockProcessor.java,37,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileLockProcessor.java,38,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileRangeDeleteProcessor.java,32,import javax.cache.processor.EntryProcessor;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileRangeDeleteProcessor.java,33,import javax.cache.processor.EntryProcessorException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileRangeDeleteProcessor.java,34,import javax.cache.processor.MutableEntry;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileRangeDeleteProcessor.java,35,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileRangeDeleteProcessor.java,36,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileRangeDeleteProcessor.java,37,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileRangeDeleteProcessor.java,38,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileRangeUpdateProcessor.java,32,import javax.cache.processor.EntryProcessor;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileRangeUpdateProcessor.java,33,import javax.cache.processor.EntryProcessorException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileRangeUpdateProcessor.java,34,import javax.cache.processor.MutableEntry;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileRangeUpdateProcessor.java,35,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileRangeUpdateProcessor.java,36,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileRangeUpdateProcessor.java,37,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileRangeUpdateProcessor.java,38,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileReserveSpaceProcessor.java,32,import javax.cache.processor.EntryProcessor;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileReserveSpaceProcessor.java,33,import javax.cache.processor.EntryProcessorException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileReserveSpaceProcessor.java,34,import javax.cache.processor.MutableEntry;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileReserveSpaceProcessor.java,35,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileReserveSpaceProcessor.java,36,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileReserveSpaceProcessor.java,37,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileReserveSpaceProcessor.java,38,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileUnlockProcessor.java,30,import javax.cache.processor.EntryProcessor;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileUnlockProcessor.java,31,import javax.cache.processor.EntryProcessorException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileUnlockProcessor.java,32,import javax.cache.processor.MutableEntry;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileUnlockProcessor.java,33,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileUnlockProcessor.java,34,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileUnlockProcessor.java,35,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaFileUnlockProcessor.java,36,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaUpdatePropertiesProcessor.java,32,import javax.cache.processor.EntryProcessor;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaUpdatePropertiesProcessor.java,33,import javax.cache.processor.EntryProcessorException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaUpdatePropertiesProcessor.java,34,import javax.cache.processor.MutableEntry;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaUpdatePropertiesProcessor.java,35,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaUpdatePropertiesProcessor.java,36,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaUpdatePropertiesProcessor.java,37,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaUpdatePropertiesProcessor.java,38,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaUpdatePropertiesProcessor.java,39,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaUpdateTimesProcessor.java,30,import javax.cache.processor.EntryProcessor;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaUpdateTimesProcessor.java,31,import javax.cache.processor.EntryProcessorException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaUpdateTimesProcessor.java,32,import javax.cache.processor.MutableEntry;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaUpdateTimesProcessor.java,33,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaUpdateTimesProcessor.java,34,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaUpdateTimesProcessor.java,35,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/meta/IgfsMetaUpdateTimesProcessor.java,36,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformConfigurationEx.java,23,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformContext.java,41,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformContextImpl.java,79,import java.sql.Timestamp;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformContextImpl.java,81,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformContextImpl.java,82,import java.util.Collections;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformContextImpl.java,84,import java.util.HashSet;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformContextImpl.java,88,import java.util.Set;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformContextImpl.java,89,import java.util.UUID;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformContextImpl.java,90,import java.util.concurrent.ConcurrentHashMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformDefaultJavaObjectFactory.java,25,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformJavaObjectFactoryEx.java,23,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformJavaObjectFactoryProxy.java,35,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformJavaObjectFactoryProxy.java,36,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformJavaObjectFactoryProxy.java,37,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformJavaObjectFactoryProxy.java,38,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformJavaObjectFactoryProxy.java,39,import java.util.HashMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformJavaObjectFactoryProxy.java,40,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformNativeException.java,20,import org.apache.ignite.internal.util.typedef.internal.S;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformProcessorImpl.java,60,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformProcessorImpl.java,61,import java.util.Collections;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformProcessorImpl.java,62,import java.util.concurrent.ConcurrentHashMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformProcessorImpl.java,63,import java.util.concurrent.CountDownLatch;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformProcessorImpl.java,64,import java.util.concurrent.locks.ReadWriteLock;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformProcessorImpl.java,65,import java.util.concurrent.locks.ReentrantReadWriteLock;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/PlatformCachePartialUpdateException.java,26,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/affinity/PlatformAffinity.java,27,import org.apache.ignite.internal.managers.discovery.GridDiscoveryManager;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/query/PlatformContinuousQuery.java,25,import javax.cache.event.CacheEntryUpdatedListener;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/query/PlatformContinuousQueryRemoteFilter.java,29,import javax.cache.event.CacheEntryEvent;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/query/PlatformContinuousQueryRemoteFilter.java,30,import javax.cache.event.CacheEntryListenerException;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/query/PlatformContinuousQueryRemoteFilter.java,31,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/query/PlatformContinuousQueryRemoteFilter.java,32,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/query/PlatformContinuousQueryRemoteFilter.java,33,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/query/PlatformContinuousQueryRemoteFilter.java,34,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/query/PlatformContinuousQueryRemoteFilter.java,35,import java.util.concurrent.locks.ReadWriteLock;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/query/PlatformContinuousQueryRemoteFilter.java,36,import java.util.concurrent.locks.ReentrantReadWriteLock;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/compute/PlatformFullTask.java,29,import org.apache.ignite.internal.managers.discovery.GridDiscoveryManager;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cpp/PlatformCppConfigurationClosure.java,22,import org.apache.ignite.binary.BinaryIdMapper;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cpp/PlatformCppConfigurationClosure.java,24,import org.apache.ignite.binary.BinaryNameMapper;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cpp/PlatformCppConfigurationClosure.java,33,import org.apache.ignite.internal.binary.BinaryMarshaller;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cpp/PlatformCppConfigurationClosure.java,36,import java.util.Collections;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cpp/PlatformCppConfigurationEx.java,26,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/datastreamer/PlatformDataStreamer.java,27,import org.apache.ignite.internal.binary.BinaryRawReaderEx;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/datastreamer/PlatformStreamReceiverImpl.java,32,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/datastreamer/PlatformStreamReceiverImpl.java,33,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/datastreamer/PlatformStreamReceiverImpl.java,34,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/datastreamer/PlatformStreamReceiverImpl.java,35,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/datastreamer/PlatformStreamReceiverImpl.java,36,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/dotnet/PlatformDotNetCacheStore.java,40,import javax.cache.Cache;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/dotnet/PlatformDotNetCacheStore.java,41,import javax.cache.integration.CacheLoaderException;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/dotnet/PlatformDotNetCacheStore.java,42,import javax.cache.integration.CacheWriterException;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/dotnet/PlatformDotNetCacheStore.java,43,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/dotnet/PlatformDotNetCacheStore.java,44,import java.util.HashMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/dotnet/PlatformDotNetCacheStore.java,45,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/dotnet/PlatformDotNetConfigurationClosure.java,46,import java.util.ArrayList;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/dotnet/PlatformDotNetConfigurationClosure.java,47,import java.util.Collections;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/dotnet/PlatformDotNetConfigurationClosure.java,48,import java.util.List;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/dotnet/PlatformDotNetConfigurationEx.java,26,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/events/PlatformEventFilterListenerImpl.java,29,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/events/PlatformEventFilterListenerImpl.java,30,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/events/PlatformEventFilterListenerImpl.java,31,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/events/PlatformEventFilterListenerImpl.java,32,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/events/PlatformEventFilterListenerImpl.java,33,import java.util.UUID;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/events/PlatformEvents.java,36,import java.util.Arrays;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/events/PlatformEvents.java,37,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/events/PlatformEvents.java,38,import java.util.UUID;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/message/PlatformMessageFilter.java,23,import java.util.UUID;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/messaging/PlatformMessageFilterImpl.java,29,import java.util.UUID;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/messaging/PlatformMessageLocalFilter.java,27,import java.util.UUID;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/messaging/PlatformMessaging.java,31,import java.util.UUID;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/services/PlatformServices.java,41,import java.lang.reflect.Method;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/services/PlatformServices.java,42,import java.util.ArrayList;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/services/PlatformServices.java,43,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/services/PlatformServices.java,44,import java.util.HashMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/services/PlatformServices.java,45,import java.util.List;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/services/PlatformServices.java,46,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/services/PlatformServices.java,47,import java.util.UUID;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformListenable.java,20,import org.apache.ignite.*;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformListenable.java,21,import org.apache.ignite.lang.*;
modules/core/src/main/java/org/apache/ignite/internal/processors/plugin/CachePluginManager.java,43,import javax.cache.Cache;
modules/core/src/main/java/org/apache/ignite/internal/tck/TCKMBeanServerBuilder.java,20,import com.sun.jmx.mbeanserver.JmxMBeanServer;
modules/core/src/main/java/org/apache/ignite/internal/util/GridConcurrentFactory.java,20,import java.util.concurrent.ConcurrentMap;
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridInClosure3X.java,20,import org.apache.ignite.*;
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridInClosure3X.java,21,import org.apache.ignite.internal.util.typedef.*;
modules/core/src/main/java/org/apache/ignite/internal/util/scala/impl.java,20,import java.lang.annotation.*;
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/CI3.java,20,import org.apache.ignite.internal.util.lang.*;
modules/core/src/main/java/org/apache/ignite/internal/websession/WebSessionAttributeProcessor.java,28,import javax.cache.processor.EntryProcessor;
modules/core/src/main/java/org/apache/ignite/internal/websession/WebSessionAttributeProcessor.java,29,import javax.cache.processor.EntryProcessorException;
modules/core/src/main/java/org/apache/ignite/internal/websession/WebSessionAttributeProcessor.java,30,import javax.cache.processor.MutableEntry;
modules/core/src/main/java/org/apache/ignite/internal/websession/WebSessionAttributeProcessor.java,31,import java.io.Serializable;
modules/core/src/main/java/org/apache/ignite/internal/websession/WebSessionAttributeProcessor.java,32,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/websession/WebSessionEntity.java,29,import java.io.Serializable;
modules/core/src/main/java/org/apache/ignite/internal/websession/WebSessionEntity.java,30,import java.util.Collections;
modules/core/src/main/java/org/apache/ignite/internal/websession/WebSessionEntity.java,31,import java.util.HashMap;
modules/core/src/main/java/org/apache/ignite/internal/websession/WebSessionEntity.java,32,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/platform/dotnet/PlatformDotNetBinaryConfiguration.java,20,import org.apache.ignite.internal.util.typedef.internal.S;
modules/core/src/main/java/org/apache/ignite/platform/dotnet/PlatformDotNetCacheStoreFactory.java,20,import org.apache.ignite.internal.processors.platform.dotnet.PlatformDotNetCacheStore;
modules/core/src/main/java/org/apache/ignite/platform/dotnet/PlatformDotNetCacheStoreFactory.java,22,import javax.cache.configuration.Factory;
modules/core/src/main/java/org/apache/ignite/platform/dotnet/PlatformDotNetCacheStoreFactoryNative.java,20,import org.apache.ignite.internal.processors.platform.dotnet.PlatformDotNetCacheStore;
modules/core/src/main/java/org/apache/ignite/platform/dotnet/PlatformDotNetConfiguration.java,20,import org.apache.ignite.configuration.PlatformConfiguration;
modules/core/src/main/java/org/apache/ignite/platform/dotnet/PlatformDotNetConfiguration.java,21,import org.apache.ignite.internal.util.typedef.internal.S;
modules/core/src/main/java/org/apache/ignite/platform/dotnet/PlatformDotNetLifecycleBean.java,23,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/plugin/CachePluginProvider.java,25,import javax.cache.Cache;
modules/gce/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/gce/TcpDiscoveryGoogleStorageIpFinder.java,20,import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
modules/gce/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/gce/TcpDiscoveryGoogleStorageIpFinder.java,21,import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
modules/gce/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/gce/TcpDiscoveryGoogleStorageIpFinder.java,22,import com.google.api.client.googleapis.json.GoogleJsonResponseException;
modules/gce/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/gce/TcpDiscoveryGoogleStorageIpFinder.java,23,import com.google.api.client.http.InputStreamContent;
modules/gce/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/gce/TcpDiscoveryGoogleStorageIpFinder.java,24,import com.google.api.client.http.javanet.NetHttpTransport;
modules/gce/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/gce/TcpDiscoveryGoogleStorageIpFinder.java,25,import com.google.api.client.json.jackson2.JacksonFactory;
modules/gce/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/gce/TcpDiscoveryGoogleStorageIpFinder.java,26,import com.google.api.services.storage.Storage;
modules/gce/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/gce/TcpDiscoveryGoogleStorageIpFinder.java,27,import com.google.api.services.storage.StorageScopes;
modules/gce/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/gce/TcpDiscoveryGoogleStorageIpFinder.java,28,import com.google.api.services.storage.model.Bucket;
modules/gce/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/gce/TcpDiscoveryGoogleStorageIpFinder.java,29,import com.google.api.services.storage.model.StorageObject;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/BasicHadoopFileSystemFactory.java,26,import org.apache.ignite.internal.util.typedef.internal.U;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/BasicHadoopFileSystemFactory.java,28,import org.jetbrains.annotations.Nullable;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/HadoopFileSystemFactory.java,23,import org.apache.ignite.lifecycle.LifecycleAware;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,55,import java.io.OutputStream;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,58,import java.util.Collection;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,61,import java.util.Map;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,62,import java.util.concurrent.Callable;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/KerberosHadoopFileSystemFactory.java,26,import org.apache.ignite.internal.util.typedef.internal.U;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/KerberosHadoopFileSystemFactory.java,27,import org.jetbrains.annotations.Nullable;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,38,import org.apache.ignite.spi.indexing.IndexingQueryFilter;
modules/mqtt/src/main/java/org/apache/ignite/stream/mqtt/MqttStreamer.java,29,import org.apache.ignite.IgniteDataStreamer;
modules/mqtt/src/main/java/org/apache/ignite/stream/mqtt/MqttStreamer.java,30,import org.apache.ignite.IgniteException;
modules/mqtt/src/main/java/org/apache/ignite/stream/mqtt/MqttStreamer.java,31,import org.apache.ignite.IgniteLogger;
modules/mqtt/src/main/java/org/apache/ignite/stream/mqtt/MqttStreamer.java,32,import org.apache.ignite.internal.util.typedef.internal.A;
modules/mqtt/src/main/java/org/apache/ignite/stream/mqtt/MqttStreamer.java,33,import org.apache.ignite.stream.StreamAdapter;
modules/mqtt/src/main/java/org/apache/ignite/stream/mqtt/MqttStreamer.java,34,import org.apache.ignite.stream.StreamMultipleTupleExtractor;
modules/mqtt/src/main/java/org/apache/ignite/stream/mqtt/MqttStreamer.java,35,import org.apache.ignite.stream.StreamSingleTupleExtractor;
modules/schedule/src/main/java/org/apache/ignite/internal/processors/schedule/IgniteScheduleProcessor.java,20,import it.sauronsoftware.cron4j.Scheduler;
modules/schedule/src/main/java/org/apache/ignite/internal/processors/schedule/ScheduleFutureImpl.java,20,import it.sauronsoftware.cron4j.InvalidPatternException;
modules/schedule/src/main/java/org/apache/ignite/internal/processors/schedule/ScheduleFutureImpl.java,21,import it.sauronsoftware.cron4j.Predictor;
modules/schedule/src/main/java/org/apache/ignite/internal/processors/schedule/ScheduleFutureImpl.java,22,import it.sauronsoftware.cron4j.Scheduler;
modules/schedule/src/main/java/org/apache/ignite/internal/processors/schedule/ScheduleFutureImpl.java,23,import it.sauronsoftware.cron4j.SchedulingPattern;
modules/ssh/src/main/java/org/apache/ignite/internal/util/nodestart/StartNodeCallableImpl.java,20,import com.jcraft.jsch.ChannelExec;
modules/ssh/src/main/java/org/apache/ignite/internal/util/nodestart/StartNodeCallableImpl.java,21,import com.jcraft.jsch.ChannelShell;
modules/ssh/src/main/java/org/apache/ignite/internal/util/nodestart/StartNodeCallableImpl.java,22,import com.jcraft.jsch.JSch;
modules/ssh/src/main/java/org/apache/ignite/internal/util/nodestart/StartNodeCallableImpl.java,23,import com.jcraft.jsch.JSchException;
modules/ssh/src/main/java/org/apache/ignite/internal/util/nodestart/StartNodeCallableImpl.java,24,import com.jcraft.jsch.Session;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionV2.java,28,import javax.servlet.ServletContext;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionV2.java,29,import javax.servlet.http.HttpSession;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionV2.java,30,import javax.servlet.http.HttpSessionContext;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionV2.java,31,import java.io.IOException;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionV2.java,32,import java.util.Collections;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionV2.java,33,import java.util.Enumeration;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionV2.java,34,import java.util.HashMap;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionV2.java,35,import java.util.HashSet;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionV2.java,36,import java.util.Map;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionV2.java,37,import java.util.Set;
modules/yardstick/src/main/java/org/apache/ignite/yardstick/IgniteBenchmarkArguments.java,20,import com.beust.jcommander.Parameter;
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,40,import org.apache.ignite.internal.processors.cache.GridCacheContext;
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,216,if (ctx.config().isPeerClassLoadingEnabled()) {
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,217,GridCacheContext cctx =
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,218,ctx.cache().internalCache(cacheName).context();
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,220,if (cctx.deploymentEnabled() &&
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,221,ctx.discovery().cacheNode(node, cacheName)) {
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,226,cctx.deploy().prepare(wrapper);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentCommunication.java,209,int idx = clsName.indexOf(".class");
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentCommunication.java,212,clsName = clsName.substring(0, idx);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,499,while (workersCnt.sum() != 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,500,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,501,Thread.sleep(200);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,503,catch (InterruptedException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,504,interrupted = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheManagerAdapter.java,31,protected GridCacheContext cctx;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformContextImpl.java,116,private final Set<UUID> sentNodes = Collections.newSetFromMap(new ConcurrentHashMap<UUID, Boolean>());
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,18,package org.apache.ignite.internal.util.portscanner;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,20,import java.io.File;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,21,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,22,import java.io.RandomAccessFile;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,23,import java.net.InetAddress;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,24,import java.net.ServerSocket;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,25,import java.net.UnknownHostException;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,26,import java.nio.channels.FileLock;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,27,import org.apache.ignite.IgniteSystemProperties;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,32,public class GridJmxPortFinder {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,34,public static final String IGNITE_JMX_PORT = "IGNITE_JMX_PORT";
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,37,private static final int MIN_PORT = 49112;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,40,private static final int MAX_PORT = 65535;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,45,private GridJmxPortFinder() {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,55,public static void main(String[] args) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,56,try {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,57,InetAddress.getLocalHost();
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,59,catch (UnknownHostException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,62,return;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,65,int jmxPort = IgniteSystemProperties.getInteger(IGNITE_JMX_PORT, -1);
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,67,if (jmxPort != -1) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,68,System.out.println(jmxPort);
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,70,return;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,73,RandomAccessFile ra = null;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,74,FileLock lock = null;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,76,try {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,77,File file = new File(System.getProperty("java.io.tmpdir"), "ignite.lastport.tmp");
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,79,file.setReadable(true, false);
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,80,file.setWritable(true, false);
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,82,ra = new RandomAccessFile(file, "rw");
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,84,lock = ra.getChannel().lock();
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,86,ra.seek(0);
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,88,String startPortStr = ra.readLine();
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,90,int startPort = MIN_PORT;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,92,if (startPortStr != null && !startPortStr.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,93,try {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,94,startPort = Integer.valueOf(startPortStr) + 1;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,97,startPort = MIN_PORT;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,99,catch (NumberFormatException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,104,int port = findPort(startPort);
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,106,ra.setLength(0);
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,108,ra.writeBytes(String.valueOf(port));
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,111,System.out.println(port);
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,113,catch (IOException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,116,finally {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,118,try {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,119,lock.release();
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,121,catch (IOException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,126,try {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,127,ra.close();
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,129,catch (IOException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,141,private static int findPort(int startPort) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,142,for (int port = startPort; port <= MAX_PORT; port++) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,144,return port;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,147,return 0;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,156,private static boolean isAvailable(int port) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,157,ServerSocket sock = null;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,159,try {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,160,sock = new ServerSocket(port);
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,162,return true;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,164,catch (IOException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,165,return false;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,167,finally {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,168,if (sock != null) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,169,try {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,170,sock.close();
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,172,catch (IOException ignored) {
modules/core/src/main/java/org/apache/ignite/startup/cmdline/CommandLineTransformer.java,61,private boolean noJMX;
modules/core/src/main/java/org/apache/ignite/startup/cmdline/CommandLineTransformer.java,139,case "-nojmx":
modules/core/src/main/java/org/apache/ignite/startup/cmdline/CommandLineTransformer.java,140,noJMX = true;
modules/core/src/main/java/org/apache/ignite/startup/cmdline/CommandLineTransformer.java,142,break;
modules/core/src/main/java/org/apache/ignite/startup/cmdline/CommandLineTransformer.java,164,addArgWithValue(sb, "NO_JMX", formatBooleanValue(noJMX));
